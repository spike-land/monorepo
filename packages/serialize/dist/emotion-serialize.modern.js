var e={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function t(e){var t=Object.create(null);return function(o){return void 0===t[o]&&(t[o]=e(o)),t[o]}}const o="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";let n=/[A-Z]|^ms/g,r=/_EMO_([^_]+?)_([^]*?)_EMO_/g;const s=e=>45===e.charCodeAt(1),i=e=>null!=e&&"boolean"!=typeof e,a=t(e=>s(e)?e:e.replace(n,"-$&").toLowerCase());let l=(t,o)=>{switch(t){case"animation":case"animationName":if("string"==typeof o)return o.replace(r,(e,t,o)=>(p={name:t,styles:o,next:p},t))}return 1===e[t]||s(t)||"number"!=typeof o||0===o?o:o+"px"};if("production"!==process.env.NODE_ENV){let e=/(attr|calc|counters?|url)\(/,t=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit","unset"],o=l,n=/^-ms-/,r=/-(.)/g,i={};l=(a,l)=>{if("content"===a&&("string"!=typeof l||-1===t.indexOf(l)&&!e.test(l)&&(l.charAt(0)!==l.charAt(l.length-1)||'"'!==l.charAt(0)&&"'"!==l.charAt(0))))throw new Error(`You seem to be using a value for 'content' without quotes, try replacing it with \`content: '"${l}"'\``);const c=o(a,l);return""===c||s(a)||-1===a.indexOf("-")||void 0!==i[a]||(i[a]=!0,console.error(`Using kebab-case for css properties in objects is not supported. Did you mean ${a.replace(n,"ms-").replace(r,(e,t)=>t.toUpperCase())}?`)),c}}function c(e,t,o){if(null==o)return"";if(void 0!==o.__emotion_styles){if("production"!==process.env.NODE_ENV&&"NO_COMPONENT_SELECTOR"===o.toString())throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");return o}switch(typeof o){case"boolean":return"";case"object":if(1===o.anim)return p={name:o.name,styles:o.styles,next:p},o.name;if(void 0!==o.styles){let e=o.next;if(void 0!==e)for(;void 0!==e;)p={name:e.name,styles:e.styles,next:p},e=e.next;let t=`${o.styles};`;return"production"!==process.env.NODE_ENV&&void 0!==o.map&&(t+=o.map),t}return function(e,t,o){let n="";if(Array.isArray(o))for(let r=0;r<o.length;r++)n+=`${c(e,t,o[r])};`;else for(let r in o){let s=o[r];if("object"!=typeof s)null!=t&&void 0!==t[s]?n+=`${r}{${t[s]}}`:i(s)&&(n+=`${a(r)}:${l(r,s)};`);else{if("NO_COMPONENT_SELECTOR"===r&&"production"!==process.env.NODE_ENV)throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");if(!Array.isArray(s)||"string"!=typeof s[0]||null!=t&&void 0!==t[s[0]]){const o=c(e,t,s);switch(r){case"animation":case"animationName":n+=`${a(r)}:${o};`;break;default:"production"!==process.env.NODE_ENV&&"undefined"===r&&console.error("You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key)."),n+=`${r}{${o}}`}}else for(let e=0;e<s.length;e++)i(s[e])&&(n+=`${a(r)}:${l(r,s[e])};`)}}return n}(e,t,o);case"function":if(void 0!==e){let n=p,r=o(e);return p=n,c(e,t,r)}"production"!==process.env.NODE_ENV&&console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");break;case"string":if("production"!==process.env.NODE_ENV){const e=[],t=o.replace(r,(t,o,n)=>{const r=`animation${e.length}`;return e.push(`const ${r} = keyframes\`${n.replace(/^@keyframes animation-\w+/,"")}\``),`\${${r}}`});e.length&&console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n"+[...e,`\`${t}\``].join("\n")+"\n\nYou should wrap it with `css` like this:\n\n"+`css\`${t}\``)}}if(null==t)return o;const n=t[o];return void 0!==n?n:o}let u,p,d=/label:\s*([^\s;\n{]+)\s*;/g;"production"!==process.env.NODE_ENV&&(u=/\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g);const f=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];let r=!0,s="";p=void 0;let i,a=e[0];null==a||void 0===a.raw?(r=!1,s+=c(n,t,a)):("production"!==process.env.NODE_ENV&&void 0===a[0]&&console.error(o),s+=a[0]);for(let i=1;i<e.length;i++)s+=c(n,t,e[i]),r&&("production"!==process.env.NODE_ENV&&void 0===a[i]&&console.error(o),s+=a[i]);"production"!==process.env.NODE_ENV&&(s=s.replace(u,e=>(i=e,""))),d.lastIndex=0;let l,f="";for(;null!==(l=d.exec(s));)f+="-"+l[1];let m=function(e){for(var t,o=0,n=0,r=e.length;r>=4;++n,r-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),o=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&o)+(59797*(o>>>16)<<16);switch(r){case 3:o^=(255&e.charCodeAt(n+2))<<16;case 2:o^=(255&e.charCodeAt(n+1))<<8;case 1:o=1540483477*(65535&(o^=255&e.charCodeAt(n)))+(59797*(o>>>16)<<16)}return(((o=1540483477*(65535&(o^=o>>>13))+(59797*(o>>>16)<<16))^o>>>15)>>>0).toString(36)}(s)+f;return"production"!==process.env.NODE_ENV?{name:m,styles:s,map:i,next:p,toString:()=>"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}:{name:m,styles:s,next:p}};export{f as serializeStyles};
//# sourceMappingURL=emotion-serialize.modern.js.map
