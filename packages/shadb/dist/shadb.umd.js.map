{"version":3,"file":"shadb.umd.js","sources":["../src/getDbObj.js","../src/shaDB.js"],"sourcesContent":["import {\n  assemble,\n  diff,\n  isDiff,\n} from \"https://unpkg.com/@zedvision/diff@10.12.3/dist/diff.min.js\";\n\nexport const getDbObj = (dbPromise, isIdb = false) => {\n  const sha256 = async (x) =>\n    Array.from(\n      new Uint8Array(\n        await crypto.subtle.digest(\n          \"SHA-256\",\n          typeof x === \"string\" ? new TextEncoder().encode(x) : x,\n        ),\n      ).slice(0, 4),\n    ).map((b) => (\"00\" + b.toString(16)).slice(-2)).join(\"\");\n  const dbObj = {\n    async get(key, format = \"string\") {\n      let data;\n      try {\n        if (isIdb) {\n          data = await (await dbPromise).get(\"codeStore\", key);\n        } else {\n          data = await dbPromise.get(key);\n        }\n        if (!data) {\n          return null;\n        }\n      } catch (_) {\n        return null;\n        //key not found that we write - its ok.\n      }\n      if (format === \"json\") {\n        return JSON.parse(data);\n      }\n      const allData = await data;\n      if (format === \"string\") {\n        if (typeof allData === \"string\" && format === \"string\") {\n          const text = allData;\n          if (isDiff(text)) {\n            const keyOfDiff = text.slice(0, 8);\n            const instructions = text.slice(8);\n            const oldValue = await dbObj.get(keyOfDiff);\n            return assemble(oldValue, instructions);\n          }\n          return allData;\n        }\n        return new TextDecoder().decode(allData);\n      }\n      return data;\n    },\n    async put(key, val) {\n      let prev;\n      try {\n        const oldKey = await dbObj.get(key);\n        // console.log(realKey);\n        if (\n          typeof oldKey === \"string\" && typeof val === \"string\" &&\n          oldKey.length === 8 && oldKey !== val\n        ) {\n          const actualValue = await dbObj.get(val);\n          const prevValue = await dbObj.get(oldKey);\n          if (typeof prevValue === \"string\") {\n            const prevSha = await sha256(prevValue);\n            if (prevSha === oldKey) {\n              const diffObj = await diff(actualValue, prevValue);\n              const diffAsStr = diffObj.b + JSON.stringify(diffObj.c);\n              dbObj.put(prevSha, diffAsStr);\n            }\n          }\n        }\n      } catch {\n        prev = \"\";\n      }\n      if (prev !== \"\" && val === prev) {\n        return val;\n      }\n      let str;\n      if (typeof val !== \"string\") {\n        str = new TextDecoder().decode(val);\n      } else {\n        str = val;\n      }\n      if (isIdb) {\n        return (await dbPromise).put(\"codeStore\", str, key);\n      } else {\n        return await dbPromise.put(key, str);\n      }\n    },\n    async delete(key) {\n      return (await dbPromise).delete(\"codeStore\", key);\n    },\n    async clear() {\n      return (await dbPromise).clear(\"codeStore\");\n    },\n    async keys() {\n      return (await dbPromise).getAllKeys(\"codeStore\");\n    },\n  };\n  return dbObj;\n};\n","import { openDB } from \"https://unpkg.com/idb@5.0.8/build/esm/index.js\";\nimport { getDbObj } from \"./getDbObj.js\";\n\nexport function getDB() {\n  const dbPromise = openDB(\"zed-vision-alpha\", 2, {\n    upgrade(db) {\n      db.createObjectStore(\"sha-store\");\n    },\n    blocked() {\n    },\n    blocking() {\n    },\n    terminated() {\n    },\n  });\n\n  return getDbObj(dbPromise, true);\n}\n"],"names":["body","recover","result","e","then","dbPromise","isIdb","dbObj","get","key","format","data","JSON","parse","allData","TextDecoder","decode","text","isDiff","keyOfDiff","slice","instructions","oldValue","assemble","_dbPromise","put","val","prev","str","oldKey","length","actualValue","prevValue","x","crypto","subtle","digest","TextEncoder","encode","Array","from","Uint8Array","map","b","toString","join","sha256","prevSha","diff","diffObj","diffAsStr","stringify","c","clear","keys","getAllKeys","getDbObj","openDB","upgrade","db","createObjectStore","blocked","blocking","terminated"],"mappings":"0eAkjBO,WAAgBA,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,qBC3iBN,ODVsB,SAACG,EAAWC,YAAAA,IAAAA,GAAQ,GAC1C,IASMC,EAAQ,CACNC,aAAIC,EAAKC,YAAAA,IAAAA,EAAS,oBAClBC,2BAcW,SAAXD,EACKE,KAAKC,MAAMF,mBAEEA,iBAAhBG,yBACS,WAAXJ,0CAWSK,aAAcC,OAAOF,qBAVT,iBAAZA,GAAmC,WAAXJ,qCAQ1BI,IAPDG,EAAOH,kBACTI,SAAOD,IACT,IAAME,EAAYF,EAAKG,MAAM,EAAG,GAC1BC,EAAeJ,EAAKG,MAAM,GAxBN,uBAyBHb,EAAMC,IAAIW,kBAA3BG,cACCC,WAASD,EAAUD,gIAMzBV,QAAAA,qCAxBAA,wBALDL,kBACkBD,2CAAPmB,EAAkBhB,IAAI,YAAaC,qBAAhDE,wBAEaN,EAAUG,IAAIC,qBAA3BE,oHAPM,oCAmCNc,aAAIhB,EAAKiB,WACTC,eAsBJ,MAAa,KAATA,GAAeD,IAAQC,EAClBD,GAIPE,EADiB,iBAARF,GACH,IAAIX,aAAcC,OAAOU,GAEzBA,EAEJpB,kBACYD,oBAAd,SAAyBoB,IAAI,YAAaG,EAAKnB,qBAElCJ,EAAUoB,IAAIhB,EAAKmB,KATlC,IAAIA,yCAvBmBrB,EAAMC,IAAIC,kBAAzBoB,uBAGc,iBAAXA,GAAsC,iBAARH,GACnB,IAAlBG,EAAOC,QAAgBD,IAAWH,yBAERnB,EAAMC,IAAIkB,kBAA9BK,0BACkBxB,EAAMC,IAAIqB,kBAA5BG,uBACmB,iBAAdA,kCAvDGC,8BAGVC,OAAOC,OAAOC,OAClB,UACa,iBAANH,GAAiB,IAAII,aAAcC,OAAOL,GAAKA,4BAJ5DM,MAAMC,KACJ,IAAIC,cAKFrB,MAAM,EAAG,IACXsB,IAAI,SAACC,UAAO,KAAOA,EAAEC,SAAS,KAAKxB,OAAO,KAAIyB,KAAK,yCAgDvBC,CAAOd,kBAAvBe,uBACFA,IAAYlB,yBACQmB,OAAKjB,EAAaC,kBAAlCiB,GACN,IAAMC,EAAYD,EAAQN,EAAI/B,KAAKuC,UAAUF,EAAQG,GACrD7C,EAAMkB,IAAIsB,EAASG,6JAKzBvB,EAAO,qDAxDC,oDAyEClB,8BACGJ,oBAAd,gBAAgC,YAAaI,KA1EnC,oCA4EN4C,4CACUhD,oBAAd,SAAyBgD,MAAM,eA7ErB,oCA+ENC,2CACUjD,oBAAd,SAAyBkD,WAAW,eAhF1B,qCAmFd,OAAOhD,ECnFAiD,CAZWC,SAAO,mBAAoB,EAAG,CAC9CC,iBAAQC,GACNA,EAAGC,kBAAkB,cAEvBC,qBAEAC,sBAEAC,2BAIyB"}