{"version":3,"file":"shadb.modern.js","sources":["../src/shaDB.js","../src/getDbObj.js"],"sourcesContent":["import { openDB } from \"idb\"\nimport { getDbObj } from \"./getDbObj\";\n\nexport function getDB() {\n  const dbPromise = openDB(\"localZedCodeStore\", 1, {\n    upgrade(db) {\n      db.createObjectStore(\"codeStore\");\n    },\n    blocked() {\n    },\n    blocking() {\n    },\n    terminated() {\n    },\n  });\n\n  return getDbObj(dbPromise, true);\n}\n","import {\n  assemble,\n  diff,\n  isDiff,\n} from \"https://unpkg.com/@zedvision/diff@10.10.18/dist/diff.min.js\";\n\nexport const getDbObj = (dbPromise, isIdb = false) => {\n  const sha256 = async (x) =>\n    Array.from(\n      new Uint8Array(\n        await crypto.subtle.digest(\n          \"SHA-256\",\n          typeof x === \"string\" ? new TextEncoder().encode(x) : x,\n        ),\n      ).slice(0, 4),\n    ).map((b) => (\"00\" + b.toString(16)).slice(-2)).join(\"\");\n  const dbObj = {\n    async get(key, format = \"string\") {\n      let data;\n      try {\n        if (isIdb) {\n          data = await (await dbPromise).get(\"codeStore\", key);\n        } else {\n          data = await dbPromise.get(key);\n        }\n        if (!data) {\n          return null;\n        }\n      } catch (_) {\n        return null;\n        //key not found that we write - its ok.\n      }\n      if (format === \"json\") {\n        return JSON.parse(data);\n      }\n      if (format === \"string\") {\n        const allData = await data;\n        if (typeof allData === \"string\" && format === \"string\") {\n          const text = allData;\n          if (isDiff(text)) {\n            const keyOfDiff = text.slice(0, 8);\n            const instructions = text.slice(8);\n            const oldValue = await dbObj.get(keyOfDiff);\n            return assemble(oldValue, instructions);\n          }\n          return allData;\n        }\n        return new TextDecoder().decode(allData);\n      }\n      return data;\n    },\n    async put(key, val) {\n      let prev;\n      try {\n        const oldKey = await dbObj.get(key);\n        // console.log(realKey);\n        if (\n          typeof oldKey === \"string\" && typeof val === \"string\" &&\n          oldKey.length === 8 && oldKey !== val\n        ) {\n          const actualValue = await dbObj.get(val);\n          const prevValue = await dbObj.get(oldKey);\n          if (typeof prevValue === \"string\") {\n            const prevSha = await sha256(prevValue);\n            if (prevSha === oldKey) {\n              const diffObj = await diff(actualValue, prevValue);\n              const diffAsStr = diffObj.b + JSON.stringify(diffObj.c);\n              dbObj.put(prevSha, diffAsStr);\n            }\n          }\n        }\n      } catch {\n        prev = \"\";\n      }\n      if (prev !== \"\" && val === prev) {\n        return val;\n      }\n      let str;\n      if (typeof val !== \"string\") {\n        str = new TextDecoder().decode(val);\n      } else {\n        str = val;\n      }\n      if (isIdb) {\n        return (await dbPromise).put(\"codeStore\", str, key);\n      } else {\n        return await dbPromise.put(key, str);\n      }\n    },\n    async delete(key) {\n      return (await dbPromise).delete(\"codeStore\", key);\n    },\n    async clear() {\n      return (await dbPromise).clear(\"codeStore\");\n    },\n    async keys() {\n      return (await dbPromise).getAllKeys(\"codeStore\");\n    },\n  };\n  return dbObj;\n};\n"],"names":["getDB","dbPromise","isIdb","dbObj","[object Object]","key","format","data","get","_","JSON","parse","allData","text","isDiff","keyOfDiff","slice","instructions","oldValue","assemble","TextDecoder","decode","val","prev","str","oldKey","length","actualValue","prevValue","prevSha","async","x","Array","from","Uint8Array","crypto","subtle","digest","TextEncoder","encode","map","b","toString","join","sha256","diffObj","diff","diffAsStr","stringify","c","put","delete","clear","keys","getAllKeys","getDbObj","openDB","upgrade","db","createObjectStore","blocked","blocking","terminated"],"mappings":"mJAGgBA,IAad,MCVsB,EAACC,EAAWC,GAAQ,KAC1C,MASMC,EAAQ,CACZC,UAAUC,EAAKC,EAAS,UACtB,IAAIC,EACJ,IAME,GAJEA,EADEL,cACkBD,GAAWO,IAAI,YAAaH,SAEnCJ,EAAUO,IAAIH,IAExBE,EACH,YAEF,MAAOE,GACP,YAGF,GAAe,SAAXH,EACF,OAAOI,KAAKC,MAAMJ,GAEpB,GAAe,WAAXD,EAAqB,CACvB,MAAMM,QAAgBL,EACtB,GAAuB,iBAAZK,GAAmC,WAAXN,EAAqB,CACtD,MAAMO,EAAOD,EACb,GAAIE,EAAOD,GAAO,CAChB,MAAME,EAAYF,EAAKG,MAAM,EAAG,GAC1BC,EAAeJ,EAAKG,MAAM,GAC1BE,QAAiBf,EAAMK,IAAIO,GACjC,OAAOI,EAASD,EAAUD,GAE5B,OAAOL,EAET,WAAWQ,aAAcC,OAAOT,GAElC,OAAOL,GAETH,UAAUC,EAAKiB,GACb,IAAIC,EAyBAC,EAxBJ,IACE,MAAMC,QAAetB,EAAMK,IAAIH,GAE/B,GACoB,iBAAXoB,GAAsC,iBAARH,GACnB,IAAlBG,EAAOC,QAAgBD,IAAWH,EAClC,CACA,MAAMK,QAAoBxB,EAAMK,IAAIc,GAC9BM,QAAkBzB,EAAMK,IAAIiB,GAClC,GAAyB,iBAAdG,EAAwB,CACjC,MAAMC,OAxDDC,OAAOC,GACpBC,MAAMC,KACJ,IAAIC,iBACIC,OAAOC,OAAOC,OAClB,UACa,iBAANN,GAAiB,IAAIO,aAAcC,OAAOR,GAAKA,IAExDf,MAAM,EAAG,IACXwB,IAAKC,IAAO,KAAOA,EAAEC,SAAS,KAAK1B,OAAO,IAAI2B,KAAK,IAgDvBC,CAAOhB,GAC7B,GAAIC,IAAYJ,EAAQ,CACtB,MAAMoB,QAAgBC,EAAKnB,EAAaC,GAClCmB,EAAYF,EAAQJ,EAAI/B,KAAKsC,UAAUH,EAAQI,GACrD9C,EAAM+C,IAAIrB,EAASkB,MAIzB,SACAxB,EAAO,GAET,MAAa,KAATA,GAAeD,IAAQC,EAClBD,GAIPE,EADiB,iBAARF,GACH,IAAIF,aAAcC,OAAOC,GAEzBA,EAEJpB,SACYD,GAAWiD,IAAI,YAAa1B,EAAKnB,SAElCJ,EAAUiD,IAAI7C,EAAKmB,KAGpC2B,OAAA,MAAa9C,UACGJ,GAAWkD,OAAO,YAAa9C,GAE/C+C,MAAA,gBACgBnD,GAAWmD,MAAM,aAEjCC,KAAA,gBACgBpD,GAAWqD,WAAW,cAGxC,OAAOnD,GDnFAoD,CAZWC,EAAO,oBAAqB,EAAG,CAC/CC,QAAQC,GACNA,EAAGC,kBAAkB,cAEvBC,YAEAC,aAEAC,kBAIyB"}