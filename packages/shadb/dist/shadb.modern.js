import{openDB as t}from"https://unpkg.com/idb@5.0.8/build/esm/index.js";import{isDiff as e,assemble as r,diff as i}from"https://unpkg.com/@zedvision/diff@10.12.3/dist/diff.min.js";function n(){return((t,n=!1)=>{const o={async get(i,a="string"){let c;try{if(c=n?await(await t).get("codeStore",i):await t.get(i),!c)return null}catch(t){return null}if("json"===a)return JSON.parse(c);const s=await c;if("string"===a){if("string"==typeof s&&"string"===a){const t=s;if(e(t)){const e=t.slice(0,8),i=t.slice(8),n=await o.get(e);return r(n,i)}return s}return(new TextDecoder).decode(s)}return c},async put(e,r){let a,c;try{const t=await o.get(e);if("string"==typeof t&&"string"==typeof r&&8===t.length&&t!==r){const e=await o.get(r),n=await o.get(t);if("string"==typeof n){const r=await(async t=>Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256","string"==typeof t?(new TextEncoder).encode(t):t)).slice(0,4)).map(t=>("00"+t.toString(16)).slice(-2)).join(""))(n);if(r===t){const t=await i(e,n),a=t.b+JSON.stringify(t.c);o.put(r,a)}}}}catch(t){a=""}return""!==a&&r===a?r:(c="string"!=typeof r?(new TextDecoder).decode(r):r,n?(await t).put("codeStore",c,e):await t.put(e,c))},delete:async e=>(await t).delete("codeStore",e),clear:async()=>(await t).clear("codeStore"),keys:async()=>(await t).getAllKeys("codeStore")};return o})(t("localZedCodeStore",1,{upgrade(t){t.createObjectStore("codeStore")},blocked(){},blocking(){},terminated(){}}),!0)}export{n as getDB};
//# sourceMappingURL=shadb.modern.js.map
