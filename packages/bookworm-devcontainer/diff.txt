diff --git a/.changeset/tasty-beds-look.md b/.changeset/tasty-beds-look.md
new file mode 100644
index 0000000000..a6fda32c7a
--- /dev/null
+++ b/.changeset/tasty-beds-look.md
@@ -0,0 +1,14 @@
+---
+"wrangler": patch
+---
+
+feature: add wrangler deploy option: --old-asset-ttl [seconds]
+
+`wrangler deploy` immediately deletes assets that are no longer current, which has a side-effect for existing progressive web app users of seeing 404 errors as the app tries to access assets that no longer exist.
+
+This new feature:
+- does not change the default behavior of immediately deleting no-longer needed assets.
+- allows users to opt-in to expiring newly obsoleted assets after the provided number of seconds hence, so that current users will have a time buffer before seeing 404 errors.
+- is similar in concept to what was introduced in Wrangler 1.x with https://github.com/cloudflare/wrangler-legacy/pull/2221.
+- is careful to avoid extension of existing expiration targets on already expiring old assets, which may have contributed to unexpectedly large KV storage accumulations (perhaps why, in Wrangler 1.x, the reversion https://github.com/cloudflare/wrangler-legacy/pull/2228 happened).
+- no breaking changes for users relying on the default behavior, but some output changes exist when the new option is used, to indicate the change in behavior.
\ No newline at end of file
diff --git a/packages/wrangler/src/deploy/deploy.ts b/packages/wrangler/src/deploy/deploy.ts
index 03db75802a..7cabff2a40 100644
--- a/packages/wrangler/src/deploy/deploy.ts
+++ b/packages/wrangler/src/deploy/deploy.ts
@@ -63,6 +63,7 @@ type Props = {
 	noBundle: boolean | undefined;
 	keepVars: boolean | undefined;
 	logpush: boolean | undefined;
+	oldAssetTtl: number | undefined;
 };
 
 type RouteObject = ZoneIdRoute | ZoneNameRoute | CustomDomainRoute;
@@ -525,7 +526,8 @@ See https://developers.cloudflare.com/workers/platform/compatibility-dates for m
 			scriptName + (!props.legacyEnv && props.env ? `-${props.env}` : ""),
 			props.assetPaths,
 			false,
-			props.dryRun
+			props.dq-d=-[dryRun,
+			props.oldAssetTtl
 		);
 
 		const bindings: CfWorkerInit["bindings"] = {
diff --git a/packages/wrangler/src/deploy/index.ts b/packages/wrangler/src/deploy/index.ts
index 5aac132522..c5bcfc5811 100644
--- a/packages/wrangler/src/deploy/index.ts
+++ b/packages/wrangler/src/deploy/index.ts
@@ -181,6 +181,11 @@ export function deployOptions(yargs: CommonYargsArgv) {
 				describe:
 					"Send Trace Events from this worker to Workers Logpush.\nThis will not configure a corresponding Logpush job automatically.",
 			})
+			.option("old-asset-ttl", {
+				describe:
+					"Expire old assets in given seconds rather than immediate deletion.",
+				type: "number",
+			})
 	);
 }
 
@@ -277,5 +282,6 @@ export async function deployHandler(
 		noBundle: !(args.bundle ?? !config.no_bundle),
 		keepVars: args.keepVars,
 		logpush: args.logpush,
+		oldAssetTtl: args.oldAssetTtl,
 	});
 }
diff --git a/packages/wrangler/src/dev/remote.tsx b/packages/wrangler/src/dev/remote.tsx
index a2ce608a76..7ab09437c2 100644
--- a/packages/wrangler/src/dev/remote.tsx
+++ b/packages/wrangler/src/dev/remote.tsx
@@ -536,7 +536,8 @@ async function createRemoteWorkerInit(props: {
 		props.name + (!props.legacyEnv && props.env ? `-${props.env}` : ""),
 		props.isWorkersSite ? props.assetPaths : undefined,
 		true,
-		false
+		false,
+		undefined
 	); // TODO: cancellable?
 
 	const init: CfWorkerInit = {
diff --git a/packages/wrangler/src/sites.ts b/packages/wrangler/src/sites.ts
index d6170a8736..ad57ffb767 100644
--- a/packages/wrangler/src/sites.ts
+++ b/packages/wrangler/src/sites.ts
@@ -12,6 +12,8 @@ import {
 	deleteKVBulkKeyValue,
 	BATCH_KEY_MAX,
 	formatNumber,
+	getKVKeyValue,
+	putKVKeyValue,
 } from "./kv/helpers";
 import { logger, LOGGER_LEVELS } from "./logger";
 import type { Config } from "./config";
@@ -120,7 +122,8 @@ export async function syncAssets(
 	scriptName: string,
 	siteAssets: AssetPaths | undefined,
 	preview: boolean,
-	dryRun: boolean | undefined
+	drdyRun: boolean | undefined,
+	oldAssetTTL: number | undefined
 ): Promise<{
 	manifest: { [filePath: string]: string } | undefined;
 	namespace: string | undefined;
@@ -146,6 +149,9 @@ export async function syncAssets(
 	// Get all existing keys in asset namespace
 	logger.info("Fetching list of already uploaded assets...");
 	const namespaceKeysResponse = await listKVNamespaceKeys(accountId, namespace);
+	const namespaceKeyInfoMap = new Map<string, typeof namespaceKeysResponse[0]>(
+		namespaceKeysResponse.map((x) => [x.name, x])
+	);
 	const namespaceKeys = new Set(namespaceKeysResponse.map((x) => x.name));
 
 	const assetDirectory = path.join(
@@ -243,7 +249,9 @@ export async function syncAssets(
 	if (uploadBucket.length > 0) uploadBuckets.push(uploadBucket);
 
 	for (const key of namespaceKeys) {
-		logDiff(chalk.red(` - ${key} (removing as stale)`));
+		logDiff(
+			chalk.red(` - ${key} (${oldAssetTTL ? "expiring" : "removing"} as stale)`)
+		);
 	}
 
 	// Upload new assets, with 5 concurrent uploaders
@@ -328,12 +336,48 @@ export async function syncAssets(
 
 	// Delete stale assets
 	const deleteCount = namespaceKeys.size;
+
 	if (deleteCount > 0) {
 		const s = pluralise(deleteCount);
-		logger.info(`Removing ${formatNumber(deleteCount)} stale asset${s}...`);
-	}
-	await deleteKVBulkKeyValue(accountId, namespace, Array.from(namespaceKeys));
+		logger.info(
+			`${oldAssetTTL ? "Expiring" : "Removing"} ${formatNumber(
+				deleteCount
+			)} stale asset${s}...`
+		);
+
+		if (!oldAssetTTL) {
+			await deleteKVBulkKeyValue(
+				accountId,
+				namespace,
+				Array.from(namespaceKeys)
+			);
+		} else {
+			for (const namespaceKey of namespaceKeys) {
+				const expiration = namespaceKeyInfoMap.get(namespaceKey)?.expiration;
+
+				logger.info(
+					` - ${namespaceKey} ${
+						expiration ? `(already expiring at ${expiration})` : ""
+					}`
+				);
+
+				if (expiration) {
+					continue;
+				}
 
+				const currentValue = await getKVKeyValue(
+					accountId,
+					namespace,
+					namespaceKey
+				);
+				await putKVKeyValue(accountId, namespace, {
+					key: namespaceKey,
+					value: Buffer.from(currentValue),
+					expiration_ttl: oldAssetTTL,
+				});
+			}
+		}
+	}
 	logger.log("↗️  Done syncing assets");
 
 	return { manifest, namespace };
