const diff=async(t,e)=>{const{Diff:s}=await import("https://unpkg.com/diff@5.0.0/lib/index.es6.js"),{sha256:n}=await import("https://unpkg.com/@zedvision/sha256@10.12.14/sha256.js"),c=n(t),r=new s,l=r.diff(t,e);return{b:await c,c:l.map(u=>u.added?u.value:u.removed?-u.count:u.count)}},corsHeaders={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,HEAD,POST,OPTIONS","Access-Control-Max-Age":"86400"},isDiff=t=>{if(t.length<10)return!1;const e=[...t.slice(0,8)].filter(n=>n<"0"||n>"f").length===0,s=t.slice(8);if(e&&s[0]==="["&&s[s.length-1]==="]")try{return JSON.parse(s).length>1}catch{return!1}return!1},assemble=(t,e)=>{const s=JSON.parse(e);let n=t.slice(),c="";return s.forEach(r=>{if(Number(r)===r){const l=Math.abs(r),u=n.slice(0,l);n=n.slice(l),r>0&&(c+=String(u))}else c+=String(r)}),c},sha256=async t=>Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256",typeof t=="string"?new TextEncoder().encode(t):t)).slice(0,4)).map(e=>("00"+e.toString(16)).slice(-2)).join(""),getDbObj=t=>{const e={async get(s,n="string"){let c;try{if(c=await t.get(s),!c)return null}catch(l){return null}if(n==="json")return JSON.parse(c);const r=await c;if(n==="string"){if(typeof r=="string"&&n==="string"){const l=r;if(isDiff(r)){const u=r.slice(0,8),o=r.slice(8),a=await e.get(u);return assemble(a,o)}return r}return new TextDecoder().decode(r)}return c},async put(s,n){let c;try{const l=await e.get(s);if(typeof l=="string"&&typeof n=="string"&&l.length===8&&l!==n){const u=await e.get(n),o=await e.get(l);if(typeof o=="string"){const a=await sha256(o);if(a===l){const d=await diff(u,o),g=d.b+JSON.stringify(d.c);await e.put(a,g)}}}}catch{c=""}if(c!==""&&n===c)return n;let r;return typeof n!="string"?r=new TextDecoder().decode(n):r=n,await t.put(s,r)},async delete(s){return await t.delete(s)},async clear(){return await t.clear()},async keys(){return await t.getAllKeys()}};return e};function json(t){return new Response(JSON.stringify(t),{headers:{...corsHeaders,"Content-Type":"application/json;charset=UTF-8"}})}function text(t){return new Response(t,{headers:{...corsHeaders,"Content-Type":"text/html;charset=UTF-8"}})}function js(t){return new Response(t,{headers:{...corsHeaders,"Content-Type":"application/javascript;charset=UTF-8"}})}function handleOptions(t){const e=t.headers;if(e.get("Origin")!==null&&e.get("Access-Control-Request-Method")!==null&&e.get("Access-Control-Request-Headers")!==null){const s={...corsHeaders,"Access-Control-Allow-Headers":t.headers.get("Access-Control-Request-Headers")};return new Response(null,{headers:s})}else return new Response(null,{headers:{Allow:corsHeaders["Access-Control-Allow-Methods"]}})}let now=0;var LOGS;async function handleAdmin(t,e,s,n){if(s==="/keys/"){const c=e.get("prefix"),r=await n.list({prefix:c});return json(r)}if(s==="/keys/delete/"){const c=e.get("hash"),r=await n.delete(c);return json(r)}return json({error:"not implemented"})}var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const __default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(t){return typeof t=="string"&&__default.test(t)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,s=(byteToHex[t[e+0]]+byteToHex[t[e+1]]+byteToHex[t[e+2]]+byteToHex[t[e+3]]+"-"+byteToHex[t[e+4]]+byteToHex[t[e+5]]+"-"+byteToHex[t[e+6]]+byteToHex[t[e+7]]+"-"+byteToHex[t[e+8]]+byteToHex[t[e+9]]+"-"+byteToHex[t[e+10]]+byteToHex[t[e+11]]+byteToHex[t[e+12]]+byteToHex[t[e+13]]+byteToHex[t[e+14]]+byteToHex[t[e+15]]).toLowerCase();if(!validate(s))throw TypeError("Stringified UUID is invalid");return s}function v4(t,e,s){t=t||{};var n=t.random||(t.rng||rng)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){s=s||0;for(var c=0;c<16;++c)e[s+c]=n[c];return e}return stringify(n)}const v41=()=>v4();var SHAKV,USERS,USERKEYS,API_KEY;function log(t,e={}){now=now||Date.now();const[s,n]=new Date().toLocaleTimeString("en-US").split(/:| /);return LOGS.put(String(2e12-now++),JSON.stringify({message:t,time:`${s}:${n}`,data:e}),{expirationTtl:86400*7})}async function handleCloudRequest(t){const{country:e,colo:s}=t.cf||{country:"",colo:""},n=new URL(t.url),{searchParams:c,pathname:r}=n,l=String(t.headers.get("API_KEY")||"");if(log("request",{searchParams:c,pathname:r,country:e,colo:s}),t.method==="GET"&&l&&l==API_KEY)return handleAdmin(t,c,r,SHAKV);if(t.method==="GET"){if(r==="/robots.txt")return text("User-agent: * Disallow: /");if(r==="/connect"&&c.get("key")){const o=c.get("key"),a=o.slice(0,8),d=o.slice(8,16),g=o.slice(16,24),h=o.slice(24,32),y=await sha256(a+d);if(!a||!d||!g||y!==h)return json({error:"auth error"});const p=await USERKEYS.get(d);if(p===null)return json({error:401});const f=await USERKEYS.get(a);if(f===null)return json({error:404,message:"token not found"});const w=await sha256(a+p),m=await sha256(f+p);return w===g?(await USERS.put(f,JSON.stringify({uuid:p,connected:d}),{expirationTtl:60}),json({success:!0})):m===g?json({success:!0}):json({error:401})}if(r==="/check"){const o=c.get("key");if(o===null)return new Response("500");const a=async()=>{const g=await USERKEYS.get(o);if(!g)return null;const h=await USERS.get(g,"json");return!h||h.connected?h:new Promise(y=>{const p=setInterval(async()=>{const f=await USERS.get(g,"json");(!f||f.connected)&&(clearInterval(p),y(f))},1e3)})},d=await a();return json({expired:d===null})}if(r==="/register"){const o=v41(),a=await sha256(o);return await USERS.put(o,JSON.stringify({uuid:o,uuidHash:a,registered:Date.now(),country:e,colo:s})),await log("register",{uuidHash:a}),await USERKEYS.put(a,o),json({uuid:o})}if(r==="/token"){const o=v41(),a=await sha256(o);return await USERS.put(o,JSON.stringify({uuid:o,registered:Date.now(),country:e,colo:s}),{expirationTtl:60}),await USERKEYS.put(a,o,{expirationTtl:60}),json({uuid:o,key:a})}if(r==="/create-project"){const o=t.headers.get("TOKEN"),a=v41();return await USERS.put(a,JSON.stringify({uuid:a,registered:Date.now(),country:e,colo:s})),json({uuid:a})}const u=r.substr(1);if(u){const o=getDbObj(SHAKV),a=await o.get(u);if(a!==null)return a.indexOf("export")===0?js(a):text(a)}Response.redirect("https://blog.zed.vision",301)}else if(t.method==="POST"){const u=String(t.headers.get("ZKEY")||""),o=u.slice(0,8),a=u.slice(8,16),d=u.slice(16,24),g=u.slice(24,32);if(!o||!a||!d||!g)return json({error:401,message:"not matching keys"});const h=await sha256(o+a);if(h!==d)return json({error:401,message:"content and userkeys are not a pain"});const y=await t.arrayBuffer(),p=await sha256(y),f=p.substring(0,8);if(f!==o)return json({error:401,message:`body hash not matching with the sent hash: ${f} -- ${u}`});const w=await USERKEYS.get(a);if(!w)return json({error:500,message:"user not found"});const m=await sha256(o+w);if(m!==g)return json({error:401,message:"user not verified"});await log("new html",{sha:o,uKey:a});const S=r.substr(1);if(await SHAKV.put(f,y),S){const k=getDbObj(SHAKV),O=await k.put(S,f)}return json({hash:f})}return new Response("404")}addEventListener("fetch",t=>{t.request.method==="OPTIONS"?t.respondWith(handleOptions(t.request)):t.respondWith(handleCloudRequest(t.request))});
