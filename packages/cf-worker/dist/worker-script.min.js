async function arrBuffSha256(e){const t=await crypto.subtle.digest("SHA-256",e),s=Array.from(new Uint8Array(t)),o=s.map(r=>("00"+r.toString(16)).slice(-2)).join("");return o}const corsHeaders={"Access-Control-Allow-Origin":"https://zed.vision","Access-Control-Allow-Methods":"GET,HEAD,POST,OPTIONS","Access-Control-Max-Age":"86400"};function handleJsonResponse(e){return new Response(JSON.stringify(e),{headers:{...corsHeaders,"Content-Type":"application/json;charset=UTF-8"}})}function handleTextResponse(e){return new Response(e,{headers:{...corsHeaders,"Content-Type":"text/html;charset=UTF-8"}})}function handleOptions(e){const t=e.headers;if(t.get("Origin")!==null&&t.get("Access-Control-Request-Method")!==null&&t.get("Access-Control-Request-Headers")!==null){const s={...corsHeaders,"Access-Control-Allow-Headers":e.headers.get("Access-Control-Request-Headers")};return new Response(null,{headers:s})}else return new Response(null,{headers:{Allow:corsHeaders["Access-Control-Allow-Methods"]}})}var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const __default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(e){return typeof e=="string"&&__default.test(e)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,s=(byteToHex[e[t+0]]+byteToHex[e[t+1]]+byteToHex[e[t+2]]+byteToHex[e[t+3]]+"-"+byteToHex[e[t+4]]+byteToHex[e[t+5]]+"-"+byteToHex[e[t+6]]+byteToHex[e[t+7]]+"-"+byteToHex[e[t+8]]+byteToHex[e[t+9]]+"-"+byteToHex[e[t+10]]+byteToHex[e[t+11]]+byteToHex[e[t+12]]+byteToHex[e[t+13]]+byteToHex[e[t+14]]+byteToHex[e[t+15]]).toLowerCase();if(!validate(s))throw TypeError("Stringified UUID is invalid");return s}function v4(e,t,s){e=e||{};var o=e.random||(e.rng||rng)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,t){s=s||0;for(var r=0;r<16;++r)t[s+r]=o[r];return t}return stringify(o)}const v41=()=>v4();var SHAKV,USERS,API_KEY;async function sha256(e){const t=new TextEncoder().encode(e),s=await arrBuffSha256(t);return s.substr(0,8)}async function handleCloudRequest(e){if(e.method==="OPTIONS")return handleOptions(e);const t=String(e.headers.get("API_KEY")||""),s=new URL(e.url),{searchParams:o,pathname:r}=s;if(e.method==="GET"&&t&&t===API_KEY){if(r==="/keys/"){const a=o.get("prefix"),n=await SHAKV.list({prefix:a});return handleJsonResponse(n)}if(r==="/keys/delete/"){const a=o.get("hash"),n=await SHAKV.delete(a);return handleJsonResponse(n)}}if(e.method==="GET"){if(r==="/robots.txt")return handleTextResponse("User-agent: * Disallow: /");if(r==="/connect"){const n=o.get("uuid")||v41(),c=await sha256(n);return await SHAKV.put(c,JSON.stringify({uuid:n,connected:o.get("uuid")}),{expirationTtl:60}),handleJsonResponse({uuid:c})}if(r==="/check"){const n=o.get("uuid");if(n===null)return new Response("500");const c=async()=>{const u=await SHAKV.get(n,"json");return!u||u.connected?u:new Promise(f=>{const h=setInterval(async()=>{const d=await SHAKV.get(n,"json");(!d||d.connected)&&(clearInterval(h),f(d))},1e3)})},l=await c();return handleJsonResponse({expired:l===null})}if(r==="/register"){const n=v41();return await USERS.put(n,JSON.stringify({uuid:n,registered:Date.now(),cf:e.cf})),handleJsonResponse({uuid:n})}const a=r.substr(1);if(a){const n=await SHAKV.get(a,"stream");if(n!==null)return handleTextResponse(n)}return Response.redirect("https://zed.vision/code",301)}else if(e.method==="POST"){const a=await e.arrayBuffer(),n=await arrBuffSha256(a),c=n.substring(0,8);return await SHAKV.put(c,a),handleJsonResponse({hash:c})}return new Response("404")}addEventListener("fetch",e=>{e.respondWith(handleCloudRequest(e.request))});
