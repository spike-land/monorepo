const diff=async(t,s)=>{const{diffChars:r}=await import("./vendor/diff.min.js"),{sha256:n}=await import("./sha256.js"),h=n(t),e=r(t,s);return{b:await h,c:e.map(c=>c.added?c.value:c.removed?-c.count:c.count)}},corsHeaders={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,HEAD,POST,OPTIONS","Access-Control-Max-Age":"86400"},isDiff=t=>{if(t.length<10)return!1;const s=[...t.slice(0,8)].filter(n=>n<"0"||n>"f").length===0,r=t.slice(8);if(s&&r[0]==="["&&r[r.length-1]==="]")try{return JSON.parse(r).length>1}catch{return!1}return!1},assemble=(t,s)=>{const r=JSON.parse(s);let n=t.slice(),h="";return r.forEach(e=>{if(Number(e)===e){const c=Math.abs(e),p=n.slice(0,c);n=n.slice(c),e>0&&(h+=String(p))}else h+=String(e)}),h},sha256=async t=>Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256",typeof t=="string"?new TextEncoder().encode(t):t)).slice(0,4)).map(s=>("00"+s.toString(16)).slice(-2)).join(""),getDbObj=t=>{const s={async get(r,n="string"){let h;try{if(h=await t.get(r),!h)return null}catch(c){return null}if(n==="json")return JSON.parse(h);const e=await h;if(n==="string"){if(typeof e=="string"&&n==="string"){const c=e;if(isDiff(e)){const p=e.slice(0,8),f=e.slice(8),a=await s.get(p);return assemble(a,f)}return e}return new TextDecoder().decode(e)}return h},async put(r,n){let h;try{const c=await s.get(r);if(typeof c=="string"&&typeof n=="string"&&c.length===8&&c!==n){const p=await s.get(n),f=await s.get(c);if(typeof f=="string"){const a=await sha256(f);if(a===c){const o=await diff(p,f),u=o.b+JSON.stringify(o.c);await s.put(a,u)}}}}catch{h=""}if(h!==""&&n===h)return n;let e;return typeof n!="string"?e=new TextDecoder().decode(n):e=n,await t.put(r,e)},async delete(r){return await t.delete(r)},async clear(){return await t.clear()},async keys(){return await t.getAllKeys()}};return s};function json(t){return new Response(JSON.stringify(t),{headers:{...corsHeaders,"Content-Type":"application/json;charset=UTF-8"}})}function text(t){return new Response(t,{headers:{...corsHeaders,"Content-Type":"text/html;charset=UTF-8"}})}function js(t){return new Response(t,{headers:{...corsHeaders,"Content-Type":"application/javascript;charset=UTF-8"}})}function handleOptions(t){const s=t.headers;if(s.get("Origin")!==null&&s.get("Access-Control-Request-Method")!==null&&s.get("Access-Control-Request-Headers")!==null){const r={...corsHeaders,"Access-Control-Allow-Headers":t.headers.get("Access-Control-Request-Headers")};return new Response(null,{headers:r})}else return new Response(null,{headers:{Allow:corsHeaders["Access-Control-Allow-Methods"]}})}let now=0;var LOGS;async function handleAdmin(t,s,r,n){if(r==="/keys/"){const h=s.get("prefix"),e=await n.list({prefix:h});return json(e)}if(r==="/keys/delete/"){const h=s.get("hash"),e=await n.delete(h);return json(e)}return json({error:"not implemented"})}var getRandomValues,rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&(getRandomValues=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!getRandomValues))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const __default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function validate(t){return typeof t=="string"&&__default.test(t)}for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));function stringify(t){var s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=(byteToHex[t[s+0]]+byteToHex[t[s+1]]+byteToHex[t[s+2]]+byteToHex[t[s+3]]+"-"+byteToHex[t[s+4]]+byteToHex[t[s+5]]+"-"+byteToHex[t[s+6]]+byteToHex[t[s+7]]+"-"+byteToHex[t[s+8]]+byteToHex[t[s+9]]+"-"+byteToHex[t[s+10]]+byteToHex[t[s+11]]+byteToHex[t[s+12]]+byteToHex[t[s+13]]+byteToHex[t[s+14]]+byteToHex[t[s+15]]).toLowerCase();if(!validate(r))throw TypeError("Stringified UUID is invalid");return r}function v4(t,s,r){t=t||{};var n=t.random||(t.rng||rng)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,s){r=r||0;for(var h=0;h<16;++h)s[r+h]=n[h];return s}return stringify(n)}const v41=()=>v4();var SHAKV,USERS,USERKEYS,API_KEY;function log(t,s={}){now=now||Date.now();const[r,n]=new Date().toLocaleTimeString("en-US").split(/:| /);return LOGS.put(String(2e12-now++),JSON.stringify({message:t,time:`${r}:${n}`,data:s}),{expirationTtl:86400*7})}async function handleCloudRequest(t){const{country:s,colo:r}=t.cf||{country:"",colo:""},n=new URL(t.url),{searchParams:h,pathname:e}=n,c=String(t.headers.get("API_KEY")||"");if(log("request",{searchParams:h,pathname:e,country:s,colo:r}),t.method==="GET"&&c&&c==API_KEY)return handleAdmin(t,h,e,SHAKV);if(t.method==="GET"){if(e==="/robots.txt")return text("User-agent: * Disallow: /");if(e==="/connect"&&h.get("key")){const a=h.get("key"),o=a.slice(0,8),u=a.slice(8,16),l=a.slice(16,24),g=a.slice(24,32),y=await sha256(o+u);if(!o||!u||!l||y!==g)return json({error:"auth error"});const d=await USERKEYS.get(u);if(d===null)return json({error:401});const w=await USERKEYS.get(o);if(w===null)return json({error:404,message:"token not found"});const k=await sha256(o+d),m=await sha256(w+d);return k===l?(await USERS.put(w,JSON.stringify({uuid:d,connected:u}),{expirationTtl:60}),json({success:!0})):json(m===l?{success:!0}:{error:401})}if(e==="/check"){const a=h.get("key");if(a===null)return new Response("500");const u=await(async()=>{const l=await USERKEYS.get(a);if(!l)return null;const g=await USERS.get(l,"json");return!g||g.connected?g:new Promise(y=>{const d=setInterval(async()=>{const w=await USERS.get(l,"json");(!w||w.connected)&&(clearInterval(d),y(w))},1e3)})})();return json({expired:u===null})}if(e==="/register"){const a=v41(),o=await sha256(a);return await USERS.put(a,JSON.stringify({uuid:a,uuidHash:o,registered:Date.now(),country:s,colo:r})),await log("register",{uuidHash:o}),await USERKEYS.put(o,a),json({uuid:a})}if(e==="/token"){const a=v41(),o=await sha256(a);return await USERS.put(a,JSON.stringify({uuid:a,registered:Date.now(),country:s,colo:r}),{expirationTtl:60}),await USERKEYS.put(o,a,{expirationTtl:60}),json({uuid:a,key:o})}if(e==="/create-project"){const a=t.headers.get("TOKEN"),o=v41();return await USERS.put(o,JSON.stringify({uuid:o,registered:Date.now(),country:s,colo:r})),json({uuid:o})}const p=e.substr(1),f=[...p].filter(a=>a<"0"||a>"f").length===0;if(p&&f){const o=await getDbObj(SHAKV).get(p);return o!==null?o.indexOf("export")===0?js(o):text(o):Response.redirect(`https://code.zed.vision/${p}`,301)}if(e.slice(0,6)==="/ipfs/"){const a=caches.default;let o=await a.match(t);if(!o){const u=publicIpfsGateways.sort(()=>.5-Math.random()).slice(0,5).map(l=>l.replace("/ipfs/:hash",e)).map(l=>fetch(l).then(g=>g.status===200?g:(()=>{throw new Error("Not found")})()));o=await raceToSuccess(u),await a.put(t,o.clone())}return o.status>399&&(o=new Response(o.statusText,{status:o.status})),o}return e==="/"?Response.redirect("https://blog.zed.vision",301):e==="/code"||e==="/code/"?Response.redirect("https://code.zed.vision",301):text(e)}else if(t.method==="POST"){const p=String(t.headers.get("ZKEY")||""),f=p.slice(0,8),a=p.slice(8,16),o=p.slice(16,24),u=p.slice(24,32);if(!f||!a||!o||!u)return json({error:401,message:"not matching keys"});if(await sha256(f+a)!==o)return json({error:401,message:"content and userkeys are not a pain"});const g=await t.arrayBuffer(),d=(await sha256(g)).substring(0,8);if(d!==f)return json({error:401,message:`body hash not matching with the sent hash: ${d} -- ${p}`});const w=await USERKEYS.get(a);if(!w)return json({error:500,message:"user not found"});if(await sha256(f+w)!==u)return json({error:401,message:"user not verified"});await log("new html",{sha:f,uKey:a});const m=e.substr(1);if(await SHAKV.put(d,g),m){const b=await getDbObj(SHAKV).put(m,d)}return json({hash:d})}return new Response("404")}function raceToSuccess(t){let s=0;return new Promise((r,n)=>t.forEach(h=>h.then(r).catch(()=>{++s===t.length&&n()})))}const publicIpfsGateways=["https://ipfs.io/ipfs/:hash","https://dweb.link/ipfs/:hash","https://gateway.ipfs.io/ipfs/:hash","https://ipfs.infura.io/ipfs/:hash","https://ninetailed.ninja/ipfs/:hash","https://ipfs.globalupload.io/:hash","https://10.via0.com/ipfs/:hash","https://ipfs.eternum.io/ipfs/:hash","https://hardbin.com/ipfs/:hash","https://gateway.blocksec.com/ipfs/:hash","https://cloudflare-ipfs.com/ipfs/:hash","https://cf-ipfs.com/ipfs/:hash","https://ipns.co/ipfs/:hash","https://ipfs.mrh.io/ipfs/:hash","https://gateway.originprotocol.com/ipfs/:hash","https://gateway.pinata.cloud/ipfs/:hash","https://ipfs.doolta.com/ipfs/:hash","https://ipfs.sloppyta.co/ipfs/:hash","https://ipfs.busy.org/ipfs/:hash","https://ipfs.greyh.at/ipfs/:hash","https://gateway.serph.network/ipfs/:hash","https://jorropo.ovh/ipfs/:hash","https://jorropo.net/ipfs/:hash","https://gateway.temporal.cloud/ipfs/:hash","https://ipfs.fooock.com/ipfs/:hash","https://cdn.cwinfo.net/ipfs/:hash","https://ipfs.privacytools.io/ipfs/:hash","https://permaweb.io/ipfs/:hash","https://ipfs.stibarc.com/ipfs/:hash","https://ipfs.best-practice.se/ipfs/:hash","https://2read.net/ipfs/:hash","https://ipfs.2read.net/ipfs/:hash","https://storjipfs-gateway.com/ipfs/:hash","https://ipfs.runfission.com/ipfs/:hash","https://trusti.id/ipfs/:hash","https://apac.trusti.id/ipfs/:hash","https://ipfs.overpi.com/ipfs/:hash","https://ipfs.lc/ipfs/:hash","https://ipfs.leiyun.org/ipfs/:hash","https://ipfs.ink/ipfs/:hash","https://ipfs.jes.xxx/ipfs/:hash","https://ipfs.oceanprotocol.com/ipfs/:hash","https://d26g9c7mfuzstv.cloudfront.net/ipfs/:hash","https://ipfsgateway.makersplace.com/ipfs/:hash","https://gateway.ravenland.org/ipfs/:hash","https://ipfs.smartsignature.io/ipfs/:hash","https://ipfs.funnychain.co/ipfs/:hash","https://ipfs.telos.miami/ipfs/:hash","https://robotizing.net/ipfs/:hash","https://ipfs.mttk.net/ipfs/:hash","https://ipfs.fleek.co/ipfs/:hash","https://ipfs.jbb.one/ipfs/:hash","https://ipfs.yt/ipfs/:hash","https://jacl.tech/ipfs/:hash","https://hashnews.k1ic.com/ipfs/:hash","https://ipfs.vip/ipfs/:hash","https://ipfs.k1ic.com/ipfs/:hash","https://ipfs.drink.cafe/ipfs/:hash","https://ipfs.azurewebsites.net/ipfs/:hash","https://gw.ipfspin.com/ipfs/:hash","https://ipfs.kavin.rocks/ipfs/:hash","https://ipfs.denarius.io/ipfs/:hash"];addEventListener("fetch",t=>{t.request.method==="OPTIONS"?t.respondWith(handleOptions(t.request)):t.respondWith(handleCloudRequest(t.request))});
