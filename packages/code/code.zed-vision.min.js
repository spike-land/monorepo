const importScript = async (n) =>
    new Promise(function (e, t) {
      const o = document.createElement("script");
      o.src = n, o.onload = e, o.onerror = t, document.head.appendChild(o);
    }),
  makeDraggable = async () => {
    const n = await importScript(
        "https://unpkg.com/interactjs@1.10.0/dist/interact.js",
      ),
      e = window.interact;
    e(".draggable").draggable(
      {
        inertia: !0,
        modifiers: [
          e.modifiers.restrictRect({ restriction: "parent", endOnly: !0 }),
        ],
        autoScroll: !1,
        listeners: { move: dragMoveListener },
      },
    );
  };
function dragMoveListener(n) {
  const e = n.target,
    t = (parseFloat(e.getAttribute("data-x")) || 0) + n.dx,
    o = (parseFloat(e.getAttribute("data-y")) || 0) + n.dy;
  e.style.webkitTransform = e.style.transform = "translate(" + t + "px, " + o +
    "px)",
    e.setAttribute("data-x", t),
    e.setAttribute("data-y", o);
}
const startMonaco = async ({ onChange: n, code: e, language: t }) => {
  const o = t || "typescript";
  return window && window.monaco && window.monaco.editor
    ? window.monaco.editor
    : new Promise(async function (r) {
      if (window.monaco) return window.monaco;
      await loadScript(
        "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs/loader.min.js",
      );
      const l =
        "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs";
      await loadScript(
        "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs/loader.min.js",
      ),
        require.config(
          {
            paths: {
              vs:
                "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs",
            },
          },
        ),
        require(["vs/editor/editor.main"], async function () {
          const s = window.monaco,
            i = s.editor.create(
              window.document.getElementById("container"),
              {
                cursorStyle: "block",
                formatOnType: !0,
                scrollbar: {
                  horizontal: "hidden",
                  verticalHasArrows: !0,
                  verticalScrollbarSize: 20,
                },
                minimap: { enabled: !1 },
                folding: !1,
                multiCursorModifier: "alt",
                wordWrap: "on",
                wordWrapBreakAfterCharacters: ">([{]))],;}",
                mouseWheelZoom: !1,
                wordWrapColumn: 70,
                automaticLayout: !0,
                scrollBeyondLastLine: !1,
                autoIndent: "brackets",
                autoClosingQuotes: "always",
                lineNumbers: "off",
                autoClosingBrackets: "always",
                autoClosingOvertype: "always",
                suggest: {},
                codeLens: !0,
                autoSurround: "languageDefined",
                trimAutoWhitespace: !0,
                codeActionsOnSaveTimeout: 100,
                model: s.editor.createModel(
                  e,
                  o,
                  s.Uri.parse(
                    o === "typescript"
                      ? "file:///main.tsx"
                      : "file:///main.html",
                  ),
                ),
                value: e,
                language: o,
                theme: "vs-dark",
              },
            );
          if (
            s.languages.typescript.javascriptDefaults.setDiagnosticsOptions(
              {
                noSuggestionDiagnostics: !0,
                noSemanticValidation: !0,
                noSyntaxValidation: !0,
              },
            ),
              i.onDidChangeModelContent(() => n(i.getValue())),
              r(i),
              o === "typescript"
          ) {
            const c = [
                {
                  name: "react",
                  url: "https://unpkg.com/@types/react@latest/index.d.ts",
                  depend: ["global", "csstype", "react-dom", "prop-types"],
                },
                {
                  name: "global",
                  url: "https://unpkg.com/@types/react@latest/global.d.ts",
                  depend: [],
                },
                {
                  name: "prop-types",
                  url: "https://unpkg.com/@types/prop-types@latest/index.d.ts",
                  depend: [],
                },
                {
                  name: "react-dom",
                  url: "https://unpkg.com/@types/react-dom@latest/index.d.ts",
                  depend: [],
                },
                {
                  name: "csstype",
                  url: "https://unpkg.com/csstype@latest/index.d.ts",
                  depend: [],
                },
              ],
              h = c.map(({ name: a, url: m }) =>
                (async () =>
                  s.languages.typescript.typescriptDefaults.addExtraLib(
                    await (await fetch(m)).text(),
                    `file:///node_modules/@types/${a}/index.d.ts`,
                  ))()
              );
            s.languages.typescript.typescriptDefaults.setCompilerOptions(
              {
                target: s.languages.typescript.ScriptTarget.ESNext,
                allowNonTsExtensions: !0,
                allowUmdGlobalAccess: !0,
                strict: !0,
                allowJs: !0,
                noEmitOnError: !0,
                allowSyntheticDefaultImports: !0,
                moduleResolution:
                  s.languages.typescript.ModuleResolutionKind.NodeJs,
                module: s.languages.typescript.ModuleKind.CommonJS,
                noEmit: !0,
                typeRoots: ["node_modules/@types"],
                jsx: s.languages.typescript.JsxEmit.React,
                jsxFactory: "React.createElement",
                jsxFragmentFactory: "React.Fragment",
                esModuleInterop: !0,
              },
            ),
              await Promise.all(h),
              s.languages.typescript.javascriptDefaults.setDiagnosticsOptions(
                {
                  noSuggestionDiagnostics: !1,
                  noSemanticValidation: !1,
                  noSyntaxValidation: !1,
                },
              );
          }
        });
    });
};
function loadScript(n) {
  return new Promise(function (e, t) {
    var o;
    o = document.createElement("script"),
      o.src = n,
      o.onload = e,
      o.onerror = t,
      document.head.appendChild(o);
  });
}
const DIFF_DELETE = -1, DIFF_EQUAL = 0;
function diff_main({ text1: n, text2: e, cursor_pos: t }) {
  if (n === e) return n ? [[0, n]] : [];
  if (t) {
    const i = find_cursor_edit_diff(n, e, t);
    if (i) return i;
  }
  let o = diff_commonPrefix(n, e);
  const r = n.substring(0, o);
  n = n.substring(o), e = e.substring(o), o = diff_commonSuffix(n, e);
  const l = n.substring(n.length - o);
  n = n.substring(0, n.length - o), e = e.substring(0, e.length - o);
  const s = diff_compute_(n, e);
  return r && s.unshift([0, r]), l && s.push([0, l]), diff_cleanupMerge(s), s;
}
function diff_compute_(n, e) {
  let t;
  if (!n) return [[1, e]];
  if (!e) return [[DIFF_DELETE, n]];
  const o = n.length > e.length ? n : e,
    r = n.length > e.length ? e : n,
    l = o.indexOf(r);
  if (
    l !== -1
  ) {
    return t = [[1, o.substring(0, l)], [0, r], [1, o.substring(l + r.length)]],
      n.length > e.length && (t[0][0] = t[2][0] = DIFF_DELETE),
      t;
  }
  if (r.length === 1) return [[DIFF_DELETE, n], [1, e]];
  const s = diff_halfMatch_(n, e);
  if (s) {
    const i = s[0],
      c = s[1],
      h = s[2],
      a = s[3],
      m = s[4],
      b = diff_main({ text1: i[1], text2: h[1], cursor_pos: 0 }),
      u = diff_main({ text1: c[1], text2: a[1], cursor_pos: 0 });
    return b.concat([[0, m[1]]], u);
  }
  return diff_bisect_(n, e);
}
function diff_bisect_(n, e) {
  const t = n.length,
    o = e.length,
    r = Math.ceil((t + o) / 2),
    l = r,
    s = 2 * r,
    i = new Array(s),
    c = new Array(s);
  for (let g = 0; g < s; g++) i[g] = -1, c[g] = -1;
  i[l + 1] = 0, c[l + 1] = 0;
  const h = t - o, a = h % 2 !== 0;
  let m = 0, b = 0, u = 0, f = 0;
  for (let g = 0; g < r; g++) {
    for (let d = -g + m; d <= g - b; d += 2) {
      const w = r + d;
      let y;
      d === -g || d !== g && i[w - 1] < i[w + 1]
        ? y = i[w + 1]
        : y = i[w - 1] + 1;
      let _ = y - d;
      for (; y < t && _ < o && n.charAt(y) === e.charAt(_);) y++, _++;
      if (i[w] = y, y > t) b += 2;
      else if (_ > o) m += 2;
      else if (a) {
        const k = r + h - d;
        if (k >= 0 && k < s && c[k] !== -1) {
          const S = t - c[k];
          if (y >= S) return diff_bisectSplit_(n, e, y, _);
        }
      }
    }
    let p;
    for (let d = -g + u; d <= g - f; d += 2) {
      const w = r + d;
      d === -g || d !== g && c[w - 1] < c[w + 1]
        ? p = c[w + 1]
        : p = c[w - 1] + 1;
      let y = p - d;
      for (; p < t && y < o && n.charAt(t - p - 1) === e.charAt(o - y - 1);) {
        p++, y++;
      }
      if (c[w] = p, p > t) f += 2;
      else if (y > o) u += 2;
      else if (!a) {
        const _ = r + h - d;
        if (_ >= 0 && _ < s && i[_] !== -1) {
          const k = i[_], S = r + k - _;
          if (p = t - p, k >= p) return diff_bisectSplit_(n, e, k, S);
        }
      }
    }
  }
  return [[DIFF_DELETE, n], [1, e]];
}
function diff_bisectSplit_(n, e, t, o) {
  const r = n.substring(0, t),
    l = e.substring(0, o),
    s = n.substring(t),
    i = e.substring(o),
    c = diff_main({ text1: r[1], text2: l[1], cursor_pos: 0 }),
    h = diff_main({ text1: s[1], text2: i[1], cursor_pos: 0 });
  return c.concat(h);
}
function diff_commonPrefix(n, e) {
  if (!n || !e || n.charAt(0) !== e.charAt(0)) return 0;
  let t = 0, o = Math.min(n.length, e.length), r = o, l = 0;
  for (; t < r;) {
    n.substring(l, r) == e.substring(l, r) ? (t = r, l = t) : o = r,
      r = Math.floor((o - t) / 2 + t);
  }
  return is_surrogate_pair_start(n.charCodeAt(r - 1)) && r--, r;
}
function diff_commonSuffix(n, e) {
  if (!n || !e || n.slice(-1) !== e.slice(-1)) return 0;
  let t = 0, o = Math.min(n.length, e.length), r = o, l = 0;
  for (
    ; t < r;
  ) {
    n.substring(n.length - r, n.length - l) ==
        e.substring(e.length - r, e.length - l)
      ? (t = r, l = t)
      : o = r, r = Math.floor((o - t) / 2 + t);
  }
  return is_surrogate_pair_end(n.charCodeAt(n.length - r)) && r--, r;
}
function diff_halfMatch_(n, e) {
  const t = n.length > e.length ? n : e, o = n.length > e.length ? e : n;
  if (t.length < 4 || o.length * 2 < t.length) return null;
  function r(u, f, g) {
    const p = u.substring(g, g + Math.floor(u.length / 4));
    let d = -1, w = "", y, _, k, S;
    for (; (d = f.indexOf(p, d + 1)) !== -1;) {
      const v = diff_commonPrefix(u.substring(g), f.substring(d)),
        E = diff_commonSuffix(u.substring(0, g), f.substring(0, d));
      w.length < E + v &&
        (w = f.substring(d - E, d) + f.substring(d, d + v),
          y = u.substring(0, g - E),
          _ = u.substring(g + v),
          k = f.substring(0, d - E),
          S = f.substring(d + v));
    }
    return w.length * 2 >= u.length ? [y, _, k, S, w] : null;
  }
  const l = r(t, o, Math.ceil(t.length / 4)),
    s = r(t, o, Math.ceil(t.length / 2));
  let i;
  if (s === null && l === null) return null;
  if (s === null) {
    if (l === null) return null;
    i = l;
  } else if (l === null) {
    if (s === null) return null;
    i = s;
  } else i = l[4].length > s[4].length ? l : s;
  let c, h, a, m;
  n.length > e.length
    ? (c = i[0], h = i[1], a = i[2], m = i[3])
    : (a = i[0], m = i[1], c = i[2], h = i[3]);
  const b = i[4];
  return [c, h, a, m, b];
}
function diff_cleanupMerge(n) {
  const e = [...n];
  e.push([0, ""]);
  let t = 0, o = 0, r = 0, l = "", s = "", i, c;
  for (; t < e.length;) {
    if (t < e.length - 1 && !e[t][1]) {
      e.splice(t, 1);
      continue;
    }
    switch (e[t][0]) {
      case 1:
        r++, s += e[t][1], t++;
        break;
      case DIFF_DELETE:
        o++, l += e[t][1], t++;
        break;
      case 0:
        if (c = t - r - o - 1, t < e.length - 1 && !e[t][1]) {
          e.splice(t, 1);
          break;
        }
        if (l.length > 0 || s.length > 0) {
          l.length > 0 && s.length > 0 &&
            (i = diff_commonPrefix(s, l),
              i !== 0 &&
              (c >= 0
                ? e[c][1] += s.substring(0, i)
                : (e.splice(0, 0, [0, s.substring(0, i)]), t++),
                s = s.substring(i),
                l = l.substring(i)),
              i = diff_commonSuffix(s, l),
              i !== 0 &&
              (e[t][1] = s.substring(s.length - i) + e[t][1],
                s = s.substring(0, s.length - i),
                l = l.substring(0, l.length - i)));
          const a = r + o;
          l.length === 0 && s.length === 0
            ? (e.splice(t - a, a), t = t - a)
            : l.length === 0
            ? (e.splice(t - a, a, [1, s]), t = t - a + 1)
            : s.length === 0
            ? (e.splice(t - a, a, [DIFF_DELETE, l]), t = t - a + 1)
            : (e.splice(t - a, a, [DIFF_DELETE, l], [1, s]), t = t - a + 2);
        }
        t !== 0 && e[t - 1][0] === DIFF_EQUAL
          ? (e[t - 1][1] += e[t][1], e.splice(t, 1))
          : t++,
          r = 0,
          o = 0,
          l = "",
          s = "";
        break;
    }
  }
  e[e.length - 1][1] === "" && e.pop();
  let h = !1;
  for (
    t = 1; t < e.length - 1;
  ) {
    e[t - 1][0] === 0 && e[t + 1][0] === DIFF_EQUAL &&
    (e[t][1].substring(e[t][1].length - e[t - 1][1].length) === e[t - 1][1]
      ? (e[t][1] = e[t - 1][1] +
        e[t][1].substring(0, e[t][1].length - e[t - 1][1].length),
        e[t + 1][1] = e[t - 1][1] + e[t + 1][1],
        e.splice(t - 1, 1),
        h = !0)
      : e[t][1].substring(0, e[t + 1][1].length) == e[t + 1][1] &&
        (e[t - 1][1] += e[t + 1][1],
          e[t][1] = e[t][1].substring(e[t + 1][1].length) + e[t + 1][1],
          e.splice(t + 1, 1),
          h = !0)), t++;
  }
  return h ? diff_cleanupMerge(e) : e;
}
function is_surrogate_pair_start(n) {
  return n >= 55296 && n <= 56319;
}
function is_surrogate_pair_end(n) {
  return n >= 56320 && n <= 57343;
}
function starts_with_pair_end(n) {
  return is_surrogate_pair_end(n.charCodeAt(0));
}
function ends_with_pair_start(n) {
  return is_surrogate_pair_start(n.charCodeAt(n.length - 1));
}
function remove_empty_tuples(n) {
  const e = [];
  for (let t = 0; t < n.length; t++) n[t][1].length > 0 && e.push(n[t]);
  return e;
}
function make_edit_splice(n, e, t, o) {
  return ends_with_pair_start(n) || starts_with_pair_end(o)
    ? null
    : remove_empty_tuples([[0, n], [DIFF_DELETE, e], [1, t], [0, o]]);
}
function find_cursor_edit_diff(n, e, t) {
  const o = typeof t == "number" ? { index: t, length: 0 } : t.oldRange,
    r = typeof t == "number" ? null : t.newRange,
    l = n.length,
    s = e.length;
  if (o.length === 0 && (r === null || r.length === 0)) {
    const i = o.index,
      c = n.slice(0, i),
      h = n.slice(i),
      a = r ? r.index : null;
    e: {
      const m = i + s - l;
      if (a !== null && a !== m) break e;
      if (m < 0 || m > s) break e;
      const b = e.slice(0, m), u = e.slice(m);
      if (u !== h) break e;
      const f = Math.min(i, m), g = c.slice(0, f), p = b.slice(0, f);
      if (g !== p) break e;
      const d = c.slice(f), w = b.slice(f);
      return make_edit_splice(g, d, w, h);
    }
    e: {
      if (a !== null && a !== i) break e;
      const m = i, b = e.slice(0, i), u = e.slice(i);
      if (b !== c) break e;
      const f = Math.min(l - i, s - i),
        g = h.slice(h.length - f),
        p = u.slice(u.length - f);
      if (g !== p) break e;
      const d = h.slice(0, h.length - f), w = u.slice(0, u.length - f);
      return make_edit_splice(c, d, w, g);
    }
  }
  if (o.length > 0 && r && r.length === 0) {
    e: {
      const i = n.slice(0, o.index),
        c = n.slice(o.index + o.length),
        h = i.length,
        a = c.length;
      if (s < h + a) break e;
      const m = e.slice(0, h), b = e.slice(s - a);
      if (i !== m || c !== b) break e;
      const u = n.slice(h, l - a), f = e.slice(h, s - a);
      return make_edit_splice(i, u, f, c);
    }
  }
  return null;
}
function diff(n, e, t) {
  return diff_main({ text1: n, text2: e, cursor_pos: t });
}
diff.INSERT = 1, diff.DELETE = DIFF_DELETE, diff.EQUAL = 0;
const sp = new URLSearchParams(location.search), hash = sp.get("h");
hash && localStorage.setItem("codeBoXHash", hash);
let monaco;
async function run() {
  await importScript(
    "https://cdnjs.cloudflare.com/ajax/libs/core-js/3.6.5/minified.js",
  ),
    await importScript(
      "https://unpkg.com/@babel/standalone@7.12.4/babel.min.js",
    ),
    await importScript(
      "https://unpkg.com/react@17.0.1/umd/react.production.min.js",
    ),
    await importScript(
      "https://unpkg.com/react-dom@17.0.1/umd/react-dom.production.min.js",
    ),
    await importScript(
      "https://unpkg.com/interactjs@1.10.0/dist/interact.min.js",
    );
  const n = /import/gi, e = "///";
  setTimeout(() => makeDraggable(), 100);
  let t = "";
  const o = (a) =>
      window.Babel.transform(
        a,
        {
          plugins: [],
          presets: ["react", ["typescript", { isTSX: !0, allExtensions: !0 }]],
        },
      ).code.replace(/import/gi, "///"),
    r = async (a) => {
      const m = new Function("transpileCode", `return function(){ ${a} }`)(),
        b = { codeTranspiled: a, code: t },
        u = JSON.stringify(b),
        f = new Request(
          "https://code.zed.vision",
          {
            body: u,
            method: "POST",
            headers: { "content-type": "application/json;charset=UTF-8" },
          },
        ),
        g = await fetch(f),
        { hash: p } = await g.json();
      try {
        const d = window.localStorage;
        d.getItem("codeBoXHash"),
          d.setItem("codeBoXHash", p),
          d.setItem(p, t),
          history.pushState({}, "", `/?h=${p}`);
      } catch (d) {
        console.log("no localStorage");
      }
      m();
    };
  let l = 0, s = "", i = "", c = 0;
  (async () => {
    const a = getCodeToLoad();
    t = a,
      await startMonaco({
        language: "typescript",
        code: a,
        onChange: (m) => {
          s = m;
          const b = async (u) => {
            if (c === 1) return;
            c = 1;
            const f = await h(), g = document.getElementById("error");
            try {
              if (c = 0, u !== s) return;
              if (f && f.length) {
                if (s != u) return;
                if (i === u) return;
                document.getElementById("root").classList.add("transparent");
                const p = diff(t, u, 0);
                if (console.log(p), p.length <= 3) {
                  monaco.editor.setTheme("hc-black");
                  return;
                }
                g.innerHTML = f[0].messageText.toString(),
                  document.getElementById("root").style.setProperty(
                    "dispay",
                    "none",
                  ),
                  g.style.display = "block",
                  i = u,
                  monaco.editor.setTheme("vs-light"),
                  setTimeout(() => {
                    monaco.editor.setTheme("hc-black");
                  }, l++);
                return;
              }
              t = u,
                g.style.display = "none",
                window.monaco.editor.setTheme("vs-dark"),
                document.getElementById("root").classList.remove("transparent"),
                l = 0,
                c = 0,
                r(o(u));
            } catch (p) {
              if (c = 0, u !== s) return;
              monaco.editor.setTheme("vs-light"),
                setTimeout(() => {
                  window.monaco.editor.setTheme("hc-black");
                }, 10),
                console.error(p);
            }
          };
          if (!c) b(s);
          else {
            const u = m,
              f = setInterval(() => {
                (m !== s || !c) && clearInterval(f), c || b(s);
              }, 100);
          }
        },
      }),
      monaco = window.monaco;
  })(),
    r(o(getCodeToLoad())),
    document.getElementById("root").setAttribute("style", "display:block");
  async function h() {
    const a = monaco.Uri.parse("file:///main.tsx"),
      m = await window.monaco.languages.typescript.getTypeScriptWorker(),
      b = await (await m(a)).getSemanticDiagnostics("file:///main.tsx"),
      u = await (await m(a)).getCompilerOptionsDiagnostics("file:///main.tsx"),
      f = await (await m(a)).getSyntacticDiagnostics("file:///main.tsx");
    return [...b, ...u, ...f];
  }
}
function getCodeToLoad() {
  const n = window.localStorage.getItem("codeBoXHash");
  return window.localStorage.getItem(location.hash) ||
    n && window.localStorage.getItem(n) ||
    window.localStorage.getItem("STARTER") || "() => <>Hello</>";
}
run();
