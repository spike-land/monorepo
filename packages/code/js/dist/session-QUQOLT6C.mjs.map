{
  "version": 3,
  "sources": ["../../../../node_modules/fast-diff/diff.js", "../../../../node_modules/textdiff-create/index.js", "../../../../node_modules/textdiff-patch/index.js", "../session.tsx"],
  "sourcesContent": ["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n", "'use strict';\n\nvar diff = require('fast-diff');\n\nmodule.exports = function (original, revision) {\n  var result = diff(original, revision);\n  // According to latest jsperf tests, there's no need to cache array length\n  for (var i = 0; i < result.length; i++) {\n    var item = result[i];\n    // If operation is DELETE or EQUAL, replace the actual text by its length\n    if (item[0] < 1) {\n      item[1] = item[1].length;\n    }\n  }\n  return result;\n};\n", "'use strict';\n\nmodule.exports = function (original, delta) {\n  var result = '',\n      index = 0;\n\n  // According to latest jsperf tests, there's no need to cache array length\n  for (var i = 0; i < delta.length; i++) {\n    var item = delta[i],\n        operation = item[0],\n        value = item[1];\n\n    if (operation == -1) {\n      // DELETE\n      index += value;\n    } else if (operation == 0) {\n      // KEEP\n      result += original.slice(index, index += value);\n    } else {\n      // INSERT\n      result += value;\n    }\n  }\n  return result;\n};\n", "import { fromJS, isKeyed, Record } from \"immutable\";\n// @ts-expect-error\nimport createDelta from \"textdiff-create\";\n// @ts-expect-error\nimport applyPatch from \"textdiff-patch\";\n// import * as Immutable from \"immutable\"\n\ntype IUsername = string;\n\nexport interface ICodeSession {\n  code: string;\n  i: number;\n  errorDiff: string;\n  transpiled: string;\n  html: string;\n  css: string;\n}\n\nexport interface INewWSConnection {\n  uuid: string;\n  timestamp: number;\n  hashCode: number;\n  type: \"new-ws-connection\";\n}\n\ninterface ICodeInitEvent extends ICodeSession {\n  name: IUsername;\n  uuid: string;\n  type: \"code-init\";\n  hashOfCode: string;\n}\n\ninterface OtherEvent {\n  name: IUsername;\n  uuid: string;\n  target: IUsername | \"broadcast\";\n  type: \"start\" | \"open\" | \"quit\" | \"get-cid\" | \"provide-cid\" | \"new-ws\";\n  timestamp: number;\n}\n\nexport type IEvent =\n  | INewWSConnection\n  | OtherEvent\n  | ICodeInitEvent;\n\ninterface ICapabilities {\n  prettier: boolean;\n  babel: boolean;\n  sessionStorage?: boolean;\n  webRRT: boolean;\n  prerender: boolean;\n  IPFS: boolean;\n}\n\nexport interface IUserJSON {\n  name: IUsername;\n  capabilities: ICapabilities;\n  state: ICodeSession;\n  users: {};\n  events: IEvent[];\n}\n\ninterface IQTaskEvent {\n  uuid: string;\n  name: string;\n  operation: string;\n  data: string;\n}\n\nexport interface IUser extends\n  Record<{\n    name: IUsername;\n    room: string;\n    state: Record<ICodeSession>;\n    capabilities: ICapabilities;\n    users: {};\n    events: IEvent[];\n  }> {\n}\n\nfunction initSession(room: string, u: IUserJSON) {\n  return Record({ ...u, room, state: Record(u.state)() });\n}\n\nexport interface ICodeSess {\n  room: string;\n  hashCodeSession: number;\n  hashCode: () => number;\n  addEvent: (e: IEvent) => void;\n  setRoom: (room: string) => void;\n  json: () => IUserJSON;\n  processEvents: () => void;\n}\n\nconst hashStore: { [key: number]: Record<ICodeSession> } = {};\nexport class CodeSession implements ICodeSess {\n  session: IUser;\n  hashCodeSession: number;\n  public room: string = \"\";\n  created: string = new Date().toISOString();\n  constructor(room: string, user: IUserJSON) {\n    let savedState: ICodeSession | null = null;\n    this.room = room;\n    // if (user.state.code === \"\" && room) {\n    // const cacheKey = `state-${room}`;\n\n    // if (storageAvailable(\"localStorage\")) {\n    //   const savedStateStr = localStorage.getItem(cacheKey);\n    //   if (savedStateStr) {\n    //     savedState = JSON.parse(savedStateStr);\n    //   } else {\n    //     fetch(`https://code.spike.land/api/room/${room}/mySession`).then(\n    //       (resp) => resp.json(),\n    //     ).then((session: IUserJSON) => {\n    //       localStorage.setItem(cacheKey, JSON.stringify(session.state));\n    //       this.session.set(\"state\", Record(session.state)());\n    //     });\n    //   }\n    // }\n    // }\n\n    this.session = initSession(room, {\n      ...user,\n      state: savedState ? savedState : user.state,\n\n      capabilities: {\n        ...user.capabilities,\n        sessionStorage: storageAvailable(\"sessionStorage\"),\n      },\n    })();\n\n    this.hashCodeSession = this.session.get(\"state\").hashCode();\n    hashStore[this.session.get(\"state\").hashCode()] = this.session.get(\"state\");\n  }\n\n  public addEvent(e: IEvent) {\n    this.session.get(\"events\").push({\n      ...e,\n    });\n    setTimeout(() => this.processEvents);\n  }\n\n  public hashCode() {\n    return this.session.get(\"state\").hashCode();\n  }\n\n  processEvents() {\n    const events = this.session.get(\"events\");\n    const event = events.shift();\n\n    if (event) {\n      switch (event.type) {\n        case \"code-init\":\n          const { code, transpiled, i, css, errorDiff, html } = event;\n          const sess: ICodeSession = {\n            code,\n            transpiled,\n            i,\n            css,\n            errorDiff,\n            html,\n          };\n\n          this.session.set(\"events\", events);\n          this.session.set(\"state\", Record(sess)());\n\n          // const cacheKey = `state-${this.room}`;\n\n          // if (storageAvailable(\"localStorage\")) {\n          //   localStorage.setItem(cacheKey, JSON.stringify(sess));\n          // }\n          // this.session.set(\"events\", events);\n      }\n    }\n  }\n\n  public createPatchFromHashCode(oldHash: number, state: ICodeSession) {\n    if (hashStore[oldHash]) {\n      const oldRec = hashStore[oldHash];\n      const oldState = JSON.stringify(oldRec.toJSON());\n\n      const newRec = oldRec.merge(state);\n      const newHash = newRec.hashCode();\n      hashStore[newHash] = newRec;\n\n      const newState = JSON.stringify(newRec.toJSON());\n      const patch = createPatch(oldState, newState);\n      return {\n        oldHash,\n        newHash,\n        patch,\n      };\n    }\n  }\n\n  public createPatch(state: ICodeSession) {\n    if (state.code === this.session.get(\"state\").get(\"code\")) {\n      return {\n        oldHash: this.session.get(\"state\").hashCode(),\n        newHash: this.session.get(\"state\").hashCode(),\n        patch: \"\",\n      };\n    }\n    const oldState = JSON.stringify(this.session.get(\"state\").toJSON());\n\n    const oldHash = this.session.get(\"state\").hashCode();\n    hashStore[oldHash] = this.session.get(\"state\");\n    const oldRec = this.session.get(\"state\");\n\n    const newRec = oldRec.merge(state);\n    const newHash = newRec.hashCode();\n\n    hashStore[newHash] = newRec;\n\n    const newState = JSON.stringify(newRec.toJSON());\n    const patch = createPatch(oldState, newState);\n    return {\n      oldHash,\n      newHash,\n      patch,\n    };\n  }\n\n  public applyPatch({\n    oldHash,\n    newHash,\n    patch,\n  }: { oldHash: number; newHash: number; patch: string }) {\n    const oldHashCheck = this.session.get(\"state\").hashCode();\n\n    if (oldHashCheck !== oldHash) {\n      console.error(\"Cant update\");\n      return;\n    }\n\n    const oldST = this.session.get(\"state\").toJSON();\n    const oldState = JSON.stringify(oldST);\n    const oldCode = oldST.code;\n    const newState = JSON.parse(applyPatch(oldState, JSON.parse(patch)));\n    const newRec: Record<ICodeSession> = Record<ICodeSession>(newState)();\n\n    console.log({ newState });\n    console.log(newRec.hashCode());\n\n    const newRecord = this.session.get(\"state\").merge(newRec);\n    const newCode = newRecord.get(\"code\");\n    if (oldCode === newCode) return;\n    console.log(newRecord.hashCode());\n    const newHashCheck = newRecord.hashCode();\n\n    if (newHashCheck === newHash) {\n      this.session = this.session.set(\"state\", newRecord);\n      //  console.error(\"WRONG update\");\n      return;\n    } else {\n      console.log(\"WRONG\");\n      console.log({\n        newState,\n      });\n    }\n  }\n\n  public json() {\n    const user = this.session.toJSON();\n    const state = user.state.toJSON();\n    return { ...user, state };\n  }\n  public setRoom(room: string) {\n    const user = this.session.set(\"room\", room);\n    this.session = user;\n  }\n}\n\nlet session: CodeSession | null = null;\n\nexport default (room: string, u: IUserJSON): ICodeSess =>\n  session || new CodeSession(room, u);\n\nfunction storageAvailable(type: string) {\n  try {\n    if (window.hasOwnProperty(type) === false) return;\n    var storage = window[type as keyof Window];\n    var x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction createPatch(oldCode: string, newCode: string) {\n  return JSON.stringify(createDelta(oldCode, newCode));\n}\n"],
  "mappings": "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",
  "names": []
}
