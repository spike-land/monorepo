{
  "version": 3,
  "sources": ["../workers/getWorker.mjs", "../formatter.mjs"],
  "sourcesContent": ["import { wrap } from \"comlink\";\n\nexport const getWorker = (file) => {\n  let workerSrc;\n  let forceNormalWorker = false;\n  const { pathname } = window.location;\n  if (pathname.includes(\"/ipfs/\")) {\n    const cid = pathname.slice(6, 52);\n    forceNormalWorker = true;\n    workerSrc = `/ipfs/${cid}/js/workers/${file}`;\n  } else if (location.origin !== \"https://code.spike.land\") {\n    forceNormalWorker = true;\n    workerSrc = window.URL.createObjectURL(\n      new Blob([\n        `self.importScripts(\"https://code.spike.land/workers/${file}\");`,\n      ]),\n    );\n  } else {\n    workerSrc = `/workers/${file}`;\n  }\n\n  return {\n    workerSrc,\n    forceNormalWorker,\n  };\n};\n\nconst wrapped = {};\nexport const getWrapped = (file) => {\n  if (wrapped[file]) {\n    return wrapped[file];\n  }\n\n  let workerSrc;\n  let forceNormalWorker = false;\n  const { pathname } = window.location;\n  if (pathname.includes(\"/ipfs/\")) {\n    const cid = pathname.slice(6, 52);\n    forceNormalWorker = true;\n    workerSrc = `/ipfs/${cid}/js/workers/${file}`;\n  } else if (location.origin !== \"https://code.spike.land\") {\n    forceNormalWorker = true;\n    workerSrc = window.URL.createObjectURL(\n      new Blob([\n        `self.importScripts(\"https://code.spike.land/workers/${file}\");`,\n      ]),\n    );\n  } else {\n    workerSrc = `https://code.spike.land/workers/${file}`;\n  }\n\n  wrapped[file] = wrapped[workerSrc] = wrapped[workerSrc] ||\n    init(workerSrc, forceNormalWorker);\n\n  return wrapped[workerSrc];\n};\n\nfunction init(workerSrc, forceNormalWorker) {\n  if (forceNormalWorker || typeof SharedWorker === \"undefined\") {\n    const worker = new Worker(workerSrc);\n    const { port1, port2 } = new MessageChannel();\n    const message = {\n      comlinkInit: true,\n      port: port1,\n    };\n\n    worker.postMessage(message, [port1]);\n\n    return wrap(port2);\n  }\n\n  const worker = new SharedWorker(workerSrc);\n  worker.port.start();\n\n  return wrap(worker.port);\n}\n", "import { getWrapped } from \"./workers/getWorker.mjs\";\n\n/**\n * @param {string} code\n * @returns {Promise<string>}\n */\nexport async function formatter(code) {\n  const format = await getWrapped(\"prettierWorker.js\");\n\n  const formatted = await (format)(\n    code,\n  );\n  return formatted;\n}\n"],
  "mappings": ";AAAA;AA2BA,IAAM,UAAU;AACT,IAAM,aAAa,CAAC,SAAS;AAClC,MAAI,QAAQ,OAAO;AACjB,WAAO,QAAQ;AAAA;AAGjB,MAAI;AACJ,MAAI,oBAAoB;AACxB,QAAM,EAAE,aAAa,OAAO;AAC5B,MAAI,SAAS,SAAS,WAAW;AAC/B,UAAM,MAAM,SAAS,MAAM,GAAG;AAC9B,wBAAoB;AACpB,gBAAY,SAAS,kBAAkB;AAAA,aAC9B,SAAS,WAAW,2BAA2B;AACxD,wBAAoB;AACpB,gBAAY,OAAO,IAAI,gBACrB,IAAI,KAAK;AAAA,MACP,uDAAuD;AAAA;AAAA,SAGtD;AACL,gBAAY,mCAAmC;AAAA;AAGjD,UAAQ,QAAQ,QAAQ,aAAa,QAAQ,cAC3C,KAAK,WAAW;AAElB,SAAO,QAAQ;AAAA;AAGjB,cAAc,WAAW,mBAAmB;AAC1C,MAAI,qBAAqB,OAAO,iBAAiB,aAAa;AAC5D,UAAM,UAAS,IAAI,OAAO;AAC1B,UAAM,EAAE,OAAO,UAAU,IAAI;AAC7B,UAAM,UAAU;AAAA,MACd,aAAa;AAAA,MACb,MAAM;AAAA;AAGR,YAAO,YAAY,SAAS,CAAC;AAE7B,WAAO,KAAK;AAAA;AAGd,QAAM,SAAS,IAAI,aAAa;AAChC,SAAO,KAAK;AAEZ,SAAO,KAAK,OAAO;AAAA;;;ACpErB,yBAAgC,MAAM;AACpC,QAAM,SAAS,MAAM,WAAW;AAEhC,QAAM,YAAY,MAAO,OACvB;AAEF,SAAO;AAAA;",
  "names": []
}
