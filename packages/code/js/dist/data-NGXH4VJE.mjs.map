{
  "version": 3,
  "sources": ["../data.mjs"],
  "sourcesContent": ["import { sha256, shaDB } from \"@spike.land/shadb\";\nimport Hash from \"ipfs-only-hash\";\n\nconst sess = {};\n/** @type {string} */\nlet userId;\nexport const getProjects = async () => {\n  userId = await getUserId();\n  const userData = await shaDB.get(userId, \"json\");\n\n  let appHash = null;\n  if (userData && userData.signal) {\n    //  setTimeout(()\n\n    return userData.signal;\n  }\n\n  if (typeof userData === \"string\" || userData === null || !userData.list) {\n    const projectId = (self && self.crypto && self.crypto.randomUUID &&\n      self.crypto.randomUUID()) || (await import(\"./uidV4.mjs\")).default();\n\n    await shaDB.put(\n      userId,\n      JSON.stringify({\n        ...userData,\n        list: [projectId],\n        [projectId]: {\n          lastOpen: Date.now(),\n        },\n      }),\n    );\n\n    if (appHash !== null) await shaDB.put(projectId, appHash);\n    return [projectId];\n  }\n\n  if (appHash !== null) await shaDB.put(userData.list[0], appHash);\n  return userData.list;\n};\n\nasync function addNewProject(projectName, hash) {\n  userId = await getUserId();\n  const userData = (await shaDB.get(userId, \"json\")) || { list: [] };\n  const projectId = (self && self.crypto && self.crypto.randomUUID &&\n    self.crypto.randomUUID()) || (await import(\"./uidV4.mjs\")).default();\n  const updated = {\n    ...userData,\n    projects: {\n      ...userData.projects,\n      [projectName]: {\n        projectId,\n        lastOpen: Date.now(),\n      },\n    },\n    [projectId]: {\n      lastOpen: Date.now(),\n    },\n    list: [projectId, ...userData.list],\n  };\n\n  await shaDB.put(userId, JSON.stringify(updated));\n\n  await shaDB.put(projectId, hash);\n}\n\nexport async function getUserId() {\n  if (userId) return userId;\n\n  const newID = await shaDB.get(\"uuid\", \"string\");\n\n  if (!newID) {\n    const resp = await fetch(\"https://spike.land/register\");\n    const data = await resp.json();\n    if (userId) return userId;\n    userId = data.uuid;\n    await shaDB.put(\"uuid\", data.uuid);\n    return data.uuid;\n  }\n  return newID;\n}\n\n/** @type {string} */\nlet activeProject;\nasync function getActiveProject() {\n  if (activeProject) return activeProject;\n  const projects = await getProjects();\n  if (projects.rootUrl) return projects;\n  activeProject = projects[0];\n  return activeProject;\n}\n\nexport async function edit(name) {\n  console.log(name);\n  const rootUrl = window.location.href.endsWith(\"/edit/\")\n    ? window.location.href.slice(0, -5)\n    : window.location.href.slice(0, -4);\n\n  const appCode = await fetch(`${rootUrl}/app.tsx`).then((res) => res.text());\n  const hash = await sha256(appCode);\n\n  await shaDB.put(hash, appCode);\n  const project = JSON.stringify({\n    code: hash,\n    transpiled: \"\",\n    html: \"\",\n    url: rootUrl,\n  });\n\n  const projectSha = await sha256(project);\n  await shaDB.put(projectSha, project);\n\n  await addNewProject(name, projectSha);\n\n  console.log(\"done\");\n\n  location.href = \"https://code.spike.land\";\n}\n\n/**\n * @param {string|undefined} _rootUrl\n */\nexport async function getIPFSCodeToLoad(_rootUrl) {\n  const rootUrl = _rootUrl ||\n    (window.location.href.endsWith(\"/edit/\")\n      ? window.location.href.slice(0, -5)\n      : window.location.href.slice(0, -4));\n\n  const codeReq = await fetch(rootUrl + \"app.tsx\");\n  const code = await codeReq.text();\n\n  const ret = {\n    code: code,\n    url: rootUrl,\n    transpiled: \"\",\n    html: \"\",\n  };\n  console.log({ ret });\n  return ret;\n}\n\n// export async function getCodeToLoad(room) {\n//   let code;\n\n//   const projectName = room || (await getActiveProject());\n//   if (projectName.rootUrl) {\n//     return getIPFSCodeToLoad(projectName.rootUrl);\n//   }\n//   const keyToLoad = await shaDB.get(projectName, \"string\");\n\n//   const projectDesc = await shaDB.get(keyToLoad, \"json\");\n\n//   if (room !== \"\") {\n//     const resp = await fetch(\n//       `https://code.spike.land/api/room/${room}/hashOfCode`,\n//     );\n//     const CID = await resp.text();\n//     if (CID === \"\" && projectDesc === null) {\n//       code = await getStarter();\n//     } else if (projectDesc && projectDesc.code && CID) {\n//       const codeFromIdb = await shaDB.get(projectDesc.code, \"string\");\n//       const CIDofCodeFromIDB = await Hash.of(codeFromIdb);\n\n//       if (CIDofCodeFromIDB && CID === CIDofCodeFromIDB) {\n//         code = codeFromIdb;\n//       }\n//     }\n\n//     if (!code) {\n//       if (CID) {\n//         const respCode = await fetch(\n//           `https://code.spike.land/api/room/${room}/code`,\n//         );\n//         code = await respCode.text();\n//       } else {\n//         code = await getStarter();\n//       }\n//     }\n\n//     const data = {\n//       code: code,\n//       transpiled:\n//         (projectDesc && (await shaDB.get(projectDesc.transpiled, \"string\"))) ||\n//         \"\",\n//       html: (projectDesc && (await shaDB.get(projectDesc.html, \"string\"))) ||\n//         \"\",\n//     };\n\n//     return data;\n//   }\n\n//   const data = {\n//     code: (await shaDB.get(projectDesc, \"string\")) || (await getStarter()),\n//     transpiled: null,\n//     html: null,\n//   };\n//   return data;\n// }\n\nconst saved = {\n  code: \"\",\n  html: null,\n  css: \"\",\n  transpiled: null,\n  url: null,\n};\n\nconst toSave = {\n  code: \"\",\n  html: null,\n  transpiled: null,\n};\n\nexport const saveCode =\n  /**\n   * @param {{ code: any; url?: any; html?: any; transpiled?: any; i?: number; }} opts\n   * @param {number} counter\n   */\n  async (opts, counter) => {\n    const { code, codeNonFormatted, html, transpiled } = opts;\n    toSave.code = code;\n\n    if (window.sess.i > counter) return;\n\n    if (globalThis.broad && codeNonFormatted) {\n      const hashOfCode = await Hash.of(codeNonFormatted);\n\n      sess.codeNonFormatted = codeNonFormatted;\n\n      setTimeout(\n        async () =>\n          sess.codeNonFormatted === codeNonFormatted &&\n          globalThis.broad({\n            starterCode: window.starterCode,\n            code: codeNonFormatted,\n            transpiled,\n            i: opts.i,\n            css: opts.css,\n            html: opts.html,\n            // css: getCss({ html }),\n            hashOfStarterCode: window.starterCode &&\n              (await Hash.of(window.starterCode)),\n            hashOfCode,\n          }),\n        500,\n      );\n      return;\n    }\n    // const saveCode = async () => {\n    //   const res = await ipfsClient.add(code, { onlyHash: true });\n    //   // const CID = res.cid.toString();\n    //   // const UID = await getUserId();\n\n    //   // const url = `/add/${CID}`;\n    //   // fetch(`https://code.spike.land${url}`, {\n    //   //   method: \"POST\",\n    //   //   headers: {\n    //   //     UID: UID,\n    //   //   },\n    //   //   body: code,\n    //   // });\n    // };\n    // saveCode();\n    const { shareItAsHtml } = await import(\"./share.mjs\");\n    const sharePromise = shareItAsHtml(opts);\n\n    if (opts.i > counter) return;\n    const url = await sharePromise;\n    const projectName = opts.room || (await getActiveProject());\n    if (opts.i > counter) return;\n    opts.url = url;\n    // const prevHash = await shaDB.get(projectName, \"string\");\n    const desc = {\n      url: await sha256(url),\n      code: await sha256(code),\n      html: await sha256(html),\n      transpiled: await sha256(transpiled),\n    };\n\n    const hash = await sha256(JSON.stringify(desc));\n    await shaDB.put(hash, JSON.stringify(desc));\n\n    // const prevData = await shaDB.get(prevHash, s);\n    if (code) {\n      await shaDB.put(desc.code, code);\n    }\n    if (html) {\n      await shaDB.put(desc.html, html);\n    }\n    if (transpiled) {\n      await shaDB.put(desc.transpiled, transpiled);\n    }\n\n    await shaDB.put(projectName, hash);\n    Object.assign(saved, { html, code, transpiled, url });\n    return saved;\n  };\n\n// function getStarter() {\n//   return fetch(`https://code.spike.land/examples/rca.tsx`).then((res) =>\n//     res.text()\n//   );\n// }\n"],
  "mappings": "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",
  "names": []
}
