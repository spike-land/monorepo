{
  "version": 3,
  "sources": ["../../../../node_modules/fast-diff/diff.js", "../../../../node_modules/textdiff-create/index.js", "../../../../node_modules/textdiff-patch/index.js", "../session.tsx"],
  "sourcesContent": ["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n", "'use strict';\n\nvar diff = require('fast-diff');\n\nmodule.exports = function (original, revision) {\n  var result = diff(original, revision);\n  // According to latest jsperf tests, there's no need to cache array length\n  for (var i = 0; i < result.length; i++) {\n    var item = result[i];\n    // If operation is DELETE or EQUAL, replace the actual text by its length\n    if (item[0] < 1) {\n      item[1] = item[1].length;\n    }\n  }\n  return result;\n};\n", "'use strict';\n\nmodule.exports = function (original, delta) {\n  var result = '',\n      index = 0;\n\n  // According to latest jsperf tests, there's no need to cache array length\n  for (var i = 0; i < delta.length; i++) {\n    var item = delta[i],\n        operation = item[0],\n        value = item[1];\n\n    if (operation == -1) {\n      // DELETE\n      index += value;\n    } else if (operation == 0) {\n      // KEEP\n      result += original.slice(index, index += value);\n    } else {\n      // INSERT\n      result += value;\n    }\n  }\n  return result;\n};\n", "import { fromJS, isKeyed, Record } from \"immutable\";\n// @ts-expect-error\nimport createDelta from \"textdiff-create\";\n// @ts-expect-error\nimport applyPatch from \"textdiff-patch\";\n// import * as Immutable from \"immutable\"\n\ntype IUsername = string;\n\nexport interface ICodeSession {\n  code: string;\n  i: number;\n  errorDiff: string;\n  transpiled: string;\n  html: string;\n  css: string;\n}\n\nexport interface INewWSConnection {\n  uuid: string;\n  timestamp: number;\n  hashCode: number;\n  type: \"new-ws-connection\";\n}\n\ninterface ICodeInitEvent extends ICodeSession {\n  name: IUsername;\n  uuid: string;\n  type: \"code-init\";\n  hashOfCode: string;\n}\n\ninterface OtherEvent {\n  name: IUsername;\n  uuid: string;\n  target: IUsername | \"broadcast\";\n  type: \"start\" | \"open\" | \"quit\" | \"get-cid\" | \"provide-cid\" | \"new-ws\";\n  timestamp: number;\n}\n\nexport type IEvent =\n  | INewWSConnection\n  | OtherEvent\n  | ICodeInitEvent;\n\ninterface ICapabilities {\n  prettier: boolean;\n  babel: boolean;\n  sessionStorage?: boolean;\n  webRRT: boolean;\n  prerender: boolean;\n  IPFS: boolean;\n}\n\nexport interface IUserJSON {\n  name: IUsername;\n  capabilities: ICapabilities;\n  state: ICodeSession;\n  users: {};\n  events: IEvent[];\n}\n\ninterface IQTaskEvent {\n  uuid: string;\n  name: string;\n  operation: string;\n  data: string;\n}\n\nexport interface IUser extends\n  Record<{\n    name: IUsername;\n    room: string;\n    state: Record<ICodeSession>;\n    capabilities: ICapabilities;\n    users: {};\n    events: IEvent[];\n  }> {\n}\n\nfunction initSession(room: string, u: IUserJSON) {\n  return Record({ ...u, room, state: Record(u.state)() });\n}\n\nexport interface ICodeSess {\n  room: string;\n  hashCodeSession: number;\n  hashCode: () => number;\n  addEvent: (e: IEvent) => void;\n  setRoom: (room: string) => void;\n  json: () => IUserJSON;\n  processEvents: () => void;\n}\n\nconst hashStore: { [key: number]: Record<ICodeSession> } = {};\nexport class CodeSession implements ICodeSess {\n  session: IUser;\n  hashCodeSession: number;\n  public room: string = \"\";\n  created: string = new Date().toISOString();\n  constructor(room: string, user: IUserJSON) {\n    let savedState: ICodeSession | null = null;\n    this.room = room;\n    // if (user.state.code === \"\" && room) {\n    // const cacheKey = `state-${room}`;\n\n    // if (storageAvailable(\"localStorage\")) {\n    //   const savedStateStr = localStorage.getItem(cacheKey);\n    //   if (savedStateStr) {\n    //     savedState = JSON.parse(savedStateStr);\n    //   } else {\n    //     fetch(`https://code.spike.land/api/room/${room}/mySession`).then(\n    //       (resp) => resp.json(),\n    //     ).then((session: IUserJSON) => {\n    //       localStorage.setItem(cacheKey, JSON.stringify(session.state));\n    //       this.session.set(\"state\", Record(session.state)());\n    //     });\n    //   }\n    // }\n    // }\n\n    this.session = initSession(room, {\n      ...user,\n      state: savedState ? savedState : user.state,\n\n      capabilities: {\n        ...user.capabilities,\n        sessionStorage: storageAvailable(\"sessionStorage\"),\n      },\n    })();\n\n    this.hashCodeSession = this.session.get(\"state\").hashCode();\n    hashStore[this.session.get(\"state\").hashCode()] = this.session.get(\"state\");\n  }\n\n  public addEvent(e: IEvent) {\n    this.session.get(\"events\").push({\n      ...e,\n    });\n    setTimeout(() => this.processEvents);\n  }\n\n  public hashCode() {\n    return this.session.get(\"state\").hashCode();\n  }\n\n  processEvents() {\n    const events = this.session.get(\"events\");\n    const event = events.shift();\n\n    if (event) {\n      switch (event.type) {\n        case \"code-init\":\n          const { code, transpiled, i, css, errorDiff, html } = event;\n          const sess: ICodeSession = {\n            code,\n            transpiled,\n            i,\n            css,\n            errorDiff,\n            html,\n          };\n\n          this.session.set(\"events\", events);\n          this.session.set(\"state\", Record(sess)());\n\n          // const cacheKey = `state-${this.room}`;\n\n          // if (storageAvailable(\"localStorage\")) {\n          //   localStorage.setItem(cacheKey, JSON.stringify(sess));\n          // }\n          // this.session.set(\"events\", events);\n      }\n    }\n  }\n\n  public createPatchFromHashCode(oldHash: number, state: ICodeSession) {\n    if (hashStore[oldHash]) {\n      const oldRec = hashStore[oldHash];\n      const oldState = JSON.stringify(oldRec.toJSON());\n\n      const newRec = oldRec.merge(state);\n      const newHash = newRec.hashCode();\n      hashStore[newHash] = newRec;\n\n      const newState = JSON.stringify(newRec.toJSON());\n      const patch = createPatch(oldState, newState);\n      return {\n        oldHash,\n        newHash,\n        patch,\n      };\n    }\n  }\n\n  public createPatch(state: ICodeSession) {\n    if (state.code === this.session.get(\"state\").get(\"code\")) {\n      return {\n        oldHash: this.session.get(\"state\").hashCode(),\n        newHash: this.session.get(\"state\").hashCode(),\n        patch: \"\",\n      };\n    }\n    const oldState = JSON.stringify(this.session.get(\"state\").toJSON());\n\n    const oldHash = this.session.get(\"state\").hashCode();\n    hashStore[oldHash] = this.session.get(\"state\");\n    const oldRec = this.session.get(\"state\");\n\n    const newRec = oldRec.merge(state);\n    const newHash = newRec.hashCode();\n\n    hashStore[newHash] = newRec;\n\n    const newState = JSON.stringify(newRec.toJSON());\n    const patch = createPatch(oldState, newState);\n    return {\n      oldHash,\n      newHash,\n      patch,\n    };\n  }\n\n  public applyPatch({\n    oldHash,\n    newHash,\n    patch,\n  }: { oldHash: number; newHash: number; patch: string }) {\n    const oldHashCheck = this.session.get(\"state\").hashCode();\n\n    if (oldHashCheck !== oldHash) {\n      console.error(\"Cant update\");\n      return;\n    }\n\n    const oldST = this.session.get(\"state\").toJSON();\n    const oldState = JSON.stringify(oldST);\n    const oldCode = oldST.code;\n    const newState = JSON.parse(applyPatch(oldState, JSON.parse(patch)));\n    const newRec: Record<ICodeSession> = Record<ICodeSession>(newState)();\n\n    console.log({ newState });\n    console.log(newRec.hashCode());\n\n    const newRecord = this.session.get(\"state\").merge(newRec);\n    const newCode = newRecord.get(\"code\");\n    if (oldCode === newCode) return;\n    console.log(newRecord.hashCode());\n    const newHashCheck = newRecord.hashCode();\n\n    if (newHashCheck === newHash) {\n      this.session = this.session.set(\"state\", newRecord);\n      //  console.error(\"WRONG update\");\n      return;\n    } else {\n      console.log(\"WRONG\");\n      console.log({\n        newState,\n      });\n    }\n  }\n\n  public json() {\n    const user = this.session.toJSON();\n    const state = user.state.toJSON();\n    return { ...user, state };\n  }\n  public setRoom(room: string) {\n    const user = this.session.set(\"room\", room);\n    this.session = user;\n  }\n}\n\nlet session: CodeSession | null = null;\n\nexport default (room: string, u: IUserJSON): ICodeSess =>\n  session || new CodeSession(room, u);\n\nfunction storageAvailable(type: string) {\n  try {\n    if (window.hasOwnProperty(type) === false) return;\n    var storage = window[type as keyof Window];\n    var x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction createPatch(oldCode: string, newCode: string) {\n  return JSON.stringify(createDelta(oldCode, newCode));\n}\n"],
  "mappings": "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",
  "names": []
}
