{
  "version": 3,
  "sources": ["../share.mjs"],
  "sourcesContent": ["// import { sha256, shaDB } from \"@spike.land/shadb\";\n// import { getEditorHTML, getHtml } from \"../dist/templates.mjs\";\n\n/**\n * @param {{\n * code: string\n * html: string\n * transpiled: string\n * }} props\n */\nexport const shareItAsHtml = async ({ room }) => {\n  // const allContent = [\n  //   {\n  //     path: \"/app/index.html\",\n  //     content: getHtml({ html, css, transpiled }),\n  //   },\n  //   { path: \"/app/app.js\", content: transpiled },\n  //   { path: \"/app/app.tsx\", content: code },\n  //   { path: \"/app/edit/index.html\", content: getEditorHTML() },\n  // ];\n\n  // const sha = await sha256(JSON.stringify(allContent));\n  // let rootUrl = await shaDB.get(sha, \"string\");\n\n  // if (rootUrl === null) {\n  // const res = await addAll(\n  //   allContent,\n  // );\n\n  // const appDir = res.find(\n  //   (x) => x.path === \"app\",\n  // );\n  // if (typeof appDir === \"undefined\") return null;\n\n  // rootUrl = `https://ipfs.io/ipfs/${appDir.CID}`;\n\n  // const { pathname } = new URL(window.location.href);\n\n  // if (pathname.endsWith(\"/edit/\") || pathname.endsWith(\"/edit\")) {\n  //   history.pushState({}, \"\", `/ipfs/${appDir.CID}/edit/`);\n  // }\n\n  // await shaDB.put(sha, rootUrl);\n  // }\n\n  // const preLoad = async (retry = 3) => {\n  //   try {\n  //     await Promise.all([\n  //       fetch(`${rootUrl}/app.js`).then((x) => x.text()),\n  //       fetch(`${rootUrl}/edit/index.html`).then((x) => x.text()),\n  //       fetch(rootUrl).then((x) => x.text()),\n  //     ]);\n  //   } catch {\n  //     if (retry > 0) return preLoad(retry - 1);\n  //   }\n  // };\n  // preLoad(3);\n  // await saveHtml(\n  //   getHtml({ HTML, css, link: linkToCode }),\n  // );\n\n  return `https://code.spike.land/api/room/${room}/public`;\n};\n\n/**\n * @param {{ path: string; content: any; }[]} files\n */\n// async function addAll(files) {\n//   // const { all, ipfsClient } = await import(\"./ipfsClient.mjs\");\n\n//   // const res = [];\n\n//   // for await (const result of ipfsClient.addAll(files)) {\n//   //   const { path, cid } = result;\n//   //   const CID = cid.toString();\n//   //   res.push({ path, CID });\n//   // }\n//   try {\n//     // const res = await all(ipfsClient.addAll(files));\n\n//     // for await (const result of ) {\n//     //   const { path, cid } = result;\n//     //   const CID = cid.toString();\n//     //   res.push({ path, CID });\n//     // }\n\n//     return res.map((r) => {\n//       const CID = r.cid.toString();\n\n//       return { path: r.path, CID };\n//     });\n//   } catch (e) {\n//     console.error({ error: e });\n//   }\n\n//   // return res;\n// }\n"],
  "mappings": "6BAUO,GAAM,GAAgB,MAAO,CAAE,UAmD7B,oCAAoC",
  "names": []
}
