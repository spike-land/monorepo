{
  "version": 3,
  "sources": ["../quickStart.mjs"],
  "sourcesContent": ["import { jsx } from \"@emotion/react\";\n\nlet formatter;\nlet transform;\n\nlet esbuildEsmTransform;\n// let esbuildTransform;\n// let babelTransform;\nlet getHtmlAndCss;\nlet initSess;\n\nexport const initSession = async (room, initData) => {\n  initSess = initSess || (await import(`./dist/session.mjs`)).default;\n\n  return initSess(room, initData);\n};\n\nexport const prettier = async (code) => {\n  formatter = formatter || (await import(`./formatter.mjs`)).formatter;\n  return await formatter(code);\n};\n\n// //\n\nexport async function startMonacoWithSession(session) {\n  const shadDom = document.getElementById(\"shadowEditor\");\n\n  const startMonaco = (await import(\"./dist/startMonaco.mjs\")).default;\n  const getEditor = await startMonaco(\n    /**\n     * @param {any} code\n     */\n    {\n      language: \"typescript\",\n      container: shadDom,\n      code: session.code,\n      /**\n       * @param {string} code\n       */\n      onChange: (code, changes) => runner(code, changes, session, ++session.i),\n    },\n  );\n\n  session.editor = getEditor();\n\n  const monaco = window.monaco;\n\n  monaco.languages.registerOnTypeFormattingEditProvider(\"typescript\", {\n    autoFormatTriggerCharacters: [\"}\", \"{\", \")\", \"(\", \";\"],\n\n    async provideOnTypeFormattingEdits(model) {\n      const text = await formatter(model.getValue());\n\n      return [\n        {\n          range: model.getFullModelRange(),\n\n          text,\n        },\n      ];\n    },\n  });\n\n  window.sess = session;\n  session.monaco = window.monaco;\n}\n\nasync function getErrors({ monaco, editor }) {\n  if (!monaco) {\n    return [{ messageText: \"Error with the error checking. Try to reload!\" }];\n  }\n\n  const model = editor.getModel();\n  const worker = await monaco.languages.typescript.getTypeScriptWorker();\n  const client = await worker(model);\n\n  const filename = model.uri.toString();\n  const diag = client.getSemanticDiagnostics(filename);\n  const comp = client.getCompilerOptionsDiagnostics(filename);\n  const syntax = client.getSyntacticDiagnostics(filename);\n  const fastError = await Promise.race([diag, comp, syntax]);\n\n  // model.dispose();\n  console.log(fastError);\n  return [];\n}\n\n// let getHtmlAndCss;\n\nasync function runner(c, changes = null, session, counter) {\n  session.changes.push(changes);\n\n  // saveCode = saveCode || (await import(\"./data.mjs\")).saveCode;\n  // getHtmlAndCss = getHtmlAndCss ||\n  //   (await import(\"./renderToString\")).getHtmlAndCss;\n  formatter = formatter || (await import(`./formatter.mjs`)).formatter;\n  esbuildEsmTransform = esbuildEsmTransform ||\n    (await import(`./esbuildEsm.mjs`)).transform;\n\n  // esbuildTransform = esbuildTransform ||\n  //   (await import(`./esbuild.mjs`)).transform;\n\n  // babelTransform = babelTransform ||\n  // (await import(`./babel.mjs`)).babelTransform;\n\n  // transform =transform || ((code) => Promise.any([babelTransform(code),esbuildEsmTransform(code), esbuildTransform(code)]))\n\n  transform = esbuildEsmTransform;\n\n  if (window.sendChannel) {\n    // const Hash = (aait import(\"ipfs-only-hash\")).default;\n    // const hashOfCode = await Hash.of(c);\n    // if (\n    //   window.hashOfCode === window.hashOfStarterCode &&\n    //   window.hashOfCode === hashOfCode\n    // ) {\n    //   return;\n    // }\n    // window[hashOfCode] = c;\n    // const prevHash = await Hash.of(session.code);\n    // window[prevHash] = session.code;\n\n    // if (window.hashOfCode !== hashOfCode) {\n    //   const starterCode = session.code;\n    //   const createDelta = (await import(\"textdiff-create\")).default;\n    //   const codeDiff = createPatch(starterCode, c, createDelta);\n\n    //   if (counter < session.i) return;\n    //   window.sendChannel.send({\n    //     changes,\n    //     i: session.i,\n    //     hashOfCode,\n    //     prevHash,\n    //     codeDiff,\n    //   });\n    // }\n  }\n\n  session.errorText = \"\";\n\n  const { monaco } = session;\n\n  try {\n    const cd = await formatter(c);\n\n    const transpiled = await transform(cd);\n\n    let restartError = false;\n    ///yellow\n    if (transpiled.length) {\n      if (counter < session.i) return;\n\n      try {\n        getHtmlAndCss = getHtmlAndCss ||\n          (await import(\"./vendor/renderToString.mjs\")).getHtmlAndCss;\n\n        if (counter < session.i) return;\n\n        const App = await getApp(transpiled);\n        const { html, css } = getHtmlAndCss(App);\n\n        session.transpiled = transpiled;\n        session.html = html;\n\n        const children = await getReactChild(transpiled);\n\n        // session.html = zbody.innerHTML;\n\n        session.setChild((c) => [...c, children]);\n        session.children = children;\n        restartError = !html;\n        session.codeNonFormatted = c;\n        // getCss = getCss || (await import(\"./templates.ts\")).getCss;\n        // setTimeout(async () => {\n        //     session.html = document.getElementById(\"zbody\").innerHTML;\n        // const css = getCss(session);\n        const code = cd;\n        session.css = css;\n        if (session.i !== counter) return;\n        session.saveCode &&\n          await session.saveCode({ transpiled, code, i: counter, css, html });\n        monaco.editor.setTheme(\"vs-dark\");\n        // }, 10);\n\n        return;\n      } catch (e) {\n        console.error(\"EXCEPTION\");\n        console.log({ e });\n        restartError = true;\n        console.error({ restartError });\n      }\n    }\n    if (session.i > counter) return;\n    const err = await getErrors(session);\n    if (session.i > counter) return;\n\n    if (restartError) {\n      err.push(\n        { messageText: \"Error while starting the app. Check the console!\" },\n      );\n    }\n\n    if (err.length) console.log({ err });\n\n    // if (err.length === 0 && transpiled.length) {\n    //   if (session.i > counter) return;\n    //   session.code = cd;\n    //   session.codeNonFormatted = c;\n\n    //   const code = cd;\n    //   const i = session.i;\n\n    //   saveCode(session, counter);\n    // } else {\n    //   console.log({ code: c, transpiled });\n    //   if (session.i > counter) return;\n\n    //   if (cd.length < 1000 && session.code.length < 1000) {\n    //     const diff = (await import(\"@spike.land/shadb\")).diff;\n\n    //     const slices = await diff(session.code, cd);\n\n    //     if (slices.c.length <= 3) {\n    //       session.lastErrors = 0;\n\n    //       return;\n    //     }\n\n    //     if (slices.c.length == 4) {\n    //       session.lastErrors = 0;\n    //       monaco.editor.setTheme(\"hc-black\");\n\n    //       return;\n    //     }\n    //   }\n    //   if (err && err[0] && err[0].messageText) {\n    //     console.error(err[0].messageText.toString());\n    //   }\n\n    //   return;\n    // }\n\n    monaco.editor.setTheme(\"vs-dark\");\n  } catch (err) {\n    // if (err.message) {\n    //   session.errorText = err.message;\n\n    //   const saveErrorCode = async () => {\n    //     const CID = await Hash.of(c);\n\n    //     const url = `/error/${CID}`;\n    //     fetch(`https://code.spike.land${url}`, {\n    //       method: \"POST\",\n    //       body: c,\n    //     });\n    //   };\n    //   saveErrorCode();\n    //   return;\n    // }\n\n    monaco.editor.setTheme(\"vs-light\");\n    setTimeout(() => {\n      monaco.editor.setTheme(\"hc-black\");\n    }, 50);\n    session.errorText = err.message;\n    console.error(err.message);\n  }\n}\n\nexport const startFromCode = async ({ code }) => {\n  let session = {\n    code,\n    i: 0,\n    changes: [],\n    saveCode: () => {},\n    setChild: () => {},\n  };\n  await runner(code, null, session);\n  await quickStart(session);\n};\n\nexport async function quickStart(session, room, keepFullScreen, saveCode) {\n  session.saveCode = saveCode;\n  // session.children = await getReactChild(session.transpiled);\n  session.children = null;\n  const { renderPreviewWindow } = await import(\n    \"./dist/renderPreviewWindow.mjs\"\n  );\n\n  await renderPreviewWindow(session, room, keepFullScreen);\n\n  // if (localStorage && session) {\n  //   const { code, transpiled, html, css, i } = session;\n  //   localStorage.setItem(\n  //     `state-${session.room}`,\n  //     JSON.stringify({ code, transpiled, html, css, i }),\n  //   );\n  // }\n  // // document.getElementById(\"root\").remove();\n\n  if (!keepFullScreen) await startMonacoWithSession(session);\n}\n\nasync function getReactChild(transpiled, mode = \"window\") {\n  const codeToHydrate = mode === \"window\"\n    ? transpiled.replace(\"body{\", \"#zbody{\")\n    : transpiled;\n\n  const objUrl = createJsBlob(\n    codeToHydrate,\n  );\n\n  const mod = (await import(objUrl));\n  URL.revokeObjectURL(objUrl);\n\n  return jsx(mod.default);\n}\n\n// function createPatch(oldCode, newCode, createDelta) {\n//   return JSON.stringify(createDelta(oldCode, newCode));\n// }\n\n/**\n * @param {BlobPart} code\n */\nfunction createJsBlob(code) {\n  const blob = new Blob([code], { type: \"application/javascript\" });\n\n  return URL.createObjectURL(blob);\n}\n\nasync function getApp(transpiled, mode = \"window\") {\n  const codeToHydrate = mode === \"window\"\n    ? transpiled.replace(\"body{\", \"#zbody{\")\n    : transpiled;\n\n  const objUrl = createJsBlob(\n    codeToHydrate,\n  );\n\n  const App = (await import(objUrl)).default;\n\n  URL.revokeObjectURL(objUrl);\n\n  return App;\n}\n"],
  "mappings": "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",
  "names": []
}
