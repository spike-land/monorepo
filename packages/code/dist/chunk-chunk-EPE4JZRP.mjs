import {
  require_clsx,
  require_prop_types
} from "./chunk-chunk-ZZWIKWD4.mjs";
import {
  runner
} from "./chunk-chunk-DKLPZCVD.mjs";
import {
  require_emotion_react_cjs
} from "./chunk-chunk-RNJNNLQS.mjs";
import {
  require_emotion_react_jsx_runtime_cjs
} from "./chunk-chunk-NFYMKIWC.mjs";
import {
  mST,
  onSessionUpdate
} from "./chunk-chunk-MIF2TXG6.mjs";
import {
  require_react_dom
} from "./chunk-chunk-M3XF32XQ.mjs";
import {
  require_react
} from "./chunk-chunk-UX3KX3KY.mjs";
import {
  __commonJS,
  __name,
  __toESM,
  init_define_process
} from "./chunk-chunk-A3E5PINE.mjs";

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/shims.js
var require_shims = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/shims.js"(exports) {
    "use strict";
    init_define_process();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.findInArray = findInArray;
    exports.isFunction = isFunction;
    exports.isNum = isNum;
    exports.int = int;
    exports.dontSetMe = dontSetMe;
    function findInArray(array, callback) {
      for (var i = 0, length = array.length; i < length; i++) {
        if (callback.apply(callback, [array[i], i, array]))
          return array[i];
      }
    }
    __name(findInArray, "findInArray");
    function isFunction(func) {
      return typeof func === "function" || Object.prototype.toString.call(func) === "[object Function]";
    }
    __name(isFunction, "isFunction");
    function isNum(num) {
      return typeof num === "number" && !isNaN(num);
    }
    __name(isNum, "isNum");
    function int(a) {
      return parseInt(a, 10);
    }
    __name(int, "int");
    function dontSetMe(props, propName, componentName) {
      if (props[propName]) {
        return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
      }
    }
    __name(dontSetMe, "dontSetMe");
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/getPrefix.js
var require_getPrefix = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/getPrefix.js"(exports) {
    "use strict";
    init_define_process();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getPrefix = getPrefix;
    exports.browserPrefixToKey = browserPrefixToKey;
    exports.browserPrefixToStyle = browserPrefixToStyle;
    exports.default = void 0;
    var prefixes = ["Moz", "Webkit", "O", "ms"];
    function getPrefix() {
      var _window$document, _window$document$docu;
      var prop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "transform";
      if (typeof window === "undefined")
        return "";
      var style = (_window$document = window.document) === null || _window$document === void 0 ? void 0 : (_window$document$docu = _window$document.documentElement) === null || _window$document$docu === void 0 ? void 0 : _window$document$docu.style;
      if (!style)
        return "";
      if (prop in style)
        return "";
      for (var i = 0; i < prefixes.length; i++) {
        if (browserPrefixToKey(prop, prefixes[i]) in style)
          return prefixes[i];
      }
      return "";
    }
    __name(getPrefix, "getPrefix");
    function browserPrefixToKey(prop, prefix) {
      return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
    }
    __name(browserPrefixToKey, "browserPrefixToKey");
    function browserPrefixToStyle(prop, prefix) {
      return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
    }
    __name(browserPrefixToStyle, "browserPrefixToStyle");
    function kebabToTitleCase(str) {
      var out = "";
      var shouldCapitalize = true;
      for (var i = 0; i < str.length; i++) {
        if (shouldCapitalize) {
          out += str[i].toUpperCase();
          shouldCapitalize = false;
        } else if (str[i] === "-") {
          shouldCapitalize = true;
        } else {
          out += str[i];
        }
      }
      return out;
    }
    __name(kebabToTitleCase, "kebabToTitleCase");
    var _default = getPrefix();
    exports.default = _default;
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/domFns.js
var require_domFns = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/domFns.js"(exports) {
    "use strict";
    init_define_process();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return typeof obj2;
        }, "_typeof");
      } else {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, "_typeof");
      }
      return _typeof(obj);
    }
    __name(_typeof, "_typeof");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.matchesSelector = matchesSelector;
    exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
    exports.addEvent = addEvent;
    exports.removeEvent = removeEvent;
    exports.outerHeight = outerHeight;
    exports.outerWidth = outerWidth;
    exports.innerHeight = innerHeight;
    exports.innerWidth = innerWidth;
    exports.offsetXYFromParent = offsetXYFromParent;
    exports.createCSSTransform = createCSSTransform;
    exports.createSVGTransform = createSVGTransform;
    exports.getTranslation = getTranslation;
    exports.getTouch = getTouch;
    exports.getTouchIdentifier = getTouchIdentifier;
    exports.addUserSelectStyles = addUserSelectStyles;
    exports.removeUserSelectStyles = removeUserSelectStyles;
    exports.addClassName = addClassName;
    exports.removeClassName = removeClassName;
    var _shims = require_shims();
    var _getPrefix = _interopRequireWildcard(require_getPrefix());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = /* @__PURE__ */ __name(function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      }, "_getRequireWildcardCache"))(nodeInterop);
    }
    __name(_getRequireWildcardCache, "_getRequireWildcardCache");
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    __name(_interopRequireWildcard, "_interopRequireWildcard");
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    __name(ownKeys, "ownKeys");
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    __name(_objectSpread, "_objectSpread");
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    __name(_defineProperty, "_defineProperty");
    var matchesSelectorFunc = "";
    function matchesSelector(el, selector) {
      if (!matchesSelectorFunc) {
        matchesSelectorFunc = (0, _shims.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(method) {
          return (0, _shims.isFunction)(el[method]);
        });
      }
      if (!(0, _shims.isFunction)(el[matchesSelectorFunc]))
        return false;
      return el[matchesSelectorFunc](selector);
    }
    __name(matchesSelector, "matchesSelector");
    function matchesSelectorAndParentsTo(el, selector, baseNode) {
      var node = el;
      do {
        if (matchesSelector(node, selector))
          return true;
        if (node === baseNode)
          return false;
        node = node.parentNode;
      } while (node);
      return false;
    }
    __name(matchesSelectorAndParentsTo, "matchesSelectorAndParentsTo");
    function addEvent(el, event, handler, inputOptions) {
      if (!el)
        return;
      var options = _objectSpread({
        capture: true
      }, inputOptions);
      if (el.addEventListener) {
        el.addEventListener(event, handler, options);
      } else if (el.attachEvent) {
        el.attachEvent("on" + event, handler);
      } else {
        el["on" + event] = handler;
      }
    }
    __name(addEvent, "addEvent");
    function removeEvent(el, event, handler, inputOptions) {
      if (!el)
        return;
      var options = _objectSpread({
        capture: true
      }, inputOptions);
      if (el.removeEventListener) {
        el.removeEventListener(event, handler, options);
      } else if (el.detachEvent) {
        el.detachEvent("on" + event, handler);
      } else {
        el["on" + event] = null;
      }
    }
    __name(removeEvent, "removeEvent");
    function outerHeight(node) {
      var height = node.clientHeight;
      var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height += (0, _shims.int)(computedStyle.borderTopWidth);
      height += (0, _shims.int)(computedStyle.borderBottomWidth);
      return height;
    }
    __name(outerHeight, "outerHeight");
    function outerWidth(node) {
      var width = node.clientWidth;
      var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width += (0, _shims.int)(computedStyle.borderLeftWidth);
      width += (0, _shims.int)(computedStyle.borderRightWidth);
      return width;
    }
    __name(outerWidth, "outerWidth");
    function innerHeight(node) {
      var height = node.clientHeight;
      var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      height -= (0, _shims.int)(computedStyle.paddingTop);
      height -= (0, _shims.int)(computedStyle.paddingBottom);
      return height;
    }
    __name(innerHeight, "innerHeight");
    function innerWidth(node) {
      var width = node.clientWidth;
      var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
      width -= (0, _shims.int)(computedStyle.paddingLeft);
      width -= (0, _shims.int)(computedStyle.paddingRight);
      return width;
    }
    __name(innerWidth, "innerWidth");
    function offsetXYFromParent(evt, offsetParent, scale) {
      var isBody = offsetParent === offsetParent.ownerDocument.body;
      var offsetParentRect = isBody ? {
        left: 0,
        top: 0
      } : offsetParent.getBoundingClientRect();
      var x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
      var y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
      return {
        x,
        y
      };
    }
    __name(offsetXYFromParent, "offsetXYFromParent");
    function createCSSTransform(controlPos, positionOffset) {
      var translation = getTranslation(controlPos, positionOffset, "px");
      return _defineProperty({}, (0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default), translation);
    }
    __name(createCSSTransform, "createCSSTransform");
    function createSVGTransform(controlPos, positionOffset) {
      var translation = getTranslation(controlPos, positionOffset, "");
      return translation;
    }
    __name(createSVGTransform, "createSVGTransform");
    function getTranslation(_ref2, positionOffset, unitSuffix) {
      var x = _ref2.x, y = _ref2.y;
      var translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");
      if (positionOffset) {
        var defaultX = "".concat(typeof positionOffset.x === "string" ? positionOffset.x : positionOffset.x + unitSuffix);
        var defaultY = "".concat(typeof positionOffset.y === "string" ? positionOffset.y : positionOffset.y + unitSuffix);
        translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
      }
      return translation;
    }
    __name(getTranslation, "getTranslation");
    function getTouch(e, identifier) {
      return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, function(t) {
        return identifier === t.identifier;
      }) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, function(t) {
        return identifier === t.identifier;
      });
    }
    __name(getTouch, "getTouch");
    function getTouchIdentifier(e) {
      if (e.targetTouches && e.targetTouches[0])
        return e.targetTouches[0].identifier;
      if (e.changedTouches && e.changedTouches[0])
        return e.changedTouches[0].identifier;
    }
    __name(getTouchIdentifier, "getTouchIdentifier");
    function addUserSelectStyles(doc) {
      if (!doc)
        return;
      var styleEl = doc.getElementById("react-draggable-style-el");
      if (!styleEl) {
        styleEl = doc.createElement("style");
        styleEl.type = "text/css";
        styleEl.id = "react-draggable-style-el";
        styleEl.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
        styleEl.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
        doc.getElementsByTagName("head")[0].appendChild(styleEl);
      }
      if (doc.body)
        addClassName(doc.body, "react-draggable-transparent-selection");
    }
    __name(addUserSelectStyles, "addUserSelectStyles");
    function removeUserSelectStyles(doc) {
      if (!doc)
        return;
      try {
        if (doc.body)
          removeClassName(doc.body, "react-draggable-transparent-selection");
        if (doc.selection) {
          doc.selection.empty();
        } else {
          var selection = (doc.defaultView || window).getSelection();
          if (selection && selection.type !== "Caret") {
            selection.removeAllRanges();
          }
        }
      } catch (e) {
      }
    }
    __name(removeUserSelectStyles, "removeUserSelectStyles");
    function addClassName(el, className) {
      if (el.classList) {
        el.classList.add(className);
      } else {
        if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
          el.className += " ".concat(className);
        }
      }
    }
    __name(addClassName, "addClassName");
    function removeClassName(el, className) {
      if (el.classList) {
        el.classList.remove(className);
      } else {
        el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), "g"), "");
      }
    }
    __name(removeClassName, "removeClassName");
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/positionFns.js
var require_positionFns = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/positionFns.js"(exports) {
    "use strict";
    init_define_process();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getBoundPosition = getBoundPosition;
    exports.snapToGrid = snapToGrid;
    exports.canDragX = canDragX;
    exports.canDragY = canDragY;
    exports.getControlPosition = getControlPosition;
    exports.createCoreData = createCoreData;
    exports.createDraggableData = createDraggableData;
    var _shims = require_shims();
    var _domFns = require_domFns();
    function getBoundPosition(draggable, x, y) {
      if (!draggable.props.bounds)
        return [x, y];
      var bounds = draggable.props.bounds;
      bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
      var node = findDOMNode(draggable);
      if (typeof bounds === "string") {
        var ownerDocument = node.ownerDocument;
        var ownerWindow = ownerDocument.defaultView;
        var boundNode;
        if (bounds === "parent") {
          boundNode = node.parentNode;
        } else {
          boundNode = ownerDocument.querySelector(bounds);
        }
        if (!(boundNode instanceof ownerWindow.HTMLElement)) {
          throw new Error('Bounds selector "' + bounds + '" could not find an element.');
        }
        var boundNodeEl = boundNode;
        var nodeStyle = ownerWindow.getComputedStyle(node);
        var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
        bounds = {
          left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
          top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
          right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
          bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
        };
      }
      if ((0, _shims.isNum)(bounds.right))
        x = Math.min(x, bounds.right);
      if ((0, _shims.isNum)(bounds.bottom))
        y = Math.min(y, bounds.bottom);
      if ((0, _shims.isNum)(bounds.left))
        x = Math.max(x, bounds.left);
      if ((0, _shims.isNum)(bounds.top))
        y = Math.max(y, bounds.top);
      return [x, y];
    }
    __name(getBoundPosition, "getBoundPosition");
    function snapToGrid(grid, pendingX, pendingY) {
      var x = Math.round(pendingX / grid[0]) * grid[0];
      var y = Math.round(pendingY / grid[1]) * grid[1];
      return [x, y];
    }
    __name(snapToGrid, "snapToGrid");
    function canDragX(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "x";
    }
    __name(canDragX, "canDragX");
    function canDragY(draggable) {
      return draggable.props.axis === "both" || draggable.props.axis === "y";
    }
    __name(canDragY, "canDragY");
    function getControlPosition(e, touchIdentifier, draggableCore) {
      var touchObj = typeof touchIdentifier === "number" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
      if (typeof touchIdentifier === "number" && !touchObj)
        return null;
      var node = findDOMNode(draggableCore);
      var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
      return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
    }
    __name(getControlPosition, "getControlPosition");
    function createCoreData(draggable, x, y) {
      var state = draggable.state;
      var isStart = !(0, _shims.isNum)(state.lastX);
      var node = findDOMNode(draggable);
      if (isStart) {
        return {
          node,
          deltaX: 0,
          deltaY: 0,
          lastX: x,
          lastY: y,
          x,
          y
        };
      } else {
        return {
          node,
          deltaX: x - state.lastX,
          deltaY: y - state.lastY,
          lastX: state.lastX,
          lastY: state.lastY,
          x,
          y
        };
      }
    }
    __name(createCoreData, "createCoreData");
    function createDraggableData(draggable, coreData) {
      var scale = draggable.props.scale;
      return {
        node: coreData.node,
        x: draggable.state.x + coreData.deltaX / scale,
        y: draggable.state.y + coreData.deltaY / scale,
        deltaX: coreData.deltaX / scale,
        deltaY: coreData.deltaY / scale,
        lastX: draggable.state.x,
        lastY: draggable.state.y
      };
    }
    __name(createDraggableData, "createDraggableData");
    function cloneBounds(bounds) {
      return {
        left: bounds.left,
        top: bounds.top,
        right: bounds.right,
        bottom: bounds.bottom
      };
    }
    __name(cloneBounds, "cloneBounds");
    function findDOMNode(draggable) {
      var node = draggable.findDOMNode();
      if (!node) {
        throw new Error("<DraggableCore>: Unmounted during event!");
      }
      return node;
    }
    __name(findDOMNode, "findDOMNode");
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/log.js
var require_log = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/utils/log.js"(exports) {
    "use strict";
    init_define_process();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = log;
    function log() {
      var _console;
      if (void 0)
        (_console = console).log.apply(_console, arguments);
    }
    __name(log, "log");
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/DraggableCore.js
var require_DraggableCore = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/DraggableCore.js"(exports) {
    "use strict";
    init_define_process();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return typeof obj2;
        }, "_typeof");
      } else {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, "_typeof");
      }
      return _typeof(obj);
    }
    __name(_typeof, "_typeof");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React3 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _log = _interopRequireDefault(require_log());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = /* @__PURE__ */ __name(function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      }, "_getRequireWildcardCache"))(nodeInterop);
    }
    __name(_getRequireWildcardCache, "_getRequireWildcardCache");
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    __name(_interopRequireWildcard, "_interopRequireWildcard");
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    __name(_slicedToArray, "_slicedToArray");
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    __name(_nonIterableRest, "_nonIterableRest");
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    __name(_unsupportedIterableToArray, "_unsupportedIterableToArray");
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    __name(_arrayLikeToArray, "_arrayLikeToArray");
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    __name(_iterableToArrayLimit, "_iterableToArrayLimit");
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    __name(_arrayWithHoles, "_arrayWithHoles");
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    __name(_classCallCheck, "_classCallCheck");
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(_defineProperties, "_defineProperties");
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    __name(_createClass, "_createClass");
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    __name(_inherits, "_inherits");
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      }, "_setPrototypeOf");
      return _setPrototypeOf(o, p);
    }
    __name(_setPrototypeOf, "_setPrototypeOf");
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return /* @__PURE__ */ __name(function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      }, "_createSuperInternal");
    }
    __name(_createSuper, "_createSuper");
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    __name(_possibleConstructorReturn, "_possibleConstructorReturn");
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    __name(_assertThisInitialized, "_assertThisInitialized");
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    __name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      }, "_getPrototypeOf");
      return _getPrototypeOf(o);
    }
    __name(_getPrototypeOf, "_getPrototypeOf");
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    __name(_defineProperty, "_defineProperty");
    var eventsFor = {
      touch: {
        start: "touchstart",
        move: "touchmove",
        stop: "touchend"
      },
      mouse: {
        start: "mousedown",
        move: "mousemove",
        stop: "mouseup"
      }
    };
    var dragEventFor = eventsFor.mouse;
    var DraggableCore = /* @__PURE__ */ function(_React$Component) {
      _inherits(DraggableCore2, _React$Component);
      var _super = _createSuper(DraggableCore2);
      function DraggableCore2() {
        var _this;
        _classCallCheck(this, DraggableCore2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty(_assertThisInitialized(_this), "state", {
          dragging: false,
          lastX: NaN,
          lastY: NaN,
          touchIdentifier: null
        });
        _defineProperty(_assertThisInitialized(_this), "mounted", false);
        _defineProperty(_assertThisInitialized(_this), "handleDragStart", function(e) {
          _this.props.onMouseDown(e);
          if (!_this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0)
            return false;
          var thisNode = _this.findDOMNode();
          if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
            throw new Error("<DraggableCore> not mounted on DragStart!");
          }
          var ownerDocument = thisNode.ownerDocument;
          if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, thisNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode)) {
            return;
          }
          if (e.type === "touchstart")
            e.preventDefault();
          var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
          _this.setState({
            touchIdentifier
          });
          var position = (0, _positionFns.getControlPosition)(e, touchIdentifier, _assertThisInitialized(_this));
          if (position == null)
            return;
          var x = position.x, y = position.y;
          var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
          (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent);
          (0, _log.default)("calling", _this.props.onStart);
          var shouldUpdate = _this.props.onStart(e, coreEvent);
          if (shouldUpdate === false || _this.mounted === false)
            return;
          if (_this.props.enableUserSelectHack)
            (0, _domFns.addUserSelectStyles)(ownerDocument);
          _this.setState({
            dragging: true,
            lastX: x,
            lastY: y
          });
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
          (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
        });
        _defineProperty(_assertThisInitialized(_this), "handleDrag", function(e) {
          var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
          if (position == null)
            return;
          var x = position.x, y = position.y;
          if (Array.isArray(_this.props.grid)) {
            var deltaX = x - _this.state.lastX, deltaY = y - _this.state.lastY;
            var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
            var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);
            deltaX = _snapToGrid2[0];
            deltaY = _snapToGrid2[1];
            if (!deltaX && !deltaY)
              return;
            x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
          }
          var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
          (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent);
          var shouldUpdate = _this.props.onDrag(e, coreEvent);
          if (shouldUpdate === false || _this.mounted === false) {
            try {
              _this.handleDragStop(new MouseEvent("mouseup"));
            } catch (err) {
              var event = document.createEvent("MouseEvents");
              event.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
              _this.handleDragStop(event);
            }
            return;
          }
          _this.setState({
            lastX: x,
            lastY: y
          });
        });
        _defineProperty(_assertThisInitialized(_this), "handleDragStop", function(e) {
          if (!_this.state.dragging)
            return;
          var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));
          if (position == null)
            return;
          var x = position.x, y = position.y;
          var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
          var shouldContinue = _this.props.onStop(e, coreEvent);
          if (shouldContinue === false || _this.mounted === false)
            return false;
          var thisNode = _this.findDOMNode();
          if (thisNode) {
            if (_this.props.enableUserSelectHack)
              (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
          }
          (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent);
          _this.setState({
            dragging: false,
            lastX: NaN,
            lastY: NaN
          });
          if (thisNode) {
            (0, _log.default)("DraggableCore: Removing handlers");
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
            (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseDown", function(e) {
          dragEventFor = eventsFor.mouse;
          return _this.handleDragStart(e);
        });
        _defineProperty(_assertThisInitialized(_this), "onMouseUp", function(e) {
          dragEventFor = eventsFor.mouse;
          return _this.handleDragStop(e);
        });
        _defineProperty(_assertThisInitialized(_this), "onTouchStart", function(e) {
          dragEventFor = eventsFor.touch;
          return _this.handleDragStart(e);
        });
        _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function(e) {
          dragEventFor = eventsFor.touch;
          return _this.handleDragStop(e);
        });
        return _this;
      }
      __name(DraggableCore2, "DraggableCore");
      _createClass(DraggableCore2, [{
        key: "componentDidMount",
        value: /* @__PURE__ */ __name(function componentDidMount() {
          this.mounted = true;
          var thisNode = this.findDOMNode();
          if (thisNode) {
            (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
              passive: false
            });
          }
        }, "componentDidMount")
      }, {
        key: "componentWillUnmount",
        value: /* @__PURE__ */ __name(function componentWillUnmount() {
          this.mounted = false;
          var thisNode = this.findDOMNode();
          if (thisNode) {
            var ownerDocument = thisNode.ownerDocument;
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
            (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
            (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
              passive: false
            });
            if (this.props.enableUserSelectHack)
              (0, _domFns.removeUserSelectStyles)(ownerDocument);
          }
        }, "componentWillUnmount")
      }, {
        key: "findDOMNode",
        value: /* @__PURE__ */ __name(function findDOMNode() {
          var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;
          return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$nodeRef = _this$props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
        }, "findDOMNode")
      }, {
        key: "render",
        value: /* @__PURE__ */ __name(function render() {
          return /* @__PURE__ */ React3.cloneElement(React3.Children.only(this.props.children), {
            onMouseDown: this.onMouseDown,
            onMouseUp: this.onMouseUp,
            onTouchEnd: this.onTouchEnd
          });
        }, "render")
      }]);
      return DraggableCore2;
    }(React3.Component);
    exports.default = DraggableCore;
    _defineProperty(DraggableCore, "displayName", "DraggableCore");
    _defineProperty(DraggableCore, "propTypes", {
      allowAnyClick: _propTypes.default.bool,
      disabled: _propTypes.default.bool,
      enableUserSelectHack: _propTypes.default.bool,
      offsetParent: /* @__PURE__ */ __name(function offsetParent(props, propName) {
        if (props[propName] && props[propName].nodeType !== 1) {
          throw new Error("Draggable's offsetParent must be a DOM Node.");
        }
      }, "offsetParent"),
      grid: _propTypes.default.arrayOf(_propTypes.default.number),
      handle: _propTypes.default.string,
      cancel: _propTypes.default.string,
      nodeRef: _propTypes.default.object,
      onStart: _propTypes.default.func,
      onDrag: _propTypes.default.func,
      onStop: _propTypes.default.func,
      onMouseDown: _propTypes.default.func,
      scale: _propTypes.default.number,
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    });
    _defineProperty(DraggableCore, "defaultProps", {
      allowAnyClick: false,
      disabled: false,
      enableUserSelectHack: true,
      onStart: /* @__PURE__ */ __name(function onStart() {
      }, "onStart"),
      onDrag: /* @__PURE__ */ __name(function onDrag() {
      }, "onDrag"),
      onStop: /* @__PURE__ */ __name(function onStop() {
      }, "onStop"),
      onMouseDown: /* @__PURE__ */ __name(function onMouseDown() {
      }, "onMouseDown"),
      scale: 1
    });
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/Draggable.js
var require_Draggable = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/Draggable.js"(exports) {
    "use strict";
    init_define_process();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return typeof obj2;
        }, "_typeof");
      } else {
        _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, "_typeof");
      }
      return _typeof(obj);
    }
    __name(_typeof, "_typeof");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DraggableCore", {
      enumerable: true,
      get: /* @__PURE__ */ __name(function get() {
        return _DraggableCore.default;
      }, "get")
    });
    exports.default = void 0;
    var React3 = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _clsx2 = _interopRequireDefault(require_clsx());
    var _domFns = require_domFns();
    var _positionFns = require_positionFns();
    var _shims = require_shims();
    var _DraggableCore = _interopRequireDefault(require_DraggableCore());
    var _log = _interopRequireDefault(require_log());
    var _excluded = ["axis", "bounds", "children", "defaultPosition", "defaultClassName", "defaultClassNameDragging", "defaultClassNameDragged", "position", "positionOffset", "scale"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = /* @__PURE__ */ __name(function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      }, "_getRequireWildcardCache"))(nodeInterop);
    }
    __name(_getRequireWildcardCache, "_getRequireWildcardCache");
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    __name(_interopRequireWildcard, "_interopRequireWildcard");
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    __name(_extends, "_extends");
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    __name(_objectWithoutProperties, "_objectWithoutProperties");
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    __name(_objectWithoutPropertiesLoose, "_objectWithoutPropertiesLoose");
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    __name(ownKeys, "ownKeys");
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    __name(_objectSpread, "_objectSpread");
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    __name(_slicedToArray, "_slicedToArray");
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    __name(_nonIterableRest, "_nonIterableRest");
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    __name(_unsupportedIterableToArray, "_unsupportedIterableToArray");
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    __name(_arrayLikeToArray, "_arrayLikeToArray");
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    __name(_iterableToArrayLimit, "_iterableToArrayLimit");
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    __name(_arrayWithHoles, "_arrayWithHoles");
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    __name(_classCallCheck, "_classCallCheck");
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    __name(_defineProperties, "_defineProperties");
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    __name(_createClass, "_createClass");
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    __name(_inherits, "_inherits");
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      }, "_setPrototypeOf");
      return _setPrototypeOf(o, p);
    }
    __name(_setPrototypeOf, "_setPrototypeOf");
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return /* @__PURE__ */ __name(function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      }, "_createSuperInternal");
    }
    __name(_createSuper, "_createSuper");
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    __name(_possibleConstructorReturn, "_possibleConstructorReturn");
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    __name(_assertThisInitialized, "_assertThisInitialized");
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    __name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      }, "_getPrototypeOf");
      return _getPrototypeOf(o);
    }
    __name(_getPrototypeOf, "_getPrototypeOf");
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    __name(_defineProperty, "_defineProperty");
    var Draggable2 = /* @__PURE__ */ function(_React$Component) {
      _inherits(Draggable3, _React$Component);
      var _super = _createSuper(Draggable3);
      function Draggable3(props) {
        var _this;
        _classCallCheck(this, Draggable3);
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "onDragStart", function(e, coreData) {
          (0, _log.default)("Draggable: onDragStart: %j", coreData);
          var shouldStart = _this.props.onStart(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData));
          if (shouldStart === false)
            return false;
          _this.setState({
            dragging: true,
            dragged: true
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onDrag", function(e, coreData) {
          if (!_this.state.dragging)
            return false;
          (0, _log.default)("Draggable: onDrag: %j", coreData);
          var uiData = (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData);
          var newState = {
            x: uiData.x,
            y: uiData.y
          };
          if (_this.props.bounds) {
            var x = newState.x, y = newState.y;
            newState.x += _this.state.slackX;
            newState.y += _this.state.slackY;
            var _getBoundPosition = (0, _positionFns.getBoundPosition)(_assertThisInitialized(_this), newState.x, newState.y), _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2), newStateX = _getBoundPosition2[0], newStateY = _getBoundPosition2[1];
            newState.x = newStateX;
            newState.y = newStateY;
            newState.slackX = _this.state.slackX + (x - newState.x);
            newState.slackY = _this.state.slackY + (y - newState.y);
            uiData.x = newState.x;
            uiData.y = newState.y;
            uiData.deltaX = newState.x - _this.state.x;
            uiData.deltaY = newState.y - _this.state.y;
          }
          var shouldUpdate = _this.props.onDrag(e, uiData);
          if (shouldUpdate === false)
            return false;
          _this.setState(newState);
        });
        _defineProperty(_assertThisInitialized(_this), "onDragStop", function(e, coreData) {
          if (!_this.state.dragging)
            return false;
          var shouldContinue = _this.props.onStop(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData));
          if (shouldContinue === false)
            return false;
          (0, _log.default)("Draggable: onDragStop: %j", coreData);
          var newState = {
            dragging: false,
            slackX: 0,
            slackY: 0
          };
          var controlled = Boolean(_this.props.position);
          if (controlled) {
            var _this$props$position = _this.props.position, x = _this$props$position.x, y = _this$props$position.y;
            newState.x = x;
            newState.y = y;
          }
          _this.setState(newState);
        });
        _this.state = {
          dragging: false,
          dragged: false,
          x: props.position ? props.position.x : props.defaultPosition.x,
          y: props.position ? props.position.y : props.defaultPosition.y,
          prevPropsPosition: _objectSpread({}, props.position),
          slackX: 0,
          slackY: 0,
          isElementSVG: false
        };
        if (props.position && !(props.onDrag || props.onStop)) {
          console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
        }
        return _this;
      }
      __name(Draggable3, "Draggable");
      _createClass(Draggable3, [{
        key: "componentDidMount",
        value: /* @__PURE__ */ __name(function componentDidMount() {
          if (typeof window.SVGElement !== "undefined" && this.findDOMNode() instanceof window.SVGElement) {
            this.setState({
              isElementSVG: true
            });
          }
        }, "componentDidMount")
      }, {
        key: "componentWillUnmount",
        value: /* @__PURE__ */ __name(function componentWillUnmount() {
          this.setState({
            dragging: false
          });
        }, "componentWillUnmount")
      }, {
        key: "findDOMNode",
        value: /* @__PURE__ */ __name(function findDOMNode() {
          var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;
          return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$nodeRef = _this$props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
        }, "findDOMNode")
      }, {
        key: "render",
        value: /* @__PURE__ */ __name(function render() {
          var _clsx;
          var _this$props2 = this.props, axis = _this$props2.axis, bounds = _this$props2.bounds, children = _this$props2.children, defaultPosition = _this$props2.defaultPosition, defaultClassName = _this$props2.defaultClassName, defaultClassNameDragging = _this$props2.defaultClassNameDragging, defaultClassNameDragged = _this$props2.defaultClassNameDragged, position = _this$props2.position, positionOffset = _this$props2.positionOffset, scale = _this$props2.scale, draggableCoreProps = _objectWithoutProperties(_this$props2, _excluded);
          var style = {};
          var svgTransform = null;
          var controlled = Boolean(position);
          var draggable = !controlled || this.state.dragging;
          var validPosition = position || defaultPosition;
          var transformOpts = {
            x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
            y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
          };
          if (this.state.isElementSVG) {
            svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
          } else {
            style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
          }
          var className = (0, _clsx2.default)(children.props.className || "", defaultClassName, (_clsx = {}, _defineProperty(_clsx, defaultClassNameDragging, this.state.dragging), _defineProperty(_clsx, defaultClassNameDragged, this.state.dragged), _clsx));
          return /* @__PURE__ */ React3.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
            onStart: this.onDragStart,
            onDrag: this.onDrag,
            onStop: this.onDragStop
          }), /* @__PURE__ */ React3.cloneElement(React3.Children.only(children), {
            className,
            style: _objectSpread(_objectSpread({}, children.props.style), style),
            transform: svgTransform
          }));
        }, "render")
      }], [{
        key: "getDerivedStateFromProps",
        value: /* @__PURE__ */ __name(function getDerivedStateFromProps(_ref, _ref2) {
          var position = _ref.position;
          var prevPropsPosition = _ref2.prevPropsPosition;
          if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
            (0, _log.default)("Draggable: getDerivedStateFromProps %j", {
              position,
              prevPropsPosition
            });
            return {
              x: position.x,
              y: position.y,
              prevPropsPosition: _objectSpread({}, position)
            };
          }
          return null;
        }, "getDerivedStateFromProps")
      }]);
      return Draggable3;
    }(React3.Component);
    exports.default = Draggable2;
    _defineProperty(Draggable2, "displayName", "Draggable");
    _defineProperty(Draggable2, "propTypes", _objectSpread(_objectSpread({}, _DraggableCore.default.propTypes), {}, {
      axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
      bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
        left: _propTypes.default.number,
        right: _propTypes.default.number,
        top: _propTypes.default.number,
        bottom: _propTypes.default.number
      }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
      defaultClassName: _propTypes.default.string,
      defaultClassNameDragging: _propTypes.default.string,
      defaultClassNameDragged: _propTypes.default.string,
      defaultPosition: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      positionOffset: _propTypes.default.shape({
        x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      }),
      position: _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }),
      className: _shims.dontSetMe,
      style: _shims.dontSetMe,
      transform: _shims.dontSetMe
    }));
    _defineProperty(Draggable2, "defaultProps", _objectSpread(_objectSpread({}, _DraggableCore.default.defaultProps), {}, {
      axis: "both",
      bounds: false,
      defaultClassName: "react-draggable",
      defaultClassNameDragging: "react-draggable-dragging",
      defaultClassNameDragged: "react-draggable-dragged",
      defaultPosition: {
        x: 0,
        y: 0
      },
      scale: 1
    }));
  }
});

// ../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/cjs.js
var require_cjs = __commonJS({
  "../../.yarn/__virtual__/react-draggable-virtual-7801c82329/0/global/cache/react-draggable-npm-4.4.4-f0b7a5c546-9.zip/node_modules/react-draggable/build/cjs/cjs.js"(exports, module) {
    "use strict";
    init_define_process();
    var _require = require_Draggable();
    var Draggable2 = _require.default;
    var DraggableCore = _require.DraggableCore;
    module.exports = Draggable2;
    module.exports.default = Draggable2;
    module.exports.DraggableCore = DraggableCore;
  }
});

// ../../.yarn/global/cache/fast-memoize-npm-2.5.2-f42a7c6940-9.zip/node_modules/fast-memoize/src/index.js
var require_src = __commonJS({
  "../../.yarn/global/cache/fast-memoize-npm-2.5.2-f42a7c6940-9.zip/node_modules/fast-memoize/src/index.js"(exports, module) {
    init_define_process();
    function memoize2(fn, options) {
      var cache = options && options.cache ? options.cache : cacheDefault;
      var serializer = options && options.serializer ? options.serializer : serializerDefault;
      var strategy = options && options.strategy ? options.strategy : strategyDefault;
      return strategy(fn, {
        cache,
        serializer
      });
    }
    __name(memoize2, "memoize");
    function isPrimitive(value) {
      return value == null || typeof value === "number" || typeof value === "boolean";
    }
    __name(isPrimitive, "isPrimitive");
    function monadic(fn, cache, serializer, arg) {
      var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    __name(monadic, "monadic");
    function variadic(fn, cache, serializer) {
      var args = Array.prototype.slice.call(arguments, 3);
      var cacheKey = serializer(args);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    __name(variadic, "variadic");
    function assemble(fn, context, strategy, cache, serialize) {
      return strategy.bind(
        context,
        fn,
        cache,
        serialize
      );
    }
    __name(assemble, "assemble");
    function strategyDefault(fn, options) {
      var strategy = fn.length === 1 ? monadic : variadic;
      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      );
    }
    __name(strategyDefault, "strategyDefault");
    function strategyVariadic(fn, options) {
      var strategy = variadic;
      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      );
    }
    __name(strategyVariadic, "strategyVariadic");
    function strategyMonadic(fn, options) {
      var strategy = monadic;
      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      );
    }
    __name(strategyMonadic, "strategyMonadic");
    function serializerDefault() {
      return JSON.stringify(arguments);
    }
    __name(serializerDefault, "serializerDefault");
    function ObjectWithoutPrototypeCache() {
      this.cache = /* @__PURE__ */ Object.create(null);
    }
    __name(ObjectWithoutPrototypeCache, "ObjectWithoutPrototypeCache");
    ObjectWithoutPrototypeCache.prototype.has = function(key) {
      return key in this.cache;
    };
    ObjectWithoutPrototypeCache.prototype.get = function(key) {
      return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    var cacheDefault = {
      create: /* @__PURE__ */ __name(function create() {
        return new ObjectWithoutPrototypeCache();
      }, "create")
    };
    module.exports = memoize2;
    module.exports.strategies = {
      variadic: strategyVariadic,
      monadic: strategyMonadic
    };
  }
});

// ../../.yarn/global/cache/prettier-npm-2.8.0-746e3df53e-9.zip/node_modules/prettier/parser-babel.js
var require_parser_babel = __commonJS({
  "../../.yarn/global/cache/prettier-npm-2.8.0-746e3df53e-9.zip/node_modules/prettier/parser-babel.js"(exports, module) {
    init_define_process();
    (function(e) {
      if (typeof exports == "object" && typeof module == "object")
        module.exports = e();
      else if (typeof define == "function" && define.amd)
        define(e);
      else {
        var i = typeof globalThis < "u" ? globalThis : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : this || {};
        i.prettierPlugins = i.prettierPlugins || {}, i.prettierPlugins.babel = e();
      }
    })(function() {
      "use strict";
      var C = /* @__PURE__ */ __name((l, u) => () => (u || l((u = { exports: {} }).exports, u), u.exports), "C");
      var W = C((Hd, si) => {
        var vt = /* @__PURE__ */ __name(function(l) {
          return l && l.Math == Math && l;
        }, "vt");
        si.exports = vt(typeof globalThis == "object" && globalThis) || vt(typeof window == "object" && window) || vt(typeof self == "object" && self) || vt(typeof globalThis == "object" && globalThis) || function() {
          return this;
        }() || Function("return this")();
      });
      var ge = C(($d, ri) => {
        ri.exports = function(l) {
          try {
            return !!l();
          } catch {
            return true;
          }
        };
      });
      var De = C((zd, ii) => {
        var uh = ge();
        ii.exports = !uh(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      });
      var Et = C((Vd, ai) => {
        var ch = ge();
        ai.exports = !ch(function() {
          var l = function() {
          }.bind();
          return typeof l != "function" || l.hasOwnProperty("prototype");
        });
      });
      var bt = C((Kd, ni) => {
        var ph = Et(), Ct = Function.prototype.call;
        ni.exports = ph ? Ct.bind(Ct) : function() {
          return Ct.apply(Ct, arguments);
        };
      });
      var ui = C((hi) => {
        "use strict";
        var oi = {}.propertyIsEnumerable, li = Object.getOwnPropertyDescriptor, dh = li && !oi.call({ 1: 2 }, 1);
        hi.f = dh ? function(u) {
          var d = li(this, u);
          return !!d && d.enumerable;
        } : oi;
      });
      var xs = C((Gd, ci) => {
        ci.exports = function(l, u) {
          return { enumerable: !(l & 1), configurable: !(l & 2), writable: !(l & 4), value: u };
        };
      });
      var ne = C((Jd, fi) => {
        var pi = Et(), di = Function.prototype, fh = di.bind, gs = di.call, mh = pi && fh.bind(gs, gs);
        fi.exports = pi ? function(l) {
          return l && mh(l);
        } : function(l) {
          return l && function() {
            return gs.apply(l, arguments);
          };
        };
      });
      var St = C((Xd, yi) => {
        var mi = ne(), yh = mi({}.toString), xh = mi("".slice);
        yi.exports = function(l) {
          return xh(yh(l), 8, -1);
        };
      });
      var gi = C((Yd, xi) => {
        var gh = W(), Ph = ne(), Ah = ge(), Th = St(), Ps = gh.Object, vh = Ph("".split);
        xi.exports = Ah(function() {
          return !Ps("z").propertyIsEnumerable(0);
        }) ? function(l) {
          return Th(l) == "String" ? vh(l, "") : Ps(l);
        } : Ps;
      });
      var As = C((Qd, Pi) => {
        var Eh = W(), Ch = Eh.TypeError;
        Pi.exports = function(l) {
          if (l == null)
            throw Ch("Can't call method on " + l);
          return l;
        };
      });
      var wt = C((Zd, Ai) => {
        var bh = gi(), Sh = As();
        Ai.exports = function(l) {
          return bh(Sh(l));
        };
      });
      var oe = C((ef, Ti) => {
        Ti.exports = function(l) {
          return typeof l == "function";
        };
      });
      var Fe = C((tf, vi) => {
        var wh = oe();
        vi.exports = function(l) {
          return typeof l == "object" ? l !== null : wh(l);
        };
      });
      var tt = C((sf, Ei) => {
        var Ts = W(), Ih = oe(), Nh = /* @__PURE__ */ __name(function(l) {
          return Ih(l) ? l : void 0;
        }, "Nh");
        Ei.exports = function(l, u) {
          return arguments.length < 2 ? Nh(Ts[l]) : Ts[l] && Ts[l][u];
        };
      });
      var bi = C((rf, Ci) => {
        var kh = ne();
        Ci.exports = kh({}.isPrototypeOf);
      });
      var wi = C((af, Si) => {
        var Dh = tt();
        Si.exports = Dh("navigator", "userAgent") || "";
      });
      var Oi = C((nf, Li) => {
        var Fi = W(), vs = wi(), Ii = Fi.process, Ni = Fi.Deno, ki = Ii && Ii.versions || Ni && Ni.version, Di = ki && ki.v8, le, It;
        Di && (le = Di.split("."), It = le[0] > 0 && le[0] < 4 ? 1 : +(le[0] + le[1]));
        !It && vs && (le = vs.match(/Edge\/(\d+)/), (!le || le[1] >= 74) && (le = vs.match(/Chrome\/(\d+)/), le && (It = +le[1])));
        Li.exports = It;
      });
      var Es = C((of, Bi) => {
        var Mi = Oi(), Fh = ge();
        Bi.exports = !!Object.getOwnPropertySymbols && !Fh(function() {
          var l = Symbol();
          return !String(l) || !(Object(l) instanceof Symbol) || !Symbol.sham && Mi && Mi < 41;
        });
      });
      var Cs = C((lf, _i) => {
        var Lh = Es();
        _i.exports = Lh && !Symbol.sham && typeof Symbol.iterator == "symbol";
      });
      var bs = C((hf, Ri) => {
        var Oh = W(), Mh = tt(), Bh = oe(), _h = bi(), Rh = Cs(), jh = Oh.Object;
        Ri.exports = Rh ? function(l) {
          return typeof l == "symbol";
        } : function(l) {
          var u = Mh("Symbol");
          return Bh(u) && _h(u.prototype, jh(l));
        };
      });
      var qi = C((uf, ji) => {
        var qh = W(), Uh = qh.String;
        ji.exports = function(l) {
          try {
            return Uh(l);
          } catch {
            return "Object";
          }
        };
      });
      var Nt = C((cf, Ui) => {
        var Hh = W(), $h = oe(), zh = qi(), Vh = Hh.TypeError;
        Ui.exports = function(l) {
          if ($h(l))
            return l;
          throw Vh(zh(l) + " is not a function");
        };
      });
      var $i = C((pf, Hi) => {
        var Kh = Nt();
        Hi.exports = function(l, u) {
          var d = l[u];
          return d == null ? void 0 : Kh(d);
        };
      });
      var Vi = C((df, zi) => {
        var Wh = W(), Ss = bt(), ws = oe(), Is = Fe(), Gh = Wh.TypeError;
        zi.exports = function(l, u) {
          var d, f;
          if (u === "string" && ws(d = l.toString) && !Is(f = Ss(d, l)) || ws(d = l.valueOf) && !Is(f = Ss(d, l)) || u !== "string" && ws(d = l.toString) && !Is(f = Ss(d, l)))
            return f;
          throw Gh("Can't convert object to primitive value");
        };
      });
      var Wi = C((ff, Ki) => {
        Ki.exports = false;
      });
      var kt = C((mf, Ji) => {
        var Gi = W(), Jh = Object.defineProperty;
        Ji.exports = function(l, u) {
          try {
            Jh(Gi, l, { value: u, configurable: true, writable: true });
          } catch {
            Gi[l] = u;
          }
          return u;
        };
      });
      var Dt = C((yf, Yi) => {
        var Xh = W(), Yh = kt(), Xi = "__core-js_shared__", Qh = Xh[Xi] || Yh(Xi, {});
        Yi.exports = Qh;
      });
      var Ns = C((xf, Zi) => {
        var Zh = Wi(), Qi = Dt();
        (Zi.exports = function(l, u) {
          return Qi[l] || (Qi[l] = u !== void 0 ? u : {});
        })("versions", []).push({ version: "3.22.2", mode: Zh ? "pure" : "global", copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.22.2/LICENSE", source: "https://github.com/zloirock/core-js" });
      });
      var ks = C((gf, ea) => {
        var eu = W(), tu = As(), su = eu.Object;
        ea.exports = function(l) {
          return su(tu(l));
        };
      });
      var Ce = C((Pf, ta) => {
        var ru = ne(), iu = ks(), au = ru({}.hasOwnProperty);
        ta.exports = Object.hasOwn || function(u, d) {
          return au(iu(u), d);
        };
      });
      var Ds = C((Af, sa) => {
        var nu = ne(), ou = 0, lu = Math.random(), hu = nu(1 .toString);
        sa.exports = function(l) {
          return "Symbol(" + (l === void 0 ? "" : l) + ")_" + hu(++ou + lu, 36);
        };
      });
      var st = C((Tf, oa) => {
        var uu = W(), cu = Ns(), ra = Ce(), pu = Ds(), ia = Es(), na = Cs(), ze = cu("wks"), Le = uu.Symbol, aa = Le && Le.for, du = na ? Le : Le && Le.withoutSetter || pu;
        oa.exports = function(l) {
          if (!ra(ze, l) || !(ia || typeof ze[l] == "string")) {
            var u = "Symbol." + l;
            ia && ra(Le, l) ? ze[l] = Le[l] : na && aa ? ze[l] = aa(u) : ze[l] = du(u);
          }
          return ze[l];
        };
      });
      var ca = C((vf, ua) => {
        var fu = W(), mu = bt(), la = Fe(), ha = bs(), yu = $i(), xu = Vi(), gu = st(), Pu = fu.TypeError, Au = gu("toPrimitive");
        ua.exports = function(l, u) {
          if (!la(l) || ha(l))
            return l;
          var d = yu(l, Au), f;
          if (d) {
            if (u === void 0 && (u = "default"), f = mu(d, l, u), !la(f) || ha(f))
              return f;
            throw Pu("Can't convert object to primitive value");
          }
          return u === void 0 && (u = "number"), xu(l, u);
        };
      });
      var Fs = C((Ef, pa) => {
        var Tu = ca(), vu = bs();
        pa.exports = function(l) {
          var u = Tu(l, "string");
          return vu(u) ? u : u + "";
        };
      });
      var ma = C((Cf, fa) => {
        var Eu = W(), da = Fe(), Ls = Eu.document, Cu = da(Ls) && da(Ls.createElement);
        fa.exports = function(l) {
          return Cu ? Ls.createElement(l) : {};
        };
      });
      var Os = C((bf, ya) => {
        var bu = De(), Su = ge(), wu = ma();
        ya.exports = !bu && !Su(function() {
          return Object.defineProperty(wu("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      });
      var Ms = C((ga) => {
        var Iu = De(), Nu = bt(), ku = ui(), Du = xs(), Fu = wt(), Lu = Fs(), Ou = Ce(), Mu = Os(), xa = Object.getOwnPropertyDescriptor;
        ga.f = Iu ? xa : function(u, d) {
          if (u = Fu(u), d = Lu(d), Mu)
            try {
              return xa(u, d);
            } catch {
            }
          if (Ou(u, d))
            return Du(!Nu(ku.f, u, d), u[d]);
        };
      });
      var Aa = C((wf, Pa) => {
        var Bu = De(), _u = ge();
        Pa.exports = Bu && _u(function() {
          return Object.defineProperty(function() {
          }, "prototype", { value: 42, writable: false }).prototype != 42;
        });
      });
      var Bs = C((If, va) => {
        var Ta = W(), Ru = Fe(), ju = Ta.String, qu = Ta.TypeError;
        va.exports = function(l) {
          if (Ru(l))
            return l;
          throw qu(ju(l) + " is not an object");
        };
      });
      var Us = C((Ca) => {
        var Uu = W(), Hu = De(), $u = Os(), zu = Aa(), Ft = Bs(), Ea = Fs(), Vu = Uu.TypeError, _s = Object.defineProperty, Ku = Object.getOwnPropertyDescriptor, Rs = "enumerable", js = "configurable", qs = "writable";
        Ca.f = Hu ? zu ? function(u, d, f) {
          if (Ft(u), d = Ea(d), Ft(f), typeof u == "function" && d === "prototype" && "value" in f && qs in f && !f[qs]) {
            var y = Ku(u, d);
            y && y[qs] && (u[d] = f.value, f = { configurable: js in f ? f[js] : y[js], enumerable: Rs in f ? f[Rs] : y[Rs], writable: false });
          }
          return _s(u, d, f);
        } : _s : function(u, d, f) {
          if (Ft(u), d = Ea(d), Ft(f), $u)
            try {
              return _s(u, d, f);
            } catch {
            }
          if ("get" in f || "set" in f)
            throw Vu("Accessors not supported");
          return "value" in f && (u[d] = f.value), u;
        };
      });
      var Lt = C((kf, ba) => {
        var Wu = De(), Gu = Us(), Ju = xs();
        ba.exports = Wu ? function(l, u, d) {
          return Gu.f(l, u, Ju(1, d));
        } : function(l, u, d) {
          return l[u] = d, l;
        };
      });
      var Ot = C((Df, Sa) => {
        var Xu = ne(), Yu = oe(), Hs = Dt(), Qu = Xu(Function.toString);
        Yu(Hs.inspectSource) || (Hs.inspectSource = function(l) {
          return Qu(l);
        });
        Sa.exports = Hs.inspectSource;
      });
      var Na = C((Ff, Ia) => {
        var Zu = W(), ec = oe(), tc = Ot(), wa = Zu.WeakMap;
        Ia.exports = ec(wa) && /native code/.test(tc(wa));
      });
      var Fa = C((Lf, Da) => {
        var sc = Ns(), rc = Ds(), ka = sc("keys");
        Da.exports = function(l) {
          return ka[l] || (ka[l] = rc(l));
        };
      });
      var $s = C((Of, La) => {
        La.exports = {};
      });
      var ja = C((Mf, Ra) => {
        var ic = Na(), _a = W(), zs = ne(), ac = Fe(), nc = Lt(), Vs = Ce(), Ks = Dt(), oc = Fa(), lc = $s(), Oa = "Object already initialized", Gs = _a.TypeError, hc = _a.WeakMap, Mt, rt, Bt, uc = /* @__PURE__ */ __name(function(l) {
          return Bt(l) ? rt(l) : Mt(l, {});
        }, "uc"), cc = /* @__PURE__ */ __name(function(l) {
          return function(u) {
            var d;
            if (!ac(u) || (d = rt(u)).type !== l)
              throw Gs("Incompatible receiver, " + l + " required");
            return d;
          };
        }, "cc");
        ic || Ks.state ? (be = Ks.state || (Ks.state = new hc()), Ma = zs(be.get), Ws = zs(be.has), Ba = zs(be.set), Mt = /* @__PURE__ */ __name(function(l, u) {
          if (Ws(be, l))
            throw new Gs(Oa);
          return u.facade = l, Ba(be, l, u), u;
        }, "Mt"), rt = /* @__PURE__ */ __name(function(l) {
          return Ma(be, l) || {};
        }, "rt"), Bt = /* @__PURE__ */ __name(function(l) {
          return Ws(be, l);
        }, "Bt")) : (Oe = oc("state"), lc[Oe] = true, Mt = /* @__PURE__ */ __name(function(l, u) {
          if (Vs(l, Oe))
            throw new Gs(Oa);
          return u.facade = l, nc(l, Oe, u), u;
        }, "Mt"), rt = /* @__PURE__ */ __name(function(l) {
          return Vs(l, Oe) ? l[Oe] : {};
        }, "rt"), Bt = /* @__PURE__ */ __name(function(l) {
          return Vs(l, Oe);
        }, "Bt"));
        var be, Ma, Ws, Ba, Oe;
        Ra.exports = { set: Mt, get: rt, has: Bt, enforce: uc, getterFor: cc };
      });
      var Ha = C((Bf, Ua) => {
        var Js = De(), pc = Ce(), qa = Function.prototype, dc = Js && Object.getOwnPropertyDescriptor, Xs = pc(qa, "name"), fc = Xs && function() {
        }.name === "something", mc = Xs && (!Js || Js && dc(qa, "name").configurable);
        Ua.exports = { EXISTS: Xs, PROPER: fc, CONFIGURABLE: mc };
      });
      var Wa = C((_f, Ka) => {
        var yc = W(), $a = oe(), xc = Ce(), za = Lt(), gc = kt(), Pc = Ot(), Va = ja(), Ac = Ha().CONFIGURABLE, Tc = Va.get, vc = Va.enforce, Ec = String(String).split("String");
        (Ka.exports = function(l, u, d, f) {
          var y = f ? !!f.unsafe : false, A = f ? !!f.enumerable : false, g = f ? !!f.noTargetGet : false, T = f && f.name !== void 0 ? f.name : u, S;
          if ($a(d) && (String(T).slice(0, 7) === "Symbol(" && (T = "[" + String(T).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), (!xc(d, "name") || Ac && d.name !== T) && za(d, "name", T), S = vc(d), S.source || (S.source = Ec.join(typeof T == "string" ? T : ""))), l === yc) {
            A ? l[u] = d : gc(u, d);
            return;
          } else
            y ? !g && l[u] && (A = true) : delete l[u];
          A ? l[u] = d : za(l, u, d);
        })(Function.prototype, "toString", function() {
          return $a(this) && Tc(this).source || Pc(this);
        });
      });
      var Ys = C((Rf, Ga) => {
        var Cc = Math.ceil, bc = Math.floor;
        Ga.exports = function(l) {
          var u = +l;
          return u !== u || u === 0 ? 0 : (u > 0 ? bc : Cc)(u);
        };
      });
      var Xa = C((jf, Ja) => {
        var Sc = Ys(), wc = Math.max, Ic = Math.min;
        Ja.exports = function(l, u) {
          var d = Sc(l);
          return d < 0 ? wc(d + u, 0) : Ic(d, u);
        };
      });
      var Qa = C((qf, Ya) => {
        var Nc = Ys(), kc = Math.min;
        Ya.exports = function(l) {
          return l > 0 ? kc(Nc(l), 9007199254740991) : 0;
        };
      });
      var _t = C((Uf, Za) => {
        var Dc = Qa();
        Za.exports = function(l) {
          return Dc(l.length);
        };
      });
      var sn = C((Hf, tn) => {
        var Fc = wt(), Lc = Xa(), Oc = _t(), en = /* @__PURE__ */ __name(function(l) {
          return function(u, d, f) {
            var y = Fc(u), A = Oc(y), g = Lc(f, A), T;
            if (l && d != d) {
              for (; A > g; )
                if (T = y[g++], T != T)
                  return true;
            } else
              for (; A > g; g++)
                if ((l || g in y) && y[g] === d)
                  return l || g || 0;
            return !l && -1;
          };
        }, "en");
        tn.exports = { includes: en(true), indexOf: en(false) };
      });
      var nn = C(($f, an) => {
        var Mc = ne(), Qs = Ce(), Bc = wt(), _c = sn().indexOf, Rc = $s(), rn = Mc([].push);
        an.exports = function(l, u) {
          var d = Bc(l), f = 0, y = [], A;
          for (A in d)
            !Qs(Rc, A) && Qs(d, A) && rn(y, A);
          for (; u.length > f; )
            Qs(d, A = u[f++]) && (~_c(y, A) || rn(y, A));
          return y;
        };
      });
      var ln = C((zf, on) => {
        on.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      });
      var un = C((hn) => {
        var jc = nn(), qc = ln(), Uc = qc.concat("length", "prototype");
        hn.f = Object.getOwnPropertyNames || function(u) {
          return jc(u, Uc);
        };
      });
      var pn = C((cn) => {
        cn.f = Object.getOwnPropertySymbols;
      });
      var fn = C((Wf, dn) => {
        var Hc = tt(), $c = ne(), zc = un(), Vc = pn(), Kc = Bs(), Wc = $c([].concat);
        dn.exports = Hc("Reflect", "ownKeys") || function(u) {
          var d = zc.f(Kc(u)), f = Vc.f;
          return f ? Wc(d, f(u)) : d;
        };
      });
      var xn = C((Gf, yn) => {
        var mn = Ce(), Gc = fn(), Jc = Ms(), Xc = Us();
        yn.exports = function(l, u, d) {
          for (var f = Gc(u), y = Xc.f, A = Jc.f, g = 0; g < f.length; g++) {
            var T = f[g];
            !mn(l, T) && !(d && mn(d, T)) && y(l, T, A(u, T));
          }
        };
      });
      var Pn = C((Jf, gn) => {
        var Yc = ge(), Qc = oe(), Zc = /#|\.prototype\./, it = /* @__PURE__ */ __name(function(l, u) {
          var d = tp[ep(l)];
          return d == rp ? true : d == sp ? false : Qc(u) ? Yc(u) : !!u;
        }, "it"), ep = it.normalize = function(l) {
          return String(l).replace(Zc, ".").toLowerCase();
        }, tp = it.data = {}, sp = it.NATIVE = "N", rp = it.POLYFILL = "P";
        gn.exports = it;
      });
      var er = C((Xf, An) => {
        var Zs = W(), ip = Ms().f, ap = Lt(), np = Wa(), op = kt(), lp = xn(), hp = Pn();
        An.exports = function(l, u) {
          var d = l.target, f = l.global, y = l.stat, A, g, T, S, F, I;
          if (f ? g = Zs : y ? g = Zs[d] || op(d, {}) : g = (Zs[d] || {}).prototype, g)
            for (T in u) {
              if (F = u[T], l.noTargetGet ? (I = ip(g, T), S = I && I.value) : S = g[T], A = hp(f ? T : d + (y ? "." : "#") + T, l.forced), !A && S !== void 0) {
                if (typeof F == typeof S)
                  continue;
                lp(F, S);
              }
              (l.sham || S && S.sham) && ap(F, "sham", true), np(g, T, F, l);
            }
        };
      });
      var Tn = C(() => {
        var up = er(), cp = W();
        up({ global: true }, { globalThis: cp });
      });
      var vn = C(() => {
        Tn();
      });
      var tr = C((tm, En) => {
        var pp = St();
        En.exports = Array.isArray || function(u) {
          return pp(u) == "Array";
        };
      });
      var Sn = C((sm, bn) => {
        var Cn = ne(), dp = Nt(), fp = Et(), mp = Cn(Cn.bind);
        bn.exports = function(l, u) {
          return dp(l), u === void 0 ? l : fp ? mp(l, u) : function() {
            return l.apply(u, arguments);
          };
        };
      });
      var Nn = C((rm, In) => {
        "use strict";
        var yp = W(), xp = tr(), gp = _t(), Pp = Sn(), Ap = yp.TypeError, wn = /* @__PURE__ */ __name(function(l, u, d, f, y, A, g, T) {
          for (var S = y, F = 0, I = g ? Pp(g, T) : false, E, L; F < f; ) {
            if (F in d) {
              if (E = I ? I(d[F], F, u) : d[F], A > 0 && xp(E))
                L = gp(E), S = wn(l, u, E, L, S, A - 1) - 1;
              else {
                if (S >= 9007199254740991)
                  throw Ap("Exceed the acceptable array length");
                l[S] = E;
              }
              S++;
            }
            F++;
          }
          return S;
        }, "wn");
        In.exports = wn;
      });
      var Fn = C((im, Dn) => {
        var Tp = st(), vp = Tp("toStringTag"), kn = {};
        kn[vp] = "z";
        Dn.exports = String(kn) === "[object z]";
      });
      var On = C((am, Ln) => {
        var Ep = W(), Cp = Fn(), bp = oe(), Rt = St(), Sp = st(), wp = Sp("toStringTag"), Ip = Ep.Object, Np = Rt(function() {
          return arguments;
        }()) == "Arguments", kp = /* @__PURE__ */ __name(function(l, u) {
          try {
            return l[u];
          } catch {
          }
        }, "kp");
        Ln.exports = Cp ? Rt : function(l) {
          var u, d, f;
          return l === void 0 ? "Undefined" : l === null ? "Null" : typeof (d = kp(u = Ip(l), wp)) == "string" ? d : Np ? Rt(u) : (f = Rt(u)) == "Object" && bp(u.callee) ? "Arguments" : f;
        };
      });
      var qn = C((nm, jn) => {
        var Dp = ne(), Fp = ge(), Mn = oe(), Lp = On(), Op = tt(), Mp = Ot(), Bn = /* @__PURE__ */ __name(function() {
        }, "Bn"), Bp = [], _n = Op("Reflect", "construct"), sr = /^\s*(?:class|function)\b/, _p = Dp(sr.exec), Rp = !sr.exec(Bn), at = /* @__PURE__ */ __name(function(u) {
          if (!Mn(u))
            return false;
          try {
            return _n(Bn, Bp, u), true;
          } catch {
            return false;
          }
        }, "at"), Rn = /* @__PURE__ */ __name(function(u) {
          if (!Mn(u))
            return false;
          switch (Lp(u)) {
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
              return false;
          }
          try {
            return Rp || !!_p(sr, Mp(u));
          } catch {
            return true;
          }
        }, "Rn");
        Rn.sham = true;
        jn.exports = !_n || Fp(function() {
          var l;
          return at(at.call) || !at(Object) || !at(function() {
            l = true;
          }) || l;
        }) ? Rn : at;
      });
      var zn = C((om, $n) => {
        var jp = W(), Un = tr(), qp = qn(), Up = Fe(), Hp = st(), $p = Hp("species"), Hn = jp.Array;
        $n.exports = function(l) {
          var u;
          return Un(l) && (u = l.constructor, qp(u) && (u === Hn || Un(u.prototype)) ? u = void 0 : Up(u) && (u = u[$p], u === null && (u = void 0))), u === void 0 ? Hn : u;
        };
      });
      var Kn = C((lm, Vn) => {
        var zp = zn();
        Vn.exports = function(l, u) {
          return new (zp(l))(u === 0 ? 0 : u);
        };
      });
      var Wn = C(() => {
        "use strict";
        var Vp = er(), Kp = Nn(), Wp = Nt(), Gp = ks(), Jp = _t(), Xp = Kn();
        Vp({ target: "Array", proto: true }, { flatMap: function(u) {
          var d = Gp(this), f = Jp(d), y;
          return Wp(u), y = Xp(d, 0), y.length = Kp(y, d, d, f, 0, 1, u, arguments.length > 1 ? arguments[1] : void 0), y;
        } });
      });
      var qd = C((xm, Eo) => {
        vn();
        Wn();
        var nr = Object.defineProperty, Yp = Object.getOwnPropertyDescriptor, or = Object.getOwnPropertyNames, Qp = Object.prototype.hasOwnProperty, Zn = /* @__PURE__ */ __name((l, u) => function() {
          return l && (u = (0, l[or(l)[0]])(l = 0)), u;
        }, "Zn"), K = /* @__PURE__ */ __name((l, u) => function() {
          return u || (0, l[or(l)[0]])((u = { exports: {} }).exports, u), u.exports;
        }, "K"), Zp = /* @__PURE__ */ __name((l, u) => {
          for (var d in u)
            nr(l, d, { get: u[d], enumerable: true });
        }, "Zp"), ed = /* @__PURE__ */ __name((l, u, d, f) => {
          if (u && typeof u == "object" || typeof u == "function")
            for (let y of or(u))
              !Qp.call(l, y) && y !== d && nr(l, y, { get: () => u[y], enumerable: !(f = Yp(u, y)) || f.enumerable });
          return l;
        }, "ed"), td = /* @__PURE__ */ __name((l) => ed(nr({}, "__esModule", { value: true }), l), "td"), V = Zn({ "<define:process>"() {
        } }), sd = K({ "src/utils/try-combinations.js"(l, u) {
          "use strict";
          V();
          function d() {
            let f;
            for (var y = arguments.length, A = new Array(y), g = 0; g < y; g++)
              A[g] = arguments[g];
            for (let [T, S] of A.entries())
              try {
                return { result: S() };
              } catch (F) {
                T === 0 && (f = F);
              }
            return { error: f };
          }
          __name(d, "d");
          u.exports = d;
        } }), eo = K({ "src/language-js/utils/get-shebang.js"(l, u) {
          "use strict";
          V();
          function d(f) {
            if (!f.startsWith("#!"))
              return "";
            let y = f.indexOf(`
`);
            return y === -1 ? f : f.slice(0, y);
          }
          __name(d, "d");
          u.exports = d;
        } }), rd = K({ "src/utils/text/skip-inline-comment.js"(l, u) {
          "use strict";
          V();
          function d(f, y) {
            if (y === false)
              return false;
            if (f.charAt(y) === "/" && f.charAt(y + 1) === "*") {
              for (let A = y + 2; A < f.length; ++A)
                if (f.charAt(A) === "*" && f.charAt(A + 1) === "/")
                  return A + 2;
            }
            return y;
          }
          __name(d, "d");
          u.exports = d;
        } }), id = K({ "src/utils/text/skip-newline.js"(l, u) {
          "use strict";
          V();
          function d(f, y, A) {
            let g = A && A.backwards;
            if (y === false)
              return false;
            let T = f.charAt(y);
            if (g) {
              if (f.charAt(y - 1) === "\r" && T === `
`)
                return y - 2;
              if (T === `
` || T === "\r" || T === "\u2028" || T === "\u2029")
                return y - 1;
            } else {
              if (T === "\r" && f.charAt(y + 1) === `
`)
                return y + 2;
              if (T === `
` || T === "\r" || T === "\u2028" || T === "\u2029")
                return y + 1;
            }
            return y;
          }
          __name(d, "d");
          u.exports = d;
        } }), to = K({ "src/utils/text/skip.js"(l, u) {
          "use strict";
          V();
          function d(T) {
            return (S, F, I) => {
              let E = I && I.backwards;
              if (F === false)
                return false;
              let { length: L } = S, j = F;
              for (; j >= 0 && j < L; ) {
                let k = S.charAt(j);
                if (T instanceof RegExp) {
                  if (!T.test(k))
                    return j;
                } else if (!T.includes(k))
                  return j;
                E ? j-- : j++;
              }
              return j === -1 || j === L ? j : false;
            };
          }
          __name(d, "d");
          var f = d(/\s/), y = d(" 	"), A = d(",; 	"), g = d(/[^\n\r]/);
          u.exports = { skipWhitespace: f, skipSpaces: y, skipToLineEnd: A, skipEverythingButNewLine: g };
        } }), ad = K({ "src/utils/text/skip-trailing-comment.js"(l, u) {
          "use strict";
          V();
          var { skipEverythingButNewLine: d } = to();
          function f(y, A) {
            return A === false ? false : y.charAt(A) === "/" && y.charAt(A + 1) === "/" ? d(y, A) : A;
          }
          __name(f, "f");
          u.exports = f;
        } }), nd = K({ "src/utils/text/get-next-non-space-non-comment-character-index-with-start-index.js"(l, u) {
          "use strict";
          V();
          var d = rd(), f = id(), y = ad(), { skipSpaces: A } = to();
          function g(T, S) {
            let F = null, I = S;
            for (; I !== F; )
              F = I, I = A(T, I), I = d(T, I), I = y(T, I), I = f(T, I);
            return I;
          }
          __name(g, "g");
          u.exports = g;
        } }), so = {};
        Zp(so, { EOL: () => ar, arch: () => od, cpus: () => ho, default: () => mo, endianness: () => ro, freemem: () => oo, getNetworkInterfaces: () => fo, hostname: () => io, loadavg: () => ao, networkInterfaces: () => po, platform: () => ld, release: () => co, tmpDir: () => rr, tmpdir: () => ir, totalmem: () => lo, type: () => uo, uptime: () => no });
        function ro() {
          if (typeof jt > "u") {
            var l = new ArrayBuffer(2), u = new Uint8Array(l), d = new Uint16Array(l);
            if (u[0] = 1, u[1] = 2, d[0] === 258)
              jt = "BE";
            else if (d[0] === 513)
              jt = "LE";
            else
              throw new Error("unable to figure out endianess");
          }
          return jt;
        }
        __name(ro, "ro");
        function io() {
          return typeof globalThis.location < "u" ? globalThis.location.hostname : "";
        }
        __name(io, "io");
        function ao() {
          return [];
        }
        __name(ao, "ao");
        function no() {
          return 0;
        }
        __name(no, "no");
        function oo() {
          return Number.MAX_VALUE;
        }
        __name(oo, "oo");
        function lo() {
          return Number.MAX_VALUE;
        }
        __name(lo, "lo");
        function ho() {
          return [];
        }
        __name(ho, "ho");
        function uo() {
          return "Browser";
        }
        __name(uo, "uo");
        function co() {
          return typeof globalThis.navigator < "u" ? globalThis.navigator.appVersion : "";
        }
        __name(co, "co");
        function po() {
        }
        __name(po, "po");
        function fo() {
        }
        __name(fo, "fo");
        function od() {
          return "javascript";
        }
        __name(od, "od");
        function ld() {
          return "browser";
        }
        __name(ld, "ld");
        function rr() {
          return "/tmp";
        }
        __name(rr, "rr");
        var jt, ir, ar, mo, hd = Zn({ "node-modules-polyfills:os"() {
          V(), ir = rr, ar = `
`, mo = { EOL: ar, tmpdir: ir, tmpDir: rr, networkInterfaces: po, getNetworkInterfaces: fo, release: co, type: uo, cpus: ho, totalmem: lo, freemem: oo, uptime: no, loadavg: ao, hostname: io, endianness: ro };
        } }), ud = K({ "node-modules-polyfills-commonjs:os"(l, u) {
          V();
          var d = (hd(), td(so));
          if (d && d.default) {
            u.exports = d.default;
            for (let f in d)
              u.exports[f] = d[f];
          } else
            d && (u.exports = d);
        } }), cd = K({ "node_modules/detect-newline/index.js"(l, u) {
          "use strict";
          V();
          var d = /* @__PURE__ */ __name((f) => {
            if (typeof f != "string")
              throw new TypeError("Expected a string");
            let y = f.match(/(?:\r?\n)/g) || [];
            if (y.length === 0)
              return;
            let A = y.filter((T) => T === `\r
`).length, g = y.length - A;
            return A > g ? `\r
` : `
`;
          }, "d");
          u.exports = d, u.exports.graceful = (f) => typeof f == "string" && d(f) || `
`;
        } }), pd = K({ "node_modules/jest-docblock/build/index.js"(l) {
          "use strict";
          V(), Object.defineProperty(l, "__esModule", { value: true }), l.extract = j, l.parse = z, l.parseWithComments = G, l.print = B, l.strip = k;
          function u() {
            let h = ud();
            return u = /* @__PURE__ */ __name(function() {
              return h;
            }, "u"), h;
          }
          __name(u, "u");
          function d() {
            let h = f(cd());
            return d = /* @__PURE__ */ __name(function() {
              return h;
            }, "d"), h;
          }
          __name(d, "d");
          function f(h) {
            return h && h.__esModule ? h : { default: h };
          }
          __name(f, "f");
          var y = /\*\/$/, A = /^\/\*\*?/, g = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, T = /(^|\s+)\/\/([^\r\n]*)/g, S = /^(\r?\n)+/, F = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g, I = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g, E = /(\r?\n|^) *\* ?/g, L = [];
          function j(h) {
            let J = h.match(g);
            return J ? J[0].trimLeft() : "";
          }
          __name(j, "j");
          function k(h) {
            let J = h.match(g);
            return J && J[0] ? h.substring(J[0].length) : h;
          }
          __name(k, "k");
          function z(h) {
            return G(h).pragmas;
          }
          __name(z, "z");
          function G(h) {
            let J = (0, d().default)(h) || u().EOL;
            h = h.replace(A, "").replace(y, "").replace(E, "$1");
            let ae = "";
            for (; ae !== h; )
              ae = h, h = h.replace(F, `${J}$1 $2${J}`);
            h = h.replace(S, "").trimRight();
            let Y = /* @__PURE__ */ Object.create(null), Me = h.replace(I, "").replace(S, "").trimRight(), ee;
            for (; ee = I.exec(h); ) {
              let H = ee[2].replace(T, "");
              typeof Y[ee[1]] == "string" || Array.isArray(Y[ee[1]]) ? Y[ee[1]] = L.concat(Y[ee[1]], H) : Y[ee[1]] = H;
            }
            return { comments: Me, pragmas: Y };
          }
          __name(G, "G");
          function B(h) {
            let { comments: J = "", pragmas: ae = {} } = h, Y = (0, d().default)(J) || u().EOL, Me = "/**", ee = " *", H = " */", M = Object.keys(ae), v = M.map((te) => _(te, ae[te])).reduce((te, he) => te.concat(he), []).map((te) => `${ee} ${te}${Y}`).join("");
            if (!J) {
              if (M.length === 0)
                return "";
              if (M.length === 1 && !Array.isArray(ae[M[0]])) {
                let te = ae[M[0]];
                return `${Me} ${_(M[0], te)[0]}${H}`;
              }
            }
            let We = J.split(Y).map((te) => `${ee} ${te}`).join(Y) + Y;
            return Me + Y + (J ? We : "") + (J && M.length ? ee + Y : "") + v + H;
          }
          __name(B, "B");
          function _(h, J) {
            return L.concat(J).map((ae) => `@${h} ${ae}`.trim());
          }
          __name(_, "_");
        } }), dd = K({ "src/common/end-of-line.js"(l, u) {
          "use strict";
          V();
          function d(g) {
            let T = g.indexOf("\r");
            return T >= 0 ? g.charAt(T + 1) === `
` ? "crlf" : "cr" : "lf";
          }
          __name(d, "d");
          function f(g) {
            switch (g) {
              case "cr":
                return "\r";
              case "crlf":
                return `\r
`;
              default:
                return `
`;
            }
          }
          __name(f, "f");
          function y(g, T) {
            let S;
            switch (T) {
              case `
`:
                S = /\n/g;
                break;
              case "\r":
                S = /\r/g;
                break;
              case `\r
`:
                S = /\r\n/g;
                break;
              default:
                throw new Error(`Unexpected "eol" ${JSON.stringify(T)}.`);
            }
            let F = g.match(S);
            return F ? F.length : 0;
          }
          __name(y, "y");
          function A(g) {
            return g.replace(/\r\n?/g, `
`);
          }
          __name(A, "A");
          u.exports = { guessEndOfLine: d, convertEndOfLineToChars: f, countEndOfLineChars: y, normalizeEndOfLine: A };
        } }), fd = K({ "src/language-js/pragma.js"(l, u) {
          "use strict";
          V();
          var { parseWithComments: d, strip: f, extract: y, print: A } = pd(), { normalizeEndOfLine: g } = dd(), T = eo();
          function S(E) {
            let L = T(E);
            L && (E = E.slice(L.length + 1));
            let j = y(E), { pragmas: k, comments: z } = d(j);
            return { shebang: L, text: E, pragmas: k, comments: z };
          }
          __name(S, "S");
          function F(E) {
            let L = Object.keys(S(E).pragmas);
            return L.includes("prettier") || L.includes("format");
          }
          __name(F, "F");
          function I(E) {
            let { shebang: L, text: j, pragmas: k, comments: z } = S(E), G = f(j), B = A({ pragmas: Object.assign({ format: "" }, k), comments: z.trimStart() });
            return (L ? `${L}
` : "") + g(B) + (G.startsWith(`
`) ? `
` : `

`) + G;
          }
          __name(I, "I");
          u.exports = { hasPragma: F, insertPragma: I };
        } }), lr = K({ "src/utils/is-non-empty-array.js"(l, u) {
          "use strict";
          V();
          function d(f) {
            return Array.isArray(f) && f.length > 0;
          }
          __name(d, "d");
          u.exports = d;
        } }), yo = K({ "src/language-js/loc.js"(l, u) {
          "use strict";
          V();
          var d = lr();
          function f(S) {
            var F, I;
            let E = S.range ? S.range[0] : S.start, L = (F = (I = S.declaration) === null || I === void 0 ? void 0 : I.decorators) !== null && F !== void 0 ? F : S.decorators;
            return d(L) ? Math.min(f(L[0]), E) : E;
          }
          __name(f, "f");
          function y(S) {
            return S.range ? S.range[1] : S.end;
          }
          __name(y, "y");
          function A(S, F) {
            let I = f(S);
            return Number.isInteger(I) && I === f(F);
          }
          __name(A, "A");
          function g(S, F) {
            let I = y(S);
            return Number.isInteger(I) && I === y(F);
          }
          __name(g, "g");
          function T(S, F) {
            return A(S, F) && g(S, F);
          }
          __name(T, "T");
          u.exports = { locStart: f, locEnd: y, hasSameLocStart: A, hasSameLoc: T };
        } }), xo = K({ "src/language-js/parse/utils/create-parser.js"(l, u) {
          "use strict";
          V();
          var { hasPragma: d } = fd(), { locStart: f, locEnd: y } = yo();
          function A(g) {
            return g = typeof g == "function" ? { parse: g } : g, Object.assign({ astFormat: "estree", hasPragma: d, locStart: f, locEnd: y }, g);
          }
          __name(A, "A");
          u.exports = A;
        } }), hr = K({ "src/common/parser-create-error.js"(l, u) {
          "use strict";
          V();
          function d(f, y) {
            let A = new SyntaxError(f + " (" + y.start.line + ":" + y.start.column + ")");
            return A.loc = y, A;
          }
          __name(d, "d");
          u.exports = d;
        } }), go = K({ "src/language-js/parse/utils/create-babel-parse-error.js"(l, u) {
          "use strict";
          V();
          var d = hr();
          function f(y) {
            let { message: A, loc: g } = y;
            return d(A.replace(/ \(.*\)/, ""), { start: { line: g ? g.line : 0, column: g ? g.column + 1 : 0 } });
          }
          __name(f, "f");
          u.exports = f;
        } }), md = K({ "src/language-js/utils/is-ts-keyword-type.js"(l, u) {
          "use strict";
          V();
          function d(f) {
            let { type: y } = f;
            return y.startsWith("TS") && y.endsWith("Keyword");
          }
          __name(d, "d");
          u.exports = d;
        } }), yd = K({ "src/language-js/utils/is-block-comment.js"(l, u) {
          "use strict";
          V();
          var d = /* @__PURE__ */ new Set(["Block", "CommentBlock", "MultiLine"]), f = /* @__PURE__ */ __name((y) => d.has(y == null ? void 0 : y.type), "f");
          u.exports = f;
        } }), xd = K({ "src/language-js/utils/is-type-cast-comment.js"(l, u) {
          "use strict";
          V();
          var d = yd();
          function f(y) {
            return d(y) && y.value[0] === "*" && /@type\b/.test(y.value);
          }
          __name(f, "f");
          u.exports = f;
        } }), gd = K({ "src/utils/get-last.js"(l, u) {
          "use strict";
          V();
          var d = /* @__PURE__ */ __name((f) => f[f.length - 1], "d");
          u.exports = d;
        } }), Po = K({ "src/language-js/parse/postprocess/visit-node.js"(l, u) {
          "use strict";
          V();
          function d(f, y) {
            if (Array.isArray(f)) {
              for (let A = 0; A < f.length; A++)
                f[A] = d(f[A], y);
              return f;
            }
            if (f && typeof f == "object" && typeof f.type == "string") {
              let A = Object.keys(f);
              for (let g = 0; g < A.length; g++)
                f[A[g]] = d(f[A[g]], y);
              return y(f) || f;
            }
            return f;
          }
          __name(d, "d");
          u.exports = d;
        } }), Ao = K({ "src/language-js/parse/postprocess/throw-syntax-error.js"(l, u) {
          "use strict";
          V();
          var d = hr();
          function f(y, A) {
            let { start: g, end: T } = y.loc;
            throw d(A, { start: { line: g.line, column: g.column + 1 }, end: { line: T.line, column: T.column + 1 } });
          }
          __name(f, "f");
          u.exports = f;
        } }), Pd = K({ "src/language-js/parse/postprocess/typescript.js"(l, u) {
          "use strict";
          V();
          var d = lr(), f = Po(), y = Ao(), A = { AbstractKeyword: 126, SourceFile: 308, PropertyDeclaration: 169 };
          function g(I) {
            for (; I && I.kind !== A.SourceFile; )
              I = I.parent;
            return I;
          }
          __name(g, "g");
          function T(I) {
            let { illegalDecorators: E } = I;
            if (!d(E))
              return;
            let [{ expression: L }] = E, j = g(L), [k, z] = [L.pos, L.end].map((G) => {
              let { line: B, character: _ } = j.getLineAndCharacterOfPosition(G);
              return { line: B + 1, column: _ };
            });
            y({ loc: { start: k, end: z } }, "Decorators are not valid here.");
          }
          __name(T, "T");
          function S(I, E) {
            I.kind !== A.PropertyDeclaration || I.modifiers && !I.modifiers.some((L) => L.kind === A.AbstractKeyword) || I.initializer && E.value === null && y(E, "Abstract property cannot have an initializer");
          }
          __name(S, "S");
          function F(I, E) {
            let { esTreeNodeToTSNodeMap: L, tsNodeToESTreeNodeMap: j } = E.tsParseResult;
            f(I, (k) => {
              let z = L.get(k);
              if (!z)
                return;
              let G = j.get(z);
              G === k && (T(z), S(z, G));
            });
          }
          __name(F, "F");
          u.exports = { throwErrorForInvalidNodes: F };
        } }), Ad = K({ "src/language-js/parse/postprocess/index.js"(l, u) {
          "use strict";
          V();
          var { locStart: d, locEnd: f } = yo(), y = md(), A = xd(), g = gd(), T = Po(), { throwErrorForInvalidNodes: S } = Pd(), F = Ao();
          function I(k, z) {
            if (z.parser === "typescript" && /@|abstract/.test(z.originalText) && S(k, z), z.parser !== "typescript" && z.parser !== "flow" && z.parser !== "acorn" && z.parser !== "espree" && z.parser !== "meriyah") {
              let B = /* @__PURE__ */ new Set();
              k = T(k, (_) => {
                _.leadingComments && _.leadingComments.some(A) && B.add(d(_));
              }), k = T(k, (_) => {
                if (_.type === "ParenthesizedExpression") {
                  let { expression: h } = _;
                  if (h.type === "TypeCastExpression")
                    return h.range = _.range, h;
                  let J = d(_);
                  if (!B.has(J))
                    return h.extra = Object.assign(Object.assign({}, h.extra), {}, { parenthesized: true }), h;
                }
              });
            }
            return k = T(k, (B) => {
              switch (B.type) {
                case "ChainExpression":
                  return E(B.expression);
                case "LogicalExpression": {
                  if (L(B))
                    return j(B);
                  break;
                }
                case "VariableDeclaration": {
                  let _ = g(B.declarations);
                  _ && _.init && G(B, _);
                  break;
                }
                case "TSParenthesizedType":
                  return y(B.typeAnnotation) || B.typeAnnotation.type === "TSThisType" || (B.typeAnnotation.range = [d(B), f(B)]), B.typeAnnotation;
                case "TSTypeParameter":
                  if (typeof B.name == "string") {
                    let _ = d(B);
                    B.name = { type: "Identifier", name: B.name, range: [_, _ + B.name.length] };
                  }
                  break;
                case "ObjectExpression":
                  if (z.parser === "typescript") {
                    let _ = B.properties.find((h) => h.type === "Property" && h.value.type === "TSEmptyBodyFunctionExpression");
                    _ && F(_.value, "Unexpected token.");
                  }
                  break;
                case "SequenceExpression": {
                  let _ = g(B.expressions);
                  B.range = [d(B), Math.min(f(_), f(B))];
                  break;
                }
                case "TopicReference":
                  z.__isUsingHackPipeline = true;
                  break;
                case "ExportAllDeclaration": {
                  let { exported: _ } = B;
                  if (z.parser === "meriyah" && _ && _.type === "Identifier") {
                    let h = z.originalText.slice(d(_), f(_));
                    (h.startsWith('"') || h.startsWith("'")) && (B.exported = Object.assign(Object.assign({}, B.exported), {}, { type: "Literal", value: B.exported.name, raw: h }));
                  }
                  break;
                }
              }
            }), k;
            function G(B, _) {
              z.originalText[f(_)] !== ";" && (B.range = [d(B), f(_)]);
            }
            __name(G, "G");
          }
          __name(I, "I");
          function E(k) {
            switch (k.type) {
              case "CallExpression":
                k.type = "OptionalCallExpression", k.callee = E(k.callee);
                break;
              case "MemberExpression":
                k.type = "OptionalMemberExpression", k.object = E(k.object);
                break;
              case "TSNonNullExpression":
                k.expression = E(k.expression);
                break;
            }
            return k;
          }
          __name(E, "E");
          function L(k) {
            return k.type === "LogicalExpression" && k.right.type === "LogicalExpression" && k.operator === k.right.operator;
          }
          __name(L, "L");
          function j(k) {
            return L(k) ? j({ type: "LogicalExpression", operator: k.operator, left: j({ type: "LogicalExpression", operator: k.operator, left: k.left, right: k.right.left, range: [d(k.left), f(k.right.left)] }), right: k.right.right, range: [d(k), f(k)] }) : k;
          }
          __name(j, "j");
          u.exports = I;
        } }), To = K({ "node_modules/@babel/parser/lib/index.js"(l) {
          "use strict";
          V(), Object.defineProperty(l, "__esModule", { value: true });
          function u(t, r) {
            if (t == null)
              return {};
            var e = {}, s = Object.keys(t), i, a;
            for (a = 0; a < s.length; a++)
              i = s[a], !(r.indexOf(i) >= 0) && (e[i] = t[i]);
            return e;
          }
          __name(u, "u");
          var d = /* @__PURE__ */ __name(class {
            constructor(t, r, e) {
              this.line = void 0, this.column = void 0, this.index = void 0, this.line = t, this.column = r, this.index = e;
            }
          }, "d"), f = /* @__PURE__ */ __name(class {
            constructor(t, r) {
              this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = t, this.end = r;
            }
          }, "f");
          function y(t, r) {
            let { line: e, column: s, index: i } = t;
            return new d(e, s + r, i + r);
          }
          __name(y, "y");
          var A = { SyntaxError: "BABEL_PARSER_SYNTAX_ERROR", SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" }, g = /* @__PURE__ */ __name(function(t) {
            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t.length - 1;
            return { get() {
              return t.reduce((e, s) => e[s], this);
            }, set(e) {
              t.reduce((s, i, a) => a === r ? s[i] = e : s[i], this);
            } };
          }, "g"), T = /* @__PURE__ */ __name((t, r, e) => Object.keys(e).map((s) => [s, e[s]]).filter((s) => {
            let [, i] = s;
            return !!i;
          }).map((s) => {
            let [i, a] = s;
            return [i, typeof a == "function" ? { value: a, enumerable: false } : typeof a.reflect == "string" ? Object.assign({}, a, g(a.reflect.split("."))) : a];
          }).reduce((s, i) => {
            let [a, n] = i;
            return Object.defineProperty(s, a, Object.assign({ configurable: true }, n));
          }, Object.assign(new t(), r)), "T"), S = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code: A.SourceTypeModuleError }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code: A.SourceTypeModuleError } }, F = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, I = /* @__PURE__ */ __name((t) => {
            let { type: r, prefix: e } = t;
            return r === "UpdateExpression" ? F.UpdateExpression[String(e)] : F[r];
          }, "I"), E = { AccessorIsGenerator: (t) => {
            let { kind: r } = t;
            return `A ${r}ter cannot be a generator.`;
          }, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accesor must not have any formal parameters.", BadSetterArity: "A 'set' accesor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: (t) => {
            let { kind: r } = t;
            return `Missing initializer in ${r} declaration.`;
          }, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: (t) => {
            let { exportName: r } = t;
            return `\`${r}\` has already been exported. Exported identifiers must be unique.`;
          }, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: (t) => {
            let { localName: r, exportName: e } = t;
            return `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${r}' as '${e}' } from 'some-module'\`?`;
          }, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: (t) => {
            let { type: r } = t;
            return `'${r === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`;
          }, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: (t) => {
            let { type: r } = t;
            return `Unsyntactic ${r === "BreakStatement" ? "break" : "continue"}.`;
          }, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportBindingIsString: (t) => {
            let { importName: r } = t;
            return `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${r}" as foo }\`?`;
          }, ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: (t) => {
            let { maxArgumentCount: r } = t;
            return `\`import()\` requires exactly ${r === 1 ? "one argument" : "one or two arguments"}.`;
          }, ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: (t) => {
            let { radix: r } = t;
            return `Expected number in radix ${r}.`;
          }, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: (t) => {
            let { reservedWord: r } = t;
            return `Escape sequence in keyword ${r}.`;
          }, InvalidIdentifier: (t) => {
            let { identifierName: r } = t;
            return `Invalid identifier ${r}.`;
          }, InvalidLhs: (t) => {
            let { ancestor: r } = t;
            return `Invalid left-hand side in ${I(r)}.`;
          }, InvalidLhsBinding: (t) => {
            let { ancestor: r } = t;
            return `Binding invalid left-hand side in ${I(r)}.`;
          }, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: (t) => {
            let { unexpected: r } = t;
            return `Unexpected character '${r}'.`;
          }, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: (t) => {
            let { identifierName: r } = t;
            return `Private name #${r} is not defined.`;
          }, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: (t) => {
            let { labelName: r } = t;
            return `Label '${r}' is already declared.`;
          }, LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: (t) => {
            let { missingPlugin: r } = t;
            return `This experimental syntax requires enabling the parser plugin: ${r.map((e) => JSON.stringify(e)).join(", ")}.`;
          }, MissingOneOfPlugins: (t) => {
            let { missingPlugin: r } = t;
            return `This experimental syntax requires enabling one of the following parser plugin(s): ${r.map((e) => JSON.stringify(e)).join(", ")}.`;
          }, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: (t) => {
            let { key: r } = t;
            return `Duplicate key "${r}" is not allowed in module attributes.`;
          }, ModuleExportNameHasLoneSurrogate: (t) => {
            let { surrogateCharCode: r } = t;
            return `An export name cannot include a lone surrogate, found '\\u${r.toString(16)}'.`;
          }, ModuleExportUndefined: (t) => {
            let { localName: r } = t;
            return `Export '${r}' is not defined.`;
          }, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: (t) => {
            let { identifierName: r } = t;
            return `Private names are only allowed in property accesses (\`obj.#${r}\`) or in \`in\` expressions (\`#${r} in obj\`).`;
          }, PrivateNameRedeclaration: (t) => {
            let { identifierName: r } = t;
            return `Duplicate private name #${r}.`;
          }, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: (t) => {
            let { keyword: r } = t;
            return `Unexpected keyword '${r}'.`;
          }, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: (t) => {
            let { reservedWord: r } = t;
            return `Unexpected reserved word '${r}'.`;
          }, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: (t) => {
            let { expected: r, unexpected: e } = t;
            return `Unexpected token${e ? ` '${e}'.` : ""}${r ? `, expected "${r}"` : ""}`;
          }, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: (t) => {
            let { target: r, onlyValidPropertyName: e } = t;
            return `The only valid meta property for ${r} is ${r}.${e}.`;
          }, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: (t) => {
            let { identifierName: r } = t;
            return `Identifier '${r}' has already been declared.`;
          }, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." }, L = { StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: (t) => {
            let { referenceName: r } = t;
            return `Assigning to '${r}' in strict mode.`;
          }, StrictEvalArgumentsBinding: (t) => {
            let { bindingName: r } = t;
            return `Binding '${r}' in strict mode.`;
          }, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }, j = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]), k = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: (t) => {
            let { token: r } = t;
            return `Invalid topic token ${r}. In order to use ${r} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${r}" }.`;
          }, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: (t) => {
            let { type: r } = t;
            return `Hack-style pipe body cannot be an unparenthesized ${I({ type: r })}; please wrap it in parentheses.`;
          }, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' }, z = ["toMessage"], G = ["message"];
          function B(t) {
            let { toMessage: r } = t, e = u(t, z);
            return /* @__PURE__ */ __name(function s(i) {
              let { loc: a, details: n } = i;
              return T(SyntaxError, Object.assign({}, e, { loc: a }), { clone() {
                let o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, c = o.loc || {};
                return s({ loc: new d("line" in c ? c.line : this.loc.line, "column" in c ? c.column : this.loc.column, "index" in c ? c.index : this.loc.index), details: Object.assign({}, this.details, o.details) });
              }, details: { value: n, enumerable: false }, message: { get() {
                return `${r(this.details)} (${this.loc.line}:${this.loc.column})`;
              }, set(o) {
                Object.defineProperty(this, "message", { value: o });
              } }, pos: { reflect: "loc.index", enumerable: true }, missingPlugin: "missingPlugin" in n && { reflect: "details.missingPlugin", enumerable: true } });
            }, "s");
          }
          __name(B, "B");
          function _(t, r) {
            if (Array.isArray(t))
              return (s) => _(s, t[0]);
            let e = {};
            for (let s of Object.keys(t)) {
              let i = t[s], a = typeof i == "string" ? { message: () => i } : typeof i == "function" ? { message: i } : i, { message: n } = a, o = u(a, G), c = typeof n == "string" ? () => n : n;
              e[s] = B(Object.assign({ code: A.SyntaxError, reasonCode: s, toMessage: c }, r ? { syntaxPlugin: r } : {}, o));
            }
            return e;
          }
          __name(_, "_");
          var h = Object.assign({}, _(S), _(E), _(L), _`pipelineOperator`(k)), { defineProperty: J } = Object, ae = /* @__PURE__ */ __name((t, r) => J(t, r, { enumerable: false, value: t[r] }), "ae");
          function Y(t) {
            return t.loc.start && ae(t.loc.start, "index"), t.loc.end && ae(t.loc.end, "index"), t;
          }
          __name(Y, "Y");
          var Me = /* @__PURE__ */ __name((t) => class extends t {
            parse() {
              let e = Y(super.parse());
              return this.options.tokens && (e.tokens = e.tokens.map(Y)), e;
            }
            parseRegExpLiteral(e) {
              let { pattern: s, flags: i } = e, a = null;
              try {
                a = new RegExp(s, i);
              } catch {
              }
              let n = this.estreeParseLiteral(a);
              return n.regex = { pattern: s, flags: i }, n;
            }
            parseBigIntLiteral(e) {
              let s;
              try {
                s = BigInt(e);
              } catch {
                s = null;
              }
              let i = this.estreeParseLiteral(s);
              return i.bigint = String(i.value || e), i;
            }
            parseDecimalLiteral(e) {
              let i = this.estreeParseLiteral(null);
              return i.decimal = String(i.value || e), i;
            }
            estreeParseLiteral(e) {
              return this.parseLiteral(e, "Literal");
            }
            parseStringLiteral(e) {
              return this.estreeParseLiteral(e);
            }
            parseNumericLiteral(e) {
              return this.estreeParseLiteral(e);
            }
            parseNullLiteral() {
              return this.estreeParseLiteral(null);
            }
            parseBooleanLiteral(e) {
              return this.estreeParseLiteral(e);
            }
            directiveToStmt(e) {
              let s = e.value;
              delete e.value, s.type = "Literal", s.raw = s.extra.raw, s.value = s.extra.expressionValue;
              let i = e;
              return i.type = "ExpressionStatement", i.expression = s, i.directive = s.extra.rawValue, delete s.extra, i;
            }
            initFunction(e, s) {
              super.initFunction(e, s), e.expression = false;
            }
            checkDeclaration(e) {
              e != null && this.isObjectProperty(e) ? this.checkDeclaration(e.value) : super.checkDeclaration(e);
            }
            getObjectOrClassMethodParams(e) {
              return e.value.params;
            }
            isValidDirective(e) {
              var s;
              return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && !((s = e.expression.extra) != null && s.parenthesized);
            }
            parseBlockBody(e, s, i, a, n) {
              super.parseBlockBody(e, s, i, a, n);
              let o = e.directives.map((c) => this.directiveToStmt(c));
              e.body = o.concat(e.body), delete e.directives;
            }
            pushClassMethod(e, s, i, a, n, o) {
              this.parseMethod(s, i, a, n, o, "ClassMethod", true), s.typeParameters && (s.value.typeParameters = s.typeParameters, delete s.typeParameters), e.body.push(s);
            }
            parsePrivateName() {
              let e = super.parsePrivateName();
              return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(e) : e;
            }
            convertPrivateNameToPrivateIdentifier(e) {
              let s = super.getPrivateNameSV(e);
              return e = e, delete e.id, e.name = s, e.type = "PrivateIdentifier", e;
            }
            isPrivateName(e) {
              return this.getPluginOption("estree", "classFeatures") ? e.type === "PrivateIdentifier" : super.isPrivateName(e);
            }
            getPrivateNameSV(e) {
              return this.getPluginOption("estree", "classFeatures") ? e.name : super.getPrivateNameSV(e);
            }
            parseLiteral(e, s) {
              let i = super.parseLiteral(e, s);
              return i.raw = i.extra.raw, delete i.extra, i;
            }
            parseFunctionBody(e, s) {
              let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              super.parseFunctionBody(e, s, i), e.expression = e.body.type !== "BlockStatement";
            }
            parseMethod(e, s, i, a, n, o) {
              let c = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false, p = this.startNode();
              return p.kind = e.kind, p = super.parseMethod(p, s, i, a, n, o, c), p.type = "FunctionExpression", delete p.kind, e.value = p, o === "ClassPrivateMethod" && (e.computed = false), this.finishNode(e, "MethodDefinition");
            }
            parseClassProperty() {
              let e = super.parseClassProperty(...arguments);
              return this.getPluginOption("estree", "classFeatures") && (e.type = "PropertyDefinition"), e;
            }
            parseClassPrivateProperty() {
              let e = super.parseClassPrivateProperty(...arguments);
              return this.getPluginOption("estree", "classFeatures") && (e.type = "PropertyDefinition", e.computed = false), e;
            }
            parseObjectMethod(e, s, i, a, n) {
              let o = super.parseObjectMethod(e, s, i, a, n);
              return o && (o.type = "Property", o.kind === "method" && (o.kind = "init"), o.shorthand = false), o;
            }
            parseObjectProperty(e, s, i, a) {
              let n = super.parseObjectProperty(e, s, i, a);
              return n && (n.kind = "init", n.type = "Property"), n;
            }
            isValidLVal(e, s, i) {
              return e === "Property" ? "value" : super.isValidLVal(e, s, i);
            }
            isAssignable(e, s) {
              return e != null && this.isObjectProperty(e) ? this.isAssignable(e.value, s) : super.isAssignable(e, s);
            }
            toAssignable(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (e != null && this.isObjectProperty(e)) {
                let { key: i, value: a } = e;
                this.isPrivateName(i) && this.classScope.usePrivateName(this.getPrivateNameSV(i), i.loc.start), this.toAssignable(a, s);
              } else
                super.toAssignable(e, s);
            }
            toAssignableObjectExpressionProp(e, s, i) {
              e.kind === "get" || e.kind === "set" ? this.raise(h.PatternHasAccessor, { at: e.key }) : e.method ? this.raise(h.PatternHasMethod, { at: e.key }) : super.toAssignableObjectExpressionProp(e, s, i);
            }
            finishCallExpression(e, s) {
              let i = super.finishCallExpression(e, s);
              if (i.callee.type === "Import") {
                if (i.type = "ImportExpression", i.source = i.arguments[0], this.hasPlugin("importAssertions")) {
                  var a;
                  i.attributes = (a = i.arguments[1]) != null ? a : null;
                }
                delete i.arguments, delete i.callee;
              }
              return i;
            }
            toReferencedArguments(e) {
              e.type !== "ImportExpression" && super.toReferencedArguments(e);
            }
            parseExport(e, s) {
              let i = this.state.lastTokStartLoc, a = super.parseExport(e, s);
              switch (a.type) {
                case "ExportAllDeclaration":
                  a.exported = null;
                  break;
                case "ExportNamedDeclaration":
                  a.specifiers.length === 1 && a.specifiers[0].type === "ExportNamespaceSpecifier" && (a.type = "ExportAllDeclaration", a.exported = a.specifiers[0].exported, delete a.specifiers);
                case "ExportDefaultDeclaration":
                  {
                    var n;
                    let { declaration: o } = a;
                    (o == null ? void 0 : o.type) === "ClassDeclaration" && ((n = o.decorators) == null ? void 0 : n.length) > 0 && o.start === a.start && this.resetStartLocation(a, i);
                  }
                  break;
              }
              return a;
            }
            parseSubscript(e, s, i, a) {
              let n = super.parseSubscript(e, s, i, a);
              if (a.optionalChainMember) {
                if ((n.type === "OptionalMemberExpression" || n.type === "OptionalCallExpression") && (n.type = n.type.substring(8)), a.stop) {
                  let o = this.startNodeAtNode(n);
                  return o.expression = n, this.finishNode(o, "ChainExpression");
                }
              } else
                (n.type === "MemberExpression" || n.type === "CallExpression") && (n.optional = false);
              return n;
            }
            hasPropertyAsPrivateName(e) {
              return e.type === "ChainExpression" && (e = e.expression), super.hasPropertyAsPrivateName(e);
            }
            isOptionalChain(e) {
              return e.type === "ChainExpression";
            }
            isObjectProperty(e) {
              return e.type === "Property" && e.kind === "init" && !e.method;
            }
            isObjectMethod(e) {
              return e.method || e.kind === "get" || e.kind === "set";
            }
            finishNodeAt(e, s, i) {
              return Y(super.finishNodeAt(e, s, i));
            }
            resetStartLocation(e, s) {
              super.resetStartLocation(e, s), Y(e);
            }
            resetEndLocation(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.lastTokEndLoc;
              super.resetEndLocation(e, s), Y(e);
            }
          }, "Me"), ee = /* @__PURE__ */ __name(class {
            constructor(t, r) {
              this.token = void 0, this.preserveSpace = void 0, this.token = t, this.preserveSpace = !!r;
            }
          }, "ee"), H = { brace: new ee("{"), j_oTag: new ee("<tag"), j_cTag: new ee("</tag"), j_expr: new ee("<tag>...</tag>", true) };
          H.template = new ee("`", true);
          var M = true, v = true, We = true, te = true, he = true, Co = true, ur = /* @__PURE__ */ __name(class {
            constructor(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = t, this.keyword = r.keyword, this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.rightAssociative = !!r.rightAssociative, this.isLoop = !!r.isLoop, this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop != null ? r.binop : null, this.updateContext = null;
            }
          }, "ur"), qt = /* @__PURE__ */ new Map();
          function U(t) {
            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            r.keyword = t;
            let e = N(t, r);
            return qt.set(t, e), e;
          }
          __name(U, "U");
          function ie(t, r) {
            return N(t, { beforeExpr: M, binop: r });
          }
          __name(ie, "ie");
          var Ge = -1, ce = [], Ut = [], Ht = [], $t = [], zt = [], Vt = [];
          function N(t) {
            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var e, s, i, a;
            return ++Ge, Ut.push(t), Ht.push((e = r.binop) != null ? e : -1), $t.push((s = r.beforeExpr) != null ? s : false), zt.push((i = r.startsExpr) != null ? i : false), Vt.push((a = r.prefix) != null ? a : false), ce.push(new ur(t, r)), Ge;
          }
          __name(N, "N");
          function q(t) {
            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var e, s, i, a;
            return ++Ge, qt.set(t, Ge), Ut.push(t), Ht.push((e = r.binop) != null ? e : -1), $t.push((s = r.beforeExpr) != null ? s : false), zt.push((i = r.startsExpr) != null ? i : false), Vt.push((a = r.prefix) != null ? a : false), ce.push(new ur("name", r)), Ge;
          }
          __name(q, "q");
          var bo = { bracketL: N("[", { beforeExpr: M, startsExpr: v }), bracketHashL: N("#[", { beforeExpr: M, startsExpr: v }), bracketBarL: N("[|", { beforeExpr: M, startsExpr: v }), bracketR: N("]"), bracketBarR: N("|]"), braceL: N("{", { beforeExpr: M, startsExpr: v }), braceBarL: N("{|", { beforeExpr: M, startsExpr: v }), braceHashL: N("#{", { beforeExpr: M, startsExpr: v }), braceR: N("}"), braceBarR: N("|}"), parenL: N("(", { beforeExpr: M, startsExpr: v }), parenR: N(")"), comma: N(",", { beforeExpr: M }), semi: N(";", { beforeExpr: M }), colon: N(":", { beforeExpr: M }), doubleColon: N("::", { beforeExpr: M }), dot: N("."), question: N("?", { beforeExpr: M }), questionDot: N("?."), arrow: N("=>", { beforeExpr: M }), template: N("template"), ellipsis: N("...", { beforeExpr: M }), backQuote: N("`", { startsExpr: v }), dollarBraceL: N("${", { beforeExpr: M, startsExpr: v }), templateTail: N("...`", { startsExpr: v }), templateNonTail: N("...${", { beforeExpr: M, startsExpr: v }), at: N("@"), hash: N("#", { startsExpr: v }), interpreterDirective: N("#!..."), eq: N("=", { beforeExpr: M, isAssign: te }), assign: N("_=", { beforeExpr: M, isAssign: te }), slashAssign: N("_=", { beforeExpr: M, isAssign: te }), xorAssign: N("_=", { beforeExpr: M, isAssign: te }), moduloAssign: N("_=", { beforeExpr: M, isAssign: te }), incDec: N("++/--", { prefix: he, postfix: Co, startsExpr: v }), bang: N("!", { beforeExpr: M, prefix: he, startsExpr: v }), tilde: N("~", { beforeExpr: M, prefix: he, startsExpr: v }), doubleCaret: N("^^", { startsExpr: v }), doubleAt: N("@@", { startsExpr: v }), pipeline: ie("|>", 0), nullishCoalescing: ie("??", 1), logicalOR: ie("||", 1), logicalAND: ie("&&", 2), bitwiseOR: ie("|", 3), bitwiseXOR: ie("^", 4), bitwiseAND: ie("&", 5), equality: ie("==/!=/===/!==", 6), lt: ie("</>/<=/>=", 7), gt: ie("</>/<=/>=", 7), relational: ie("</>/<=/>=", 7), bitShift: ie("<</>>/>>>", 8), bitShiftL: ie("<</>>/>>>", 8), bitShiftR: ie("<</>>/>>>", 8), plusMin: N("+/-", { beforeExpr: M, binop: 9, prefix: he, startsExpr: v }), modulo: N("%", { binop: 10, startsExpr: v }), star: N("*", { binop: 10 }), slash: ie("/", 10), exponent: N("**", { beforeExpr: M, binop: 11, rightAssociative: true }), _in: U("in", { beforeExpr: M, binop: 7 }), _instanceof: U("instanceof", { beforeExpr: M, binop: 7 }), _break: U("break"), _case: U("case", { beforeExpr: M }), _catch: U("catch"), _continue: U("continue"), _debugger: U("debugger"), _default: U("default", { beforeExpr: M }), _else: U("else", { beforeExpr: M }), _finally: U("finally"), _function: U("function", { startsExpr: v }), _if: U("if"), _return: U("return", { beforeExpr: M }), _switch: U("switch"), _throw: U("throw", { beforeExpr: M, prefix: he, startsExpr: v }), _try: U("try"), _var: U("var"), _const: U("const"), _with: U("with"), _new: U("new", { beforeExpr: M, startsExpr: v }), _this: U("this", { startsExpr: v }), _super: U("super", { startsExpr: v }), _class: U("class", { startsExpr: v }), _extends: U("extends", { beforeExpr: M }), _export: U("export"), _import: U("import", { startsExpr: v }), _null: U("null", { startsExpr: v }), _true: U("true", { startsExpr: v }), _false: U("false", { startsExpr: v }), _typeof: U("typeof", { beforeExpr: M, prefix: he, startsExpr: v }), _void: U("void", { beforeExpr: M, prefix: he, startsExpr: v }), _delete: U("delete", { beforeExpr: M, prefix: he, startsExpr: v }), _do: U("do", { isLoop: We, beforeExpr: M }), _for: U("for", { isLoop: We }), _while: U("while", { isLoop: We }), _as: q("as", { startsExpr: v }), _assert: q("assert", { startsExpr: v }), _async: q("async", { startsExpr: v }), _await: q("await", { startsExpr: v }), _from: q("from", { startsExpr: v }), _get: q("get", { startsExpr: v }), _let: q("let", { startsExpr: v }), _meta: q("meta", { startsExpr: v }), _of: q("of", { startsExpr: v }), _sent: q("sent", { startsExpr: v }), _set: q("set", { startsExpr: v }), _static: q("static", { startsExpr: v }), _using: q("using", { startsExpr: v }), _yield: q("yield", { startsExpr: v }), _asserts: q("asserts", { startsExpr: v }), _checks: q("checks", { startsExpr: v }), _exports: q("exports", { startsExpr: v }), _global: q("global", { startsExpr: v }), _implements: q("implements", { startsExpr: v }), _intrinsic: q("intrinsic", { startsExpr: v }), _infer: q("infer", { startsExpr: v }), _is: q("is", { startsExpr: v }), _mixins: q("mixins", { startsExpr: v }), _proto: q("proto", { startsExpr: v }), _require: q("require", { startsExpr: v }), _satisfies: q("satisfies", { startsExpr: v }), _keyof: q("keyof", { startsExpr: v }), _readonly: q("readonly", { startsExpr: v }), _unique: q("unique", { startsExpr: v }), _abstract: q("abstract", { startsExpr: v }), _declare: q("declare", { startsExpr: v }), _enum: q("enum", { startsExpr: v }), _module: q("module", { startsExpr: v }), _namespace: q("namespace", { startsExpr: v }), _interface: q("interface", { startsExpr: v }), _type: q("type", { startsExpr: v }), _opaque: q("opaque", { startsExpr: v }), name: N("name", { startsExpr: v }), string: N("string", { startsExpr: v }), num: N("num", { startsExpr: v }), bigint: N("bigint", { startsExpr: v }), decimal: N("decimal", { startsExpr: v }), regexp: N("regexp", { startsExpr: v }), privateName: N("#name", { startsExpr: v }), eof: N("eof"), jsxName: N("jsxName"), jsxText: N("jsxText", { beforeExpr: true }), jsxTagStart: N("jsxTagStart", { startsExpr: true }), jsxTagEnd: N("jsxTagEnd"), placeholder: N("%%", { startsExpr: true }) };
          function $(t) {
            return t >= 93 && t <= 130;
          }
          __name($, "$");
          function So(t) {
            return t <= 92;
          }
          __name(So, "So");
          function pe(t) {
            return t >= 58 && t <= 130;
          }
          __name(pe, "pe");
          function cr(t) {
            return t >= 58 && t <= 134;
          }
          __name(cr, "cr");
          function wo(t) {
            return $t[t];
          }
          __name(wo, "wo");
          function Kt(t) {
            return zt[t];
          }
          __name(Kt, "Kt");
          function Io(t) {
            return t >= 29 && t <= 33;
          }
          __name(Io, "Io");
          function pr(t) {
            return t >= 127 && t <= 129;
          }
          __name(pr, "pr");
          function No(t) {
            return t >= 90 && t <= 92;
          }
          __name(No, "No");
          function Wt(t) {
            return t >= 58 && t <= 92;
          }
          __name(Wt, "Wt");
          function ko(t) {
            return t >= 39 && t <= 59;
          }
          __name(ko, "ko");
          function Do(t) {
            return t === 34;
          }
          __name(Do, "Do");
          function Fo(t) {
            return Vt[t];
          }
          __name(Fo, "Fo");
          function Lo(t) {
            return t >= 119 && t <= 121;
          }
          __name(Lo, "Lo");
          function Oo(t) {
            return t >= 122 && t <= 128;
          }
          __name(Oo, "Oo");
          function Pe(t) {
            return Ut[t];
          }
          __name(Pe, "Pe");
          function nt(t) {
            return Ht[t];
          }
          __name(nt, "nt");
          function Mo(t) {
            return t === 57;
          }
          __name(Mo, "Mo");
          function ot(t) {
            return t >= 24 && t <= 25;
          }
          __name(ot, "ot");
          function de(t) {
            return ce[t];
          }
          __name(de, "de");
          ce[8].updateContext = (t) => {
            t.pop();
          }, ce[5].updateContext = ce[7].updateContext = ce[23].updateContext = (t) => {
            t.push(H.brace);
          }, ce[22].updateContext = (t) => {
            t[t.length - 1] === H.template ? t.pop() : t.push(H.template);
          }, ce[140].updateContext = (t) => {
            t.push(H.j_expr, H.j_oTag);
          };
          var Gt = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", dr = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F", Bo = new RegExp("[" + Gt + "]"), _o = new RegExp("[" + Gt + dr + "]");
          Gt = dr = null;
          var fr = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], Ro = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
          function Jt(t, r) {
            let e = 65536;
            for (let s = 0, i = r.length; s < i; s += 2) {
              if (e += r[s], e > t)
                return false;
              if (e += r[s + 1], e >= t)
                return true;
            }
            return false;
          }
          __name(Jt, "Jt");
          function fe(t) {
            return t < 65 ? t === 36 : t <= 90 ? true : t < 97 ? t === 95 : t <= 122 ? true : t <= 65535 ? t >= 170 && Bo.test(String.fromCharCode(t)) : Jt(t, fr);
          }
          __name(fe, "fe");
          function Be(t) {
            return t < 48 ? t === 36 : t < 58 ? true : t < 65 ? false : t <= 90 ? true : t < 97 ? t === 95 : t <= 122 ? true : t <= 65535 ? t >= 170 && _o.test(String.fromCharCode(t)) : Jt(t, fr) || Jt(t, Ro);
          }
          __name(Be, "Be");
          var Xt = { keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"], strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], strictBind: ["eval", "arguments"] }, jo = new Set(Xt.keyword), qo = new Set(Xt.strict), Uo = new Set(Xt.strictBind);
          function mr(t, r) {
            return r && t === "await" || t === "enum";
          }
          __name(mr, "mr");
          function yr(t, r) {
            return mr(t, r) || qo.has(t);
          }
          __name(yr, "yr");
          function xr(t) {
            return Uo.has(t);
          }
          __name(xr, "xr");
          function gr(t, r) {
            return yr(t, r) || xr(t);
          }
          __name(gr, "gr");
          function Ho(t) {
            return jo.has(t);
          }
          __name(Ho, "Ho");
          function $o(t, r, e) {
            return t === 64 && r === 64 && fe(e);
          }
          __name($o, "$o");
          var zo = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
          function Vo(t) {
            return zo.has(t);
          }
          __name(Vo, "Vo");
          var _e = 0, Re = 1, me = 2, Yt = 4, Pr = 8, lt = 16, Ar = 32, Se = 64, ht = 128, je = 256, ut = Re | me | ht | je, ye = 1, we = 2, Tr = 4, Ae = 8, ct = 16, vr = 64, pt = 128, Qt = 256, Zt = 512, es = 1024, ts = 2048, Je = 4096, Er = ye | we | Ae | pt, Ie = ye | 0 | Ae | 0, dt = ye | 0 | Tr | 0, Cr = ye | 0 | ct | 0, Ko = 0 | we | 0 | pt, Wo = 0 | we | 0 | 0, br = ye | we | Ae | Qt, Sr = 0 | es, Te = 0 | vr, Go = ye | 0 | 0 | vr, Jo = br | Zt, Xo = 0 | es, wr = 0 | we | 0 | Je, Yo = ts, ft = 4, ss = 2, rs = 1, is = ss | rs, Qo = ss | ft, Zo = rs | ft, el = ss, tl = rs, as = 0, ns = /* @__PURE__ */ __name(class {
            constructor(t) {
              this.var = /* @__PURE__ */ new Set(), this.lexical = /* @__PURE__ */ new Set(), this.functions = /* @__PURE__ */ new Set(), this.flags = t;
            }
          }, "ns"), os = /* @__PURE__ */ __name(class {
            constructor(t, r) {
              this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = t, this.inModule = r;
            }
            get inTopLevel() {
              return (this.currentScope().flags & Re) > 0;
            }
            get inFunction() {
              return (this.currentVarScopeFlags() & me) > 0;
            }
            get allowSuper() {
              return (this.currentThisScopeFlags() & lt) > 0;
            }
            get allowDirectSuper() {
              return (this.currentThisScopeFlags() & Ar) > 0;
            }
            get inClass() {
              return (this.currentThisScopeFlags() & Se) > 0;
            }
            get inClassAndNotInNonArrowFunction() {
              let t = this.currentThisScopeFlags();
              return (t & Se) > 0 && (t & me) === 0;
            }
            get inStaticBlock() {
              for (let t = this.scopeStack.length - 1; ; t--) {
                let { flags: r } = this.scopeStack[t];
                if (r & ht)
                  return true;
                if (r & (ut | Se))
                  return false;
              }
            }
            get inNonArrowFunction() {
              return (this.currentThisScopeFlags() & me) > 0;
            }
            get treatFunctionsAsVar() {
              return this.treatFunctionsAsVarInScope(this.currentScope());
            }
            createScope(t) {
              return new ns(t);
            }
            enter(t) {
              this.scopeStack.push(this.createScope(t));
            }
            exit() {
              return this.scopeStack.pop().flags;
            }
            treatFunctionsAsVarInScope(t) {
              return !!(t.flags & (me | ht) || !this.parser.inModule && t.flags & Re);
            }
            declareName(t, r, e) {
              let s = this.currentScope();
              if (r & Ae || r & ct)
                this.checkRedeclarationInScope(s, t, r, e), r & ct ? s.functions.add(t) : s.lexical.add(t), r & Ae && this.maybeExportDefined(s, t);
              else if (r & Tr)
                for (let i = this.scopeStack.length - 1; i >= 0 && (s = this.scopeStack[i], this.checkRedeclarationInScope(s, t, r, e), s.var.add(t), this.maybeExportDefined(s, t), !(s.flags & ut)); --i)
                  ;
              this.parser.inModule && s.flags & Re && this.undefinedExports.delete(t);
            }
            maybeExportDefined(t, r) {
              this.parser.inModule && t.flags & Re && this.undefinedExports.delete(r);
            }
            checkRedeclarationInScope(t, r, e, s) {
              this.isRedeclaredInScope(t, r, e) && this.parser.raise(h.VarRedeclaration, { at: s, identifierName: r });
            }
            isRedeclaredInScope(t, r, e) {
              return e & ye ? e & Ae ? t.lexical.has(r) || t.functions.has(r) || t.var.has(r) : e & ct ? t.lexical.has(r) || !this.treatFunctionsAsVarInScope(t) && t.var.has(r) : t.lexical.has(r) && !(t.flags & Pr && t.lexical.values().next().value === r) || !this.treatFunctionsAsVarInScope(t) && t.functions.has(r) : false;
            }
            checkLocalExport(t) {
              let { name: r } = t, e = this.scopeStack[0];
              !e.lexical.has(r) && !e.var.has(r) && !e.functions.has(r) && this.undefinedExports.set(r, t.loc.start);
            }
            currentScope() {
              return this.scopeStack[this.scopeStack.length - 1];
            }
            currentVarScopeFlags() {
              for (let t = this.scopeStack.length - 1; ; t--) {
                let { flags: r } = this.scopeStack[t];
                if (r & ut)
                  return r;
              }
            }
            currentThisScopeFlags() {
              for (let t = this.scopeStack.length - 1; ; t--) {
                let { flags: r } = this.scopeStack[t];
                if (r & (ut | Se) && !(r & Yt))
                  return r;
              }
            }
          }, "os"), sl = /* @__PURE__ */ __name(class extends ns {
            constructor() {
              super(...arguments), this.declareFunctions = /* @__PURE__ */ new Set();
            }
          }, "sl"), rl = /* @__PURE__ */ __name(class extends os {
            createScope(t) {
              return new sl(t);
            }
            declareName(t, r, e) {
              let s = this.currentScope();
              if (r & ts) {
                this.checkRedeclarationInScope(s, t, r, e), this.maybeExportDefined(s, t), s.declareFunctions.add(t);
                return;
              }
              super.declareName(t, r, e);
            }
            isRedeclaredInScope(t, r, e) {
              return super.isRedeclaredInScope(t, r, e) ? true : e & ts ? !t.declareFunctions.has(r) && (t.lexical.has(r) || t.functions.has(r)) : false;
            }
            checkLocalExport(t) {
              this.scopeStack[0].declareFunctions.has(t.name) || super.checkLocalExport(t);
            }
          }, "rl"), il = /* @__PURE__ */ __name(class {
            constructor() {
              this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
            }
            hasPlugin(t) {
              if (typeof t == "string")
                return this.plugins.has(t);
              {
                let [r, e] = t;
                if (!this.hasPlugin(r))
                  return false;
                let s = this.plugins.get(r);
                for (let i of Object.keys(e))
                  if ((s == null ? void 0 : s[i]) !== e[i])
                    return false;
                return true;
              }
            }
            getPluginOption(t, r) {
              var e;
              return (e = this.plugins.get(t)) == null ? void 0 : e[r];
            }
          }, "il");
          function Ir(t, r) {
            t.trailingComments === void 0 ? t.trailingComments = r : t.trailingComments.unshift(...r);
          }
          __name(Ir, "Ir");
          function al(t, r) {
            t.leadingComments === void 0 ? t.leadingComments = r : t.leadingComments.unshift(...r);
          }
          __name(al, "al");
          function Xe(t, r) {
            t.innerComments === void 0 ? t.innerComments = r : t.innerComments.unshift(...r);
          }
          __name(Xe, "Xe");
          function Ye(t, r, e) {
            let s = null, i = r.length;
            for (; s === null && i > 0; )
              s = r[--i];
            s === null || s.start > e.start ? Xe(t, e.comments) : Ir(s, e.comments);
          }
          __name(Ye, "Ye");
          var nl = /* @__PURE__ */ __name(class extends il {
            addComment(t) {
              this.filename && (t.loc.filename = this.filename), this.state.comments.push(t);
            }
            processComment(t) {
              let { commentStack: r } = this.state, e = r.length;
              if (e === 0)
                return;
              let s = e - 1, i = r[s];
              i.start === t.end && (i.leadingNode = t, s--);
              let { start: a } = t;
              for (; s >= 0; s--) {
                let n = r[s], o = n.end;
                if (o > a)
                  n.containingNode = t, this.finalizeComment(n), r.splice(s, 1);
                else {
                  o === a && (n.trailingNode = t);
                  break;
                }
              }
            }
            finalizeComment(t) {
              let { comments: r } = t;
              if (t.leadingNode !== null || t.trailingNode !== null)
                t.leadingNode !== null && Ir(t.leadingNode, r), t.trailingNode !== null && al(t.trailingNode, r);
              else {
                let { containingNode: e, start: s } = t;
                if (this.input.charCodeAt(s - 1) === 44)
                  switch (e.type) {
                    case "ObjectExpression":
                    case "ObjectPattern":
                    case "RecordExpression":
                      Ye(e, e.properties, t);
                      break;
                    case "CallExpression":
                    case "OptionalCallExpression":
                      Ye(e, e.arguments, t);
                      break;
                    case "FunctionDeclaration":
                    case "FunctionExpression":
                    case "ArrowFunctionExpression":
                    case "ObjectMethod":
                    case "ClassMethod":
                    case "ClassPrivateMethod":
                      Ye(e, e.params, t);
                      break;
                    case "ArrayExpression":
                    case "ArrayPattern":
                    case "TupleExpression":
                      Ye(e, e.elements, t);
                      break;
                    case "ExportNamedDeclaration":
                    case "ImportDeclaration":
                      Ye(e, e.specifiers, t);
                      break;
                    default:
                      Xe(e, r);
                  }
                else
                  Xe(e, r);
              }
            }
            finalizeRemainingComments() {
              let { commentStack: t } = this.state;
              for (let r = t.length - 1; r >= 0; r--)
                this.finalizeComment(t[r]);
              this.state.commentStack = [];
            }
            resetPreviousNodeTrailingComments(t) {
              let { commentStack: r } = this.state, { length: e } = r;
              if (e === 0)
                return;
              let s = r[e - 1];
              s.leadingNode === t && (s.leadingNode = null);
            }
            takeSurroundingComments(t, r, e) {
              let { commentStack: s } = this.state, i = s.length;
              if (i === 0)
                return;
              let a = i - 1;
              for (; a >= 0; a--) {
                let n = s[a], o = n.end;
                if (n.start === e)
                  n.leadingNode = t;
                else if (o === r)
                  n.trailingNode = t;
                else if (o < r)
                  break;
              }
            }
          }, "nl"), ls = /\r\n?|[\n\u2028\u2029]/, mt = new RegExp(ls.source, "g");
          function Qe(t) {
            switch (t) {
              case 10:
              case 13:
              case 8232:
              case 8233:
                return true;
              default:
                return false;
            }
          }
          __name(Qe, "Qe");
          var hs = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ol = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y, Nr = new RegExp("(?=(" + ol.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
          function ll(t) {
            switch (t) {
              case 9:
              case 11:
              case 12:
              case 32:
              case 160:
              case 5760:
              case 8192:
              case 8193:
              case 8194:
              case 8195:
              case 8196:
              case 8197:
              case 8198:
              case 8199:
              case 8200:
              case 8201:
              case 8202:
              case 8239:
              case 8287:
              case 12288:
              case 65279:
                return true;
              default:
                return false;
            }
          }
          __name(ll, "ll");
          var kr = /* @__PURE__ */ __name(class {
            constructor() {
              this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inType = false, this.noAnonFunctionType = false, this.hasFlowComment = false, this.isAmbientContext = false, this.inAbstractClass = false, this.inDisallowConditionalTypesContext = false, this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 137, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [H.brace], this.canStartJSXElement = true, this.containsEsc = false, this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
            }
            init(t) {
              let { strictMode: r, sourceType: e, startLine: s, startColumn: i } = t;
              this.strict = r === false ? false : r === true ? true : e === "module", this.curLine = s, this.lineStart = -i, this.startLoc = this.endLoc = new d(s, i, 0);
            }
            curPosition() {
              return new d(this.curLine, this.pos - this.lineStart, this.pos);
            }
            clone(t) {
              let r = new kr(), e = Object.keys(this);
              for (let s = 0, i = e.length; s < i; s++) {
                let a = e[s], n = this[a];
                !t && Array.isArray(n) && (n = n.slice()), r[a] = n;
              }
              return r;
            }
          }, "kr"), hl = /* @__PURE__ */ __name(function(r) {
            return r >= 48 && r <= 57;
          }, "hl"), Dr = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, yt = { bin: (t) => t === 48 || t === 49, oct: (t) => t >= 48 && t <= 55, dec: (t) => t >= 48 && t <= 57, hex: (t) => t >= 48 && t <= 57 || t >= 65 && t <= 70 || t >= 97 && t <= 102 };
          function Fr(t, r, e, s, i, a) {
            let n = e, o = s, c = i, p = "", m = null, x = e, { length: P } = r;
            for (; ; ) {
              if (e >= P) {
                a.unterminated(n, o, c), p += r.slice(x, e);
                break;
              }
              let b = r.charCodeAt(e);
              if (ul(t, b, r, e)) {
                p += r.slice(x, e);
                break;
              }
              if (b === 92) {
                p += r.slice(x, e);
                let O = cl(r, e, s, i, t === "template", a);
                O.ch === null && !m ? m = { pos: e, lineStart: s, curLine: i } : p += O.ch, { pos: e, lineStart: s, curLine: i } = O, x = e;
              } else
                b === 8232 || b === 8233 ? (++e, ++i, s = e) : b === 10 || b === 13 ? t === "template" ? (p += r.slice(x, e) + `
`, ++e, b === 13 && r.charCodeAt(e) === 10 && ++e, ++i, x = s = e) : a.unterminated(n, o, c) : ++e;
            }
            return { pos: e, str: p, firstInvalidLoc: m, lineStart: s, curLine: i, containsInvalid: !!m };
          }
          __name(Fr, "Fr");
          function ul(t, r, e, s) {
            return t === "template" ? r === 96 || r === 36 && e.charCodeAt(s + 1) === 123 : r === (t === "double" ? 34 : 39);
          }
          __name(ul, "ul");
          function cl(t, r, e, s, i, a) {
            let n = !i;
            r++;
            let o = /* @__PURE__ */ __name((p) => ({ pos: r, ch: p, lineStart: e, curLine: s }), "o"), c = t.charCodeAt(r++);
            switch (c) {
              case 110:
                return o(`
`);
              case 114:
                return o("\r");
              case 120: {
                let p;
                return { code: p, pos: r } = us(t, r, e, s, 2, false, n, a), o(p === null ? null : String.fromCharCode(p));
              }
              case 117: {
                let p;
                return { code: p, pos: r } = Or(t, r, e, s, n, a), o(p === null ? null : String.fromCodePoint(p));
              }
              case 116:
                return o("	");
              case 98:
                return o("\b");
              case 118:
                return o("\v");
              case 102:
                return o("\f");
              case 13:
                t.charCodeAt(r) === 10 && ++r;
              case 10:
                e = r, ++s;
              case 8232:
              case 8233:
                return o("");
              case 56:
              case 57:
                if (i)
                  return o(null);
                a.strictNumericEscape(r - 1, e, s);
              default:
                if (c >= 48 && c <= 55) {
                  let p = r - 1, x = t.slice(p, r + 2).match(/^[0-7]+/)[0], P = parseInt(x, 8);
                  P > 255 && (x = x.slice(0, -1), P = parseInt(x, 8)), r += x.length - 1;
                  let b = t.charCodeAt(r);
                  if (x !== "0" || b === 56 || b === 57) {
                    if (i)
                      return o(null);
                    a.strictNumericEscape(p, e, s);
                  }
                  return o(String.fromCharCode(P));
                }
                return o(String.fromCharCode(c));
            }
          }
          __name(cl, "cl");
          function us(t, r, e, s, i, a, n, o) {
            let c = r, p;
            return { n: p, pos: r } = Lr(t, r, e, s, 16, i, a, false, o, !n), p === null && (n ? o.invalidEscapeSequence(c, e, s) : r = c - 1), { code: p, pos: r };
          }
          __name(us, "us");
          function Lr(t, r, e, s, i, a, n, o, c, p) {
            let m = r, x = i === 16 ? Dr.hex : Dr.decBinOct, P = i === 16 ? yt.hex : i === 10 ? yt.dec : i === 8 ? yt.oct : yt.bin, b = false, O = 0;
            for (let R = 0, Q = a == null ? 1 / 0 : a; R < Q; ++R) {
              let Z = t.charCodeAt(r), X;
              if (Z === 95 && o !== "bail") {
                let re = t.charCodeAt(r - 1), $e = t.charCodeAt(r + 1);
                if (o) {
                  if (Number.isNaN($e) || !P($e) || x.has(re) || x.has($e)) {
                    if (p)
                      return { n: null, pos: r };
                    c.unexpectedNumericSeparator(r, e, s);
                  }
                } else {
                  if (p)
                    return { n: null, pos: r };
                  c.numericSeparatorInEscapeSequence(r, e, s);
                }
                ++r;
                continue;
              }
              if (Z >= 97 ? X = Z - 97 + 10 : Z >= 65 ? X = Z - 65 + 10 : hl(Z) ? X = Z - 48 : X = 1 / 0, X >= i) {
                if (X <= 9 && p)
                  return { n: null, pos: r };
                if (X <= 9 && c.invalidDigit(r, e, s, i))
                  X = 0;
                else if (n)
                  X = 0, b = true;
                else
                  break;
              }
              ++r, O = O * i + X;
            }
            return r === m || a != null && r - m !== a || b ? { n: null, pos: r } : { n: O, pos: r };
          }
          __name(Lr, "Lr");
          function Or(t, r, e, s, i, a) {
            let n = t.charCodeAt(r), o;
            if (n === 123) {
              if (++r, { code: o, pos: r } = us(t, r, e, s, t.indexOf("}", r) - r, true, i, a), ++r, o !== null && o > 1114111)
                if (i)
                  a.invalidCodePoint(r, e, s);
                else
                  return { code: null, pos: r };
            } else
              ({ code: o, pos: r } = us(t, r, e, s, 4, false, i, a));
            return { code: o, pos: r };
          }
          __name(Or, "Or");
          var pl = ["at"], dl = ["at"];
          function Ze(t, r, e) {
            return new d(e, t - r, t);
          }
          __name(Ze, "Ze");
          var fl = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]), ve = /* @__PURE__ */ __name(class {
            constructor(t) {
              this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, this.loc = new f(t.startLoc, t.endLoc);
            }
          }, "ve"), ml = /* @__PURE__ */ __name(class extends nl {
            constructor(t, r) {
              super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (e, s, i, a) => this.options.errorRecovery ? (this.raise(h.InvalidDigit, { at: Ze(e, s, i), radix: a }), true) : false, numericSeparatorInEscapeSequence: this.errorBuilder(h.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(h.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(h.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(h.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (e, s, i) => {
                this.recordStrictModeErrors(h.StrictNumericEscape, { at: Ze(e, s, i) });
              }, unterminated: (e, s, i) => {
                throw this.raise(h.UnterminatedString, { at: Ze(e - 1, s, i) });
              } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(h.StrictNumericEscape), unterminated: (e, s, i) => {
                throw this.raise(h.UnterminatedTemplate, { at: Ze(e, s, i) });
              } }), this.state = new kr(), this.state.init(t), this.input = r, this.length = r.length, this.isLookahead = false;
            }
            pushToken(t) {
              this.tokens.length = this.state.tokensLength, this.tokens.push(t), ++this.state.tokensLength;
            }
            next() {
              this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new ve(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
            }
            eat(t) {
              return this.match(t) ? (this.next(), true) : false;
            }
            match(t) {
              return this.state.type === t;
            }
            createLookaheadState(t) {
              return { pos: t.pos, value: null, type: t.type, start: t.start, end: t.end, context: [this.curContext()], inType: t.inType, startLoc: t.startLoc, lastTokEndLoc: t.lastTokEndLoc, curLine: t.curLine, lineStart: t.lineStart, curPosition: t.curPosition };
            }
            lookahead() {
              let t = this.state;
              this.state = this.createLookaheadState(t), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
              let r = this.state;
              return this.state = t, r;
            }
            nextTokenStart() {
              return this.nextTokenStartSince(this.state.pos);
            }
            nextTokenStartSince(t) {
              return hs.lastIndex = t, hs.test(this.input) ? hs.lastIndex : t;
            }
            lookaheadCharCode() {
              return this.input.charCodeAt(this.nextTokenStart());
            }
            codePointAtPos(t) {
              let r = this.input.charCodeAt(t);
              if ((r & 64512) === 55296 && ++t < this.input.length) {
                let e = this.input.charCodeAt(t);
                (e & 64512) === 56320 && (r = 65536 + ((r & 1023) << 10) + (e & 1023));
              }
              return r;
            }
            setStrict(t) {
              this.state.strict = t, t && (this.state.strictErrors.forEach((r) => {
                let [e, s] = r;
                return this.raise(e, { at: s });
              }), this.state.strictErrors.clear());
            }
            curContext() {
              return this.state.context[this.state.context.length - 1];
            }
            nextToken() {
              if (this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length) {
                this.finishToken(137);
                return;
              }
              this.getTokenFromCode(this.codePointAtPos(this.state.pos));
            }
            skipBlockComment(t) {
              let r;
              this.isLookahead || (r = this.state.curPosition());
              let e = this.state.pos, s = this.input.indexOf(t, e + 2);
              if (s === -1)
                throw this.raise(h.UnterminatedComment, { at: this.state.curPosition() });
              for (this.state.pos = s + t.length, mt.lastIndex = e + 2; mt.test(this.input) && mt.lastIndex <= s; )
                ++this.state.curLine, this.state.lineStart = mt.lastIndex;
              if (this.isLookahead)
                return;
              let i = { type: "CommentBlock", value: this.input.slice(e + 2, s), start: e, end: s + t.length, loc: new f(r, this.state.curPosition()) };
              return this.options.tokens && this.pushToken(i), i;
            }
            skipLineComment(t) {
              let r = this.state.pos, e;
              this.isLookahead || (e = this.state.curPosition());
              let s = this.input.charCodeAt(this.state.pos += t);
              if (this.state.pos < this.length)
                for (; !Qe(s) && ++this.state.pos < this.length; )
                  s = this.input.charCodeAt(this.state.pos);
              if (this.isLookahead)
                return;
              let i = this.state.pos, a = this.input.slice(r + t, i), n = { type: "CommentLine", value: a, start: r, end: i, loc: new f(e, this.state.curPosition()) };
              return this.options.tokens && this.pushToken(n), n;
            }
            skipSpace() {
              let t = this.state.pos, r = [];
              e:
                for (; this.state.pos < this.length; ) {
                  let e = this.input.charCodeAt(this.state.pos);
                  switch (e) {
                    case 32:
                    case 160:
                    case 9:
                      ++this.state.pos;
                      break;
                    case 13:
                      this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
                    case 10:
                    case 8232:
                    case 8233:
                      ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                      break;
                    case 47:
                      switch (this.input.charCodeAt(this.state.pos + 1)) {
                        case 42: {
                          let s = this.skipBlockComment("*/");
                          s !== void 0 && (this.addComment(s), this.options.attachComment && r.push(s));
                          break;
                        }
                        case 47: {
                          let s = this.skipLineComment(2);
                          s !== void 0 && (this.addComment(s), this.options.attachComment && r.push(s));
                          break;
                        }
                        default:
                          break e;
                      }
                      break;
                    default:
                      if (ll(e))
                        ++this.state.pos;
                      else if (e === 45 && !this.inModule) {
                        let s = this.state.pos;
                        if (this.input.charCodeAt(s + 1) === 45 && this.input.charCodeAt(s + 2) === 62 && (t === 0 || this.state.lineStart > t)) {
                          let i = this.skipLineComment(3);
                          i !== void 0 && (this.addComment(i), this.options.attachComment && r.push(i));
                        } else
                          break e;
                      } else if (e === 60 && !this.inModule) {
                        let s = this.state.pos;
                        if (this.input.charCodeAt(s + 1) === 33 && this.input.charCodeAt(s + 2) === 45 && this.input.charCodeAt(s + 3) === 45) {
                          let i = this.skipLineComment(4);
                          i !== void 0 && (this.addComment(i), this.options.attachComment && r.push(i));
                        } else
                          break e;
                      } else
                        break e;
                  }
                }
              if (r.length > 0) {
                let e = this.state.pos, s = { start: t, end: e, comments: r, leadingNode: null, trailingNode: null, containingNode: null };
                this.state.commentStack.push(s);
              }
            }
            finishToken(t, r) {
              this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
              let e = this.state.type;
              this.state.type = t, this.state.value = r, this.isLookahead || this.updateContext(e);
            }
            replaceToken(t) {
              this.state.type = t, this.updateContext();
            }
            readToken_numberSign() {
              if (this.state.pos === 0 && this.readToken_interpreter())
                return;
              let t = this.state.pos + 1, r = this.codePointAtPos(t);
              if (r >= 48 && r <= 57)
                throw this.raise(h.UnexpectedDigitAfterHash, { at: this.state.curPosition() });
              if (r === 123 || r === 91 && this.hasPlugin("recordAndTuple")) {
                if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar")
                  throw this.raise(r === 123 ? h.RecordExpressionHashIncorrectStartSyntaxType : h.TupleExpressionHashIncorrectStartSyntaxType, { at: this.state.curPosition() });
                this.state.pos += 2, r === 123 ? this.finishToken(7) : this.finishToken(1);
              } else
                fe(r) ? (++this.state.pos, this.finishToken(136, this.readWord1(r))) : r === 92 ? (++this.state.pos, this.finishToken(136, this.readWord1())) : this.finishOp(27, 1);
            }
            readToken_dot() {
              let t = this.input.charCodeAt(this.state.pos + 1);
              if (t >= 48 && t <= 57) {
                this.readNumber(true);
                return;
              }
              t === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
            }
            readToken_slash() {
              this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
            }
            readToken_interpreter() {
              if (this.state.pos !== 0 || this.length < 2)
                return false;
              let t = this.input.charCodeAt(this.state.pos + 1);
              if (t !== 33)
                return false;
              let r = this.state.pos;
              for (this.state.pos += 1; !Qe(t) && ++this.state.pos < this.length; )
                t = this.input.charCodeAt(this.state.pos);
              let e = this.input.slice(r + 2, this.state.pos);
              return this.finishToken(28, e), true;
            }
            readToken_mult_modulo(t) {
              let r = t === 42 ? 55 : 54, e = 1, s = this.input.charCodeAt(this.state.pos + 1);
              t === 42 && s === 42 && (e++, s = this.input.charCodeAt(this.state.pos + 2), r = 57), s === 61 && !this.state.inType && (e++, r = t === 37 ? 33 : 30), this.finishOp(r, e);
            }
            readToken_pipe_amp(t) {
              let r = this.input.charCodeAt(this.state.pos + 1);
              if (r === t) {
                this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(t === 124 ? 41 : 42, 2);
                return;
              }
              if (t === 124) {
                if (r === 62) {
                  this.finishOp(39, 2);
                  return;
                }
                if (this.hasPlugin("recordAndTuple") && r === 125) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                    throw this.raise(h.RecordExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(9);
                  return;
                }
                if (this.hasPlugin("recordAndTuple") && r === 93) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                    throw this.raise(h.TupleExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(4);
                  return;
                }
              }
              if (r === 61) {
                this.finishOp(30, 2);
                return;
              }
              this.finishOp(t === 124 ? 43 : 45, 1);
            }
            readToken_caret() {
              let t = this.input.charCodeAt(this.state.pos + 1);
              if (t === 61 && !this.state.inType)
                this.finishOp(32, 2);
              else if (t === 94 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
                if (this.finishOp(37, 2), this.input.codePointAt(this.state.pos) === 94)
                  throw this.unexpected();
              } else
                this.finishOp(44, 1);
            }
            readToken_atSign() {
              this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
            }
            readToken_plus_min(t) {
              let r = this.input.charCodeAt(this.state.pos + 1);
              if (r === t) {
                this.finishOp(34, 2);
                return;
              }
              r === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1);
            }
            readToken_lt() {
              let { pos: t } = this.state, r = this.input.charCodeAt(t + 1);
              if (r === 60) {
                if (this.input.charCodeAt(t + 2) === 61) {
                  this.finishOp(30, 3);
                  return;
                }
                this.finishOp(51, 2);
                return;
              }
              if (r === 61) {
                this.finishOp(49, 2);
                return;
              }
              this.finishOp(47, 1);
            }
            readToken_gt() {
              let { pos: t } = this.state, r = this.input.charCodeAt(t + 1);
              if (r === 62) {
                let e = this.input.charCodeAt(t + 2) === 62 ? 3 : 2;
                if (this.input.charCodeAt(t + e) === 61) {
                  this.finishOp(30, e + 1);
                  return;
                }
                this.finishOp(52, e);
                return;
              }
              if (r === 61) {
                this.finishOp(49, 2);
                return;
              }
              this.finishOp(48, 1);
            }
            readToken_eq_excl(t) {
              let r = this.input.charCodeAt(this.state.pos + 1);
              if (r === 61) {
                this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
                return;
              }
              if (t === 61 && r === 62) {
                this.state.pos += 2, this.finishToken(19);
                return;
              }
              this.finishOp(t === 61 ? 29 : 35, 1);
            }
            readToken_question() {
              let t = this.input.charCodeAt(this.state.pos + 1), r = this.input.charCodeAt(this.state.pos + 2);
              t === 63 ? r === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : t === 46 && !(r >= 48 && r <= 57) ? (this.state.pos += 2, this.finishToken(18)) : (++this.state.pos, this.finishToken(17));
            }
            getTokenFromCode(t) {
              switch (t) {
                case 46:
                  this.readToken_dot();
                  return;
                case 40:
                  ++this.state.pos, this.finishToken(10);
                  return;
                case 41:
                  ++this.state.pos, this.finishToken(11);
                  return;
                case 59:
                  ++this.state.pos, this.finishToken(13);
                  return;
                case 44:
                  ++this.state.pos, this.finishToken(12);
                  return;
                case 91:
                  if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                      throw this.raise(h.TupleExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                    this.state.pos += 2, this.finishToken(2);
                  } else
                    ++this.state.pos, this.finishToken(0);
                  return;
                case 93:
                  ++this.state.pos, this.finishToken(3);
                  return;
                case 123:
                  if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                      throw this.raise(h.RecordExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                    this.state.pos += 2, this.finishToken(6);
                  } else
                    ++this.state.pos, this.finishToken(5);
                  return;
                case 125:
                  ++this.state.pos, this.finishToken(8);
                  return;
                case 58:
                  this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14));
                  return;
                case 63:
                  this.readToken_question();
                  return;
                case 96:
                  this.readTemplateToken();
                  return;
                case 48: {
                  let r = this.input.charCodeAt(this.state.pos + 1);
                  if (r === 120 || r === 88) {
                    this.readRadixNumber(16);
                    return;
                  }
                  if (r === 111 || r === 79) {
                    this.readRadixNumber(8);
                    return;
                  }
                  if (r === 98 || r === 66) {
                    this.readRadixNumber(2);
                    return;
                  }
                }
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  this.readNumber(false);
                  return;
                case 34:
                case 39:
                  this.readString(t);
                  return;
                case 47:
                  this.readToken_slash();
                  return;
                case 37:
                case 42:
                  this.readToken_mult_modulo(t);
                  return;
                case 124:
                case 38:
                  this.readToken_pipe_amp(t);
                  return;
                case 94:
                  this.readToken_caret();
                  return;
                case 43:
                case 45:
                  this.readToken_plus_min(t);
                  return;
                case 60:
                  this.readToken_lt();
                  return;
                case 62:
                  this.readToken_gt();
                  return;
                case 61:
                case 33:
                  this.readToken_eq_excl(t);
                  return;
                case 126:
                  this.finishOp(36, 1);
                  return;
                case 64:
                  this.readToken_atSign();
                  return;
                case 35:
                  this.readToken_numberSign();
                  return;
                case 92:
                  this.readWord();
                  return;
                default:
                  if (fe(t)) {
                    this.readWord(t);
                    return;
                  }
              }
              throw this.raise(h.InvalidOrUnexpectedToken, { at: this.state.curPosition(), unexpected: String.fromCodePoint(t) });
            }
            finishOp(t, r) {
              let e = this.input.slice(this.state.pos, this.state.pos + r);
              this.state.pos += r, this.finishToken(t, e);
            }
            readRegexp() {
              let t = this.state.startLoc, r = this.state.start + 1, e, s, { pos: i } = this.state;
              for (; ; ++i) {
                if (i >= this.length)
                  throw this.raise(h.UnterminatedRegExp, { at: y(t, 1) });
                let c = this.input.charCodeAt(i);
                if (Qe(c))
                  throw this.raise(h.UnterminatedRegExp, { at: y(t, 1) });
                if (e)
                  e = false;
                else {
                  if (c === 91)
                    s = true;
                  else if (c === 93 && s)
                    s = false;
                  else if (c === 47 && !s)
                    break;
                  e = c === 92;
                }
              }
              let a = this.input.slice(r, i);
              ++i;
              let n = "", o = /* @__PURE__ */ __name(() => y(t, i + 2 - r), "o");
              for (; i < this.length; ) {
                let c = this.codePointAtPos(i), p = String.fromCharCode(c);
                if (fl.has(c))
                  c === 118 ? (this.expectPlugin("regexpUnicodeSets", o()), n.includes("u") && this.raise(h.IncompatibleRegExpUVFlags, { at: o() })) : c === 117 && n.includes("v") && this.raise(h.IncompatibleRegExpUVFlags, { at: o() }), n.includes(p) && this.raise(h.DuplicateRegExpFlags, { at: o() });
                else if (Be(c) || c === 92)
                  this.raise(h.MalformedRegExpFlags, { at: o() });
                else
                  break;
                ++i, n += p;
              }
              this.state.pos = i, this.finishToken(135, { pattern: a, flags: n });
            }
            readInt(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true, { n: i, pos: a } = Lr(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, r, e, s, this.errorHandlers_readInt, false);
              return this.state.pos = a, i;
            }
            readRadixNumber(t) {
              let r = this.state.curPosition(), e = false;
              this.state.pos += 2;
              let s = this.readInt(t);
              s == null && this.raise(h.InvalidDigit, { at: y(r, 2), radix: t });
              let i = this.input.charCodeAt(this.state.pos);
              if (i === 110)
                ++this.state.pos, e = true;
              else if (i === 109)
                throw this.raise(h.InvalidDecimal, { at: r });
              if (fe(this.codePointAtPos(this.state.pos)))
                throw this.raise(h.NumberIdentifier, { at: this.state.curPosition() });
              if (e) {
                let a = this.input.slice(r.index, this.state.pos).replace(/[_n]/g, "");
                this.finishToken(133, a);
                return;
              }
              this.finishToken(132, s);
            }
            readNumber(t) {
              let r = this.state.pos, e = this.state.curPosition(), s = false, i = false, a = false, n = false, o = false;
              !t && this.readInt(10) === null && this.raise(h.InvalidNumber, { at: this.state.curPosition() });
              let c = this.state.pos - r >= 2 && this.input.charCodeAt(r) === 48;
              if (c) {
                let P = this.input.slice(r, this.state.pos);
                if (this.recordStrictModeErrors(h.StrictOctalLiteral, { at: e }), !this.state.strict) {
                  let b = P.indexOf("_");
                  b > 0 && this.raise(h.ZeroDigitNumericSeparator, { at: y(e, b) });
                }
                o = c && !/[89]/.test(P);
              }
              let p = this.input.charCodeAt(this.state.pos);
              if (p === 46 && !o && (++this.state.pos, this.readInt(10), s = true, p = this.input.charCodeAt(this.state.pos)), (p === 69 || p === 101) && !o && (p = this.input.charCodeAt(++this.state.pos), (p === 43 || p === 45) && ++this.state.pos, this.readInt(10) === null && this.raise(h.InvalidOrMissingExponent, { at: e }), s = true, n = true, p = this.input.charCodeAt(this.state.pos)), p === 110 && ((s || c) && this.raise(h.InvalidBigIntLiteral, { at: e }), ++this.state.pos, i = true), p === 109 && (this.expectPlugin("decimal", this.state.curPosition()), (n || c) && this.raise(h.InvalidDecimal, { at: e }), ++this.state.pos, a = true), fe(this.codePointAtPos(this.state.pos)))
                throw this.raise(h.NumberIdentifier, { at: this.state.curPosition() });
              let m = this.input.slice(r, this.state.pos).replace(/[_mn]/g, "");
              if (i) {
                this.finishToken(133, m);
                return;
              }
              if (a) {
                this.finishToken(134, m);
                return;
              }
              let x = o ? parseInt(m, 8) : parseFloat(m);
              this.finishToken(132, x);
            }
            readCodePoint(t) {
              let { code: r, pos: e } = Or(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, this.errorHandlers_readCodePoint);
              return this.state.pos = e, r;
            }
            readString(t) {
              let { str: r, pos: e, curLine: s, lineStart: i } = Fr(t === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
              this.state.pos = e + 1, this.state.lineStart = i, this.state.curLine = s, this.finishToken(131, r);
            }
            readTemplateContinuation() {
              this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
            }
            readTemplateToken() {
              let t = this.input[this.state.pos], { str: r, firstInvalidLoc: e, pos: s, curLine: i, lineStart: a } = Fr("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
              this.state.pos = s + 1, this.state.lineStart = a, this.state.curLine = i, e && (this.state.firstInvalidTemplateEscapePos = new d(e.curLine, e.pos - e.lineStart, e.pos)), this.input.codePointAt(s) === 96 ? this.finishToken(24, e ? null : t + r + "`") : (this.state.pos++, this.finishToken(25, e ? null : t + r + "${"));
            }
            recordStrictModeErrors(t, r) {
              let { at: e } = r, s = e.index;
              this.state.strict && !this.state.strictErrors.has(s) ? this.raise(t, { at: e }) : this.state.strictErrors.set(s, [t, e]);
            }
            readWord1(t) {
              this.state.containsEsc = false;
              let r = "", e = this.state.pos, s = this.state.pos;
              for (t !== void 0 && (this.state.pos += t <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
                let i = this.codePointAtPos(this.state.pos);
                if (Be(i))
                  this.state.pos += i <= 65535 ? 1 : 2;
                else if (i === 92) {
                  this.state.containsEsc = true, r += this.input.slice(s, this.state.pos);
                  let a = this.state.curPosition(), n = this.state.pos === e ? fe : Be;
                  if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(h.MissingUnicodeEscape, { at: this.state.curPosition() }), s = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  let o = this.readCodePoint(true);
                  o !== null && (n(o) || this.raise(h.EscapedCharNotAnIdentifier, { at: a }), r += String.fromCodePoint(o)), s = this.state.pos;
                } else
                  break;
              }
              return r + this.input.slice(s, this.state.pos);
            }
            readWord(t) {
              let r = this.readWord1(t), e = qt.get(r);
              e !== void 0 ? this.finishToken(e, Pe(e)) : this.finishToken(130, r);
            }
            checkKeywordEscapes() {
              let { type: t } = this.state;
              Wt(t) && this.state.containsEsc && this.raise(h.InvalidEscapedReservedWord, { at: this.state.startLoc, reservedWord: Pe(t) });
            }
            raise(t, r) {
              let { at: e } = r, s = u(r, pl), i = e instanceof d ? e : e.loc.start, a = t({ loc: i, details: s });
              if (!this.options.errorRecovery)
                throw a;
              return this.isLookahead || this.state.errors.push(a), a;
            }
            raiseOverwrite(t, r) {
              let { at: e } = r, s = u(r, dl), i = e instanceof d ? e : e.loc.start, a = i.index, n = this.state.errors;
              for (let o = n.length - 1; o >= 0; o--) {
                let c = n[o];
                if (c.loc.index === a)
                  return n[o] = t({ loc: i, details: s });
                if (c.loc.index < a)
                  break;
              }
              return this.raise(t, r);
            }
            updateContext(t) {
            }
            unexpected(t, r) {
              throw this.raise(h.UnexpectedToken, { expected: r ? Pe(r) : null, at: t != null ? t : this.state.startLoc });
            }
            expectPlugin(t, r) {
              if (this.hasPlugin(t))
                return true;
              throw this.raise(h.MissingPlugin, { at: r != null ? r : this.state.startLoc, missingPlugin: [t] });
            }
            expectOnePlugin(t) {
              if (!t.some((r) => this.hasPlugin(r)))
                throw this.raise(h.MissingOneOfPlugins, { at: this.state.startLoc, missingPlugin: t });
            }
            errorBuilder(t) {
              return (r, e, s) => {
                this.raise(t, { at: Ze(r, e, s) });
              };
            }
          }, "ml"), yl = /* @__PURE__ */ __name(class {
            constructor() {
              this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
            }
          }, "yl"), xl = /* @__PURE__ */ __name(class {
            constructor(t) {
              this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = t;
            }
            current() {
              return this.stack[this.stack.length - 1];
            }
            enter() {
              this.stack.push(new yl());
            }
            exit() {
              let t = this.stack.pop(), r = this.current();
              for (let [e, s] of Array.from(t.undefinedPrivateNames))
                r ? r.undefinedPrivateNames.has(e) || r.undefinedPrivateNames.set(e, s) : this.parser.raise(h.InvalidPrivateFieldResolution, { at: s, identifierName: e });
            }
            declarePrivateName(t, r, e) {
              let { privateNames: s, loneAccessors: i, undefinedPrivateNames: a } = this.current(), n = s.has(t);
              if (r & is) {
                let o = n && i.get(t);
                if (o) {
                  let c = o & ft, p = r & ft, m = o & is, x = r & is;
                  n = m === x || c !== p, n || i.delete(t);
                } else
                  n || i.set(t, r);
              }
              n && this.parser.raise(h.PrivateNameRedeclaration, { at: e, identifierName: t }), s.add(t), a.delete(t);
            }
            usePrivateName(t, r) {
              let e;
              for (e of this.stack)
                if (e.privateNames.has(t))
                  return;
              e ? e.undefinedPrivateNames.set(t, r) : this.parser.raise(h.InvalidPrivateFieldResolution, { at: r, identifierName: t });
            }
          }, "xl"), gl = 0, Mr = 1, cs = 2, Br = 3, xt = /* @__PURE__ */ __name(class {
            constructor() {
              let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : gl;
              this.type = void 0, this.type = t;
            }
            canBeArrowParameterDeclaration() {
              return this.type === cs || this.type === Mr;
            }
            isCertainlyParameterDeclaration() {
              return this.type === Br;
            }
          }, "xt"), _r = /* @__PURE__ */ __name(class extends xt {
            constructor(t) {
              super(t), this.declarationErrors = /* @__PURE__ */ new Map();
            }
            recordDeclarationError(t, r) {
              let { at: e } = r, s = e.index;
              this.declarationErrors.set(s, [t, e]);
            }
            clearDeclarationError(t) {
              this.declarationErrors.delete(t);
            }
            iterateErrors(t) {
              this.declarationErrors.forEach(t);
            }
          }, "_r"), Pl = /* @__PURE__ */ __name(class {
            constructor(t) {
              this.parser = void 0, this.stack = [new xt()], this.parser = t;
            }
            enter(t) {
              this.stack.push(t);
            }
            exit() {
              this.stack.pop();
            }
            recordParameterInitializerError(t, r) {
              let { at: e } = r, s = { at: e.loc.start }, { stack: i } = this, a = i.length - 1, n = i[a];
              for (; !n.isCertainlyParameterDeclaration(); ) {
                if (n.canBeArrowParameterDeclaration())
                  n.recordDeclarationError(t, s);
                else
                  return;
                n = i[--a];
              }
              this.parser.raise(t, s);
            }
            recordArrowParemeterBindingError(t, r) {
              let { at: e } = r, { stack: s } = this, i = s[s.length - 1], a = { at: e.loc.start };
              if (i.isCertainlyParameterDeclaration())
                this.parser.raise(t, a);
              else if (i.canBeArrowParameterDeclaration())
                i.recordDeclarationError(t, a);
              else
                return;
            }
            recordAsyncArrowParametersError(t) {
              let { at: r } = t, { stack: e } = this, s = e.length - 1, i = e[s];
              for (; i.canBeArrowParameterDeclaration(); )
                i.type === cs && i.recordDeclarationError(h.AwaitBindingIdentifier, { at: r }), i = e[--s];
            }
            validateAsPattern() {
              let { stack: t } = this, r = t[t.length - 1];
              !r.canBeArrowParameterDeclaration() || r.iterateErrors((e) => {
                let [s, i] = e;
                this.parser.raise(s, { at: i });
                let a = t.length - 2, n = t[a];
                for (; n.canBeArrowParameterDeclaration(); )
                  n.clearDeclarationError(i.index), n = t[--a];
              });
            }
          }, "Pl");
          function Al() {
            return new xt(Br);
          }
          __name(Al, "Al");
          function Tl() {
            return new _r(Mr);
          }
          __name(Tl, "Tl");
          function vl() {
            return new _r(cs);
          }
          __name(vl, "vl");
          function Rr() {
            return new xt();
          }
          __name(Rr, "Rr");
          var qe = 0, jr = 1, gt = 2, qr = 4, Ue = 8, El = /* @__PURE__ */ __name(class {
            constructor() {
              this.stacks = [];
            }
            enter(t) {
              this.stacks.push(t);
            }
            exit() {
              this.stacks.pop();
            }
            currentFlags() {
              return this.stacks[this.stacks.length - 1];
            }
            get hasAwait() {
              return (this.currentFlags() & gt) > 0;
            }
            get hasYield() {
              return (this.currentFlags() & jr) > 0;
            }
            get hasReturn() {
              return (this.currentFlags() & qr) > 0;
            }
            get hasIn() {
              return (this.currentFlags() & Ue) > 0;
            }
          }, "El");
          function Pt(t, r) {
            return (t ? gt : 0) | (r ? jr : 0);
          }
          __name(Pt, "Pt");
          var Cl = /* @__PURE__ */ __name(class extends ml {
            addExtra(t, r, e) {
              let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
              if (!t)
                return;
              let i = t.extra = t.extra || {};
              s ? i[r] = e : Object.defineProperty(i, r, { enumerable: s, value: e });
            }
            isContextual(t) {
              return this.state.type === t && !this.state.containsEsc;
            }
            isUnparsedContextual(t, r) {
              let e = t + r.length;
              if (this.input.slice(t, e) === r) {
                let s = this.input.charCodeAt(e);
                return !(Be(s) || (s & 64512) === 55296);
              }
              return false;
            }
            isLookaheadContextual(t) {
              let r = this.nextTokenStart();
              return this.isUnparsedContextual(r, t);
            }
            eatContextual(t) {
              return this.isContextual(t) ? (this.next(), true) : false;
            }
            expectContextual(t, r) {
              if (!this.eatContextual(t))
                throw r != null ? this.raise(r, { at: this.state.startLoc }) : this.unexpected(null, t);
            }
            canInsertSemicolon() {
              return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();
            }
            hasPrecedingLineBreak() {
              return ls.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
            }
            hasFollowingLineBreak() {
              return Nr.lastIndex = this.state.end, Nr.test(this.input);
            }
            isLineTerminator() {
              return this.eat(13) || this.canInsertSemicolon();
            }
            semicolon() {
              ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true) ? this.isLineTerminator() : this.eat(13)) || this.raise(h.MissingSemicolon, { at: this.state.lastTokEndLoc });
            }
            expect(t, r) {
              this.eat(t) || this.unexpected(r, t);
            }
            tryParse(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.clone(), e = { node: null };
              try {
                let s = t(function() {
                  let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  throw e.node = i, e;
                });
                if (this.state.errors.length > r.errors.length) {
                  let i = this.state;
                  return this.state = r, this.state.tokensLength = i.tokensLength, { node: s, error: i.errors[r.errors.length], thrown: false, aborted: false, failState: i };
                }
                return { node: s, error: null, thrown: false, aborted: false, failState: null };
              } catch (s) {
                let i = this.state;
                if (this.state = r, s instanceof SyntaxError)
                  return { node: null, error: s, thrown: true, aborted: false, failState: i };
                if (s === e)
                  return { node: e.node, error: null, thrown: false, aborted: true, failState: i };
                throw s;
              }
            }
            checkExpressionErrors(t, r) {
              if (!t)
                return false;
              let { shorthandAssignLoc: e, doubleProtoLoc: s, privateKeyLoc: i, optionalParametersLoc: a } = t, n = !!e || !!s || !!a || !!i;
              if (!r)
                return n;
              e != null && this.raise(h.InvalidCoverInitializedName, { at: e }), s != null && this.raise(h.DuplicateProto, { at: s }), i != null && this.raise(h.UnexpectedPrivateField, { at: i }), a != null && this.unexpected(a);
            }
            isLiteralPropertyName() {
              return cr(this.state.type);
            }
            isPrivateName(t) {
              return t.type === "PrivateName";
            }
            getPrivateNameSV(t) {
              return t.id.name;
            }
            hasPropertyAsPrivateName(t) {
              return (t.type === "MemberExpression" || t.type === "OptionalMemberExpression") && this.isPrivateName(t.property);
            }
            isOptionalChain(t) {
              return t.type === "OptionalMemberExpression" || t.type === "OptionalCallExpression";
            }
            isObjectProperty(t) {
              return t.type === "ObjectProperty";
            }
            isObjectMethod(t) {
              return t.type === "ObjectMethod";
            }
            initializeScopes() {
              let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.sourceType === "module", r = this.state.labels;
              this.state.labels = [];
              let e = this.exportedIdentifiers;
              this.exportedIdentifiers = /* @__PURE__ */ new Set();
              let s = this.inModule;
              this.inModule = t;
              let i = this.scope, a = this.getScopeHandler();
              this.scope = new a(this, t);
              let n = this.prodParam;
              this.prodParam = new El();
              let o = this.classScope;
              this.classScope = new xl(this);
              let c = this.expressionScope;
              return this.expressionScope = new Pl(this), () => {
                this.state.labels = r, this.exportedIdentifiers = e, this.inModule = s, this.scope = i, this.prodParam = n, this.classScope = o, this.expressionScope = c;
              };
            }
            enterInitialScopes() {
              let t = qe;
              this.inModule && (t |= gt), this.scope.enter(Re), this.prodParam.enter(t);
            }
            checkDestructuringPrivate(t) {
              let { privateKeyLoc: r } = t;
              r !== null && this.expectPlugin("destructuringPrivate", r);
            }
          }, "Cl"), At = /* @__PURE__ */ __name(class {
            constructor() {
              this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
            }
          }, "At"), Tt = /* @__PURE__ */ __name(class {
            constructor(t, r, e) {
              this.type = "", this.start = r, this.end = 0, this.loc = new f(e), t != null && t.options.ranges && (this.range = [r, 0]), t != null && t.filename && (this.loc.filename = t.filename);
            }
          }, "Tt"), ps = Tt.prototype;
          ps.__clone = function() {
            let t = new Tt(void 0, this.start, this.loc.start), r = Object.keys(this);
            for (let e = 0, s = r.length; e < s; e++) {
              let i = r[e];
              i !== "leadingComments" && i !== "trailingComments" && i !== "innerComments" && (t[i] = this[i]);
            }
            return t;
          };
          function bl(t) {
            return xe(t);
          }
          __name(bl, "bl");
          function xe(t) {
            let { type: r, start: e, end: s, loc: i, range: a, extra: n, name: o } = t, c = Object.create(ps);
            return c.type = r, c.start = e, c.end = s, c.loc = i, c.range = a, c.extra = n, c.name = o, r === "Placeholder" && (c.expectedNode = t.expectedNode), c;
          }
          __name(xe, "xe");
          function Sl(t) {
            let { type: r, start: e, end: s, loc: i, range: a, extra: n } = t;
            if (r === "Placeholder")
              return bl(t);
            let o = Object.create(ps);
            return o.type = r, o.start = e, o.end = s, o.loc = i, o.range = a, t.raw !== void 0 ? o.raw = t.raw : o.extra = n, o.value = t.value, o;
          }
          __name(Sl, "Sl");
          var wl = /* @__PURE__ */ __name(class extends Cl {
            startNode() {
              return new Tt(this, this.state.start, this.state.startLoc);
            }
            startNodeAt(t) {
              return new Tt(this, t.index, t);
            }
            startNodeAtNode(t) {
              return this.startNodeAt(t.loc.start);
            }
            finishNode(t, r) {
              return this.finishNodeAt(t, r, this.state.lastTokEndLoc);
            }
            finishNodeAt(t, r, e) {
              return t.type = r, t.end = e.index, t.loc.end = e, this.options.ranges && (t.range[1] = e.index), this.options.attachComment && this.processComment(t), t;
            }
            resetStartLocation(t, r) {
              t.start = r.index, t.loc.start = r, this.options.ranges && (t.range[0] = r.index);
            }
            resetEndLocation(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.state.lastTokEndLoc;
              t.end = r.index, t.loc.end = r, this.options.ranges && (t.range[1] = r.index);
            }
            resetStartLocationFromNode(t, r) {
              this.resetStartLocation(t, r.loc.start);
            }
          }, "wl"), Il = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), D = _`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: (t) => {
            let { reservedType: r } = t;
            return `Cannot overwrite reserved type ${r}.`;
          }, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: (t) => {
            let { memberName: r, enumName: e } = t;
            return `Boolean enum members need to be initialized. Use either \`${r} = true,\` or \`${r} = false,\` in enum \`${e}\`.`;
          }, EnumDuplicateMemberName: (t) => {
            let { memberName: r, enumName: e } = t;
            return `Enum member names need to be unique, but the name \`${r}\` has already been used before in enum \`${e}\`.`;
          }, EnumInconsistentMemberValues: (t) => {
            let { enumName: r } = t;
            return `Enum \`${r}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`;
          }, EnumInvalidExplicitType: (t) => {
            let { invalidEnumType: r, enumName: e } = t;
            return `Enum type \`${r}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${e}\`.`;
          }, EnumInvalidExplicitTypeUnknownSupplied: (t) => {
            let { enumName: r } = t;
            return `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${r}\`.`;
          }, EnumInvalidMemberInitializerPrimaryType: (t) => {
            let { enumName: r, memberName: e, explicitType: s } = t;
            return `Enum \`${r}\` has type \`${s}\`, so the initializer of \`${e}\` needs to be a ${s} literal.`;
          }, EnumInvalidMemberInitializerSymbolType: (t) => {
            let { enumName: r, memberName: e } = t;
            return `Symbol enum members cannot be initialized. Use \`${e},\` in enum \`${r}\`.`;
          }, EnumInvalidMemberInitializerUnknownType: (t) => {
            let { enumName: r, memberName: e } = t;
            return `The enum member initializer for \`${e}\` needs to be a literal (either a boolean, number, or string) in enum \`${r}\`.`;
          }, EnumInvalidMemberName: (t) => {
            let { enumName: r, memberName: e, suggestion: s } = t;
            return `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${e}\`, consider using \`${s}\`, in enum \`${r}\`.`;
          }, EnumNumberMemberNotInitialized: (t) => {
            let { enumName: r, memberName: e } = t;
            return `Number enum members need to be initialized, e.g. \`${e} = 1\` in enum \`${r}\`.`;
          }, EnumStringMemberInconsistentlyInitailized: (t) => {
            let { enumName: r } = t;
            return `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${r}\`.`;
          }, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: (t) => {
            let { reservedType: r } = t;
            return `Unexpected reserved type ${r}.`;
          }, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: (t) => {
            let { unsupportedExportKind: r, suggestion: e } = t;
            return `\`declare export ${r}\` is not supported. Use \`${e}\` instead.`;
          }, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
          function Nl(t) {
            return t.type === "DeclareExportAllDeclaration" || t.type === "DeclareExportDeclaration" && (!t.declaration || t.declaration.type !== "TypeAlias" && t.declaration.type !== "InterfaceDeclaration");
          }
          __name(Nl, "Nl");
          function ds(t) {
            return t.importKind === "type" || t.importKind === "typeof";
          }
          __name(ds, "ds");
          function Ur(t) {
            return pe(t) && t !== 97;
          }
          __name(Ur, "Ur");
          var kl = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
          function Dl(t, r) {
            let e = [], s = [];
            for (let i = 0; i < t.length; i++)
              (r(t[i], i, t) ? e : s).push(t[i]);
            return [e, s];
          }
          __name(Dl, "Dl");
          var Fl = /\*?\s*@((?:no)?flow)\b/, Ll = /* @__PURE__ */ __name((t) => class extends t {
            constructor() {
              super(...arguments), this.flowPragma = void 0;
            }
            getScopeHandler() {
              return rl;
            }
            shouldParseTypes() {
              return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
            }
            shouldParseEnums() {
              return !!this.getPluginOption("flow", "enums");
            }
            finishToken(e, s) {
              return e !== 131 && e !== 13 && e !== 28 && this.flowPragma === void 0 && (this.flowPragma = null), super.finishToken(e, s);
            }
            addComment(e) {
              if (this.flowPragma === void 0) {
                let s = Fl.exec(e.value);
                if (s)
                  if (s[1] === "flow")
                    this.flowPragma = "flow";
                  else if (s[1] === "noflow")
                    this.flowPragma = "noflow";
                  else
                    throw new Error("Unexpected flow pragma");
              }
              return super.addComment(e);
            }
            flowParseTypeInitialiser(e) {
              let s = this.state.inType;
              this.state.inType = true, this.expect(e || 14);
              let i = this.flowParseType();
              return this.state.inType = s, i;
            }
            flowParsePredicate() {
              let e = this.startNode(), s = this.state.startLoc;
              return this.next(), this.expectContextual(108), this.state.lastTokStart > s.index + 1 && this.raise(D.UnexpectedSpaceBetweenModuloChecks, { at: s }), this.eat(10) ? (e.value = super.parseExpression(), this.expect(11), this.finishNode(e, "DeclaredPredicate")) : this.finishNode(e, "InferredPredicate");
            }
            flowParseTypeAndPredicateInitialiser() {
              let e = this.state.inType;
              this.state.inType = true, this.expect(14);
              let s = null, i = null;
              return this.match(54) ? (this.state.inType = e, i = this.flowParsePredicate()) : (s = this.flowParseType(), this.state.inType = e, this.match(54) && (i = this.flowParsePredicate())), [s, i];
            }
            flowParseDeclareClass(e) {
              return this.next(), this.flowParseInterfaceish(e, true), this.finishNode(e, "DeclareClass");
            }
            flowParseDeclareFunction(e) {
              this.next();
              let s = e.id = this.parseIdentifier(), i = this.startNode(), a = this.startNode();
              this.match(47) ? i.typeParameters = this.flowParseTypeParameterDeclaration() : i.typeParameters = null, this.expect(10);
              let n = this.flowParseFunctionTypeParams();
              return i.params = n.params, i.rest = n.rest, i.this = n._this, this.expect(11), [i.returnType, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), a.typeAnnotation = this.finishNode(i, "FunctionTypeAnnotation"), s.typeAnnotation = this.finishNode(a, "TypeAnnotation"), this.resetEndLocation(s), this.semicolon(), this.scope.declareName(e.id.name, Yo, e.id.loc.start), this.finishNode(e, "DeclareFunction");
            }
            flowParseDeclare(e, s) {
              if (this.match(80))
                return this.flowParseDeclareClass(e);
              if (this.match(68))
                return this.flowParseDeclareFunction(e);
              if (this.match(74))
                return this.flowParseDeclareVariable(e);
              if (this.eatContextual(125))
                return this.match(16) ? this.flowParseDeclareModuleExports(e) : (s && this.raise(D.NestedDeclareModule, { at: this.state.lastTokStartLoc }), this.flowParseDeclareModule(e));
              if (this.isContextual(128))
                return this.flowParseDeclareTypeAlias(e);
              if (this.isContextual(129))
                return this.flowParseDeclareOpaqueType(e);
              if (this.isContextual(127))
                return this.flowParseDeclareInterface(e);
              if (this.match(82))
                return this.flowParseDeclareExportDeclaration(e, s);
              throw this.unexpected();
            }
            flowParseDeclareVariable(e) {
              return this.next(), e.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(e.id.name, dt, e.id.loc.start), this.semicolon(), this.finishNode(e, "DeclareVariable");
            }
            flowParseDeclareModule(e) {
              this.scope.enter(_e), this.match(131) ? e.id = super.parseExprAtom() : e.id = this.parseIdentifier();
              let s = e.body = this.startNode(), i = s.body = [];
              for (this.expect(5); !this.match(8); ) {
                let o = this.startNode();
                this.match(83) ? (this.next(), !this.isContextual(128) && !this.match(87) && this.raise(D.InvalidNonTypeImportInDeclareModule, { at: this.state.lastTokStartLoc }), super.parseImport(o)) : (this.expectContextual(123, D.UnsupportedStatementInDeclareModule), o = this.flowParseDeclare(o, true)), i.push(o);
              }
              this.scope.exit(), this.expect(8), this.finishNode(s, "BlockStatement");
              let a = null, n = false;
              return i.forEach((o) => {
                Nl(o) ? (a === "CommonJS" && this.raise(D.AmbiguousDeclareModuleKind, { at: o }), a = "ES") : o.type === "DeclareModuleExports" && (n && this.raise(D.DuplicateDeclareModuleExports, { at: o }), a === "ES" && this.raise(D.AmbiguousDeclareModuleKind, { at: o }), a = "CommonJS", n = true);
              }), e.kind = a || "CommonJS", this.finishNode(e, "DeclareModule");
            }
            flowParseDeclareExportDeclaration(e, s) {
              if (this.expect(82), this.eat(65))
                return this.match(68) || this.match(80) ? e.declaration = this.flowParseDeclare(this.startNode()) : (e.declaration = this.flowParseType(), this.semicolon()), e.default = true, this.finishNode(e, "DeclareExportDeclaration");
              if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !s) {
                let i = this.state.value;
                throw this.raise(D.UnsupportedDeclareExportKind, { at: this.state.startLoc, unsupportedExportKind: i, suggestion: kl[i] });
              }
              if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129))
                return e.declaration = this.flowParseDeclare(this.startNode()), e.default = false, this.finishNode(e, "DeclareExportDeclaration");
              if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129))
                return e = this.parseExport(e, null), e.type === "ExportNamedDeclaration" && (e.type = "ExportDeclaration", e.default = false, delete e.exportKind), e.type = "Declare" + e.type, e;
              throw this.unexpected();
            }
            flowParseDeclareModuleExports(e) {
              return this.next(), this.expectContextual(109), e.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(e, "DeclareModuleExports");
            }
            flowParseDeclareTypeAlias(e) {
              this.next();
              let s = this.flowParseTypeAlias(e);
              return s.type = "DeclareTypeAlias", s;
            }
            flowParseDeclareOpaqueType(e) {
              this.next();
              let s = this.flowParseOpaqueType(e, true);
              return s.type = "DeclareOpaqueType", s;
            }
            flowParseDeclareInterface(e) {
              return this.next(), this.flowParseInterfaceish(e), this.finishNode(e, "DeclareInterface");
            }
            flowParseInterfaceish(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (e.id = this.flowParseRestrictedIdentifier(!s, true), this.scope.declareName(e.id.name, s ? Cr : Ie, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.extends = [], e.implements = [], e.mixins = [], this.eat(81))
                do
                  e.extends.push(this.flowParseInterfaceExtends());
                while (!s && this.eat(12));
              if (this.isContextual(115)) {
                this.next();
                do
                  e.mixins.push(this.flowParseInterfaceExtends());
                while (this.eat(12));
              }
              if (this.isContextual(111)) {
                this.next();
                do
                  e.implements.push(this.flowParseInterfaceExtends());
                while (this.eat(12));
              }
              e.body = this.flowParseObjectType({ allowStatic: s, allowExact: false, allowSpread: false, allowProto: s, allowInexact: false });
            }
            flowParseInterfaceExtends() {
              let e = this.startNode();
              return e.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? e.typeParameters = this.flowParseTypeParameterInstantiation() : e.typeParameters = null, this.finishNode(e, "InterfaceExtends");
            }
            flowParseInterface(e) {
              return this.flowParseInterfaceish(e), this.finishNode(e, "InterfaceDeclaration");
            }
            checkNotUnderscore(e) {
              e === "_" && this.raise(D.UnexpectedReservedUnderscore, { at: this.state.startLoc });
            }
            checkReservedType(e, s, i) {
              !Il.has(e) || this.raise(i ? D.AssignReservedType : D.UnexpectedReservedType, { at: s, reservedType: e });
            }
            flowParseRestrictedIdentifier(e, s) {
              return this.checkReservedType(this.state.value, this.state.startLoc, s), this.parseIdentifier(e);
            }
            flowParseTypeAlias(e) {
              return e.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(e.id.name, Ie, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(e, "TypeAlias");
            }
            flowParseOpaqueType(e, s) {
              return this.expectContextual(128), e.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(e.id.name, Ie, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.supertype = null, this.match(14) && (e.supertype = this.flowParseTypeInitialiser(14)), e.impltype = null, s || (e.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(e, "OpaqueType");
            }
            flowParseTypeParameter() {
              let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, s = this.state.startLoc, i = this.startNode(), a = this.flowParseVariance(), n = this.flowParseTypeAnnotatableIdentifier();
              return i.name = n.name, i.variance = a, i.bound = n.typeAnnotation, this.match(29) ? (this.eat(29), i.default = this.flowParseType()) : e && this.raise(D.MissingTypeParamDefault, { at: s }), this.finishNode(i, "TypeParameter");
            }
            flowParseTypeParameterDeclaration() {
              let e = this.state.inType, s = this.startNode();
              s.params = [], this.state.inType = true, this.match(47) || this.match(140) ? this.next() : this.unexpected();
              let i = false;
              do {
                let a = this.flowParseTypeParameter(i);
                s.params.push(a), a.default && (i = true), this.match(48) || this.expect(12);
              } while (!this.match(48));
              return this.expect(48), this.state.inType = e, this.finishNode(s, "TypeParameterDeclaration");
            }
            flowParseTypeParameterInstantiation() {
              let e = this.startNode(), s = this.state.inType;
              e.params = [], this.state.inType = true, this.expect(47);
              let i = this.state.noAnonFunctionType;
              for (this.state.noAnonFunctionType = false; !this.match(48); )
                e.params.push(this.flowParseType()), this.match(48) || this.expect(12);
              return this.state.noAnonFunctionType = i, this.expect(48), this.state.inType = s, this.finishNode(e, "TypeParameterInstantiation");
            }
            flowParseTypeParameterInstantiationCallOrNew() {
              let e = this.startNode(), s = this.state.inType;
              for (e.params = [], this.state.inType = true, this.expect(47); !this.match(48); )
                e.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
              return this.expect(48), this.state.inType = s, this.finishNode(e, "TypeParameterInstantiation");
            }
            flowParseInterfaceType() {
              let e = this.startNode();
              if (this.expectContextual(127), e.extends = [], this.eat(81))
                do
                  e.extends.push(this.flowParseInterfaceExtends());
                while (this.eat(12));
              return e.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(e, "InterfaceTypeAnnotation");
            }
            flowParseObjectPropertyKey() {
              return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);
            }
            flowParseObjectTypeIndexer(e, s, i) {
              return e.static = s, this.lookahead().type === 14 ? (e.id = this.flowParseObjectPropertyKey(), e.key = this.flowParseTypeInitialiser()) : (e.id = null, e.key = this.flowParseType()), this.expect(3), e.value = this.flowParseTypeInitialiser(), e.variance = i, this.finishNode(e, "ObjectTypeIndexer");
            }
            flowParseObjectTypeInternalSlot(e, s) {
              return e.static = s, e.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (e.method = true, e.optional = false, e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start))) : (e.method = false, this.eat(17) && (e.optional = true), e.value = this.flowParseTypeInitialiser()), this.finishNode(e, "ObjectTypeInternalSlot");
            }
            flowParseObjectTypeMethodish(e) {
              for (e.params = [], e.rest = null, e.typeParameters = null, e.this = null, this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (e.this = this.flowParseFunctionTypeParam(true), e.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
                e.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
              return this.eat(21) && (e.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), e.returnType = this.flowParseTypeInitialiser(), this.finishNode(e, "FunctionTypeAnnotation");
            }
            flowParseObjectTypeCallProperty(e, s) {
              let i = this.startNode();
              return e.static = s, e.value = this.flowParseObjectTypeMethodish(i), this.finishNode(e, "ObjectTypeCallProperty");
            }
            flowParseObjectType(e) {
              let { allowStatic: s, allowExact: i, allowSpread: a, allowProto: n, allowInexact: o } = e, c = this.state.inType;
              this.state.inType = true;
              let p = this.startNode();
              p.callProperties = [], p.properties = [], p.indexers = [], p.internalSlots = [];
              let m, x, P = false;
              for (i && this.match(6) ? (this.expect(6), m = 9, x = true) : (this.expect(5), m = 8, x = false), p.exact = x; !this.match(m); ) {
                let O = false, R = null, Q = null, Z = this.startNode();
                if (n && this.isContextual(116)) {
                  let re = this.lookahead();
                  re.type !== 14 && re.type !== 17 && (this.next(), R = this.state.startLoc, s = false);
                }
                if (s && this.isContextual(104)) {
                  let re = this.lookahead();
                  re.type !== 14 && re.type !== 17 && (this.next(), O = true);
                }
                let X = this.flowParseVariance();
                if (this.eat(0))
                  R != null && this.unexpected(R), this.eat(0) ? (X && this.unexpected(X.loc.start), p.internalSlots.push(this.flowParseObjectTypeInternalSlot(Z, O))) : p.indexers.push(this.flowParseObjectTypeIndexer(Z, O, X));
                else if (this.match(10) || this.match(47))
                  R != null && this.unexpected(R), X && this.unexpected(X.loc.start), p.callProperties.push(this.flowParseObjectTypeCallProperty(Z, O));
                else {
                  let re = "init";
                  if (this.isContextual(98) || this.isContextual(103)) {
                    let hh = this.lookahead();
                    cr(hh.type) && (re = this.state.value, this.next());
                  }
                  let $e = this.flowParseObjectTypeProperty(Z, O, R, X, re, a, o != null ? o : !x);
                  $e === null ? (P = true, Q = this.state.lastTokStartLoc) : p.properties.push($e);
                }
                this.flowObjectTypeSemicolon(), Q && !this.match(8) && !this.match(9) && this.raise(D.UnexpectedExplicitInexactInObject, { at: Q });
              }
              this.expect(m), a && (p.inexact = P);
              let b = this.finishNode(p, "ObjectTypeAnnotation");
              return this.state.inType = c, b;
            }
            flowParseObjectTypeProperty(e, s, i, a, n, o, c) {
              if (this.eat(21))
                return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (o ? c || this.raise(D.InexactInsideExact, { at: this.state.lastTokStartLoc }) : this.raise(D.InexactInsideNonObject, { at: this.state.lastTokStartLoc }), a && this.raise(D.InexactVariance, { at: a }), null) : (o || this.raise(D.UnexpectedSpreadType, { at: this.state.lastTokStartLoc }), i != null && this.unexpected(i), a && this.raise(D.SpreadVariance, { at: a }), e.argument = this.flowParseType(), this.finishNode(e, "ObjectTypeSpreadProperty"));
              {
                e.key = this.flowParseObjectPropertyKey(), e.static = s, e.proto = i != null, e.kind = n;
                let p = false;
                return this.match(47) || this.match(10) ? (e.method = true, i != null && this.unexpected(i), a && this.unexpected(a.loc.start), e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start)), (n === "get" || n === "set") && this.flowCheckGetterSetterParams(e), !o && e.key.name === "constructor" && e.value.this && this.raise(D.ThisParamBannedInConstructor, { at: e.value.this })) : (n !== "init" && this.unexpected(), e.method = false, this.eat(17) && (p = true), e.value = this.flowParseTypeInitialiser(), e.variance = a), e.optional = p, this.finishNode(e, "ObjectTypeProperty");
              }
            }
            flowCheckGetterSetterParams(e) {
              let s = e.kind === "get" ? 0 : 1, i = e.value.params.length + (e.value.rest ? 1 : 0);
              e.value.this && this.raise(e.kind === "get" ? D.GetterMayNotHaveThisParam : D.SetterMayNotHaveThisParam, { at: e.value.this }), i !== s && this.raise(e.kind === "get" ? h.BadGetterArity : h.BadSetterArity, { at: e }), e.kind === "set" && e.value.rest && this.raise(h.BadSetterRestParameter, { at: e });
            }
            flowObjectTypeSemicolon() {
              !this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9) && this.unexpected();
            }
            flowParseQualifiedTypeIdentifier(e, s) {
              var i;
              (i = e) != null || (e = this.state.startLoc);
              let a = s || this.flowParseRestrictedIdentifier(true);
              for (; this.eat(16); ) {
                let n = this.startNodeAt(e);
                n.qualification = a, n.id = this.flowParseRestrictedIdentifier(true), a = this.finishNode(n, "QualifiedTypeIdentifier");
              }
              return a;
            }
            flowParseGenericType(e, s) {
              let i = this.startNodeAt(e);
              return i.typeParameters = null, i.id = this.flowParseQualifiedTypeIdentifier(e, s), this.match(47) && (i.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(i, "GenericTypeAnnotation");
            }
            flowParseTypeofType() {
              let e = this.startNode();
              return this.expect(87), e.argument = this.flowParsePrimaryType(), this.finishNode(e, "TypeofTypeAnnotation");
            }
            flowParseTupleType() {
              let e = this.startNode();
              for (e.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (e.types.push(this.flowParseType()), !this.match(3)); )
                this.expect(12);
              return this.expect(3), this.finishNode(e, "TupleTypeAnnotation");
            }
            flowParseFunctionTypeParam(e) {
              let s = null, i = false, a = null, n = this.startNode(), o = this.lookahead(), c = this.state.type === 78;
              return o.type === 14 || o.type === 17 ? (c && !e && this.raise(D.ThisParamMustBeFirst, { at: n }), s = this.parseIdentifier(c), this.eat(17) && (i = true, c && this.raise(D.ThisParamMayNotBeOptional, { at: n })), a = this.flowParseTypeInitialiser()) : a = this.flowParseType(), n.name = s, n.optional = i, n.typeAnnotation = a, this.finishNode(n, "FunctionTypeParam");
            }
            reinterpretTypeAsFunctionTypeParam(e) {
              let s = this.startNodeAt(e.loc.start);
              return s.name = null, s.optional = false, s.typeAnnotation = e, this.finishNode(s, "FunctionTypeParam");
            }
            flowParseFunctionTypeParams() {
              let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], s = null, i = null;
              for (this.match(78) && (i = this.flowParseFunctionTypeParam(true), i.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
                e.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
              return this.eat(21) && (s = this.flowParseFunctionTypeParam(false)), { params: e, rest: s, _this: i };
            }
            flowIdentToTypeAnnotation(e, s, i) {
              switch (i.name) {
                case "any":
                  return this.finishNode(s, "AnyTypeAnnotation");
                case "bool":
                case "boolean":
                  return this.finishNode(s, "BooleanTypeAnnotation");
                case "mixed":
                  return this.finishNode(s, "MixedTypeAnnotation");
                case "empty":
                  return this.finishNode(s, "EmptyTypeAnnotation");
                case "number":
                  return this.finishNode(s, "NumberTypeAnnotation");
                case "string":
                  return this.finishNode(s, "StringTypeAnnotation");
                case "symbol":
                  return this.finishNode(s, "SymbolTypeAnnotation");
                default:
                  return this.checkNotUnderscore(i.name), this.flowParseGenericType(e, i);
              }
            }
            flowParsePrimaryType() {
              let e = this.state.startLoc, s = this.startNode(), i, a, n = false, o = this.state.noAnonFunctionType;
              switch (this.state.type) {
                case 5:
                  return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
                case 6:
                  return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
                case 0:
                  return this.state.noAnonFunctionType = false, a = this.flowParseTupleType(), this.state.noAnonFunctionType = o, a;
                case 47:
                  return s.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), i = this.flowParseFunctionTypeParams(), s.params = i.params, s.rest = i.rest, s.this = i._this, this.expect(11), this.expect(19), s.returnType = this.flowParseType(), this.finishNode(s, "FunctionTypeAnnotation");
                case 10:
                  if (this.next(), !this.match(11) && !this.match(21))
                    if ($(this.state.type) || this.match(78)) {
                      let c = this.lookahead().type;
                      n = c !== 17 && c !== 14;
                    } else
                      n = true;
                  if (n) {
                    if (this.state.noAnonFunctionType = false, a = this.flowParseType(), this.state.noAnonFunctionType = o, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19))
                      return this.expect(11), a;
                    this.eat(12);
                  }
                  return a ? i = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(a)]) : i = this.flowParseFunctionTypeParams(), s.params = i.params, s.rest = i.rest, s.this = i._this, this.expect(11), this.expect(19), s.returnType = this.flowParseType(), s.typeParameters = null, this.finishNode(s, "FunctionTypeAnnotation");
                case 131:
                  return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
                case 85:
                case 86:
                  return s.value = this.match(85), this.next(), this.finishNode(s, "BooleanLiteralTypeAnnotation");
                case 53:
                  if (this.state.value === "-") {
                    if (this.next(), this.match(132))
                      return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", s);
                    if (this.match(133))
                      return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", s);
                    throw this.raise(D.UnexpectedSubtractionOperand, { at: this.state.startLoc });
                  }
                  throw this.unexpected();
                case 132:
                  return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
                case 133:
                  return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
                case 88:
                  return this.next(), this.finishNode(s, "VoidTypeAnnotation");
                case 84:
                  return this.next(), this.finishNode(s, "NullLiteralTypeAnnotation");
                case 78:
                  return this.next(), this.finishNode(s, "ThisTypeAnnotation");
                case 55:
                  return this.next(), this.finishNode(s, "ExistsTypeAnnotation");
                case 87:
                  return this.flowParseTypeofType();
                default:
                  if (Wt(this.state.type)) {
                    let c = Pe(this.state.type);
                    return this.next(), super.createIdentifier(s, c);
                  } else if ($(this.state.type))
                    return this.isContextual(127) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(e, s, this.parseIdentifier());
              }
              throw this.unexpected();
            }
            flowParsePostfixType() {
              let e = this.state.startLoc, s = this.flowParsePrimaryType(), i = false;
              for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
                let a = this.startNodeAt(e), n = this.eat(18);
                i = i || n, this.expect(0), !n && this.match(3) ? (a.elementType = s, this.next(), s = this.finishNode(a, "ArrayTypeAnnotation")) : (a.objectType = s, a.indexType = this.flowParseType(), this.expect(3), i ? (a.optional = n, s = this.finishNode(a, "OptionalIndexedAccessType")) : s = this.finishNode(a, "IndexedAccessType"));
              }
              return s;
            }
            flowParsePrefixType() {
              let e = this.startNode();
              return this.eat(17) ? (e.typeAnnotation = this.flowParsePrefixType(), this.finishNode(e, "NullableTypeAnnotation")) : this.flowParsePostfixType();
            }
            flowParseAnonFunctionWithoutParens() {
              let e = this.flowParsePrefixType();
              if (!this.state.noAnonFunctionType && this.eat(19)) {
                let s = this.startNodeAt(e.loc.start);
                return s.params = [this.reinterpretTypeAsFunctionTypeParam(e)], s.rest = null, s.this = null, s.returnType = this.flowParseType(), s.typeParameters = null, this.finishNode(s, "FunctionTypeAnnotation");
              }
              return e;
            }
            flowParseIntersectionType() {
              let e = this.startNode();
              this.eat(45);
              let s = this.flowParseAnonFunctionWithoutParens();
              for (e.types = [s]; this.eat(45); )
                e.types.push(this.flowParseAnonFunctionWithoutParens());
              return e.types.length === 1 ? s : this.finishNode(e, "IntersectionTypeAnnotation");
            }
            flowParseUnionType() {
              let e = this.startNode();
              this.eat(43);
              let s = this.flowParseIntersectionType();
              for (e.types = [s]; this.eat(43); )
                e.types.push(this.flowParseIntersectionType());
              return e.types.length === 1 ? s : this.finishNode(e, "UnionTypeAnnotation");
            }
            flowParseType() {
              let e = this.state.inType;
              this.state.inType = true;
              let s = this.flowParseUnionType();
              return this.state.inType = e, s;
            }
            flowParseTypeOrImplicitInstantiation() {
              if (this.state.type === 130 && this.state.value === "_") {
                let e = this.state.startLoc, s = this.parseIdentifier();
                return this.flowParseGenericType(e, s);
              } else
                return this.flowParseType();
            }
            flowParseTypeAnnotation() {
              let e = this.startNode();
              return e.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(e, "TypeAnnotation");
            }
            flowParseTypeAnnotatableIdentifier(e) {
              let s = e ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
              return this.match(14) && (s.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(s)), s;
            }
            typeCastToParameter(e) {
              return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
            }
            flowParseVariance() {
              let e = null;
              return this.match(53) ? (e = this.startNode(), this.state.value === "+" ? e.kind = "plus" : e.kind = "minus", this.next(), this.finishNode(e, "Variance")) : e;
            }
            parseFunctionBody(e, s) {
              let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              return s ? this.forwardNoArrowParamsConversionAt(e, () => super.parseFunctionBody(e, true, i)) : super.parseFunctionBody(e, false, i);
            }
            parseFunctionBodyAndFinish(e, s) {
              let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              if (this.match(14)) {
                let a = this.startNode();
                [a.typeAnnotation, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), e.returnType = a.typeAnnotation ? this.finishNode(a, "TypeAnnotation") : null;
              }
              return super.parseFunctionBodyAndFinish(e, s, i);
            }
            parseStatement(e, s) {
              if (this.state.strict && this.isContextual(127)) {
                let a = this.lookahead();
                if (pe(a.type)) {
                  let n = this.startNode();
                  return this.next(), this.flowParseInterface(n);
                }
              } else if (this.shouldParseEnums() && this.isContextual(124)) {
                let a = this.startNode();
                return this.next(), this.flowParseEnumDeclaration(a);
              }
              let i = super.parseStatement(e, s);
              return this.flowPragma === void 0 && !this.isValidDirective(i) && (this.flowPragma = null), i;
            }
            parseExpressionStatement(e, s, i) {
              if (s.type === "Identifier") {
                if (s.name === "declare") {
                  if (this.match(80) || $(this.state.type) || this.match(68) || this.match(74) || this.match(82))
                    return this.flowParseDeclare(e);
                } else if ($(this.state.type)) {
                  if (s.name === "interface")
                    return this.flowParseInterface(e);
                  if (s.name === "type")
                    return this.flowParseTypeAlias(e);
                  if (s.name === "opaque")
                    return this.flowParseOpaqueType(e, false);
                }
              }
              return super.parseExpressionStatement(e, s, i);
            }
            shouldParseExportDeclaration() {
              let { type: e } = this.state;
              return pr(e) || this.shouldParseEnums() && e === 124 ? !this.state.containsEsc : super.shouldParseExportDeclaration();
            }
            isExportDefaultSpecifier() {
              let { type: e } = this.state;
              return pr(e) || this.shouldParseEnums() && e === 124 ? this.state.containsEsc : super.isExportDefaultSpecifier();
            }
            parseExportDefaultExpression() {
              if (this.shouldParseEnums() && this.isContextual(124)) {
                let e = this.startNode();
                return this.next(), this.flowParseEnumDeclaration(e);
              }
              return super.parseExportDefaultExpression();
            }
            parseConditional(e, s, i) {
              if (!this.match(17))
                return e;
              if (this.state.maybeInArrowParameters) {
                let P = this.lookaheadCharCode();
                if (P === 44 || P === 61 || P === 58 || P === 41)
                  return this.setOptionalParametersError(i), e;
              }
              this.expect(17);
              let a = this.state.clone(), n = this.state.noArrowAt, o = this.startNodeAt(s), { consequent: c, failed: p } = this.tryParseConditionalConsequent(), [m, x] = this.getArrowLikeExpressions(c);
              if (p || x.length > 0) {
                let P = [...n];
                if (x.length > 0) {
                  this.state = a, this.state.noArrowAt = P;
                  for (let b = 0; b < x.length; b++)
                    P.push(x[b].start);
                  ({ consequent: c, failed: p } = this.tryParseConditionalConsequent()), [m, x] = this.getArrowLikeExpressions(c);
                }
                p && m.length > 1 && this.raise(D.AmbiguousConditionalArrow, { at: a.startLoc }), p && m.length === 1 && (this.state = a, P.push(m[0].start), this.state.noArrowAt = P, { consequent: c, failed: p } = this.tryParseConditionalConsequent());
              }
              return this.getArrowLikeExpressions(c, true), this.state.noArrowAt = n, this.expect(14), o.test = e, o.consequent = c, o.alternate = this.forwardNoArrowParamsConversionAt(o, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(o, "ConditionalExpression");
            }
            tryParseConditionalConsequent() {
              this.state.noArrowParamsConversionAt.push(this.state.start);
              let e = this.parseMaybeAssignAllowIn(), s = !this.match(14);
              return this.state.noArrowParamsConversionAt.pop(), { consequent: e, failed: s };
            }
            getArrowLikeExpressions(e, s) {
              let i = [e], a = [];
              for (; i.length !== 0; ) {
                let n = i.pop();
                n.type === "ArrowFunctionExpression" ? (n.typeParameters || !n.returnType ? this.finishArrowValidation(n) : a.push(n), i.push(n.body)) : n.type === "ConditionalExpression" && (i.push(n.consequent), i.push(n.alternate));
              }
              return s ? (a.forEach((n) => this.finishArrowValidation(n)), [a, []]) : Dl(a, (n) => n.params.every((o) => this.isAssignable(o, true)));
            }
            finishArrowValidation(e) {
              var s;
              this.toAssignableList(e.params, (s = e.extra) == null ? void 0 : s.trailingCommaLoc, false), this.scope.enter(me | Yt), super.checkParams(e, false, true), this.scope.exit();
            }
            forwardNoArrowParamsConversionAt(e, s) {
              let i;
              return this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1 ? (this.state.noArrowParamsConversionAt.push(this.state.start), i = s(), this.state.noArrowParamsConversionAt.pop()) : i = s(), i;
            }
            parseParenItem(e, s) {
              if (e = super.parseParenItem(e, s), this.eat(17) && (e.optional = true, this.resetEndLocation(e)), this.match(14)) {
                let i = this.startNodeAt(s);
                return i.expression = e, i.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(i, "TypeCastExpression");
              }
              return e;
            }
            assertModuleNodeAllowed(e) {
              e.type === "ImportDeclaration" && (e.importKind === "type" || e.importKind === "typeof") || e.type === "ExportNamedDeclaration" && e.exportKind === "type" || e.type === "ExportAllDeclaration" && e.exportKind === "type" || super.assertModuleNodeAllowed(e);
            }
            parseExport(e, s) {
              let i = super.parseExport(e, s);
              return (i.type === "ExportNamedDeclaration" || i.type === "ExportAllDeclaration") && (i.exportKind = i.exportKind || "value"), i;
            }
            parseExportDeclaration(e) {
              if (this.isContextual(128)) {
                e.exportKind = "type";
                let s = this.startNode();
                return this.next(), this.match(5) ? (e.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(e), null) : this.flowParseTypeAlias(s);
              } else if (this.isContextual(129)) {
                e.exportKind = "type";
                let s = this.startNode();
                return this.next(), this.flowParseOpaqueType(s, false);
              } else if (this.isContextual(127)) {
                e.exportKind = "type";
                let s = this.startNode();
                return this.next(), this.flowParseInterface(s);
              } else if (this.shouldParseEnums() && this.isContextual(124)) {
                e.exportKind = "value";
                let s = this.startNode();
                return this.next(), this.flowParseEnumDeclaration(s);
              } else
                return super.parseExportDeclaration(e);
            }
            eatExportStar(e) {
              return super.eatExportStar(e) ? true : this.isContextual(128) && this.lookahead().type === 55 ? (e.exportKind = "type", this.next(), this.next(), true) : false;
            }
            maybeParseExportNamespaceSpecifier(e) {
              let { startLoc: s } = this.state, i = super.maybeParseExportNamespaceSpecifier(e);
              return i && e.exportKind === "type" && this.unexpected(s), i;
            }
            parseClassId(e, s, i) {
              super.parseClassId(e, s, i), this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration());
            }
            parseClassMember(e, s, i) {
              let { startLoc: a } = this.state;
              if (this.isContextual(123)) {
                if (super.parseClassMemberFromModifier(e, s))
                  return;
                s.declare = true;
              }
              super.parseClassMember(e, s, i), s.declare && (s.type !== "ClassProperty" && s.type !== "ClassPrivateProperty" && s.type !== "PropertyDefinition" ? this.raise(D.DeclareClassElement, { at: a }) : s.value && this.raise(D.DeclareClassFieldInitializer, { at: s.value }));
            }
            isIterator(e) {
              return e === "iterator" || e === "asyncIterator";
            }
            readIterator() {
              let e = super.readWord1(), s = "@@" + e;
              (!this.isIterator(e) || !this.state.inType) && this.raise(h.InvalidIdentifier, { at: this.state.curPosition(), identifierName: s }), this.finishToken(130, s);
            }
            getTokenFromCode(e) {
              let s = this.input.charCodeAt(this.state.pos + 1);
              return e === 123 && s === 124 ? this.finishOp(6, 2) : this.state.inType && (e === 62 || e === 60) ? this.finishOp(e === 62 ? 48 : 47, 1) : this.state.inType && e === 63 ? s === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : $o(e, s, this.input.charCodeAt(this.state.pos + 2)) ? (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(e);
            }
            isAssignable(e, s) {
              return e.type === "TypeCastExpression" ? this.isAssignable(e.expression, s) : super.isAssignable(e, s);
            }
            toAssignable(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              !s && e.type === "AssignmentExpression" && e.left.type === "TypeCastExpression" && (e.left = this.typeCastToParameter(e.left)), super.toAssignable(e, s);
            }
            toAssignableList(e, s, i) {
              for (let a = 0; a < e.length; a++) {
                let n = e[a];
                (n == null ? void 0 : n.type) === "TypeCastExpression" && (e[a] = this.typeCastToParameter(n));
              }
              super.toAssignableList(e, s, i);
            }
            toReferencedList(e, s) {
              for (let a = 0; a < e.length; a++) {
                var i;
                let n = e[a];
                n && n.type === "TypeCastExpression" && !((i = n.extra) != null && i.parenthesized) && (e.length > 1 || !s) && this.raise(D.TypeCastInPattern, { at: n.typeAnnotation });
              }
              return e;
            }
            parseArrayLike(e, s, i, a) {
              let n = super.parseArrayLike(e, s, i, a);
              return s && !this.state.maybeInArrowParameters && this.toReferencedList(n.elements), n;
            }
            isValidLVal(e, s, i) {
              return e === "TypeCastExpression" || super.isValidLVal(e, s, i);
            }
            parseClassProperty(e) {
              return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(e);
            }
            parseClassPrivateProperty(e) {
              return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(e);
            }
            isClassMethod() {
              return this.match(47) || super.isClassMethod();
            }
            isClassProperty() {
              return this.match(14) || super.isClassProperty();
            }
            isNonstaticConstructor(e) {
              return !this.match(14) && super.isNonstaticConstructor(e);
            }
            pushClassMethod(e, s, i, a, n, o) {
              if (s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(e, s, i, a, n, o), s.params && n) {
                let c = s.params;
                c.length > 0 && this.isThisParam(c[0]) && this.raise(D.ThisParamBannedInConstructor, { at: s });
              } else if (s.type === "MethodDefinition" && n && s.value.params) {
                let c = s.value.params;
                c.length > 0 && this.isThisParam(c[0]) && this.raise(D.ThisParamBannedInConstructor, { at: s });
              }
            }
            pushClassPrivateMethod(e, s, i, a) {
              s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(e, s, i, a);
            }
            parseClassSuper(e) {
              if (super.parseClassSuper(e), e.superClass && this.match(47) && (e.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(111)) {
                this.next();
                let s = e.implements = [];
                do {
                  let i = this.startNode();
                  i.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? i.typeParameters = this.flowParseTypeParameterInstantiation() : i.typeParameters = null, s.push(this.finishNode(i, "ClassImplements"));
                } while (this.eat(12));
              }
            }
            checkGetterSetterParams(e) {
              super.checkGetterSetterParams(e);
              let s = this.getObjectOrClassMethodParams(e);
              if (s.length > 0) {
                let i = s[0];
                this.isThisParam(i) && e.kind === "get" ? this.raise(D.GetterMayNotHaveThisParam, { at: i }) : this.isThisParam(i) && this.raise(D.SetterMayNotHaveThisParam, { at: i });
              }
            }
            parsePropertyNamePrefixOperator(e) {
              e.variance = this.flowParseVariance();
            }
            parseObjPropValue(e, s, i, a, n, o, c) {
              e.variance && this.unexpected(e.variance.loc.start), delete e.variance;
              let p;
              this.match(47) && !o && (p = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
              let m = super.parseObjPropValue(e, s, i, a, n, o, c);
              return p && ((m.value || m).typeParameters = p), m;
            }
            parseAssignableListItemTypes(e) {
              return this.eat(17) && (e.type !== "Identifier" && this.raise(D.PatternIsOptional, { at: e }), this.isThisParam(e) && this.raise(D.ThisParamMayNotBeOptional, { at: e }), e.optional = true), this.match(14) ? e.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(e) && this.raise(D.ThisParamAnnotationRequired, { at: e }), this.match(29) && this.isThisParam(e) && this.raise(D.ThisParamNoDefault, { at: e }), this.resetEndLocation(e), e;
            }
            parseMaybeDefault(e, s) {
              let i = super.parseMaybeDefault(e, s);
              return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(D.TypeBeforeInitializer, { at: i.typeAnnotation }), i;
            }
            shouldParseDefaultImport(e) {
              return ds(e) ? Ur(this.state.type) : super.shouldParseDefaultImport(e);
            }
            checkImportReflection(e) {
              super.checkImportReflection(e), e.module && e.importKind !== "value" && this.raise(D.ImportReflectionHasImportType, { at: e.specifiers[0].loc.start });
            }
            parseImportSpecifierLocal(e, s, i) {
              s.local = ds(e) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), e.specifiers.push(this.finishImportSpecifier(s, i));
            }
            maybeParseDefaultImportSpecifier(e) {
              e.importKind = "value";
              let s = null;
              if (this.match(87) ? s = "typeof" : this.isContextual(128) && (s = "type"), s) {
                let i = this.lookahead(), { type: a } = i;
                s === "type" && a === 55 && this.unexpected(null, i.type), (Ur(a) || a === 5 || a === 55) && (this.next(), e.importKind = s);
              }
              return super.maybeParseDefaultImportSpecifier(e);
            }
            parseImportSpecifier(e, s, i, a, n) {
              let o = e.imported, c = null;
              o.type === "Identifier" && (o.name === "type" ? c = "type" : o.name === "typeof" && (c = "typeof"));
              let p = false;
              if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
                let x = this.parseIdentifier(true);
                c !== null && !pe(this.state.type) ? (e.imported = x, e.importKind = c, e.local = xe(x)) : (e.imported = o, e.importKind = null, e.local = this.parseIdentifier());
              } else {
                if (c !== null && pe(this.state.type))
                  e.imported = this.parseIdentifier(true), e.importKind = c;
                else {
                  if (s)
                    throw this.raise(h.ImportBindingIsString, { at: e, importName: o.value });
                  e.imported = o, e.importKind = null;
                }
                this.eatContextual(93) ? e.local = this.parseIdentifier() : (p = true, e.local = xe(e.imported));
              }
              let m = ds(e);
              return i && m && this.raise(D.ImportTypeShorthandOnlyInPureImport, { at: e }), (i || m) && this.checkReservedType(e.local.name, e.local.loc.start, true), p && !i && !m && this.checkReservedWord(e.local.name, e.loc.start, true, true), this.finishImportSpecifier(e, "ImportSpecifier");
            }
            parseBindingAtom() {
              switch (this.state.type) {
                case 78:
                  return this.parseIdentifier(true);
                default:
                  return super.parseBindingAtom();
              }
            }
            parseFunctionParams(e, s) {
              let i = e.kind;
              i !== "get" && i !== "set" && this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(e, s);
            }
            parseVarId(e, s) {
              super.parseVarId(e, s), this.match(14) && (e.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(e.id));
            }
            parseAsyncArrowFromCallExpression(e, s) {
              if (this.match(14)) {
                let i = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true, e.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = i;
              }
              return super.parseAsyncArrowFromCallExpression(e, s);
            }
            shouldParseAsyncArrow() {
              return this.match(14) || super.shouldParseAsyncArrow();
            }
            parseMaybeAssign(e, s) {
              var i;
              let a = null, n;
              if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
                if (a = this.state.clone(), n = this.tryParse(() => super.parseMaybeAssign(e, s), a), !n.error)
                  return n.node;
                let { context: p } = this.state, m = p[p.length - 1];
                (m === H.j_oTag || m === H.j_expr) && p.pop();
              }
              if ((i = n) != null && i.error || this.match(47)) {
                var o, c;
                a = a || this.state.clone();
                let p, m = this.tryParse((P) => {
                  var b;
                  p = this.flowParseTypeParameterDeclaration();
                  let O = this.forwardNoArrowParamsConversionAt(p, () => {
                    let Q = super.parseMaybeAssign(e, s);
                    return this.resetStartLocationFromNode(Q, p), Q;
                  });
                  (b = O.extra) != null && b.parenthesized && P();
                  let R = this.maybeUnwrapTypeCastExpression(O);
                  return R.type !== "ArrowFunctionExpression" && P(), R.typeParameters = p, this.resetStartLocationFromNode(R, p), O;
                }, a), x = null;
                if (m.node && this.maybeUnwrapTypeCastExpression(m.node).type === "ArrowFunctionExpression") {
                  if (!m.error && !m.aborted)
                    return m.node.async && this.raise(D.UnexpectedTypeParameterBeforeAsyncArrowFunction, { at: p }), m.node;
                  x = m.node;
                }
                if ((o = n) != null && o.node)
                  return this.state = n.failState, n.node;
                if (x)
                  return this.state = m.failState, x;
                throw (c = n) != null && c.thrown ? n.error : m.thrown ? m.error : this.raise(D.UnexpectedTokenAfterTypeParameter, { at: p });
              }
              return super.parseMaybeAssign(e, s);
            }
            parseArrow(e) {
              if (this.match(14)) {
                let s = this.tryParse(() => {
                  let i = this.state.noAnonFunctionType;
                  this.state.noAnonFunctionType = true;
                  let a = this.startNode();
                  return [a.typeAnnotation, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = i, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), a;
                });
                if (s.thrown)
                  return null;
                s.error && (this.state = s.failState), e.returnType = s.node.typeAnnotation ? this.finishNode(s.node, "TypeAnnotation") : null;
              }
              return super.parseArrow(e);
            }
            shouldParseArrow(e) {
              return this.match(14) || super.shouldParseArrow(e);
            }
            setArrowFunctionParameters(e, s) {
              this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1 ? e.params = s : super.setArrowFunctionParameters(e, s);
            }
            checkParams(e, s, i) {
              let a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
              if (!(i && this.state.noArrowParamsConversionAt.indexOf(e.start) !== -1)) {
                for (let n = 0; n < e.params.length; n++)
                  this.isThisParam(e.params[n]) && n > 0 && this.raise(D.ThisParamMustBeFirst, { at: e.params[n] });
                return super.checkParams(e, s, i, a);
              }
            }
            parseParenAndDistinguishExpression(e) {
              return super.parseParenAndDistinguishExpression(e && this.state.noArrowAt.indexOf(this.state.start) === -1);
            }
            parseSubscripts(e, s, i) {
              if (e.type === "Identifier" && e.name === "async" && this.state.noArrowAt.indexOf(s.index) !== -1) {
                this.next();
                let a = this.startNodeAt(s);
                a.callee = e, a.arguments = super.parseCallExpressionArguments(11, false), e = this.finishNode(a, "CallExpression");
              } else if (e.type === "Identifier" && e.name === "async" && this.match(47)) {
                let a = this.state.clone(), n = this.tryParse((c) => this.parseAsyncArrowWithTypeParameters(s) || c(), a);
                if (!n.error && !n.aborted)
                  return n.node;
                let o = this.tryParse(() => super.parseSubscripts(e, s, i), a);
                if (o.node && !o.error)
                  return o.node;
                if (n.node)
                  return this.state = n.failState, n.node;
                if (o.node)
                  return this.state = o.failState, o.node;
                throw n.error || o.error;
              }
              return super.parseSubscripts(e, s, i);
            }
            parseSubscript(e, s, i, a) {
              if (this.match(18) && this.isLookaheadToken_lt()) {
                if (a.optionalChainMember = true, i)
                  return a.stop = true, e;
                this.next();
                let n = this.startNodeAt(s);
                return n.callee = e, n.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), n.arguments = this.parseCallExpressionArguments(11, false), n.optional = true, this.finishCallExpression(n, true);
              } else if (!i && this.shouldParseTypes() && this.match(47)) {
                let n = this.startNodeAt(s);
                n.callee = e;
                let o = this.tryParse(() => (n.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), n.arguments = super.parseCallExpressionArguments(11, false), a.optionalChainMember && (n.optional = false), this.finishCallExpression(n, a.optionalChainMember)));
                if (o.node)
                  return o.error && (this.state = o.failState), o.node;
              }
              return super.parseSubscript(e, s, i, a);
            }
            parseNewCallee(e) {
              super.parseNewCallee(e);
              let s = null;
              this.shouldParseTypes() && this.match(47) && (s = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), e.typeArguments = s;
            }
            parseAsyncArrowWithTypeParameters(e) {
              let s = this.startNodeAt(e);
              if (this.parseFunctionParams(s), !!this.parseArrow(s))
                return super.parseArrowExpression(s, void 0, true);
            }
            readToken_mult_modulo(e) {
              let s = this.input.charCodeAt(this.state.pos + 1);
              if (e === 42 && s === 47 && this.state.hasFlowComment) {
                this.state.hasFlowComment = false, this.state.pos += 2, this.nextToken();
                return;
              }
              super.readToken_mult_modulo(e);
            }
            readToken_pipe_amp(e) {
              let s = this.input.charCodeAt(this.state.pos + 1);
              if (e === 124 && s === 125) {
                this.finishOp(9, 2);
                return;
              }
              super.readToken_pipe_amp(e);
            }
            parseTopLevel(e, s) {
              let i = super.parseTopLevel(e, s);
              return this.state.hasFlowComment && this.raise(D.UnterminatedFlowComment, { at: this.state.curPosition() }), i;
            }
            skipBlockComment() {
              if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
                if (this.state.hasFlowComment)
                  throw this.raise(D.NestedFlowComment, { at: this.state.startLoc });
                this.hasFlowCommentCompletion();
                let e = this.skipFlowComment();
                e && (this.state.pos += e, this.state.hasFlowComment = true);
                return;
              }
              return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
            }
            skipFlowComment() {
              let { pos: e } = this.state, s = 2;
              for (; [32, 9].includes(this.input.charCodeAt(e + s)); )
                s++;
              let i = this.input.charCodeAt(s + e), a = this.input.charCodeAt(s + e + 1);
              return i === 58 && a === 58 ? s + 2 : this.input.slice(s + e, s + e + 12) === "flow-include" ? s + 12 : i === 58 && a !== 58 ? s : false;
            }
            hasFlowCommentCompletion() {
              if (this.input.indexOf("*/", this.state.pos) === -1)
                throw this.raise(h.UnterminatedComment, { at: this.state.curPosition() });
            }
            flowEnumErrorBooleanMemberNotInitialized(e, s) {
              let { enumName: i, memberName: a } = s;
              this.raise(D.EnumBooleanMemberNotInitialized, { at: e, memberName: a, enumName: i });
            }
            flowEnumErrorInvalidMemberInitializer(e, s) {
              return this.raise(s.explicitType ? s.explicitType === "symbol" ? D.EnumInvalidMemberInitializerSymbolType : D.EnumInvalidMemberInitializerPrimaryType : D.EnumInvalidMemberInitializerUnknownType, Object.assign({ at: e }, s));
            }
            flowEnumErrorNumberMemberNotInitialized(e, s) {
              let { enumName: i, memberName: a } = s;
              this.raise(D.EnumNumberMemberNotInitialized, { at: e, enumName: i, memberName: a });
            }
            flowEnumErrorStringMemberInconsistentlyInitailized(e, s) {
              let { enumName: i } = s;
              this.raise(D.EnumStringMemberInconsistentlyInitailized, { at: e, enumName: i });
            }
            flowEnumMemberInit() {
              let e = this.state.startLoc, s = /* @__PURE__ */ __name(() => this.match(12) || this.match(8), "s");
              switch (this.state.type) {
                case 132: {
                  let i = this.parseNumericLiteral(this.state.value);
                  return s() ? { type: "number", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
                }
                case 131: {
                  let i = this.parseStringLiteral(this.state.value);
                  return s() ? { type: "string", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
                }
                case 85:
                case 86: {
                  let i = this.parseBooleanLiteral(this.match(85));
                  return s() ? { type: "boolean", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
                }
                default:
                  return { type: "invalid", loc: e };
              }
            }
            flowEnumMemberRaw() {
              let e = this.state.startLoc, s = this.parseIdentifier(true), i = this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc: e };
              return { id: s, init: i };
            }
            flowEnumCheckExplicitTypeMismatch(e, s, i) {
              let { explicitType: a } = s;
              a !== null && a !== i && this.flowEnumErrorInvalidMemberInitializer(e, s);
            }
            flowEnumMembers(e) {
              let { enumName: s, explicitType: i } = e, a = /* @__PURE__ */ new Set(), n = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] }, o = false;
              for (; !this.match(8); ) {
                if (this.eat(21)) {
                  o = true;
                  break;
                }
                let c = this.startNode(), { id: p, init: m } = this.flowEnumMemberRaw(), x = p.name;
                if (x === "")
                  continue;
                /^[a-z]/.test(x) && this.raise(D.EnumInvalidMemberName, { at: p, memberName: x, suggestion: x[0].toUpperCase() + x.slice(1), enumName: s }), a.has(x) && this.raise(D.EnumDuplicateMemberName, { at: p, memberName: x, enumName: s }), a.add(x);
                let P = { enumName: s, explicitType: i, memberName: x };
                switch (c.id = p, m.type) {
                  case "boolean": {
                    this.flowEnumCheckExplicitTypeMismatch(m.loc, P, "boolean"), c.init = m.value, n.booleanMembers.push(this.finishNode(c, "EnumBooleanMember"));
                    break;
                  }
                  case "number": {
                    this.flowEnumCheckExplicitTypeMismatch(m.loc, P, "number"), c.init = m.value, n.numberMembers.push(this.finishNode(c, "EnumNumberMember"));
                    break;
                  }
                  case "string": {
                    this.flowEnumCheckExplicitTypeMismatch(m.loc, P, "string"), c.init = m.value, n.stringMembers.push(this.finishNode(c, "EnumStringMember"));
                    break;
                  }
                  case "invalid":
                    throw this.flowEnumErrorInvalidMemberInitializer(m.loc, P);
                  case "none":
                    switch (i) {
                      case "boolean":
                        this.flowEnumErrorBooleanMemberNotInitialized(m.loc, P);
                        break;
                      case "number":
                        this.flowEnumErrorNumberMemberNotInitialized(m.loc, P);
                        break;
                      default:
                        n.defaultedMembers.push(this.finishNode(c, "EnumDefaultedMember"));
                    }
                }
                this.match(8) || this.expect(12);
              }
              return { members: n, hasUnknownMembers: o };
            }
            flowEnumStringMembers(e, s, i) {
              let { enumName: a } = i;
              if (e.length === 0)
                return s;
              if (s.length === 0)
                return e;
              if (s.length > e.length) {
                for (let n of e)
                  this.flowEnumErrorStringMemberInconsistentlyInitailized(n, { enumName: a });
                return s;
              } else {
                for (let n of s)
                  this.flowEnumErrorStringMemberInconsistentlyInitailized(n, { enumName: a });
                return e;
              }
            }
            flowEnumParseExplicitType(e) {
              let { enumName: s } = e;
              if (!this.eatContextual(101))
                return null;
              if (!$(this.state.type))
                throw this.raise(D.EnumInvalidExplicitTypeUnknownSupplied, { at: this.state.startLoc, enumName: s });
              let { value: i } = this.state;
              return this.next(), i !== "boolean" && i !== "number" && i !== "string" && i !== "symbol" && this.raise(D.EnumInvalidExplicitType, { at: this.state.startLoc, enumName: s, invalidEnumType: i }), i;
            }
            flowEnumBody(e, s) {
              let i = s.name, a = s.loc.start, n = this.flowEnumParseExplicitType({ enumName: i });
              this.expect(5);
              let { members: o, hasUnknownMembers: c } = this.flowEnumMembers({ enumName: i, explicitType: n });
              switch (e.hasUnknownMembers = c, n) {
                case "boolean":
                  return e.explicitType = true, e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");
                case "number":
                  return e.explicitType = true, e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");
                case "string":
                  return e.explicitType = true, e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, { enumName: i }), this.expect(8), this.finishNode(e, "EnumStringBody");
                case "symbol":
                  return e.members = o.defaultedMembers, this.expect(8), this.finishNode(e, "EnumSymbolBody");
                default: {
                  let p = /* @__PURE__ */ __name(() => (e.members = [], this.expect(8), this.finishNode(e, "EnumStringBody")), "p");
                  e.explicitType = false;
                  let m = o.booleanMembers.length, x = o.numberMembers.length, P = o.stringMembers.length, b = o.defaultedMembers.length;
                  if (!m && !x && !P && !b)
                    return p();
                  if (!m && !x)
                    return e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, { enumName: i }), this.expect(8), this.finishNode(e, "EnumStringBody");
                  if (!x && !P && m >= b) {
                    for (let O of o.defaultedMembers)
                      this.flowEnumErrorBooleanMemberNotInitialized(O.loc.start, { enumName: i, memberName: O.id.name });
                    return e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");
                  } else if (!m && !P && x >= b) {
                    for (let O of o.defaultedMembers)
                      this.flowEnumErrorNumberMemberNotInitialized(O.loc.start, { enumName: i, memberName: O.id.name });
                    return e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");
                  } else
                    return this.raise(D.EnumInconsistentMemberValues, { at: a, enumName: i }), p();
                }
              }
            }
            flowParseEnumDeclaration(e) {
              let s = this.parseIdentifier();
              return e.id = s, e.body = this.flowEnumBody(this.startNode(), s), this.finishNode(e, "EnumDeclaration");
            }
            isLookaheadToken_lt() {
              let e = this.nextTokenStart();
              if (this.input.charCodeAt(e) === 60) {
                let s = this.input.charCodeAt(e + 1);
                return s !== 60 && s !== 61;
              }
              return false;
            }
            maybeUnwrapTypeCastExpression(e) {
              return e.type === "TypeCastExpression" ? e.expression : e;
            }
          }, "Ll"), Ol = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, Ne = _`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: (t) => {
            let { openingTagName: r } = t;
            return `Expected corresponding JSX closing tag for <${r}>.`;
          }, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: (t) => {
            let { unexpected: r, HTMLEntity: e } = t;
            return `Unexpected token \`${r}\`. Did you mean \`${e}\` or \`{'${r}'}\`?`;
          }, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
          function Ee(t) {
            return t ? t.type === "JSXOpeningFragment" || t.type === "JSXClosingFragment" : false;
          }
          __name(Ee, "Ee");
          function He(t) {
            if (t.type === "JSXIdentifier")
              return t.name;
            if (t.type === "JSXNamespacedName")
              return t.namespace.name + ":" + t.name.name;
            if (t.type === "JSXMemberExpression")
              return He(t.object) + "." + He(t.property);
            throw new Error("Node had unexpected type: " + t.type);
          }
          __name(He, "He");
          var Ml = /* @__PURE__ */ __name((t) => class extends t {
            jsxReadToken() {
              let e = "", s = this.state.pos;
              for (; ; ) {
                if (this.state.pos >= this.length)
                  throw this.raise(Ne.UnterminatedJsxContent, { at: this.state.startLoc });
                let i = this.input.charCodeAt(this.state.pos);
                switch (i) {
                  case 60:
                  case 123:
                    return this.state.pos === this.state.start ? i === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(140)) : super.getTokenFromCode(i) : (e += this.input.slice(s, this.state.pos), this.finishToken(139, e));
                  case 38:
                    e += this.input.slice(s, this.state.pos), e += this.jsxReadEntity(), s = this.state.pos;
                    break;
                  case 62:
                  case 125:
                  default:
                    Qe(i) ? (e += this.input.slice(s, this.state.pos), e += this.jsxReadNewLine(true), s = this.state.pos) : ++this.state.pos;
                }
              }
            }
            jsxReadNewLine(e) {
              let s = this.input.charCodeAt(this.state.pos), i;
              return ++this.state.pos, s === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, i = e ? `
` : `\r
`) : i = String.fromCharCode(s), ++this.state.curLine, this.state.lineStart = this.state.pos, i;
            }
            jsxReadString(e) {
              let s = "", i = ++this.state.pos;
              for (; ; ) {
                if (this.state.pos >= this.length)
                  throw this.raise(h.UnterminatedString, { at: this.state.startLoc });
                let a = this.input.charCodeAt(this.state.pos);
                if (a === e)
                  break;
                a === 38 ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadEntity(), i = this.state.pos) : Qe(a) ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadNewLine(false), i = this.state.pos) : ++this.state.pos;
              }
              return s += this.input.slice(i, this.state.pos++), this.finishToken(131, s);
            }
            jsxReadEntity() {
              let e = ++this.state.pos;
              if (this.codePointAtPos(this.state.pos) === 35) {
                ++this.state.pos;
                let s = 10;
                this.codePointAtPos(this.state.pos) === 120 && (s = 16, ++this.state.pos);
                let i = this.readInt(s, void 0, false, "bail");
                if (i !== null && this.codePointAtPos(this.state.pos) === 59)
                  return ++this.state.pos, String.fromCodePoint(i);
              } else {
                let s = 0, i = false;
                for (; s++ < 10 && this.state.pos < this.length && !(i = this.codePointAtPos(this.state.pos) == 59); )
                  ++this.state.pos;
                if (i) {
                  let a = this.input.slice(e, this.state.pos), n = Ol[a];
                  if (++this.state.pos, n)
                    return n;
                }
              }
              return this.state.pos = e, "&";
            }
            jsxReadWord() {
              let e, s = this.state.pos;
              do
                e = this.input.charCodeAt(++this.state.pos);
              while (Be(e) || e === 45);
              return this.finishToken(138, this.input.slice(s, this.state.pos));
            }
            jsxParseIdentifier() {
              let e = this.startNode();
              return this.match(138) ? e.name = this.state.value : Wt(this.state.type) ? e.name = Pe(this.state.type) : this.unexpected(), this.next(), this.finishNode(e, "JSXIdentifier");
            }
            jsxParseNamespacedName() {
              let e = this.state.startLoc, s = this.jsxParseIdentifier();
              if (!this.eat(14))
                return s;
              let i = this.startNodeAt(e);
              return i.namespace = s, i.name = this.jsxParseIdentifier(), this.finishNode(i, "JSXNamespacedName");
            }
            jsxParseElementName() {
              let e = this.state.startLoc, s = this.jsxParseNamespacedName();
              if (s.type === "JSXNamespacedName")
                return s;
              for (; this.eat(16); ) {
                let i = this.startNodeAt(e);
                i.object = s, i.property = this.jsxParseIdentifier(), s = this.finishNode(i, "JSXMemberExpression");
              }
              return s;
            }
            jsxParseAttributeValue() {
              let e;
              switch (this.state.type) {
                case 5:
                  return e = this.startNode(), this.setContext(H.brace), this.next(), e = this.jsxParseExpressionContainer(e, H.j_oTag), e.expression.type === "JSXEmptyExpression" && this.raise(Ne.AttributeIsEmpty, { at: e }), e;
                case 140:
                case 131:
                  return this.parseExprAtom();
                default:
                  throw this.raise(Ne.UnsupportedJsxValue, { at: this.state.startLoc });
              }
            }
            jsxParseEmptyExpression() {
              let e = this.startNodeAt(this.state.lastTokEndLoc);
              return this.finishNodeAt(e, "JSXEmptyExpression", this.state.startLoc);
            }
            jsxParseSpreadChild(e) {
              return this.next(), e.expression = this.parseExpression(), this.setContext(H.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXSpreadChild");
            }
            jsxParseExpressionContainer(e, s) {
              if (this.match(8))
                e.expression = this.jsxParseEmptyExpression();
              else {
                let i = this.parseExpression();
                e.expression = i;
              }
              return this.setContext(s), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXExpressionContainer");
            }
            jsxParseAttribute() {
              let e = this.startNode();
              return this.match(5) ? (this.setContext(H.brace), this.next(), this.expect(21), e.argument = this.parseMaybeAssignAllowIn(), this.setContext(H.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXSpreadAttribute")) : (e.name = this.jsxParseNamespacedName(), e.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(e, "JSXAttribute"));
            }
            jsxParseOpeningElementAt(e) {
              let s = this.startNodeAt(e);
              return this.eat(141) ? this.finishNode(s, "JSXOpeningFragment") : (s.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(s));
            }
            jsxParseOpeningElementAfterName(e) {
              let s = [];
              for (; !this.match(56) && !this.match(141); )
                s.push(this.jsxParseAttribute());
              return e.attributes = s, e.selfClosing = this.eat(56), this.expect(141), this.finishNode(e, "JSXOpeningElement");
            }
            jsxParseClosingElementAt(e) {
              let s = this.startNodeAt(e);
              return this.eat(141) ? this.finishNode(s, "JSXClosingFragment") : (s.name = this.jsxParseElementName(), this.expect(141), this.finishNode(s, "JSXClosingElement"));
            }
            jsxParseElementAt(e) {
              let s = this.startNodeAt(e), i = [], a = this.jsxParseOpeningElementAt(e), n = null;
              if (!a.selfClosing) {
                e:
                  for (; ; )
                    switch (this.state.type) {
                      case 140:
                        if (e = this.state.startLoc, this.next(), this.eat(56)) {
                          n = this.jsxParseClosingElementAt(e);
                          break e;
                        }
                        i.push(this.jsxParseElementAt(e));
                        break;
                      case 139:
                        i.push(this.parseExprAtom());
                        break;
                      case 5: {
                        let o = this.startNode();
                        this.setContext(H.brace), this.next(), this.match(21) ? i.push(this.jsxParseSpreadChild(o)) : i.push(this.jsxParseExpressionContainer(o, H.j_expr));
                        break;
                      }
                      default:
                        throw this.unexpected();
                    }
                Ee(a) && !Ee(n) && n !== null ? this.raise(Ne.MissingClosingTagFragment, { at: n }) : !Ee(a) && Ee(n) ? this.raise(Ne.MissingClosingTagElement, { at: n, openingTagName: He(a.name) }) : !Ee(a) && !Ee(n) && He(n.name) !== He(a.name) && this.raise(Ne.MissingClosingTagElement, { at: n, openingTagName: He(a.name) });
              }
              if (Ee(a) ? (s.openingFragment = a, s.closingFragment = n) : (s.openingElement = a, s.closingElement = n), s.children = i, this.match(47))
                throw this.raise(Ne.UnwrappedAdjacentJSXElements, { at: this.state.startLoc });
              return Ee(a) ? this.finishNode(s, "JSXFragment") : this.finishNode(s, "JSXElement");
            }
            jsxParseElement() {
              let e = this.state.startLoc;
              return this.next(), this.jsxParseElementAt(e);
            }
            setContext(e) {
              let { context: s } = this.state;
              s[s.length - 1] = e;
            }
            parseExprAtom(e) {
              return this.match(139) ? this.parseLiteral(this.state.value, "JSXText") : this.match(140) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(140), this.jsxParseElement()) : super.parseExprAtom(e);
            }
            skipSpace() {
              this.curContext().preserveSpace || super.skipSpace();
            }
            getTokenFromCode(e) {
              let s = this.curContext();
              if (s === H.j_expr)
                return this.jsxReadToken();
              if (s === H.j_oTag || s === H.j_cTag) {
                if (fe(e))
                  return this.jsxReadWord();
                if (e === 62)
                  return ++this.state.pos, this.finishToken(141);
                if ((e === 34 || e === 39) && s === H.j_oTag)
                  return this.jsxReadString(e);
              }
              return e === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33 ? (++this.state.pos, this.finishToken(140)) : super.getTokenFromCode(e);
            }
            updateContext(e) {
              let { context: s, type: i } = this.state;
              if (i === 56 && e === 140)
                s.splice(-2, 2, H.j_cTag), this.state.canStartJSXElement = false;
              else if (i === 140)
                s.push(H.j_oTag);
              else if (i === 141) {
                let a = s[s.length - 1];
                a === H.j_oTag && e === 56 || a === H.j_cTag ? (s.pop(), this.state.canStartJSXElement = s[s.length - 1] === H.j_expr) : (this.setContext(H.j_expr), this.state.canStartJSXElement = true);
              } else
                this.state.canStartJSXElement = wo(i);
            }
          }, "Ml"), Bl = /* @__PURE__ */ __name(class extends ns {
            constructor() {
              super(...arguments), this.types = /* @__PURE__ */ new Set(), this.enums = /* @__PURE__ */ new Set(), this.constEnums = /* @__PURE__ */ new Set(), this.classes = /* @__PURE__ */ new Set(), this.exportOnlyBindings = /* @__PURE__ */ new Set();
            }
          }, "Bl"), _l = /* @__PURE__ */ __name(class extends os {
            constructor() {
              super(...arguments), this.importsStack = [];
            }
            createScope(t) {
              return this.importsStack.push(/* @__PURE__ */ new Set()), new Bl(t);
            }
            enter(t) {
              t == je && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(t);
            }
            exit() {
              let t = super.exit();
              return t == je && this.importsStack.pop(), t;
            }
            hasImport(t, r) {
              let e = this.importsStack.length;
              if (this.importsStack[e - 1].has(t))
                return true;
              if (!r && e > 1) {
                for (let s = 0; s < e - 1; s++)
                  if (this.importsStack[s].has(t))
                    return true;
              }
              return false;
            }
            declareName(t, r, e) {
              if (r & Je) {
                this.hasImport(t, true) && this.parser.raise(h.VarRedeclaration, { at: e, identifierName: t }), this.importsStack[this.importsStack.length - 1].add(t);
                return;
              }
              let s = this.currentScope();
              if (r & es) {
                this.maybeExportDefined(s, t), s.exportOnlyBindings.add(t);
                return;
              }
              super.declareName(t, r, e), r & we && (r & ye || (this.checkRedeclarationInScope(s, t, r, e), this.maybeExportDefined(s, t)), s.types.add(t)), r & Qt && s.enums.add(t), r & Zt && s.constEnums.add(t), r & pt && s.classes.add(t);
            }
            isRedeclaredInScope(t, r, e) {
              if (t.enums.has(r)) {
                if (e & Qt) {
                  let s = !!(e & Zt), i = t.constEnums.has(r);
                  return s !== i;
                }
                return true;
              }
              return e & pt && t.classes.has(r) ? t.lexical.has(r) ? !!(e & ye) : false : e & we && t.types.has(r) ? true : super.isRedeclaredInScope(t, r, e);
            }
            checkLocalExport(t) {
              let { name: r } = t;
              if (this.hasImport(r))
                return;
              let e = this.scopeStack.length;
              for (let s = e - 1; s >= 0; s--) {
                let i = this.scopeStack[s];
                if (i.types.has(r) || i.exportOnlyBindings.has(r))
                  return;
              }
              super.checkLocalExport(t);
            }
          }, "_l"), Rl = /* @__PURE__ */ __name((t, r) => Object.hasOwnProperty.call(t, r) && t[r], "Rl");
          function jl(t) {
            if (t == null)
              throw new Error(`Unexpected ${t} value.`);
            return t;
          }
          __name(jl, "jl");
          function Hr(t) {
            if (!t)
              throw new Error("Assert fail");
          }
          __name(Hr, "Hr");
          var w = _`typescript`({ AbstractMethodHasImplementation: (t) => {
            let { methodName: r } = t;
            return `Method '${r}' cannot have an implementation because it is marked abstract.`;
          }, AbstractPropertyHasInitializer: (t) => {
            let { propertyName: r } = t;
            return `Property '${r}' cannot have an initializer because it is marked abstract.`;
          }, AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: (t) => {
            let { kind: r } = t;
            return `'declare' is not allowed in ${r}ters.`;
          }, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: (t) => {
            let { modifier: r } = t;
            return "Accessibility modifier already seen.";
          }, DuplicateModifier: (t) => {
            let { modifier: r } = t;
            return `Duplicate modifier: '${r}'.`;
          }, EmptyHeritageClauseType: (t) => {
            let { token: r } = t;
            return `'${r}' list cannot be empty.`;
          }, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: (t) => {
            let { modifiers: r } = t;
            return `'${r[0]}' modifier cannot be used with '${r[1]}' modifier.`;
          }, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: (t) => {
            let { modifier: r } = t;
            return `Index signatures cannot have an accessibility modifier ('${r}').`;
          }, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: (t) => {
            let { modifier: r } = t;
            return `'${r}' modifier cannot appear on a type member.`;
          }, InvalidModifierOnTypeParameter: (t) => {
            let { modifier: r } = t;
            return `'${r}' modifier cannot appear on a type parameter.`;
          }, InvalidModifierOnTypeParameterPositions: (t) => {
            let { modifier: r } = t;
            return `'${r}' modifier can only appear on a type parameter of a class, interface or type alias.`;
          }, InvalidModifiersOrder: (t) => {
            let { orderedModifiers: r } = t;
            return `'${r[0]}' modifier must precede '${r[1]}' modifier.`;
          }, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: (t) => {
            let { modifier: r } = t;
            return `Private elements cannot have an accessibility modifier ('${r}').`;
          }, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: (t) => {
            let { typeParameterName: r } = t;
            return `Single type parameter ${r} should have a trailing comma. Example usage: <${r},>.`;
          }, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: (t) => {
            let { type: r } = t;
            return `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${r}.`;
          } });
          function ql(t) {
            switch (t) {
              case "any":
                return "TSAnyKeyword";
              case "boolean":
                return "TSBooleanKeyword";
              case "bigint":
                return "TSBigIntKeyword";
              case "never":
                return "TSNeverKeyword";
              case "number":
                return "TSNumberKeyword";
              case "object":
                return "TSObjectKeyword";
              case "string":
                return "TSStringKeyword";
              case "symbol":
                return "TSSymbolKeyword";
              case "undefined":
                return "TSUndefinedKeyword";
              case "unknown":
                return "TSUnknownKeyword";
              default:
                return;
            }
          }
          __name(ql, "ql");
          function $r(t) {
            return t === "private" || t === "public" || t === "protected";
          }
          __name($r, "$r");
          function Ul(t) {
            return t === "in" || t === "out";
          }
          __name(Ul, "Ul");
          var Hl = /* @__PURE__ */ __name((t) => class extends t {
            getScopeHandler() {
              return _l;
            }
            tsIsIdentifier() {
              return $(this.state.type);
            }
            tsTokenCanFollowModifier() {
              return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
            }
            tsNextTokenCanFollowModifier() {
              return this.next(), this.tsTokenCanFollowModifier();
            }
            tsParseModifier(e, s) {
              if (!$(this.state.type) && this.state.type !== 58)
                return;
              let i = this.state.value;
              if (e.indexOf(i) !== -1) {
                if (s && this.tsIsStartOfStaticBlocks())
                  return;
                if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
                  return i;
              }
            }
            tsParseModifiers(e) {
              let { modified: s, allowedModifiers: i, disallowedModifiers: a, stopOnStartOfClassStaticBlock: n, errorTemplate: o = w.InvalidModifierOnTypeMember } = e, c = /* @__PURE__ */ __name((m, x, P, b) => {
                x === P && s[b] && this.raise(w.InvalidModifiersOrder, { at: m, orderedModifiers: [P, b] });
              }, "c"), p = /* @__PURE__ */ __name((m, x, P, b) => {
                (s[P] && x === b || s[b] && x === P) && this.raise(w.IncompatibleModifiers, { at: m, modifiers: [P, b] });
              }, "p");
              for (; ; ) {
                let { startLoc: m } = this.state, x = this.tsParseModifier(i.concat(a != null ? a : []), n);
                if (!x)
                  break;
                $r(x) ? s.accessibility ? this.raise(w.DuplicateAccessibilityModifier, { at: m, modifier: x }) : (c(m, x, x, "override"), c(m, x, x, "static"), c(m, x, x, "readonly"), s.accessibility = x) : Ul(x) ? (s[x] && this.raise(w.DuplicateModifier, { at: m, modifier: x }), s[x] = true, c(m, x, "in", "out")) : (Object.hasOwnProperty.call(s, x) ? this.raise(w.DuplicateModifier, { at: m, modifier: x }) : (c(m, x, "static", "readonly"), c(m, x, "static", "override"), c(m, x, "override", "readonly"), c(m, x, "abstract", "override"), p(m, x, "declare", "override"), p(m, x, "static", "abstract")), s[x] = true), a != null && a.includes(x) && this.raise(o, { at: m, modifier: x });
              }
            }
            tsIsListTerminator(e) {
              switch (e) {
                case "EnumMembers":
                case "TypeMembers":
                  return this.match(8);
                case "HeritageClauseElement":
                  return this.match(5);
                case "TupleElementTypes":
                  return this.match(3);
                case "TypeParametersOrArguments":
                  return this.match(48);
              }
              throw new Error("Unreachable");
            }
            tsParseList(e, s) {
              let i = [];
              for (; !this.tsIsListTerminator(e); )
                i.push(s());
              return i;
            }
            tsParseDelimitedList(e, s, i) {
              return jl(this.tsParseDelimitedListWorker(e, s, true, i));
            }
            tsParseDelimitedListWorker(e, s, i, a) {
              let n = [], o = -1;
              for (; !this.tsIsListTerminator(e); ) {
                o = -1;
                let c = s();
                if (c == null)
                  return;
                if (n.push(c), this.eat(12)) {
                  o = this.state.lastTokStart;
                  continue;
                }
                if (this.tsIsListTerminator(e))
                  break;
                i && this.expect(12);
                return;
              }
              return a && (a.value = o), n;
            }
            tsParseBracketedList(e, s, i, a, n) {
              a || (i ? this.expect(0) : this.expect(47));
              let o = this.tsParseDelimitedList(e, s, n);
              return i ? this.expect(3) : this.expect(48), o;
            }
            tsParseImportType() {
              let e = this.startNode();
              return this.expect(83), this.expect(10), this.match(131) || this.raise(w.UnsupportedImportTypeArgument, { at: this.state.startLoc }), e.argument = super.parseExprAtom(), this.expect(11), this.eat(16) && (e.qualifier = this.tsParseEntityName()), this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSImportType");
            }
            tsParseEntityName() {
              let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, s = this.parseIdentifier(e);
              for (; this.eat(16); ) {
                let i = this.startNodeAtNode(s);
                i.left = s, i.right = this.parseIdentifier(e), s = this.finishNode(i, "TSQualifiedName");
              }
              return s;
            }
            tsParseTypeReference() {
              let e = this.startNode();
              return e.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeReference");
            }
            tsParseThisTypePredicate(e) {
              this.next();
              let s = this.startNodeAtNode(e);
              return s.parameterName = e, s.typeAnnotation = this.tsParseTypeAnnotation(false), s.asserts = false, this.finishNode(s, "TSTypePredicate");
            }
            tsParseThisTypeNode() {
              let e = this.startNode();
              return this.next(), this.finishNode(e, "TSThisType");
            }
            tsParseTypeQuery() {
              let e = this.startNode();
              return this.expect(87), this.match(83) ? e.exprName = this.tsParseImportType() : e.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeQuery");
            }
            tsParseInOutModifiers(e) {
              this.tsParseModifiers({ modified: e, allowedModifiers: ["in", "out"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: w.InvalidModifierOnTypeParameter });
            }
            tsParseNoneModifiers(e) {
              this.tsParseModifiers({ modified: e, allowedModifiers: [], disallowedModifiers: ["in", "out"], errorTemplate: w.InvalidModifierOnTypeParameterPositions });
            }
            tsParseTypeParameter() {
              let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.tsParseNoneModifiers.bind(this), s = this.startNode();
              return e(s), s.name = this.tsParseTypeParameterName(), s.constraint = this.tsEatThenParseType(81), s.default = this.tsEatThenParseType(29), this.finishNode(s, "TSTypeParameter");
            }
            tsTryParseTypeParameters(e) {
              if (this.match(47))
                return this.tsParseTypeParameters(e);
            }
            tsParseTypeParameters(e) {
              let s = this.startNode();
              this.match(47) || this.match(140) ? this.next() : this.unexpected();
              let i = { value: -1 };
              return s.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, e), false, true, i), s.params.length === 0 && this.raise(w.EmptyTypeParameters, { at: s }), i.value !== -1 && this.addExtra(s, "trailingComma", i.value), this.finishNode(s, "TSTypeParameterDeclaration");
            }
            tsFillSignature(e, s) {
              let i = e === 19, a = "parameters", n = "typeAnnotation";
              s.typeParameters = this.tsTryParseTypeParameters(), this.expect(10), s[a] = this.tsParseBindingListForSignature(), i ? s[n] = this.tsParseTypeOrTypePredicateAnnotation(e) : this.match(e) && (s[n] = this.tsParseTypeOrTypePredicateAnnotation(e));
            }
            tsParseBindingListForSignature() {
              return super.parseBindingList(11, 41).map((e) => (e.type !== "Identifier" && e.type !== "RestElement" && e.type !== "ObjectPattern" && e.type !== "ArrayPattern" && this.raise(w.UnsupportedSignatureParameterKind, { at: e, type: e.type }), e));
            }
            tsParseTypeMemberSemicolon() {
              !this.eat(12) && !this.isLineTerminator() && this.expect(13);
            }
            tsParseSignatureMember(e, s) {
              return this.tsFillSignature(14, s), this.tsParseTypeMemberSemicolon(), this.finishNode(s, e);
            }
            tsIsUnambiguouslyIndexSignature() {
              return this.next(), $(this.state.type) ? (this.next(), this.match(14)) : false;
            }
            tsTryParseIndexSignature(e) {
              if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))))
                return;
              this.expect(0);
              let s = this.parseIdentifier();
              s.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(s), this.expect(3), e.parameters = [s];
              let i = this.tsTryParseTypeAnnotation();
              return i && (e.typeAnnotation = i), this.tsParseTypeMemberSemicolon(), this.finishNode(e, "TSIndexSignature");
            }
            tsParsePropertyOrMethodSignature(e, s) {
              this.eat(17) && (e.optional = true);
              let i = e;
              if (this.match(10) || this.match(47)) {
                s && this.raise(w.ReadonlyForMethodSignature, { at: e });
                let a = i;
                a.kind && this.match(47) && this.raise(w.AccesorCannotHaveTypeParameters, { at: this.state.curPosition() }), this.tsFillSignature(14, a), this.tsParseTypeMemberSemicolon();
                let n = "parameters", o = "typeAnnotation";
                if (a.kind === "get")
                  a[n].length > 0 && (this.raise(h.BadGetterArity, { at: this.state.curPosition() }), this.isThisParam(a[n][0]) && this.raise(w.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }));
                else if (a.kind === "set") {
                  if (a[n].length !== 1)
                    this.raise(h.BadSetterArity, { at: this.state.curPosition() });
                  else {
                    let c = a[n][0];
                    this.isThisParam(c) && this.raise(w.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }), c.type === "Identifier" && c.optional && this.raise(w.SetAccesorCannotHaveOptionalParameter, { at: this.state.curPosition() }), c.type === "RestElement" && this.raise(w.SetAccesorCannotHaveRestParameter, { at: this.state.curPosition() });
                  }
                  a[o] && this.raise(w.SetAccesorCannotHaveReturnType, { at: a[o] });
                } else
                  a.kind = "method";
                return this.finishNode(a, "TSMethodSignature");
              } else {
                let a = i;
                s && (a.readonly = true);
                let n = this.tsTryParseTypeAnnotation();
                return n && (a.typeAnnotation = n), this.tsParseTypeMemberSemicolon(), this.finishNode(a, "TSPropertySignature");
              }
            }
            tsParseTypeMember() {
              let e = this.startNode();
              if (this.match(10) || this.match(47))
                return this.tsParseSignatureMember("TSCallSignatureDeclaration", e);
              if (this.match(77)) {
                let i = this.startNode();
                return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", e) : (e.key = this.createIdentifier(i, "new"), this.tsParsePropertyOrMethodSignature(e, false));
              }
              this.tsParseModifiers({ modified: e, allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] });
              let s = this.tsTryParseIndexSignature(e);
              return s || (super.parsePropertyName(e), !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.tsTokenCanFollowModifier() && (e.kind = e.key.name, super.parsePropertyName(e)), this.tsParsePropertyOrMethodSignature(e, !!e.readonly));
            }
            tsParseTypeLiteral() {
              let e = this.startNode();
              return e.members = this.tsParseObjectTypeMembers(), this.finishNode(e, "TSTypeLiteral");
            }
            tsParseObjectTypeMembers() {
              this.expect(5);
              let e = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
              return this.expect(8), e;
            }
            tsIsStartOfMappedType() {
              return this.next(), this.eat(53) ? this.isContextual(120) : (this.isContextual(120) && this.next(), !this.match(0) || (this.next(), !this.tsIsIdentifier()) ? false : (this.next(), this.match(58)));
            }
            tsParseMappedTypeParameter() {
              let e = this.startNode();
              return e.name = this.tsParseTypeParameterName(), e.constraint = this.tsExpectThenParseType(58), this.finishNode(e, "TSTypeParameter");
            }
            tsParseMappedType() {
              let e = this.startNode();
              return this.expect(5), this.match(53) ? (e.readonly = this.state.value, this.next(), this.expectContextual(120)) : this.eatContextual(120) && (e.readonly = true), this.expect(0), e.typeParameter = this.tsParseMappedTypeParameter(), e.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (e.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (e.optional = true), e.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(e, "TSMappedType");
            }
            tsParseTupleType() {
              let e = this.startNode();
              e.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
              let s = false, i = null;
              return e.elementTypes.forEach((a) => {
                var n;
                let { type: o } = a;
                s && o !== "TSRestType" && o !== "TSOptionalType" && !(o === "TSNamedTupleMember" && a.optional) && this.raise(w.OptionalTypeBeforeRequired, { at: a }), s || (s = o === "TSNamedTupleMember" && a.optional || o === "TSOptionalType");
                let c = o;
                o === "TSRestType" && (a = a.typeAnnotation, c = a.type);
                let p = c === "TSNamedTupleMember";
                (n = i) != null || (i = p), i !== p && this.raise(w.MixedLabeledAndUnlabeledElements, { at: a });
              }), this.finishNode(e, "TSTupleType");
            }
            tsParseTupleElementType() {
              let { startLoc: e } = this.state, s = this.eat(21), i = this.tsParseType(), a = this.eat(17);
              if (this.eat(14)) {
                let o = this.startNodeAtNode(i);
                o.optional = a, i.type === "TSTypeReference" && !i.typeParameters && i.typeName.type === "Identifier" ? o.label = i.typeName : (this.raise(w.InvalidTupleMemberLabel, { at: i }), o.label = i), o.elementType = this.tsParseType(), i = this.finishNode(o, "TSNamedTupleMember");
              } else if (a) {
                let o = this.startNodeAtNode(i);
                o.typeAnnotation = i, i = this.finishNode(o, "TSOptionalType");
              }
              if (s) {
                let o = this.startNodeAt(e);
                o.typeAnnotation = i, i = this.finishNode(o, "TSRestType");
              }
              return i;
            }
            tsParseParenthesizedType() {
              let e = this.startNode();
              return this.expect(10), e.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(e, "TSParenthesizedType");
            }
            tsParseFunctionOrConstructorType(e, s) {
              let i = this.startNode();
              return e === "TSConstructorType" && (i.abstract = !!s, s && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, i)), this.finishNode(i, e);
            }
            tsParseLiteralTypeNode() {
              let e = this.startNode();
              return e.literal = (() => {
                switch (this.state.type) {
                  case 132:
                  case 133:
                  case 131:
                  case 85:
                  case 86:
                    return super.parseExprAtom();
                  default:
                    throw this.unexpected();
                }
              })(), this.finishNode(e, "TSLiteralType");
            }
            tsParseTemplateLiteralType() {
              let e = this.startNode();
              return e.literal = super.parseTemplate(false), this.finishNode(e, "TSLiteralType");
            }
            parseTemplateSubstitution() {
              return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
            }
            tsParseThisTypeOrThisTypePredicate() {
              let e = this.tsParseThisTypeNode();
              return this.isContextual(114) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(e) : e;
            }
            tsParseNonArrayType() {
              switch (this.state.type) {
                case 131:
                case 132:
                case 133:
                case 85:
                case 86:
                  return this.tsParseLiteralTypeNode();
                case 53:
                  if (this.state.value === "-") {
                    let e = this.startNode(), s = this.lookahead();
                    if (s.type !== 132 && s.type !== 133)
                      throw this.unexpected();
                    return e.literal = this.parseMaybeUnary(), this.finishNode(e, "TSLiteralType");
                  }
                  break;
                case 78:
                  return this.tsParseThisTypeOrThisTypePredicate();
                case 87:
                  return this.tsParseTypeQuery();
                case 83:
                  return this.tsParseImportType();
                case 5:
                  return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
                case 0:
                  return this.tsParseTupleType();
                case 10:
                  return this.tsParseParenthesizedType();
                case 25:
                case 24:
                  return this.tsParseTemplateLiteralType();
                default: {
                  let { type: e } = this.state;
                  if ($(e) || e === 88 || e === 84) {
                    let s = e === 88 ? "TSVoidKeyword" : e === 84 ? "TSNullKeyword" : ql(this.state.value);
                    if (s !== void 0 && this.lookaheadCharCode() !== 46) {
                      let i = this.startNode();
                      return this.next(), this.finishNode(i, s);
                    }
                    return this.tsParseTypeReference();
                  }
                }
              }
              throw this.unexpected();
            }
            tsParseArrayTypeOrHigher() {
              let e = this.tsParseNonArrayType();
              for (; !this.hasPrecedingLineBreak() && this.eat(0); )
                if (this.match(3)) {
                  let s = this.startNodeAtNode(e);
                  s.elementType = e, this.expect(3), e = this.finishNode(s, "TSArrayType");
                } else {
                  let s = this.startNodeAtNode(e);
                  s.objectType = e, s.indexType = this.tsParseType(), this.expect(3), e = this.finishNode(s, "TSIndexedAccessType");
                }
              return e;
            }
            tsParseTypeOperator() {
              let e = this.startNode(), s = this.state.value;
              return this.next(), e.operator = s, e.typeAnnotation = this.tsParseTypeOperatorOrHigher(), s === "readonly" && this.tsCheckTypeAnnotationForReadOnly(e), this.finishNode(e, "TSTypeOperator");
            }
            tsCheckTypeAnnotationForReadOnly(e) {
              switch (e.typeAnnotation.type) {
                case "TSTupleType":
                case "TSArrayType":
                  return;
                default:
                  this.raise(w.UnexpectedReadonly, { at: e });
              }
            }
            tsParseInferType() {
              let e = this.startNode();
              this.expectContextual(113);
              let s = this.startNode();
              return s.name = this.tsParseTypeParameterName(), s.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), e.typeParameter = this.finishNode(s, "TSTypeParameter"), this.finishNode(e, "TSInferType");
            }
            tsParseConstraintForInferType() {
              if (this.eat(81)) {
                let e = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
                if (this.state.inDisallowConditionalTypesContext || !this.match(17))
                  return e;
              }
            }
            tsParseTypeOperatorOrHigher() {
              return Lo(this.state.type) && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
            }
            tsParseUnionOrIntersectionType(e, s, i) {
              let a = this.startNode(), n = this.eat(i), o = [];
              do
                o.push(s());
              while (this.eat(i));
              return o.length === 1 && !n ? o[0] : (a.types = o, this.finishNode(a, e));
            }
            tsParseIntersectionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
            }
            tsParseUnionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
            }
            tsIsStartOfFunctionType() {
              return this.match(47) ? true : this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
            }
            tsSkipParameterStart() {
              if ($(this.state.type) || this.match(78))
                return this.next(), true;
              if (this.match(5)) {
                let { errors: e } = this.state, s = e.length;
                try {
                  return this.parseObjectLike(8, true), e.length === s;
                } catch {
                  return false;
                }
              }
              if (this.match(0)) {
                this.next();
                let { errors: e } = this.state, s = e.length;
                try {
                  return super.parseBindingList(3, 93, true), e.length === s;
                } catch {
                  return false;
                }
              }
              return false;
            }
            tsIsUnambiguouslyStartOfFunctionType() {
              return this.next(), !!(this.match(11) || this.match(21) || this.tsSkipParameterStart() && (this.match(14) || this.match(12) || this.match(17) || this.match(29) || this.match(11) && (this.next(), this.match(19))));
            }
            tsParseTypeOrTypePredicateAnnotation(e) {
              return this.tsInType(() => {
                let s = this.startNode();
                this.expect(e);
                let i = this.startNode(), a = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
                if (a && this.match(78)) {
                  let c = this.tsParseThisTypeOrThisTypePredicate();
                  return c.type === "TSThisType" ? (i.parameterName = c, i.asserts = true, i.typeAnnotation = null, c = this.finishNode(i, "TSTypePredicate")) : (this.resetStartLocationFromNode(c, i), c.asserts = true), s.typeAnnotation = c, this.finishNode(s, "TSTypeAnnotation");
                }
                let n = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
                if (!n)
                  return a ? (i.parameterName = this.parseIdentifier(), i.asserts = a, i.typeAnnotation = null, s.typeAnnotation = this.finishNode(i, "TSTypePredicate"), this.finishNode(s, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, s);
                let o = this.tsParseTypeAnnotation(false);
                return i.parameterName = n, i.typeAnnotation = o, i.asserts = a, s.typeAnnotation = this.finishNode(i, "TSTypePredicate"), this.finishNode(s, "TSTypeAnnotation");
              });
            }
            tsTryParseTypeOrTypePredicateAnnotation() {
              return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
            }
            tsTryParseTypeAnnotation() {
              return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
            }
            tsTryParseType() {
              return this.tsEatThenParseType(14);
            }
            tsParseTypePredicatePrefix() {
              let e = this.parseIdentifier();
              if (this.isContextual(114) && !this.hasPrecedingLineBreak())
                return this.next(), e;
            }
            tsParseTypePredicateAsserts() {
              if (this.state.type !== 107)
                return false;
              let e = this.state.containsEsc;
              return this.next(), !$(this.state.type) && !this.match(78) ? false : (e && this.raise(h.InvalidEscapedReservedWord, { at: this.state.lastTokStartLoc, reservedWord: "asserts" }), true);
            }
            tsParseTypeAnnotation() {
              let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.startNode();
              return this.tsInType(() => {
                e && this.expect(14), s.typeAnnotation = this.tsParseType();
              }), this.finishNode(s, "TSTypeAnnotation");
            }
            tsParseType() {
              Hr(this.state.inType);
              let e = this.tsParseNonConditionalType();
              if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
                return e;
              let s = this.startNodeAtNode(e);
              return s.checkType = e, s.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), s.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), s.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(s, "TSConditionalType");
            }
            isAbstractConstructorSignature() {
              return this.isContextual(122) && this.lookahead().type === 77;
            }
            tsParseNonConditionalType() {
              return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
            }
            tsParseTypeAssertion() {
              this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(w.ReservedTypeAssertion, { at: this.state.startLoc });
              let e = this.startNode();
              return e.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), e.expression = this.parseMaybeUnary(), this.finishNode(e, "TSTypeAssertion");
            }
            tsParseHeritageClause(e) {
              let s = this.state.startLoc, i = this.tsParseDelimitedList("HeritageClauseElement", () => {
                let a = this.startNode();
                return a.expression = this.tsParseEntityName(), this.match(47) && (a.typeParameters = this.tsParseTypeArguments()), this.finishNode(a, "TSExpressionWithTypeArguments");
              });
              return i.length || this.raise(w.EmptyHeritageClauseType, { at: s, token: e }), i;
            }
            tsParseInterfaceDeclaration(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (this.hasFollowingLineBreak())
                return null;
              this.expectContextual(127), s.declare && (e.declare = true), $(this.state.type) ? (e.id = this.parseIdentifier(), this.checkIdentifier(e.id, Ko)) : (e.id = null, this.raise(w.MissingInterfaceName, { at: this.state.startLoc })), e.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.eat(81) && (e.extends = this.tsParseHeritageClause("extends"));
              let i = this.startNode();
              return i.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), e.body = this.finishNode(i, "TSInterfaceBody"), this.finishNode(e, "TSInterfaceDeclaration");
            }
            tsParseTypeAliasDeclaration(e) {
              return e.id = this.parseIdentifier(), this.checkIdentifier(e.id, Wo), e.typeAnnotation = this.tsInType(() => {
                if (e.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.expect(29), this.isContextual(112) && this.lookahead().type !== 16) {
                  let s = this.startNode();
                  return this.next(), this.finishNode(s, "TSIntrinsicKeyword");
                }
                return this.tsParseType();
              }), this.semicolon(), this.finishNode(e, "TSTypeAliasDeclaration");
            }
            tsInNoContext(e) {
              let s = this.state.context;
              this.state.context = [s[0]];
              try {
                return e();
              } finally {
                this.state.context = s;
              }
            }
            tsInType(e) {
              let s = this.state.inType;
              this.state.inType = true;
              try {
                return e();
              } finally {
                this.state.inType = s;
              }
            }
            tsInDisallowConditionalTypesContext(e) {
              let s = this.state.inDisallowConditionalTypesContext;
              this.state.inDisallowConditionalTypesContext = true;
              try {
                return e();
              } finally {
                this.state.inDisallowConditionalTypesContext = s;
              }
            }
            tsInAllowConditionalTypesContext(e) {
              let s = this.state.inDisallowConditionalTypesContext;
              this.state.inDisallowConditionalTypesContext = false;
              try {
                return e();
              } finally {
                this.state.inDisallowConditionalTypesContext = s;
              }
            }
            tsEatThenParseType(e) {
              return this.match(e) ? this.tsNextThenParseType() : void 0;
            }
            tsExpectThenParseType(e) {
              return this.tsDoThenParseType(() => this.expect(e));
            }
            tsNextThenParseType() {
              return this.tsDoThenParseType(() => this.next());
            }
            tsDoThenParseType(e) {
              return this.tsInType(() => (e(), this.tsParseType()));
            }
            tsParseEnumMember() {
              let e = this.startNode();
              return e.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (e.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(e, "TSEnumMember");
            }
            tsParseEnumDeclaration(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              return s.const && (e.const = true), s.declare && (e.declare = true), this.expectContextual(124), e.id = this.parseIdentifier(), this.checkIdentifier(e.id, e.const ? Jo : br), this.expect(5), e.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(e, "TSEnumDeclaration");
            }
            tsParseModuleBlock() {
              let e = this.startNode();
              return this.scope.enter(_e), this.expect(5), super.parseBlockOrModuleBlockBody(e.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(e, "TSModuleBlock");
            }
            tsParseModuleOrNamespaceDeclaration(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (e.id = this.parseIdentifier(), s || this.checkIdentifier(e.id, Xo), this.eat(16)) {
                let i = this.startNode();
                this.tsParseModuleOrNamespaceDeclaration(i, true), e.body = i;
              } else
                this.scope.enter(je), this.prodParam.enter(qe), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
              return this.finishNode(e, "TSModuleDeclaration");
            }
            tsParseAmbientExternalModuleDeclaration(e) {
              return this.isContextual(110) ? (e.global = true, e.id = this.parseIdentifier()) : this.match(131) ? e.id = super.parseStringLiteral(this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(je), this.prodParam.enter(qe), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(e, "TSModuleDeclaration");
            }
            tsParseImportEqualsDeclaration(e, s) {
              e.isExport = s || false, e.id = this.parseIdentifier(), this.checkIdentifier(e.id, Je), this.expect(29);
              let i = this.tsParseModuleReference();
              return e.importKind === "type" && i.type !== "TSExternalModuleReference" && this.raise(w.ImportAliasHasImportType, { at: i }), e.moduleReference = i, this.semicolon(), this.finishNode(e, "TSImportEqualsDeclaration");
            }
            tsIsExternalModuleReference() {
              return this.isContextual(117) && this.lookaheadCharCode() === 40;
            }
            tsParseModuleReference() {
              return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
            }
            tsParseExternalModuleReference() {
              let e = this.startNode();
              if (this.expectContextual(117), this.expect(10), !this.match(131))
                throw this.unexpected();
              return e.expression = super.parseExprAtom(), this.expect(11), this.finishNode(e, "TSExternalModuleReference");
            }
            tsLookAhead(e) {
              let s = this.state.clone(), i = e();
              return this.state = s, i;
            }
            tsTryParseAndCatch(e) {
              let s = this.tryParse((i) => e() || i());
              if (!(s.aborted || !s.node))
                return s.error && (this.state = s.failState), s.node;
            }
            tsTryParse(e) {
              let s = this.state.clone(), i = e();
              if (i !== void 0 && i !== false)
                return i;
              this.state = s;
            }
            tsTryParseDeclare(e) {
              if (this.isLineTerminator())
                return;
              let s = this.state.type, i;
              return this.isContextual(99) && (s = 74, i = "let"), this.tsInAmbientContext(() => {
                if (s === 68)
                  return e.declare = true, super.parseFunctionStatement(e, false, true);
                if (s === 80)
                  return e.declare = true, this.parseClass(e, true, false);
                if (s === 124)
                  return this.tsParseEnumDeclaration(e, { declare: true });
                if (s === 110)
                  return this.tsParseAmbientExternalModuleDeclaration(e);
                if (s === 75 || s === 74)
                  return !this.match(75) || !this.isLookaheadContextual("enum") ? (e.declare = true, this.parseVarStatement(e, i || this.state.value, true)) : (this.expect(75), this.tsParseEnumDeclaration(e, { const: true, declare: true }));
                if (s === 127) {
                  let a = this.tsParseInterfaceDeclaration(e, { declare: true });
                  if (a)
                    return a;
                }
                if ($(s))
                  return this.tsParseDeclaration(e, this.state.value, true, null);
              });
            }
            tsTryParseExportDeclaration() {
              return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
            }
            tsParseExpressionStatement(e, s, i) {
              switch (s.name) {
                case "declare": {
                  let a = this.tsTryParseDeclare(e);
                  if (a)
                    return a.declare = true, a;
                  break;
                }
                case "global":
                  if (this.match(5)) {
                    this.scope.enter(je), this.prodParam.enter(qe);
                    let a = e;
                    return a.global = true, a.id = s, a.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(a, "TSModuleDeclaration");
                  }
                  break;
                default:
                  return this.tsParseDeclaration(e, s.name, false, i);
              }
            }
            tsParseDeclaration(e, s, i, a) {
              switch (s) {
                case "abstract":
                  if (this.tsCheckLineTerminator(i) && (this.match(80) || $(this.state.type)))
                    return this.tsParseAbstractDeclaration(e, a);
                  break;
                case "module":
                  if (this.tsCheckLineTerminator(i)) {
                    if (this.match(131))
                      return this.tsParseAmbientExternalModuleDeclaration(e);
                    if ($(this.state.type))
                      return this.tsParseModuleOrNamespaceDeclaration(e);
                  }
                  break;
                case "namespace":
                  if (this.tsCheckLineTerminator(i) && $(this.state.type))
                    return this.tsParseModuleOrNamespaceDeclaration(e);
                  break;
                case "type":
                  if (this.tsCheckLineTerminator(i) && $(this.state.type))
                    return this.tsParseTypeAliasDeclaration(e);
                  break;
              }
            }
            tsCheckLineTerminator(e) {
              return e ? this.hasFollowingLineBreak() ? false : (this.next(), true) : !this.isLineTerminator();
            }
            tsTryParseGenericAsyncArrowFunction(e) {
              if (!this.match(47))
                return;
              let s = this.state.maybeInArrowParameters;
              this.state.maybeInArrowParameters = true;
              let i = this.tsTryParseAndCatch(() => {
                let a = this.startNodeAt(e);
                return a.typeParameters = this.tsParseTypeParameters(), super.parseFunctionParams(a), a.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), a;
              });
              if (this.state.maybeInArrowParameters = s, !!i)
                return super.parseArrowExpression(i, null, true);
            }
            tsParseTypeArgumentsInExpression() {
              if (this.reScan_lt() === 47)
                return this.tsParseTypeArguments();
            }
            tsParseTypeArguments() {
              let e = this.startNode();
              return e.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), e.params.length === 0 && this.raise(w.EmptyTypeArguments, { at: e }), this.expect(48), this.finishNode(e, "TSTypeParameterInstantiation");
            }
            tsIsDeclarationStart() {
              return Oo(this.state.type);
            }
            isExportDefaultSpecifier() {
              return this.tsIsDeclarationStart() ? false : super.isExportDefaultSpecifier();
            }
            parseAssignableListItem(e, s) {
              let i = this.state.startLoc, a, n = false, o = false;
              if (e !== void 0) {
                let m = {};
                this.tsParseModifiers({ modified: m, allowedModifiers: ["public", "private", "protected", "override", "readonly"] }), a = m.accessibility, o = m.override, n = m.readonly, e === false && (a || n || o) && this.raise(w.UnexpectedParameterModifier, { at: i });
              }
              let c = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(c);
              let p = this.parseMaybeDefault(c.loc.start, c);
              if (a || n || o) {
                let m = this.startNodeAt(i);
                return s.length && (m.decorators = s), a && (m.accessibility = a), n && (m.readonly = n), o && (m.override = o), p.type !== "Identifier" && p.type !== "AssignmentPattern" && this.raise(w.UnsupportedParameterPropertyKind, { at: m }), m.parameter = p, this.finishNode(m, "TSParameterProperty");
              }
              return s.length && (c.decorators = s), p;
            }
            isSimpleParameter(e) {
              return e.type === "TSParameterProperty" && super.isSimpleParameter(e.parameter) || super.isSimpleParameter(e);
            }
            parseFunctionBodyAndFinish(e, s) {
              let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              this.match(14) && (e.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
              let a = s === "FunctionDeclaration" ? "TSDeclareFunction" : s === "ClassMethod" || s === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
              return a && !this.match(5) && this.isLineTerminator() ? this.finishNode(e, a) : a === "TSDeclareFunction" && this.state.isAmbientContext && (this.raise(w.DeclareFunctionHasImplementation, { at: e }), e.declare) ? super.parseFunctionBodyAndFinish(e, a, i) : super.parseFunctionBodyAndFinish(e, s, i);
            }
            registerFunctionStatementId(e) {
              !e.body && e.id ? this.checkIdentifier(e.id, Sr) : super.registerFunctionStatementId(e);
            }
            tsCheckForInvalidTypeCasts(e) {
              e.forEach((s) => {
                (s == null ? void 0 : s.type) === "TSTypeCastExpression" && this.raise(w.UnexpectedTypeAnnotation, { at: s.typeAnnotation });
              });
            }
            toReferencedList(e, s) {
              return this.tsCheckForInvalidTypeCasts(e), e;
            }
            parseArrayLike(e, s, i, a) {
              let n = super.parseArrayLike(e, s, i, a);
              return n.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(n.elements), n;
            }
            parseSubscript(e, s, i, a) {
              if (!this.hasPrecedingLineBreak() && this.match(35)) {
                this.state.canStartJSXElement = false, this.next();
                let o = this.startNodeAt(s);
                return o.expression = e, this.finishNode(o, "TSNonNullExpression");
              }
              let n = false;
              if (this.match(18) && this.lookaheadCharCode() === 60) {
                if (i)
                  return a.stop = true, e;
                a.optionalChainMember = n = true, this.next();
              }
              if (this.match(47) || this.match(51)) {
                let o, c = this.tsTryParseAndCatch(() => {
                  if (!i && this.atPossibleAsyncArrow(e)) {
                    let P = this.tsTryParseGenericAsyncArrowFunction(s);
                    if (P)
                      return P;
                  }
                  let p = this.tsParseTypeArgumentsInExpression();
                  if (!p)
                    return;
                  if (n && !this.match(10)) {
                    o = this.state.curPosition();
                    return;
                  }
                  if (ot(this.state.type)) {
                    let P = super.parseTaggedTemplateExpression(e, s, a);
                    return P.typeParameters = p, P;
                  }
                  if (!i && this.eat(10)) {
                    let P = this.startNodeAt(s);
                    return P.callee = e, P.arguments = this.parseCallExpressionArguments(11, false), this.tsCheckForInvalidTypeCasts(P.arguments), P.typeParameters = p, a.optionalChainMember && (P.optional = n), this.finishCallExpression(P, a.optionalChainMember);
                  }
                  let m = this.state.type;
                  if (m === 48 || m === 52 || m !== 10 && Kt(m) && !this.hasPrecedingLineBreak())
                    return;
                  let x = this.startNodeAt(s);
                  return x.expression = e, x.typeParameters = p, this.finishNode(x, "TSInstantiationExpression");
                });
                if (o && this.unexpected(o, 10), c)
                  return c.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(w.InvalidPropertyAccessAfterInstantiationExpression, { at: this.state.startLoc }), c;
              }
              return super.parseSubscript(e, s, i, a);
            }
            parseNewCallee(e) {
              var s;
              super.parseNewCallee(e);
              let { callee: i } = e;
              i.type === "TSInstantiationExpression" && !((s = i.extra) != null && s.parenthesized) && (e.typeParameters = i.typeParameters, e.callee = i.expression);
            }
            parseExprOp(e, s, i) {
              let a;
              if (nt(58) > i && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (a = this.isContextual(118)))) {
                let n = this.startNodeAt(s);
                return n.expression = e, n.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (a && this.raise(h.UnexpectedKeyword, { at: this.state.startLoc, keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(n, a ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(n, s, i);
              }
              return super.parseExprOp(e, s, i);
            }
            checkReservedWord(e, s, i, a) {
              this.state.isAmbientContext || super.checkReservedWord(e, s, i, a);
            }
            checkImportReflection(e) {
              super.checkImportReflection(e), e.module && e.importKind !== "value" && this.raise(w.ImportReflectionHasImportType, { at: e.specifiers[0].loc.start });
            }
            checkDuplicateExports() {
            }
            parseImport(e) {
              if (e.importKind = "value", $(this.state.type) || this.match(55) || this.match(5)) {
                let i = this.lookahead();
                if (this.isContextual(128) && i.type !== 12 && i.type !== 97 && i.type !== 29 && (e.importKind = "type", this.next(), i = this.lookahead()), $(this.state.type) && i.type === 29)
                  return this.tsParseImportEqualsDeclaration(e);
              }
              let s = super.parseImport(e);
              return s.importKind === "type" && s.specifiers.length > 1 && s.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(w.TypeImportCannotSpecifyDefaultAndNamed, { at: s }), s;
            }
            parseExport(e, s) {
              if (this.match(83))
                return this.next(), this.isContextual(128) && this.lookaheadCharCode() !== 61 ? (e.importKind = "type", this.next()) : e.importKind = "value", this.tsParseImportEqualsDeclaration(e, true);
              if (this.eat(29)) {
                let i = e;
                return i.expression = super.parseExpression(), this.semicolon(), this.finishNode(i, "TSExportAssignment");
              } else if (this.eatContextual(93)) {
                let i = e;
                return this.expectContextual(126), i.id = this.parseIdentifier(), this.semicolon(), this.finishNode(i, "TSNamespaceExportDeclaration");
              } else
                return this.isContextual(128) && this.lookahead().type === 5 ? (this.next(), e.exportKind = "type") : e.exportKind = "value", super.parseExport(e, s);
            }
            isAbstractClass() {
              return this.isContextual(122) && this.lookahead().type === 80;
            }
            parseExportDefaultExpression() {
              if (this.isAbstractClass()) {
                let e = this.startNode();
                return this.next(), e.abstract = true, this.parseClass(e, true, true);
              }
              if (this.match(127)) {
                let e = this.tsParseInterfaceDeclaration(this.startNode());
                if (e)
                  return e;
              }
              return super.parseExportDefaultExpression();
            }
            parseVarStatement(e, s) {
              let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, { isAmbientContext: a } = this.state, n = super.parseVarStatement(e, s, i || a);
              if (!a)
                return n;
              for (let { id: o, init: c } of n.declarations)
                !c || (s !== "const" || !!o.typeAnnotation ? this.raise(w.InitializerNotAllowedInAmbientContext, { at: c }) : c.type !== "StringLiteral" && c.type !== "BooleanLiteral" && c.type !== "NumericLiteral" && c.type !== "BigIntLiteral" && (c.type !== "TemplateLiteral" || c.expressions.length > 0) && !$l(c) && this.raise(w.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, { at: c }));
              return n;
            }
            parseStatementContent(e, s, i) {
              if (this.match(75) && this.isLookaheadContextual("enum")) {
                let a = this.startNode();
                return this.expect(75), this.tsParseEnumDeclaration(a, { const: true });
              }
              if (this.isContextual(124))
                return this.tsParseEnumDeclaration(this.startNode());
              if (this.isContextual(127)) {
                let a = this.tsParseInterfaceDeclaration(this.startNode());
                if (a)
                  return a;
              }
              return super.parseStatementContent(e, s, i);
            }
            parseAccessModifier() {
              return this.tsParseModifier(["public", "protected", "private"]);
            }
            tsHasSomeModifiers(e, s) {
              return s.some((i) => $r(i) ? e.accessibility === i : !!e[i]);
            }
            tsIsStartOfStaticBlocks() {
              return this.isContextual(104) && this.lookaheadCharCode() === 123;
            }
            parseClassMember(e, s, i) {
              let a = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
              this.tsParseModifiers({ modified: s, allowedModifiers: a, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: w.InvalidModifierOnTypeParameterPositions });
              let n = /* @__PURE__ */ __name(() => {
                this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(s, a) && this.raise(w.StaticBlockCannotHaveModifier, { at: this.state.curPosition() }), super.parseClassStaticBlock(e, s)) : this.parseClassMemberWithIsStatic(e, s, i, !!s.static);
              }, "n");
              s.declare ? this.tsInAmbientContext(n) : n();
            }
            parseClassMemberWithIsStatic(e, s, i, a) {
              let n = this.tsTryParseIndexSignature(s);
              if (n) {
                e.body.push(n), s.abstract && this.raise(w.IndexSignatureHasAbstract, { at: s }), s.accessibility && this.raise(w.IndexSignatureHasAccessibility, { at: s, modifier: s.accessibility }), s.declare && this.raise(w.IndexSignatureHasDeclare, { at: s }), s.override && this.raise(w.IndexSignatureHasOverride, { at: s });
                return;
              }
              !this.state.inAbstractClass && s.abstract && this.raise(w.NonAbstractClassHasAbstractMethod, { at: s }), s.override && (i.hadSuperClass || this.raise(w.OverrideNotInSubClass, { at: s })), super.parseClassMemberWithIsStatic(e, s, i, a);
            }
            parsePostMemberNameModifiers(e) {
              this.eat(17) && (e.optional = true), e.readonly && this.match(10) && this.raise(w.ClassMethodHasReadonly, { at: e }), e.declare && this.match(10) && this.raise(w.ClassMethodHasDeclare, { at: e });
            }
            parseExpressionStatement(e, s, i) {
              return (s.type === "Identifier" ? this.tsParseExpressionStatement(e, s, i) : void 0) || super.parseExpressionStatement(e, s, i);
            }
            shouldParseExportDeclaration() {
              return this.tsIsDeclarationStart() ? true : super.shouldParseExportDeclaration();
            }
            parseConditional(e, s, i) {
              if (!this.state.maybeInArrowParameters || !this.match(17))
                return super.parseConditional(e, s, i);
              let a = this.tryParse(() => super.parseConditional(e, s));
              return a.node ? (a.error && (this.state = a.failState), a.node) : (a.error && super.setOptionalParametersError(i, a.error), e);
            }
            parseParenItem(e, s) {
              if (e = super.parseParenItem(e, s), this.eat(17) && (e.optional = true, this.resetEndLocation(e)), this.match(14)) {
                let i = this.startNodeAt(s);
                return i.expression = e, i.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(i, "TSTypeCastExpression");
              }
              return e;
            }
            parseExportDeclaration(e) {
              if (!this.state.isAmbientContext && this.isContextual(123))
                return this.tsInAmbientContext(() => this.parseExportDeclaration(e));
              let s = this.state.startLoc, i = this.eatContextual(123);
              if (i && (this.isContextual(123) || !this.shouldParseExportDeclaration()))
                throw this.raise(w.ExpectedAmbientAfterExportDeclare, { at: this.state.startLoc });
              let n = $(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(e);
              return n ? ((n.type === "TSInterfaceDeclaration" || n.type === "TSTypeAliasDeclaration" || i) && (e.exportKind = "type"), i && (this.resetStartLocation(n, s), n.declare = true), n) : null;
            }
            parseClassId(e, s, i, a) {
              if ((!s || i) && this.isContextual(111))
                return;
              super.parseClassId(e, s, i, e.declare ? Sr : Er);
              let n = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
              n && (e.typeParameters = n);
            }
            parseClassPropertyAnnotation(e) {
              !e.optional && this.eat(35) && (e.definite = true);
              let s = this.tsTryParseTypeAnnotation();
              s && (e.typeAnnotation = s);
            }
            parseClassProperty(e) {
              if (this.parseClassPropertyAnnotation(e), this.state.isAmbientContext && !(e.readonly && !e.typeAnnotation) && this.match(29) && this.raise(w.DeclareClassFieldHasInitializer, { at: this.state.startLoc }), e.abstract && this.match(29)) {
                let { key: s } = e;
                this.raise(w.AbstractPropertyHasInitializer, { at: this.state.startLoc, propertyName: s.type === "Identifier" && !e.computed ? s.name : `[${this.input.slice(s.start, s.end)}]` });
              }
              return super.parseClassProperty(e);
            }
            parseClassPrivateProperty(e) {
              return e.abstract && this.raise(w.PrivateElementHasAbstract, { at: e }), e.accessibility && this.raise(w.PrivateElementHasAccessibility, { at: e, modifier: e.accessibility }), this.parseClassPropertyAnnotation(e), super.parseClassPrivateProperty(e);
            }
            pushClassMethod(e, s, i, a, n, o) {
              let c = this.tsTryParseTypeParameters();
              c && n && this.raise(w.ConstructorHasTypeParameters, { at: c });
              let { declare: p = false, kind: m } = s;
              p && (m === "get" || m === "set") && this.raise(w.DeclareAccessor, { at: s, kind: m }), c && (s.typeParameters = c), super.pushClassMethod(e, s, i, a, n, o);
            }
            pushClassPrivateMethod(e, s, i, a) {
              let n = this.tsTryParseTypeParameters();
              n && (s.typeParameters = n), super.pushClassPrivateMethod(e, s, i, a);
            }
            declareClassPrivateMethodInScope(e, s) {
              e.type !== "TSDeclareMethod" && (e.type === "MethodDefinition" && !e.value.body || super.declareClassPrivateMethodInScope(e, s));
            }
            parseClassSuper(e) {
              super.parseClassSuper(e), e.superClass && (this.match(47) || this.match(51)) && (e.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(111) && (e.implements = this.tsParseHeritageClause("implements"));
            }
            parseObjPropValue(e, s, i, a, n, o, c) {
              let p = this.tsTryParseTypeParameters();
              return p && (e.typeParameters = p), super.parseObjPropValue(e, s, i, a, n, o, c);
            }
            parseFunctionParams(e, s) {
              let i = this.tsTryParseTypeParameters();
              i && (e.typeParameters = i), super.parseFunctionParams(e, s);
            }
            parseVarId(e, s) {
              super.parseVarId(e, s), e.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (e.definite = true);
              let i = this.tsTryParseTypeAnnotation();
              i && (e.id.typeAnnotation = i, this.resetEndLocation(e.id));
            }
            parseAsyncArrowFromCallExpression(e, s) {
              return this.match(14) && (e.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(e, s);
            }
            parseMaybeAssign(e, s) {
              var i, a, n, o, c, p, m;
              let x, P, b;
              if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
                if (x = this.state.clone(), P = this.tryParse(() => super.parseMaybeAssign(e, s), x), !P.error)
                  return P.node;
                let { context: Q } = this.state, Z = Q[Q.length - 1];
                (Z === H.j_oTag || Z === H.j_expr) && Q.pop();
              }
              if (!((i = P) != null && i.error) && !this.match(47))
                return super.parseMaybeAssign(e, s);
              (!x || x === this.state) && (x = this.state.clone());
              let O, R = this.tryParse((Q) => {
                var Z, X;
                O = this.tsParseTypeParameters();
                let re = super.parseMaybeAssign(e, s);
                return (re.type !== "ArrowFunctionExpression" || (Z = re.extra) != null && Z.parenthesized) && Q(), ((X = O) == null ? void 0 : X.params.length) !== 0 && this.resetStartLocationFromNode(re, O), re.typeParameters = O, re;
              }, x);
              if (!R.error && !R.aborted)
                return O && this.reportReservedArrowTypeParam(O), R.node;
              if (!P && (Hr(!this.hasPlugin("jsx")), b = this.tryParse(() => super.parseMaybeAssign(e, s), x), !b.error))
                return b.node;
              if ((a = P) != null && a.node)
                return this.state = P.failState, P.node;
              if (R.node)
                return this.state = R.failState, O && this.reportReservedArrowTypeParam(O), R.node;
              if ((n = b) != null && n.node)
                return this.state = b.failState, b.node;
              throw (o = P) != null && o.thrown ? P.error : R.thrown ? R.error : (c = b) != null && c.thrown ? b.error : ((p = P) == null ? void 0 : p.error) || R.error || ((m = b) == null ? void 0 : m.error);
            }
            reportReservedArrowTypeParam(e) {
              var s;
              e.params.length === 1 && !((s = e.extra) != null && s.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(w.ReservedArrowTypeParam, { at: e });
            }
            parseMaybeUnary(e, s) {
              return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(e, s);
            }
            parseArrow(e) {
              if (this.match(14)) {
                let s = this.tryParse((i) => {
                  let a = this.tsParseTypeOrTypePredicateAnnotation(14);
                  return (this.canInsertSemicolon() || !this.match(19)) && i(), a;
                });
                if (s.aborted)
                  return;
                s.thrown || (s.error && (this.state = s.failState), e.returnType = s.node);
              }
              return super.parseArrow(e);
            }
            parseAssignableListItemTypes(e) {
              this.eat(17) && (e.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType && this.raise(w.PatternIsOptional, { at: e }), e.optional = true);
              let s = this.tsTryParseTypeAnnotation();
              return s && (e.typeAnnotation = s), this.resetEndLocation(e), e;
            }
            isAssignable(e, s) {
              switch (e.type) {
                case "TSTypeCastExpression":
                  return this.isAssignable(e.expression, s);
                case "TSParameterProperty":
                  return true;
                default:
                  return super.isAssignable(e, s);
              }
            }
            toAssignable(e) {
              let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              switch (e.type) {
                case "ParenthesizedExpression":
                  this.toAssignableParenthesizedExpression(e, s);
                  break;
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                  s ? this.expressionScope.recordArrowParemeterBindingError(w.UnexpectedTypeCastInParameter, { at: e }) : this.raise(w.UnexpectedTypeCastInParameter, { at: e }), this.toAssignable(e.expression, s);
                  break;
                case "AssignmentExpression":
                  !s && e.left.type === "TSTypeCastExpression" && (e.left = this.typeCastToParameter(e.left));
                default:
                  super.toAssignable(e, s);
              }
            }
            toAssignableParenthesizedExpression(e, s) {
              switch (e.expression.type) {
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                case "ParenthesizedExpression":
                  this.toAssignable(e.expression, s);
                  break;
                default:
                  super.toAssignable(e, s);
              }
            }
            checkToRestConversion(e, s) {
              switch (e.type) {
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSTypeAssertion":
                case "TSNonNullExpression":
                  this.checkToRestConversion(e.expression, false);
                  break;
                default:
                  super.checkToRestConversion(e, s);
              }
            }
            isValidLVal(e, s, i) {
              return Rl({ TSTypeCastExpression: true, TSParameterProperty: "parameter", TSNonNullExpression: "expression", TSAsExpression: (i !== Te || !s) && ["expression", true], TSSatisfiesExpression: (i !== Te || !s) && ["expression", true], TSTypeAssertion: (i !== Te || !s) && ["expression", true] }, e) || super.isValidLVal(e, s, i);
            }
            parseBindingAtom() {
              switch (this.state.type) {
                case 78:
                  return this.parseIdentifier(true);
                default:
                  return super.parseBindingAtom();
              }
            }
            parseMaybeDecoratorArguments(e) {
              if (this.match(47) || this.match(51)) {
                let s = this.tsParseTypeArgumentsInExpression();
                if (this.match(10)) {
                  let i = super.parseMaybeDecoratorArguments(e);
                  return i.typeParameters = s, i;
                }
                this.unexpected(null, 10);
              }
              return super.parseMaybeDecoratorArguments(e);
            }
            checkCommaAfterRest(e) {
              return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === e ? (this.next(), false) : super.checkCommaAfterRest(e);
            }
            isClassMethod() {
              return this.match(47) || super.isClassMethod();
            }
            isClassProperty() {
              return this.match(35) || this.match(14) || super.isClassProperty();
            }
            parseMaybeDefault(e, s) {
              let i = super.parseMaybeDefault(e, s);
              return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(w.TypeAnnotationAfterAssign, { at: i.typeAnnotation }), i;
            }
            getTokenFromCode(e) {
              if (this.state.inType) {
                if (e === 62)
                  return this.finishOp(48, 1);
                if (e === 60)
                  return this.finishOp(47, 1);
              }
              return super.getTokenFromCode(e);
            }
            reScan_lt_gt() {
              let { type: e } = this.state;
              e === 47 ? (this.state.pos -= 1, this.readToken_lt()) : e === 48 && (this.state.pos -= 1, this.readToken_gt());
            }
            reScan_lt() {
              let { type: e } = this.state;
              return e === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : e;
            }
            toAssignableList(e, s, i) {
              for (let a = 0; a < e.length; a++) {
                let n = e[a];
                (n == null ? void 0 : n.type) === "TSTypeCastExpression" && (e[a] = this.typeCastToParameter(n));
              }
              super.toAssignableList(e, s, i);
            }
            typeCastToParameter(e) {
              return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
            }
            shouldParseArrow(e) {
              return this.match(14) ? e.every((s) => this.isAssignable(s, true)) : super.shouldParseArrow(e);
            }
            shouldParseAsyncArrow() {
              return this.match(14) || super.shouldParseAsyncArrow();
            }
            canHaveLeadingDecorator() {
              return super.canHaveLeadingDecorator() || this.isAbstractClass();
            }
            jsxParseOpeningElementAfterName(e) {
              if (this.match(47) || this.match(51)) {
                let s = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
                s && (e.typeParameters = s);
              }
              return super.jsxParseOpeningElementAfterName(e);
            }
            getGetterSetterExpectedParamCount(e) {
              let s = super.getGetterSetterExpectedParamCount(e), a = this.getObjectOrClassMethodParams(e)[0];
              return a && this.isThisParam(a) ? s + 1 : s;
            }
            parseCatchClauseParam() {
              let e = super.parseCatchClauseParam(), s = this.tsTryParseTypeAnnotation();
              return s && (e.typeAnnotation = s, this.resetEndLocation(e)), e;
            }
            tsInAmbientContext(e) {
              let s = this.state.isAmbientContext;
              this.state.isAmbientContext = true;
              try {
                return e();
              } finally {
                this.state.isAmbientContext = s;
              }
            }
            parseClass(e, s, i) {
              let a = this.state.inAbstractClass;
              this.state.inAbstractClass = !!e.abstract;
              try {
                return super.parseClass(e, s, i);
              } finally {
                this.state.inAbstractClass = a;
              }
            }
            tsParseAbstractDeclaration(e, s) {
              if (this.match(80))
                return e.abstract = true, this.maybeTakeDecorators(s, this.parseClass(e, true, false));
              if (this.isContextual(127)) {
                if (!this.hasFollowingLineBreak())
                  return e.abstract = true, this.raise(w.NonClassMethodPropertyHasAbstractModifer, { at: e }), this.tsParseInterfaceDeclaration(e);
              } else
                this.unexpected(null, 80);
            }
            parseMethod(e, s, i, a, n, o, c) {
              let p = super.parseMethod(e, s, i, a, n, o, c);
              if (p.abstract && (this.hasPlugin("estree") ? !!p.value.body : !!p.body)) {
                let { key: x } = p;
                this.raise(w.AbstractMethodHasImplementation, { at: p, methodName: x.type === "Identifier" && !p.computed ? x.name : `[${this.input.slice(x.start, x.end)}]` });
              }
              return p;
            }
            tsParseTypeParameterName() {
              return this.parseIdentifier().name;
            }
            shouldParseAsAmbientContext() {
              return !!this.getPluginOption("typescript", "dts");
            }
            parse() {
              return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
            }
            getExpression() {
              return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
            }
            parseExportSpecifier(e, s, i, a) {
              return !s && a ? (this.parseTypeOnlyImportExportSpecifier(e, false, i), this.finishNode(e, "ExportSpecifier")) : (e.exportKind = "value", super.parseExportSpecifier(e, s, i, a));
            }
            parseImportSpecifier(e, s, i, a, n) {
              return !s && a ? (this.parseTypeOnlyImportExportSpecifier(e, true, i), this.finishNode(e, "ImportSpecifier")) : (e.importKind = "value", super.parseImportSpecifier(e, s, i, a, i ? wr : Je));
            }
            parseTypeOnlyImportExportSpecifier(e, s, i) {
              let a = s ? "imported" : "local", n = s ? "local" : "exported", o = e[a], c, p = false, m = true, x = o.loc.start;
              if (this.isContextual(93)) {
                let b = this.parseIdentifier();
                if (this.isContextual(93)) {
                  let O = this.parseIdentifier();
                  pe(this.state.type) ? (p = true, o = b, c = s ? this.parseIdentifier() : this.parseModuleExportName(), m = false) : (c = O, m = false);
                } else
                  pe(this.state.type) ? (m = false, c = s ? this.parseIdentifier() : this.parseModuleExportName()) : (p = true, o = b);
              } else
                pe(this.state.type) && (p = true, s ? (o = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(o.name, o.loc.start, true, true)) : o = this.parseModuleExportName());
              p && i && this.raise(s ? w.TypeModifierIsUsedInTypeImports : w.TypeModifierIsUsedInTypeExports, { at: x }), e[a] = o, e[n] = c;
              let P = s ? "importKind" : "exportKind";
              e[P] = p ? "type" : "value", m && this.eatContextual(93) && (e[n] = s ? this.parseIdentifier() : this.parseModuleExportName()), e[n] || (e[n] = xe(e[a])), s && this.checkIdentifier(e[n], p ? wr : Je);
            }
          }, "Hl");
          function $l(t) {
            if (t.type !== "MemberExpression")
              return false;
            let { computed: r, property: e } = t;
            return r && e.type !== "StringLiteral" && (e.type !== "TemplateLiteral" || e.expressions.length > 0) ? false : zr(t.object);
          }
          __name($l, "$l");
          function zr(t) {
            return t.type === "Identifier" ? true : t.type !== "MemberExpression" || t.computed ? false : zr(t.object);
          }
          __name(zr, "zr");
          var Vr = _`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." }), zl = /* @__PURE__ */ __name((t) => class extends t {
            parsePlaceholder(e) {
              if (this.match(142)) {
                let s = this.startNode();
                return this.next(), this.assertNoSpace(), s.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(142), this.finishPlaceholder(s, e);
              }
            }
            finishPlaceholder(e, s) {
              let i = !!(e.expectedNode && e.type === "Placeholder");
              return e.expectedNode = s, i ? e : this.finishNode(e, "Placeholder");
            }
            getTokenFromCode(e) {
              return e === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(142, 2) : super.getTokenFromCode(e);
            }
            parseExprAtom(e) {
              return this.parsePlaceholder("Expression") || super.parseExprAtom(e);
            }
            parseIdentifier(e) {
              return this.parsePlaceholder("Identifier") || super.parseIdentifier(e);
            }
            checkReservedWord(e, s, i, a) {
              e !== void 0 && super.checkReservedWord(e, s, i, a);
            }
            parseBindingAtom() {
              return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
            }
            isValidLVal(e, s, i) {
              return e === "Placeholder" || super.isValidLVal(e, s, i);
            }
            toAssignable(e, s) {
              e && e.type === "Placeholder" && e.expectedNode === "Expression" ? e.expectedNode = "Pattern" : super.toAssignable(e, s);
            }
            hasFollowingIdentifier(e) {
              return super.hasFollowingIdentifier(e) ? true : e ? false : this.lookahead().type === 142;
            }
            verifyBreakContinue(e, s) {
              e.label && e.label.type === "Placeholder" || super.verifyBreakContinue(e, s);
            }
            parseExpressionStatement(e, s) {
              if (s.type !== "Placeholder" || s.extra && s.extra.parenthesized)
                return super.parseExpressionStatement(e, s);
              if (this.match(14)) {
                let i = e;
                return i.label = this.finishPlaceholder(s, "Identifier"), this.next(), i.body = super.parseStatement("label"), this.finishNode(i, "LabeledStatement");
              }
              return this.semicolon(), e.name = s.name, this.finishPlaceholder(e, "Statement");
            }
            parseBlock(e, s, i) {
              return this.parsePlaceholder("BlockStatement") || super.parseBlock(e, s, i);
            }
            parseFunctionId(e) {
              return this.parsePlaceholder("Identifier") || super.parseFunctionId(e);
            }
            parseClass(e, s, i) {
              let a = s ? "ClassDeclaration" : "ClassExpression";
              this.next();
              let n = this.state.strict, o = this.parsePlaceholder("Identifier");
              if (o)
                if (this.match(81) || this.match(142) || this.match(5))
                  e.id = o;
                else {
                  if (i || !s)
                    return e.id = null, e.body = this.finishPlaceholder(o, "ClassBody"), this.finishNode(e, a);
                  throw this.raise(Vr.ClassNameIsRequired, { at: this.state.startLoc });
                }
              else
                this.parseClassId(e, s, i);
              return super.parseClassSuper(e), e.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!e.superClass, n), this.finishNode(e, a);
            }
            parseExport(e, s) {
              let i = this.parsePlaceholder("Identifier");
              if (!i)
                return super.parseExport(e, s);
              if (!this.isContextual(97) && !this.match(12))
                return e.specifiers = [], e.source = null, e.declaration = this.finishPlaceholder(i, "Declaration"), this.finishNode(e, "ExportNamedDeclaration");
              this.expectPlugin("exportDefaultFrom");
              let a = this.startNode();
              return a.exported = i, e.specifiers = [this.finishNode(a, "ExportDefaultSpecifier")], super.parseExport(e, s);
            }
            isExportDefaultSpecifier() {
              if (this.match(65)) {
                let e = this.nextTokenStart();
                if (this.isUnparsedContextual(e, "from") && this.input.startsWith(Pe(142), this.nextTokenStartSince(e + 4)))
                  return true;
              }
              return super.isExportDefaultSpecifier();
            }
            maybeParseExportDefaultSpecifier(e) {
              return e.specifiers && e.specifiers.length > 0 ? true : super.maybeParseExportDefaultSpecifier(e);
            }
            checkExport(e) {
              let { specifiers: s } = e;
              s != null && s.length && (e.specifiers = s.filter((i) => i.exported.type === "Placeholder")), super.checkExport(e), e.specifiers = s;
            }
            parseImport(e) {
              let s = this.parsePlaceholder("Identifier");
              if (!s)
                return super.parseImport(e);
              if (e.specifiers = [], !this.isContextual(97) && !this.match(12))
                return e.source = this.finishPlaceholder(s, "StringLiteral"), this.semicolon(), this.finishNode(e, "ImportDeclaration");
              let i = this.startNodeAtNode(s);
              return i.local = s, e.specifiers.push(this.finishNode(i, "ImportDefaultSpecifier")), this.eat(12) && (this.maybeParseStarImportSpecifier(e) || this.parseNamedImportSpecifiers(e)), this.expectContextual(97), e.source = this.parseImportSource(), this.semicolon(), this.finishNode(e, "ImportDeclaration");
            }
            parseImportSource() {
              return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
            }
            assertNoSpace() {
              this.state.start > this.state.lastTokEndLoc.index && this.raise(Vr.UnexpectedSpace, { at: this.state.lastTokEndLoc });
            }
          }, "zl"), Vl = /* @__PURE__ */ __name((t) => class extends t {
            parseV8Intrinsic() {
              if (this.match(54)) {
                let e = this.state.startLoc, s = this.startNode();
                if (this.next(), $(this.state.type)) {
                  let i = this.parseIdentifierName(), a = this.createIdentifier(s, i);
                  if (a.type = "V8IntrinsicIdentifier", this.match(10))
                    return a;
                }
                this.unexpected(e);
              }
            }
            parseExprAtom(e) {
              return this.parseV8Intrinsic() || super.parseExprAtom(e);
            }
          }, "Vl");
          function se(t, r) {
            let [e, s] = typeof r == "string" ? [r, {}] : r, i = Object.keys(s), a = i.length === 0;
            return t.some((n) => {
              if (typeof n == "string")
                return a && n === e;
              {
                let [o, c] = n;
                if (o !== e)
                  return false;
                for (let p of i)
                  if (c[p] !== s[p])
                    return false;
                return true;
              }
            });
          }
          __name(se, "se");
          function ke(t, r, e) {
            let s = t.find((i) => Array.isArray(i) ? i[0] === r : i === r);
            return s && Array.isArray(s) && s.length > 1 ? s[1][e] : null;
          }
          __name(ke, "ke");
          var Kr = ["minimal", "fsharp", "hack", "smart"], Wr = ["^^", "@@", "^", "%", "#"], Gr = ["hash", "bar"];
          function Kl(t) {
            if (se(t, "decorators")) {
              if (se(t, "decorators-legacy"))
                throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              let r = ke(t, "decorators", "decoratorsBeforeExport");
              if (r != null && typeof r != "boolean")
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
              let e = ke(t, "decorators", "allowCallParenthesized");
              if (e != null && typeof e != "boolean")
                throw new Error("'allowCallParenthesized' must be a boolean.");
            }
            if (se(t, "flow") && se(t, "typescript"))
              throw new Error("Cannot combine flow and typescript plugins.");
            if (se(t, "placeholders") && se(t, "v8intrinsic"))
              throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (se(t, "pipelineOperator")) {
              let r = ke(t, "pipelineOperator", "proposal");
              if (!Kr.includes(r)) {
                let s = Kr.map((i) => `"${i}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${s}.`);
              }
              let e = se(t, ["recordAndTuple", { syntaxType: "hash" }]);
              if (r === "hack") {
                if (se(t, "placeholders"))
                  throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (se(t, "v8intrinsic"))
                  throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                let s = ke(t, "pipelineOperator", "topicToken");
                if (!Wr.includes(s)) {
                  let i = Wr.map((a) => `"${a}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${i}.`);
                }
                if (s === "#" && e)
                  throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
              } else if (r === "smart" && e)
                throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
            if (se(t, "moduleAttributes")) {
              if (se(t, "importAssertions"))
                throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
              if (ke(t, "moduleAttributes", "version") !== "may-2020")
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (se(t, "recordAndTuple") && ke(t, "recordAndTuple", "syntaxType") != null && !Gr.includes(ke(t, "recordAndTuple", "syntaxType")))
              throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + Gr.map((r) => `'${r}'`).join(", "));
            if (se(t, "asyncDoExpressions") && !se(t, "doExpressions")) {
              let r = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw r.missingPlugins = "doExpressions", r;
            }
          }
          __name(Kl, "Kl");
          var Jr = { estree: Me, jsx: Ml, flow: Ll, typescript: Hl, v8intrinsic: Vl, placeholders: zl }, Wl = Object.keys(Jr), Xr = { sourceType: "script", sourceFilename: void 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true };
          function Gl(t) {
            let r = {};
            for (let e of Object.keys(Xr))
              r[e] = t && t[e] != null ? t[e] : Xr[e];
            return r;
          }
          __name(Gl, "Gl");
          var Jl = /* @__PURE__ */ __name((t, r) => Object.hasOwnProperty.call(t, r) && t[r], "Jl"), Yr = /* @__PURE__ */ __name((t) => t.type === "ParenthesizedExpression" ? Yr(t.expression) : t, "Yr"), Xl = /* @__PURE__ */ __name(class extends wl {
            toAssignable(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var e, s;
              let i;
              switch ((t.type === "ParenthesizedExpression" || (e = t.extra) != null && e.parenthesized) && (i = Yr(t), r ? i.type === "Identifier" ? this.expressionScope.recordArrowParemeterBindingError(h.InvalidParenthesizedAssignment, { at: t }) : i.type !== "MemberExpression" && this.raise(h.InvalidParenthesizedAssignment, { at: t }) : this.raise(h.InvalidParenthesizedAssignment, { at: t })), t.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                case "RestElement":
                  break;
                case "ObjectExpression":
                  t.type = "ObjectPattern";
                  for (let n = 0, o = t.properties.length, c = o - 1; n < o; n++) {
                    var a;
                    let p = t.properties[n], m = n === c;
                    this.toAssignableObjectExpressionProp(p, m, r), m && p.type === "RestElement" && (a = t.extra) != null && a.trailingCommaLoc && this.raise(h.RestTrailingComma, { at: t.extra.trailingCommaLoc });
                  }
                  break;
                case "ObjectProperty": {
                  let { key: n, value: o } = t;
                  this.isPrivateName(n) && this.classScope.usePrivateName(this.getPrivateNameSV(n), n.loc.start), this.toAssignable(o, r);
                  break;
                }
                case "SpreadElement":
                  throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
                case "ArrayExpression":
                  t.type = "ArrayPattern", this.toAssignableList(t.elements, (s = t.extra) == null ? void 0 : s.trailingCommaLoc, r);
                  break;
                case "AssignmentExpression":
                  t.operator !== "=" && this.raise(h.MissingEqInAssignment, { at: t.left.loc.end }), t.type = "AssignmentPattern", delete t.operator, this.toAssignable(t.left, r);
                  break;
                case "ParenthesizedExpression":
                  this.toAssignable(i, r);
                  break;
              }
            }
            toAssignableObjectExpressionProp(t, r, e) {
              if (t.type === "ObjectMethod")
                this.raise(t.kind === "get" || t.kind === "set" ? h.PatternHasAccessor : h.PatternHasMethod, { at: t.key });
              else if (t.type === "SpreadElement") {
                t.type = "RestElement";
                let s = t.argument;
                this.checkToRestConversion(s, false), this.toAssignable(s, e), r || this.raise(h.RestTrailingComma, { at: t });
              } else
                this.toAssignable(t, e);
            }
            toAssignableList(t, r, e) {
              let s = t.length - 1;
              for (let i = 0; i <= s; i++) {
                let a = t[i];
                if (!!a) {
                  if (a.type === "SpreadElement") {
                    a.type = "RestElement";
                    let n = a.argument;
                    this.checkToRestConversion(n, true), this.toAssignable(n, e);
                  } else
                    this.toAssignable(a, e);
                  a.type === "RestElement" && (i < s ? this.raise(h.RestTrailingComma, { at: a }) : r && this.raise(h.RestTrailingComma, { at: r }));
                }
              }
            }
            isAssignable(t, r) {
              switch (t.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                case "RestElement":
                  return true;
                case "ObjectExpression": {
                  let e = t.properties.length - 1;
                  return t.properties.every((s, i) => s.type !== "ObjectMethod" && (i === e || s.type !== "SpreadElement") && this.isAssignable(s));
                }
                case "ObjectProperty":
                  return this.isAssignable(t.value);
                case "SpreadElement":
                  return this.isAssignable(t.argument);
                case "ArrayExpression":
                  return t.elements.every((e) => e === null || this.isAssignable(e));
                case "AssignmentExpression":
                  return t.operator === "=";
                case "ParenthesizedExpression":
                  return this.isAssignable(t.expression);
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return !r;
                default:
                  return false;
              }
            }
            toReferencedList(t, r) {
              return t;
            }
            toReferencedListDeep(t, r) {
              this.toReferencedList(t, r);
              for (let e of t)
                (e == null ? void 0 : e.type) === "ArrayExpression" && this.toReferencedListDeep(e.elements);
            }
            parseSpread(t) {
              let r = this.startNode();
              return this.next(), r.argument = this.parseMaybeAssignAllowIn(t, void 0), this.finishNode(r, "SpreadElement");
            }
            parseRestBinding() {
              let t = this.startNode();
              return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, "RestElement");
            }
            parseBindingAtom() {
              switch (this.state.type) {
                case 0: {
                  let t = this.startNode();
                  return this.next(), t.elements = this.parseBindingList(3, 93, true), this.finishNode(t, "ArrayPattern");
                }
                case 5:
                  return this.parseObjectLike(8, true);
              }
              return this.parseIdentifier();
            }
            parseBindingList(t, r, e, s) {
              let i = [], a = true;
              for (; !this.eat(t); )
                if (a ? a = false : this.expect(12), e && this.match(12))
                  i.push(null);
                else {
                  if (this.eat(t))
                    break;
                  if (this.match(21)) {
                    if (i.push(this.parseAssignableListItemTypes(this.parseRestBinding())), !this.checkCommaAfterRest(r)) {
                      this.expect(t);
                      break;
                    }
                  } else {
                    let n = [];
                    for (this.match(26) && this.hasPlugin("decorators") && this.raise(h.UnsupportedParameterDecorator, { at: this.state.startLoc }); this.match(26); )
                      n.push(this.parseDecorator());
                    i.push(this.parseAssignableListItem(s, n));
                  }
                }
              return i;
            }
            parseBindingRestProperty(t) {
              return this.next(), t.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(t, "RestElement");
            }
            parseBindingProperty() {
              let t = this.startNode(), { type: r, startLoc: e } = this.state;
              return r === 21 ? this.parseBindingRestProperty(t) : (r === 136 ? (this.expectPlugin("destructuringPrivate", e), this.classScope.usePrivateName(this.state.value, e), t.key = this.parsePrivateName()) : this.parsePropertyName(t), t.method = false, this.parseObjPropValue(t, e, false, false, true, false));
            }
            parseAssignableListItem(t, r) {
              let e = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(e);
              let s = this.parseMaybeDefault(e.loc.start, e);
              return r.length && (e.decorators = r), s;
            }
            parseAssignableListItemTypes(t) {
              return t;
            }
            parseMaybeDefault(t, r) {
              var e, s;
              if ((e = t) != null || (t = this.state.startLoc), r = (s = r) != null ? s : this.parseBindingAtom(), !this.eat(29))
                return r;
              let i = this.startNodeAt(t);
              return i.left = r, i.right = this.parseMaybeAssignAllowIn(), this.finishNode(i, "AssignmentPattern");
            }
            isValidLVal(t, r, e) {
              return Jl({ AssignmentPattern: "left", RestElement: "argument", ObjectProperty: "value", ParenthesizedExpression: "expression", ArrayPattern: "elements", ObjectPattern: "properties" }, t);
            }
            checkLVal(t, r) {
              let { in: e, binding: s = Te, checkClashes: i = false, strictModeChanged: a = false, allowingSloppyLetBinding: n = !(s & Ae), hasParenthesizedAncestor: o = false } = r;
              var c;
              let p = t.type;
              if (this.isObjectMethod(t))
                return;
              if (p === "MemberExpression") {
                s !== Te && this.raise(h.InvalidPropertyBindingPattern, { at: t });
                return;
              }
              if (t.type === "Identifier") {
                this.checkIdentifier(t, s, a, n);
                let { name: O } = t;
                i && (i.has(O) ? this.raise(h.ParamDupe, { at: t }) : i.add(O));
                return;
              }
              let m = this.isValidLVal(t.type, !(o || (c = t.extra) != null && c.parenthesized) && e.type === "AssignmentExpression", s);
              if (m === true)
                return;
              if (m === false) {
                let O = s === Te ? h.InvalidLhs : h.InvalidLhsBinding;
                this.raise(O, { at: t, ancestor: e.type === "UpdateExpression" ? { type: "UpdateExpression", prefix: e.prefix } : { type: e.type } });
                return;
              }
              let [x, P] = Array.isArray(m) ? m : [m, p === "ParenthesizedExpression"], b = t.type === "ArrayPattern" || t.type === "ObjectPattern" || t.type === "ParenthesizedExpression" ? t : e;
              for (let O of [].concat(t[x]))
                O && this.checkLVal(O, { in: b, binding: s, checkClashes: i, allowingSloppyLetBinding: n, strictModeChanged: a, hasParenthesizedAncestor: P });
            }
            checkIdentifier(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !(r & Ae);
              this.state.strict && (e ? gr(t.name, this.inModule) : xr(t.name)) && (r === Te ? this.raise(h.StrictEvalArguments, { at: t, referenceName: t.name }) : this.raise(h.StrictEvalArgumentsBinding, { at: t, bindingName: t.name })), !s && t.name === "let" && this.raise(h.LetInLexicalBinding, { at: t }), r & Te || this.declareNameFromIdentifier(t, r);
            }
            declareNameFromIdentifier(t, r) {
              this.scope.declareName(t.name, r, t.loc.start);
            }
            checkToRestConversion(t, r) {
              switch (t.type) {
                case "ParenthesizedExpression":
                  this.checkToRestConversion(t.expression, r);
                  break;
                case "Identifier":
                case "MemberExpression":
                  break;
                case "ArrayExpression":
                case "ObjectExpression":
                  if (r)
                    break;
                default:
                  this.raise(h.InvalidRestAssignmentPattern, { at: t });
              }
            }
            checkCommaAfterRest(t) {
              return this.match(12) ? (this.raise(this.lookaheadCharCode() === t ? h.RestTrailingComma : h.ElementAfterRest, { at: this.state.startLoc }), true) : false;
            }
          }, "Xl"), Yl = /* @__PURE__ */ __name(class extends Xl {
            checkProto(t, r, e, s) {
              if (t.type === "SpreadElement" || this.isObjectMethod(t) || t.computed || t.shorthand)
                return;
              let i = t.key;
              if ((i.type === "Identifier" ? i.name : i.value) === "__proto__") {
                if (r) {
                  this.raise(h.RecordNoProto, { at: i });
                  return;
                }
                e.used && (s ? s.doubleProtoLoc === null && (s.doubleProtoLoc = i.loc.start) : this.raise(h.DuplicateProto, { at: i })), e.used = true;
              }
            }
            shouldExitDescending(t, r) {
              return t.type === "ArrowFunctionExpression" && t.start === r;
            }
            getExpression() {
              this.enterInitialScopes(), this.nextToken();
              let t = this.parseExpression();
              return this.match(137) || this.unexpected(), this.finalizeRemainingComments(), t.comments = this.state.comments, t.errors = this.state.errors, this.options.tokens && (t.tokens = this.tokens), t;
            }
            parseExpression(t, r) {
              return t ? this.disallowInAnd(() => this.parseExpressionBase(r)) : this.allowInAnd(() => this.parseExpressionBase(r));
            }
            parseExpressionBase(t) {
              let r = this.state.startLoc, e = this.parseMaybeAssign(t);
              if (this.match(12)) {
                let s = this.startNodeAt(r);
                for (s.expressions = [e]; this.eat(12); )
                  s.expressions.push(this.parseMaybeAssign(t));
                return this.toReferencedList(s.expressions), this.finishNode(s, "SequenceExpression");
              }
              return e;
            }
            parseMaybeAssignDisallowIn(t, r) {
              return this.disallowInAnd(() => this.parseMaybeAssign(t, r));
            }
            parseMaybeAssignAllowIn(t, r) {
              return this.allowInAnd(() => this.parseMaybeAssign(t, r));
            }
            setOptionalParametersError(t, r) {
              var e;
              t.optionalParametersLoc = (e = r == null ? void 0 : r.loc) != null ? e : this.state.startLoc;
            }
            parseMaybeAssign(t, r) {
              let e = this.state.startLoc;
              if (this.isContextual(106) && this.prodParam.hasYield) {
                let n = this.parseYield();
                return r && (n = r.call(this, n, e)), n;
              }
              let s;
              t ? s = false : (t = new At(), s = true);
              let { type: i } = this.state;
              (i === 10 || $(i)) && (this.state.potentialArrowAt = this.state.start);
              let a = this.parseMaybeConditional(t);
              if (r && (a = r.call(this, a, e)), Io(this.state.type)) {
                let n = this.startNodeAt(e), o = this.state.value;
                if (n.operator = o, this.match(29)) {
                  this.toAssignable(a, true), n.left = a;
                  let c = e.index;
                  t.doubleProtoLoc != null && t.doubleProtoLoc.index >= c && (t.doubleProtoLoc = null), t.shorthandAssignLoc != null && t.shorthandAssignLoc.index >= c && (t.shorthandAssignLoc = null), t.privateKeyLoc != null && t.privateKeyLoc.index >= c && (this.checkDestructuringPrivate(t), t.privateKeyLoc = null);
                } else
                  n.left = a;
                return this.next(), n.right = this.parseMaybeAssign(), this.checkLVal(a, { in: this.finishNode(n, "AssignmentExpression") }), n;
              } else
                s && this.checkExpressionErrors(t, true);
              return a;
            }
            parseMaybeConditional(t) {
              let r = this.state.startLoc, e = this.state.potentialArrowAt, s = this.parseExprOps(t);
              return this.shouldExitDescending(s, e) ? s : this.parseConditional(s, r, t);
            }
            parseConditional(t, r, e) {
              if (this.eat(17)) {
                let s = this.startNodeAt(r);
                return s.test = t, s.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), s.alternate = this.parseMaybeAssign(), this.finishNode(s, "ConditionalExpression");
              }
              return t;
            }
            parseMaybeUnaryOrPrivate(t) {
              return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(t);
            }
            parseExprOps(t) {
              let r = this.state.startLoc, e = this.state.potentialArrowAt, s = this.parseMaybeUnaryOrPrivate(t);
              return this.shouldExitDescending(s, e) ? s : this.parseExprOp(s, r, -1);
            }
            parseExprOp(t, r, e) {
              if (this.isPrivateName(t)) {
                let i = this.getPrivateNameSV(t);
                (e >= nt(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(h.PrivateInExpectedIn, { at: t, identifierName: i }), this.classScope.usePrivateName(i, t.loc.start);
              }
              let s = this.state.type;
              if (ko(s) && (this.prodParam.hasIn || !this.match(58))) {
                let i = nt(s);
                if (i > e) {
                  if (s === 39) {
                    if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
                      return t;
                    this.checkPipelineAtInfixOperator(t, r);
                  }
                  let a = this.startNodeAt(r);
                  a.left = t, a.operator = this.state.value;
                  let n = s === 41 || s === 42, o = s === 40;
                  if (o && (i = nt(42)), this.next(), s === 39 && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && this.state.type === 96 && this.prodParam.hasAwait)
                    throw this.raise(h.UnexpectedAwaitAfterPipelineBody, { at: this.state.startLoc });
                  a.right = this.parseExprOpRightExpr(s, i);
                  let c = this.finishNode(a, n || o ? "LogicalExpression" : "BinaryExpression"), p = this.state.type;
                  if (o && (p === 41 || p === 42) || n && p === 40)
                    throw this.raise(h.MixingCoalesceWithLogical, { at: this.state.startLoc });
                  return this.parseExprOp(c, r, e);
                }
              }
              return t;
            }
            parseExprOpRightExpr(t, r) {
              let e = this.state.startLoc;
              switch (t) {
                case 39:
                  switch (this.getPluginOption("pipelineOperator", "proposal")) {
                    case "hack":
                      return this.withTopicBindingContext(() => this.parseHackPipeBody());
                    case "smart":
                      return this.withTopicBindingContext(() => {
                        if (this.prodParam.hasYield && this.isContextual(106))
                          throw this.raise(h.PipeBodyIsTighter, { at: this.state.startLoc });
                        return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(t, r), e);
                      });
                    case "fsharp":
                      return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(r));
                  }
                default:
                  return this.parseExprOpBaseRightExpr(t, r);
              }
            }
            parseExprOpBaseRightExpr(t, r) {
              let e = this.state.startLoc;
              return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), e, Mo(t) ? r - 1 : r);
            }
            parseHackPipeBody() {
              var t;
              let { startLoc: r } = this.state, e = this.parseMaybeAssign();
              return j.has(e.type) && !((t = e.extra) != null && t.parenthesized) && this.raise(h.PipeUnparenthesizedBody, { at: r, type: e.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(h.PipeTopicUnused, { at: r }), e;
            }
            checkExponentialAfterUnary(t) {
              this.match(57) && this.raise(h.UnexpectedTokenUnaryExponentiation, { at: t.argument });
            }
            parseMaybeUnary(t, r) {
              let e = this.state.startLoc, s = this.isContextual(96);
              if (s && this.isAwaitAllowed()) {
                this.next();
                let o = this.parseAwait(e);
                return r || this.checkExponentialAfterUnary(o), o;
              }
              let i = this.match(34), a = this.startNode();
              if (Fo(this.state.type)) {
                a.operator = this.state.value, a.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
                let o = this.match(89);
                if (this.next(), a.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(t, true), this.state.strict && o) {
                  let c = a.argument;
                  c.type === "Identifier" ? this.raise(h.StrictDelete, { at: a }) : this.hasPropertyAsPrivateName(c) && this.raise(h.DeletePrivateField, { at: a });
                }
                if (!i)
                  return r || this.checkExponentialAfterUnary(a), this.finishNode(a, "UnaryExpression");
              }
              let n = this.parseUpdate(a, i, t);
              if (s) {
                let { type: o } = this.state;
                if ((this.hasPlugin("v8intrinsic") ? Kt(o) : Kt(o) && !this.match(54)) && !this.isAmbiguousAwait())
                  return this.raiseOverwrite(h.AwaitNotInAsyncContext, { at: e }), this.parseAwait(e);
              }
              return n;
            }
            parseUpdate(t, r, e) {
              if (r) {
                let a = t;
                return this.checkLVal(a.argument, { in: this.finishNode(a, "UpdateExpression") }), t;
              }
              let s = this.state.startLoc, i = this.parseExprSubscripts(e);
              if (this.checkExpressionErrors(e, false))
                return i;
              for (; Do(this.state.type) && !this.canInsertSemicolon(); ) {
                let a = this.startNodeAt(s);
                a.operator = this.state.value, a.prefix = false, a.argument = i, this.next(), this.checkLVal(i, { in: i = this.finishNode(a, "UpdateExpression") });
              }
              return i;
            }
            parseExprSubscripts(t) {
              let r = this.state.startLoc, e = this.state.potentialArrowAt, s = this.parseExprAtom(t);
              return this.shouldExitDescending(s, e) ? s : this.parseSubscripts(s, r);
            }
            parseSubscripts(t, r, e) {
              let s = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(t), stop: false };
              do
                t = this.parseSubscript(t, r, e, s), s.maybeAsyncArrow = false;
              while (!s.stop);
              return t;
            }
            parseSubscript(t, r, e, s) {
              let { type: i } = this.state;
              if (!e && i === 15)
                return this.parseBind(t, r, e, s);
              if (ot(i))
                return this.parseTaggedTemplateExpression(t, r, s);
              let a = false;
              if (i === 18) {
                if (e && this.lookaheadCharCode() === 40)
                  return s.stop = true, t;
                s.optionalChainMember = a = true, this.next();
              }
              if (!e && this.match(10))
                return this.parseCoverCallAndAsyncArrowHead(t, r, s, a);
              {
                let n = this.eat(0);
                return n || a || this.eat(16) ? this.parseMember(t, r, s, n, a) : (s.stop = true, t);
              }
            }
            parseMember(t, r, e, s, i) {
              let a = this.startNodeAt(r);
              return a.object = t, a.computed = s, s ? (a.property = this.parseExpression(), this.expect(3)) : this.match(136) ? (t.type === "Super" && this.raise(h.SuperPrivateField, { at: r }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), a.property = this.parsePrivateName()) : a.property = this.parseIdentifier(true), e.optionalChainMember ? (a.optional = i, this.finishNode(a, "OptionalMemberExpression")) : this.finishNode(a, "MemberExpression");
            }
            parseBind(t, r, e, s) {
              let i = this.startNodeAt(r);
              return i.object = t, this.next(), i.callee = this.parseNoCallExpr(), s.stop = true, this.parseSubscripts(this.finishNode(i, "BindExpression"), r, e);
            }
            parseCoverCallAndAsyncArrowHead(t, r, e, s) {
              let i = this.state.maybeInArrowParameters, a = null;
              this.state.maybeInArrowParameters = true, this.next();
              let n = this.startNodeAt(r);
              n.callee = t;
              let { maybeAsyncArrow: o, optionalChainMember: c } = e;
              o && (this.expressionScope.enter(vl()), a = new At()), c && (n.optional = s), s ? n.arguments = this.parseCallExpressionArguments(11) : n.arguments = this.parseCallExpressionArguments(11, t.type === "Import", t.type !== "Super", n, a);
              let p = this.finishCallExpression(n, c);
              return o && this.shouldParseAsyncArrow() && !s ? (e.stop = true, this.checkDestructuringPrivate(a), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), p = this.parseAsyncArrowFromCallExpression(this.startNodeAt(r), p)) : (o && (this.checkExpressionErrors(a, true), this.expressionScope.exit()), this.toReferencedArguments(p)), this.state.maybeInArrowParameters = i, p;
            }
            toReferencedArguments(t, r) {
              this.toReferencedListDeep(t.arguments, r);
            }
            parseTaggedTemplateExpression(t, r, e) {
              let s = this.startNodeAt(r);
              return s.tag = t, s.quasi = this.parseTemplate(true), e.optionalChainMember && this.raise(h.OptionalChainingNoTemplate, { at: r }), this.finishNode(s, "TaggedTemplateExpression");
            }
            atPossibleAsyncArrow(t) {
              return t.type === "Identifier" && t.name === "async" && this.state.lastTokEndLoc.index === t.end && !this.canInsertSemicolon() && t.end - t.start === 5 && t.start === this.state.potentialArrowAt;
            }
            finishCallExpression(t, r) {
              if (t.callee.type === "Import")
                if (t.arguments.length === 2 && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), t.arguments.length === 0 || t.arguments.length > 2)
                  this.raise(h.ImportCallArity, { at: t, maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1 });
                else
                  for (let e of t.arguments)
                    e.type === "SpreadElement" && this.raise(h.ImportCallSpreadArgument, { at: e });
              return this.finishNode(t, r ? "OptionalCallExpression" : "CallExpression");
            }
            parseCallExpressionArguments(t, r, e, s, i) {
              let a = [], n = true, o = this.state.inFSharpPipelineDirectBody;
              for (this.state.inFSharpPipelineDirectBody = false; !this.eat(t); ) {
                if (n)
                  n = false;
                else if (this.expect(12), this.match(t)) {
                  r && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes") && this.raise(h.ImportCallArgumentTrailingComma, { at: this.state.lastTokStartLoc }), s && this.addTrailingCommaExtraToNode(s), this.next();
                  break;
                }
                a.push(this.parseExprListItem(false, i, e));
              }
              return this.state.inFSharpPipelineDirectBody = o, a;
            }
            shouldParseAsyncArrow() {
              return this.match(19) && !this.canInsertSemicolon();
            }
            parseAsyncArrowFromCallExpression(t, r) {
              var e;
              return this.resetPreviousNodeTrailingComments(r), this.expect(19), this.parseArrowExpression(t, r.arguments, true, (e = r.extra) == null ? void 0 : e.trailingCommaLoc), r.innerComments && Xe(t, r.innerComments), r.callee.trailingComments && Xe(t, r.callee.trailingComments), t;
            }
            parseNoCallExpr() {
              let t = this.state.startLoc;
              return this.parseSubscripts(this.parseExprAtom(), t, true);
            }
            parseExprAtom(t) {
              let r, e = null, { type: s } = this.state;
              switch (s) {
                case 79:
                  return this.parseSuper();
                case 83:
                  return r = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(r) : (this.match(10) || this.raise(h.UnsupportedImport, { at: this.state.lastTokStartLoc }), this.finishNode(r, "Import"));
                case 78:
                  return r = this.startNode(), this.next(), this.finishNode(r, "ThisExpression");
                case 90:
                  return this.parseDo(this.startNode(), false);
                case 56:
                case 31:
                  return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
                case 132:
                  return this.parseNumericLiteral(this.state.value);
                case 133:
                  return this.parseBigIntLiteral(this.state.value);
                case 134:
                  return this.parseDecimalLiteral(this.state.value);
                case 131:
                  return this.parseStringLiteral(this.state.value);
                case 84:
                  return this.parseNullLiteral();
                case 85:
                  return this.parseBooleanLiteral(true);
                case 86:
                  return this.parseBooleanLiteral(false);
                case 10: {
                  let i = this.state.potentialArrowAt === this.state.start;
                  return this.parseParenAndDistinguishExpression(i);
                }
                case 2:
                case 1:
                  return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
                case 0:
                  return this.parseArrayLike(3, true, false, t);
                case 6:
                case 7:
                  return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
                case 5:
                  return this.parseObjectLike(8, false, false, t);
                case 68:
                  return this.parseFunctionOrFunctionSent();
                case 26:
                  e = this.parseDecorators();
                case 80:
                  return this.parseClass(this.maybeTakeDecorators(e, this.startNode()), false);
                case 77:
                  return this.parseNewOrNewTarget();
                case 25:
                case 24:
                  return this.parseTemplate(false);
                case 15: {
                  r = this.startNode(), this.next(), r.object = null;
                  let i = r.callee = this.parseNoCallExpr();
                  if (i.type === "MemberExpression")
                    return this.finishNode(r, "BindExpression");
                  throw this.raise(h.UnsupportedBind, { at: i });
                }
                case 136:
                  return this.raise(h.PrivateInExpectedIn, { at: this.state.startLoc, identifierName: this.state.value }), this.parsePrivateName();
                case 33:
                  return this.parseTopicReferenceThenEqualsSign(54, "%");
                case 32:
                  return this.parseTopicReferenceThenEqualsSign(44, "^");
                case 37:
                case 38:
                  return this.parseTopicReference("hack");
                case 44:
                case 54:
                case 27: {
                  let i = this.getPluginOption("pipelineOperator", "proposal");
                  if (i)
                    return this.parseTopicReference(i);
                  throw this.unexpected();
                }
                case 47: {
                  let i = this.input.codePointAt(this.nextTokenStart());
                  if (fe(i) || i === 62) {
                    this.expectOnePlugin(["jsx", "flow", "typescript"]);
                    break;
                  } else
                    throw this.unexpected();
                }
                default:
                  if ($(s)) {
                    if (this.isContextual(125) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak())
                      return this.parseModuleExpression();
                    let i = this.state.potentialArrowAt === this.state.start, a = this.state.containsEsc, n = this.parseIdentifier();
                    if (!a && n.name === "async" && !this.canInsertSemicolon()) {
                      let { type: o } = this.state;
                      if (o === 68)
                        return this.resetPreviousNodeTrailingComments(n), this.next(), this.parseFunction(this.startNodeAtNode(n), void 0, true);
                      if ($(o))
                        return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(n)) : n;
                      if (o === 90)
                        return this.resetPreviousNodeTrailingComments(n), this.parseDo(this.startNodeAtNode(n), true);
                    }
                    return i && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(n), [n], false)) : n;
                  } else
                    throw this.unexpected();
              }
            }
            parseTopicReferenceThenEqualsSign(t, r) {
              let e = this.getPluginOption("pipelineOperator", "proposal");
              if (e)
                return this.state.type = t, this.state.value = r, this.state.pos--, this.state.end--, this.state.endLoc = y(this.state.endLoc, -1), this.parseTopicReference(e);
              throw this.unexpected();
            }
            parseTopicReference(t) {
              let r = this.startNode(), e = this.state.startLoc, s = this.state.type;
              return this.next(), this.finishTopicReference(r, e, t, s);
            }
            finishTopicReference(t, r, e, s) {
              if (this.testTopicReferenceConfiguration(e, r, s)) {
                let i = e === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
                return this.topicReferenceIsAllowedInCurrentContext() || this.raise(e === "smart" ? h.PrimaryTopicNotAllowed : h.PipeTopicUnbound, { at: r }), this.registerTopicReference(), this.finishNode(t, i);
              } else
                throw this.raise(h.PipeTopicUnconfiguredToken, { at: r, token: Pe(s) });
            }
            testTopicReferenceConfiguration(t, r, e) {
              switch (t) {
                case "hack":
                  return this.hasPlugin(["pipelineOperator", { topicToken: Pe(e) }]);
                case "smart":
                  return e === 27;
                default:
                  throw this.raise(h.PipeTopicRequiresHackPipes, { at: r });
              }
            }
            parseAsyncArrowUnaryFunction(t) {
              this.prodParam.enter(Pt(true, this.prodParam.hasYield));
              let r = [this.parseIdentifier()];
              return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(h.LineTerminatorBeforeArrow, { at: this.state.curPosition() }), this.expect(19), this.parseArrowExpression(t, r, true);
            }
            parseDo(t, r) {
              this.expectPlugin("doExpressions"), r && this.expectPlugin("asyncDoExpressions"), t.async = r, this.next();
              let e = this.state.labels;
              return this.state.labels = [], r ? (this.prodParam.enter(gt), t.body = this.parseBlock(), this.prodParam.exit()) : t.body = this.parseBlock(), this.state.labels = e, this.finishNode(t, "DoExpression");
            }
            parseSuper() {
              let t = this.startNode();
              return this.next(), this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod ? this.raise(h.SuperNotAllowed, { at: t }) : !this.scope.allowSuper && !this.options.allowSuperOutsideMethod && this.raise(h.UnexpectedSuper, { at: t }), !this.match(10) && !this.match(0) && !this.match(16) && this.raise(h.UnsupportedSuper, { at: t }), this.finishNode(t, "Super");
            }
            parsePrivateName() {
              let t = this.startNode(), r = this.startNodeAt(y(this.state.startLoc, 1)), e = this.state.value;
              return this.next(), t.id = this.createIdentifier(r, e), this.finishNode(t, "PrivateName");
            }
            parseFunctionOrFunctionSent() {
              let t = this.startNode();
              if (this.next(), this.prodParam.hasYield && this.match(16)) {
                let r = this.createIdentifier(this.startNodeAtNode(t), "function");
                return this.next(), this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(t, r, "sent");
              }
              return this.parseFunction(t);
            }
            parseMetaProperty(t, r, e) {
              t.meta = r;
              let s = this.state.containsEsc;
              return t.property = this.parseIdentifier(true), (t.property.name !== e || s) && this.raise(h.UnsupportedMetaProperty, { at: t.property, target: r.name, onlyValidPropertyName: e }), this.finishNode(t, "MetaProperty");
            }
            parseImportMetaProperty(t) {
              let r = this.createIdentifier(this.startNodeAtNode(t), "import");
              return this.next(), this.isContextual(100) && (this.inModule || this.raise(h.ImportMetaOutsideModule, { at: r }), this.sawUnambiguousESM = true), this.parseMetaProperty(t, r, "meta");
            }
            parseLiteralAtNode(t, r, e) {
              return this.addExtra(e, "rawValue", t), this.addExtra(e, "raw", this.input.slice(e.start, this.state.end)), e.value = t, this.next(), this.finishNode(e, r);
            }
            parseLiteral(t, r) {
              let e = this.startNode();
              return this.parseLiteralAtNode(t, r, e);
            }
            parseStringLiteral(t) {
              return this.parseLiteral(t, "StringLiteral");
            }
            parseNumericLiteral(t) {
              return this.parseLiteral(t, "NumericLiteral");
            }
            parseBigIntLiteral(t) {
              return this.parseLiteral(t, "BigIntLiteral");
            }
            parseDecimalLiteral(t) {
              return this.parseLiteral(t, "DecimalLiteral");
            }
            parseRegExpLiteral(t) {
              let r = this.parseLiteral(t.value, "RegExpLiteral");
              return r.pattern = t.pattern, r.flags = t.flags, r;
            }
            parseBooleanLiteral(t) {
              let r = this.startNode();
              return r.value = t, this.next(), this.finishNode(r, "BooleanLiteral");
            }
            parseNullLiteral() {
              let t = this.startNode();
              return this.next(), this.finishNode(t, "NullLiteral");
            }
            parseParenAndDistinguishExpression(t) {
              let r = this.state.startLoc, e;
              this.next(), this.expressionScope.enter(Tl());
              let s = this.state.maybeInArrowParameters, i = this.state.inFSharpPipelineDirectBody;
              this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
              let a = this.state.startLoc, n = [], o = new At(), c = true, p, m;
              for (; !this.match(11); ) {
                if (c)
                  c = false;
                else if (this.expect(12, o.optionalParametersLoc === null ? null : o.optionalParametersLoc), this.match(11)) {
                  m = this.state.startLoc;
                  break;
                }
                if (this.match(21)) {
                  let b = this.state.startLoc;
                  if (p = this.state.startLoc, n.push(this.parseParenItem(this.parseRestBinding(), b)), !this.checkCommaAfterRest(41))
                    break;
                } else
                  n.push(this.parseMaybeAssignAllowIn(o, this.parseParenItem));
              }
              let x = this.state.lastTokEndLoc;
              this.expect(11), this.state.maybeInArrowParameters = s, this.state.inFSharpPipelineDirectBody = i;
              let P = this.startNodeAt(r);
              return t && this.shouldParseArrow(n) && (P = this.parseArrow(P)) ? (this.checkDestructuringPrivate(o), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(P, n, false), P) : (this.expressionScope.exit(), n.length || this.unexpected(this.state.lastTokStartLoc), m && this.unexpected(m), p && this.unexpected(p), this.checkExpressionErrors(o, true), this.toReferencedListDeep(n, true), n.length > 1 ? (e = this.startNodeAt(a), e.expressions = n, this.finishNode(e, "SequenceExpression"), this.resetEndLocation(e, x)) : e = n[0], this.wrapParenthesis(r, e));
            }
            wrapParenthesis(t, r) {
              if (!this.options.createParenthesizedExpressions)
                return this.addExtra(r, "parenthesized", true), this.addExtra(r, "parenStart", t.index), this.takeSurroundingComments(r, t.index, this.state.lastTokEndLoc.index), r;
              let e = this.startNodeAt(t);
              return e.expression = r, this.finishNode(e, "ParenthesizedExpression");
            }
            shouldParseArrow(t) {
              return !this.canInsertSemicolon();
            }
            parseArrow(t) {
              if (this.eat(19))
                return t;
            }
            parseParenItem(t, r) {
              return t;
            }
            parseNewOrNewTarget() {
              let t = this.startNode();
              if (this.next(), this.match(16)) {
                let r = this.createIdentifier(this.startNodeAtNode(t), "new");
                this.next();
                let e = this.parseMetaProperty(t, r, "target");
                return !this.scope.inNonArrowFunction && !this.scope.inClass && this.raise(h.UnexpectedNewTarget, { at: e }), e;
              }
              return this.parseNew(t);
            }
            parseNew(t) {
              if (this.parseNewCallee(t), this.eat(10)) {
                let r = this.parseExprList(11);
                this.toReferencedList(r), t.arguments = r;
              } else
                t.arguments = [];
              return this.finishNode(t, "NewExpression");
            }
            parseNewCallee(t) {
              t.callee = this.parseNoCallExpr(), t.callee.type === "Import" ? this.raise(h.ImportCallNotNewExpression, { at: t.callee }) : this.isOptionalChain(t.callee) ? this.raise(h.OptionalChainingNoNew, { at: this.state.lastTokEndLoc }) : this.eat(18) && this.raise(h.OptionalChainingNoNew, { at: this.state.startLoc });
            }
            parseTemplateElement(t) {
              let { start: r, startLoc: e, end: s, value: i } = this.state, a = r + 1, n = this.startNodeAt(y(e, 1));
              i === null && (t || this.raise(h.InvalidEscapeSequenceTemplate, { at: y(this.state.firstInvalidTemplateEscapePos, 1) }));
              let o = this.match(24), c = o ? -1 : -2, p = s + c;
              n.value = { raw: this.input.slice(a, p).replace(/\r\n?/g, `
`), cooked: i === null ? null : i.slice(1, c) }, n.tail = o, this.next();
              let m = this.finishNode(n, "TemplateElement");
              return this.resetEndLocation(m, y(this.state.lastTokEndLoc, c)), m;
            }
            parseTemplate(t) {
              let r = this.startNode();
              r.expressions = [];
              let e = this.parseTemplateElement(t);
              for (r.quasis = [e]; !e.tail; )
                r.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), r.quasis.push(e = this.parseTemplateElement(t));
              return this.finishNode(r, "TemplateLiteral");
            }
            parseTemplateSubstitution() {
              return this.parseExpression();
            }
            parseObjectLike(t, r, e, s) {
              e && this.expectPlugin("recordAndTuple");
              let i = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = false;
              let a = /* @__PURE__ */ Object.create(null), n = true, o = this.startNode();
              for (o.properties = [], this.next(); !this.match(t); ) {
                if (n)
                  n = false;
                else if (this.expect(12), this.match(t)) {
                  this.addTrailingCommaExtraToNode(o);
                  break;
                }
                let p;
                r ? p = this.parseBindingProperty() : (p = this.parsePropertyDefinition(s), this.checkProto(p, e, a, s)), e && !this.isObjectProperty(p) && p.type !== "SpreadElement" && this.raise(h.InvalidRecordProperty, { at: p }), p.shorthand && this.addExtra(p, "shorthand", true), o.properties.push(p);
              }
              this.next(), this.state.inFSharpPipelineDirectBody = i;
              let c = "ObjectExpression";
              return r ? c = "ObjectPattern" : e && (c = "RecordExpression"), this.finishNode(o, c);
            }
            addTrailingCommaExtraToNode(t) {
              this.addExtra(t, "trailingComma", this.state.lastTokStart), this.addExtra(t, "trailingCommaLoc", this.state.lastTokStartLoc, false);
            }
            maybeAsyncOrAccessorProp(t) {
              return !t.computed && t.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
            }
            parsePropertyDefinition(t) {
              let r = [];
              if (this.match(26))
                for (this.hasPlugin("decorators") && this.raise(h.UnsupportedPropertyDecorator, { at: this.state.startLoc }); this.match(26); )
                  r.push(this.parseDecorator());
              let e = this.startNode(), s = false, i = false, a;
              if (this.match(21))
                return r.length && this.unexpected(), this.parseSpread();
              r.length && (e.decorators = r, r = []), e.method = false, t && (a = this.state.startLoc);
              let n = this.eat(55);
              this.parsePropertyNamePrefixOperator(e);
              let o = this.state.containsEsc, c = this.parsePropertyName(e, t);
              if (!n && !o && this.maybeAsyncOrAccessorProp(e)) {
                let p = c.name;
                p === "async" && !this.hasPrecedingLineBreak() && (s = true, this.resetPreviousNodeTrailingComments(c), n = this.eat(55), this.parsePropertyName(e)), (p === "get" || p === "set") && (i = true, this.resetPreviousNodeTrailingComments(c), e.kind = p, this.match(55) && (n = true, this.raise(h.AccessorIsGenerator, { at: this.state.curPosition(), kind: p }), this.next()), this.parsePropertyName(e));
              }
              return this.parseObjPropValue(e, a, n, s, false, i, t);
            }
            getGetterSetterExpectedParamCount(t) {
              return t.kind === "get" ? 0 : 1;
            }
            getObjectOrClassMethodParams(t) {
              return t.params;
            }
            checkGetterSetterParams(t) {
              var r;
              let e = this.getGetterSetterExpectedParamCount(t), s = this.getObjectOrClassMethodParams(t);
              s.length !== e && this.raise(t.kind === "get" ? h.BadGetterArity : h.BadSetterArity, { at: t }), t.kind === "set" && ((r = s[s.length - 1]) == null ? void 0 : r.type) === "RestElement" && this.raise(h.BadSetterRestParameter, { at: t });
            }
            parseObjectMethod(t, r, e, s, i) {
              if (i) {
                let a = this.parseMethod(t, r, false, false, false, "ObjectMethod");
                return this.checkGetterSetterParams(a), a;
              }
              if (e || r || this.match(10))
                return s && this.unexpected(), t.kind = "method", t.method = true, this.parseMethod(t, r, e, false, false, "ObjectMethod");
            }
            parseObjectProperty(t, r, e, s) {
              if (t.shorthand = false, this.eat(14))
                return t.value = e ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(s), this.finishNode(t, "ObjectProperty");
              if (!t.computed && t.key.type === "Identifier") {
                if (this.checkReservedWord(t.key.name, t.key.loc.start, true, false), e)
                  t.value = this.parseMaybeDefault(r, xe(t.key));
                else if (this.match(29)) {
                  let i = this.state.startLoc;
                  s != null ? s.shorthandAssignLoc === null && (s.shorthandAssignLoc = i) : this.raise(h.InvalidCoverInitializedName, { at: i }), t.value = this.parseMaybeDefault(r, xe(t.key));
                } else
                  t.value = xe(t.key);
                return t.shorthand = true, this.finishNode(t, "ObjectProperty");
              }
            }
            parseObjPropValue(t, r, e, s, i, a, n) {
              let o = this.parseObjectMethod(t, e, s, i, a) || this.parseObjectProperty(t, r, i, n);
              return o || this.unexpected(), o;
            }
            parsePropertyName(t, r) {
              if (this.eat(0))
                t.computed = true, t.key = this.parseMaybeAssignAllowIn(), this.expect(3);
              else {
                let { type: e, value: s } = this.state, i;
                if (pe(e))
                  i = this.parseIdentifier(true);
                else
                  switch (e) {
                    case 132:
                      i = this.parseNumericLiteral(s);
                      break;
                    case 131:
                      i = this.parseStringLiteral(s);
                      break;
                    case 133:
                      i = this.parseBigIntLiteral(s);
                      break;
                    case 134:
                      i = this.parseDecimalLiteral(s);
                      break;
                    case 136: {
                      let a = this.state.startLoc;
                      r != null ? r.privateKeyLoc === null && (r.privateKeyLoc = a) : this.raise(h.UnexpectedPrivateField, { at: a }), i = this.parsePrivateName();
                      break;
                    }
                    default:
                      throw this.unexpected();
                  }
                t.key = i, e !== 136 && (t.computed = false);
              }
              return t.key;
            }
            initFunction(t, r) {
              t.id = null, t.generator = false, t.async = !!r;
            }
            parseMethod(t, r, e, s, i, a) {
              let n = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
              this.initFunction(t, e), t.generator = !!r;
              let o = s;
              this.scope.enter(me | lt | (n ? Se : 0) | (i ? Ar : 0)), this.prodParam.enter(Pt(e, t.generator)), this.parseFunctionParams(t, o);
              let c = this.parseFunctionBodyAndFinish(t, a, true);
              return this.prodParam.exit(), this.scope.exit(), c;
            }
            parseArrayLike(t, r, e, s) {
              e && this.expectPlugin("recordAndTuple");
              let i = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = false;
              let a = this.startNode();
              return this.next(), a.elements = this.parseExprList(t, !e, s, a), this.state.inFSharpPipelineDirectBody = i, this.finishNode(a, e ? "TupleExpression" : "ArrayExpression");
            }
            parseArrowExpression(t, r, e, s) {
              this.scope.enter(me | Yt);
              let i = Pt(e, false);
              !this.match(5) && this.prodParam.hasIn && (i |= Ue), this.prodParam.enter(i), this.initFunction(t, e);
              let a = this.state.maybeInArrowParameters;
              return r && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(t, r, s)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(t, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = a, this.finishNode(t, "ArrowFunctionExpression");
            }
            setArrowFunctionParameters(t, r, e) {
              this.toAssignableList(r, e, false), t.params = r;
            }
            parseFunctionBodyAndFinish(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              return this.parseFunctionBody(t, false, e), this.finishNode(t, r);
            }
            parseFunctionBody(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, s = r && !this.match(5);
              if (this.expressionScope.enter(Rr()), s)
                t.body = this.parseMaybeAssign(), this.checkParams(t, false, r, false);
              else {
                let i = this.state.strict, a = this.state.labels;
                this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | qr), t.body = this.parseBlock(true, false, (n) => {
                  let o = !this.isSimpleParamList(t.params);
                  n && o && this.raise(h.IllegalLanguageModeDirective, { at: (t.kind === "method" || t.kind === "constructor") && !!t.key ? t.key.loc.end : t });
                  let c = !i && this.state.strict;
                  this.checkParams(t, !this.state.strict && !r && !e && !o, r, c), this.state.strict && t.id && this.checkIdentifier(t.id, Go, c);
                }), this.prodParam.exit(), this.state.labels = a;
              }
              this.expressionScope.exit();
            }
            isSimpleParameter(t) {
              return t.type === "Identifier";
            }
            isSimpleParamList(t) {
              for (let r = 0, e = t.length; r < e; r++)
                if (!this.isSimpleParameter(t[r]))
                  return false;
              return true;
            }
            checkParams(t, r, e) {
              let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true, i = !r && /* @__PURE__ */ new Set(), a = { type: "FormalParameters" };
              for (let n of t.params)
                this.checkLVal(n, { in: a, binding: dt, checkClashes: i, strictModeChanged: s });
            }
            parseExprList(t, r, e, s) {
              let i = [], a = true;
              for (; !this.eat(t); ) {
                if (a)
                  a = false;
                else if (this.expect(12), this.match(t)) {
                  s && this.addTrailingCommaExtraToNode(s), this.next();
                  break;
                }
                i.push(this.parseExprListItem(r, e));
              }
              return i;
            }
            parseExprListItem(t, r, e) {
              let s;
              if (this.match(12))
                t || this.raise(h.UnexpectedToken, { at: this.state.curPosition(), unexpected: "," }), s = null;
              else if (this.match(21)) {
                let i = this.state.startLoc;
                s = this.parseParenItem(this.parseSpread(r), i);
              } else if (this.match(17)) {
                this.expectPlugin("partialApplication"), e || this.raise(h.UnexpectedArgumentPlaceholder, { at: this.state.startLoc });
                let i = this.startNode();
                this.next(), s = this.finishNode(i, "ArgumentPlaceholder");
              } else
                s = this.parseMaybeAssignAllowIn(r, this.parseParenItem);
              return s;
            }
            parseIdentifier(t) {
              let r = this.startNode(), e = this.parseIdentifierName(t);
              return this.createIdentifier(r, e);
            }
            createIdentifier(t, r) {
              return t.name = r, t.loc.identifierName = r, this.finishNode(t, "Identifier");
            }
            parseIdentifierName(t) {
              let r, { startLoc: e, type: s } = this.state;
              if (pe(s))
                r = this.state.value;
              else
                throw this.unexpected();
              let i = So(s);
              return t ? i && this.replaceToken(130) : this.checkReservedWord(r, e, i, false), this.next(), r;
            }
            checkReservedWord(t, r, e, s) {
              if (t.length > 10 || !Vo(t))
                return;
              if (t === "yield") {
                if (this.prodParam.hasYield) {
                  this.raise(h.YieldBindingIdentifier, { at: r });
                  return;
                }
              } else if (t === "await") {
                if (this.prodParam.hasAwait) {
                  this.raise(h.AwaitBindingIdentifier, { at: r });
                  return;
                }
                if (this.scope.inStaticBlock) {
                  this.raise(h.AwaitBindingIdentifierInStaticBlock, { at: r });
                  return;
                }
                this.expressionScope.recordAsyncArrowParametersError({ at: r });
              } else if (t === "arguments" && this.scope.inClassAndNotInNonArrowFunction) {
                this.raise(h.ArgumentsInClass, { at: r });
                return;
              }
              if (e && Ho(t)) {
                this.raise(h.UnexpectedKeyword, { at: r, keyword: t });
                return;
              }
              (this.state.strict ? s ? gr : yr : mr)(t, this.inModule) && this.raise(h.UnexpectedReservedWord, { at: r, reservedWord: t });
            }
            isAwaitAllowed() {
              return !!(this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction);
            }
            parseAwait(t) {
              let r = this.startNodeAt(t);
              return this.expressionScope.recordParameterInitializerError(h.AwaitExpressionFormalParameter, { at: r }), this.eat(55) && this.raise(h.ObsoleteAwaitStar, { at: r }), !this.scope.inFunction && !this.options.allowAwaitOutsideFunction && (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (r.argument = this.parseMaybeUnary(null, true)), this.finishNode(r, "AwaitExpression");
            }
            isAmbiguousAwait() {
              if (this.hasPrecedingLineBreak())
                return true;
              let { type: t } = this.state;
              return t === 53 || t === 10 || t === 0 || ot(t) || t === 135 || t === 56 || this.hasPlugin("v8intrinsic") && t === 54;
            }
            parseYield() {
              let t = this.startNode();
              this.expressionScope.recordParameterInitializerError(h.YieldInParameter, { at: t }), this.next();
              let r = false, e = null;
              if (!this.hasPrecedingLineBreak())
                switch (r = this.eat(55), this.state.type) {
                  case 13:
                  case 137:
                  case 8:
                  case 11:
                  case 3:
                  case 9:
                  case 14:
                  case 12:
                    if (!r)
                      break;
                  default:
                    e = this.parseMaybeAssign();
                }
              return t.delegate = r, t.argument = e, this.finishNode(t, "YieldExpression");
            }
            checkPipelineAtInfixOperator(t, r) {
              this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && t.type === "SequenceExpression" && this.raise(h.PipelineHeadSequenceExpression, { at: r });
            }
            parseSmartPipelineBodyInStyle(t, r) {
              if (this.isSimpleReference(t)) {
                let e = this.startNodeAt(r);
                return e.callee = t, this.finishNode(e, "PipelineBareFunction");
              } else {
                let e = this.startNodeAt(r);
                return this.checkSmartPipeTopicBodyEarlyErrors(r), e.expression = t, this.finishNode(e, "PipelineTopicExpression");
              }
            }
            isSimpleReference(t) {
              switch (t.type) {
                case "MemberExpression":
                  return !t.computed && this.isSimpleReference(t.object);
                case "Identifier":
                  return true;
                default:
                  return false;
              }
            }
            checkSmartPipeTopicBodyEarlyErrors(t) {
              if (this.match(19))
                throw this.raise(h.PipelineBodyNoArrow, { at: this.state.startLoc });
              this.topicReferenceWasUsedInCurrentContext() || this.raise(h.PipelineTopicUnused, { at: t });
            }
            withTopicBindingContext(t) {
              let r = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
              try {
                return t();
              } finally {
                this.state.topicContext = r;
              }
            }
            withSmartMixTopicForbiddingContext(t) {
              if (this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) {
                let r = this.state.topicContext;
                this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
                try {
                  return t();
                } finally {
                  this.state.topicContext = r;
                }
              } else
                return t();
            }
            withSoloAwaitPermittingContext(t) {
              let r = this.state.soloAwait;
              this.state.soloAwait = true;
              try {
                return t();
              } finally {
                this.state.soloAwait = r;
              }
            }
            allowInAnd(t) {
              let r = this.prodParam.currentFlags();
              if (Ue & ~r) {
                this.prodParam.enter(r | Ue);
                try {
                  return t();
                } finally {
                  this.prodParam.exit();
                }
              }
              return t();
            }
            disallowInAnd(t) {
              let r = this.prodParam.currentFlags();
              if (Ue & r) {
                this.prodParam.enter(r & ~Ue);
                try {
                  return t();
                } finally {
                  this.prodParam.exit();
                }
              }
              return t();
            }
            registerTopicReference() {
              this.state.topicContext.maxTopicIndex = 0;
            }
            topicReferenceIsAllowedInCurrentContext() {
              return this.state.topicContext.maxNumOfResolvableTopics >= 1;
            }
            topicReferenceWasUsedInCurrentContext() {
              return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
            }
            parseFSharpPipelineBody(t) {
              let r = this.state.startLoc;
              this.state.potentialArrowAt = this.state.start;
              let e = this.state.inFSharpPipelineDirectBody;
              this.state.inFSharpPipelineDirectBody = true;
              let s = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), r, t);
              return this.state.inFSharpPipelineDirectBody = e, s;
            }
            parseModuleExpression() {
              this.expectPlugin("moduleBlocks");
              let t = this.startNode();
              this.next(), this.match(5) || this.unexpected(null, 5);
              let r = this.startNodeAt(this.state.endLoc);
              this.next();
              let e = this.initializeScopes(true);
              this.enterInitialScopes();
              try {
                t.body = this.parseProgram(r, 8, "module");
              } finally {
                e();
              }
              return this.finishNode(t, "ModuleExpression");
            }
            parsePropertyNamePrefixOperator(t) {
            }
          }, "Yl"), fs = { kind: "loop" }, Ql = { kind: "switch" }, Zl = 0, ms = 1, Qr = 2, Zr = 4, eh = /[\uD800-\uDFFF]/u, ys = /in(?:stanceof)?/y;
          function th(t, r) {
            for (let e = 0; e < t.length; e++) {
              let s = t[e], { type: i } = s;
              if (typeof i == "number") {
                {
                  if (i === 136) {
                    let { loc: a, start: n, value: o, end: c } = s, p = n + 1, m = y(a.start, 1);
                    t.splice(e, 1, new ve({ type: de(27), value: "#", start: n, end: p, startLoc: a.start, endLoc: m }), new ve({ type: de(130), value: o, start: p, end: c, startLoc: m, endLoc: a.end })), e++;
                    continue;
                  }
                  if (ot(i)) {
                    let { loc: a, start: n, value: o, end: c } = s, p = n + 1, m = y(a.start, 1), x;
                    r.charCodeAt(n) === 96 ? x = new ve({ type: de(22), value: "`", start: n, end: p, startLoc: a.start, endLoc: m }) : x = new ve({ type: de(8), value: "}", start: n, end: p, startLoc: a.start, endLoc: m });
                    let P, b, O, R;
                    i === 24 ? (b = c - 1, O = y(a.end, -1), P = o === null ? null : o.slice(1, -1), R = new ve({ type: de(22), value: "`", start: b, end: c, startLoc: O, endLoc: a.end })) : (b = c - 2, O = y(a.end, -2), P = o === null ? null : o.slice(1, -2), R = new ve({ type: de(23), value: "${", start: b, end: c, startLoc: O, endLoc: a.end })), t.splice(e, 1, x, new ve({ type: de(20), value: P, start: p, end: b, startLoc: m, endLoc: O }), R), e += 2;
                    continue;
                  }
                }
                s.type = de(i);
              }
            }
            return t;
          }
          __name(th, "th");
          var sh = /* @__PURE__ */ __name(class extends Yl {
            parseTopLevel(t, r) {
              return t.program = this.parseProgram(r), t.comments = this.state.comments, this.options.tokens && (t.tokens = th(this.tokens, this.input)), this.finishNode(t, "File");
            }
            parseProgram(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 137, e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.options.sourceType;
              if (t.sourceType = e, t.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(t, true, true, r), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
                for (let [i, a] of Array.from(this.scope.undefinedExports))
                  this.raise(h.ModuleExportUndefined, { at: a, localName: i });
              let s;
              return r === 137 ? s = this.finishNode(t, "Program") : s = this.finishNodeAt(t, "Program", y(this.state.startLoc, -1)), s;
            }
            stmtToDirective(t) {
              let r = t;
              r.type = "Directive", r.value = r.expression, delete r.expression;
              let e = r.value, s = e.value, i = this.input.slice(e.start, e.end), a = e.value = i.slice(1, -1);
              return this.addExtra(e, "raw", i), this.addExtra(e, "rawValue", a), this.addExtra(e, "expressionValue", s), e.type = "DirectiveLiteral", r;
            }
            parseInterpreterDirective() {
              if (!this.match(28))
                return null;
              let t = this.startNode();
              return t.value = this.state.value, this.next(), this.finishNode(t, "InterpreterDirective");
            }
            isLet(t) {
              return this.isContextual(99) ? this.hasFollowingIdentifier(t) : false;
            }
            hasFollowingIdentifier(t) {
              let r = this.nextTokenStart(), e = this.codePointAtPos(r);
              if (e === 92 || e === 91)
                return true;
              if (t)
                return false;
              if (e === 123)
                return true;
              if (fe(e)) {
                if (ys.lastIndex = r, ys.test(this.input)) {
                  let s = this.codePointAtPos(ys.lastIndex);
                  if (!Be(s) && s !== 92)
                    return false;
                }
                return true;
              }
              return false;
            }
            startsUsingForOf() {
              let t = this.lookahead();
              return t.type === 101 && !t.containsEsc ? false : (this.expectPlugin("explicitResourceManagement"), true);
            }
            parseStatement(t, r) {
              let e = null;
              return this.match(26) && (e = this.parseDecorators(true)), this.parseStatementContent(t, r, e);
            }
            parseStatementContent(t, r, e) {
              let s = this.state.type, i = this.startNode();
              switch (s) {
                case 60:
                  return this.parseBreakContinueStatement(i, true);
                case 63:
                  return this.parseBreakContinueStatement(i, false);
                case 64:
                  return this.parseDebuggerStatement(i);
                case 90:
                  return this.parseDoStatement(i);
                case 91:
                  return this.parseForStatement(i);
                case 68:
                  if (this.lookaheadCharCode() === 46)
                    break;
                  return t && (this.state.strict ? this.raise(h.StrictFunction, { at: this.state.startLoc }) : t !== "if" && t !== "label" && this.raise(h.SloppyFunction, { at: this.state.startLoc })), this.parseFunctionStatement(i, false, !t);
                case 80:
                  return t && this.unexpected(), this.parseClass(this.maybeTakeDecorators(e, i), true);
                case 69:
                  return this.parseIfStatement(i);
                case 70:
                  return this.parseReturnStatement(i);
                case 71:
                  return this.parseSwitchStatement(i);
                case 72:
                  return this.parseThrowStatement(i);
                case 73:
                  return this.parseTryStatement(i);
                case 105:
                  if (this.hasFollowingLineBreak())
                    break;
                case 99:
                  if (this.state.containsEsc || !this.hasFollowingIdentifier(t))
                    break;
                case 75:
                case 74: {
                  let o = this.state.value;
                  return o === "using" && (this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel && this.raise(h.UnexpectedUsingDeclaration, { at: this.state.startLoc })), t && o !== "var" && this.raise(h.UnexpectedLexicalDeclaration, { at: this.state.startLoc }), this.parseVarStatement(i, o);
                }
                case 92:
                  return this.parseWhileStatement(i);
                case 76:
                  return this.parseWithStatement(i);
                case 5:
                  return this.parseBlock();
                case 13:
                  return this.parseEmptyStatement(i);
                case 83: {
                  let o = this.lookaheadCharCode();
                  if (o === 40 || o === 46)
                    break;
                }
                case 82: {
                  !this.options.allowImportExportEverywhere && !r && this.raise(h.UnexpectedImportExport, { at: this.state.startLoc }), this.next();
                  let o;
                  return s === 83 ? (o = this.parseImport(i), o.type === "ImportDeclaration" && (!o.importKind || o.importKind === "value") && (this.sawUnambiguousESM = true)) : (o = this.parseExport(i, e), (o.type === "ExportNamedDeclaration" && (!o.exportKind || o.exportKind === "value") || o.type === "ExportAllDeclaration" && (!o.exportKind || o.exportKind === "value") || o.type === "ExportDefaultDeclaration") && (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(o), o;
                }
                default:
                  if (this.isAsyncFunction())
                    return t && this.raise(h.AsyncFunctionInSingleStatementContext, { at: this.state.startLoc }), this.next(), this.parseFunctionStatement(i, true, !t);
              }
              let a = this.state.value, n = this.parseExpression();
              return $(s) && n.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(i, a, n, t) : this.parseExpressionStatement(i, n, e);
            }
            assertModuleNodeAllowed(t) {
              !this.options.allowImportExportEverywhere && !this.inModule && this.raise(h.ImportOutsideModule, { at: t });
            }
            decoratorsEnabledBeforeExport() {
              return this.hasPlugin("decorators-legacy") ? true : this.hasPlugin("decorators") && !!this.getPluginOption("decorators", "decoratorsBeforeExport");
            }
            maybeTakeDecorators(t, r, e) {
              return t && (r.decorators = t, this.resetStartLocationFromNode(r, t[0]), e && this.resetStartLocationFromNode(e, r)), r;
            }
            canHaveLeadingDecorator() {
              return this.match(80);
            }
            parseDecorators(t) {
              let r = [];
              do
                r.push(this.parseDecorator());
              while (this.match(26));
              if (this.match(82))
                t || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(h.DecoratorExportClass, { at: this.state.startLoc });
              else if (!this.canHaveLeadingDecorator())
                throw this.raise(h.UnexpectedLeadingDecorator, { at: this.state.startLoc });
              return r;
            }
            parseDecorator() {
              this.expectOnePlugin(["decorators", "decorators-legacy"]);
              let t = this.startNode();
              if (this.next(), this.hasPlugin("decorators")) {
                let r = this.state.startLoc, e;
                if (this.match(10)) {
                  let s = this.state.startLoc;
                  this.next(), e = this.parseExpression(), this.expect(11), e = this.wrapParenthesis(s, e);
                  let i = this.state.startLoc;
                  t.expression = this.parseMaybeDecoratorArguments(e), this.getPluginOption("decorators", "allowCallParenthesized") === false && t.expression !== e && this.raise(h.DecoratorArgumentsOutsideParentheses, { at: i });
                } else {
                  for (e = this.parseIdentifier(false); this.eat(16); ) {
                    let s = this.startNodeAt(r);
                    s.object = e, this.match(136) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), s.property = this.parsePrivateName()) : s.property = this.parseIdentifier(true), s.computed = false, e = this.finishNode(s, "MemberExpression");
                  }
                  t.expression = this.parseMaybeDecoratorArguments(e);
                }
              } else
                t.expression = this.parseExprSubscripts();
              return this.finishNode(t, "Decorator");
            }
            parseMaybeDecoratorArguments(t) {
              if (this.eat(10)) {
                let r = this.startNodeAtNode(t);
                return r.callee = t, r.arguments = this.parseCallExpressionArguments(11, false), this.toReferencedList(r.arguments), this.finishNode(r, "CallExpression");
              }
              return t;
            }
            parseBreakContinueStatement(t, r) {
              return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(t, r), this.finishNode(t, r ? "BreakStatement" : "ContinueStatement");
            }
            verifyBreakContinue(t, r) {
              let e;
              for (e = 0; e < this.state.labels.length; ++e) {
                let s = this.state.labels[e];
                if ((t.label == null || s.name === t.label.name) && (s.kind != null && (r || s.kind === "loop") || t.label && r))
                  break;
              }
              if (e === this.state.labels.length) {
                let s = r ? "BreakStatement" : "ContinueStatement";
                this.raise(h.IllegalBreakContinue, { at: t, type: s });
              }
            }
            parseDebuggerStatement(t) {
              return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
            }
            parseHeaderExpression() {
              this.expect(10);
              let t = this.parseExpression();
              return this.expect(11), t;
            }
            parseDoStatement(t) {
              return this.next(), this.state.labels.push(fs), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do")), this.state.labels.pop(), this.expect(92), t.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(t, "DoWhileStatement");
            }
            parseForStatement(t) {
              this.next(), this.state.labels.push(fs);
              let r = null;
              if (this.isAwaitAllowed() && this.eatContextual(96) && (r = this.state.lastTokStartLoc), this.scope.enter(_e), this.expect(10), this.match(13))
                return r !== null && this.unexpected(r), this.parseFor(t, null);
              let e = this.isContextual(99), s = this.isContextual(105) && !this.hasFollowingLineBreak(), i = e && this.hasFollowingIdentifier() || s && this.hasFollowingIdentifier() && this.startsUsingForOf();
              if (this.match(74) || this.match(75) || i) {
                let p = this.startNode(), m = this.state.value;
                this.next(), this.parseVar(p, true, m);
                let x = this.finishNode(p, "VariableDeclaration"), P = this.match(58);
                return P && s && this.raise(h.ForInUsing, { at: x }), (P || this.isContextual(101)) && x.declarations.length === 1 ? this.parseForIn(t, x, r) : (r !== null && this.unexpected(r), this.parseFor(t, x));
              }
              let a = this.isContextual(95), n = new At(), o = this.parseExpression(true, n), c = this.isContextual(101);
              if (c && (e && this.raise(h.ForOfLet, { at: o }), r === null && a && o.type === "Identifier" && this.raise(h.ForOfAsync, { at: o })), c || this.match(58)) {
                this.checkDestructuringPrivate(n), this.toAssignable(o, true);
                let p = c ? "ForOfStatement" : "ForInStatement";
                return this.checkLVal(o, { in: { type: p } }), this.parseForIn(t, o, r);
              } else
                this.checkExpressionErrors(n, true);
              return r !== null && this.unexpected(r), this.parseFor(t, o);
            }
            parseFunctionStatement(t, r, e) {
              return this.next(), this.parseFunction(t, ms | (e ? 0 : Qr), r);
            }
            parseIfStatement(t) {
              return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatement("if"), t.alternate = this.eat(66) ? this.parseStatement("if") : null, this.finishNode(t, "IfStatement");
            }
            parseReturnStatement(t) {
              return !this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction && this.raise(h.IllegalReturn, { at: this.state.startLoc }), this.next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "ReturnStatement");
            }
            parseSwitchStatement(t) {
              this.next(), t.discriminant = this.parseHeaderExpression();
              let r = t.cases = [];
              this.expect(5), this.state.labels.push(Ql), this.scope.enter(_e);
              let e;
              for (let s; !this.match(8); )
                if (this.match(61) || this.match(65)) {
                  let i = this.match(61);
                  e && this.finishNode(e, "SwitchCase"), r.push(e = this.startNode()), e.consequent = [], this.next(), i ? e.test = this.parseExpression() : (s && this.raise(h.MultipleDefaultsInSwitch, { at: this.state.lastTokStartLoc }), s = true, e.test = null), this.expect(14);
                } else
                  e ? e.consequent.push(this.parseStatement(null)) : this.unexpected();
              return this.scope.exit(), e && this.finishNode(e, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(t, "SwitchStatement");
            }
            parseThrowStatement(t) {
              return this.next(), this.hasPrecedingLineBreak() && this.raise(h.NewlineAfterThrow, { at: this.state.lastTokEndLoc }), t.argument = this.parseExpression(), this.semicolon(), this.finishNode(t, "ThrowStatement");
            }
            parseCatchClauseParam() {
              let t = this.parseBindingAtom(), r = t.type === "Identifier";
              return this.scope.enter(r ? Pr : 0), this.checkLVal(t, { in: { type: "CatchClause" }, binding: Ie, allowingSloppyLetBinding: true }), t;
            }
            parseTryStatement(t) {
              if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(62)) {
                let r = this.startNode();
                this.next(), this.match(10) ? (this.expect(10), r.param = this.parseCatchClauseParam(), this.expect(11)) : (r.param = null, this.scope.enter(_e)), r.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), t.handler = this.finishNode(r, "CatchClause");
              }
              return t.finalizer = this.eat(67) ? this.parseBlock() : null, !t.handler && !t.finalizer && this.raise(h.NoCatchOrFinally, { at: t }), this.finishNode(t, "TryStatement");
            }
            parseVarStatement(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              return this.next(), this.parseVar(t, false, r, e), this.semicolon(), this.finishNode(t, "VariableDeclaration");
            }
            parseWhileStatement(t) {
              return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push(fs), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while")), this.state.labels.pop(), this.finishNode(t, "WhileStatement");
            }
            parseWithStatement(t) {
              return this.state.strict && this.raise(h.StrictWith, { at: this.state.startLoc }), this.next(), t.object = this.parseHeaderExpression(), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with")), this.finishNode(t, "WithStatement");
            }
            parseEmptyStatement(t) {
              return this.next(), this.finishNode(t, "EmptyStatement");
            }
            parseLabeledStatement(t, r, e, s) {
              for (let a of this.state.labels)
                a.name === r && this.raise(h.LabelRedeclaration, { at: e, labelName: r });
              let i = No(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
              for (let a = this.state.labels.length - 1; a >= 0; a--) {
                let n = this.state.labels[a];
                if (n.statementStart === t.start)
                  n.statementStart = this.state.start, n.kind = i;
                else
                  break;
              }
              return this.state.labels.push({ name: r, kind: i, statementStart: this.state.start }), t.body = this.parseStatement(s ? s.indexOf("label") === -1 ? s + "label" : s : "label"), this.state.labels.pop(), t.label = e, this.finishNode(t, "LabeledStatement");
            }
            parseExpressionStatement(t, r, e) {
              return t.expression = r, this.semicolon(), this.finishNode(t, "ExpressionStatement");
            }
            parseBlock() {
              let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, e = arguments.length > 2 ? arguments[2] : void 0, s = this.startNode();
              return t && this.state.strictErrors.clear(), this.expect(5), r && this.scope.enter(_e), this.parseBlockBody(s, t, false, 8, e), r && this.scope.exit(), this.finishNode(s, "BlockStatement");
            }
            isValidDirective(t) {
              return t.type === "ExpressionStatement" && t.expression.type === "StringLiteral" && !t.expression.extra.parenthesized;
            }
            parseBlockBody(t, r, e, s, i) {
              let a = t.body = [], n = t.directives = [];
              this.parseBlockOrModuleBlockBody(a, r ? n : void 0, e, s, i);
            }
            parseBlockOrModuleBlockBody(t, r, e, s, i) {
              let a = this.state.strict, n = false, o = false;
              for (; !this.match(s); ) {
                let c = this.parseStatement(null, e);
                if (r && !o) {
                  if (this.isValidDirective(c)) {
                    let p = this.stmtToDirective(c);
                    r.push(p), !n && p.value.value === "use strict" && (n = true, this.setStrict(true));
                    continue;
                  }
                  o = true, this.state.strictErrors.clear();
                }
                t.push(c);
              }
              i && i.call(this, n), a || this.setStrict(false), this.next();
            }
            parseFor(t, r) {
              return t.init = r, this.semicolon(false), t.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), t.update = this.match(11) ? null : this.parseExpression(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, "ForStatement");
            }
            parseForIn(t, r, e) {
              let s = this.match(58);
              return this.next(), s ? e !== null && this.unexpected(e) : t.await = e !== null, r.type === "VariableDeclaration" && r.declarations[0].init != null && (!s || this.state.strict || r.kind !== "var" || r.declarations[0].id.type !== "Identifier") && this.raise(h.ForInOfLoopInitializer, { at: r, type: s ? "ForInStatement" : "ForOfStatement" }), r.type === "AssignmentPattern" && this.raise(h.InvalidLhs, { at: r, ancestor: { type: "ForStatement" } }), t.left = r, t.right = s ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, s ? "ForInStatement" : "ForOfStatement");
            }
            parseVar(t, r, e) {
              let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, i = t.declarations = [];
              for (t.kind = e; ; ) {
                let a = this.startNode();
                if (this.parseVarId(a, e), a.init = this.eat(29) ? r ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, a.init === null && !s && (a.id.type !== "Identifier" && !(r && (this.match(58) || this.isContextual(101))) ? this.raise(h.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "destructuring" }) : e === "const" && !(this.match(58) || this.isContextual(101)) && this.raise(h.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "const" })), i.push(this.finishNode(a, "VariableDeclarator")), !this.eat(12))
                  break;
              }
              return t;
            }
            parseVarId(t, r) {
              let e = this.parseBindingAtom();
              r === "using" && e.type !== "Identifier" && this.raise(h.UsingDeclarationHasBindingPattern, { at: e }), this.checkLVal(e, { in: { type: "VariableDeclarator" }, binding: r === "var" ? dt : Ie }), t.id = e;
            }
            parseFunction(t) {
              let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Zl, e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, s = r & ms, i = r & Qr, a = !!s && !(r & Zr);
              this.initFunction(t, e), this.match(55) && i && this.raise(h.GeneratorInSingleStatementContext, { at: this.state.startLoc }), t.generator = this.eat(55), s && (t.id = this.parseFunctionId(a));
              let n = this.state.maybeInArrowParameters;
              return this.state.maybeInArrowParameters = false, this.scope.enter(me), this.prodParam.enter(Pt(e, t.generator)), s || (t.id = this.parseFunctionId()), this.parseFunctionParams(t, false), this.withSmartMixTopicForbiddingContext(() => {
                this.parseFunctionBodyAndFinish(t, s ? "FunctionDeclaration" : "FunctionExpression");
              }), this.prodParam.exit(), this.scope.exit(), s && !i && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = n, t;
            }
            parseFunctionId(t) {
              return t || $(this.state.type) ? this.parseIdentifier() : null;
            }
            parseFunctionParams(t, r) {
              this.expect(10), this.expressionScope.enter(Al()), t.params = this.parseBindingList(11, 41, false, r), this.expressionScope.exit();
            }
            registerFunctionStatementId(t) {
              !t.id || this.scope.declareName(t.id.name, this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ? dt : Ie : Cr, t.id.loc.start);
            }
            parseClass(t, r, e) {
              this.next();
              let s = this.state.strict;
              return this.state.strict = true, this.parseClassId(t, r, e), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass, s), this.finishNode(t, r ? "ClassDeclaration" : "ClassExpression");
            }
            isClassProperty() {
              return this.match(29) || this.match(13) || this.match(8);
            }
            isClassMethod() {
              return this.match(10);
            }
            isNonstaticConstructor(t) {
              return !t.computed && !t.static && (t.key.name === "constructor" || t.key.value === "constructor");
            }
            parseClassBody(t, r) {
              this.classScope.enter();
              let e = { hadConstructor: false, hadSuperClass: t }, s = [], i = this.startNode();
              if (i.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
                for (; !this.match(8); ) {
                  if (this.eat(13)) {
                    if (s.length > 0)
                      throw this.raise(h.DecoratorSemicolon, { at: this.state.lastTokEndLoc });
                    continue;
                  }
                  if (this.match(26)) {
                    s.push(this.parseDecorator());
                    continue;
                  }
                  let a = this.startNode();
                  s.length && (a.decorators = s, this.resetStartLocationFromNode(a, s[0]), s = []), this.parseClassMember(i, a, e), a.kind === "constructor" && a.decorators && a.decorators.length > 0 && this.raise(h.DecoratorConstructor, { at: a });
                }
              }), this.state.strict = r, this.next(), s.length)
                throw this.raise(h.TrailingDecorator, { at: this.state.startLoc });
              return this.classScope.exit(), this.finishNode(i, "ClassBody");
            }
            parseClassMemberFromModifier(t, r) {
              let e = this.parseIdentifier(true);
              if (this.isClassMethod()) {
                let s = r;
                return s.kind = "method", s.computed = false, s.key = e, s.static = false, this.pushClassMethod(t, s, false, false, false, false), true;
              } else if (this.isClassProperty()) {
                let s = r;
                return s.computed = false, s.key = e, s.static = false, t.body.push(this.parseClassProperty(s)), true;
              }
              return this.resetPreviousNodeTrailingComments(e), false;
            }
            parseClassMember(t, r, e) {
              let s = this.isContextual(104);
              if (s) {
                if (this.parseClassMemberFromModifier(t, r))
                  return;
                if (this.eat(5)) {
                  this.parseClassStaticBlock(t, r);
                  return;
                }
              }
              this.parseClassMemberWithIsStatic(t, r, e, s);
            }
            parseClassMemberWithIsStatic(t, r, e, s) {
              let i = r, a = r, n = r, o = r, c = r, p = i, m = i;
              if (r.static = s, this.parsePropertyNamePrefixOperator(r), this.eat(55)) {
                p.kind = "method";
                let R = this.match(136);
                if (this.parseClassElementName(p), R) {
                  this.pushClassPrivateMethod(t, a, true, false);
                  return;
                }
                this.isNonstaticConstructor(i) && this.raise(h.ConstructorIsGenerator, { at: i.key }), this.pushClassMethod(t, i, true, false, false, false);
                return;
              }
              let x = $(this.state.type) && !this.state.containsEsc, P = this.match(136), b = this.parseClassElementName(r), O = this.state.startLoc;
              if (this.parsePostMemberNameModifiers(m), this.isClassMethod()) {
                if (p.kind = "method", P) {
                  this.pushClassPrivateMethod(t, a, false, false);
                  return;
                }
                let R = this.isNonstaticConstructor(i), Q = false;
                R && (i.kind = "constructor", e.hadConstructor && !this.hasPlugin("typescript") && this.raise(h.DuplicateConstructor, { at: b }), R && this.hasPlugin("typescript") && r.override && this.raise(h.OverrideOnConstructor, { at: b }), e.hadConstructor = true, Q = e.hadSuperClass), this.pushClassMethod(t, i, false, false, R, Q);
              } else if (this.isClassProperty())
                P ? this.pushClassPrivateProperty(t, o) : this.pushClassProperty(t, n);
              else if (x && b.name === "async" && !this.isLineTerminator()) {
                this.resetPreviousNodeTrailingComments(b);
                let R = this.eat(55);
                m.optional && this.unexpected(O), p.kind = "method";
                let Q = this.match(136);
                this.parseClassElementName(p), this.parsePostMemberNameModifiers(m), Q ? this.pushClassPrivateMethod(t, a, R, true) : (this.isNonstaticConstructor(i) && this.raise(h.ConstructorIsAsync, { at: i.key }), this.pushClassMethod(t, i, R, true, false, false));
              } else if (x && (b.name === "get" || b.name === "set") && !(this.match(55) && this.isLineTerminator())) {
                this.resetPreviousNodeTrailingComments(b), p.kind = b.name;
                let R = this.match(136);
                this.parseClassElementName(i), R ? this.pushClassPrivateMethod(t, a, false, false) : (this.isNonstaticConstructor(i) && this.raise(h.ConstructorIsAccessor, { at: i.key }), this.pushClassMethod(t, i, false, false, false, false)), this.checkGetterSetterParams(i);
              } else if (x && b.name === "accessor" && !this.isLineTerminator()) {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(b);
                let R = this.match(136);
                this.parseClassElementName(n), this.pushClassAccessorProperty(t, c, R);
              } else
                this.isLineTerminator() ? P ? this.pushClassPrivateProperty(t, o) : this.pushClassProperty(t, n) : this.unexpected();
            }
            parseClassElementName(t) {
              let { type: r, value: e } = this.state;
              if ((r === 130 || r === 131) && t.static && e === "prototype" && this.raise(h.StaticPrototype, { at: this.state.startLoc }), r === 136) {
                e === "constructor" && this.raise(h.ConstructorClassPrivateField, { at: this.state.startLoc });
                let s = this.parsePrivateName();
                return t.key = s, s;
              }
              return this.parsePropertyName(t);
            }
            parseClassStaticBlock(t, r) {
              var e;
              this.scope.enter(Se | ht | lt);
              let s = this.state.labels;
              this.state.labels = [], this.prodParam.enter(qe);
              let i = r.body = [];
              this.parseBlockOrModuleBlockBody(i, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = s, t.body.push(this.finishNode(r, "StaticBlock")), (e = r.decorators) != null && e.length && this.raise(h.DecoratorStaticBlock, { at: r });
            }
            pushClassProperty(t, r) {
              !r.computed && (r.key.name === "constructor" || r.key.value === "constructor") && this.raise(h.ConstructorClassField, { at: r.key }), t.body.push(this.parseClassProperty(r));
            }
            pushClassPrivateProperty(t, r) {
              let e = this.parseClassPrivateProperty(r);
              t.body.push(e), this.classScope.declarePrivateName(this.getPrivateNameSV(e.key), as, e.key.loc.start);
            }
            pushClassAccessorProperty(t, r, e) {
              if (!e && !r.computed) {
                let i = r.key;
                (i.name === "constructor" || i.value === "constructor") && this.raise(h.ConstructorClassField, { at: i });
              }
              let s = this.parseClassAccessorProperty(r);
              t.body.push(s), e && this.classScope.declarePrivateName(this.getPrivateNameSV(s.key), as, s.key.loc.start);
            }
            pushClassMethod(t, r, e, s, i, a) {
              t.body.push(this.parseMethod(r, e, s, i, a, "ClassMethod", true));
            }
            pushClassPrivateMethod(t, r, e, s) {
              let i = this.parseMethod(r, e, s, false, false, "ClassPrivateMethod", true);
              t.body.push(i);
              let a = i.kind === "get" ? i.static ? Qo : el : i.kind === "set" ? i.static ? Zo : tl : as;
              this.declareClassPrivateMethodInScope(i, a);
            }
            declareClassPrivateMethodInScope(t, r) {
              this.classScope.declarePrivateName(this.getPrivateNameSV(t.key), r, t.key.loc.start);
            }
            parsePostMemberNameModifiers(t) {
            }
            parseClassPrivateProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassPrivateProperty");
            }
            parseClassProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassProperty");
            }
            parseClassAccessorProperty(t) {
              return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassAccessorProperty");
            }
            parseInitializer(t) {
              this.scope.enter(Se | lt), this.expressionScope.enter(Rr()), this.prodParam.enter(qe), t.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
            }
            parseClassId(t, r, e) {
              let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Er;
              if ($(this.state.type))
                t.id = this.parseIdentifier(), r && this.declareNameFromIdentifier(t.id, s);
              else if (e || !r)
                t.id = null;
              else
                throw this.raise(h.MissingClassName, { at: this.state.startLoc });
            }
            parseClassSuper(t) {
              t.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
            }
            parseExport(t, r) {
              let e = this.maybeParseExportDefaultSpecifier(t), s = !e || this.eat(12), i = s && this.eatExportStar(t), a = i && this.maybeParseExportNamespaceSpecifier(t), n = s && (!a || this.eat(12)), o = e || i;
              if (i && !a) {
                if (e && this.unexpected(), r)
                  throw this.raise(h.UnsupportedDecoratorExport, { at: t });
                return this.parseExportFrom(t, true), this.finishNode(t, "ExportAllDeclaration");
              }
              let c = this.maybeParseExportNamedSpecifiers(t);
              if (e && s && !i && !c || a && n && !c)
                throw this.unexpected(null, 5);
              let p;
              if (o || c) {
                if (p = false, r)
                  throw this.raise(h.UnsupportedDecoratorExport, { at: t });
                this.parseExportFrom(t, o);
              } else
                p = this.maybeParseExportDeclaration(t);
              if (o || c || p) {
                var m;
                let x = t;
                if (this.checkExport(x, true, false, !!x.source), ((m = x.declaration) == null ? void 0 : m.type) === "ClassDeclaration")
                  this.maybeTakeDecorators(r, x.declaration, x);
                else if (r)
                  throw this.raise(h.UnsupportedDecoratorExport, { at: t });
                return this.finishNode(x, "ExportNamedDeclaration");
              }
              if (this.eat(65)) {
                let x = t, P = this.parseExportDefaultExpression();
                if (x.declaration = P, P.type === "ClassDeclaration")
                  this.maybeTakeDecorators(r, P, x);
                else if (r)
                  throw this.raise(h.UnsupportedDecoratorExport, { at: t });
                return this.checkExport(x, true, true), this.finishNode(x, "ExportDefaultDeclaration");
              }
              throw this.unexpected(null, 5);
            }
            eatExportStar(t) {
              return this.eat(55);
            }
            maybeParseExportDefaultSpecifier(t) {
              if (this.isExportDefaultSpecifier()) {
                this.expectPlugin("exportDefaultFrom");
                let r = this.startNode();
                return r.exported = this.parseIdentifier(true), t.specifiers = [this.finishNode(r, "ExportDefaultSpecifier")], true;
              }
              return false;
            }
            maybeParseExportNamespaceSpecifier(t) {
              if (this.isContextual(93)) {
                t.specifiers || (t.specifiers = []);
                let r = this.startNodeAt(this.state.lastTokStartLoc);
                return this.next(), r.exported = this.parseModuleExportName(), t.specifiers.push(this.finishNode(r, "ExportNamespaceSpecifier")), true;
              }
              return false;
            }
            maybeParseExportNamedSpecifiers(t) {
              if (this.match(5)) {
                t.specifiers || (t.specifiers = []);
                let r = t.exportKind === "type";
                return t.specifiers.push(...this.parseExportSpecifiers(r)), t.source = null, t.declaration = null, this.hasPlugin("importAssertions") && (t.assertions = []), true;
              }
              return false;
            }
            maybeParseExportDeclaration(t) {
              return this.shouldParseExportDeclaration() ? (t.specifiers = [], t.source = null, this.hasPlugin("importAssertions") && (t.assertions = []), t.declaration = this.parseExportDeclaration(t), true) : false;
            }
            isAsyncFunction() {
              if (!this.isContextual(95))
                return false;
              let t = this.nextTokenStart();
              return !ls.test(this.input.slice(this.state.pos, t)) && this.isUnparsedContextual(t, "function");
            }
            parseExportDefaultExpression() {
              let t = this.startNode(), r = this.isAsyncFunction();
              if (this.match(68) || r)
                return this.next(), r && this.next(), this.parseFunction(t, ms | Zr, r);
              if (this.match(80))
                return this.parseClass(t, true, true);
              if (this.match(26))
                return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(h.DecoratorBeforeExport, { at: this.state.startLoc }), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
              if (this.match(75) || this.match(74) || this.isLet())
                throw this.raise(h.UnsupportedDefaultExport, { at: this.state.startLoc });
              let e = this.parseMaybeAssignAllowIn();
              return this.semicolon(), e;
            }
            parseExportDeclaration(t) {
              return this.match(80) ? this.parseClass(this.startNode(), true, false) : this.parseStatement(null);
            }
            isExportDefaultSpecifier() {
              let { type: t } = this.state;
              if ($(t)) {
                if (t === 95 && !this.state.containsEsc || t === 99)
                  return false;
                if ((t === 128 || t === 127) && !this.state.containsEsc) {
                  let { type: s } = this.lookahead();
                  if ($(s) && s !== 97 || s === 5)
                    return this.expectOnePlugin(["flow", "typescript"]), false;
                }
              } else if (!this.match(65))
                return false;
              let r = this.nextTokenStart(), e = this.isUnparsedContextual(r, "from");
              if (this.input.charCodeAt(r) === 44 || $(this.state.type) && e)
                return true;
              if (this.match(65) && e) {
                let s = this.input.charCodeAt(this.nextTokenStartSince(r + 4));
                return s === 34 || s === 39;
              }
              return false;
            }
            parseExportFrom(t, r) {
              if (this.eatContextual(97)) {
                t.source = this.parseImportSource(), this.checkExport(t);
                let e = this.maybeParseImportAssertions();
                e && (t.assertions = e, this.checkJSONModuleImport(t));
              } else
                r && this.unexpected();
              this.semicolon();
            }
            shouldParseExportDeclaration() {
              let { type: t } = this.state;
              if (t === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators"))) {
                if (this.getPluginOption("decorators", "decoratorsBeforeExport"))
                  throw this.raise(h.DecoratorBeforeExport, { at: this.state.startLoc });
                return true;
              }
              return t === 74 || t === 75 || t === 68 || t === 80 || this.isLet() || this.isAsyncFunction();
            }
            checkExport(t, r, e, s) {
              if (r) {
                if (e) {
                  if (this.checkDuplicateExports(t, "default"), this.hasPlugin("exportDefaultFrom")) {
                    var i;
                    let a = t.declaration;
                    a.type === "Identifier" && a.name === "from" && a.end - a.start === 4 && !((i = a.extra) != null && i.parenthesized) && this.raise(h.ExportDefaultFromAsIdentifier, { at: a });
                  }
                } else if (t.specifiers && t.specifiers.length)
                  for (let a of t.specifiers) {
                    let { exported: n } = a, o = n.type === "Identifier" ? n.name : n.value;
                    if (this.checkDuplicateExports(a, o), !s && a.local) {
                      let { local: c } = a;
                      c.type !== "Identifier" ? this.raise(h.ExportBindingIsString, { at: a, localName: c.value, exportName: o }) : (this.checkReservedWord(c.name, c.loc.start, true, false), this.scope.checkLocalExport(c));
                    }
                  }
                else if (t.declaration) {
                  if (t.declaration.type === "FunctionDeclaration" || t.declaration.type === "ClassDeclaration") {
                    let a = t.declaration.id;
                    if (!a)
                      throw new Error("Assertion failure");
                    this.checkDuplicateExports(t, a.name);
                  } else if (t.declaration.type === "VariableDeclaration")
                    for (let a of t.declaration.declarations)
                      this.checkDeclaration(a.id);
                }
              }
            }
            checkDeclaration(t) {
              if (t.type === "Identifier")
                this.checkDuplicateExports(t, t.name);
              else if (t.type === "ObjectPattern")
                for (let r of t.properties)
                  this.checkDeclaration(r);
              else if (t.type === "ArrayPattern")
                for (let r of t.elements)
                  r && this.checkDeclaration(r);
              else
                t.type === "ObjectProperty" ? this.checkDeclaration(t.value) : t.type === "RestElement" ? this.checkDeclaration(t.argument) : t.type === "AssignmentPattern" && this.checkDeclaration(t.left);
            }
            checkDuplicateExports(t, r) {
              this.exportedIdentifiers.has(r) && (r === "default" ? this.raise(h.DuplicateDefaultExport, { at: t }) : this.raise(h.DuplicateExport, { at: t, exportName: r })), this.exportedIdentifiers.add(r);
            }
            parseExportSpecifiers(t) {
              let r = [], e = true;
              for (this.expect(5); !this.eat(8); ) {
                if (e)
                  e = false;
                else if (this.expect(12), this.eat(8))
                  break;
                let s = this.isContextual(128), i = this.match(131), a = this.startNode();
                a.local = this.parseModuleExportName(), r.push(this.parseExportSpecifier(a, i, t, s));
              }
              return r;
            }
            parseExportSpecifier(t, r, e, s) {
              return this.eatContextual(93) ? t.exported = this.parseModuleExportName() : r ? t.exported = Sl(t.local) : t.exported || (t.exported = xe(t.local)), this.finishNode(t, "ExportSpecifier");
            }
            parseModuleExportName() {
              if (this.match(131)) {
                let t = this.parseStringLiteral(this.state.value), r = t.value.match(eh);
                return r && this.raise(h.ModuleExportNameHasLoneSurrogate, { at: t, surrogateCharCode: r[0].charCodeAt(0) }), t;
              }
              return this.parseIdentifier(true);
            }
            isJSONModuleImport(t) {
              return t.assertions != null ? t.assertions.some((r) => {
                let { key: e, value: s } = r;
                return s.value === "json" && (e.type === "Identifier" ? e.name === "type" : e.value === "type");
              }) : false;
            }
            checkImportReflection(t) {
              if (t.module) {
                var r;
                (t.specifiers.length !== 1 || t.specifiers[0].type !== "ImportDefaultSpecifier") && this.raise(h.ImportReflectionNotBinding, { at: t.specifiers[0].loc.start }), ((r = t.assertions) == null ? void 0 : r.length) > 0 && this.raise(h.ImportReflectionHasAssertion, { at: t.specifiers[0].loc.start });
              }
            }
            checkJSONModuleImport(t) {
              if (this.isJSONModuleImport(t) && t.type !== "ExportAllDeclaration") {
                let { specifiers: r } = t;
                if (r != null) {
                  let e = r.find((s) => {
                    let i;
                    if (s.type === "ExportSpecifier" ? i = s.local : s.type === "ImportSpecifier" && (i = s.imported), i !== void 0)
                      return i.type === "Identifier" ? i.name !== "default" : i.value !== "default";
                  });
                  e !== void 0 && this.raise(h.ImportJSONBindingNotDefault, { at: e.loc.start });
                }
              }
            }
            parseMaybeImportReflection(t) {
              let r = false;
              if (this.isContextual(125)) {
                let e = this.lookahead();
                $(e.type) ? (e.type !== 97 || this.input.charCodeAt(this.nextTokenStartSince(e.end)) === 102) && (r = true) : r = true;
              }
              r ? (this.expectPlugin("importReflection"), this.next(), t.module = true) : this.hasPlugin("importReflection") && (t.module = false);
            }
            parseImport(t) {
              if (t.specifiers = [], !this.match(131)) {
                this.parseMaybeImportReflection(t);
                let s = !this.maybeParseDefaultImportSpecifier(t) || this.eat(12), i = s && this.maybeParseStarImportSpecifier(t);
                s && !i && this.parseNamedImportSpecifiers(t), this.expectContextual(97);
              }
              t.source = this.parseImportSource();
              let r = this.maybeParseImportAssertions();
              if (r)
                t.assertions = r;
              else {
                let e = this.maybeParseModuleAttributes();
                e && (t.attributes = e);
              }
              return this.checkImportReflection(t), this.checkJSONModuleImport(t), this.semicolon(), this.finishNode(t, "ImportDeclaration");
            }
            parseImportSource() {
              return this.match(131) || this.unexpected(), this.parseExprAtom();
            }
            shouldParseDefaultImport(t) {
              return $(this.state.type);
            }
            parseImportSpecifierLocal(t, r, e) {
              r.local = this.parseIdentifier(), t.specifiers.push(this.finishImportSpecifier(r, e));
            }
            finishImportSpecifier(t, r) {
              let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Ie;
              return this.checkLVal(t.local, { in: t, binding: e }), this.finishNode(t, r);
            }
            parseAssertEntries() {
              let t = [], r = /* @__PURE__ */ new Set();
              do {
                if (this.match(8))
                  break;
                let e = this.startNode(), s = this.state.value;
                if (r.has(s) && this.raise(h.ModuleAttributesWithDuplicateKeys, { at: this.state.startLoc, key: s }), r.add(s), this.match(131) ? e.key = this.parseStringLiteral(s) : e.key = this.parseIdentifier(true), this.expect(14), !this.match(131))
                  throw this.raise(h.ModuleAttributeInvalidValue, { at: this.state.startLoc });
                e.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(e, "ImportAttribute"));
              } while (this.eat(12));
              return t;
            }
            maybeParseModuleAttributes() {
              if (this.match(76) && !this.hasPrecedingLineBreak())
                this.expectPlugin("moduleAttributes"), this.next();
              else
                return this.hasPlugin("moduleAttributes") ? [] : null;
              let t = [], r = /* @__PURE__ */ new Set();
              do {
                let e = this.startNode();
                if (e.key = this.parseIdentifier(true), e.key.name !== "type" && this.raise(h.ModuleAttributeDifferentFromType, { at: e.key }), r.has(e.key.name) && this.raise(h.ModuleAttributesWithDuplicateKeys, { at: e.key, key: e.key.name }), r.add(e.key.name), this.expect(14), !this.match(131))
                  throw this.raise(h.ModuleAttributeInvalidValue, { at: this.state.startLoc });
                e.value = this.parseStringLiteral(this.state.value), this.finishNode(e, "ImportAttribute"), t.push(e);
              } while (this.eat(12));
              return t;
            }
            maybeParseImportAssertions() {
              if (this.isContextual(94) && !this.hasPrecedingLineBreak())
                this.expectPlugin("importAssertions"), this.next();
              else
                return this.hasPlugin("importAssertions") ? [] : null;
              this.eat(5);
              let t = this.parseAssertEntries();
              return this.eat(8), t;
            }
            maybeParseDefaultImportSpecifier(t) {
              return this.shouldParseDefaultImport(t) ? (this.parseImportSpecifierLocal(t, this.startNode(), "ImportDefaultSpecifier"), true) : false;
            }
            maybeParseStarImportSpecifier(t) {
              if (this.match(55)) {
                let r = this.startNode();
                return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(t, r, "ImportNamespaceSpecifier"), true;
              }
              return false;
            }
            parseNamedImportSpecifiers(t) {
              let r = true;
              for (this.expect(5); !this.eat(8); ) {
                if (r)
                  r = false;
                else {
                  if (this.eat(14))
                    throw this.raise(h.DestructureNamedImport, { at: this.state.startLoc });
                  if (this.expect(12), this.eat(8))
                    break;
                }
                let e = this.startNode(), s = this.match(131), i = this.isContextual(128);
                e.imported = this.parseModuleExportName();
                let a = this.parseImportSpecifier(e, s, t.importKind === "type" || t.importKind === "typeof", i, void 0);
                t.specifiers.push(a);
              }
            }
            parseImportSpecifier(t, r, e, s, i) {
              if (this.eatContextual(93))
                t.local = this.parseIdentifier();
              else {
                let { imported: a } = t;
                if (r)
                  throw this.raise(h.ImportBindingIsString, { at: t, importName: a.value });
                this.checkReservedWord(a.name, t.loc.start, true, true), t.local || (t.local = xe(a));
              }
              return this.finishImportSpecifier(t, "ImportSpecifier", i);
            }
            isThisParam(t) {
              return t.type === "Identifier" && t.name === "this";
            }
          }, "sh"), ei = /* @__PURE__ */ __name(class extends sh {
            constructor(t, r) {
              t = Gl(t), super(t, r), this.options = t, this.initializeScopes(), this.plugins = rh(this.options.plugins), this.filename = t.sourceFilename;
            }
            getScopeHandler() {
              return os;
            }
            parse() {
              this.enterInitialScopes();
              let t = this.startNode(), r = this.startNode();
              return this.nextToken(), t.errors = null, this.parseTopLevel(t, r), t.errors = this.state.errors, t;
            }
          }, "ei");
          function rh(t) {
            let r = /* @__PURE__ */ new Map();
            for (let e of t) {
              let [s, i] = Array.isArray(e) ? e : [e, {}];
              r.has(s) || r.set(s, i || {});
            }
            return r;
          }
          __name(rh, "rh");
          function ih(t, r) {
            var e;
            if (((e = r) == null ? void 0 : e.sourceType) === "unambiguous") {
              r = Object.assign({}, r);
              try {
                r.sourceType = "module";
                let s = et(r, t), i = s.parse();
                if (s.sawUnambiguousESM)
                  return i;
                if (s.ambiguousScriptDifferentAst)
                  try {
                    return r.sourceType = "script", et(r, t).parse();
                  } catch {
                  }
                else
                  i.program.sourceType = "script";
                return i;
              } catch (s) {
                try {
                  return r.sourceType = "script", et(r, t).parse();
                } catch {
                }
                throw s;
              }
            } else
              return et(r, t).parse();
          }
          __name(ih, "ih");
          function ah(t, r) {
            let e = et(r, t);
            return e.options.strictMode && (e.state.strict = true), e.getExpression();
          }
          __name(ah, "ah");
          function nh(t) {
            let r = {};
            for (let e of Object.keys(t))
              r[e] = de(t[e]);
            return r;
          }
          __name(nh, "nh");
          var oh = nh(bo);
          function et(t, r) {
            let e = ei;
            return t != null && t.plugins && (Kl(t.plugins), e = lh(t.plugins)), new e(t, r);
          }
          __name(et, "et");
          var ti = {};
          function lh(t) {
            let r = Wl.filter((i) => se(t, i)), e = r.join("/"), s = ti[e];
            if (!s) {
              s = ei;
              for (let i of r)
                s = Jr[i](s);
              ti[e] = s;
            }
            return s;
          }
          __name(lh, "lh");
          l.parse = ih, l.parseExpression = ah, l.tokTypes = oh;
        } }), Td = K({ "src/language-js/parse/json.js"(l, u) {
          "use strict";
          V();
          var d = lr(), f = hr(), y = xo(), A = go();
          function g() {
            let E = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, { allowComments: L = true } = E;
            return function(k) {
              let { parseExpression: z } = To(), G;
              try {
                G = z(k, { tokens: true, ranges: true });
              } catch (B) {
                throw A(B);
              }
              if (!L && d(G.comments))
                throw T(G.comments[0], "Comment");
              return S(G), G;
            };
          }
          __name(g, "g");
          function T(E, L) {
            let [j, k] = [E.loc.start, E.loc.end].map((z) => {
              let { line: G, column: B } = z;
              return { line: G, column: B + 1 };
            });
            return f(`${L} is not allowed in JSON.`, { start: j, end: k });
          }
          __name(T, "T");
          function S(E) {
            switch (E.type) {
              case "ArrayExpression":
                for (let L of E.elements)
                  L !== null && S(L);
                return;
              case "ObjectExpression":
                for (let L of E.properties)
                  S(L);
                return;
              case "ObjectProperty":
                if (E.computed)
                  throw T(E.key, "Computed key");
                if (E.shorthand)
                  throw T(E.key, "Shorthand property");
                E.key.type !== "Identifier" && S(E.key), S(E.value);
                return;
              case "UnaryExpression": {
                let { operator: L, argument: j } = E;
                if (L !== "+" && L !== "-")
                  throw T(E, `Operator '${E.operator}'`);
                if (j.type === "NumericLiteral" || j.type === "Identifier" && (j.name === "Infinity" || j.name === "NaN"))
                  return;
                throw T(j, `Operator '${L}' before '${j.type}'`);
              }
              case "Identifier":
                if (E.name !== "Infinity" && E.name !== "NaN" && E.name !== "undefined")
                  throw T(E, `Identifier '${E.name}'`);
                return;
              case "TemplateLiteral":
                if (d(E.expressions))
                  throw T(E.expressions[0], "'TemplateLiteral' with expression");
                for (let L of E.quasis)
                  S(L);
                return;
              case "NullLiteral":
              case "BooleanLiteral":
              case "NumericLiteral":
              case "StringLiteral":
              case "TemplateElement":
                return;
              default:
                throw T(E, `'${E.type}'`);
            }
          }
          __name(S, "S");
          var F = g(), I = { json: y({ parse: F, hasPragma() {
            return true;
          } }), json5: y(F), "json-stringify": y({ parse: g({ allowComments: false }), astFormat: "estree-json" }) };
          u.exports = I;
        } });
        V();
        var vd = sd(), Ed = eo(), Cd = nd(), Ve = xo(), bd = go(), Sd = Ad(), wd = Td(), Id = { sourceType: "module", allowImportExportEverywhere: true, allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, allowUndeclaredExports: true, errorRecovery: true, createParenthesizedExpressions: true, plugins: ["doExpressions", "exportDefaultFrom", "functionBind", "functionSent", "throwExpressions", "partialApplication", ["decorators", { decoratorsBeforeExport: false }], "importAssertions", "decimal", "moduleBlocks", "asyncDoExpressions", "regexpUnicodeSets", "destructuringPrivate", "decoratorAutoAccessors"], tokens: true, ranges: true }, Nd = ["recordAndTuple", { syntaxType: "hash" }], Gn = "v8intrinsic", Jn = [["pipelineOperator", { proposal: "hack", topicToken: "%" }], ["pipelineOperator", { proposal: "minimal" }], ["pipelineOperator", { proposal: "fsharp" }]], ue = /* @__PURE__ */ __name(function(l) {
          let u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Id;
          return Object.assign(Object.assign({}, u), {}, { plugins: [...u.plugins, ...l] });
        }, "ue"), kd = /@(?:no)?flow\b/;
        function Dd(l, u) {
          if (u.filepath && u.filepath.endsWith(".js.flow"))
            return true;
          let d = Ed(l);
          d && (l = l.slice(d.length));
          let f = Cd(l, 0);
          return f !== false && (l = l.slice(0, f)), kd.test(l);
        }
        __name(Dd, "Dd");
        function Fd(l, u, d) {
          let y = To()[l](u, d), A = y.errors.find((g) => !Rd.has(g.reasonCode));
          if (A)
            throw A;
          return y;
        }
        __name(Fd, "Fd");
        function Ke(l) {
          for (var u = arguments.length, d = new Array(u > 1 ? u - 1 : 0), f = 1; f < u; f++)
            d[f - 1] = arguments[f];
          return function(y, A) {
            let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            if ((g.parser === "babel" || g.parser === "__babel_estree") && Dd(y, g))
              return g.parser = "babel-flow", vo(y, A, g);
            let T = d;
            g.__babelSourceType === "script" && (T = T.map((E) => Object.assign(Object.assign({}, E), {}, { sourceType: "script" }))), /#[[{]/.test(y) && (T = T.map((E) => ue([Nd], E)));
            let S = /%[A-Z]/.test(y);
            y.includes("|>") ? T = (S ? [...Jn, Gn] : Jn).flatMap((L) => T.map((j) => ue([L], j))) : S && (T = T.map((E) => ue([Gn], E)));
            let { result: F, error: I } = vd(...T.map((E) => () => Fd(l, y, E)));
            if (!F)
              throw bd(I);
            return g.originalText = y, Sd(F, g);
          };
        }
        __name(Ke, "Ke");
        var Ld = Ke("parse", ue(["jsx", "flow"])), vo = Ke("parse", ue(["jsx", ["flow", { all: true, enums: true }]])), Od = Ke("parse", ue(["jsx", "typescript"]), ue(["typescript"])), Md = Ke("parse", ue(["jsx", "flow", "estree"])), Bd = Ke("parseExpression", ue(["jsx"])), _d = Ke("parseExpression", ue(["typescript"])), Rd = /* @__PURE__ */ new Set(["StrictNumericEscape", "StrictWith", "StrictOctalLiteral", "StrictDelete", "StrictEvalArguments", "StrictEvalArgumentsBinding", "StrictFunction", "EmptyTypeArguments", "EmptyTypeParameters", "ConstructorHasTypeParameters", "UnsupportedParameterPropertyKind", "UnexpectedParameterModifier", "MixedLabeledAndUnlabeledElements", "InvalidTupleMemberLabel", "NonClassMethodPropertyHasAbstractModifer", "ReadonlyForMethodSignature", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "InvalidModifierOnTypeMember", "DuplicateAccessibilityModifier", "IndexSignatureHasDeclare", "DecoratorExportClass", "ParamDupe", "InvalidDecimal", "RestTrailingComma", "UnsupportedParameterDecorator", "UnterminatedJsxContent", "UnexpectedReservedWord", "ModuleAttributesWithDuplicateKeys", "LineTerminatorBeforeArrow", "InvalidEscapeSequenceTemplate", "NonAbstractClassHasAbstractMethod", "UnsupportedPropertyDecorator", "OptionalTypeBeforeRequired", "PatternIsOptional", "OptionalBindingPattern", "DeclareClassFieldHasInitializer", "TypeImportCannotSpecifyDefaultAndNamed", "DeclareFunctionHasImplementation", "ConstructorClassField", "VarRedeclaration", "InvalidPrivateFieldResolution", "DuplicateExport"]), Xn = Ve(Ld), Yn = Ve(Od), Qn = Ve(Bd), jd = Ve(_d);
        Eo.exports = { parsers: Object.assign(Object.assign({ babel: Xn, "babel-flow": Ve(vo), "babel-ts": Yn }, wd), {}, { __js_expression: Qn, __vue_expression: Qn, __vue_ts_expression: jd, __vue_event_binding: Xn, __vue_ts_event_binding: Yn, __babel_estree: Ve(Md) }) };
      });
      return qd();
    });
  }
});

// ../../.yarn/global/cache/prettier-npm-2.8.0-746e3df53e-9.zip/node_modules/prettier/standalone.js
var require_standalone = __commonJS({
  "../../.yarn/global/cache/prettier-npm-2.8.0-746e3df53e-9.zip/node_modules/prettier/standalone.js"(exports, module) {
    init_define_process();
    (function(e) {
      if (typeof exports == "object" && typeof module == "object")
        module.exports = e();
      else if (typeof define == "function" && define.amd)
        define(e);
      else {
        var f = typeof globalThis < "u" ? globalThis : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : this || {};
        f.prettier = e();
      }
    })(function() {
      "use strict";
      var Ne = /* @__PURE__ */ __name((e, n) => () => (n || e((n = { exports: {} }).exports, n), n.exports), "Ne");
      var Qe = Ne((Ng, nu) => {
        var ur = /* @__PURE__ */ __name(function(e) {
          return e && e.Math == Math && e;
        }, "ur");
        nu.exports = ur(typeof globalThis == "object" && globalThis) || ur(typeof window == "object" && window) || ur(typeof self == "object" && self) || ur(typeof globalThis == "object" && globalThis) || function() {
          return this;
        }() || Function("return this")();
      });
      var dt = Ne((wg, uu) => {
        uu.exports = function(e) {
          try {
            return !!e();
          } catch {
            return true;
          }
        };
      });
      var Ft = Ne((_g, su) => {
        var vo = dt();
        su.exports = !vo(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      });
      var sr = Ne((Pg, iu) => {
        var Co = dt();
        iu.exports = !Co(function() {
          var e = function() {
          }.bind();
          return typeof e != "function" || e.hasOwnProperty("prototype");
        });
      });
      var At = Ne((Ig, au) => {
        var Eo = sr(), ir = Function.prototype.call;
        au.exports = Eo ? ir.bind(ir) : function() {
          return ir.apply(ir, arguments);
        };
      });
      var pu = Ne((cu) => {
        "use strict";
        var ou = {}.propertyIsEnumerable, lu = Object.getOwnPropertyDescriptor, Fo = lu && !ou.call({ 1: 2 }, 1);
        cu.f = Fo ? function(n) {
          var t = lu(this, n);
          return !!t && t.enumerable;
        } : ou;
      });
      var ar = Ne((Lg, fu) => {
        fu.exports = function(e, n) {
          return { enumerable: !(e & 1), configurable: !(e & 2), writable: !(e & 4), value: n };
        };
      });
      var ct = Ne((jg, du) => {
        var Du = sr(), mu = Function.prototype, Ao = mu.bind, Mr = mu.call, So = Du && Ao.bind(Mr, Mr);
        du.exports = Du ? function(e) {
          return e && So(e);
        } : function(e) {
          return e && function() {
            return Mr.apply(e, arguments);
          };
        };
      });
      var or = Ne((Og, yu) => {
        var gu = ct(), xo = gu({}.toString), bo = gu("".slice);
        yu.exports = function(e) {
          return bo(xo(e), 8, -1);
        };
      });
      var vu = Ne((qg, hu) => {
        var To = Qe(), Bo = ct(), No = dt(), wo = or(), Rr = To.Object, _o = Bo("".split);
        hu.exports = No(function() {
          return !Rr("z").propertyIsEnumerable(0);
        }) ? function(e) {
          return wo(e) == "String" ? _o(e, "") : Rr(e);
        } : Rr;
      });
      var $r = Ne((Mg, Cu) => {
        var Po = Qe(), Io = Po.TypeError;
        Cu.exports = function(e) {
          if (e == null)
            throw Io("Can't call method on " + e);
          return e;
        };
      });
      var lr = Ne((Rg, Eu) => {
        var ko = vu(), Lo = $r();
        Eu.exports = function(e) {
          return ko(Lo(e));
        };
      });
      var pt = Ne(($g, Fu) => {
        Fu.exports = function(e) {
          return typeof e == "function";
        };
      });
      var St = Ne((Vg, Au) => {
        var jo = pt();
        Au.exports = function(e) {
          return typeof e == "object" ? e !== null : jo(e);
        };
      });
      var $t = Ne((Wg, Su) => {
        var Vr = Qe(), Oo = pt(), qo = /* @__PURE__ */ __name(function(e) {
          return Oo(e) ? e : void 0;
        }, "qo");
        Su.exports = function(e, n) {
          return arguments.length < 2 ? qo(Vr[e]) : Vr[e] && Vr[e][n];
        };
      });
      var Wr = Ne((Hg, xu) => {
        var Mo = ct();
        xu.exports = Mo({}.isPrototypeOf);
      });
      var Tu = Ne((Gg, bu) => {
        var Ro = $t();
        bu.exports = Ro("navigator", "userAgent") || "";
      });
      var ku = Ne((Ug, Iu) => {
        var Pu = Qe(), Hr = Tu(), Bu = Pu.process, Nu = Pu.Deno, wu = Bu && Bu.versions || Nu && Nu.version, _u = wu && wu.v8, mt, cr;
        _u && (mt = _u.split("."), cr = mt[0] > 0 && mt[0] < 4 ? 1 : +(mt[0] + mt[1]));
        !cr && Hr && (mt = Hr.match(/Edge\/(\d+)/), (!mt || mt[1] >= 74) && (mt = Hr.match(/Chrome\/(\d+)/), mt && (cr = +mt[1])));
        Iu.exports = cr;
      });
      var Gr = Ne((Jg, ju) => {
        var Lu = ku(), $o = dt();
        ju.exports = !!Object.getOwnPropertySymbols && !$o(function() {
          var e = Symbol();
          return !String(e) || !(Object(e) instanceof Symbol) || !Symbol.sham && Lu && Lu < 41;
        });
      });
      var Ur = Ne((zg, Ou) => {
        var Vo = Gr();
        Ou.exports = Vo && !Symbol.sham && typeof Symbol.iterator == "symbol";
      });
      var Jr = Ne((Xg, qu) => {
        var Wo = Qe(), Ho = $t(), Go = pt(), Uo = Wr(), Jo = Ur(), zo = Wo.Object;
        qu.exports = Jo ? function(e) {
          return typeof e == "symbol";
        } : function(e) {
          var n = Ho("Symbol");
          return Go(n) && Uo(n.prototype, zo(e));
        };
      });
      var pr = Ne((Kg, Mu) => {
        var Xo = Qe(), Ko = Xo.String;
        Mu.exports = function(e) {
          try {
            return Ko(e);
          } catch {
            return "Object";
          }
        };
      });
      var Vt = Ne((Yg, Ru) => {
        var Yo = Qe(), Qo = pt(), Zo = pr(), el = Yo.TypeError;
        Ru.exports = function(e) {
          if (Qo(e))
            return e;
          throw el(Zo(e) + " is not a function");
        };
      });
      var fr = Ne((Qg, $u) => {
        var tl = Vt();
        $u.exports = function(e, n) {
          var t = e[n];
          return t == null ? void 0 : tl(t);
        };
      });
      var Wu = Ne((Zg, Vu) => {
        var rl = Qe(), zr = At(), Xr = pt(), Kr = St(), nl = rl.TypeError;
        Vu.exports = function(e, n) {
          var t, s;
          if (n === "string" && Xr(t = e.toString) && !Kr(s = zr(t, e)) || Xr(t = e.valueOf) && !Kr(s = zr(t, e)) || n !== "string" && Xr(t = e.toString) && !Kr(s = zr(t, e)))
            return s;
          throw nl("Can't convert object to primitive value");
        };
      });
      var Gu = Ne((e0, Hu) => {
        Hu.exports = false;
      });
      var Dr = Ne((t0, Ju) => {
        var Uu = Qe(), ul = Object.defineProperty;
        Ju.exports = function(e, n) {
          try {
            ul(Uu, e, { value: n, configurable: true, writable: true });
          } catch {
            Uu[e] = n;
          }
          return n;
        };
      });
      var mr = Ne((r0, Xu) => {
        var sl = Qe(), il = Dr(), zu = "__core-js_shared__", al = sl[zu] || il(zu, {});
        Xu.exports = al;
      });
      var Yr = Ne((n0, Yu) => {
        var ol = Gu(), Ku = mr();
        (Yu.exports = function(e, n) {
          return Ku[e] || (Ku[e] = n !== void 0 ? n : {});
        })("versions", []).push({ version: "3.22.2", mode: ol ? "pure" : "global", copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.22.2/LICENSE", source: "https://github.com/zloirock/core-js" });
      });
      var dr = Ne((u0, Qu) => {
        var ll = Qe(), cl = $r(), pl = ll.Object;
        Qu.exports = function(e) {
          return pl(cl(e));
        };
      });
      var ht = Ne((s0, Zu) => {
        var fl = ct(), Dl = dr(), ml = fl({}.hasOwnProperty);
        Zu.exports = Object.hasOwn || function(n, t) {
          return ml(Dl(n), t);
        };
      });
      var Qr = Ne((i0, es) => {
        var dl = ct(), gl = 0, yl = Math.random(), hl = dl(1 .toString);
        es.exports = function(e) {
          return "Symbol(" + (e === void 0 ? "" : e) + ")_" + hl(++gl + yl, 36);
        };
      });
      var bt = Ne((a0, ss) => {
        var vl = Qe(), Cl = Yr(), ts = ht(), El = Qr(), rs = Gr(), us = Ur(), _t = Cl("wks"), xt = vl.Symbol, ns = xt && xt.for, Fl = us ? xt : xt && xt.withoutSetter || El;
        ss.exports = function(e) {
          if (!ts(_t, e) || !(rs || typeof _t[e] == "string")) {
            var n = "Symbol." + e;
            rs && ts(xt, e) ? _t[e] = xt[e] : us && ns ? _t[e] = ns(n) : _t[e] = Fl(n);
          }
          return _t[e];
        };
      });
      var ls = Ne((o0, os) => {
        var Al = Qe(), Sl = At(), is = St(), as = Jr(), xl = fr(), bl = Wu(), Tl = bt(), Bl = Al.TypeError, Nl = Tl("toPrimitive");
        os.exports = function(e, n) {
          if (!is(e) || as(e))
            return e;
          var t = xl(e, Nl), s;
          if (t) {
            if (n === void 0 && (n = "default"), s = Sl(t, e, n), !is(s) || as(s))
              return s;
            throw Bl("Can't convert object to primitive value");
          }
          return n === void 0 && (n = "number"), bl(e, n);
        };
      });
      var gr = Ne((l0, cs) => {
        var wl = ls(), _l = Jr();
        cs.exports = function(e) {
          var n = wl(e, "string");
          return _l(n) ? n : n + "";
        };
      });
      var Ds = Ne((c0, fs) => {
        var Pl = Qe(), ps = St(), Zr = Pl.document, Il = ps(Zr) && ps(Zr.createElement);
        fs.exports = function(e) {
          return Il ? Zr.createElement(e) : {};
        };
      });
      var en = Ne((p0, ms) => {
        var kl = Ft(), Ll = dt(), jl = Ds();
        ms.exports = !kl && !Ll(function() {
          return Object.defineProperty(jl("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      });
      var tn = Ne((gs) => {
        var Ol = Ft(), ql = At(), Ml = pu(), Rl = ar(), $l = lr(), Vl = gr(), Wl = ht(), Hl = en(), ds = Object.getOwnPropertyDescriptor;
        gs.f = Ol ? ds : function(n, t) {
          if (n = $l(n), t = Vl(t), Hl)
            try {
              return ds(n, t);
            } catch {
            }
          if (Wl(n, t))
            return Rl(!ql(Ml.f, n, t), n[t]);
        };
      });
      var hs = Ne((D0, ys) => {
        var Gl = Ft(), Ul = dt();
        ys.exports = Gl && Ul(function() {
          return Object.defineProperty(function() {
          }, "prototype", { value: 42, writable: false }).prototype != 42;
        });
      });
      var Pt = Ne((m0, Cs) => {
        var vs = Qe(), Jl = St(), zl = vs.String, Xl = vs.TypeError;
        Cs.exports = function(e) {
          if (Jl(e))
            return e;
          throw Xl(zl(e) + " is not an object");
        };
      });
      var hr = Ne((Fs) => {
        var Kl = Qe(), Yl = Ft(), Ql = en(), Zl = hs(), yr = Pt(), Es = gr(), ec = Kl.TypeError, rn = Object.defineProperty, tc = Object.getOwnPropertyDescriptor, nn = "enumerable", un = "configurable", sn = "writable";
        Fs.f = Yl ? Zl ? function(n, t, s) {
          if (yr(n), t = Es(t), yr(s), typeof n == "function" && t === "prototype" && "value" in s && sn in s && !s[sn]) {
            var a = tc(n, t);
            a && a[sn] && (n[t] = s.value, s = { configurable: un in s ? s[un] : a[un], enumerable: nn in s ? s[nn] : a[nn], writable: false });
          }
          return rn(n, t, s);
        } : rn : function(n, t, s) {
          if (yr(n), t = Es(t), yr(s), Ql)
            try {
              return rn(n, t, s);
            } catch {
            }
          if ("get" in s || "set" in s)
            throw ec("Accessors not supported");
          return "value" in s && (n[t] = s.value), n;
        };
      });
      var vr = Ne((g0, As) => {
        var rc = Ft(), nc = hr(), uc = ar();
        As.exports = rc ? function(e, n, t) {
          return nc.f(e, n, uc(1, t));
        } : function(e, n, t) {
          return e[n] = t, e;
        };
      });
      var Cr = Ne((y0, Ss) => {
        var sc = ct(), ic = pt(), an = mr(), ac = sc(Function.toString);
        ic(an.inspectSource) || (an.inspectSource = function(e) {
          return ac(e);
        });
        Ss.exports = an.inspectSource;
      });
      var Ts = Ne((h0, bs) => {
        var oc = Qe(), lc = pt(), cc = Cr(), xs = oc.WeakMap;
        bs.exports = lc(xs) && /native code/.test(cc(xs));
      });
      var ws = Ne((v0, Ns) => {
        var pc = Yr(), fc = Qr(), Bs = pc("keys");
        Ns.exports = function(e) {
          return Bs[e] || (Bs[e] = fc(e));
        };
      });
      var on = Ne((C0, _s) => {
        _s.exports = {};
      });
      var Os = Ne((E0, js) => {
        var Dc = Ts(), Ls = Qe(), ln = ct(), mc = St(), dc = vr(), cn = ht(), pn = mr(), gc = ws(), yc = on(), Ps = "Object already initialized", Dn = Ls.TypeError, hc = Ls.WeakMap, Er, Wt, Fr, vc = /* @__PURE__ */ __name(function(e) {
          return Fr(e) ? Wt(e) : Er(e, {});
        }, "vc"), Cc = /* @__PURE__ */ __name(function(e) {
          return function(n) {
            var t;
            if (!mc(n) || (t = Wt(n)).type !== e)
              throw Dn("Incompatible receiver, " + e + " required");
            return t;
          };
        }, "Cc");
        Dc || pn.state ? (vt = pn.state || (pn.state = new hc()), Is = ln(vt.get), fn = ln(vt.has), ks = ln(vt.set), Er = /* @__PURE__ */ __name(function(e, n) {
          if (fn(vt, e))
            throw new Dn(Ps);
          return n.facade = e, ks(vt, e, n), n;
        }, "Er"), Wt = /* @__PURE__ */ __name(function(e) {
          return Is(vt, e) || {};
        }, "Wt"), Fr = /* @__PURE__ */ __name(function(e) {
          return fn(vt, e);
        }, "Fr")) : (Tt = gc("state"), yc[Tt] = true, Er = /* @__PURE__ */ __name(function(e, n) {
          if (cn(e, Tt))
            throw new Dn(Ps);
          return n.facade = e, dc(e, Tt, n), n;
        }, "Er"), Wt = /* @__PURE__ */ __name(function(e) {
          return cn(e, Tt) ? e[Tt] : {};
        }, "Wt"), Fr = /* @__PURE__ */ __name(function(e) {
          return cn(e, Tt);
        }, "Fr"));
        var vt, Is, fn, ks, Tt;
        js.exports = { set: Er, get: Wt, has: Fr, enforce: vc, getterFor: Cc };
      });
      var Rs = Ne((F0, Ms) => {
        var mn = Ft(), Ec = ht(), qs = Function.prototype, Fc = mn && Object.getOwnPropertyDescriptor, dn = Ec(qs, "name"), Ac = dn && function() {
        }.name === "something", Sc = dn && (!mn || mn && Fc(qs, "name").configurable);
        Ms.exports = { EXISTS: dn, PROPER: Ac, CONFIGURABLE: Sc };
      });
      var Gs = Ne((A0, Hs) => {
        var xc = Qe(), $s = pt(), bc = ht(), Vs = vr(), Tc = Dr(), Bc = Cr(), Ws = Os(), Nc = Rs().CONFIGURABLE, wc = Ws.get, _c = Ws.enforce, Pc = String(String).split("String");
        (Hs.exports = function(e, n, t, s) {
          var a = s ? !!s.unsafe : false, r = s ? !!s.enumerable : false, u = s ? !!s.noTargetGet : false, i = s && s.name !== void 0 ? s.name : n, l;
          if ($s(t) && (String(i).slice(0, 7) === "Symbol(" && (i = "[" + String(i).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), (!bc(t, "name") || Nc && t.name !== i) && Vs(t, "name", i), l = _c(t), l.source || (l.source = Pc.join(typeof i == "string" ? i : ""))), e === xc) {
            r ? e[n] = t : Tc(n, t);
            return;
          } else
            a ? !u && e[n] && (r = true) : delete e[n];
          r ? e[n] = t : Vs(e, n, t);
        })(Function.prototype, "toString", function() {
          return $s(this) && wc(this).source || Bc(this);
        });
      });
      var Ar = Ne((S0, Us) => {
        var Ic = Math.ceil, kc = Math.floor;
        Us.exports = function(e) {
          var n = +e;
          return n !== n || n === 0 ? 0 : (n > 0 ? kc : Ic)(n);
        };
      });
      var zs = Ne((x0, Js) => {
        var Lc = Ar(), jc = Math.max, Oc = Math.min;
        Js.exports = function(e, n) {
          var t = Lc(e);
          return t < 0 ? jc(t + n, 0) : Oc(t, n);
        };
      });
      var Ks = Ne((b0, Xs) => {
        var qc = Ar(), Mc = Math.min;
        Xs.exports = function(e) {
          return e > 0 ? Mc(qc(e), 9007199254740991) : 0;
        };
      });
      var It = Ne((T0, Ys) => {
        var Rc = Ks();
        Ys.exports = function(e) {
          return Rc(e.length);
        };
      });
      var ei = Ne((B0, Zs) => {
        var $c = lr(), Vc = zs(), Wc = It(), Qs = /* @__PURE__ */ __name(function(e) {
          return function(n, t, s) {
            var a = $c(n), r = Wc(a), u = Vc(s, r), i;
            if (e && t != t) {
              for (; r > u; )
                if (i = a[u++], i != i)
                  return true;
            } else
              for (; r > u; u++)
                if ((e || u in a) && a[u] === t)
                  return e || u || 0;
            return !e && -1;
          };
        }, "Qs");
        Zs.exports = { includes: Qs(true), indexOf: Qs(false) };
      });
      var ni = Ne((N0, ri) => {
        var Hc = ct(), gn = ht(), Gc = lr(), Uc = ei().indexOf, Jc = on(), ti = Hc([].push);
        ri.exports = function(e, n) {
          var t = Gc(e), s = 0, a = [], r;
          for (r in t)
            !gn(Jc, r) && gn(t, r) && ti(a, r);
          for (; n.length > s; )
            gn(t, r = n[s++]) && (~Uc(a, r) || ti(a, r));
          return a;
        };
      });
      var si = Ne((w0, ui) => {
        ui.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      });
      var ai = Ne((ii) => {
        var zc = ni(), Xc = si(), Kc = Xc.concat("length", "prototype");
        ii.f = Object.getOwnPropertyNames || function(n) {
          return zc(n, Kc);
        };
      });
      var li = Ne((oi) => {
        oi.f = Object.getOwnPropertySymbols;
      });
      var pi = Ne((I0, ci) => {
        var Yc = $t(), Qc = ct(), Zc = ai(), ep = li(), tp = Pt(), rp = Qc([].concat);
        ci.exports = Yc("Reflect", "ownKeys") || function(n) {
          var t = Zc.f(tp(n)), s = ep.f;
          return s ? rp(t, s(n)) : t;
        };
      });
      var mi = Ne((k0, Di) => {
        var fi = ht(), np = pi(), up = tn(), sp = hr();
        Di.exports = function(e, n, t) {
          for (var s = np(n), a = sp.f, r = up.f, u = 0; u < s.length; u++) {
            var i = s[u];
            !fi(e, i) && !(t && fi(t, i)) && a(e, i, r(n, i));
          }
        };
      });
      var gi = Ne((L0, di) => {
        var ip = dt(), ap = pt(), op = /#|\.prototype\./, Ht = /* @__PURE__ */ __name(function(e, n) {
          var t = cp[lp(e)];
          return t == fp ? true : t == pp ? false : ap(n) ? ip(n) : !!n;
        }, "Ht"), lp = Ht.normalize = function(e) {
          return String(e).replace(op, ".").toLowerCase();
        }, cp = Ht.data = {}, pp = Ht.NATIVE = "N", fp = Ht.POLYFILL = "P";
        di.exports = Ht;
      });
      var Gt = Ne((j0, yi) => {
        var yn = Qe(), Dp = tn().f, mp = vr(), dp = Gs(), gp = Dr(), yp = mi(), hp = gi();
        yi.exports = function(e, n) {
          var t = e.target, s = e.global, a = e.stat, r, u, i, l, c, y;
          if (s ? u = yn : a ? u = yn[t] || gp(t, {}) : u = (yn[t] || {}).prototype, u)
            for (i in n) {
              if (c = n[i], e.noTargetGet ? (y = Dp(u, i), l = y && y.value) : l = u[i], r = hp(s ? i : t + (a ? "." : "#") + i, e.forced), !r && l !== void 0) {
                if (typeof c == typeof l)
                  continue;
                yp(c, l);
              }
              (e.sham || l && l.sham) && mp(c, "sham", true), dp(u, i, c, e);
            }
        };
      });
      var hn = Ne((O0, hi) => {
        var vp = or();
        hi.exports = Array.isArray || function(n) {
          return vp(n) == "Array";
        };
      });
      var vn = Ne((q0, Ci) => {
        var vi = ct(), Cp = Vt(), Ep = sr(), Fp = vi(vi.bind);
        Ci.exports = function(e, n) {
          return Cp(e), n === void 0 ? e : Ep ? Fp(e, n) : function() {
            return e.apply(n, arguments);
          };
        };
      });
      var Cn = Ne((M0, Fi) => {
        "use strict";
        var Ap = Qe(), Sp = hn(), xp = It(), bp = vn(), Tp = Ap.TypeError, Ei = /* @__PURE__ */ __name(function(e, n, t, s, a, r, u, i) {
          for (var l = a, c = 0, y = u ? bp(u, i) : false, h, g; c < s; ) {
            if (c in t) {
              if (h = y ? y(t[c], c, n) : t[c], r > 0 && Sp(h))
                g = xp(h), l = Ei(e, n, h, g, l, r - 1) - 1;
              else {
                if (l >= 9007199254740991)
                  throw Tp("Exceed the acceptable array length");
                e[l] = h;
              }
              l++;
            }
            c++;
          }
          return l;
        }, "Ei");
        Fi.exports = Ei;
      });
      var xi = Ne((R0, Si) => {
        var Bp = bt(), Np = Bp("toStringTag"), Ai = {};
        Ai[Np] = "z";
        Si.exports = String(Ai) === "[object z]";
      });
      var En = Ne(($0, bi) => {
        var wp = Qe(), _p = xi(), Pp = pt(), Sr = or(), Ip = bt(), kp = Ip("toStringTag"), Lp = wp.Object, jp = Sr(function() {
          return arguments;
        }()) == "Arguments", Op = /* @__PURE__ */ __name(function(e, n) {
          try {
            return e[n];
          } catch {
          }
        }, "Op");
        bi.exports = _p ? Sr : function(e) {
          var n, t, s;
          return e === void 0 ? "Undefined" : e === null ? "Null" : typeof (t = Op(n = Lp(e), kp)) == "string" ? t : jp ? Sr(n) : (s = Sr(n)) == "Object" && Pp(n.callee) ? "Arguments" : s;
        };
      });
      var Pi = Ne((V0, _i) => {
        var qp = ct(), Mp = dt(), Ti = pt(), Rp = En(), $p = $t(), Vp = Cr(), Bi = /* @__PURE__ */ __name(function() {
        }, "Bi"), Wp = [], Ni = $p("Reflect", "construct"), Fn = /^\s*(?:class|function)\b/, Hp = qp(Fn.exec), Gp = !Fn.exec(Bi), Ut = /* @__PURE__ */ __name(function(n) {
          if (!Ti(n))
            return false;
          try {
            return Ni(Bi, Wp, n), true;
          } catch {
            return false;
          }
        }, "Ut"), wi = /* @__PURE__ */ __name(function(n) {
          if (!Ti(n))
            return false;
          switch (Rp(n)) {
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
              return false;
          }
          try {
            return Gp || !!Hp(Fn, Vp(n));
          } catch {
            return true;
          }
        }, "wi");
        wi.sham = true;
        _i.exports = !Ni || Mp(function() {
          var e;
          return Ut(Ut.call) || !Ut(Object) || !Ut(function() {
            e = true;
          }) || e;
        }) ? wi : Ut;
      });
      var ji = Ne((W0, Li) => {
        var Up = Qe(), Ii = hn(), Jp = Pi(), zp = St(), Xp = bt(), Kp = Xp("species"), ki = Up.Array;
        Li.exports = function(e) {
          var n;
          return Ii(e) && (n = e.constructor, Jp(n) && (n === ki || Ii(n.prototype)) ? n = void 0 : zp(n) && (n = n[Kp], n === null && (n = void 0))), n === void 0 ? ki : n;
        };
      });
      var An = Ne((H0, Oi) => {
        var Yp = ji();
        Oi.exports = function(e, n) {
          return new (Yp(e))(n === 0 ? 0 : n);
        };
      });
      var qi = Ne(() => {
        "use strict";
        var Qp = Gt(), Zp = Cn(), ef = Vt(), tf = dr(), rf = It(), nf = An();
        Qp({ target: "Array", proto: true }, { flatMap: function(n) {
          var t = tf(this), s = rf(t), a;
          return ef(n), a = nf(t, 0), a.length = Zp(a, t, t, s, 0, 1, n, arguments.length > 1 ? arguments[1] : void 0), a;
        } });
      });
      var Sn = Ne((J0, Mi) => {
        Mi.exports = {};
      });
      var $i = Ne((z0, Ri) => {
        var uf = bt(), sf = Sn(), af = uf("iterator"), of = Array.prototype;
        Ri.exports = function(e) {
          return e !== void 0 && (sf.Array === e || of[af] === e);
        };
      });
      var xn = Ne((X0, Wi) => {
        var lf = En(), Vi = fr(), cf = Sn(), pf = bt(), ff = pf("iterator");
        Wi.exports = function(e) {
          if (e != null)
            return Vi(e, ff) || Vi(e, "@@iterator") || cf[lf(e)];
        };
      });
      var Gi = Ne((K0, Hi) => {
        var Df = Qe(), mf = At(), df = Vt(), gf = Pt(), yf = pr(), hf = xn(), vf = Df.TypeError;
        Hi.exports = function(e, n) {
          var t = arguments.length < 2 ? hf(e) : n;
          if (df(t))
            return gf(mf(t, e));
          throw vf(yf(e) + " is not iterable");
        };
      });
      var zi = Ne((Y0, Ji) => {
        var Cf = At(), Ui = Pt(), Ef = fr();
        Ji.exports = function(e, n, t) {
          var s, a;
          Ui(e);
          try {
            if (s = Ef(e, "return"), !s) {
              if (n === "throw")
                throw t;
              return t;
            }
            s = Cf(s, e);
          } catch (r) {
            a = true, s = r;
          }
          if (n === "throw")
            throw t;
          if (a)
            throw s;
          return Ui(s), t;
        };
      });
      var Zi = Ne((Q0, Qi) => {
        var Ff = Qe(), Af = vn(), Sf = At(), xf = Pt(), bf = pr(), Tf = $i(), Bf = It(), Xi = Wr(), Nf = Gi(), wf = xn(), Ki = zi(), _f = Ff.TypeError, xr = /* @__PURE__ */ __name(function(e, n) {
          this.stopped = e, this.result = n;
        }, "xr"), Yi = xr.prototype;
        Qi.exports = function(e, n, t) {
          var s = t && t.that, a = !!(t && t.AS_ENTRIES), r = !!(t && t.IS_ITERATOR), u = !!(t && t.INTERRUPTED), i = Af(n, s), l, c, y, h, g, p, D, v = /* @__PURE__ */ __name(function(T) {
            return l && Ki(l, "normal", T), new xr(true, T);
          }, "v"), w = /* @__PURE__ */ __name(function(T) {
            return a ? (xf(T), u ? i(T[0], T[1], v) : i(T[0], T[1])) : u ? i(T, v) : i(T);
          }, "w");
          if (r)
            l = e;
          else {
            if (c = wf(e), !c)
              throw _f(bf(e) + " is not iterable");
            if (Tf(c)) {
              for (y = 0, h = Bf(e); h > y; y++)
                if (g = w(e[y]), g && Xi(Yi, g))
                  return g;
              return new xr(false);
            }
            l = Nf(e, c);
          }
          for (p = l.next; !(D = Sf(p, l)).done; ) {
            try {
              g = w(D.value);
            } catch (T) {
              Ki(l, "throw", T);
            }
            if (typeof g == "object" && g && Xi(Yi, g))
              return g;
          }
          return new xr(false);
        };
      });
      var ta = Ne((Z0, ea) => {
        "use strict";
        var Pf = gr(), If = hr(), kf = ar();
        ea.exports = function(e, n, t) {
          var s = Pf(n);
          s in e ? If.f(e, s, kf(0, t)) : e[s] = t;
        };
      });
      var ra = Ne(() => {
        var Lf = Gt(), jf = Zi(), Of = ta();
        Lf({ target: "Object", stat: true }, { fromEntries: function(n) {
          var t = {};
          return jf(n, function(s, a) {
            Of(t, s, a);
          }, { AS_ENTRIES: true }), t;
        } });
      });
      var na = Ne(() => {
        var qf = Gt(), Mf = Qe();
        qf({ global: true }, { globalThis: Mf });
      });
      var ua = Ne(() => {
        na();
      });
      var sa = Ne(() => {
        "use strict";
        var Rf = Gt(), $f = Cn(), Vf = dr(), Wf = It(), Hf = Ar(), Gf = An();
        Rf({ target: "Array", proto: true }, { flat: function() {
          var n = arguments.length ? arguments[0] : void 0, t = Vf(this), s = Wf(t), a = Gf(t, 0);
          return a.length = $f(a, t, t, s, 0, n === void 0 ? 1 : Hf(n)), a;
        } });
      });
      var Tg = Ne((ly, mo) => {
        var Uf = ["cliName", "cliCategory", "cliDescription"], Jf = ["_"], zf = ["languageId"];
        function Ln(e, n) {
          if (e == null)
            return {};
          var t = Xf(e, n), s, a;
          if (Object.getOwnPropertySymbols) {
            var r = Object.getOwnPropertySymbols(e);
            for (a = 0; a < r.length; a++)
              s = r[a], !(n.indexOf(s) >= 0) && (!Object.prototype.propertyIsEnumerable.call(e, s) || (t[s] = e[s]));
          }
          return t;
        }
        __name(Ln, "Ln");
        function Xf(e, n) {
          if (e == null)
            return {};
          var t = {}, s = Object.keys(e), a, r;
          for (r = 0; r < s.length; r++)
            a = s[r], !(n.indexOf(a) >= 0) && (t[a] = e[a]);
          return t;
        }
        __name(Xf, "Xf");
        qi();
        ra();
        ua();
        sa();
        var Kf = Object.create, wr = Object.defineProperty, Yf = Object.getOwnPropertyDescriptor, jn = Object.getOwnPropertyNames, Qf = Object.getPrototypeOf, Zf = Object.prototype.hasOwnProperty, gt = /* @__PURE__ */ __name((e, n) => function() {
          return e && (n = (0, e[jn(e)[0]])(e = 0)), n;
        }, "gt"), ee = /* @__PURE__ */ __name((e, n) => function() {
          return n || (0, e[jn(e)[0]])((n = { exports: {} }).exports, n), n.exports;
        }, "ee"), zt = /* @__PURE__ */ __name((e, n) => {
          for (var t in n)
            wr(e, t, { get: n[t], enumerable: true });
        }, "zt"), pa = /* @__PURE__ */ __name((e, n, t, s) => {
          if (n && typeof n == "object" || typeof n == "function")
            for (let a of jn(n))
              !Zf.call(e, a) && a !== t && wr(e, a, { get: () => n[a], enumerable: !(s = Yf(n, a)) || s.enumerable });
          return e;
        }, "pa"), eD = /* @__PURE__ */ __name((e, n, t) => (t = e != null ? Kf(Qf(e)) : {}, pa(n || !e || !e.__esModule ? wr(t, "default", { value: e, enumerable: true }) : t, e)), "eD"), ft = /* @__PURE__ */ __name((e) => pa(wr({}, "__esModule", { value: true }), e), "ft"), ia, aa, Nt, re = gt({ "<define:process>"() {
          ia = {}, aa = [], Nt = { env: ia, argv: aa };
        } }), fa = ee({ "package.json"(e, n) {
          n.exports = { version: "2.8.0" };
        } }), tD = ee({ "node_modules/diff/lib/diff/base.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.default = n;
          function n() {
          }
          __name(n, "n");
          n.prototype = { diff: function(r, u) {
            var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, l = i.callback;
            typeof i == "function" && (l = i, i = {}), this.options = i;
            var c = this;
            function y(A) {
              return l ? (setTimeout(function() {
                l(void 0, A);
              }, 0), true) : A;
            }
            __name(y, "y");
            r = this.castInput(r), u = this.castInput(u), r = this.removeEmpty(this.tokenize(r)), u = this.removeEmpty(this.tokenize(u));
            var h = u.length, g = r.length, p = 1, D = h + g, v = [{ newPos: -1, components: [] }], w = this.extractCommon(v[0], u, r, 0);
            if (v[0].newPos + 1 >= h && w + 1 >= g)
              return y([{ value: this.join(u), count: u.length }]);
            function T() {
              for (var A = -1 * p; A <= p; A += 2) {
                var B = void 0, I = v[A - 1], P = v[A + 1], R = (P ? P.newPos : 0) - A;
                I && (v[A - 1] = void 0);
                var f = I && I.newPos + 1 < h, x = P && 0 <= R && R < g;
                if (!f && !x) {
                  v[A] = void 0;
                  continue;
                }
                if (!f || x && I.newPos < P.newPos ? (B = s(P), c.pushComponent(B.components, void 0, true)) : (B = I, B.newPos++, c.pushComponent(B.components, true, void 0)), R = c.extractCommon(B, u, r, A), B.newPos + 1 >= h && R + 1 >= g)
                  return y(t(c, B.components, u, r, c.useLongestToken));
                v[A] = B;
              }
              p++;
            }
            __name(T, "T");
            if (l)
              (/* @__PURE__ */ __name(function A() {
                setTimeout(function() {
                  if (p > D)
                    return l();
                  T() || A();
                }, 0);
              }, "A"))();
            else
              for (; p <= D; ) {
                var F = T();
                if (F)
                  return F;
              }
          }, pushComponent: function(r, u, i) {
            var l = r[r.length - 1];
            l && l.added === u && l.removed === i ? r[r.length - 1] = { count: l.count + 1, added: u, removed: i } : r.push({ count: 1, added: u, removed: i });
          }, extractCommon: function(r, u, i, l) {
            for (var c = u.length, y = i.length, h = r.newPos, g = h - l, p = 0; h + 1 < c && g + 1 < y && this.equals(u[h + 1], i[g + 1]); )
              h++, g++, p++;
            return p && r.components.push({ count: p }), r.newPos = h, g;
          }, equals: function(r, u) {
            return this.options.comparator ? this.options.comparator(r, u) : r === u || this.options.ignoreCase && r.toLowerCase() === u.toLowerCase();
          }, removeEmpty: function(r) {
            for (var u = [], i = 0; i < r.length; i++)
              r[i] && u.push(r[i]);
            return u;
          }, castInput: function(r) {
            return r;
          }, tokenize: function(r) {
            return r.split("");
          }, join: function(r) {
            return r.join("");
          } };
          function t(a, r, u, i, l) {
            for (var c = 0, y = r.length, h = 0, g = 0; c < y; c++) {
              var p = r[c];
              if (p.removed) {
                if (p.value = a.join(i.slice(g, g + p.count)), g += p.count, c && r[c - 1].added) {
                  var v = r[c - 1];
                  r[c - 1] = r[c], r[c] = v;
                }
              } else {
                if (!p.added && l) {
                  var D = u.slice(h, h + p.count);
                  D = D.map(function(T, F) {
                    var A = i[g + F];
                    return A.length > T.length ? A : T;
                  }), p.value = a.join(D);
                } else
                  p.value = a.join(u.slice(h, h + p.count));
                h += p.count, p.added || (g += p.count);
              }
            }
            var w = r[y - 1];
            return y > 1 && typeof w.value == "string" && (w.added || w.removed) && a.equals("", w.value) && (r[y - 2].value += w.value, r.pop()), r;
          }
          __name(t, "t");
          function s(a) {
            return { newPos: a.newPos, components: a.components.slice(0) };
          }
          __name(s, "s");
        } }), rD = ee({ "node_modules/diff/lib/diff/array.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.diffArrays = a, e.arrayDiff = void 0;
          var n = t(tD());
          function t(r) {
            return r && r.__esModule ? r : { default: r };
          }
          __name(t, "t");
          var s = new n.default();
          e.arrayDiff = s, s.tokenize = function(r) {
            return r.slice();
          }, s.join = s.removeEmpty = function(r) {
            return r;
          };
          function a(r, u, i) {
            return s.diff(r, u, i);
          }
          __name(a, "a");
        } }), On = ee({ "src/document/doc-builders.js"(e, n) {
          "use strict";
          re();
          function t(E) {
            return { type: "concat", parts: E };
          }
          __name(t, "t");
          function s(E) {
            return { type: "indent", contents: E };
          }
          __name(s, "s");
          function a(E, o) {
            return { type: "align", contents: o, n: E };
          }
          __name(a, "a");
          function r(E) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            return { type: "group", id: o.id, contents: E, break: Boolean(o.shouldBreak), expandedStates: o.expandedStates };
          }
          __name(r, "r");
          function u(E) {
            return a(Number.NEGATIVE_INFINITY, E);
          }
          __name(u, "u");
          function i(E) {
            return a({ type: "root" }, E);
          }
          __name(i, "i");
          function l(E) {
            return a(-1, E);
          }
          __name(l, "l");
          function c(E, o) {
            return r(E[0], Object.assign(Object.assign({}, o), {}, { expandedStates: E }));
          }
          __name(c, "c");
          function y(E) {
            return { type: "fill", parts: E };
          }
          __name(y, "y");
          function h(E, o) {
            let d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            return { type: "if-break", breakContents: E, flatContents: o, groupId: d.groupId };
          }
          __name(h, "h");
          function g(E, o) {
            return { type: "indent-if-break", contents: E, groupId: o.groupId, negate: o.negate };
          }
          __name(g, "g");
          function p(E) {
            return { type: "line-suffix", contents: E };
          }
          __name(p, "p");
          var D = { type: "line-suffix-boundary" }, v = { type: "break-parent" }, w = { type: "trim" }, T = { type: "line", hard: true }, F = { type: "line", hard: true, literal: true }, A = { type: "line" }, B = { type: "line", soft: true }, I = t([T, v]), P = t([F, v]), R = { type: "cursor", placeholder: Symbol("cursor") };
          function f(E, o) {
            let d = [];
            for (let C = 0; C < o.length; C++)
              C !== 0 && d.push(E), d.push(o[C]);
            return t(d);
          }
          __name(f, "f");
          function x(E, o, d) {
            let C = E;
            if (o > 0) {
              for (let _ = 0; _ < Math.floor(o / d); ++_)
                C = s(C);
              C = a(o % d, C), C = a(Number.NEGATIVE_INFINITY, C);
            }
            return C;
          }
          __name(x, "x");
          function m(E, o) {
            return { type: "label", label: E, contents: o };
          }
          __name(m, "m");
          n.exports = { concat: t, join: f, line: A, softline: B, hardline: I, literalline: P, group: r, conditionalGroup: c, fill: y, lineSuffix: p, lineSuffixBoundary: D, cursor: R, breakParent: v, ifBreak: h, trim: w, indent: s, indentIfBreak: g, align: a, addAlignmentToDoc: x, markAsRoot: i, dedentToRoot: u, dedent: l, hardlineWithoutBreakParent: T, literallineWithoutBreakParent: F, label: m };
        } }), qn = ee({ "src/common/end-of-line.js"(e, n) {
          "use strict";
          re();
          function t(u) {
            let i = u.indexOf("\r");
            return i >= 0 ? u.charAt(i + 1) === `
` ? "crlf" : "cr" : "lf";
          }
          __name(t, "t");
          function s(u) {
            switch (u) {
              case "cr":
                return "\r";
              case "crlf":
                return `\r
`;
              default:
                return `
`;
            }
          }
          __name(s, "s");
          function a(u, i) {
            let l;
            switch (i) {
              case `
`:
                l = /\n/g;
                break;
              case "\r":
                l = /\r/g;
                break;
              case `\r
`:
                l = /\r\n/g;
                break;
              default:
                throw new Error(`Unexpected "eol" ${JSON.stringify(i)}.`);
            }
            let c = u.match(l);
            return c ? c.length : 0;
          }
          __name(a, "a");
          function r(u) {
            return u.replace(/\r\n?/g, `
`);
          }
          __name(r, "r");
          n.exports = { guessEndOfLine: t, convertEndOfLineToChars: s, countEndOfLineChars: a, normalizeEndOfLine: r };
        } }), lt = ee({ "src/utils/get-last.js"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ __name((s) => s[s.length - 1], "t");
          n.exports = t;
        } });
        function nD() {
          let { onlyFirst: e = false } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
          return new RegExp(n, e ? void 0 : "g");
        }
        __name(nD, "nD");
        var uD = gt({ "node_modules/strip-ansi/node_modules/ansi-regex/index.js"() {
          re();
        } });
        function sD(e) {
          if (typeof e != "string")
            throw new TypeError(`Expected a \`string\`, got \`${typeof e}\``);
          return e.replace(nD(), "");
        }
        __name(sD, "sD");
        var iD = gt({ "node_modules/strip-ansi/index.js"() {
          re(), uD();
        } });
        function aD(e) {
          return Number.isInteger(e) ? e >= 4352 && (e <= 4447 || e === 9001 || e === 9002 || 11904 <= e && e <= 12871 && e !== 12351 || 12880 <= e && e <= 19903 || 19968 <= e && e <= 42182 || 43360 <= e && e <= 43388 || 44032 <= e && e <= 55203 || 63744 <= e && e <= 64255 || 65040 <= e && e <= 65049 || 65072 <= e && e <= 65131 || 65281 <= e && e <= 65376 || 65504 <= e && e <= 65510 || 110592 <= e && e <= 110593 || 127488 <= e && e <= 127569 || 131072 <= e && e <= 262141) : false;
        }
        __name(aD, "aD");
        var oD = gt({ "node_modules/is-fullwidth-code-point/index.js"() {
          re();
        } }), lD = ee({ "node_modules/emoji-regex/index.js"(e, n) {
          "use strict";
          re(), n.exports = function() {
            return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
          };
        } }), Da = {};
        zt(Da, { default: () => cD });
        function cD(e) {
          if (typeof e != "string" || e.length === 0 || (e = sD(e), e.length === 0))
            return 0;
          e = e.replace((0, ma.default)(), "  ");
          let n = 0;
          for (let t = 0; t < e.length; t++) {
            let s = e.codePointAt(t);
            s <= 31 || s >= 127 && s <= 159 || s >= 768 && s <= 879 || (s > 65535 && t++, n += aD(s) ? 2 : 1);
          }
          return n;
        }
        __name(cD, "cD");
        var ma, pD = gt({ "node_modules/string-width/index.js"() {
          re(), iD(), oD(), ma = eD(lD());
        } }), da = ee({ "src/utils/get-string-width.js"(e, n) {
          "use strict";
          re();
          var t = (pD(), ft(Da)).default, s = /[^\x20-\x7F]/;
          function a(r) {
            return r ? s.test(r) ? t(r) : r.length : 0;
          }
          __name(a, "a");
          n.exports = a;
        } }), Xt = ee({ "src/document/doc-utils.js"(e, n) {
          "use strict";
          re();
          var t = lt(), { literalline: s, join: a } = On(), r = /* @__PURE__ */ __name((o) => Array.isArray(o) || o && o.type === "concat", "r"), u = /* @__PURE__ */ __name((o) => {
            if (Array.isArray(o))
              return o;
            if (o.type !== "concat" && o.type !== "fill")
              throw new Error("Expect doc type to be `concat` or `fill`.");
            return o.parts;
          }, "u"), i = {};
          function l(o, d, C, _) {
            let b = [o];
            for (; b.length > 0; ) {
              let N = b.pop();
              if (N === i) {
                C(b.pop());
                continue;
              }
              if (C && b.push(N, i), !d || d(N) !== false)
                if (r(N) || N.type === "fill") {
                  let k = u(N);
                  for (let $ = k.length, M = $ - 1; M >= 0; --M)
                    b.push(k[M]);
                } else if (N.type === "if-break")
                  N.flatContents && b.push(N.flatContents), N.breakContents && b.push(N.breakContents);
                else if (N.type === "group" && N.expandedStates)
                  if (_)
                    for (let k = N.expandedStates.length, $ = k - 1; $ >= 0; --$)
                      b.push(N.expandedStates[$]);
                  else
                    b.push(N.contents);
                else
                  N.contents && b.push(N.contents);
            }
          }
          __name(l, "l");
          function c(o, d) {
            let C = /* @__PURE__ */ new Map();
            return _(o);
            function _(N) {
              if (C.has(N))
                return C.get(N);
              let k = b(N);
              return C.set(N, k), k;
            }
            __name(_, "_");
            function b(N) {
              if (Array.isArray(N))
                return d(N.map(_));
              if (N.type === "concat" || N.type === "fill") {
                let k = N.parts.map(_);
                return d(Object.assign(Object.assign({}, N), {}, { parts: k }));
              }
              if (N.type === "if-break") {
                let k = N.breakContents && _(N.breakContents), $ = N.flatContents && _(N.flatContents);
                return d(Object.assign(Object.assign({}, N), {}, { breakContents: k, flatContents: $ }));
              }
              if (N.type === "group" && N.expandedStates) {
                let k = N.expandedStates.map(_), $ = k[0];
                return d(Object.assign(Object.assign({}, N), {}, { contents: $, expandedStates: k }));
              }
              if (N.contents) {
                let k = _(N.contents);
                return d(Object.assign(Object.assign({}, N), {}, { contents: k }));
              }
              return d(N);
            }
            __name(b, "b");
          }
          __name(c, "c");
          function y(o, d, C) {
            let _ = C, b = false;
            function N(k) {
              let $ = d(k);
              if ($ !== void 0 && (b = true, _ = $), b)
                return false;
            }
            __name(N, "N");
            return l(o, N), _;
          }
          __name(y, "y");
          function h(o) {
            if (o.type === "group" && o.break || o.type === "line" && o.hard || o.type === "break-parent")
              return true;
          }
          __name(h, "h");
          function g(o) {
            return y(o, h, false);
          }
          __name(g, "g");
          function p(o) {
            if (o.length > 0) {
              let d = t(o);
              !d.expandedStates && !d.break && (d.break = "propagated");
            }
            return null;
          }
          __name(p, "p");
          function D(o) {
            let d = /* @__PURE__ */ new Set(), C = [];
            function _(N) {
              if (N.type === "break-parent" && p(C), N.type === "group") {
                if (C.push(N), d.has(N))
                  return false;
                d.add(N);
              }
            }
            __name(_, "_");
            function b(N) {
              N.type === "group" && C.pop().break && p(C);
            }
            __name(b, "b");
            l(o, _, b, true);
          }
          __name(D, "D");
          function v(o) {
            return o.type === "line" && !o.hard ? o.soft ? "" : " " : o.type === "if-break" ? o.flatContents || "" : o;
          }
          __name(v, "v");
          function w(o) {
            return c(o, v);
          }
          __name(w, "w");
          var T = /* @__PURE__ */ __name((o, d) => o && o.type === "line" && o.hard && d && d.type === "break-parent", "T");
          function F(o) {
            if (!o)
              return o;
            if (r(o) || o.type === "fill") {
              let d = u(o);
              for (; d.length > 1 && T(...d.slice(-2)); )
                d.length -= 2;
              if (d.length > 0) {
                let C = F(t(d));
                d[d.length - 1] = C;
              }
              return Array.isArray(o) ? d : Object.assign(Object.assign({}, o), {}, { parts: d });
            }
            switch (o.type) {
              case "align":
              case "indent":
              case "indent-if-break":
              case "group":
              case "line-suffix":
              case "label": {
                let d = F(o.contents);
                return Object.assign(Object.assign({}, o), {}, { contents: d });
              }
              case "if-break": {
                let d = F(o.breakContents), C = F(o.flatContents);
                return Object.assign(Object.assign({}, o), {}, { breakContents: d, flatContents: C });
              }
            }
            return o;
          }
          __name(F, "F");
          function A(o) {
            return F(I(o));
          }
          __name(A, "A");
          function B(o) {
            switch (o.type) {
              case "fill":
                if (o.parts.every((C) => C === ""))
                  return "";
                break;
              case "group":
                if (!o.contents && !o.id && !o.break && !o.expandedStates)
                  return "";
                if (o.contents.type === "group" && o.contents.id === o.id && o.contents.break === o.break && o.contents.expandedStates === o.expandedStates)
                  return o.contents;
                break;
              case "align":
              case "indent":
              case "indent-if-break":
              case "line-suffix":
                if (!o.contents)
                  return "";
                break;
              case "if-break":
                if (!o.flatContents && !o.breakContents)
                  return "";
                break;
            }
            if (!r(o))
              return o;
            let d = [];
            for (let C of u(o)) {
              if (!C)
                continue;
              let [_, ...b] = r(C) ? u(C) : [C];
              typeof _ == "string" && typeof t(d) == "string" ? d[d.length - 1] += _ : d.push(_), d.push(...b);
            }
            return d.length === 0 ? "" : d.length === 1 ? d[0] : Array.isArray(o) ? d : Object.assign(Object.assign({}, o), {}, { parts: d });
          }
          __name(B, "B");
          function I(o) {
            return c(o, (d) => B(d));
          }
          __name(I, "I");
          function P(o) {
            let d = [], C = o.filter(Boolean);
            for (; C.length > 0; ) {
              let _ = C.shift();
              if (!!_) {
                if (r(_)) {
                  C.unshift(...u(_));
                  continue;
                }
                if (d.length > 0 && typeof t(d) == "string" && typeof _ == "string") {
                  d[d.length - 1] += _;
                  continue;
                }
                d.push(_);
              }
            }
            return d;
          }
          __name(P, "P");
          function R(o) {
            return c(o, (d) => Array.isArray(d) ? P(d) : d.parts ? Object.assign(Object.assign({}, d), {}, { parts: P(d.parts) }) : d);
          }
          __name(R, "R");
          function f(o) {
            return c(o, (d) => typeof d == "string" && d.includes(`
`) ? x(d) : d);
          }
          __name(f, "f");
          function x(o) {
            let d = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : s;
            return a(d, o.split(`
`)).parts;
          }
          __name(x, "x");
          function m(o) {
            if (o.type === "line")
              return true;
          }
          __name(m, "m");
          function E(o) {
            return y(o, m, false);
          }
          __name(E, "E");
          n.exports = { isConcat: r, getDocParts: u, willBreak: g, traverseDoc: l, findInDoc: y, mapDoc: c, propagateBreaks: D, removeLines: w, stripTrailingHardline: A, normalizeParts: P, normalizeDoc: R, cleanDoc: I, replaceTextEndOfLine: x, replaceEndOfLine: f, canBreak: E };
        } }), fD = ee({ "src/document/doc-printer.js"(e, n) {
          "use strict";
          re();
          var { convertEndOfLineToChars: t } = qn(), s = lt(), a = da(), { fill: r, cursor: u, indent: i } = On(), { isConcat: l, getDocParts: c } = Xt(), y, h = 1, g = 2;
          function p() {
            return { value: "", length: 0, queue: [] };
          }
          __name(p, "p");
          function D(B, I) {
            return w(B, { type: "indent" }, I);
          }
          __name(D, "D");
          function v(B, I, P) {
            return I === Number.NEGATIVE_INFINITY ? B.root || p() : I < 0 ? w(B, { type: "dedent" }, P) : I ? I.type === "root" ? Object.assign(Object.assign({}, B), {}, { root: B }) : w(B, { type: typeof I == "string" ? "stringAlign" : "numberAlign", n: I }, P) : B;
          }
          __name(v, "v");
          function w(B, I, P) {
            let R = I.type === "dedent" ? B.queue.slice(0, -1) : [...B.queue, I], f = "", x = 0, m = 0, E = 0;
            for (let k of R)
              switch (k.type) {
                case "indent":
                  C(), P.useTabs ? o(1) : d(P.tabWidth);
                  break;
                case "stringAlign":
                  C(), f += k.n, x += k.n.length;
                  break;
                case "numberAlign":
                  m += 1, E += k.n;
                  break;
                default:
                  throw new Error(`Unexpected type '${k.type}'`);
              }
            return b(), Object.assign(Object.assign({}, B), {}, { value: f, length: x, queue: R });
            function o(k) {
              f += "	".repeat(k), x += P.tabWidth * k;
            }
            __name(o, "o");
            function d(k) {
              f += " ".repeat(k), x += k;
            }
            __name(d, "d");
            function C() {
              P.useTabs ? _() : b();
            }
            __name(C, "C");
            function _() {
              m > 0 && o(m), N();
            }
            __name(_, "_");
            function b() {
              E > 0 && d(E), N();
            }
            __name(b, "b");
            function N() {
              m = 0, E = 0;
            }
            __name(N, "N");
          }
          __name(w, "w");
          function T(B) {
            if (B.length === 0)
              return 0;
            let I = 0;
            for (; B.length > 0 && typeof s(B) == "string" && /^[\t ]*$/.test(s(B)); )
              I += B.pop().length;
            if (B.length > 0 && typeof s(B) == "string") {
              let P = s(B).replace(/[\t ]*$/, "");
              I += s(B).length - P.length, B[B.length - 1] = P;
            }
            return I;
          }
          __name(T, "T");
          function F(B, I, P, R, f) {
            let x = I.length, m = [B], E = [];
            for (; P >= 0; ) {
              if (m.length === 0) {
                if (x === 0)
                  return true;
                m.push(I[--x]);
                continue;
              }
              let { mode: o, doc: d } = m.pop();
              if (typeof d == "string")
                E.push(d), P -= a(d);
              else if (l(d) || d.type === "fill") {
                let C = c(d);
                for (let _ = C.length - 1; _ >= 0; _--)
                  m.push({ mode: o, doc: C[_] });
              } else
                switch (d.type) {
                  case "indent":
                  case "align":
                  case "indent-if-break":
                  case "label":
                    m.push({ mode: o, doc: d.contents });
                    break;
                  case "trim":
                    P += T(E);
                    break;
                  case "group": {
                    if (f && d.break)
                      return false;
                    let C = d.break ? h : o, _ = d.expandedStates && C === h ? s(d.expandedStates) : d.contents;
                    m.push({ mode: C, doc: _ });
                    break;
                  }
                  case "if-break": {
                    let _ = (d.groupId ? y[d.groupId] || g : o) === h ? d.breakContents : d.flatContents;
                    _ && m.push({ mode: o, doc: _ });
                    break;
                  }
                  case "line":
                    if (o === h || d.hard)
                      return true;
                    d.soft || (E.push(" "), P--);
                    break;
                  case "line-suffix":
                    R = true;
                    break;
                  case "line-suffix-boundary":
                    if (R)
                      return false;
                    break;
                }
            }
            return false;
          }
          __name(F, "F");
          function A(B, I) {
            y = {};
            let P = I.printWidth, R = t(I.endOfLine), f = 0, x = [{ ind: p(), mode: h, doc: B }], m = [], E = false, o = [];
            for (; x.length > 0; ) {
              let { ind: C, mode: _, doc: b } = x.pop();
              if (typeof b == "string") {
                let N = R !== `
` ? b.replace(/\n/g, R) : b;
                m.push(N), f += a(N);
              } else if (l(b)) {
                let N = c(b);
                for (let k = N.length - 1; k >= 0; k--)
                  x.push({ ind: C, mode: _, doc: N[k] });
              } else
                switch (b.type) {
                  case "cursor":
                    m.push(u.placeholder);
                    break;
                  case "indent":
                    x.push({ ind: D(C, I), mode: _, doc: b.contents });
                    break;
                  case "align":
                    x.push({ ind: v(C, b.n, I), mode: _, doc: b.contents });
                    break;
                  case "trim":
                    f -= T(m);
                    break;
                  case "group":
                    switch (_) {
                      case g:
                        if (!E) {
                          x.push({ ind: C, mode: b.break ? h : g, doc: b.contents });
                          break;
                        }
                      case h: {
                        E = false;
                        let N = { ind: C, mode: g, doc: b.contents }, k = P - f, $ = o.length > 0;
                        if (!b.break && F(N, x, k, $))
                          x.push(N);
                        else if (b.expandedStates) {
                          let M = s(b.expandedStates);
                          if (b.break) {
                            x.push({ ind: C, mode: h, doc: M });
                            break;
                          } else
                            for (let q = 1; q < b.expandedStates.length + 1; q++)
                              if (q >= b.expandedStates.length) {
                                x.push({ ind: C, mode: h, doc: M });
                                break;
                              } else {
                                let J = b.expandedStates[q], L = { ind: C, mode: g, doc: J };
                                if (F(L, x, k, $)) {
                                  x.push(L);
                                  break;
                                }
                              }
                        } else
                          x.push({ ind: C, mode: h, doc: b.contents });
                        break;
                      }
                    }
                    b.id && (y[b.id] = s(x).mode);
                    break;
                  case "fill": {
                    let N = P - f, { parts: k } = b;
                    if (k.length === 0)
                      break;
                    let [$, M] = k, q = { ind: C, mode: g, doc: $ }, J = { ind: C, mode: h, doc: $ }, L = F(q, [], N, o.length > 0, true);
                    if (k.length === 1) {
                      L ? x.push(q) : x.push(J);
                      break;
                    }
                    let Y = { ind: C, mode: g, doc: M }, V = { ind: C, mode: h, doc: M };
                    if (k.length === 2) {
                      L ? x.push(Y, q) : x.push(V, J);
                      break;
                    }
                    k.splice(0, 2);
                    let O = { ind: C, mode: _, doc: r(k) }, K = k[0];
                    F({ ind: C, mode: g, doc: [$, M, K] }, [], N, o.length > 0, true) ? x.push(O, Y, q) : L ? x.push(O, V, q) : x.push(O, V, J);
                    break;
                  }
                  case "if-break":
                  case "indent-if-break": {
                    let N = b.groupId ? y[b.groupId] : _;
                    if (N === h) {
                      let k = b.type === "if-break" ? b.breakContents : b.negate ? b.contents : i(b.contents);
                      k && x.push({ ind: C, mode: _, doc: k });
                    }
                    if (N === g) {
                      let k = b.type === "if-break" ? b.flatContents : b.negate ? i(b.contents) : b.contents;
                      k && x.push({ ind: C, mode: _, doc: k });
                    }
                    break;
                  }
                  case "line-suffix":
                    o.push({ ind: C, mode: _, doc: b.contents });
                    break;
                  case "line-suffix-boundary":
                    o.length > 0 && x.push({ ind: C, mode: _, doc: { type: "line", hard: true } });
                    break;
                  case "line":
                    switch (_) {
                      case g:
                        if (b.hard)
                          E = true;
                        else {
                          b.soft || (m.push(" "), f += 1);
                          break;
                        }
                      case h:
                        if (o.length > 0) {
                          x.push({ ind: C, mode: _, doc: b }, ...o.reverse()), o.length = 0;
                          break;
                        }
                        b.literal ? C.root ? (m.push(R, C.root.value), f = C.root.length) : (m.push(R), f = 0) : (f -= T(m), m.push(R + C.value), f = C.length);
                        break;
                    }
                    break;
                  case "label":
                    x.push({ ind: C, mode: _, doc: b.contents });
                    break;
                  default:
                }
              x.length === 0 && o.length > 0 && (x.push(...o.reverse()), o.length = 0);
            }
            let d = m.indexOf(u.placeholder);
            if (d !== -1) {
              let C = m.indexOf(u.placeholder, d + 1), _ = m.slice(0, d).join(""), b = m.slice(d + 1, C).join(""), N = m.slice(C + 1).join("");
              return { formatted: _ + b + N, cursorNodeStart: _.length, cursorNodeText: b };
            }
            return { formatted: m.join("") };
          }
          __name(A, "A");
          n.exports = { printDocToString: A };
        } }), DD = ee({ "src/document/doc-debug.js"(e, n) {
          "use strict";
          re();
          var { isConcat: t, getDocParts: s } = Xt();
          function a(u) {
            if (!u)
              return "";
            if (t(u)) {
              let i = [];
              for (let l of s(u))
                if (t(l))
                  i.push(...a(l).parts);
                else {
                  let c = a(l);
                  c !== "" && i.push(c);
                }
              return { type: "concat", parts: i };
            }
            return u.type === "if-break" ? Object.assign(Object.assign({}, u), {}, { breakContents: a(u.breakContents), flatContents: a(u.flatContents) }) : u.type === "group" ? Object.assign(Object.assign({}, u), {}, { contents: a(u.contents), expandedStates: u.expandedStates && u.expandedStates.map(a) }) : u.type === "fill" ? { type: "fill", parts: u.parts.map(a) } : u.contents ? Object.assign(Object.assign({}, u), {}, { contents: a(u.contents) }) : u;
          }
          __name(a, "a");
          function r(u) {
            let i = /* @__PURE__ */ Object.create(null), l = /* @__PURE__ */ new Set();
            return c(a(u));
            function c(h, g, p) {
              if (typeof h == "string")
                return JSON.stringify(h);
              if (t(h)) {
                let D = s(h).map(c).filter(Boolean);
                return D.length === 1 ? D[0] : `[${D.join(", ")}]`;
              }
              if (h.type === "line") {
                let D = Array.isArray(p) && p[g + 1] && p[g + 1].type === "break-parent";
                return h.literal ? D ? "literalline" : "literallineWithoutBreakParent" : h.hard ? D ? "hardline" : "hardlineWithoutBreakParent" : h.soft ? "softline" : "line";
              }
              if (h.type === "break-parent")
                return Array.isArray(p) && p[g - 1] && p[g - 1].type === "line" && p[g - 1].hard ? void 0 : "breakParent";
              if (h.type === "trim")
                return "trim";
              if (h.type === "indent")
                return "indent(" + c(h.contents) + ")";
              if (h.type === "align")
                return h.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + c(h.contents) + ")" : h.n < 0 ? "dedent(" + c(h.contents) + ")" : h.n.type === "root" ? "markAsRoot(" + c(h.contents) + ")" : "align(" + JSON.stringify(h.n) + ", " + c(h.contents) + ")";
              if (h.type === "if-break")
                return "ifBreak(" + c(h.breakContents) + (h.flatContents ? ", " + c(h.flatContents) : "") + (h.groupId ? (h.flatContents ? "" : ', ""') + `, { groupId: ${y(h.groupId)} }` : "") + ")";
              if (h.type === "indent-if-break") {
                let D = [];
                h.negate && D.push("negate: true"), h.groupId && D.push(`groupId: ${y(h.groupId)}`);
                let v = D.length > 0 ? `, { ${D.join(", ")} }` : "";
                return `indentIfBreak(${c(h.contents)}${v})`;
              }
              if (h.type === "group") {
                let D = [];
                h.break && h.break !== "propagated" && D.push("shouldBreak: true"), h.id && D.push(`id: ${y(h.id)}`);
                let v = D.length > 0 ? `, { ${D.join(", ")} }` : "";
                return h.expandedStates ? `conditionalGroup([${h.expandedStates.map((w) => c(w)).join(",")}]${v})` : `group(${c(h.contents)}${v})`;
              }
              if (h.type === "fill")
                return `fill([${h.parts.map((D) => c(D)).join(", ")}])`;
              if (h.type === "line-suffix")
                return "lineSuffix(" + c(h.contents) + ")";
              if (h.type === "line-suffix-boundary")
                return "lineSuffixBoundary";
              if (h.type === "label")
                return `label(${JSON.stringify(h.label)}, ${c(h.contents)})`;
              throw new Error("Unknown doc type " + h.type);
            }
            __name(c, "c");
            function y(h) {
              if (typeof h != "symbol")
                return JSON.stringify(String(h));
              if (h in i)
                return i[h];
              let g = String(h).slice(7, -1) || "symbol";
              for (let p = 0; ; p++) {
                let D = g + (p > 0 ? ` #${p}` : "");
                if (!l.has(D))
                  return l.add(D), i[h] = `Symbol.for(${JSON.stringify(D)})`;
              }
            }
            __name(y, "y");
          }
          __name(r, "r");
          n.exports = { printDocToDebug: r };
        } }), qe = ee({ "src/document/index.js"(e, n) {
          "use strict";
          re(), n.exports = { builders: On(), printer: fD(), utils: Xt(), debug: DD() };
        } }), ga = {};
        zt(ga, { default: () => mD });
        function mD(e) {
          if (typeof e != "string")
            throw new TypeError("Expected a string");
          return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        __name(mD, "mD");
        var dD = gt({ "node_modules/escape-string-regexp/index.js"() {
          re();
        } }), ya = ee({ "node_modules/semver/internal/debug.js"(e, n) {
          re();
          var t = typeof Nt == "object" && Nt.env && Nt.env.NODE_DEBUG && /\bsemver\b/i.test(Nt.env.NODE_DEBUG) ? function() {
            for (var s = arguments.length, a = new Array(s), r = 0; r < s; r++)
              a[r] = arguments[r];
            return console.error("SEMVER", ...a);
          } : () => {
          };
          n.exports = t;
        } }), ha = ee({ "node_modules/semver/internal/constants.js"(e, n) {
          re();
          var t = "2.0.0", s = 256, a = Number.MAX_SAFE_INTEGER || 9007199254740991, r = 16;
          n.exports = { SEMVER_SPEC_VERSION: t, MAX_LENGTH: s, MAX_SAFE_INTEGER: a, MAX_SAFE_COMPONENT_LENGTH: r };
        } }), gD = ee({ "node_modules/semver/internal/re.js"(e, n) {
          re();
          var { MAX_SAFE_COMPONENT_LENGTH: t } = ha(), s = ya();
          e = n.exports = {};
          var a = e.re = [], r = e.src = [], u = e.t = {}, i = 0, l = /* @__PURE__ */ __name((c, y, h) => {
            let g = i++;
            s(c, g, y), u[c] = g, r[g] = y, a[g] = new RegExp(y, h ? "g" : void 0);
          }, "l");
          l("NUMERICIDENTIFIER", "0|[1-9]\\d*"), l("NUMERICIDENTIFIERLOOSE", "[0-9]+"), l("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), l("MAINVERSION", `(${r[u.NUMERICIDENTIFIER]})\\.(${r[u.NUMERICIDENTIFIER]})\\.(${r[u.NUMERICIDENTIFIER]})`), l("MAINVERSIONLOOSE", `(${r[u.NUMERICIDENTIFIERLOOSE]})\\.(${r[u.NUMERICIDENTIFIERLOOSE]})\\.(${r[u.NUMERICIDENTIFIERLOOSE]})`), l("PRERELEASEIDENTIFIER", `(?:${r[u.NUMERICIDENTIFIER]}|${r[u.NONNUMERICIDENTIFIER]})`), l("PRERELEASEIDENTIFIERLOOSE", `(?:${r[u.NUMERICIDENTIFIERLOOSE]}|${r[u.NONNUMERICIDENTIFIER]})`), l("PRERELEASE", `(?:-(${r[u.PRERELEASEIDENTIFIER]}(?:\\.${r[u.PRERELEASEIDENTIFIER]})*))`), l("PRERELEASELOOSE", `(?:-?(${r[u.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${r[u.PRERELEASEIDENTIFIERLOOSE]})*))`), l("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), l("BUILD", `(?:\\+(${r[u.BUILDIDENTIFIER]}(?:\\.${r[u.BUILDIDENTIFIER]})*))`), l("FULLPLAIN", `v?${r[u.MAINVERSION]}${r[u.PRERELEASE]}?${r[u.BUILD]}?`), l("FULL", `^${r[u.FULLPLAIN]}$`), l("LOOSEPLAIN", `[v=\\s]*${r[u.MAINVERSIONLOOSE]}${r[u.PRERELEASELOOSE]}?${r[u.BUILD]}?`), l("LOOSE", `^${r[u.LOOSEPLAIN]}$`), l("GTLT", "((?:<|>)?=?)"), l("XRANGEIDENTIFIERLOOSE", `${r[u.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), l("XRANGEIDENTIFIER", `${r[u.NUMERICIDENTIFIER]}|x|X|\\*`), l("XRANGEPLAIN", `[v=\\s]*(${r[u.XRANGEIDENTIFIER]})(?:\\.(${r[u.XRANGEIDENTIFIER]})(?:\\.(${r[u.XRANGEIDENTIFIER]})(?:${r[u.PRERELEASE]})?${r[u.BUILD]}?)?)?`), l("XRANGEPLAINLOOSE", `[v=\\s]*(${r[u.XRANGEIDENTIFIERLOOSE]})(?:\\.(${r[u.XRANGEIDENTIFIERLOOSE]})(?:\\.(${r[u.XRANGEIDENTIFIERLOOSE]})(?:${r[u.PRERELEASELOOSE]})?${r[u.BUILD]}?)?)?`), l("XRANGE", `^${r[u.GTLT]}\\s*${r[u.XRANGEPLAIN]}$`), l("XRANGELOOSE", `^${r[u.GTLT]}\\s*${r[u.XRANGEPLAINLOOSE]}$`), l("COERCE", `(^|[^\\d])(\\d{1,${t}})(?:\\.(\\d{1,${t}}))?(?:\\.(\\d{1,${t}}))?(?:$|[^\\d])`), l("COERCERTL", r[u.COERCE], true), l("LONETILDE", "(?:~>?)"), l("TILDETRIM", `(\\s*)${r[u.LONETILDE]}\\s+`, true), e.tildeTrimReplace = "$1~", l("TILDE", `^${r[u.LONETILDE]}${r[u.XRANGEPLAIN]}$`), l("TILDELOOSE", `^${r[u.LONETILDE]}${r[u.XRANGEPLAINLOOSE]}$`), l("LONECARET", "(?:\\^)"), l("CARETTRIM", `(\\s*)${r[u.LONECARET]}\\s+`, true), e.caretTrimReplace = "$1^", l("CARET", `^${r[u.LONECARET]}${r[u.XRANGEPLAIN]}$`), l("CARETLOOSE", `^${r[u.LONECARET]}${r[u.XRANGEPLAINLOOSE]}$`), l("COMPARATORLOOSE", `^${r[u.GTLT]}\\s*(${r[u.LOOSEPLAIN]})$|^$`), l("COMPARATOR", `^${r[u.GTLT]}\\s*(${r[u.FULLPLAIN]})$|^$`), l("COMPARATORTRIM", `(\\s*)${r[u.GTLT]}\\s*(${r[u.LOOSEPLAIN]}|${r[u.XRANGEPLAIN]})`, true), e.comparatorTrimReplace = "$1$2$3", l("HYPHENRANGE", `^\\s*(${r[u.XRANGEPLAIN]})\\s+-\\s+(${r[u.XRANGEPLAIN]})\\s*$`), l("HYPHENRANGELOOSE", `^\\s*(${r[u.XRANGEPLAINLOOSE]})\\s+-\\s+(${r[u.XRANGEPLAINLOOSE]})\\s*$`), l("STAR", "(<|>)?=?\\s*\\*"), l("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), l("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
        } }), yD = ee({ "node_modules/semver/internal/parse-options.js"(e, n) {
          re();
          var t = ["includePrerelease", "loose", "rtl"], s = /* @__PURE__ */ __name((a) => a ? typeof a != "object" ? { loose: true } : t.filter((r) => a[r]).reduce((r, u) => (r[u] = true, r), {}) : {}, "s");
          n.exports = s;
        } }), hD = ee({ "node_modules/semver/internal/identifiers.js"(e, n) {
          re();
          var t = /^[0-9]+$/, s = /* @__PURE__ */ __name((r, u) => {
            let i = t.test(r), l = t.test(u);
            return i && l && (r = +r, u = +u), r === u ? 0 : i && !l ? -1 : l && !i ? 1 : r < u ? -1 : 1;
          }, "s"), a = /* @__PURE__ */ __name((r, u) => s(u, r), "a");
          n.exports = { compareIdentifiers: s, rcompareIdentifiers: a };
        } }), vD = ee({ "node_modules/semver/classes/semver.js"(e, n) {
          re();
          var t = ya(), { MAX_LENGTH: s, MAX_SAFE_INTEGER: a } = ha(), { re: r, t: u } = gD(), i = yD(), { compareIdentifiers: l } = hD(), c = /* @__PURE__ */ __name(class {
            constructor(y, h) {
              if (h = i(h), y instanceof c) {
                if (y.loose === !!h.loose && y.includePrerelease === !!h.includePrerelease)
                  return y;
                y = y.version;
              } else if (typeof y != "string")
                throw new TypeError(`Invalid Version: ${y}`);
              if (y.length > s)
                throw new TypeError(`version is longer than ${s} characters`);
              t("SemVer", y, h), this.options = h, this.loose = !!h.loose, this.includePrerelease = !!h.includePrerelease;
              let g = y.trim().match(h.loose ? r[u.LOOSE] : r[u.FULL]);
              if (!g)
                throw new TypeError(`Invalid Version: ${y}`);
              if (this.raw = y, this.major = +g[1], this.minor = +g[2], this.patch = +g[3], this.major > a || this.major < 0)
                throw new TypeError("Invalid major version");
              if (this.minor > a || this.minor < 0)
                throw new TypeError("Invalid minor version");
              if (this.patch > a || this.patch < 0)
                throw new TypeError("Invalid patch version");
              g[4] ? this.prerelease = g[4].split(".").map((p) => {
                if (/^[0-9]+$/.test(p)) {
                  let D = +p;
                  if (D >= 0 && D < a)
                    return D;
                }
                return p;
              }) : this.prerelease = [], this.build = g[5] ? g[5].split(".") : [], this.format();
            }
            format() {
              return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
            }
            toString() {
              return this.version;
            }
            compare(y) {
              if (t("SemVer.compare", this.version, this.options, y), !(y instanceof c)) {
                if (typeof y == "string" && y === this.version)
                  return 0;
                y = new c(y, this.options);
              }
              return y.version === this.version ? 0 : this.compareMain(y) || this.comparePre(y);
            }
            compareMain(y) {
              return y instanceof c || (y = new c(y, this.options)), l(this.major, y.major) || l(this.minor, y.minor) || l(this.patch, y.patch);
            }
            comparePre(y) {
              if (y instanceof c || (y = new c(y, this.options)), this.prerelease.length && !y.prerelease.length)
                return -1;
              if (!this.prerelease.length && y.prerelease.length)
                return 1;
              if (!this.prerelease.length && !y.prerelease.length)
                return 0;
              let h = 0;
              do {
                let g = this.prerelease[h], p = y.prerelease[h];
                if (t("prerelease compare", h, g, p), g === void 0 && p === void 0)
                  return 0;
                if (p === void 0)
                  return 1;
                if (g === void 0)
                  return -1;
                if (g === p)
                  continue;
                return l(g, p);
              } while (++h);
            }
            compareBuild(y) {
              y instanceof c || (y = new c(y, this.options));
              let h = 0;
              do {
                let g = this.build[h], p = y.build[h];
                if (t("prerelease compare", h, g, p), g === void 0 && p === void 0)
                  return 0;
                if (p === void 0)
                  return 1;
                if (g === void 0)
                  return -1;
                if (g === p)
                  continue;
                return l(g, p);
              } while (++h);
            }
            inc(y, h) {
              switch (y) {
                case "premajor":
                  this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", h);
                  break;
                case "preminor":
                  this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", h);
                  break;
                case "prepatch":
                  this.prerelease.length = 0, this.inc("patch", h), this.inc("pre", h);
                  break;
                case "prerelease":
                  this.prerelease.length === 0 && this.inc("patch", h), this.inc("pre", h);
                  break;
                case "major":
                  (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                  break;
                case "minor":
                  (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
                  break;
                case "patch":
                  this.prerelease.length === 0 && this.patch++, this.prerelease = [];
                  break;
                case "pre":
                  if (this.prerelease.length === 0)
                    this.prerelease = [0];
                  else {
                    let g = this.prerelease.length;
                    for (; --g >= 0; )
                      typeof this.prerelease[g] == "number" && (this.prerelease[g]++, g = -2);
                    g === -1 && this.prerelease.push(0);
                  }
                  h && (l(this.prerelease[0], h) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = [h, 0]) : this.prerelease = [h, 0]);
                  break;
                default:
                  throw new Error(`invalid increment argument: ${y}`);
              }
              return this.format(), this.raw = this.version, this;
            }
          }, "c");
          n.exports = c;
        } }), Mn = ee({ "node_modules/semver/functions/compare.js"(e, n) {
          re();
          var t = vD(), s = /* @__PURE__ */ __name((a, r, u) => new t(a, u).compare(new t(r, u)), "s");
          n.exports = s;
        } }), CD = ee({ "node_modules/semver/functions/lt.js"(e, n) {
          re();
          var t = Mn(), s = /* @__PURE__ */ __name((a, r, u) => t(a, r, u) < 0, "s");
          n.exports = s;
        } }), ED = ee({ "node_modules/semver/functions/gte.js"(e, n) {
          re();
          var t = Mn(), s = /* @__PURE__ */ __name((a, r, u) => t(a, r, u) >= 0, "s");
          n.exports = s;
        } }), FD = ee({ "src/utils/arrayify.js"(e, n) {
          "use strict";
          re(), n.exports = (t, s) => Object.entries(t).map((a) => {
            let [r, u] = a;
            return Object.assign({ [s]: r }, u);
          });
        } }), AD = ee({ "node_modules/outdent/lib/index.js"(e, n) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.outdent = void 0;
          function t() {
            for (var F = [], A = 0; A < arguments.length; A++)
              F[A] = arguments[A];
          }
          __name(t, "t");
          function s() {
            return typeof WeakMap < "u" ? /* @__PURE__ */ new WeakMap() : a();
          }
          __name(s, "s");
          function a() {
            return { add: t, delete: t, get: t, set: t, has: function(F) {
              return false;
            } };
          }
          __name(a, "a");
          var r = Object.prototype.hasOwnProperty, u = /* @__PURE__ */ __name(function(F, A) {
            return r.call(F, A);
          }, "u");
          function i(F, A) {
            for (var B in A)
              u(A, B) && (F[B] = A[B]);
            return F;
          }
          __name(i, "i");
          var l = /^[ \t]*(?:\r\n|\r|\n)/, c = /(?:\r\n|\r|\n)[ \t]*$/, y = /^(?:[\r\n]|$)/, h = /(?:\r\n|\r|\n)([ \t]*)(?:[^ \t\r\n]|$)/, g = /^[ \t]*[\r\n][ \t\r\n]*$/;
          function p(F, A, B) {
            var I = 0, P = F[0].match(h);
            P && (I = P[1].length);
            var R = "(\\r\\n|\\r|\\n).{0," + I + "}", f = new RegExp(R, "g");
            A && (F = F.slice(1));
            var x = B.newline, m = B.trimLeadingNewline, E = B.trimTrailingNewline, o = typeof x == "string", d = F.length, C = F.map(function(_, b) {
              return _ = _.replace(f, "$1"), b === 0 && m && (_ = _.replace(l, "")), b === d - 1 && E && (_ = _.replace(c, "")), o && (_ = _.replace(/\r\n|\n|\r/g, function(N) {
                return x;
              })), _;
            });
            return C;
          }
          __name(p, "p");
          function D(F, A) {
            for (var B = "", I = 0, P = F.length; I < P; I++)
              B += F[I], I < P - 1 && (B += A[I]);
            return B;
          }
          __name(D, "D");
          function v(F) {
            return u(F, "raw") && u(F, "length");
          }
          __name(v, "v");
          function w(F) {
            var A = s(), B = s();
            function I(R) {
              for (var f = [], x = 1; x < arguments.length; x++)
                f[x - 1] = arguments[x];
              if (v(R)) {
                var m = R, E = (f[0] === I || f[0] === T) && g.test(m[0]) && y.test(m[1]), o = E ? B : A, d = o.get(m);
                if (d || (d = p(m, E, F), o.set(m, d)), f.length === 0)
                  return d[0];
                var C = D(d, E ? f.slice(1) : f);
                return C;
              } else
                return w(i(i({}, F), R || {}));
            }
            __name(I, "I");
            var P = i(I, { string: function(R) {
              return p([R], false, F)[0];
            } });
            return P;
          }
          __name(w, "w");
          var T = w({ trimLeadingNewline: true, trimTrailingNewline: true });
          if (e.outdent = T, e.default = T, typeof n < "u")
            try {
              n.exports = T, Object.defineProperty(T, "__esModule", { value: true }), T.default = T, T.outdent = T;
            } catch {
            }
        } }), SD = ee({ "src/main/core-options.js"(e, n) {
          "use strict";
          re();
          var { outdent: t } = AD(), s = "Config", a = "Editor", r = "Format", u = "Other", i = "Output", l = "Global", c = "Special", y = { cursorOffset: { since: "1.4.0", category: c, type: "int", default: -1, range: { start: -1, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Print (to stderr) where a cursor at the given position would move to after formatting.
      This option cannot be used with --range-start and --range-end.
    `, cliCategory: a }, endOfLine: { since: "1.15.0", category: l, type: "choice", default: [{ since: "1.15.0", value: "auto" }, { since: "2.0.0", value: "lf" }], description: "Which end of line characters to apply.", choices: [{ value: "lf", description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos" }, { value: "crlf", description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows" }, { value: "cr", description: "Carriage Return character only (\\r), used very rarely" }, { value: "auto", description: t`
          Maintain existing
          (mixed values within one file are normalised by looking at what's used after the first line)
        ` }] }, filepath: { since: "1.4.0", category: c, type: "path", description: "Specify the input filepath. This will be used to do parser inference.", cliName: "stdin-filepath", cliCategory: u, cliDescription: "Path to the file to pretend that stdin comes from." }, insertPragma: { since: "1.8.0", category: c, type: "boolean", default: false, description: "Insert @format pragma into file's first docblock comment.", cliCategory: u }, parser: { since: "0.0.10", category: l, type: "choice", default: [{ since: "0.0.10", value: "babylon" }, { since: "1.13.0", value: void 0 }], description: "Which parser to use.", exception: (h) => typeof h == "string" || typeof h == "function", choices: [{ value: "flow", description: "Flow" }, { value: "babel", since: "1.16.0", description: "JavaScript" }, { value: "babel-flow", since: "1.16.0", description: "Flow" }, { value: "babel-ts", since: "2.0.0", description: "TypeScript" }, { value: "typescript", since: "1.4.0", description: "TypeScript" }, { value: "acorn", since: "2.6.0", description: "JavaScript" }, { value: "espree", since: "2.2.0", description: "JavaScript" }, { value: "meriyah", since: "2.2.0", description: "JavaScript" }, { value: "css", since: "1.7.1", description: "CSS" }, { value: "less", since: "1.7.1", description: "Less" }, { value: "scss", since: "1.7.1", description: "SCSS" }, { value: "json", since: "1.5.0", description: "JSON" }, { value: "json5", since: "1.13.0", description: "JSON5" }, { value: "json-stringify", since: "1.13.0", description: "JSON.stringify" }, { value: "graphql", since: "1.5.0", description: "GraphQL" }, { value: "markdown", since: "1.8.0", description: "Markdown" }, { value: "mdx", since: "1.15.0", description: "MDX" }, { value: "vue", since: "1.10.0", description: "Vue" }, { value: "yaml", since: "1.14.0", description: "YAML" }, { value: "glimmer", since: "2.3.0", description: "Ember / Handlebars" }, { value: "html", since: "1.15.0", description: "HTML" }, { value: "angular", since: "1.15.0", description: "Angular" }, { value: "lwc", since: "1.17.0", description: "Lightning Web Components" }] }, plugins: { since: "1.10.0", type: "path", array: true, default: [{ value: [] }], category: l, description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.", exception: (h) => typeof h == "string" || typeof h == "object", cliName: "plugin", cliCategory: s }, pluginSearchDirs: { since: "1.13.0", type: "path", array: true, default: [{ value: [] }], category: l, description: t`
      Custom directory that contains prettier plugins in node_modules subdirectory.
      Overrides default behavior when plugins are searched relatively to the location of Prettier.
      Multiple values are accepted.
    `, exception: (h) => typeof h == "string" || typeof h == "object", cliName: "plugin-search-dir", cliCategory: s }, printWidth: { since: "0.0.0", category: l, type: "int", default: 80, description: "The line length where Prettier will try wrap.", range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 } }, rangeEnd: { since: "1.4.0", category: c, type: "int", default: Number.POSITIVE_INFINITY, range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Format code ending at a given character offset (exclusive).
      The range will extend forwards to the end of the selected statement.
      This option cannot be used with --cursor-offset.
    `, cliCategory: a }, rangeStart: { since: "1.4.0", category: c, type: "int", default: 0, range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Format code starting at a given character offset.
      The range will extend backwards to the start of the first line containing the selected statement.
      This option cannot be used with --cursor-offset.
    `, cliCategory: a }, requirePragma: { since: "1.7.0", category: c, type: "boolean", default: false, description: t`
      Require either '@prettier' or '@format' to be present in the file's first docblock comment
      in order for it to be formatted.
    `, cliCategory: u }, tabWidth: { type: "int", category: l, default: 2, description: "Number of spaces per indentation level.", range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 } }, useTabs: { since: "1.0.0", category: l, type: "boolean", default: false, description: "Indent with tabs instead of spaces." }, embeddedLanguageFormatting: { since: "2.1.0", category: l, type: "choice", default: [{ since: "2.1.0", value: "auto" }], description: "Control how Prettier formats quoted code embedded in the file.", choices: [{ value: "auto", description: "Format embedded code if Prettier can automatically identify it." }, { value: "off", description: "Never automatically format embedded code." }] } };
          n.exports = { CATEGORY_CONFIG: s, CATEGORY_EDITOR: a, CATEGORY_FORMAT: r, CATEGORY_OTHER: u, CATEGORY_OUTPUT: i, CATEGORY_GLOBAL: l, CATEGORY_SPECIAL: c, options: y };
        } }), Rn = ee({ "src/main/support.js"(e, n) {
          "use strict";
          re();
          var t = { compare: Mn(), lt: CD(), gte: ED() }, s = FD(), a = fa().version, r = SD().options;
          function u() {
            let { plugins: l = [], showUnreleased: c = false, showDeprecated: y = false, showInternal: h = false } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, g = a.split("-", 1)[0], p = l.flatMap((F) => F.languages || []).filter(v), D = s(Object.assign({}, ...l.map((F) => {
              let { options: A } = F;
              return A;
            }), r), "name").filter((F) => v(F) && w(F)).sort((F, A) => F.name === A.name ? 0 : F.name < A.name ? -1 : 1).map(T).map((F) => {
              F = Object.assign({}, F), Array.isArray(F.default) && (F.default = F.default.length === 1 ? F.default[0].value : F.default.filter(v).sort((B, I) => t.compare(I.since, B.since))[0].value), Array.isArray(F.choices) && (F.choices = F.choices.filter((B) => v(B) && w(B)), F.name === "parser" && i(F, p, l));
              let A = Object.fromEntries(l.filter((B) => B.defaultOptions && B.defaultOptions[F.name] !== void 0).map((B) => [B.name, B.defaultOptions[F.name]]));
              return Object.assign(Object.assign({}, F), {}, { pluginDefaults: A });
            });
            return { languages: p, options: D };
            function v(F) {
              return c || !("since" in F) || F.since && t.gte(g, F.since);
            }
            __name(v, "v");
            function w(F) {
              return y || !("deprecated" in F) || F.deprecated && t.lt(g, F.deprecated);
            }
            __name(w, "w");
            function T(F) {
              if (h)
                return F;
              let { cliName: A, cliCategory: B, cliDescription: I } = F;
              return Ln(F, Uf);
            }
            __name(T, "T");
          }
          __name(u, "u");
          function i(l, c, y) {
            let h = new Set(l.choices.map((g) => g.value));
            for (let g of c)
              if (g.parsers) {
                for (let p of g.parsers)
                  if (!h.has(p)) {
                    h.add(p);
                    let D = y.find((w) => w.parsers && w.parsers[p]), v = g.name;
                    D && D.name && (v += ` (plugin: ${D.name})`), l.choices.push({ value: p, description: v });
                  }
              }
          }
          __name(i, "i");
          n.exports = { getSupportInfo: u };
        } }), $n = ee({ "src/utils/is-non-empty-array.js"(e, n) {
          "use strict";
          re();
          function t(s) {
            return Array.isArray(s) && s.length > 0;
          }
          __name(t, "t");
          n.exports = t;
        } }), _r = ee({ "src/utils/text/skip.js"(e, n) {
          "use strict";
          re();
          function t(i) {
            return (l, c, y) => {
              let h = y && y.backwards;
              if (c === false)
                return false;
              let { length: g } = l, p = c;
              for (; p >= 0 && p < g; ) {
                let D = l.charAt(p);
                if (i instanceof RegExp) {
                  if (!i.test(D))
                    return p;
                } else if (!i.includes(D))
                  return p;
                h ? p-- : p++;
              }
              return p === -1 || p === g ? p : false;
            };
          }
          __name(t, "t");
          var s = t(/\s/), a = t(" 	"), r = t(",; 	"), u = t(/[^\n\r]/);
          n.exports = { skipWhitespace: s, skipSpaces: a, skipToLineEnd: r, skipEverythingButNewLine: u };
        } }), va = ee({ "src/utils/text/skip-inline-comment.js"(e, n) {
          "use strict";
          re();
          function t(s, a) {
            if (a === false)
              return false;
            if (s.charAt(a) === "/" && s.charAt(a + 1) === "*") {
              for (let r = a + 2; r < s.length; ++r)
                if (s.charAt(r) === "*" && s.charAt(r + 1) === "/")
                  return r + 2;
            }
            return a;
          }
          __name(t, "t");
          n.exports = t;
        } }), Ca = ee({ "src/utils/text/skip-trailing-comment.js"(e, n) {
          "use strict";
          re();
          var { skipEverythingButNewLine: t } = _r();
          function s(a, r) {
            return r === false ? false : a.charAt(r) === "/" && a.charAt(r + 1) === "/" ? t(a, r) : r;
          }
          __name(s, "s");
          n.exports = s;
        } }), Ea = ee({ "src/utils/text/skip-newline.js"(e, n) {
          "use strict";
          re();
          function t(s, a, r) {
            let u = r && r.backwards;
            if (a === false)
              return false;
            let i = s.charAt(a);
            if (u) {
              if (s.charAt(a - 1) === "\r" && i === `
`)
                return a - 2;
              if (i === `
` || i === "\r" || i === "\u2028" || i === "\u2029")
                return a - 1;
            } else {
              if (i === "\r" && s.charAt(a + 1) === `
`)
                return a + 2;
              if (i === `
` || i === "\r" || i === "\u2028" || i === "\u2029")
                return a + 1;
            }
            return a;
          }
          __name(t, "t");
          n.exports = t;
        } }), xD = ee({ "src/utils/text/get-next-non-space-non-comment-character-index-with-start-index.js"(e, n) {
          "use strict";
          re();
          var t = va(), s = Ea(), a = Ca(), { skipSpaces: r } = _r();
          function u(i, l) {
            let c = null, y = l;
            for (; y !== c; )
              c = y, y = r(i, y), y = t(i, y), y = a(i, y), y = s(i, y);
            return y;
          }
          __name(u, "u");
          n.exports = u;
        } }), Ge = ee({ "src/common/util.js"(e, n) {
          "use strict";
          re();
          var { default: t } = (dD(), ft(ga)), s = lt(), { getSupportInfo: a } = Rn(), r = $n(), u = da(), { skipWhitespace: i, skipSpaces: l, skipToLineEnd: c, skipEverythingButNewLine: y } = _r(), h = va(), g = Ca(), p = Ea(), D = xD(), v = /* @__PURE__ */ __name((V) => V[V.length - 2], "v");
          function w(V) {
            return (O, K, se) => {
              let Q = se && se.backwards;
              if (K === false)
                return false;
              let { length: le } = O, W = K;
              for (; W >= 0 && W < le; ) {
                let X = O.charAt(W);
                if (V instanceof RegExp) {
                  if (!V.test(X))
                    return W;
                } else if (!V.includes(X))
                  return W;
                Q ? W-- : W++;
              }
              return W === -1 || W === le ? W : false;
            };
          }
          __name(w, "w");
          function T(V, O) {
            let K = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, se = l(V, K.backwards ? O - 1 : O, K), Q = p(V, se, K);
            return se !== Q;
          }
          __name(T, "T");
          function F(V, O, K) {
            for (let se = O; se < K; ++se)
              if (V.charAt(se) === `
`)
                return true;
            return false;
          }
          __name(F, "F");
          function A(V, O, K) {
            let se = K(O) - 1;
            se = l(V, se, { backwards: true }), se = p(V, se, { backwards: true }), se = l(V, se, { backwards: true });
            let Q = p(V, se, { backwards: true });
            return se !== Q;
          }
          __name(A, "A");
          function B(V, O) {
            let K = null, se = O;
            for (; se !== K; )
              K = se, se = c(V, se), se = h(V, se), se = l(V, se);
            return se = g(V, se), se = p(V, se), se !== false && T(V, se);
          }
          __name(B, "B");
          function I(V, O, K) {
            return B(V, K(O));
          }
          __name(I, "I");
          function P(V, O, K) {
            return D(V, K(O));
          }
          __name(P, "P");
          function R(V, O, K) {
            return V.charAt(P(V, O, K));
          }
          __name(R, "R");
          function f(V, O) {
            let K = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            return l(V, K.backwards ? O - 1 : O, K) !== O;
          }
          __name(f, "f");
          function x(V, O) {
            let K = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, se = 0;
            for (let Q = K; Q < V.length; ++Q)
              V[Q] === "	" ? se = se + O - se % O : se++;
            return se;
          }
          __name(x, "x");
          function m(V, O) {
            let K = V.lastIndexOf(`
`);
            return K === -1 ? 0 : x(V.slice(K + 1).match(/^[\t ]*/)[0], O);
          }
          __name(m, "m");
          function E(V, O) {
            let K = { quote: '"', regex: /"/g, escaped: "&quot;" }, se = { quote: "'", regex: /'/g, escaped: "&apos;" }, Q = O === "'" ? se : K, le = Q === se ? K : se, W = Q;
            if (V.includes(Q.quote) || V.includes(le.quote)) {
              let X = (V.match(Q.regex) || []).length, oe = (V.match(le.regex) || []).length;
              W = X > oe ? le : Q;
            }
            return W;
          }
          __name(E, "E");
          function o(V, O) {
            let K = V.slice(1, -1), se = O.parser === "json" || O.parser === "json5" && O.quoteProps === "preserve" && !O.singleQuote ? '"' : O.__isInHtmlAttribute ? "'" : E(K, O.singleQuote ? "'" : '"').quote;
            return d(K, se, !(O.parser === "css" || O.parser === "less" || O.parser === "scss" || O.__embeddedInHtml));
          }
          __name(o, "o");
          function d(V, O, K) {
            let se = O === '"' ? "'" : '"', Q = /\\(.)|(["'])/gs, le = V.replace(Q, (W, X, oe) => X === se ? X : oe === O ? "\\" + oe : oe || (K && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/.test(X) ? X : "\\" + X));
            return O + le + O;
          }
          __name(d, "d");
          function C(V) {
            return V.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(\d)/, "$1$2$3").replace(/^([+-]?[\d.]+)e[+-]?0+$/, "$1").replace(/^([+-])?\./, "$10.").replace(/(\.\d+?)0+(?=e|$)/, "$1").replace(/\.(?=e|$)/, "");
          }
          __name(C, "C");
          function _(V, O) {
            let K = V.match(new RegExp(`(${t(O)})+`, "g"));
            return K === null ? 0 : K.reduce((se, Q) => Math.max(se, Q.length / O.length), 0);
          }
          __name(_, "_");
          function b(V, O) {
            let K = V.match(new RegExp(`(${t(O)})+`, "g"));
            if (K === null)
              return 0;
            let se = /* @__PURE__ */ new Map(), Q = 0;
            for (let le of K) {
              let W = le.length / O.length;
              se.set(W, true), W > Q && (Q = W);
            }
            for (let le = 1; le < Q; le++)
              if (!se.get(le))
                return le;
            return Q + 1;
          }
          __name(b, "b");
          function N(V, O) {
            (V.comments || (V.comments = [])).push(O), O.printed = false, O.nodeDescription = Y(V);
          }
          __name(N, "N");
          function k(V, O) {
            O.leading = true, O.trailing = false, N(V, O);
          }
          __name(k, "k");
          function $(V, O, K) {
            O.leading = false, O.trailing = false, K && (O.marker = K), N(V, O);
          }
          __name($, "$");
          function M(V, O) {
            O.leading = false, O.trailing = true, N(V, O);
          }
          __name(M, "M");
          function q(V, O) {
            let { languages: K } = a({ plugins: O.plugins }), se = K.find((Q) => {
              let { name: le } = Q;
              return le.toLowerCase() === V;
            }) || K.find((Q) => {
              let { aliases: le } = Q;
              return Array.isArray(le) && le.includes(V);
            }) || K.find((Q) => {
              let { extensions: le } = Q;
              return Array.isArray(le) && le.includes(`.${V}`);
            });
            return se && se.parsers[0];
          }
          __name(q, "q");
          function J(V) {
            return V && V.type === "front-matter";
          }
          __name(J, "J");
          function L(V) {
            let O = /* @__PURE__ */ new WeakMap();
            return function(K) {
              return O.has(K) || O.set(K, Symbol(V)), O.get(K);
            };
          }
          __name(L, "L");
          function Y(V) {
            let O = V.type || V.kind || "(unknown type)", K = String(V.name || V.id && (typeof V.id == "object" ? V.id.name : V.id) || V.key && (typeof V.key == "object" ? V.key.name : V.key) || V.value && (typeof V.value == "object" ? "" : String(V.value)) || V.operator || "");
            return K.length > 20 && (K = K.slice(0, 19) + "\u2026"), O + (K ? " " + K : "");
          }
          __name(Y, "Y");
          n.exports = { inferParserByLanguage: q, getStringWidth: u, getMaxContinuousCount: _, getMinNotPresentContinuousCount: b, getPenultimate: v, getLast: s, getNextNonSpaceNonCommentCharacterIndexWithStartIndex: D, getNextNonSpaceNonCommentCharacterIndex: P, getNextNonSpaceNonCommentCharacter: R, skip: w, skipWhitespace: i, skipSpaces: l, skipToLineEnd: c, skipEverythingButNewLine: y, skipInlineComment: h, skipTrailingComment: g, skipNewline: p, isNextLineEmptyAfterIndex: B, isNextLineEmpty: I, isPreviousLineEmpty: A, hasNewline: T, hasNewlineInRange: F, hasSpaces: f, getAlignmentSize: x, getIndentSize: m, getPreferredQuote: E, printString: o, printNumber: C, makeString: d, addLeadingComment: k, addDanglingComment: $, addTrailingComment: M, isFrontMatterNode: J, isNonEmptyArray: r, createGroupIdMapper: L };
        } }), Fa = {};
        zt(Fa, { basename: () => Ta, default: () => Na, delimiter: () => wn, dirname: () => ba, extname: () => Ba, isAbsolute: () => Wn, join: () => Sa, normalize: () => Vn, relative: () => xa, resolve: () => Nr, sep: () => Nn });
        function Aa(e, n) {
          for (var t = 0, s = e.length - 1; s >= 0; s--) {
            var a = e[s];
            a === "." ? e.splice(s, 1) : a === ".." ? (e.splice(s, 1), t++) : t && (e.splice(s, 1), t--);
          }
          if (n)
            for (; t--; t)
              e.unshift("..");
          return e;
        }
        __name(Aa, "Aa");
        function Nr() {
          for (var e = "", n = false, t = arguments.length - 1; t >= -1 && !n; t--) {
            var s = t >= 0 ? arguments[t] : "/";
            if (typeof s != "string")
              throw new TypeError("Arguments to path.resolve must be strings");
            if (!s)
              continue;
            e = s + "/" + e, n = s.charAt(0) === "/";
          }
          return e = Aa(Hn(e.split("/"), function(a) {
            return !!a;
          }), !n).join("/"), (n ? "/" : "") + e || ".";
        }
        __name(Nr, "Nr");
        function Vn(e) {
          var n = Wn(e), t = wa(e, -1) === "/";
          return e = Aa(Hn(e.split("/"), function(s) {
            return !!s;
          }), !n).join("/"), !e && !n && (e = "."), e && t && (e += "/"), (n ? "/" : "") + e;
        }
        __name(Vn, "Vn");
        function Wn(e) {
          return e.charAt(0) === "/";
        }
        __name(Wn, "Wn");
        function Sa() {
          var e = Array.prototype.slice.call(arguments, 0);
          return Vn(Hn(e, function(n, t) {
            if (typeof n != "string")
              throw new TypeError("Arguments to path.join must be strings");
            return n;
          }).join("/"));
        }
        __name(Sa, "Sa");
        function xa(e, n) {
          e = Nr(e).substr(1), n = Nr(n).substr(1);
          function t(c) {
            for (var y = 0; y < c.length && c[y] === ""; y++)
              ;
            for (var h = c.length - 1; h >= 0 && c[h] === ""; h--)
              ;
            return y > h ? [] : c.slice(y, h - y + 1);
          }
          __name(t, "t");
          for (var s = t(e.split("/")), a = t(n.split("/")), r = Math.min(s.length, a.length), u = r, i = 0; i < r; i++)
            if (s[i] !== a[i]) {
              u = i;
              break;
            }
          for (var l = [], i = u; i < s.length; i++)
            l.push("..");
          return l = l.concat(a.slice(u)), l.join("/");
        }
        __name(xa, "xa");
        function ba(e) {
          var n = Pr(e), t = n[0], s = n[1];
          return !t && !s ? "." : (s && (s = s.substr(0, s.length - 1)), t + s);
        }
        __name(ba, "ba");
        function Ta(e, n) {
          var t = Pr(e)[2];
          return n && t.substr(-1 * n.length) === n && (t = t.substr(0, t.length - n.length)), t;
        }
        __name(Ta, "Ta");
        function Ba(e) {
          return Pr(e)[3];
        }
        __name(Ba, "Ba");
        function Hn(e, n) {
          if (e.filter)
            return e.filter(n);
          for (var t = [], s = 0; s < e.length; s++)
            n(e[s], s, e) && t.push(e[s]);
          return t;
        }
        __name(Hn, "Hn");
        var oa, Pr, Nn, wn, Na, wa, bD = gt({ "node-modules-polyfills:path"() {
          re(), oa = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/, Pr = /* @__PURE__ */ __name(function(e) {
            return oa.exec(e).slice(1);
          }, "Pr"), Nn = "/", wn = ":", Na = { extname: Ba, basename: Ta, dirname: ba, sep: Nn, delimiter: wn, relative: xa, join: Sa, isAbsolute: Wn, normalize: Vn, resolve: Nr }, wa = "ab".substr(-1) === "b" ? function(e, n, t) {
            return e.substr(n, t);
          } : function(e, n, t) {
            return n < 0 && (n = e.length + n), e.substr(n, t);
          };
        } }), TD = ee({ "node-modules-polyfills-commonjs:path"(e, n) {
          re();
          var t = (bD(), ft(Fa));
          if (t && t.default) {
            n.exports = t.default;
            for (let s in t)
              n.exports[s] = t[s];
          } else
            t && (n.exports = t);
        } }), Kt = ee({ "src/common/errors.js"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ __name(class extends Error {
          }, "t"), s = /* @__PURE__ */ __name(class extends Error {
          }, "s"), a = /* @__PURE__ */ __name(class extends Error {
          }, "a"), r = /* @__PURE__ */ __name(class extends Error {
          }, "r");
          n.exports = { ConfigError: t, DebugError: s, UndefinedParserError: a, ArgExpansionBailout: r };
        } }), yt = {};
        zt(yt, { __assign: () => Br, __asyncDelegator: () => RD, __asyncGenerator: () => MD, __asyncValues: () => $D, __await: () => Jt, __awaiter: () => ID, __classPrivateFieldGet: () => GD, __classPrivateFieldSet: () => UD, __createBinding: () => LD, __decorate: () => wD, __exportStar: () => jD, __extends: () => BD, __generator: () => kD, __importDefault: () => HD, __importStar: () => WD, __makeTemplateObject: () => VD, __metadata: () => PD, __param: () => _D, __read: () => _a, __rest: () => ND, __spread: () => OD, __spreadArrays: () => qD, __values: () => _n });
        function BD(e, n) {
          Tr(e, n);
          function t() {
            this.constructor = e;
          }
          __name(t, "t");
          e.prototype = n === null ? Object.create(n) : (t.prototype = n.prototype, new t());
        }
        __name(BD, "BD");
        function ND(e, n) {
          var t = {};
          for (var s in e)
            Object.prototype.hasOwnProperty.call(e, s) && n.indexOf(s) < 0 && (t[s] = e[s]);
          if (e != null && typeof Object.getOwnPropertySymbols == "function")
            for (var a = 0, s = Object.getOwnPropertySymbols(e); a < s.length; a++)
              n.indexOf(s[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[a]) && (t[s[a]] = e[s[a]]);
          return t;
        }
        __name(ND, "ND");
        function wD(e, n, t, s) {
          var a = arguments.length, r = a < 3 ? n : s === null ? s = Object.getOwnPropertyDescriptor(n, t) : s, u;
          if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
            r = Reflect.decorate(e, n, t, s);
          else
            for (var i = e.length - 1; i >= 0; i--)
              (u = e[i]) && (r = (a < 3 ? u(r) : a > 3 ? u(n, t, r) : u(n, t)) || r);
          return a > 3 && r && Object.defineProperty(n, t, r), r;
        }
        __name(wD, "wD");
        function _D(e, n) {
          return function(t, s) {
            n(t, s, e);
          };
        }
        __name(_D, "_D");
        function PD(e, n) {
          if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
            return Reflect.metadata(e, n);
        }
        __name(PD, "PD");
        function ID(e, n, t, s) {
          function a(r) {
            return r instanceof t ? r : new t(function(u) {
              u(r);
            });
          }
          __name(a, "a");
          return new (t || (t = Promise))(function(r, u) {
            function i(y) {
              try {
                c(s.next(y));
              } catch (h) {
                u(h);
              }
            }
            __name(i, "i");
            function l(y) {
              try {
                c(s.throw(y));
              } catch (h) {
                u(h);
              }
            }
            __name(l, "l");
            function c(y) {
              y.done ? r(y.value) : a(y.value).then(i, l);
            }
            __name(c, "c");
            c((s = s.apply(e, n || [])).next());
          });
        }
        __name(ID, "ID");
        function kD(e, n) {
          var t = { label: 0, sent: function() {
            if (r[0] & 1)
              throw r[1];
            return r[1];
          }, trys: [], ops: [] }, s, a, r, u;
          return u = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol == "function" && (u[Symbol.iterator] = function() {
            return this;
          }), u;
          function i(c) {
            return function(y) {
              return l([c, y]);
            };
          }
          __name(i, "i");
          function l(c) {
            if (s)
              throw new TypeError("Generator is already executing.");
            for (; t; )
              try {
                if (s = 1, a && (r = c[0] & 2 ? a.return : c[0] ? a.throw || ((r = a.return) && r.call(a), 0) : a.next) && !(r = r.call(a, c[1])).done)
                  return r;
                switch (a = 0, r && (c = [c[0] & 2, r.value]), c[0]) {
                  case 0:
                  case 1:
                    r = c;
                    break;
                  case 4:
                    return t.label++, { value: c[1], done: false };
                  case 5:
                    t.label++, a = c[1], c = [0];
                    continue;
                  case 7:
                    c = t.ops.pop(), t.trys.pop();
                    continue;
                  default:
                    if (r = t.trys, !(r = r.length > 0 && r[r.length - 1]) && (c[0] === 6 || c[0] === 2)) {
                      t = 0;
                      continue;
                    }
                    if (c[0] === 3 && (!r || c[1] > r[0] && c[1] < r[3])) {
                      t.label = c[1];
                      break;
                    }
                    if (c[0] === 6 && t.label < r[1]) {
                      t.label = r[1], r = c;
                      break;
                    }
                    if (r && t.label < r[2]) {
                      t.label = r[2], t.ops.push(c);
                      break;
                    }
                    r[2] && t.ops.pop(), t.trys.pop();
                    continue;
                }
                c = n.call(e, t);
              } catch (y) {
                c = [6, y], a = 0;
              } finally {
                s = r = 0;
              }
            if (c[0] & 5)
              throw c[1];
            return { value: c[0] ? c[1] : void 0, done: true };
          }
          __name(l, "l");
        }
        __name(kD, "kD");
        function LD(e, n, t, s) {
          s === void 0 && (s = t), e[s] = n[t];
        }
        __name(LD, "LD");
        function jD(e, n) {
          for (var t in e)
            t !== "default" && !n.hasOwnProperty(t) && (n[t] = e[t]);
        }
        __name(jD, "jD");
        function _n(e) {
          var n = typeof Symbol == "function" && Symbol.iterator, t = n && e[n], s = 0;
          if (t)
            return t.call(e);
          if (e && typeof e.length == "number")
            return { next: function() {
              return e && s >= e.length && (e = void 0), { value: e && e[s++], done: !e };
            } };
          throw new TypeError(n ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }
        __name(_n, "_n");
        function _a(e, n) {
          var t = typeof Symbol == "function" && e[Symbol.iterator];
          if (!t)
            return e;
          var s = t.call(e), a, r = [], u;
          try {
            for (; (n === void 0 || n-- > 0) && !(a = s.next()).done; )
              r.push(a.value);
          } catch (i) {
            u = { error: i };
          } finally {
            try {
              a && !a.done && (t = s.return) && t.call(s);
            } finally {
              if (u)
                throw u.error;
            }
          }
          return r;
        }
        __name(_a, "_a");
        function OD() {
          for (var e = [], n = 0; n < arguments.length; n++)
            e = e.concat(_a(arguments[n]));
          return e;
        }
        __name(OD, "OD");
        function qD() {
          for (var e = 0, n = 0, t = arguments.length; n < t; n++)
            e += arguments[n].length;
          for (var s = Array(e), a = 0, n = 0; n < t; n++)
            for (var r = arguments[n], u = 0, i = r.length; u < i; u++, a++)
              s[a] = r[u];
          return s;
        }
        __name(qD, "qD");
        function Jt(e) {
          return this instanceof Jt ? (this.v = e, this) : new Jt(e);
        }
        __name(Jt, "Jt");
        function MD(e, n, t) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var s = t.apply(e, n || []), a, r = [];
          return a = {}, u("next"), u("throw"), u("return"), a[Symbol.asyncIterator] = function() {
            return this;
          }, a;
          function u(g) {
            s[g] && (a[g] = function(p) {
              return new Promise(function(D, v) {
                r.push([g, p, D, v]) > 1 || i(g, p);
              });
            });
          }
          __name(u, "u");
          function i(g, p) {
            try {
              l(s[g](p));
            } catch (D) {
              h(r[0][3], D);
            }
          }
          __name(i, "i");
          function l(g) {
            g.value instanceof Jt ? Promise.resolve(g.value.v).then(c, y) : h(r[0][2], g);
          }
          __name(l, "l");
          function c(g) {
            i("next", g);
          }
          __name(c, "c");
          function y(g) {
            i("throw", g);
          }
          __name(y, "y");
          function h(g, p) {
            g(p), r.shift(), r.length && i(r[0][0], r[0][1]);
          }
          __name(h, "h");
        }
        __name(MD, "MD");
        function RD(e) {
          var n, t;
          return n = {}, s("next"), s("throw", function(a) {
            throw a;
          }), s("return"), n[Symbol.iterator] = function() {
            return this;
          }, n;
          function s(a, r) {
            n[a] = e[a] ? function(u) {
              return (t = !t) ? { value: Jt(e[a](u)), done: a === "return" } : r ? r(u) : u;
            } : r;
          }
          __name(s, "s");
        }
        __name(RD, "RD");
        function $D(e) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var n = e[Symbol.asyncIterator], t;
          return n ? n.call(e) : (e = typeof _n == "function" ? _n(e) : e[Symbol.iterator](), t = {}, s("next"), s("throw"), s("return"), t[Symbol.asyncIterator] = function() {
            return this;
          }, t);
          function s(r) {
            t[r] = e[r] && function(u) {
              return new Promise(function(i, l) {
                u = e[r](u), a(i, l, u.done, u.value);
              });
            };
          }
          __name(s, "s");
          function a(r, u, i, l) {
            Promise.resolve(l).then(function(c) {
              r({ value: c, done: i });
            }, u);
          }
          __name(a, "a");
        }
        __name($D, "$D");
        function VD(e, n) {
          return Object.defineProperty ? Object.defineProperty(e, "raw", { value: n }) : e.raw = n, e;
        }
        __name(VD, "VD");
        function WD(e) {
          if (e && e.__esModule)
            return e;
          var n = {};
          if (e != null)
            for (var t in e)
              Object.hasOwnProperty.call(e, t) && (n[t] = e[t]);
          return n.default = e, n;
        }
        __name(WD, "WD");
        function HD(e) {
          return e && e.__esModule ? e : { default: e };
        }
        __name(HD, "HD");
        function GD(e, n) {
          if (!n.has(e))
            throw new TypeError("attempted to get private field on non-instance");
          return n.get(e);
        }
        __name(GD, "GD");
        function UD(e, n, t) {
          if (!n.has(e))
            throw new TypeError("attempted to set private field on non-instance");
          return n.set(e, t), t;
        }
        __name(UD, "UD");
        var Tr, Br, Ct = gt({ "node_modules/tslib/tslib.es6.js"() {
          re(), Tr = /* @__PURE__ */ __name(function(e, n) {
            return Tr = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t, s) {
              t.__proto__ = s;
            } || function(t, s) {
              for (var a in s)
                s.hasOwnProperty(a) && (t[a] = s[a]);
            }, Tr(e, n);
          }, "Tr"), Br = /* @__PURE__ */ __name(function() {
            return Br = Object.assign || function(n) {
              for (var t, s = 1, a = arguments.length; s < a; s++) {
                t = arguments[s];
                for (var r in t)
                  Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
              }
              return n;
            }, Br.apply(this, arguments);
          }, "Br");
        } }), Pa = ee({ "node_modules/vnopts/lib/descriptors/api.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.apiDescriptor = { key: (n) => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(n) ? n : JSON.stringify(n), value(n) {
            if (n === null || typeof n != "object")
              return JSON.stringify(n);
            if (Array.isArray(n))
              return `[${n.map((s) => e.apiDescriptor.value(s)).join(", ")}]`;
            let t = Object.keys(n);
            return t.length === 0 ? "{}" : `{ ${t.map((s) => `${e.apiDescriptor.key(s)}: ${e.apiDescriptor.value(n[s])}`).join(", ")} }`;
          }, pair: (n) => {
            let { key: t, value: s } = n;
            return e.apiDescriptor.value({ [t]: s });
          } };
        } }), JD = ee({ "node_modules/vnopts/lib/descriptors/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(Pa(), e);
        } }), Ir = ee({ "scripts/build/shims/chalk.cjs"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ __name((s) => s, "t");
          t.grey = t, t.red = t, t.bold = t, t.yellow = t, t.blue = t, t.default = t, n.exports = t;
        } }), Ia = ee({ "node_modules/vnopts/lib/handlers/deprecated/common.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Ir();
          e.commonDeprecatedHandler = (t, s, a) => {
            let { descriptor: r } = a, u = [`${n.default.yellow(typeof t == "string" ? r.key(t) : r.pair(t))} is deprecated`];
            return s && u.push(`we now treat it as ${n.default.blue(typeof s == "string" ? r.key(s) : r.pair(s))}`), u.join("; ") + ".";
          };
        } }), zD = ee({ "node_modules/vnopts/lib/handlers/deprecated/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(Ia(), e);
        } }), XD = ee({ "node_modules/vnopts/lib/handlers/invalid/common.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Ir();
          e.commonInvalidHandler = (t, s, a) => [`Invalid ${n.default.red(a.descriptor.key(t))} value.`, `Expected ${n.default.blue(a.schemas[t].expected(a))},`, `but received ${n.default.red(a.descriptor.value(s))}.`].join(" ");
        } }), ka = ee({ "node_modules/vnopts/lib/handlers/invalid/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(XD(), e);
        } }), KD = ee({ "node_modules/vnopts/node_modules/leven/index.js"(e, n) {
          "use strict";
          re();
          var t = [], s = [];
          n.exports = function(a, r) {
            if (a === r)
              return 0;
            var u = a;
            a.length > r.length && (a = r, r = u);
            var i = a.length, l = r.length;
            if (i === 0)
              return l;
            if (l === 0)
              return i;
            for (; i > 0 && a.charCodeAt(~-i) === r.charCodeAt(~-l); )
              i--, l--;
            if (i === 0)
              return l;
            for (var c = 0; c < i && a.charCodeAt(c) === r.charCodeAt(c); )
              c++;
            if (i -= c, l -= c, i === 0)
              return l;
            for (var y, h, g, p, D = 0, v = 0; D < i; )
              s[c + D] = a.charCodeAt(c + D), t[D] = ++D;
            for (; v < l; )
              for (y = r.charCodeAt(c + v), g = v++, h = v, D = 0; D < i; D++)
                p = y === s[c + D] ? g : g + 1, g = t[D], h = t[D] = g > h ? p > h ? h + 1 : p : p > g ? g + 1 : p;
            return h;
          };
        } }), La = ee({ "node_modules/vnopts/lib/handlers/unknown/leven.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Ir(), t = KD();
          e.levenUnknownHandler = (s, a, r) => {
            let { descriptor: u, logger: i, schemas: l } = r, c = [`Ignored unknown option ${n.default.yellow(u.pair({ key: s, value: a }))}.`], y = Object.keys(l).sort().find((h) => t(s, h) < 3);
            y && c.push(`Did you mean ${n.default.blue(u.key(y))}?`), i.warn(c.join(" "));
          };
        } }), YD = ee({ "node_modules/vnopts/lib/handlers/unknown/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(La(), e);
        } }), QD = ee({ "node_modules/vnopts/lib/handlers/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(zD(), e), n.__exportStar(ka(), e), n.__exportStar(YD(), e);
        } }), Et = ee({ "node_modules/vnopts/lib/schema.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = ["default", "expected", "validate", "deprecated", "forward", "redirect", "overlap", "preprocess", "postprocess"];
          function t(r, u) {
            let i = new r(u), l = Object.create(i);
            for (let c of n)
              c in u && (l[c] = a(u[c], i, s.prototype[c].length));
            return l;
          }
          __name(t, "t");
          e.createSchema = t;
          var s = /* @__PURE__ */ __name(class {
            constructor(r) {
              this.name = r.name;
            }
            static create(r) {
              return t(this, r);
            }
            default(r) {
            }
            expected(r) {
              return "nothing";
            }
            validate(r, u) {
              return false;
            }
            deprecated(r, u) {
              return false;
            }
            forward(r, u) {
            }
            redirect(r, u) {
            }
            overlap(r, u, i) {
              return r;
            }
            preprocess(r, u) {
              return r;
            }
            postprocess(r, u) {
              return r;
            }
          }, "s");
          e.Schema = s;
          function a(r, u, i) {
            return typeof r == "function" ? function() {
              for (var l = arguments.length, c = new Array(l), y = 0; y < l; y++)
                c[y] = arguments[y];
              return r(...c.slice(0, i - 1), u, ...c.slice(i - 1));
            } : () => r;
          }
          __name(a, "a");
        } }), ZD = ee({ "node_modules/vnopts/lib/schemas/alias.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = /* @__PURE__ */ __name(class extends n.Schema {
            constructor(s) {
              super(s), this._sourceName = s.sourceName;
            }
            expected(s) {
              return s.schemas[this._sourceName].expected(s);
            }
            validate(s, a) {
              return a.schemas[this._sourceName].validate(s, a);
            }
            redirect(s, a) {
              return this._sourceName;
            }
          }, "t");
          e.AliasSchema = t;
        } }), em = ee({ "node_modules/vnopts/lib/schemas/any.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = /* @__PURE__ */ __name(class extends n.Schema {
            expected() {
              return "anything";
            }
            validate() {
              return true;
            }
          }, "t");
          e.AnySchema = t;
        } }), tm = ee({ "node_modules/vnopts/lib/schemas/array.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt)), t = Et(), s = /* @__PURE__ */ __name(class extends t.Schema {
            constructor(r) {
              var { valueSchema: u, name: i = u.name } = r, l = n.__rest(r, ["valueSchema", "name"]);
              super(Object.assign({}, l, { name: i })), this._valueSchema = u;
            }
            expected(r) {
              return `an array of ${this._valueSchema.expected(r)}`;
            }
            validate(r, u) {
              if (!Array.isArray(r))
                return false;
              let i = [];
              for (let l of r) {
                let c = u.normalizeValidateResult(this._valueSchema.validate(l, u), l);
                c !== true && i.push(c.value);
              }
              return i.length === 0 ? true : { value: i };
            }
            deprecated(r, u) {
              let i = [];
              for (let l of r) {
                let c = u.normalizeDeprecatedResult(this._valueSchema.deprecated(l, u), l);
                c !== false && i.push(...c.map((y) => {
                  let { value: h } = y;
                  return { value: [h] };
                }));
              }
              return i;
            }
            forward(r, u) {
              let i = [];
              for (let l of r) {
                let c = u.normalizeForwardResult(this._valueSchema.forward(l, u), l);
                i.push(...c.map(a));
              }
              return i;
            }
            redirect(r, u) {
              let i = [], l = [];
              for (let c of r) {
                let y = u.normalizeRedirectResult(this._valueSchema.redirect(c, u), c);
                "remain" in y && i.push(y.remain), l.push(...y.redirect.map(a));
              }
              return i.length === 0 ? { redirect: l } : { redirect: l, remain: i };
            }
            overlap(r, u) {
              return r.concat(u);
            }
          }, "s");
          e.ArraySchema = s;
          function a(r) {
            let { from: u, to: i } = r;
            return { from: [u], to: i };
          }
          __name(a, "a");
        } }), rm = ee({ "node_modules/vnopts/lib/schemas/boolean.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = /* @__PURE__ */ __name(class extends n.Schema {
            expected() {
              return "true or false";
            }
            validate(s) {
              return typeof s == "boolean";
            }
          }, "t");
          e.BooleanSchema = t;
        } }), Gn = ee({ "node_modules/vnopts/lib/utils.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          function n(p, D) {
            let v = /* @__PURE__ */ Object.create(null);
            for (let w of p) {
              let T = w[D];
              if (v[T])
                throw new Error(`Duplicate ${D} ${JSON.stringify(T)}`);
              v[T] = w;
            }
            return v;
          }
          __name(n, "n");
          e.recordFromArray = n;
          function t(p, D) {
            let v = /* @__PURE__ */ new Map();
            for (let w of p) {
              let T = w[D];
              if (v.has(T))
                throw new Error(`Duplicate ${D} ${JSON.stringify(T)}`);
              v.set(T, w);
            }
            return v;
          }
          __name(t, "t");
          e.mapFromArray = t;
          function s() {
            let p = /* @__PURE__ */ Object.create(null);
            return (D) => {
              let v = JSON.stringify(D);
              return p[v] ? true : (p[v] = true, false);
            };
          }
          __name(s, "s");
          e.createAutoChecklist = s;
          function a(p, D) {
            let v = [], w = [];
            for (let T of p)
              D(T) ? v.push(T) : w.push(T);
            return [v, w];
          }
          __name(a, "a");
          e.partition = a;
          function r(p) {
            return p === Math.floor(p);
          }
          __name(r, "r");
          e.isInt = r;
          function u(p, D) {
            if (p === D)
              return 0;
            let v = typeof p, w = typeof D, T = ["undefined", "object", "boolean", "number", "string"];
            return v !== w ? T.indexOf(v) - T.indexOf(w) : v !== "string" ? Number(p) - Number(D) : p.localeCompare(D);
          }
          __name(u, "u");
          e.comparePrimitive = u;
          function i(p) {
            return p === void 0 ? {} : p;
          }
          __name(i, "i");
          e.normalizeDefaultResult = i;
          function l(p, D) {
            return p === true ? true : p === false ? { value: D } : p;
          }
          __name(l, "l");
          e.normalizeValidateResult = l;
          function c(p, D) {
            let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            return p === false ? false : p === true ? v ? true : [{ value: D }] : "value" in p ? [p] : p.length === 0 ? false : p;
          }
          __name(c, "c");
          e.normalizeDeprecatedResult = c;
          function y(p, D) {
            return typeof p == "string" || "key" in p ? { from: D, to: p } : "from" in p ? { from: p.from, to: p.to } : { from: D, to: p.to };
          }
          __name(y, "y");
          e.normalizeTransferResult = y;
          function h(p, D) {
            return p === void 0 ? [] : Array.isArray(p) ? p.map((v) => y(v, D)) : [y(p, D)];
          }
          __name(h, "h");
          e.normalizeForwardResult = h;
          function g(p, D) {
            let v = h(typeof p == "object" && "redirect" in p ? p.redirect : p, D);
            return v.length === 0 ? { remain: D, redirect: v } : typeof p == "object" && "remain" in p ? { remain: p.remain, redirect: v } : { redirect: v };
          }
          __name(g, "g");
          e.normalizeRedirectResult = g;
        } }), nm = ee({ "node_modules/vnopts/lib/schemas/choice.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = Gn(), s = /* @__PURE__ */ __name(class extends n.Schema {
            constructor(a) {
              super(a), this._choices = t.mapFromArray(a.choices.map((r) => r && typeof r == "object" ? r : { value: r }), "value");
            }
            expected(a) {
              let { descriptor: r } = a, u = Array.from(this._choices.keys()).map((c) => this._choices.get(c)).filter((c) => !c.deprecated).map((c) => c.value).sort(t.comparePrimitive).map(r.value), i = u.slice(0, -2), l = u.slice(-2);
              return i.concat(l.join(" or ")).join(", ");
            }
            validate(a) {
              return this._choices.has(a);
            }
            deprecated(a) {
              let r = this._choices.get(a);
              return r && r.deprecated ? { value: a } : false;
            }
            forward(a) {
              let r = this._choices.get(a);
              return r ? r.forward : void 0;
            }
            redirect(a) {
              let r = this._choices.get(a);
              return r ? r.redirect : void 0;
            }
          }, "s");
          e.ChoiceSchema = s;
        } }), ja = ee({ "node_modules/vnopts/lib/schemas/number.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = /* @__PURE__ */ __name(class extends n.Schema {
            expected() {
              return "a number";
            }
            validate(s, a) {
              return typeof s == "number";
            }
          }, "t");
          e.NumberSchema = t;
        } }), um = ee({ "node_modules/vnopts/lib/schemas/integer.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Gn(), t = ja(), s = /* @__PURE__ */ __name(class extends t.NumberSchema {
            expected() {
              return "an integer";
            }
            validate(a, r) {
              return r.normalizeValidateResult(super.validate(a, r), a) === true && n.isInt(a);
            }
          }, "s");
          e.IntegerSchema = s;
        } }), sm = ee({ "node_modules/vnopts/lib/schemas/string.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Et(), t = /* @__PURE__ */ __name(class extends n.Schema {
            expected() {
              return "a string";
            }
            validate(s) {
              return typeof s == "string";
            }
          }, "t");
          e.StringSchema = t;
        } }), im = ee({ "node_modules/vnopts/lib/schemas/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(ZD(), e), n.__exportStar(em(), e), n.__exportStar(tm(), e), n.__exportStar(rm(), e), n.__exportStar(nm(), e), n.__exportStar(um(), e), n.__exportStar(ja(), e), n.__exportStar(sm(), e);
        } }), am = ee({ "node_modules/vnopts/lib/defaults.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Pa(), t = Ia(), s = ka(), a = La();
          e.defaultDescriptor = n.apiDescriptor, e.defaultUnknownHandler = a.levenUnknownHandler, e.defaultInvalidHandler = s.commonInvalidHandler, e.defaultDeprecatedHandler = t.commonDeprecatedHandler;
        } }), om = ee({ "node_modules/vnopts/lib/normalize.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = am(), t = Gn();
          e.normalize = (a, r, u) => new s(r, u).normalize(a);
          var s = /* @__PURE__ */ __name(class {
            constructor(a, r) {
              let { logger: u = console, descriptor: i = n.defaultDescriptor, unknown: l = n.defaultUnknownHandler, invalid: c = n.defaultInvalidHandler, deprecated: y = n.defaultDeprecatedHandler } = r || {};
              this._utils = { descriptor: i, logger: u || { warn: () => {
              } }, schemas: t.recordFromArray(a, "name"), normalizeDefaultResult: t.normalizeDefaultResult, normalizeDeprecatedResult: t.normalizeDeprecatedResult, normalizeForwardResult: t.normalizeForwardResult, normalizeRedirectResult: t.normalizeRedirectResult, normalizeValidateResult: t.normalizeValidateResult }, this._unknownHandler = l, this._invalidHandler = c, this._deprecatedHandler = y, this.cleanHistory();
            }
            cleanHistory() {
              this._hasDeprecationWarned = t.createAutoChecklist();
            }
            normalize(a) {
              let r = {}, u = [a], i = /* @__PURE__ */ __name(() => {
                for (; u.length !== 0; ) {
                  let l = u.shift(), c = this._applyNormalization(l, r);
                  u.push(...c);
                }
              }, "i");
              i();
              for (let l of Object.keys(this._utils.schemas)) {
                let c = this._utils.schemas[l];
                if (!(l in r)) {
                  let y = t.normalizeDefaultResult(c.default(this._utils));
                  "value" in y && u.push({ [l]: y.value });
                }
              }
              i();
              for (let l of Object.keys(this._utils.schemas)) {
                let c = this._utils.schemas[l];
                l in r && (r[l] = c.postprocess(r[l], this._utils));
              }
              return r;
            }
            _applyNormalization(a, r) {
              let u = [], [i, l] = t.partition(Object.keys(a), (c) => c in this._utils.schemas);
              for (let c of i) {
                let y = this._utils.schemas[c], h = y.preprocess(a[c], this._utils), g = t.normalizeValidateResult(y.validate(h, this._utils), h);
                if (g !== true) {
                  let { value: T } = g, F = this._invalidHandler(c, T, this._utils);
                  throw typeof F == "string" ? new Error(F) : F;
                }
                let p = /* @__PURE__ */ __name((T) => {
                  let { from: F, to: A } = T;
                  u.push(typeof A == "string" ? { [A]: F } : { [A.key]: A.value });
                }, "p"), D = /* @__PURE__ */ __name((T) => {
                  let { value: F, redirectTo: A } = T, B = t.normalizeDeprecatedResult(y.deprecated(F, this._utils), h, true);
                  if (B !== false)
                    if (B === true)
                      this._hasDeprecationWarned(c) || this._utils.logger.warn(this._deprecatedHandler(c, A, this._utils));
                    else
                      for (let { value: I } of B) {
                        let P = { key: c, value: I };
                        if (!this._hasDeprecationWarned(P)) {
                          let R = typeof A == "string" ? { key: A, value: I } : A;
                          this._utils.logger.warn(this._deprecatedHandler(P, R, this._utils));
                        }
                      }
                }, "D");
                t.normalizeForwardResult(y.forward(h, this._utils), h).forEach(p);
                let w = t.normalizeRedirectResult(y.redirect(h, this._utils), h);
                if (w.redirect.forEach(p), "remain" in w) {
                  let T = w.remain;
                  r[c] = c in r ? y.overlap(r[c], T, this._utils) : T, D({ value: T });
                }
                for (let { from: T, to: F } of w.redirect)
                  D({ value: T, redirectTo: F });
              }
              for (let c of l) {
                let y = a[c], h = this._unknownHandler(c, y, this._utils);
                if (h)
                  for (let g of Object.keys(h)) {
                    let p = { [g]: h[g] };
                    g in this._utils.schemas ? u.push(p) : Object.assign(r, p);
                  }
              }
              return u;
            }
          }, "s");
          e.Normalizer = s;
        } }), lm = ee({ "node_modules/vnopts/lib/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = (Ct(), ft(yt));
          n.__exportStar(JD(), e), n.__exportStar(QD(), e), n.__exportStar(im(), e), n.__exportStar(om(), e), n.__exportStar(Et(), e);
        } }), cm = ee({ "src/main/options-normalizer.js"(e, n) {
          "use strict";
          re();
          var t = lm(), s = lt(), a = { key: (g) => g.length === 1 ? `-${g}` : `--${g}`, value: (g) => t.apiDescriptor.value(g), pair: (g) => {
            let { key: p, value: D } = g;
            return D === false ? `--no-${p}` : D === true ? a.key(p) : D === "" ? `${a.key(p)} without an argument` : `${a.key(p)}=${D}`;
          } }, r = /* @__PURE__ */ __name((g) => {
            let { colorsModule: p, levenshteinDistance: D } = g;
            return class extends t.ChoiceSchema {
              constructor(w) {
                let { name: T, flags: F } = w;
                super({ name: T, choices: F }), this._flags = [...F].sort();
              }
              preprocess(w, T) {
                if (typeof w == "string" && w.length > 0 && !this._flags.includes(w)) {
                  let F = this._flags.find((A) => D(A, w) < 3);
                  if (F)
                    return T.logger.warn([`Unknown flag ${p.yellow(T.descriptor.value(w))},`, `did you mean ${p.blue(T.descriptor.value(F))}?`].join(" ")), F;
                }
                return w;
              }
              expected() {
                return "a flag";
              }
            };
          }, "r"), u;
          function i(g, p) {
            let { logger: D = false, isCLI: v = false, passThrough: w = false, colorsModule: T = null, levenshteinDistance: F = null } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, A = w ? Array.isArray(w) ? (x, m) => w.includes(x) ? { [x]: m } : void 0 : (x, m) => ({ [x]: m }) : (x, m, E) => {
              let o = E.schemas, { _: d } = o, C = Ln(o, Jf);
              return t.levenUnknownHandler(x, m, Object.assign(Object.assign({}, E), {}, { schemas: C }));
            }, B = v ? a : t.apiDescriptor, I = l(p, { isCLI: v, colorsModule: T, levenshteinDistance: F }), P = new t.Normalizer(I, { logger: D, unknown: A, descriptor: B }), R = D !== false;
            R && u && (P._hasDeprecationWarned = u);
            let f = P.normalize(g);
            return R && (u = P._hasDeprecationWarned), v && f["plugin-search"] === false && (f["plugin-search-dir"] = false), f;
          }
          __name(i, "i");
          function l(g, p) {
            let { isCLI: D, colorsModule: v, levenshteinDistance: w } = p, T = [];
            D && T.push(t.AnySchema.create({ name: "_" }));
            for (let F of g)
              T.push(c(F, { isCLI: D, optionInfos: g, colorsModule: v, levenshteinDistance: w })), F.alias && D && T.push(t.AliasSchema.create({ name: F.alias, sourceName: F.name }));
            return T;
          }
          __name(l, "l");
          function c(g, p) {
            let { isCLI: D, optionInfos: v, colorsModule: w, levenshteinDistance: T } = p, { name: F } = g;
            if (F === "plugin-search-dir" || F === "pluginSearchDirs")
              return t.AnySchema.create({ name: F, preprocess(P) {
                return P === false || (P = Array.isArray(P) ? P : [P]), P;
              }, validate(P) {
                return P === false ? true : P.every((R) => typeof R == "string");
              }, expected() {
                return "false or paths to plugin search dir";
              } });
            let A = { name: F }, B, I = {};
            switch (g.type) {
              case "int":
                B = t.IntegerSchema, D && (A.preprocess = Number);
                break;
              case "string":
                B = t.StringSchema;
                break;
              case "choice":
                B = t.ChoiceSchema, A.choices = g.choices.map((P) => typeof P == "object" && P.redirect ? Object.assign(Object.assign({}, P), {}, { redirect: { to: { key: g.name, value: P.redirect } } }) : P);
                break;
              case "boolean":
                B = t.BooleanSchema;
                break;
              case "flag":
                B = r({ colorsModule: w, levenshteinDistance: T }), A.flags = v.flatMap((P) => [P.alias, P.description && P.name, P.oppositeDescription && `no-${P.name}`].filter(Boolean));
                break;
              case "path":
                B = t.StringSchema;
                break;
              default:
                throw new Error(`Unexpected type ${g.type}`);
            }
            if (g.exception ? A.validate = (P, R, f) => g.exception(P) || R.validate(P, f) : A.validate = (P, R, f) => P === void 0 || R.validate(P, f), g.redirect && (I.redirect = (P) => P ? { to: { key: g.redirect.option, value: g.redirect.value } } : void 0), g.deprecated && (I.deprecated = true), D && !g.array) {
              let P = A.preprocess || ((R) => R);
              A.preprocess = (R, f, x) => f.preprocess(P(Array.isArray(R) ? s(R) : R), x);
            }
            return g.array ? t.ArraySchema.create(Object.assign(Object.assign(Object.assign({}, D ? { preprocess: (P) => Array.isArray(P) ? P : [P] } : {}), I), {}, { valueSchema: B.create(A) })) : B.create(Object.assign(Object.assign({}, A), I));
          }
          __name(c, "c");
          function y(g, p, D) {
            return i(g, p, D);
          }
          __name(y, "y");
          function h(g, p, D) {
            return i(g, p, Object.assign({ isCLI: true }, D));
          }
          __name(h, "h");
          n.exports = { normalizeApiOptions: y, normalizeCliOptions: h };
        } }), it = ee({ "src/language-js/loc.js"(e, n) {
          "use strict";
          re();
          var t = $n();
          function s(l) {
            var c, y;
            let h = l.range ? l.range[0] : l.start, g = (c = (y = l.declaration) === null || y === void 0 ? void 0 : y.decorators) !== null && c !== void 0 ? c : l.decorators;
            return t(g) ? Math.min(s(g[0]), h) : h;
          }
          __name(s, "s");
          function a(l) {
            return l.range ? l.range[1] : l.end;
          }
          __name(a, "a");
          function r(l, c) {
            let y = s(l);
            return Number.isInteger(y) && y === s(c);
          }
          __name(r, "r");
          function u(l, c) {
            let y = a(l);
            return Number.isInteger(y) && y === a(c);
          }
          __name(u, "u");
          function i(l, c) {
            return r(l, c) && u(l, c);
          }
          __name(i, "i");
          n.exports = { locStart: s, locEnd: a, hasSameLocStart: r, hasSameLoc: i };
        } }), pm = ee({ "src/main/load-parser.js"(e, n) {
          re(), n.exports = () => {
          };
        } }), fm = ee({ "scripts/build/shims/babel-highlight.cjs"(e, n) {
          "use strict";
          re();
          var t = Ir(), s = { shouldHighlight: () => false, getChalk: () => t };
          n.exports = s;
        } }), Dm = ee({ "node_modules/@babel/code-frame/lib/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.codeFrameColumns = u, e.default = i;
          var n = fm(), t = false;
          function s(l) {
            return { gutter: l.grey, marker: l.red.bold, message: l.red.bold };
          }
          __name(s, "s");
          var a = /\r\n|[\n\r\u2028\u2029]/;
          function r(l, c, y) {
            let h = Object.assign({ column: 0, line: -1 }, l.start), g = Object.assign({}, h, l.end), { linesAbove: p = 2, linesBelow: D = 3 } = y || {}, v = h.line, w = h.column, T = g.line, F = g.column, A = Math.max(v - (p + 1), 0), B = Math.min(c.length, T + D);
            v === -1 && (A = 0), T === -1 && (B = c.length);
            let I = T - v, P = {};
            if (I)
              for (let R = 0; R <= I; R++) {
                let f = R + v;
                if (!w)
                  P[f] = true;
                else if (R === 0) {
                  let x = c[f - 1].length;
                  P[f] = [w, x - w + 1];
                } else if (R === I)
                  P[f] = [0, F];
                else {
                  let x = c[f - R].length;
                  P[f] = [0, x];
                }
              }
            else
              w === F ? w ? P[v] = [w, 0] : P[v] = true : P[v] = [w, F - w];
            return { start: A, end: B, markerLines: P };
          }
          __name(r, "r");
          function u(l, c) {
            let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, h = (y.highlightCode || y.forceColor) && (0, n.shouldHighlight)(y), g = (0, n.getChalk)(y), p = s(g), D = /* @__PURE__ */ __name((R, f) => h ? R(f) : f, "D"), v = l.split(a), { start: w, end: T, markerLines: F } = r(c, v, y), A = c.start && typeof c.start.column == "number", B = String(T).length, P = (h ? (0, n.default)(l, y) : l).split(a, T).slice(w, T).map((R, f) => {
              let x = w + 1 + f, E = ` ${` ${x}`.slice(-B)} |`, o = F[x], d = !F[x + 1];
              if (o) {
                let C = "";
                if (Array.isArray(o)) {
                  let _ = R.slice(0, Math.max(o[0] - 1, 0)).replace(/[^\t]/g, " "), b = o[1] || 1;
                  C = [`
 `, D(p.gutter, E.replace(/\d/g, " ")), " ", _, D(p.marker, "^").repeat(b)].join(""), d && y.message && (C += " " + D(p.message, y.message));
                }
                return [D(p.marker, ">"), D(p.gutter, E), R.length > 0 ? ` ${R}` : "", C].join("");
              } else
                return ` ${D(p.gutter, E)}${R.length > 0 ? ` ${R}` : ""}`;
            }).join(`
`);
            return y.message && !A && (P = `${" ".repeat(B + 1)}${y.message}
${P}`), h ? g.reset(P) : P;
          }
          __name(u, "u");
          function i(l, c, y) {
            let h = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
            if (!t) {
              t = true;
              let p = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
              if (Nt.emitWarning)
                Nt.emitWarning(p, "DeprecationWarning");
              else {
                let D = new Error(p);
                D.name = "DeprecationWarning", console.warn(new Error(p));
              }
            }
            return y = Math.max(y, 0), u(l, { start: { column: y, line: c } }, h);
          }
          __name(i, "i");
        } }), Un = ee({ "src/main/parser.js"(e, n) {
          "use strict";
          re();
          var { ConfigError: t } = Kt(), s = it(), a = pm(), { locStart: r, locEnd: u } = s, i = Object.getOwnPropertyNames, l = Object.getOwnPropertyDescriptor;
          function c(g) {
            let p = {};
            for (let D of g.plugins)
              if (!!D.parsers)
                for (let v of i(D.parsers))
                  Object.defineProperty(p, v, l(D.parsers, v));
            return p;
          }
          __name(c, "c");
          function y(g) {
            let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : c(g);
            if (typeof g.parser == "function")
              return { parse: g.parser, astFormat: "estree", locStart: r, locEnd: u };
            if (typeof g.parser == "string") {
              if (Object.prototype.hasOwnProperty.call(p, g.parser))
                return p[g.parser];
              throw new t(`Couldn't resolve parser "${g.parser}". Parsers must be explicitly added to the standalone bundle.`);
            }
          }
          __name(y, "y");
          function h(g, p) {
            let D = c(p), v = Object.defineProperties({}, Object.fromEntries(Object.keys(D).map((T) => [T, { enumerable: true, get() {
              return D[T].parse;
            } }]))), w = y(p, D);
            try {
              return w.preprocess && (g = w.preprocess(g, p)), { text: g, ast: w.parse(g, v, p) };
            } catch (T) {
              let { loc: F } = T;
              if (F) {
                let { codeFrameColumns: A } = Dm();
                throw T.codeFrame = A(g, F, { highlightCode: true }), T.message += `
` + T.codeFrame, T;
              }
              throw T;
            }
          }
          __name(h, "h");
          n.exports = { parse: h, resolveParser: y };
        } }), Oa = ee({ "src/main/options.js"(e, n) {
          "use strict";
          re();
          var t = TD(), { UndefinedParserError: s } = Kt(), { getSupportInfo: a } = Rn(), r = cm(), { resolveParser: u } = Un(), i = { astFormat: "estree", printer: {}, originalText: void 0, locStart: null, locEnd: null };
          function l(h) {
            let g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, p = Object.assign({}, h), D = a({ plugins: h.plugins, showUnreleased: true, showDeprecated: true }).options, v = Object.assign(Object.assign({}, i), Object.fromEntries(D.filter((B) => B.default !== void 0).map((B) => [B.name, B.default])));
            if (!p.parser) {
              if (!p.filepath)
                (g.logger || console).warn("No parser and no filepath given, using 'babel' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred."), p.parser = "babel";
              else if (p.parser = y(p.filepath, p.plugins), !p.parser)
                throw new s(`No parser could be inferred for file: ${p.filepath}`);
            }
            let w = u(r.normalizeApiOptions(p, [D.find((B) => B.name === "parser")], { passThrough: true, logger: false }));
            p.astFormat = w.astFormat, p.locEnd = w.locEnd, p.locStart = w.locStart;
            let T = c(p);
            p.printer = T.printers[p.astFormat];
            let F = Object.fromEntries(D.filter((B) => B.pluginDefaults && B.pluginDefaults[T.name] !== void 0).map((B) => [B.name, B.pluginDefaults[T.name]])), A = Object.assign(Object.assign({}, v), F);
            for (let [B, I] of Object.entries(A))
              (p[B] === null || p[B] === void 0) && (p[B] = I);
            return p.parser === "json" && (p.trailingComma = "none"), r.normalizeApiOptions(p, D, Object.assign({ passThrough: Object.keys(i) }, g));
          }
          __name(l, "l");
          function c(h) {
            let { astFormat: g } = h;
            if (!g)
              throw new Error("getPlugin() requires astFormat to be set");
            let p = h.plugins.find((D) => D.printers && D.printers[g]);
            if (!p)
              throw new Error(`Couldn't find plugin for AST format "${g}"`);
            return p;
          }
          __name(c, "c");
          function y(h, g) {
            let p = t.basename(h).toLowerCase(), v = a({ plugins: g }).languages.filter((w) => w.since !== null).find((w) => w.extensions && w.extensions.some((T) => p.endsWith(T)) || w.filenames && w.filenames.some((T) => T.toLowerCase() === p));
            return v && v.parsers[0];
          }
          __name(y, "y");
          n.exports = { normalize: l, hiddenDefaults: i, inferParser: y };
        } }), mm = ee({ "src/main/massage-ast.js"(e, n) {
          "use strict";
          re();
          function t(s, a, r) {
            if (Array.isArray(s))
              return s.map((c) => t(c, a, r)).filter(Boolean);
            if (!s || typeof s != "object")
              return s;
            let u = a.printer.massageAstNode, i;
            u && u.ignoredProperties ? i = u.ignoredProperties : i = /* @__PURE__ */ new Set();
            let l = {};
            for (let [c, y] of Object.entries(s))
              !i.has(c) && typeof y != "function" && (l[c] = t(y, a, s));
            if (u) {
              let c = u(s, l, r);
              if (c === null)
                return;
              if (c)
                return c;
            }
            return l;
          }
          __name(t, "t");
          n.exports = t;
        } }), Yt = ee({ "scripts/build/shims/assert.cjs"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ __name(() => {
          }, "t");
          t.ok = t, t.strictEqual = t, n.exports = t;
        } }), et = ee({ "src/main/comments.js"(e, n) {
          "use strict";
          re();
          var t = Yt(), { builders: { line: s, hardline: a, breakParent: r, indent: u, lineSuffix: i, join: l, cursor: c } } = qe(), { hasNewline: y, skipNewline: h, skipSpaces: g, isPreviousLineEmpty: p, addLeadingComment: D, addDanglingComment: v, addTrailingComment: w } = Ge(), T = /* @__PURE__ */ new WeakMap();
          function F(k, $, M) {
            if (!k)
              return;
            let { printer: q, locStart: J, locEnd: L } = $;
            if (M) {
              if (q.canAttachComment && q.canAttachComment(k)) {
                let V;
                for (V = M.length - 1; V >= 0 && !(J(M[V]) <= J(k) && L(M[V]) <= L(k)); --V)
                  ;
                M.splice(V + 1, 0, k);
                return;
              }
            } else if (T.has(k))
              return T.get(k);
            let Y = q.getCommentChildNodes && q.getCommentChildNodes(k, $) || typeof k == "object" && Object.entries(k).filter((V) => {
              let [O] = V;
              return O !== "enclosingNode" && O !== "precedingNode" && O !== "followingNode" && O !== "tokens" && O !== "comments" && O !== "parent";
            }).map((V) => {
              let [, O] = V;
              return O;
            });
            if (!!Y) {
              M || (M = [], T.set(k, M));
              for (let V of Y)
                F(V, $, M);
              return M;
            }
          }
          __name(F, "F");
          function A(k, $, M, q) {
            let { locStart: J, locEnd: L } = M, Y = J($), V = L($), O = F(k, M), K, se, Q = 0, le = O.length;
            for (; Q < le; ) {
              let W = Q + le >> 1, X = O[W], oe = J(X), ae = L(X);
              if (oe <= Y && V <= ae)
                return A(X, $, M, X);
              if (ae <= Y) {
                K = X, Q = W + 1;
                continue;
              }
              if (V <= oe) {
                se = X, le = W;
                continue;
              }
              throw new Error("Comment location overlaps with node location");
            }
            if (q && q.type === "TemplateLiteral") {
              let { quasis: W } = q, X = E(W, $, M);
              K && E(W, K, M) !== X && (K = null), se && E(W, se, M) !== X && (se = null);
            }
            return { enclosingNode: q, precedingNode: K, followingNode: se };
          }
          __name(A, "A");
          var B = /* @__PURE__ */ __name(() => false, "B");
          function I(k, $, M, q) {
            if (!Array.isArray(k))
              return;
            let J = [], { locStart: L, locEnd: Y, printer: { handleComments: V = {} } } = q, { avoidAstMutation: O, ownLine: K = B, endOfLine: se = B, remaining: Q = B } = V, le = k.map((W, X) => Object.assign(Object.assign({}, A($, W, q)), {}, { comment: W, text: M, options: q, ast: $, isLastComment: k.length - 1 === X }));
            for (let [W, X] of le.entries()) {
              let { comment: oe, precedingNode: ae, enclosingNode: Ae, followingNode: z, text: H, options: Z, ast: ne, isLastComment: fe } = X;
              if (Z.parser === "json" || Z.parser === "json5" || Z.parser === "__js_expression" || Z.parser === "__vue_expression" || Z.parser === "__vue_ts_expression") {
                if (L(oe) - L(ne) <= 0) {
                  D(ne, oe);
                  continue;
                }
                if (Y(oe) - Y(ne) >= 0) {
                  w(ne, oe);
                  continue;
                }
              }
              let ge;
              if (O ? ge = [X] : (oe.enclosingNode = Ae, oe.precedingNode = ae, oe.followingNode = z, ge = [oe, H, Z, ne, fe]), R(H, Z, le, W))
                oe.placement = "ownLine", K(...ge) || (z ? D(z, oe) : ae ? w(ae, oe) : v(Ae || ne, oe));
              else if (f(H, Z, le, W))
                oe.placement = "endOfLine", se(...ge) || (ae ? w(ae, oe) : z ? D(z, oe) : v(Ae || ne, oe));
              else if (oe.placement = "remaining", !Q(...ge))
                if (ae && z) {
                  let Ce = J.length;
                  Ce > 0 && J[Ce - 1].followingNode !== z && x(J, H, Z), J.push(X);
                } else
                  ae ? w(ae, oe) : z ? D(z, oe) : v(Ae || ne, oe);
            }
            if (x(J, M, q), !O)
              for (let W of k)
                delete W.precedingNode, delete W.enclosingNode, delete W.followingNode;
          }
          __name(I, "I");
          var P = /* @__PURE__ */ __name((k) => !/[\S\n\u2028\u2029]/.test(k), "P");
          function R(k, $, M, q) {
            let { comment: J, precedingNode: L } = M[q], { locStart: Y, locEnd: V } = $, O = Y(J);
            if (L)
              for (let K = q - 1; K >= 0; K--) {
                let { comment: se, precedingNode: Q } = M[K];
                if (Q !== L || !P(k.slice(V(se), O)))
                  break;
                O = Y(se);
              }
            return y(k, O, { backwards: true });
          }
          __name(R, "R");
          function f(k, $, M, q) {
            let { comment: J, followingNode: L } = M[q], { locStart: Y, locEnd: V } = $, O = V(J);
            if (L)
              for (let K = q + 1; K < M.length; K++) {
                let { comment: se, followingNode: Q } = M[K];
                if (Q !== L || !P(k.slice(O, Y(se))))
                  break;
                O = V(se);
              }
            return y(k, O);
          }
          __name(f, "f");
          function x(k, $, M) {
            let q = k.length;
            if (q === 0)
              return;
            let { precedingNode: J, followingNode: L, enclosingNode: Y } = k[0], V = M.printer.getGapRegex && M.printer.getGapRegex(Y) || /^[\s(]*$/, O = M.locStart(L), K;
            for (K = q; K > 0; --K) {
              let { comment: se, precedingNode: Q, followingNode: le } = k[K - 1];
              t.strictEqual(Q, J), t.strictEqual(le, L);
              let W = $.slice(M.locEnd(se), O);
              if (V.test(W))
                O = M.locStart(se);
              else
                break;
            }
            for (let [se, { comment: Q }] of k.entries())
              se < K ? w(J, Q) : D(L, Q);
            for (let se of [J, L])
              se.comments && se.comments.length > 1 && se.comments.sort((Q, le) => M.locStart(Q) - M.locStart(le));
            k.length = 0;
          }
          __name(x, "x");
          function m(k, $) {
            let M = k.getValue();
            return M.printed = true, $.printer.printComment(k, $);
          }
          __name(m, "m");
          function E(k, $, M) {
            let q = M.locStart($) - 1;
            for (let J = 1; J < k.length; ++J)
              if (q < M.locStart(k[J]))
                return J - 1;
            return 0;
          }
          __name(E, "E");
          function o(k, $) {
            let M = k.getValue(), q = [m(k, $)], { printer: J, originalText: L, locStart: Y, locEnd: V } = $;
            if (J.isBlockComment && J.isBlockComment(M)) {
              let se = y(L, V(M)) ? y(L, Y(M), { backwards: true }) ? a : s : " ";
              q.push(se);
            } else
              q.push(a);
            let K = h(L, g(L, V(M)));
            return K !== false && y(L, K) && q.push(a), q;
          }
          __name(o, "o");
          function d(k, $) {
            let M = k.getValue(), q = m(k, $), { printer: J, originalText: L, locStart: Y } = $, V = J.isBlockComment && J.isBlockComment(M);
            if (y(L, Y(M), { backwards: true })) {
              let K = p(L, M, Y);
              return i([a, K ? a : "", q]);
            }
            let O = [" ", q];
            return V || (O = [i(O), r]), O;
          }
          __name(d, "d");
          function C(k, $, M, q) {
            let J = [], L = k.getValue();
            return !L || !L.comments || (k.each(() => {
              let Y = k.getValue();
              !Y.leading && !Y.trailing && (!q || q(Y)) && J.push(m(k, $));
            }, "comments"), J.length === 0) ? "" : M ? l(a, J) : u([a, l(a, J)]);
          }
          __name(C, "C");
          function _(k, $, M) {
            let q = k.getValue();
            if (!q)
              return {};
            let J = q.comments || [];
            M && (J = J.filter((O) => !M.has(O)));
            let L = q === $.cursorNode;
            if (J.length === 0) {
              let O = L ? c : "";
              return { leading: O, trailing: O };
            }
            let Y = [], V = [];
            return k.each(() => {
              let O = k.getValue();
              if (M && M.has(O))
                return;
              let { leading: K, trailing: se } = O;
              K ? Y.push(o(k, $)) : se && V.push(d(k, $));
            }, "comments"), L && (Y.unshift(c), V.push(c)), { leading: Y, trailing: V };
          }
          __name(_, "_");
          function b(k, $, M, q) {
            let { leading: J, trailing: L } = _(k, M, q);
            return !J && !L ? $ : [J, $, L];
          }
          __name(b, "b");
          function N(k) {
            if (!!k)
              for (let $ of k) {
                if (!$.printed)
                  throw new Error('Comment "' + $.value.trim() + '" was not printed. Please report this error!');
                delete $.printed;
              }
          }
          __name(N, "N");
          n.exports = { attach: I, printComments: b, printCommentsSeparately: _, printDanglingComments: C, getSortedChildNodes: F, ensureAllCommentsPrinted: N };
        } }), dm = ee({ "src/common/ast-path.js"(e, n) {
          "use strict";
          re();
          var t = lt();
          function s(u, i) {
            let l = a(u.stack, i);
            return l === -1 ? null : u.stack[l];
          }
          __name(s, "s");
          function a(u, i) {
            for (let l = u.length - 1; l >= 0; l -= 2) {
              let c = u[l];
              if (c && !Array.isArray(c) && --i < 0)
                return l;
            }
            return -1;
          }
          __name(a, "a");
          var r = /* @__PURE__ */ __name(class {
            constructor(u) {
              this.stack = [u];
            }
            getName() {
              let { stack: u } = this, { length: i } = u;
              return i > 1 ? u[i - 2] : null;
            }
            getValue() {
              return t(this.stack);
            }
            getNode() {
              let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              return s(this, u);
            }
            getParentNode() {
              let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              return s(this, u + 1);
            }
            call(u) {
              let { stack: i } = this, { length: l } = i, c = t(i);
              for (var y = arguments.length, h = new Array(y > 1 ? y - 1 : 0), g = 1; g < y; g++)
                h[g - 1] = arguments[g];
              for (let D of h)
                c = c[D], i.push(D, c);
              let p = u(this);
              return i.length = l, p;
            }
            callParent(u) {
              let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = a(this.stack, i + 1), c = this.stack.splice(l + 1), y = u(this);
              return this.stack.push(...c), y;
            }
            each(u) {
              let { stack: i } = this, { length: l } = i, c = t(i);
              for (var y = arguments.length, h = new Array(y > 1 ? y - 1 : 0), g = 1; g < y; g++)
                h[g - 1] = arguments[g];
              for (let p of h)
                c = c[p], i.push(p, c);
              for (let p = 0; p < c.length; ++p)
                i.push(p, c[p]), u(this, p, c), i.length -= 2;
              i.length = l;
            }
            map(u) {
              let i = [];
              for (var l = arguments.length, c = new Array(l > 1 ? l - 1 : 0), y = 1; y < l; y++)
                c[y - 1] = arguments[y];
              return this.each((h, g, p) => {
                i[g] = u(h, g, p);
              }, ...c), i;
            }
            try(u) {
              let { stack: i } = this, l = [...i];
              try {
                return u();
              } finally {
                i.length = 0, i.push(...l);
              }
            }
            match() {
              let u = this.stack.length - 1, i = null, l = this.stack[u--];
              for (var c = arguments.length, y = new Array(c), h = 0; h < c; h++)
                y[h] = arguments[h];
              for (let g of y) {
                if (l === void 0)
                  return false;
                let p = null;
                if (typeof i == "number" && (p = i, i = this.stack[u--], l = this.stack[u--]), g && !g(l, i, p))
                  return false;
                i = this.stack[u--], l = this.stack[u--];
              }
              return true;
            }
            findAncestor(u) {
              let i = this.stack.length - 1, l = null, c = this.stack[i--];
              for (; c; ) {
                let y = null;
                if (typeof l == "number" && (y = l, l = this.stack[i--], c = this.stack[i--]), l !== null && u(c, l, y))
                  return c;
                l = this.stack[i--], c = this.stack[i--];
              }
            }
          }, "r");
          n.exports = r;
        } }), gm = ee({ "src/main/multiparser.js"(e, n) {
          "use strict";
          re();
          var { utils: { stripTrailingHardline: t } } = qe(), { normalize: s } = Oa(), a = et();
          function r(i, l, c, y) {
            if (c.printer.embed && c.embeddedLanguageFormatting === "auto")
              return c.printer.embed(i, l, (h, g, p) => u(h, g, c, y, p), c);
          }
          __name(r, "r");
          function u(i, l, c, y) {
            let { stripTrailingHardline: h = false } = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, g = s(Object.assign(Object.assign(Object.assign({}, c), l), {}, { parentParser: c.parser, originalText: i }), { passThrough: true }), p = Un().parse(i, g), { ast: D } = p;
            i = p.text;
            let v = D.comments;
            delete D.comments, a.attach(v, D, i, g), g[Symbol.for("comments")] = v || [], g[Symbol.for("tokens")] = D.tokens || [];
            let w = y(D, g);
            return a.ensureAllCommentsPrinted(v), h ? typeof w == "string" ? w.replace(/(?:\r?\n)*$/, "") : t(w) : w;
          }
          __name(u, "u");
          n.exports = { printSubtree: r };
        } }), ym = ee({ "src/main/ast-to-doc.js"(e, n) {
          "use strict";
          re();
          var t = dm(), { builders: { hardline: s, addAlignmentToDoc: a }, utils: { propagateBreaks: r } } = qe(), { printComments: u } = et(), i = gm();
          function l(h, g) {
            let p = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, { printer: D } = g;
            D.preprocess && (h = D.preprocess(h, g));
            let v = /* @__PURE__ */ new Map(), w = new t(h), T = F();
            return p > 0 && (T = a([s, T], p, g.tabWidth)), r(T), T;
            function F(B, I) {
              return B === void 0 || B === w ? A(I) : Array.isArray(B) ? w.call(() => A(I), ...B) : w.call(() => A(I), B);
            }
            __name(F, "F");
            function A(B) {
              let I = w.getValue(), P = I && typeof I == "object" && B === void 0;
              if (P && v.has(I))
                return v.get(I);
              let R = y(w, g, F, B);
              return P && v.set(I, R), R;
            }
            __name(A, "A");
          }
          __name(l, "l");
          function c(h, g) {
            let { originalText: p, [Symbol.for("comments")]: D, locStart: v, locEnd: w } = g, T = v(h), F = w(h), A = /* @__PURE__ */ new Set();
            for (let B of D)
              v(B) >= T && w(B) <= F && (B.printed = true, A.add(B));
            return { doc: p.slice(T, F), printedComments: A };
          }
          __name(c, "c");
          function y(h, g, p, D) {
            let v = h.getValue(), { printer: w } = g, T, F;
            if (w.hasPrettierIgnore && w.hasPrettierIgnore(h))
              ({ doc: T, printedComments: F } = c(v, g));
            else {
              if (v)
                try {
                  T = i.printSubtree(h, p, g, l);
                } catch (A) {
                  if (globalThis.PRETTIER_DEBUG)
                    throw A;
                }
              T || (T = w.print(h, g, p, D));
            }
            return (!w.willPrintOwnComments || !w.willPrintOwnComments(h, g)) && (T = u(h, T, g, F)), T;
          }
          __name(y, "y");
          n.exports = l;
        } }), hm = ee({ "src/main/range-util.js"(e, n) {
          "use strict";
          re();
          var t = Yt(), s = et(), a = /* @__PURE__ */ __name((D) => {
            let { parser: v } = D;
            return v === "json" || v === "json5" || v === "json-stringify";
          }, "a");
          function r(D, v) {
            let w = [D.node, ...D.parentNodes], T = /* @__PURE__ */ new Set([v.node, ...v.parentNodes]);
            return w.find((F) => y.has(F.type) && T.has(F));
          }
          __name(r, "r");
          function u(D) {
            let v = D.length - 1;
            for (; ; ) {
              let w = D[v];
              if (w && (w.type === "Program" || w.type === "File"))
                v--;
              else
                break;
            }
            return D.slice(0, v + 1);
          }
          __name(u, "u");
          function i(D, v, w) {
            let { locStart: T, locEnd: F } = w, A = D.node, B = v.node;
            if (A === B)
              return { startNode: A, endNode: B };
            let I = T(D.node);
            for (let R of u(v.parentNodes))
              if (T(R) >= I)
                B = R;
              else
                break;
            let P = F(v.node);
            for (let R of u(D.parentNodes)) {
              if (F(R) <= P)
                A = R;
              else
                break;
              if (A === B)
                break;
            }
            return { startNode: A, endNode: B };
          }
          __name(i, "i");
          function l(D, v, w, T) {
            let F = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : [], A = arguments.length > 5 ? arguments[5] : void 0, { locStart: B, locEnd: I } = w, P = B(D), R = I(D);
            if (!(v > R || v < P || A === "rangeEnd" && v === P || A === "rangeStart" && v === R)) {
              for (let f of s.getSortedChildNodes(D, w)) {
                let x = l(f, v, w, T, [D, ...F], A);
                if (x)
                  return x;
              }
              if (!T || T(D, F[0]))
                return { node: D, parentNodes: F };
            }
          }
          __name(l, "l");
          function c(D, v) {
            return v !== "DeclareExportDeclaration" && D !== "TypeParameterDeclaration" && (D === "Directive" || D === "TypeAlias" || D === "TSExportAssignment" || D.startsWith("Declare") || D.startsWith("TSDeclare") || D.endsWith("Statement") || D.endsWith("Declaration"));
          }
          __name(c, "c");
          var y = /* @__PURE__ */ new Set(["ObjectExpression", "ArrayExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "UnaryExpression", "TemplateLiteral"]), h = /* @__PURE__ */ new Set(["OperationDefinition", "FragmentDefinition", "VariableDefinition", "TypeExtensionDefinition", "ObjectTypeDefinition", "FieldDefinition", "DirectiveDefinition", "EnumTypeDefinition", "EnumValueDefinition", "InputValueDefinition", "InputObjectTypeDefinition", "SchemaDefinition", "OperationTypeDefinition", "InterfaceTypeDefinition", "UnionTypeDefinition", "ScalarTypeDefinition"]);
          function g(D, v, w) {
            if (!v)
              return false;
            switch (D.parser) {
              case "flow":
              case "babel":
              case "babel-flow":
              case "babel-ts":
              case "typescript":
              case "acorn":
              case "espree":
              case "meriyah":
              case "__babel_estree":
                return c(v.type, w && w.type);
              case "json":
              case "json5":
              case "json-stringify":
                return y.has(v.type);
              case "graphql":
                return h.has(v.kind);
              case "vue":
                return v.tag !== "root";
            }
            return false;
          }
          __name(g, "g");
          function p(D, v, w) {
            let { rangeStart: T, rangeEnd: F, locStart: A, locEnd: B } = v;
            t.ok(F > T);
            let I = D.slice(T, F).search(/\S/), P = I === -1;
            if (!P)
              for (T += I; F > T && !/\S/.test(D[F - 1]); --F)
                ;
            let R = l(w, T, v, (E, o) => g(v, E, o), [], "rangeStart"), f = P ? R : l(w, F, v, (E) => g(v, E), [], "rangeEnd");
            if (!R || !f)
              return { rangeStart: 0, rangeEnd: 0 };
            let x, m;
            if (a(v)) {
              let E = r(R, f);
              x = E, m = E;
            } else
              ({ startNode: x, endNode: m } = i(R, f, v));
            return { rangeStart: Math.min(A(x), A(m)), rangeEnd: Math.max(B(x), B(m)) };
          }
          __name(p, "p");
          n.exports = { calculateRange: p, findNodeAtOffset: l };
        } }), vm = ee({ "src/main/core.js"(e, n) {
          "use strict";
          re();
          var { diffArrays: t } = rD(), { printer: { printDocToString: s }, debug: { printDocToDebug: a } } = qe(), { getAlignmentSize: r } = Ge(), { guessEndOfLine: u, convertEndOfLineToChars: i, countEndOfLineChars: l, normalizeEndOfLine: c } = qn(), y = Oa().normalize, h = mm(), g = et(), p = Un(), D = ym(), v = hm(), w = "\uFEFF", T = Symbol("cursor");
          function F(m, E, o) {
            let d = E.comments;
            return d && (delete E.comments, g.attach(d, E, m, o)), o[Symbol.for("comments")] = d || [], o[Symbol.for("tokens")] = E.tokens || [], o.originalText = m, d;
          }
          __name(F, "F");
          function A(m, E) {
            let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
            if (!m || m.trim().length === 0)
              return { formatted: "", cursorOffset: -1, comments: [] };
            let { ast: d, text: C } = p.parse(m, E);
            if (E.cursorOffset >= 0) {
              let k = v.findNodeAtOffset(d, E.cursorOffset, E);
              k && k.node && (E.cursorNode = k.node);
            }
            let _ = F(C, d, E), b = D(d, E, o), N = s(b, E);
            if (g.ensureAllCommentsPrinted(_), o > 0) {
              let k = N.formatted.trim();
              N.cursorNodeStart !== void 0 && (N.cursorNodeStart -= N.formatted.indexOf(k)), N.formatted = k + i(E.endOfLine);
            }
            if (E.cursorOffset >= 0) {
              let k, $, M, q, J;
              if (E.cursorNode && N.cursorNodeText ? (k = E.locStart(E.cursorNode), $ = C.slice(k, E.locEnd(E.cursorNode)), M = E.cursorOffset - k, q = N.cursorNodeStart, J = N.cursorNodeText) : (k = 0, $ = C, M = E.cursorOffset, q = 0, J = N.formatted), $ === J)
                return { formatted: N.formatted, cursorOffset: q + M, comments: _ };
              let L = [...$];
              L.splice(M, 0, T);
              let Y = [...J], V = t(L, Y), O = q;
              for (let K of V)
                if (K.removed) {
                  if (K.value.includes(T))
                    break;
                } else
                  O += K.count;
              return { formatted: N.formatted, cursorOffset: O, comments: _ };
            }
            return { formatted: N.formatted, cursorOffset: -1, comments: _ };
          }
          __name(A, "A");
          function B(m, E) {
            let { ast: o, text: d } = p.parse(m, E), { rangeStart: C, rangeEnd: _ } = v.calculateRange(d, E, o), b = d.slice(C, _), N = Math.min(C, d.lastIndexOf(`
`, C) + 1), k = d.slice(N, C).match(/^\s*/)[0], $ = r(k, E.tabWidth), M = A(b, Object.assign(Object.assign({}, E), {}, { rangeStart: 0, rangeEnd: Number.POSITIVE_INFINITY, cursorOffset: E.cursorOffset > C && E.cursorOffset <= _ ? E.cursorOffset - C : -1, endOfLine: "lf" }), $), q = M.formatted.trimEnd(), { cursorOffset: J } = E;
            J > _ ? J += q.length - b.length : M.cursorOffset >= 0 && (J = M.cursorOffset + C);
            let L = d.slice(0, C) + q + d.slice(_);
            if (E.endOfLine !== "lf") {
              let Y = i(E.endOfLine);
              J >= 0 && Y === `\r
` && (J += l(L.slice(0, J), `
`)), L = L.replace(/\n/g, Y);
            }
            return { formatted: L, cursorOffset: J, comments: M.comments };
          }
          __name(B, "B");
          function I(m, E, o) {
            return typeof E != "number" || Number.isNaN(E) || E < 0 || E > m.length ? o : E;
          }
          __name(I, "I");
          function P(m, E) {
            let { cursorOffset: o, rangeStart: d, rangeEnd: C } = E;
            return o = I(m, o, -1), d = I(m, d, 0), C = I(m, C, m.length), Object.assign(Object.assign({}, E), {}, { cursorOffset: o, rangeStart: d, rangeEnd: C });
          }
          __name(P, "P");
          function R(m, E) {
            let { cursorOffset: o, rangeStart: d, rangeEnd: C, endOfLine: _ } = P(m, E), b = m.charAt(0) === w;
            if (b && (m = m.slice(1), o--, d--, C--), _ === "auto" && (_ = u(m)), m.includes("\r")) {
              let N = /* @__PURE__ */ __name((k) => l(m.slice(0, Math.max(k, 0)), `\r
`), "N");
              o -= N(o), d -= N(d), C -= N(C), m = c(m);
            }
            return { hasBOM: b, text: m, options: P(m, Object.assign(Object.assign({}, E), {}, { cursorOffset: o, rangeStart: d, rangeEnd: C, endOfLine: _ })) };
          }
          __name(R, "R");
          function f(m, E) {
            let o = p.resolveParser(E);
            return !o.hasPragma || o.hasPragma(m);
          }
          __name(f, "f");
          function x(m, E) {
            let { hasBOM: o, text: d, options: C } = R(m, y(E));
            if (C.rangeStart >= C.rangeEnd && d !== "" || C.requirePragma && !f(d, C))
              return { formatted: m, cursorOffset: E.cursorOffset, comments: [] };
            let _;
            return C.rangeStart > 0 || C.rangeEnd < d.length ? _ = B(d, C) : (!C.requirePragma && C.insertPragma && C.printer.insertPragma && !f(d, C) && (d = C.printer.insertPragma(d)), _ = A(d, C)), o && (_.formatted = w + _.formatted, _.cursorOffset >= 0 && _.cursorOffset++), _;
          }
          __name(x, "x");
          n.exports = { formatWithCursor: x, parse(m, E, o) {
            let { text: d, options: C } = R(m, y(E)), _ = p.parse(d, C);
            return o && (_.ast = h(_.ast, C)), _;
          }, formatAST(m, E) {
            E = y(E);
            let o = D(m, E);
            return s(o, E);
          }, formatDoc(m, E) {
            return x(a(m), Object.assign(Object.assign({}, E), {}, { parser: "__js_expression" })).formatted;
          }, printToDoc(m, E) {
            E = y(E);
            let { ast: o, text: d } = p.parse(m, E);
            return F(d, o, E), D(o, E);
          }, printDocToString(m, E) {
            return s(m, y(E));
          } };
        } }), Cm = ee({ "src/common/util-shared.js"(e, n) {
          "use strict";
          re();
          var { getMaxContinuousCount: t, getStringWidth: s, getAlignmentSize: a, getIndentSize: r, skip: u, skipWhitespace: i, skipSpaces: l, skipNewline: c, skipToLineEnd: y, skipEverythingButNewLine: h, skipInlineComment: g, skipTrailingComment: p, hasNewline: D, hasNewlineInRange: v, hasSpaces: w, isNextLineEmpty: T, isNextLineEmptyAfterIndex: F, isPreviousLineEmpty: A, getNextNonSpaceNonCommentCharacterIndex: B, makeString: I, addLeadingComment: P, addDanglingComment: R, addTrailingComment: f } = Ge();
          n.exports = { getMaxContinuousCount: t, getStringWidth: s, getAlignmentSize: a, getIndentSize: r, skip: u, skipWhitespace: i, skipSpaces: l, skipNewline: c, skipToLineEnd: y, skipEverythingButNewLine: h, skipInlineComment: g, skipTrailingComment: p, hasNewline: D, hasNewlineInRange: v, hasSpaces: w, isNextLineEmpty: T, isNextLineEmptyAfterIndex: F, isPreviousLineEmpty: A, getNextNonSpaceNonCommentCharacterIndex: B, makeString: I, addLeadingComment: P, addDanglingComment: R, addTrailingComment: f };
        } }), wt = ee({ "src/utils/create-language.js"(e, n) {
          "use strict";
          re(), n.exports = function(t, s) {
            let { languageId: a } = t, r = Ln(t, zf);
            return Object.assign(Object.assign({ linguistLanguageId: a }, r), s(t));
          };
        } }), Em = ee({ "node_modules/esutils/lib/ast.js"(e, n) {
          re(), function() {
            "use strict";
            function t(l) {
              if (l == null)
                return false;
              switch (l.type) {
                case "ArrayExpression":
                case "AssignmentExpression":
                case "BinaryExpression":
                case "CallExpression":
                case "ConditionalExpression":
                case "FunctionExpression":
                case "Identifier":
                case "Literal":
                case "LogicalExpression":
                case "MemberExpression":
                case "NewExpression":
                case "ObjectExpression":
                case "SequenceExpression":
                case "ThisExpression":
                case "UnaryExpression":
                case "UpdateExpression":
                  return true;
              }
              return false;
            }
            __name(t, "t");
            function s(l) {
              if (l == null)
                return false;
              switch (l.type) {
                case "DoWhileStatement":
                case "ForInStatement":
                case "ForStatement":
                case "WhileStatement":
                  return true;
              }
              return false;
            }
            __name(s, "s");
            function a(l) {
              if (l == null)
                return false;
              switch (l.type) {
                case "BlockStatement":
                case "BreakStatement":
                case "ContinueStatement":
                case "DebuggerStatement":
                case "DoWhileStatement":
                case "EmptyStatement":
                case "ExpressionStatement":
                case "ForInStatement":
                case "ForStatement":
                case "IfStatement":
                case "LabeledStatement":
                case "ReturnStatement":
                case "SwitchStatement":
                case "ThrowStatement":
                case "TryStatement":
                case "VariableDeclaration":
                case "WhileStatement":
                case "WithStatement":
                  return true;
              }
              return false;
            }
            __name(a, "a");
            function r(l) {
              return a(l) || l != null && l.type === "FunctionDeclaration";
            }
            __name(r, "r");
            function u(l) {
              switch (l.type) {
                case "IfStatement":
                  return l.alternate != null ? l.alternate : l.consequent;
                case "LabeledStatement":
                case "ForStatement":
                case "ForInStatement":
                case "WhileStatement":
                case "WithStatement":
                  return l.body;
              }
              return null;
            }
            __name(u, "u");
            function i(l) {
              var c;
              if (l.type !== "IfStatement" || l.alternate == null)
                return false;
              c = l.consequent;
              do {
                if (c.type === "IfStatement" && c.alternate == null)
                  return true;
                c = u(c);
              } while (c);
              return false;
            }
            __name(i, "i");
            n.exports = { isExpression: t, isStatement: a, isIterationStatement: s, isSourceElement: r, isProblematicIfStatement: i, trailingStatement: u };
          }();
        } }), qa = ee({ "node_modules/esutils/lib/code.js"(e, n) {
          re(), function() {
            "use strict";
            var t, s, a, r, u, i;
            s = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/, NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/ }, t = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
            function l(F) {
              return 48 <= F && F <= 57;
            }
            __name(l, "l");
            function c(F) {
              return 48 <= F && F <= 57 || 97 <= F && F <= 102 || 65 <= F && F <= 70;
            }
            __name(c, "c");
            function y(F) {
              return F >= 48 && F <= 55;
            }
            __name(y, "y");
            a = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];
            function h(F) {
              return F === 32 || F === 9 || F === 11 || F === 12 || F === 160 || F >= 5760 && a.indexOf(F) >= 0;
            }
            __name(h, "h");
            function g(F) {
              return F === 10 || F === 13 || F === 8232 || F === 8233;
            }
            __name(g, "g");
            function p(F) {
              if (F <= 65535)
                return String.fromCharCode(F);
              var A = String.fromCharCode(Math.floor((F - 65536) / 1024) + 55296), B = String.fromCharCode((F - 65536) % 1024 + 56320);
              return A + B;
            }
            __name(p, "p");
            for (r = new Array(128), i = 0; i < 128; ++i)
              r[i] = i >= 97 && i <= 122 || i >= 65 && i <= 90 || i === 36 || i === 95;
            for (u = new Array(128), i = 0; i < 128; ++i)
              u[i] = i >= 97 && i <= 122 || i >= 65 && i <= 90 || i >= 48 && i <= 57 || i === 36 || i === 95;
            function D(F) {
              return F < 128 ? r[F] : s.NonAsciiIdentifierStart.test(p(F));
            }
            __name(D, "D");
            function v(F) {
              return F < 128 ? u[F] : s.NonAsciiIdentifierPart.test(p(F));
            }
            __name(v, "v");
            function w(F) {
              return F < 128 ? r[F] : t.NonAsciiIdentifierStart.test(p(F));
            }
            __name(w, "w");
            function T(F) {
              return F < 128 ? u[F] : t.NonAsciiIdentifierPart.test(p(F));
            }
            __name(T, "T");
            n.exports = { isDecimalDigit: l, isHexDigit: c, isOctalDigit: y, isWhiteSpace: h, isLineTerminator: g, isIdentifierStartES5: D, isIdentifierPartES5: v, isIdentifierStartES6: w, isIdentifierPartES6: T };
          }();
        } }), Fm = ee({ "node_modules/esutils/lib/keyword.js"(e, n) {
          re(), function() {
            "use strict";
            var t = qa();
            function s(D) {
              switch (D) {
                case "implements":
                case "interface":
                case "package":
                case "private":
                case "protected":
                case "public":
                case "static":
                case "let":
                  return true;
                default:
                  return false;
              }
            }
            __name(s, "s");
            function a(D, v) {
              return !v && D === "yield" ? false : r(D, v);
            }
            __name(a, "a");
            function r(D, v) {
              if (v && s(D))
                return true;
              switch (D.length) {
                case 2:
                  return D === "if" || D === "in" || D === "do";
                case 3:
                  return D === "var" || D === "for" || D === "new" || D === "try";
                case 4:
                  return D === "this" || D === "else" || D === "case" || D === "void" || D === "with" || D === "enum";
                case 5:
                  return D === "while" || D === "break" || D === "catch" || D === "throw" || D === "const" || D === "yield" || D === "class" || D === "super";
                case 6:
                  return D === "return" || D === "typeof" || D === "delete" || D === "switch" || D === "export" || D === "import";
                case 7:
                  return D === "default" || D === "finally" || D === "extends";
                case 8:
                  return D === "function" || D === "continue" || D === "debugger";
                case 10:
                  return D === "instanceof";
                default:
                  return false;
              }
            }
            __name(r, "r");
            function u(D, v) {
              return D === "null" || D === "true" || D === "false" || a(D, v);
            }
            __name(u, "u");
            function i(D, v) {
              return D === "null" || D === "true" || D === "false" || r(D, v);
            }
            __name(i, "i");
            function l(D) {
              return D === "eval" || D === "arguments";
            }
            __name(l, "l");
            function c(D) {
              var v, w, T;
              if (D.length === 0 || (T = D.charCodeAt(0), !t.isIdentifierStartES5(T)))
                return false;
              for (v = 1, w = D.length; v < w; ++v)
                if (T = D.charCodeAt(v), !t.isIdentifierPartES5(T))
                  return false;
              return true;
            }
            __name(c, "c");
            function y(D, v) {
              return (D - 55296) * 1024 + (v - 56320) + 65536;
            }
            __name(y, "y");
            function h(D) {
              var v, w, T, F, A;
              if (D.length === 0)
                return false;
              for (A = t.isIdentifierStartES6, v = 0, w = D.length; v < w; ++v) {
                if (T = D.charCodeAt(v), 55296 <= T && T <= 56319) {
                  if (++v, v >= w || (F = D.charCodeAt(v), !(56320 <= F && F <= 57343)))
                    return false;
                  T = y(T, F);
                }
                if (!A(T))
                  return false;
                A = t.isIdentifierPartES6;
              }
              return true;
            }
            __name(h, "h");
            function g(D, v) {
              return c(D) && !u(D, v);
            }
            __name(g, "g");
            function p(D, v) {
              return h(D) && !i(D, v);
            }
            __name(p, "p");
            n.exports = { isKeywordES5: a, isKeywordES6: r, isReservedWordES5: u, isReservedWordES6: i, isRestrictedWord: l, isIdentifierNameES5: c, isIdentifierNameES6: h, isIdentifierES5: g, isIdentifierES6: p };
          }();
        } }), Am = ee({ "node_modules/esutils/lib/utils.js"(e) {
          re(), function() {
            "use strict";
            e.ast = Em(), e.code = qa(), e.keyword = Fm();
          }();
        } }), Lt = ee({ "src/language-js/utils/is-block-comment.js"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ new Set(["Block", "CommentBlock", "MultiLine"]), s = /* @__PURE__ */ __name((a) => t.has(a == null ? void 0 : a.type), "s");
          n.exports = s;
        } }), Sm = ee({ "src/language-js/utils/is-node-matches.js"(e, n) {
          "use strict";
          re();
          function t(a, r) {
            let u = r.split(".");
            for (let i = u.length - 1; i >= 0; i--) {
              let l = u[i];
              if (i === 0)
                return a.type === "Identifier" && a.name === l;
              if (a.type !== "MemberExpression" || a.optional || a.computed || a.property.type !== "Identifier" || a.property.name !== l)
                return false;
              a = a.object;
            }
          }
          __name(t, "t");
          function s(a, r) {
            return r.some((u) => t(a, u));
          }
          __name(s, "s");
          n.exports = s;
        } }), Ke = ee({ "src/language-js/utils/index.js"(e, n) {
          "use strict";
          re();
          var t = Am().keyword.isIdentifierNameES5, { getLast: s, hasNewline: a, skipWhitespace: r, isNonEmptyArray: u, isNextLineEmptyAfterIndex: i, getStringWidth: l } = Ge(), { locStart: c, locEnd: y, hasSameLocStart: h } = it(), g = Lt(), p = Sm(), D = "(?:(?=.)\\s)", v = new RegExp(`^${D}*:`), w = new RegExp(`^${D}*::`);
          function T(j) {
            var me, Ie;
            return ((me = j.extra) === null || me === void 0 ? void 0 : me.parenthesized) && g((Ie = j.trailingComments) === null || Ie === void 0 ? void 0 : Ie[0]) && v.test(j.trailingComments[0].value);
          }
          __name(T, "T");
          function F(j) {
            let me = j == null ? void 0 : j[0];
            return g(me) && w.test(me.value);
          }
          __name(F, "F");
          function A(j, me) {
            if (!j || typeof j != "object")
              return false;
            if (Array.isArray(j))
              return j.some((je) => A(je, me));
            let Ie = me(j);
            return typeof Ie == "boolean" ? Ie : Object.values(j).some((je) => A(je, me));
          }
          __name(A, "A");
          function B(j) {
            return j.type === "AssignmentExpression" || j.type === "BinaryExpression" || j.type === "LogicalExpression" || j.type === "NGPipeExpression" || j.type === "ConditionalExpression" || oe(j) || ae(j) || j.type === "SequenceExpression" || j.type === "TaggedTemplateExpression" || j.type === "BindExpression" || j.type === "UpdateExpression" && !j.prefix || nt(j) || j.type === "TSNonNullExpression";
          }
          __name(B, "B");
          function I(j) {
            var me, Ie, je, Ye, ut, ze;
            return j.expressions ? j.expressions[0] : (me = (Ie = (je = (Ye = (ut = (ze = j.left) !== null && ze !== void 0 ? ze : j.test) !== null && ut !== void 0 ? ut : j.callee) !== null && Ye !== void 0 ? Ye : j.object) !== null && je !== void 0 ? je : j.tag) !== null && Ie !== void 0 ? Ie : j.argument) !== null && me !== void 0 ? me : j.expression;
          }
          __name(I, "I");
          function P(j, me) {
            if (me.expressions)
              return ["expressions", 0];
            if (me.left)
              return ["left"];
            if (me.test)
              return ["test"];
            if (me.object)
              return ["object"];
            if (me.callee)
              return ["callee"];
            if (me.tag)
              return ["tag"];
            if (me.argument)
              return ["argument"];
            if (me.expression)
              return ["expression"];
            throw new Error("Unexpected node has no left side.");
          }
          __name(P, "P");
          function R(j) {
            return j = new Set(j), (me) => j.has(me == null ? void 0 : me.type);
          }
          __name(R, "R");
          var f = R(["Line", "CommentLine", "SingleLine", "HashbangComment", "HTMLOpen", "HTMLClose"]), x = R(["ExportDefaultDeclaration", "ExportDefaultSpecifier", "DeclareExportDeclaration", "ExportNamedDeclaration", "ExportAllDeclaration"]);
          function m(j) {
            let me = j.getParentNode();
            return j.getName() === "declaration" && x(me) ? me : null;
          }
          __name(m, "m");
          var E = R(["BooleanLiteral", "DirectiveLiteral", "Literal", "NullLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "RegExpLiteral", "StringLiteral", "TemplateLiteral", "TSTypeLiteral", "JSXText"]);
          function o(j) {
            return j.type === "NumericLiteral" || j.type === "Literal" && typeof j.value == "number";
          }
          __name(o, "o");
          function d(j) {
            return j.type === "UnaryExpression" && (j.operator === "+" || j.operator === "-") && o(j.argument);
          }
          __name(d, "d");
          function C(j) {
            return j.type === "StringLiteral" || j.type === "Literal" && typeof j.value == "string";
          }
          __name(C, "C");
          var _ = R(["ObjectTypeAnnotation", "TSTypeLiteral", "TSMappedType"]), b = R(["FunctionExpression", "ArrowFunctionExpression"]);
          function N(j) {
            return j.type === "FunctionExpression" || j.type === "ArrowFunctionExpression" && j.body.type === "BlockStatement";
          }
          __name(N, "N");
          function k(j) {
            return oe(j) && j.callee.type === "Identifier" && ["async", "inject", "fakeAsync", "waitForAsync"].includes(j.callee.name);
          }
          __name(k, "k");
          var $ = R(["JSXElement", "JSXFragment"]);
          function M(j, me) {
            if (j.parentParser !== "markdown" && j.parentParser !== "mdx")
              return false;
            let Ie = me.getNode();
            if (!Ie.expression || !$(Ie.expression))
              return false;
            let je = me.getParentNode();
            return je.type === "Program" && je.body.length === 1;
          }
          __name(M, "M");
          function q(j) {
            return j.kind === "get" || j.kind === "set";
          }
          __name(q, "q");
          function J(j) {
            return q(j) || h(j, j.value);
          }
          __name(J, "J");
          function L(j) {
            return (j.type === "ObjectTypeProperty" || j.type === "ObjectTypeInternalSlot") && j.value.type === "FunctionTypeAnnotation" && !j.static && !J(j);
          }
          __name(L, "L");
          function Y(j) {
            return (j.type === "TypeAnnotation" || j.type === "TSTypeAnnotation") && j.typeAnnotation.type === "FunctionTypeAnnotation" && !j.static && !h(j, j.typeAnnotation);
          }
          __name(Y, "Y");
          var V = R(["BinaryExpression", "LogicalExpression", "NGPipeExpression"]);
          function O(j) {
            return ae(j) || j.type === "BindExpression" && Boolean(j.object);
          }
          __name(O, "O");
          var K = /* @__PURE__ */ new Set(["AnyTypeAnnotation", "TSAnyKeyword", "NullLiteralTypeAnnotation", "TSNullKeyword", "ThisTypeAnnotation", "TSThisType", "NumberTypeAnnotation", "TSNumberKeyword", "VoidTypeAnnotation", "TSVoidKeyword", "BooleanTypeAnnotation", "TSBooleanKeyword", "BigIntTypeAnnotation", "TSBigIntKeyword", "SymbolTypeAnnotation", "TSSymbolKeyword", "StringTypeAnnotation", "TSStringKeyword", "BooleanLiteralTypeAnnotation", "StringLiteralTypeAnnotation", "BigIntLiteralTypeAnnotation", "NumberLiteralTypeAnnotation", "TSLiteralType", "TSTemplateLiteralType", "EmptyTypeAnnotation", "MixedTypeAnnotation", "TSNeverKeyword", "TSObjectKeyword", "TSUndefinedKeyword", "TSUnknownKeyword"]);
          function se(j) {
            return j ? !!((j.type === "GenericTypeAnnotation" || j.type === "TSTypeReference") && !j.typeParameters || K.has(j.type)) : false;
          }
          __name(se, "se");
          function Q(j) {
            let me = /^(?:before|after)(?:Each|All)$/;
            return j.callee.type === "Identifier" && me.test(j.callee.name) && j.arguments.length === 1;
          }
          __name(Q, "Q");
          var le = ["it", "it.only", "it.skip", "describe", "describe.only", "describe.skip", "test", "test.only", "test.skip", "test.step", "test.describe", "test.describe.only", "test.describe.parallel", "test.describe.parallel.only", "test.describe.serial", "test.describe.serial.only", "skip", "xit", "xdescribe", "xtest", "fit", "fdescribe", "ftest"];
          function W(j) {
            return p(j, le);
          }
          __name(W, "W");
          function X(j, me) {
            if (j.type !== "CallExpression")
              return false;
            if (j.arguments.length === 1) {
              if (k(j) && me && X(me))
                return b(j.arguments[0]);
              if (Q(j))
                return k(j.arguments[0]);
            } else if ((j.arguments.length === 2 || j.arguments.length === 3) && (j.arguments[0].type === "TemplateLiteral" || C(j.arguments[0])) && W(j.callee))
              return j.arguments[2] && !o(j.arguments[2]) ? false : (j.arguments.length === 2 ? b(j.arguments[1]) : N(j.arguments[1]) && Fe(j.arguments[1]).length <= 1) || k(j.arguments[1]);
            return false;
          }
          __name(X, "X");
          var oe = R(["CallExpression", "OptionalCallExpression"]), ae = R(["MemberExpression", "OptionalMemberExpression"]);
          function Ae(j) {
            let me = "expressions";
            j.type === "TSTemplateLiteralType" && (me = "types");
            let Ie = j[me];
            return Ie.length === 0 ? false : Ie.every((je) => {
              if (ue(je))
                return false;
              if (je.type === "Identifier" || je.type === "ThisExpression")
                return true;
              if (ae(je)) {
                let Ye = je;
                for (; ae(Ye); )
                  if (Ye.property.type !== "Identifier" && Ye.property.type !== "Literal" && Ye.property.type !== "StringLiteral" && Ye.property.type !== "NumericLiteral" || (Ye = Ye.object, ue(Ye)))
                    return false;
                return Ye.type === "Identifier" || Ye.type === "ThisExpression";
              }
              return false;
            });
          }
          __name(Ae, "Ae");
          function z(j, me) {
            return j === "+" || j === "-" ? j + me : me;
          }
          __name(z, "z");
          function H(j, me) {
            let Ie = c(me), je = r(j, y(me));
            return je !== false && j.slice(Ie, Ie + 2) === "/*" && j.slice(je, je + 2) === "*/";
          }
          __name(H, "H");
          function Z(j, me) {
            return $(me) ? Ve(me) : ue(me, ke.Leading, (Ie) => a(j, y(Ie)));
          }
          __name(Z, "Z");
          function ne(j, me) {
            return me.parser !== "json" && C(j.key) && ce(j.key).slice(1, -1) === j.key.value && (t(j.key.value) && !(me.parser === "babel-ts" && j.type === "ClassProperty" || me.parser === "typescript" && j.type === "PropertyDefinition") || fe(j.key.value) && String(Number(j.key.value)) === j.key.value && (me.parser === "babel" || me.parser === "acorn" || me.parser === "espree" || me.parser === "meriyah" || me.parser === "__babel_estree"));
          }
          __name(ne, "ne");
          function fe(j) {
            return /^(?:\d+|\d+\.\d+)$/.test(j);
          }
          __name(fe, "fe");
          function ge(j, me) {
            let Ie = /^[fx]?(?:describe|it|test)$/;
            return me.type === "TaggedTemplateExpression" && me.quasi === j && me.tag.type === "MemberExpression" && me.tag.property.type === "Identifier" && me.tag.property.name === "each" && (me.tag.object.type === "Identifier" && Ie.test(me.tag.object.name) || me.tag.object.type === "MemberExpression" && me.tag.object.property.type === "Identifier" && (me.tag.object.property.name === "only" || me.tag.object.property.name === "skip") && me.tag.object.object.type === "Identifier" && Ie.test(me.tag.object.object.name));
          }
          __name(ge, "ge");
          function Ce(j) {
            return j.quasis.some((me) => me.value.raw.includes(`
`));
          }
          __name(Ce, "Ce");
          function _e(j, me) {
            return (j.type === "TemplateLiteral" && Ce(j) || j.type === "TaggedTemplateExpression" && Ce(j.quasi)) && !a(me, c(j), { backwards: true });
          }
          __name(_e, "_e");
          function Oe(j) {
            if (!ue(j))
              return false;
            let me = s(st(j, ke.Dangling));
            return me && !g(me);
          }
          __name(Oe, "Oe");
          function pe(j) {
            if (j.length <= 1)
              return false;
            let me = 0;
            for (let Ie of j)
              if (b(Ie)) {
                if (me += 1, me > 1)
                  return true;
              } else if (oe(Ie)) {
                for (let je of Ie.arguments)
                  if (b(je))
                    return true;
              }
            return false;
          }
          __name(pe, "pe");
          function ie(j) {
            let me = j.getValue(), Ie = j.getParentNode();
            return oe(me) && oe(Ie) && Ie.callee === me && me.arguments.length > Ie.arguments.length && Ie.arguments.length > 0;
          }
          __name(ie, "ie");
          function ve(j, me) {
            if (me >= 2)
              return false;
            let Ie = /* @__PURE__ */ __name((ze) => ve(ze, me + 1), "Ie"), je = j.type === "Literal" && "regex" in j && j.regex.pattern || j.type === "RegExpLiteral" && j.pattern;
            if (je && l(je) > 5)
              return false;
            if (j.type === "Literal" || j.type === "BigIntLiteral" || j.type === "DecimalLiteral" || j.type === "BooleanLiteral" || j.type === "NullLiteral" || j.type === "NumericLiteral" || j.type === "RegExpLiteral" || j.type === "StringLiteral" || j.type === "Identifier" || j.type === "ThisExpression" || j.type === "Super" || j.type === "PrivateName" || j.type === "PrivateIdentifier" || j.type === "ArgumentPlaceholder" || j.type === "Import")
              return true;
            if (j.type === "TemplateLiteral")
              return j.quasis.every((ze) => !ze.value.raw.includes(`
`)) && j.expressions.every(Ie);
            if (j.type === "ObjectExpression")
              return j.properties.every((ze) => !ze.computed && (ze.shorthand || ze.value && Ie(ze.value)));
            if (j.type === "ArrayExpression")
              return j.elements.every((ze) => ze === null || Ie(ze));
            if (He(j))
              return (j.type === "ImportExpression" || ve(j.callee, me)) && Je(j).every(Ie);
            if (ae(j))
              return ve(j.object, me) && ve(j.property, me);
            let Ye = { "!": true, "-": true, "+": true, "~": true };
            if (j.type === "UnaryExpression" && Ye[j.operator])
              return ve(j.argument, me);
            let ut = { "++": true, "--": true };
            return j.type === "UpdateExpression" && ut[j.operator] ? ve(j.argument, me) : j.type === "TSNonNullExpression" ? ve(j.expression, me) : false;
          }
          __name(ve, "ve");
          function ce(j) {
            var me, Ie;
            return (me = (Ie = j.extra) === null || Ie === void 0 ? void 0 : Ie.raw) !== null && me !== void 0 ? me : j.raw;
          }
          __name(ce, "ce");
          function U(j) {
            return j;
          }
          __name(U, "U");
          function de(j) {
            return j.filepath && /\.tsx$/i.test(j.filepath);
          }
          __name(de, "de");
          function De(j) {
            let me = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "es5";
            return j.trailingComma === "es5" && me === "es5" || j.trailingComma === "all" && (me === "all" || me === "es5");
          }
          __name(De, "De");
          function he(j, me) {
            switch (j = Ee(j), j.type) {
              case "FunctionExpression":
              case "ClassExpression":
              case "DoExpression":
                return me;
              case "ObjectExpression":
                return true;
              case "MemberExpression":
              case "OptionalMemberExpression":
                return he(j.object, me);
              case "TaggedTemplateExpression":
                return j.tag.type === "FunctionExpression" ? false : he(j.tag, me);
              case "CallExpression":
              case "OptionalCallExpression":
                return j.callee.type === "FunctionExpression" ? false : he(j.callee, me);
              case "ConditionalExpression":
                return he(j.test, me);
              case "UpdateExpression":
                return !j.prefix && he(j.argument, me);
              case "BindExpression":
                return j.object && he(j.object, me);
              case "SequenceExpression":
                return he(j.expressions[0], me);
              case "TSSatisfiesExpression":
              case "TSAsExpression":
              case "TSNonNullExpression":
                return he(j.expression, me);
              default:
                return false;
            }
          }
          __name(he, "he");
          var Be = { "==": true, "!=": true, "===": true, "!==": true }, Se = { "*": true, "/": true, "%": true }, ye = { ">>": true, ">>>": true, "<<": true };
          function S(j, me) {
            return !(te(me) !== te(j) || j === "**" || Be[j] && Be[me] || me === "%" && Se[j] || j === "%" && Se[me] || me !== j && Se[me] && Se[j] || ye[j] && ye[me]);
          }
          __name(S, "S");
          var G = new Map([["|>"], ["??"], ["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]].flatMap((j, me) => j.map((Ie) => [Ie, me])));
          function te(j) {
            return G.get(j);
          }
          __name(te, "te");
          function Ee(j) {
            for (; j.left; )
              j = j.left;
            return j;
          }
          __name(Ee, "Ee");
          function Re(j) {
            return Boolean(ye[j]) || j === "|" || j === "^" || j === "&";
          }
          __name(Re, "Re");
          function Te(j) {
            var me;
            if (j.rest)
              return true;
            let Ie = Fe(j);
            return ((me = s(Ie)) === null || me === void 0 ? void 0 : me.type) === "RestElement";
          }
          __name(Te, "Te");
          var Pe = /* @__PURE__ */ new WeakMap();
          function Fe(j) {
            if (Pe.has(j))
              return Pe.get(j);
            let me = [];
            return j.this && me.push(j.this), Array.isArray(j.parameters) ? me.push(...j.parameters) : Array.isArray(j.params) && me.push(...j.params), j.rest && me.push(j.rest), Pe.set(j, me), me;
          }
          __name(Fe, "Fe");
          function Ze(j, me) {
            let Ie = j.getValue(), je = 0, Ye = /* @__PURE__ */ __name((ut) => me(ut, je++), "Ye");
            Ie.this && j.call(Ye, "this"), Array.isArray(Ie.parameters) ? j.each(Ye, "parameters") : Array.isArray(Ie.params) && j.each(Ye, "params"), Ie.rest && j.call(Ye, "rest");
          }
          __name(Ze, "Ze");
          var xe = /* @__PURE__ */ new WeakMap();
          function Je(j) {
            if (xe.has(j))
              return xe.get(j);
            let me = j.arguments;
            return j.type === "ImportExpression" && (me = [j.source], j.attributes && me.push(j.attributes)), xe.set(j, me), me;
          }
          __name(Je, "Je");
          function we(j, me) {
            let Ie = j.getValue();
            Ie.type === "ImportExpression" ? (j.call((je) => me(je, 0), "source"), Ie.attributes && j.call((je) => me(je, 1), "attributes")) : j.each(me, "arguments");
          }
          __name(we, "we");
          function Le(j) {
            return j.value.trim() === "prettier-ignore" && !j.unignore;
          }
          __name(Le, "Le");
          function Ve(j) {
            return j && (j.prettierIgnore || ue(j, ke.PrettierIgnore));
          }
          __name(Ve, "Ve");
          function be(j) {
            let me = j.getValue();
            return Ve(me);
          }
          __name(be, "be");
          var ke = { Leading: 1 << 1, Trailing: 1 << 2, Dangling: 1 << 3, Block: 1 << 4, Line: 1 << 5, PrettierIgnore: 1 << 6, First: 1 << 7, Last: 1 << 8 }, Me = /* @__PURE__ */ __name((j, me) => {
            if (typeof j == "function" && (me = j, j = 0), j || me)
              return (Ie, je, Ye) => !(j & ke.Leading && !Ie.leading || j & ke.Trailing && !Ie.trailing || j & ke.Dangling && (Ie.leading || Ie.trailing) || j & ke.Block && !g(Ie) || j & ke.Line && !f(Ie) || j & ke.First && je !== 0 || j & ke.Last && je !== Ye.length - 1 || j & ke.PrettierIgnore && !Le(Ie) || me && !me(Ie));
          }, "Me");
          function ue(j, me, Ie) {
            if (!u(j == null ? void 0 : j.comments))
              return false;
            let je = Me(me, Ie);
            return je ? j.comments.some(je) : true;
          }
          __name(ue, "ue");
          function st(j, me, Ie) {
            if (!Array.isArray(j == null ? void 0 : j.comments))
              return [];
            let je = Me(me, Ie);
            return je ? j.comments.filter(je) : j.comments;
          }
          __name(st, "st");
          var rt = /* @__PURE__ */ __name((j, me) => {
            let { originalText: Ie } = me;
            return i(Ie, y(j));
          }, "rt");
          function He(j) {
            return oe(j) || j.type === "NewExpression" || j.type === "ImportExpression";
          }
          __name(He, "He");
          function Ue(j) {
            return j && (j.type === "ObjectProperty" || j.type === "Property" && !j.method && j.kind === "init");
          }
          __name(Ue, "Ue");
          function Xe(j) {
            return Boolean(j.__isUsingHackPipeline);
          }
          __name(Xe, "Xe");
          var at = Symbol("ifWithoutBlockAndSameLineComment");
          function nt(j) {
            return j.type === "TSAsExpression" || j.type === "TSSatisfiesExpression";
          }
          __name(nt, "nt");
          n.exports = { getFunctionParameters: Fe, iterateFunctionParametersPath: Ze, getCallArguments: Je, iterateCallArgumentsPath: we, hasRestParameter: Te, getLeftSide: I, getLeftSidePathName: P, getParentExportDeclaration: m, getTypeScriptMappedTypeModifier: z, hasFlowAnnotationComment: F, hasFlowShorthandAnnotationComment: T, hasLeadingOwnLineComment: Z, hasNakedLeftSide: B, hasNode: A, hasIgnoreComment: be, hasNodeIgnoreComment: Ve, identity: U, isBinaryish: V, isCallLikeExpression: He, isEnabledHackPipeline: Xe, isLineComment: f, isPrettierIgnoreComment: Le, isCallExpression: oe, isMemberExpression: ae, isExportDeclaration: x, isFlowAnnotationComment: H, isFunctionCompositionArgs: pe, isFunctionNotation: J, isFunctionOrArrowExpression: b, isGetterOrSetter: q, isJestEachTemplateLiteral: ge, isJsxNode: $, isLiteral: E, isLongCurriedCallExpression: ie, isSimpleCallArgument: ve, isMemberish: O, isNumericLiteral: o, isSignedNumericLiteral: d, isObjectProperty: Ue, isObjectType: _, isObjectTypePropertyAFunction: L, isSimpleType: se, isSimpleNumber: fe, isSimpleTemplateLiteral: Ae, isStringLiteral: C, isStringPropSafeToUnquote: ne, isTemplateOnItsOwnLine: _e, isTestCall: X, isTheOnlyJsxElementInMarkdown: M, isTSXFile: de, isTypeAnnotationAFunction: Y, isNextLineEmpty: rt, needsHardlineAfterDanglingComment: Oe, rawText: ce, shouldPrintComma: De, isBitwiseOperator: Re, shouldFlatten: S, startsWithNoLookaheadToken: he, getPrecedence: te, hasComment: ue, getComments: st, CommentCheckFlags: ke, markerForIfWithoutBlockAndSameLineComment: at, isTSTypeExpression: nt };
        } }), jt = ee({ "src/language-js/print/template-literal.js"(e, n) {
          "use strict";
          re();
          var t = lt(), { getStringWidth: s, getIndentSize: a } = Ge(), { builders: { join: r, hardline: u, softline: i, group: l, indent: c, align: y, lineSuffixBoundary: h, addAlignmentToDoc: g }, printer: { printDocToString: p }, utils: { mapDoc: D } } = qe(), { isBinaryish: v, isJestEachTemplateLiteral: w, isSimpleTemplateLiteral: T, hasComment: F, isMemberExpression: A, isTSTypeExpression: B } = Ke();
          function I(E, o, d) {
            let C = E.getValue();
            if (C.type === "TemplateLiteral" && w(C, E.getParentNode())) {
              let M = P(E, d, o);
              if (M)
                return M;
            }
            let b = "expressions";
            C.type === "TSTemplateLiteralType" && (b = "types");
            let N = [], k = E.map(o, b), $ = T(C);
            return $ && (k = k.map((M) => p(M, Object.assign(Object.assign({}, d), {}, { printWidth: Number.POSITIVE_INFINITY })).formatted)), N.push(h, "`"), E.each((M) => {
              let q = M.getName();
              if (N.push(o()), q < k.length) {
                let { tabWidth: J } = d, L = M.getValue(), Y = a(L.value.raw, J), V = k[q];
                if (!$) {
                  let K = C[b][q];
                  (F(K) || A(K) || K.type === "ConditionalExpression" || K.type === "SequenceExpression" || B(K) || v(K)) && (V = [c([i, V]), i]);
                }
                let O = Y === 0 && L.value.raw.endsWith(`
`) ? y(Number.NEGATIVE_INFINITY, V) : g(V, Y, J);
                N.push(l(["${", O, h, "}"]));
              }
            }, "quasis"), N.push("`"), N;
          }
          __name(I, "I");
          function P(E, o, d) {
            let C = E.getNode(), _ = C.quasis[0].value.raw.trim().split(/\s*\|\s*/);
            if (_.length > 1 || _.some((b) => b.length > 0)) {
              o.__inJestEach = true;
              let b = E.map(d, "expressions");
              o.__inJestEach = false;
              let N = [], k = b.map((L) => "${" + p(L, Object.assign(Object.assign({}, o), {}, { printWidth: Number.POSITIVE_INFINITY, endOfLine: "lf" })).formatted + "}"), $ = [{ hasLineBreak: false, cells: [] }];
              for (let L = 1; L < C.quasis.length; L++) {
                let Y = t($), V = k[L - 1];
                Y.cells.push(V), V.includes(`
`) && (Y.hasLineBreak = true), C.quasis[L].value.raw.includes(`
`) && $.push({ hasLineBreak: false, cells: [] });
              }
              let M = Math.max(_.length, ...$.map((L) => L.cells.length)), q = Array.from({ length: M }).fill(0), J = [{ cells: _ }, ...$.filter((L) => L.cells.length > 0)];
              for (let { cells: L } of J.filter((Y) => !Y.hasLineBreak))
                for (let [Y, V] of L.entries())
                  q[Y] = Math.max(q[Y], s(V));
              return N.push(h, "`", c([u, r(u, J.map((L) => r(" | ", L.cells.map((Y, V) => L.hasLineBreak ? Y : Y + " ".repeat(q[V] - s(Y))))))]), u, "`"), N;
            }
          }
          __name(P, "P");
          function R(E, o) {
            let d = E.getValue(), C = o();
            return F(d) && (C = l([c([i, C]), i])), ["${", C, h, "}"];
          }
          __name(R, "R");
          function f(E, o) {
            return E.map((d) => R(d, o), "expressions");
          }
          __name(f, "f");
          function x(E, o) {
            return D(E, (d) => typeof d == "string" ? o ? d.replace(/(\\*)`/g, "$1$1\\`") : m(d) : d);
          }
          __name(x, "x");
          function m(E) {
            return E.replace(/([\\`]|\${)/g, "\\$1");
          }
          __name(m, "m");
          n.exports = { printTemplateLiteral: I, printTemplateExpressions: f, escapeTemplateCharacters: x, uncookTemplateElementValue: m };
        } }), xm = ee({ "src/language-js/embed/markdown.js"(e, n) {
          "use strict";
          re();
          var { builders: { indent: t, softline: s, literalline: a, dedentToRoot: r } } = qe(), { escapeTemplateCharacters: u } = jt();
          function i(c, y, h) {
            let p = c.getValue().quasis[0].value.raw.replace(/((?:\\\\)*)\\`/g, (T, F) => "\\".repeat(F.length / 2) + "`"), D = l(p), v = D !== "";
            v && (p = p.replace(new RegExp(`^${D}`, "gm"), ""));
            let w = u(h(p, { parser: "markdown", __inJsTemplate: true }, { stripTrailingHardline: true }), true);
            return ["`", v ? t([s, w]) : [a, r(w)], s, "`"];
          }
          __name(i, "i");
          function l(c) {
            let y = c.match(/^([^\S\n]*)\S/m);
            return y === null ? "" : y[1];
          }
          __name(l, "l");
          n.exports = i;
        } }), bm = ee({ "src/language-js/embed/css.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t } = Ge(), { builders: { indent: s, hardline: a, softline: r }, utils: { mapDoc: u, replaceEndOfLine: i, cleanDoc: l } } = qe(), { printTemplateExpressions: c } = jt();
          function y(p, D, v) {
            let w = p.getValue(), T = w.quasis.map((P) => P.value.raw), F = 0, A = T.reduce((P, R, f) => f === 0 ? R : P + "@prettier-placeholder-" + F++ + "-id" + R, ""), B = v(A, { parser: "scss" }, { stripTrailingHardline: true }), I = c(p, D);
            return h(B, w, I);
          }
          __name(y, "y");
          function h(p, D, v) {
            if (D.quasis.length === 1 && !D.quasis[0].value.raw.trim())
              return "``";
            let T = g(p, v);
            if (!T)
              throw new Error("Couldn't insert all the expressions");
            return ["`", s([a, T]), r, "`"];
          }
          __name(h, "h");
          function g(p, D) {
            if (!t(D))
              return p;
            let v = 0, w = u(l(p), (T) => typeof T != "string" || !T.includes("@prettier-placeholder") ? T : T.split(/@prettier-placeholder-(\d+)-id/).map((F, A) => A % 2 === 0 ? i(F) : (v++, D[F])));
            return D.length === v ? w : null;
          }
          __name(g, "g");
          n.exports = y;
        } }), Tm = ee({ "src/language-js/embed/graphql.js"(e, n) {
          "use strict";
          re();
          var { builders: { indent: t, join: s, hardline: a } } = qe(), { escapeTemplateCharacters: r, printTemplateExpressions: u } = jt();
          function i(c, y, h) {
            let g = c.getValue(), p = g.quasis.length;
            if (p === 1 && g.quasis[0].value.raw.trim() === "")
              return "``";
            let D = u(c, y), v = [];
            for (let w = 0; w < p; w++) {
              let T = g.quasis[w], F = w === 0, A = w === p - 1, B = T.value.cooked, I = B.split(`
`), P = I.length, R = D[w], f = P > 2 && I[0].trim() === "" && I[1].trim() === "", x = P > 2 && I[P - 1].trim() === "" && I[P - 2].trim() === "", m = I.every((o) => /^\s*(?:#[^\n\r]*)?$/.test(o));
              if (!A && /#[^\n\r]*$/.test(I[P - 1]))
                return null;
              let E = null;
              m ? E = l(I) : E = h(B, { parser: "graphql" }, { stripTrailingHardline: true }), E ? (E = r(E, false), !F && f && v.push(""), v.push(E), !A && x && v.push("")) : !F && !A && f && v.push(""), R && v.push(R);
            }
            return ["`", t([a, s(a, v)]), a, "`"];
          }
          __name(i, "i");
          function l(c) {
            let y = [], h = false, g = c.map((p) => p.trim());
            for (let [p, D] of g.entries())
              D !== "" && (g[p - 1] === "" && h ? y.push([a, D]) : y.push(D), h = true);
            return y.length === 0 ? null : s(a, y);
          }
          __name(l, "l");
          n.exports = i;
        } }), Bm = ee({ "src/language-js/embed/html.js"(e, n) {
          "use strict";
          re();
          var { builders: { indent: t, line: s, hardline: a, group: r }, utils: { mapDoc: u } } = qe(), { printTemplateExpressions: i, uncookTemplateElementValue: l } = jt(), c = 0;
          function y(h, g, p, D, v) {
            let { parser: w } = v, T = h.getValue(), F = c;
            c = c + 1 >>> 0;
            let A = /* @__PURE__ */ __name((d) => `PRETTIER_HTML_PLACEHOLDER_${d}_${F}_IN_JS`, "A"), B = T.quasis.map((d, C, _) => C === _.length - 1 ? d.value.cooked : d.value.cooked + A(C)).join(""), I = i(h, g);
            if (I.length === 0 && B.trim().length === 0)
              return "``";
            let P = new RegExp(A("(\\d+)"), "g"), R = 0, f = p(B, { parser: w, __onHtmlRoot(d) {
              R = d.children.length;
            } }, { stripTrailingHardline: true }), x = u(f, (d) => {
              if (typeof d != "string")
                return d;
              let C = [], _ = d.split(P);
              for (let b = 0; b < _.length; b++) {
                let N = _[b];
                if (b % 2 === 0) {
                  N && (N = l(N), D.__embeddedInHtml && (N = N.replace(/<\/(script)\b/gi, "<\\/$1")), C.push(N));
                  continue;
                }
                let k = Number(N);
                C.push(I[k]);
              }
              return C;
            }), m = /^\s/.test(B) ? " " : "", E = /\s$/.test(B) ? " " : "", o = D.htmlWhitespaceSensitivity === "ignore" ? a : m && E ? s : null;
            return r(o ? ["`", t([o, r(x)]), o, "`"] : ["`", m, R > 1 ? t(r(x)) : r(x), E, "`"]);
          }
          __name(y, "y");
          n.exports = y;
        } }), Nm = ee({ "src/language-js/embed.js"(e, n) {
          "use strict";
          re();
          var { hasComment: t, CommentCheckFlags: s, isObjectProperty: a } = Ke(), r = xm(), u = bm(), i = Tm(), l = Bm();
          function c(f) {
            if (g(f) || w(f) || T(f) || p(f))
              return "css";
            if (B(f))
              return "graphql";
            if (P(f))
              return "html";
            if (D(f))
              return "angular";
            if (h(f))
              return "markdown";
          }
          __name(c, "c");
          function y(f, x, m, E) {
            let o = f.getValue();
            if (o.type !== "TemplateLiteral" || R(o))
              return;
            let d = c(f);
            if (!!d) {
              if (d === "markdown")
                return r(f, x, m);
              if (d === "css")
                return u(f, x, m);
              if (d === "graphql")
                return i(f, x, m);
              if (d === "html" || d === "angular")
                return l(f, x, m, E, { parser: d });
            }
          }
          __name(y, "y");
          function h(f) {
            let x = f.getValue(), m = f.getParentNode();
            return m && m.type === "TaggedTemplateExpression" && x.quasis.length === 1 && m.tag.type === "Identifier" && (m.tag.name === "md" || m.tag.name === "markdown");
          }
          __name(h, "h");
          function g(f) {
            let x = f.getValue(), m = f.getParentNode(), E = f.getParentNode(1);
            return E && x.quasis && m.type === "JSXExpressionContainer" && E.type === "JSXElement" && E.openingElement.name.name === "style" && E.openingElement.attributes.some((o) => o.name.name === "jsx") || m && m.type === "TaggedTemplateExpression" && m.tag.type === "Identifier" && m.tag.name === "css" || m && m.type === "TaggedTemplateExpression" && m.tag.type === "MemberExpression" && m.tag.object.name === "css" && (m.tag.property.name === "global" || m.tag.property.name === "resolve");
          }
          __name(g, "g");
          function p(f) {
            return f.match((x) => x.type === "TemplateLiteral", (x, m) => x.type === "ArrayExpression" && m === "elements", (x, m) => a(x) && x.key.type === "Identifier" && x.key.name === "styles" && m === "value", ...v);
          }
          __name(p, "p");
          function D(f) {
            return f.match((x) => x.type === "TemplateLiteral", (x, m) => a(x) && x.key.type === "Identifier" && x.key.name === "template" && m === "value", ...v);
          }
          __name(D, "D");
          var v = [(f, x) => f.type === "ObjectExpression" && x === "properties", (f, x) => f.type === "CallExpression" && f.callee.type === "Identifier" && f.callee.name === "Component" && x === "arguments", (f, x) => f.type === "Decorator" && x === "expression"];
          function w(f) {
            let x = f.getParentNode();
            if (!x || x.type !== "TaggedTemplateExpression")
              return false;
            let m = x.tag.type === "ParenthesizedExpression" ? x.tag.expression : x.tag;
            switch (m.type) {
              case "MemberExpression":
                return F(m.object) || A(m);
              case "CallExpression":
                return F(m.callee) || m.callee.type === "MemberExpression" && (m.callee.object.type === "MemberExpression" && (F(m.callee.object.object) || A(m.callee.object)) || m.callee.object.type === "CallExpression" && F(m.callee.object.callee));
              case "Identifier":
                return m.name === "css";
              default:
                return false;
            }
          }
          __name(w, "w");
          function T(f) {
            let x = f.getParentNode(), m = f.getParentNode(1);
            return m && x.type === "JSXExpressionContainer" && m.type === "JSXAttribute" && m.name.type === "JSXIdentifier" && m.name.name === "css";
          }
          __name(T, "T");
          function F(f) {
            return f.type === "Identifier" && f.name === "styled";
          }
          __name(F, "F");
          function A(f) {
            return /^[A-Z]/.test(f.object.name) && f.property.name === "extend";
          }
          __name(A, "A");
          function B(f) {
            let x = f.getValue(), m = f.getParentNode();
            return I(x, "GraphQL") || m && (m.type === "TaggedTemplateExpression" && (m.tag.type === "MemberExpression" && m.tag.object.name === "graphql" && m.tag.property.name === "experimental" || m.tag.type === "Identifier" && (m.tag.name === "gql" || m.tag.name === "graphql")) || m.type === "CallExpression" && m.callee.type === "Identifier" && m.callee.name === "graphql");
          }
          __name(B, "B");
          function I(f, x) {
            return t(f, s.Block | s.Leading, (m) => {
              let { value: E } = m;
              return E === ` ${x} `;
            });
          }
          __name(I, "I");
          function P(f) {
            return I(f.getValue(), "HTML") || f.match((x) => x.type === "TemplateLiteral", (x, m) => x.type === "TaggedTemplateExpression" && x.tag.type === "Identifier" && x.tag.name === "html" && m === "quasi");
          }
          __name(P, "P");
          function R(f) {
            let { quasis: x } = f;
            return x.some((m) => {
              let { value: { cooked: E } } = m;
              return E === null;
            });
          }
          __name(R, "R");
          n.exports = y;
        } }), wm = ee({ "src/language-js/clean.js"(e, n) {
          "use strict";
          re();
          var t = Lt(), s = /* @__PURE__ */ new Set(["range", "raw", "comments", "leadingComments", "trailingComments", "innerComments", "extra", "start", "end", "loc", "flags", "errors", "tokens"]), a = /* @__PURE__ */ __name((u) => {
            for (let i of u.quasis)
              delete i.value;
          }, "a");
          function r(u, i, l) {
            if (u.type === "Program" && delete i.sourceType, (u.type === "BigIntLiteral" || u.type === "BigIntLiteralTypeAnnotation") && i.value && (i.value = i.value.toLowerCase()), (u.type === "BigIntLiteral" || u.type === "Literal") && i.bigint && (i.bigint = i.bigint.toLowerCase()), u.type === "DecimalLiteral" && (i.value = Number(i.value)), u.type === "Literal" && i.decimal && (i.decimal = Number(i.decimal)), u.type === "EmptyStatement" || u.type === "JSXText" || u.type === "JSXExpressionContainer" && (u.expression.type === "Literal" || u.expression.type === "StringLiteral") && u.expression.value === " ")
              return null;
            if ((u.type === "Property" || u.type === "ObjectProperty" || u.type === "MethodDefinition" || u.type === "ClassProperty" || u.type === "ClassMethod" || u.type === "PropertyDefinition" || u.type === "TSDeclareMethod" || u.type === "TSPropertySignature" || u.type === "ObjectTypeProperty") && typeof u.key == "object" && u.key && (u.key.type === "Literal" || u.key.type === "NumericLiteral" || u.key.type === "StringLiteral" || u.key.type === "Identifier") && delete i.key, u.type === "JSXElement" && u.openingElement.name.name === "style" && u.openingElement.attributes.some((h) => h.name.name === "jsx"))
              for (let { type: h, expression: g } of i.children)
                h === "JSXExpressionContainer" && g.type === "TemplateLiteral" && a(g);
            u.type === "JSXAttribute" && u.name.name === "css" && u.value.type === "JSXExpressionContainer" && u.value.expression.type === "TemplateLiteral" && a(i.value.expression), u.type === "JSXAttribute" && u.value && u.value.type === "Literal" && /["']|&quot;|&apos;/.test(u.value.value) && (i.value.value = i.value.value.replace(/["']|&quot;|&apos;/g, '"'));
            let c = u.expression || u.callee;
            if (u.type === "Decorator" && c.type === "CallExpression" && c.callee.name === "Component" && c.arguments.length === 1) {
              let h = u.expression.arguments[0].properties;
              for (let [g, p] of i.expression.arguments[0].properties.entries())
                switch (h[g].key.name) {
                  case "styles":
                    p.value.type === "ArrayExpression" && a(p.value.elements[0]);
                    break;
                  case "template":
                    p.value.type === "TemplateLiteral" && a(p.value);
                    break;
                }
            }
            if (u.type === "TaggedTemplateExpression" && (u.tag.type === "MemberExpression" || u.tag.type === "Identifier" && (u.tag.name === "gql" || u.tag.name === "graphql" || u.tag.name === "css" || u.tag.name === "md" || u.tag.name === "markdown" || u.tag.name === "html") || u.tag.type === "CallExpression") && a(i.quasi), u.type === "TemplateLiteral") {
              var y;
              (((y = u.leadingComments) === null || y === void 0 ? void 0 : y.some((g) => t(g) && ["GraphQL", "HTML"].some((p) => g.value === ` ${p} `))) || l.type === "CallExpression" && l.callee.name === "graphql" || !u.leadingComments) && a(i);
            }
            if (u.type === "InterpreterDirective" && (i.value = i.value.trimEnd()), (u.type === "TSIntersectionType" || u.type === "TSUnionType") && u.types.length === 1)
              return i.types[0];
          }
          __name(r, "r");
          r.ignoredProperties = s, n.exports = r;
        } }), Ma = {};
        zt(Ma, { EOL: () => kn, arch: () => _m, cpus: () => Ua, default: () => Ya, endianness: () => Ra, freemem: () => Ha, getNetworkInterfaces: () => Ka, hostname: () => $a, loadavg: () => Va, networkInterfaces: () => Xa, platform: () => Pm, release: () => za, tmpDir: () => Pn, tmpdir: () => In, totalmem: () => Ga, type: () => Ja, uptime: () => Wa });
        function Ra() {
          if (typeof br > "u") {
            var e = new ArrayBuffer(2), n = new Uint8Array(e), t = new Uint16Array(e);
            if (n[0] = 1, n[1] = 2, t[0] === 258)
              br = "BE";
            else if (t[0] === 513)
              br = "LE";
            else
              throw new Error("unable to figure out endianess");
          }
          return br;
        }
        __name(Ra, "Ra");
        function $a() {
          return typeof globalThis.location < "u" ? globalThis.location.hostname : "";
        }
        __name($a, "$a");
        function Va() {
          return [];
        }
        __name(Va, "Va");
        function Wa() {
          return 0;
        }
        __name(Wa, "Wa");
        function Ha() {
          return Number.MAX_VALUE;
        }
        __name(Ha, "Ha");
        function Ga() {
          return Number.MAX_VALUE;
        }
        __name(Ga, "Ga");
        function Ua() {
          return [];
        }
        __name(Ua, "Ua");
        function Ja() {
          return "Browser";
        }
        __name(Ja, "Ja");
        function za() {
          return typeof globalThis.navigator < "u" ? globalThis.navigator.appVersion : "";
        }
        __name(za, "za");
        function Xa() {
        }
        __name(Xa, "Xa");
        function Ka() {
        }
        __name(Ka, "Ka");
        function _m() {
          return "javascript";
        }
        __name(_m, "_m");
        function Pm() {
          return "browser";
        }
        __name(Pm, "Pm");
        function Pn() {
          return "/tmp";
        }
        __name(Pn, "Pn");
        var br, In, kn, Ya, Im = gt({ "node-modules-polyfills:os"() {
          re(), In = Pn, kn = `
`, Ya = { EOL: kn, tmpdir: In, tmpDir: Pn, networkInterfaces: Xa, getNetworkInterfaces: Ka, release: za, type: Ja, cpus: Ua, totalmem: Ga, freemem: Ha, uptime: Wa, loadavg: Va, hostname: $a, endianness: Ra };
        } }), km = ee({ "node-modules-polyfills-commonjs:os"(e, n) {
          re();
          var t = (Im(), ft(Ma));
          if (t && t.default) {
            n.exports = t.default;
            for (let s in t)
              n.exports[s] = t[s];
          } else
            t && (n.exports = t);
        } }), Lm = ee({ "node_modules/detect-newline/index.js"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ __name((s) => {
            if (typeof s != "string")
              throw new TypeError("Expected a string");
            let a = s.match(/(?:\r?\n)/g) || [];
            if (a.length === 0)
              return;
            let r = a.filter((i) => i === `\r
`).length, u = a.length - r;
            return r > u ? `\r
` : `
`;
          }, "t");
          n.exports = t, n.exports.graceful = (s) => typeof s == "string" && t(s) || `
`;
        } }), jm = ee({ "node_modules/jest-docblock/build/index.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.extract = p, e.parse = v, e.parseWithComments = w, e.print = T, e.strip = D;
          function n() {
            let A = km();
            return n = /* @__PURE__ */ __name(function() {
              return A;
            }, "n"), A;
          }
          __name(n, "n");
          function t() {
            let A = s(Lm());
            return t = /* @__PURE__ */ __name(function() {
              return A;
            }, "t"), A;
          }
          __name(t, "t");
          function s(A) {
            return A && A.__esModule ? A : { default: A };
          }
          __name(s, "s");
          var a = /\*\/$/, r = /^\/\*\*?/, u = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, i = /(^|\s+)\/\/([^\r\n]*)/g, l = /^(\r?\n)+/, c = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g, y = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g, h = /(\r?\n|^) *\* ?/g, g = [];
          function p(A) {
            let B = A.match(u);
            return B ? B[0].trimLeft() : "";
          }
          __name(p, "p");
          function D(A) {
            let B = A.match(u);
            return B && B[0] ? A.substring(B[0].length) : A;
          }
          __name(D, "D");
          function v(A) {
            return w(A).pragmas;
          }
          __name(v, "v");
          function w(A) {
            let B = (0, t().default)(A) || n().EOL;
            A = A.replace(r, "").replace(a, "").replace(h, "$1");
            let I = "";
            for (; I !== A; )
              I = A, A = A.replace(c, `${B}$1 $2${B}`);
            A = A.replace(l, "").trimRight();
            let P = /* @__PURE__ */ Object.create(null), R = A.replace(y, "").replace(l, "").trimRight(), f;
            for (; f = y.exec(A); ) {
              let x = f[2].replace(i, "");
              typeof P[f[1]] == "string" || Array.isArray(P[f[1]]) ? P[f[1]] = g.concat(P[f[1]], x) : P[f[1]] = x;
            }
            return { comments: R, pragmas: P };
          }
          __name(w, "w");
          function T(A) {
            let { comments: B = "", pragmas: I = {} } = A, P = (0, t().default)(B) || n().EOL, R = "/**", f = " *", x = " */", m = Object.keys(I), E = m.map((d) => F(d, I[d])).reduce((d, C) => d.concat(C), []).map((d) => `${f} ${d}${P}`).join("");
            if (!B) {
              if (m.length === 0)
                return "";
              if (m.length === 1 && !Array.isArray(I[m[0]])) {
                let d = I[m[0]];
                return `${R} ${F(m[0], d)[0]}${x}`;
              }
            }
            let o = B.split(P).map((d) => `${f} ${d}`).join(P) + P;
            return R + P + (B ? o : "") + (B && m.length ? f + P : "") + E + x;
          }
          __name(T, "T");
          function F(A, B) {
            return g.concat(B).map((I) => `@${A} ${I}`.trim());
          }
          __name(F, "F");
        } }), Om = ee({ "src/language-js/utils/get-shebang.js"(e, n) {
          "use strict";
          re();
          function t(s) {
            if (!s.startsWith("#!"))
              return "";
            let a = s.indexOf(`
`);
            return a === -1 ? s : s.slice(0, a);
          }
          __name(t, "t");
          n.exports = t;
        } }), Qa = ee({ "src/language-js/pragma.js"(e, n) {
          "use strict";
          re();
          var { parseWithComments: t, strip: s, extract: a, print: r } = jm(), { normalizeEndOfLine: u } = qn(), i = Om();
          function l(h) {
            let g = i(h);
            g && (h = h.slice(g.length + 1));
            let p = a(h), { pragmas: D, comments: v } = t(p);
            return { shebang: g, text: h, pragmas: D, comments: v };
          }
          __name(l, "l");
          function c(h) {
            let g = Object.keys(l(h).pragmas);
            return g.includes("prettier") || g.includes("format");
          }
          __name(c, "c");
          function y(h) {
            let { shebang: g, text: p, pragmas: D, comments: v } = l(h), w = s(p), T = r({ pragmas: Object.assign({ format: "" }, D), comments: v.trimStart() });
            return (g ? `${g}
` : "") + u(T) + (w.startsWith(`
`) ? `
` : `

`) + w;
          }
          __name(y, "y");
          n.exports = { hasPragma: c, insertPragma: y };
        } }), Za = ee({ "src/language-js/comments.js"(e, n) {
          "use strict";
          re();
          var { getLast: t, hasNewline: s, getNextNonSpaceNonCommentCharacterIndexWithStartIndex: a, getNextNonSpaceNonCommentCharacter: r, hasNewlineInRange: u, addLeadingComment: i, addTrailingComment: l, addDanglingComment: c, getNextNonSpaceNonCommentCharacterIndex: y, isNonEmptyArray: h } = Ge(), { getFunctionParameters: g, isPrettierIgnoreComment: p, isJsxNode: D, hasFlowShorthandAnnotationComment: v, hasFlowAnnotationComment: w, hasIgnoreComment: T, isCallLikeExpression: F, getCallArguments: A, isCallExpression: B, isMemberExpression: I, isObjectProperty: P, isLineComment: R, getComments: f, CommentCheckFlags: x, markerForIfWithoutBlockAndSameLineComment: m } = Ke(), { locStart: E, locEnd: o } = it(), d = Lt();
          function C(ye) {
            return [ce, ae, L, M, q, J, K, ge, Z, fe, Ce, _e, Q, Ae, z].some((S) => S(ye));
          }
          __name(C, "C");
          function _(ye) {
            return [$, ae, Y, Ce, M, q, J, K, Ae, H, ne, fe, ie, z, de].some((S) => S(ye));
          }
          __name(_, "_");
          function b(ye) {
            return [ce, M, q, V, oe, Q, fe, X, W, U, z, ve].some((S) => S(ye));
          }
          __name(b, "b");
          function N(ye, S) {
            let G = (ye.body || ye.properties).find((te) => {
              let { type: Ee } = te;
              return Ee !== "EmptyStatement";
            });
            G ? i(G, S) : c(ye, S);
          }
          __name(N, "N");
          function k(ye, S) {
            ye.type === "BlockStatement" ? N(ye, S) : i(ye, S);
          }
          __name(k, "k");
          function $(ye) {
            let { comment: S, followingNode: G } = ye;
            return G && Be(S) ? (i(G, S), true) : false;
          }
          __name($, "$");
          function M(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee, text: Re } = ye;
            if ((te == null ? void 0 : te.type) !== "IfStatement" || !Ee)
              return false;
            if (r(Re, S, o) === ")")
              return l(G, S), true;
            if (G === te.consequent && Ee === te.alternate) {
              if (G.type === "BlockStatement")
                l(G, S);
              else {
                let Pe = S.type === "SingleLine" || S.loc.start.line === S.loc.end.line, Fe = S.loc.start.line === G.loc.start.line;
                Pe && Fe ? c(G, S, m) : c(te, S);
              }
              return true;
            }
            return Ee.type === "BlockStatement" ? (N(Ee, S), true) : Ee.type === "IfStatement" ? (k(Ee.consequent, S), true) : te.consequent === Ee ? (i(Ee, S), true) : false;
          }
          __name(M, "M");
          function q(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee, text: Re } = ye;
            return (te == null ? void 0 : te.type) !== "WhileStatement" || !Ee ? false : r(Re, S, o) === ")" ? (l(G, S), true) : Ee.type === "BlockStatement" ? (N(Ee, S), true) : te.body === Ee ? (i(Ee, S), true) : false;
          }
          __name(q, "q");
          function J(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee } = ye;
            return (te == null ? void 0 : te.type) !== "TryStatement" && (te == null ? void 0 : te.type) !== "CatchClause" || !Ee ? false : te.type === "CatchClause" && G ? (l(G, S), true) : Ee.type === "BlockStatement" ? (N(Ee, S), true) : Ee.type === "TryStatement" ? (k(Ee.finalizer, S), true) : Ee.type === "CatchClause" ? (k(Ee.body, S), true) : false;
          }
          __name(J, "J");
          function L(ye) {
            let { comment: S, enclosingNode: G, followingNode: te } = ye;
            return I(G) && (te == null ? void 0 : te.type) === "Identifier" ? (i(G, S), true) : false;
          }
          __name(L, "L");
          function Y(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee, text: Re } = ye, Te = G && !u(Re, o(G), E(S));
            return (!G || !Te) && ((te == null ? void 0 : te.type) === "ConditionalExpression" || (te == null ? void 0 : te.type) === "TSConditionalType") && Ee ? (i(Ee, S), true) : false;
          }
          __name(Y, "Y");
          function V(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te } = ye;
            return P(te) && te.shorthand && te.key === G && te.value.type === "AssignmentPattern" ? (l(te.value.left, S), true) : false;
          }
          __name(V, "V");
          var O = /* @__PURE__ */ new Set(["ClassDeclaration", "ClassExpression", "DeclareClass", "DeclareInterface", "InterfaceDeclaration", "TSInterfaceDeclaration"]);
          function K(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee } = ye;
            if (O.has(te == null ? void 0 : te.type)) {
              if (h(te.decorators) && !(Ee && Ee.type === "Decorator"))
                return l(t(te.decorators), S), true;
              if (te.body && Ee === te.body)
                return N(te.body, S), true;
              if (Ee) {
                if (te.superClass && Ee === te.superClass && G && (G === te.id || G === te.typeParameters))
                  return l(G, S), true;
                for (let Re of ["implements", "extends", "mixins"])
                  if (te[Re] && Ee === te[Re][0])
                    return G && (G === te.id || G === te.typeParameters || G === te.superClass) ? l(G, S) : c(te, S, Re), true;
              }
            }
            return false;
          }
          __name(K, "K");
          var se = /* @__PURE__ */ new Set(["ClassMethod", "ClassProperty", "PropertyDefinition", "TSAbstractPropertyDefinition", "TSAbstractMethodDefinition", "TSDeclareMethod", "MethodDefinition"]);
          function Q(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, text: Ee } = ye;
            return te && G && r(Ee, S, o) === "(" && (te.type === "Property" || te.type === "TSDeclareMethod" || te.type === "TSAbstractMethodDefinition") && G.type === "Identifier" && te.key === G && r(Ee, G, o) !== ":" || (G == null ? void 0 : G.type) === "Decorator" && se.has(te == null ? void 0 : te.type) ? (l(G, S), true) : false;
          }
          __name(Q, "Q");
          var le = /* @__PURE__ */ new Set(["FunctionDeclaration", "FunctionExpression", "ClassMethod", "MethodDefinition", "ObjectMethod"]);
          function W(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, text: Ee } = ye;
            return r(Ee, S, o) !== "(" ? false : G && le.has(te == null ? void 0 : te.type) ? (l(G, S), true) : false;
          }
          __name(W, "W");
          function X(ye) {
            let { comment: S, enclosingNode: G, text: te } = ye;
            if ((G == null ? void 0 : G.type) !== "ArrowFunctionExpression")
              return false;
            let Ee = y(te, S, o);
            return Ee !== false && te.slice(Ee, Ee + 2) === "=>" ? (c(G, S), true) : false;
          }
          __name(X, "X");
          function oe(ye) {
            let { comment: S, enclosingNode: G, text: te } = ye;
            return r(te, S, o) !== ")" ? false : G && (De(G) && g(G).length === 0 || F(G) && A(G).length === 0) ? (c(G, S), true) : ((G == null ? void 0 : G.type) === "MethodDefinition" || (G == null ? void 0 : G.type) === "TSAbstractMethodDefinition") && g(G.value).length === 0 ? (c(G.value, S), true) : false;
          }
          __name(oe, "oe");
          function ae(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee, text: Re } = ye;
            if ((G == null ? void 0 : G.type) === "FunctionTypeParam" && (te == null ? void 0 : te.type) === "FunctionTypeAnnotation" && (Ee == null ? void 0 : Ee.type) !== "FunctionTypeParam" || ((G == null ? void 0 : G.type) === "Identifier" || (G == null ? void 0 : G.type) === "AssignmentPattern") && te && De(te) && r(Re, S, o) === ")")
              return l(G, S), true;
            if ((te == null ? void 0 : te.type) === "FunctionDeclaration" && (Ee == null ? void 0 : Ee.type) === "BlockStatement") {
              let Te = (() => {
                let Pe = g(te);
                if (Pe.length > 0)
                  return a(Re, o(t(Pe)));
                let Fe = a(Re, o(te.id));
                return Fe !== false && a(Re, Fe + 1);
              })();
              if (E(S) > Te)
                return N(Ee, S), true;
            }
            return false;
          }
          __name(ae, "ae");
          function Ae(ye) {
            let { comment: S, enclosingNode: G } = ye;
            return (G == null ? void 0 : G.type) === "LabeledStatement" ? (i(G, S), true) : false;
          }
          __name(Ae, "Ae");
          function z(ye) {
            let { comment: S, enclosingNode: G } = ye;
            return ((G == null ? void 0 : G.type) === "ContinueStatement" || (G == null ? void 0 : G.type) === "BreakStatement") && !G.label ? (l(G, S), true) : false;
          }
          __name(z, "z");
          function H(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te } = ye;
            return B(te) && G && te.callee === G && te.arguments.length > 0 ? (i(te.arguments[0], S), true) : false;
          }
          __name(H, "H");
          function Z(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee } = ye;
            return (te == null ? void 0 : te.type) === "UnionTypeAnnotation" || (te == null ? void 0 : te.type) === "TSUnionType" ? (p(S) && (Ee.prettierIgnore = true, S.unignore = true), G ? (l(G, S), true) : false) : (((Ee == null ? void 0 : Ee.type) === "UnionTypeAnnotation" || (Ee == null ? void 0 : Ee.type) === "TSUnionType") && p(S) && (Ee.types[0].prettierIgnore = true, S.unignore = true), false);
          }
          __name(Z, "Z");
          function ne(ye) {
            let { comment: S, enclosingNode: G } = ye;
            return P(G) ? (i(G, S), true) : false;
          }
          __name(ne, "ne");
          function fe(ye) {
            let { comment: S, enclosingNode: G, followingNode: te, ast: Ee, isLastComment: Re } = ye;
            return Ee && Ee.body && Ee.body.length === 0 ? (Re ? c(Ee, S) : i(Ee, S), true) : (G == null ? void 0 : G.type) === "Program" && (G == null ? void 0 : G.body.length) === 0 && !h(G.directives) ? (Re ? c(G, S) : i(G, S), true) : (te == null ? void 0 : te.type) === "Program" && (te == null ? void 0 : te.body.length) === 0 && (G == null ? void 0 : G.type) === "ModuleExpression" ? (c(te, S), true) : false;
          }
          __name(fe, "fe");
          function ge(ye) {
            let { comment: S, enclosingNode: G } = ye;
            return (G == null ? void 0 : G.type) === "ForInStatement" || (G == null ? void 0 : G.type) === "ForOfStatement" ? (i(G, S), true) : false;
          }
          __name(ge, "ge");
          function Ce(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, text: Ee } = ye;
            if ((te == null ? void 0 : te.type) === "ImportSpecifier" || (te == null ? void 0 : te.type) === "ExportSpecifier")
              return i(te, S), true;
            let Re = (G == null ? void 0 : G.type) === "ImportSpecifier" && (te == null ? void 0 : te.type) === "ImportDeclaration", Te = (G == null ? void 0 : G.type) === "ExportSpecifier" && (te == null ? void 0 : te.type) === "ExportNamedDeclaration";
            return (Re || Te) && s(Ee, o(S)) ? (l(G, S), true) : false;
          }
          __name(Ce, "Ce");
          function _e(ye) {
            let { comment: S, enclosingNode: G } = ye;
            return (G == null ? void 0 : G.type) === "AssignmentPattern" ? (i(G, S), true) : false;
          }
          __name(_e, "_e");
          var Oe = /* @__PURE__ */ new Set(["VariableDeclarator", "AssignmentExpression", "TypeAlias", "TSTypeAliasDeclaration"]), pe = /* @__PURE__ */ new Set(["ObjectExpression", "ArrayExpression", "TemplateLiteral", "TaggedTemplateExpression", "ObjectTypeAnnotation", "TSTypeLiteral"]);
          function ie(ye) {
            let { comment: S, enclosingNode: G, followingNode: te } = ye;
            return Oe.has(G == null ? void 0 : G.type) && te && (pe.has(te.type) || d(S)) ? (i(te, S), true) : false;
          }
          __name(ie, "ie");
          function ve(ye) {
            let { comment: S, enclosingNode: G, followingNode: te, text: Ee } = ye;
            return !te && ((G == null ? void 0 : G.type) === "TSMethodSignature" || (G == null ? void 0 : G.type) === "TSDeclareFunction" || (G == null ? void 0 : G.type) === "TSAbstractMethodDefinition") && r(Ee, S, o) === ";" ? (l(G, S), true) : false;
          }
          __name(ve, "ve");
          function ce(ye) {
            let { comment: S, enclosingNode: G, followingNode: te } = ye;
            if (p(S) && (G == null ? void 0 : G.type) === "TSMappedType" && (te == null ? void 0 : te.type) === "TSTypeParameter" && te.constraint)
              return G.prettierIgnore = true, S.unignore = true, true;
          }
          __name(ce, "ce");
          function U(ye) {
            let { comment: S, precedingNode: G, enclosingNode: te, followingNode: Ee } = ye;
            return (te == null ? void 0 : te.type) !== "TSMappedType" ? false : (Ee == null ? void 0 : Ee.type) === "TSTypeParameter" && Ee.name ? (i(Ee.name, S), true) : (G == null ? void 0 : G.type) === "TSTypeParameter" && G.constraint ? (l(G.constraint, S), true) : false;
          }
          __name(U, "U");
          function de(ye) {
            let { comment: S, enclosingNode: G, followingNode: te } = ye;
            return !G || G.type !== "SwitchCase" || G.test ? false : (te.type === "BlockStatement" && R(S) ? N(te, S) : c(G, S), true);
          }
          __name(de, "de");
          function De(ye) {
            return ye.type === "ArrowFunctionExpression" || ye.type === "FunctionExpression" || ye.type === "FunctionDeclaration" || ye.type === "ObjectMethod" || ye.type === "ClassMethod" || ye.type === "TSDeclareFunction" || ye.type === "TSCallSignatureDeclaration" || ye.type === "TSConstructSignatureDeclaration" || ye.type === "TSMethodSignature" || ye.type === "TSConstructorType" || ye.type === "TSFunctionType" || ye.type === "TSDeclareMethod";
          }
          __name(De, "De");
          function he(ye, S) {
            if ((S.parser === "typescript" || S.parser === "flow" || S.parser === "acorn" || S.parser === "espree" || S.parser === "meriyah" || S.parser === "__babel_estree") && ye.type === "MethodDefinition" && ye.value && ye.value.type === "FunctionExpression" && g(ye.value).length === 0 && !ye.value.returnType && !h(ye.value.typeParameters) && ye.value.body)
              return [...ye.decorators || [], ye.key, ye.value.body];
          }
          __name(he, "he");
          function Be(ye) {
            return d(ye) && ye.value[0] === "*" && /@type\b/.test(ye.value);
          }
          __name(Be, "Be");
          function Se(ye) {
            let S = ye.getValue(), G = ye.getParentNode(), te = /* @__PURE__ */ __name((Ee) => w(f(Ee, x.Leading)) || w(f(Ee, x.Trailing)), "te");
            return (S && (D(S) || v(S) || B(G) && te(S)) || G && (G.type === "JSXSpreadAttribute" || G.type === "JSXSpreadChild" || G.type === "UnionTypeAnnotation" || G.type === "TSUnionType" || (G.type === "ClassDeclaration" || G.type === "ClassExpression") && G.superClass === S)) && (!T(ye) || G.type === "UnionTypeAnnotation" || G.type === "TSUnionType");
          }
          __name(Se, "Se");
          n.exports = { handleOwnLineComment: C, handleEndOfLineComment: _, handleRemainingComment: b, isTypeCastComment: Be, getCommentChildNodes: he, willPrintOwnComments: Se };
        } }), Ot = ee({ "src/language-js/needs-parens.js"(e, n) {
          "use strict";
          re();
          var t = lt(), s = $n(), { getFunctionParameters: a, getLeftSidePathName: r, hasFlowShorthandAnnotationComment: u, hasNakedLeftSide: i, hasNode: l, isBitwiseOperator: c, startsWithNoLookaheadToken: y, shouldFlatten: h, getPrecedence: g, isCallExpression: p, isMemberExpression: D, isObjectProperty: v, isTSTypeExpression: w } = Ke();
          function T(f, x) {
            let m = f.getParentNode();
            if (!m)
              return false;
            let E = f.getName(), o = f.getNode();
            if (x.__isInHtmlInterpolation && !x.bracketSpacing && I(o) && P(f))
              return true;
            if (F(o))
              return false;
            if (x.parser !== "flow" && u(f.getValue()))
              return true;
            if (o.type === "Identifier")
              return !!(o.extra && o.extra.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(o.name) || E === "left" && o.name === "async" && m.type === "ForOfStatement" && !m.await);
            switch (m.type) {
              case "ParenthesizedExpression":
                return false;
              case "ClassDeclaration":
              case "ClassExpression": {
                if (E === "superClass" && (o.type === "ArrowFunctionExpression" || o.type === "AssignmentExpression" || o.type === "AwaitExpression" || o.type === "BinaryExpression" || o.type === "ConditionalExpression" || o.type === "LogicalExpression" || o.type === "NewExpression" || o.type === "ObjectExpression" || o.type === "SequenceExpression" || o.type === "TaggedTemplateExpression" || o.type === "UnaryExpression" || o.type === "UpdateExpression" || o.type === "YieldExpression" || o.type === "TSNonNullExpression"))
                  return true;
                break;
              }
              case "ExportDefaultDeclaration":
                return R(f, x) || o.type === "SequenceExpression";
              case "Decorator": {
                if (E === "expression") {
                  let d = false, C = false, _ = o;
                  for (; _; )
                    switch (_.type) {
                      case "MemberExpression":
                        C = true, _ = _.object;
                        break;
                      case "CallExpression":
                        if (C || d)
                          return x.parser !== "typescript";
                        d = true, _ = _.callee;
                        break;
                      case "Identifier":
                        return false;
                      case "TaggedTemplateExpression":
                        return x.parser !== "typescript";
                      default:
                        return true;
                    }
                  return true;
                }
                break;
              }
              case "ExpressionStatement": {
                if (y(o, true))
                  return true;
                break;
              }
              case "ArrowFunctionExpression": {
                if (E === "body" && o.type !== "SequenceExpression" && y(o, false))
                  return true;
                break;
              }
            }
            switch (o.type) {
              case "UpdateExpression":
                if (m.type === "UnaryExpression")
                  return o.prefix && (o.operator === "++" && m.operator === "+" || o.operator === "--" && m.operator === "-");
              case "UnaryExpression":
                switch (m.type) {
                  case "UnaryExpression":
                    return o.operator === m.operator && (o.operator === "+" || o.operator === "-");
                  case "BindExpression":
                    return true;
                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return E === "object";
                  case "TaggedTemplateExpression":
                    return true;
                  case "NewExpression":
                  case "CallExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "BinaryExpression":
                    return E === "left" && m.operator === "**";
                  case "TSNonNullExpression":
                    return true;
                  default:
                    return false;
                }
              case "BinaryExpression": {
                if (m.type === "UpdateExpression" || o.operator === "in" && A(f))
                  return true;
                if (o.operator === "|>" && o.extra && o.extra.parenthesized) {
                  let d = f.getParentNode(1);
                  if (d.type === "BinaryExpression" && d.operator === "|>")
                    return true;
                }
              }
              case "TSTypeAssertion":
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "LogicalExpression":
                switch (m.type) {
                  case "TSSatisfiesExpression":
                  case "TSAsExpression":
                    return !w(o);
                  case "ConditionalExpression":
                    return w(o);
                  case "CallExpression":
                  case "NewExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "ClassExpression":
                  case "ClassDeclaration":
                    return E === "superClass";
                  case "TSTypeAssertion":
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "JSXSpreadAttribute":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BindExpression":
                  case "AwaitExpression":
                  case "TSNonNullExpression":
                  case "UpdateExpression":
                    return true;
                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return E === "object";
                  case "AssignmentExpression":
                  case "AssignmentPattern":
                    return E === "left" && (o.type === "TSTypeAssertion" || w(o));
                  case "LogicalExpression":
                    if (o.type === "LogicalExpression")
                      return m.operator !== o.operator;
                  case "BinaryExpression": {
                    let { operator: d, type: C } = o;
                    if (!d && C !== "TSTypeAssertion")
                      return true;
                    let _ = g(d), b = m.operator, N = g(b);
                    return N > _ || E === "right" && N === _ || N === _ && !h(b, d) ? true : N < _ && d === "%" ? b === "+" || b === "-" : !!c(b);
                  }
                  default:
                    return false;
                }
              case "SequenceExpression":
                switch (m.type) {
                  case "ReturnStatement":
                    return false;
                  case "ForStatement":
                    return false;
                  case "ExpressionStatement":
                    return E !== "expression";
                  case "ArrowFunctionExpression":
                    return E !== "body";
                  default:
                    return true;
                }
              case "YieldExpression":
                if (m.type === "UnaryExpression" || m.type === "AwaitExpression" || w(m) || m.type === "TSNonNullExpression")
                  return true;
              case "AwaitExpression":
                switch (m.type) {
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "LogicalExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "TSAsExpression":
                  case "TSSatisfiesExpression":
                  case "TSNonNullExpression":
                  case "BindExpression":
                    return true;
                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return E === "object";
                  case "NewExpression":
                  case "CallExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "ConditionalExpression":
                    return E === "test";
                  case "BinaryExpression":
                    return !(!o.argument && m.operator === "|>");
                  default:
                    return false;
                }
              case "TSConditionalType":
                if (E === "extendsType" && m.type === "TSConditionalType")
                  return true;
              case "TSFunctionType":
              case "TSConstructorType":
                if (E === "extendsType" && m.type === "TSConditionalType") {
                  let d = (o.returnType || o.typeAnnotation).typeAnnotation;
                  if (d.type === "TSInferType" && d.typeParameter.constraint)
                    return true;
                }
                if (E === "checkType" && m.type === "TSConditionalType")
                  return true;
              case "TSUnionType":
              case "TSIntersectionType":
                if ((m.type === "TSUnionType" || m.type === "TSIntersectionType") && m.types.length > 1 && (!o.types || o.types.length > 1))
                  return true;
              case "TSInferType":
                if (o.type === "TSInferType" && m.type === "TSRestType")
                  return false;
              case "TSTypeOperator":
                return m.type === "TSArrayType" || m.type === "TSOptionalType" || m.type === "TSRestType" || E === "objectType" && m.type === "TSIndexedAccessType" || m.type === "TSTypeOperator" || m.type === "TSTypeAnnotation" && f.getParentNode(1).type.startsWith("TSJSDoc");
              case "ArrayTypeAnnotation":
                return m.type === "NullableTypeAnnotation";
              case "IntersectionTypeAnnotation":
              case "UnionTypeAnnotation":
                return m.type === "ArrayTypeAnnotation" || m.type === "NullableTypeAnnotation" || m.type === "IntersectionTypeAnnotation" || m.type === "UnionTypeAnnotation" || E === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType");
              case "NullableTypeAnnotation":
                return m.type === "ArrayTypeAnnotation" || E === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType");
              case "FunctionTypeAnnotation": {
                let d = m.type === "NullableTypeAnnotation" ? f.getParentNode(1) : m;
                return d.type === "UnionTypeAnnotation" || d.type === "IntersectionTypeAnnotation" || d.type === "ArrayTypeAnnotation" || E === "objectType" && (d.type === "IndexedAccessType" || d.type === "OptionalIndexedAccessType") || d.type === "NullableTypeAnnotation" || m.type === "FunctionTypeParam" && m.name === null && a(o).some((C) => C.typeAnnotation && C.typeAnnotation.type === "NullableTypeAnnotation");
              }
              case "OptionalIndexedAccessType":
                return E === "objectType" && m.type === "IndexedAccessType";
              case "TypeofTypeAnnotation":
                return E === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType");
              case "StringLiteral":
              case "NumericLiteral":
              case "Literal":
                if (typeof o.value == "string" && m.type === "ExpressionStatement" && !m.directive) {
                  let d = f.getParentNode(1);
                  return d.type === "Program" || d.type === "BlockStatement";
                }
                return E === "object" && m.type === "MemberExpression" && typeof o.value == "number";
              case "AssignmentExpression": {
                let d = f.getParentNode(1);
                return E === "body" && m.type === "ArrowFunctionExpression" ? true : E === "key" && (m.type === "ClassProperty" || m.type === "PropertyDefinition") && m.computed || (E === "init" || E === "update") && m.type === "ForStatement" ? false : m.type === "ExpressionStatement" ? o.left.type === "ObjectPattern" : !(E === "key" && m.type === "TSPropertySignature" || m.type === "AssignmentExpression" || m.type === "SequenceExpression" && d && d.type === "ForStatement" && (d.init === m || d.update === m) || E === "value" && m.type === "Property" && d && d.type === "ObjectPattern" && d.properties.includes(m) || m.type === "NGChainedExpression");
              }
              case "ConditionalExpression":
                switch (m.type) {
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BinaryExpression":
                  case "LogicalExpression":
                  case "NGPipeExpression":
                  case "ExportDefaultDeclaration":
                  case "AwaitExpression":
                  case "JSXSpreadAttribute":
                  case "TSTypeAssertion":
                  case "TypeCastExpression":
                  case "TSAsExpression":
                  case "TSSatisfiesExpression":
                  case "TSNonNullExpression":
                    return true;
                  case "NewExpression":
                  case "CallExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "ConditionalExpression":
                    return E === "test";
                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return E === "object";
                  default:
                    return false;
                }
              case "FunctionExpression":
                switch (m.type) {
                  case "NewExpression":
                  case "CallExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "TaggedTemplateExpression":
                    return true;
                  default:
                    return false;
                }
              case "ArrowFunctionExpression":
                switch (m.type) {
                  case "BinaryExpression":
                    return m.operator !== "|>" || o.extra && o.extra.parenthesized;
                  case "NewExpression":
                  case "CallExpression":
                  case "OptionalCallExpression":
                    return E === "callee";
                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return E === "object";
                  case "TSAsExpression":
                  case "TSSatisfiesExpression":
                  case "TSNonNullExpression":
                  case "BindExpression":
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "LogicalExpression":
                  case "AwaitExpression":
                  case "TSTypeAssertion":
                    return true;
                  case "ConditionalExpression":
                    return E === "test";
                  default:
                    return false;
                }
              case "ClassExpression":
                if (s(o.decorators))
                  return true;
                switch (m.type) {
                  case "NewExpression":
                    return E === "callee";
                  default:
                    return false;
                }
              case "OptionalMemberExpression":
              case "OptionalCallExpression": {
                let d = f.getParentNode(1);
                if (E === "object" && m.type === "MemberExpression" || E === "callee" && (m.type === "CallExpression" || m.type === "NewExpression") || m.type === "TSNonNullExpression" && d.type === "MemberExpression" && d.object === m)
                  return true;
              }
              case "CallExpression":
              case "MemberExpression":
              case "TaggedTemplateExpression":
              case "TSNonNullExpression":
                if (E === "callee" && (m.type === "BindExpression" || m.type === "NewExpression")) {
                  let d = o;
                  for (; d; )
                    switch (d.type) {
                      case "CallExpression":
                      case "OptionalCallExpression":
                        return true;
                      case "MemberExpression":
                      case "OptionalMemberExpression":
                      case "BindExpression":
                        d = d.object;
                        break;
                      case "TaggedTemplateExpression":
                        d = d.tag;
                        break;
                      case "TSNonNullExpression":
                        d = d.expression;
                        break;
                      default:
                        return false;
                    }
                }
                return false;
              case "BindExpression":
                return E === "callee" && (m.type === "BindExpression" || m.type === "NewExpression") || E === "object" && D(m);
              case "NGPipeExpression":
                return !(m.type === "NGRoot" || m.type === "NGMicrosyntaxExpression" || m.type === "ObjectProperty" && !(o.extra && o.extra.parenthesized) || m.type === "ArrayExpression" || p(m) && m.arguments[E] === o || E === "right" && m.type === "NGPipeExpression" || E === "property" && m.type === "MemberExpression" || m.type === "AssignmentExpression");
              case "JSXFragment":
              case "JSXElement":
                return E === "callee" || E === "left" && m.type === "BinaryExpression" && m.operator === "<" || m.type !== "ArrayExpression" && m.type !== "ArrowFunctionExpression" && m.type !== "AssignmentExpression" && m.type !== "AssignmentPattern" && m.type !== "BinaryExpression" && m.type !== "NewExpression" && m.type !== "ConditionalExpression" && m.type !== "ExpressionStatement" && m.type !== "JsExpressionRoot" && m.type !== "JSXAttribute" && m.type !== "JSXElement" && m.type !== "JSXExpressionContainer" && m.type !== "JSXFragment" && m.type !== "LogicalExpression" && !p(m) && !v(m) && m.type !== "ReturnStatement" && m.type !== "ThrowStatement" && m.type !== "TypeCastExpression" && m.type !== "VariableDeclarator" && m.type !== "YieldExpression";
              case "TypeAnnotation":
                return E === "returnType" && m.type === "ArrowFunctionExpression" && B(o);
            }
            return false;
          }
          __name(T, "T");
          function F(f) {
            return f.type === "BlockStatement" || f.type === "BreakStatement" || f.type === "ClassBody" || f.type === "ClassDeclaration" || f.type === "ClassMethod" || f.type === "ClassProperty" || f.type === "PropertyDefinition" || f.type === "ClassPrivateProperty" || f.type === "ContinueStatement" || f.type === "DebuggerStatement" || f.type === "DeclareClass" || f.type === "DeclareExportAllDeclaration" || f.type === "DeclareExportDeclaration" || f.type === "DeclareFunction" || f.type === "DeclareInterface" || f.type === "DeclareModule" || f.type === "DeclareModuleExports" || f.type === "DeclareVariable" || f.type === "DoWhileStatement" || f.type === "EnumDeclaration" || f.type === "ExportAllDeclaration" || f.type === "ExportDefaultDeclaration" || f.type === "ExportNamedDeclaration" || f.type === "ExpressionStatement" || f.type === "ForInStatement" || f.type === "ForOfStatement" || f.type === "ForStatement" || f.type === "FunctionDeclaration" || f.type === "IfStatement" || f.type === "ImportDeclaration" || f.type === "InterfaceDeclaration" || f.type === "LabeledStatement" || f.type === "MethodDefinition" || f.type === "ReturnStatement" || f.type === "SwitchStatement" || f.type === "ThrowStatement" || f.type === "TryStatement" || f.type === "TSDeclareFunction" || f.type === "TSEnumDeclaration" || f.type === "TSImportEqualsDeclaration" || f.type === "TSInterfaceDeclaration" || f.type === "TSModuleDeclaration" || f.type === "TSNamespaceExportDeclaration" || f.type === "TypeAlias" || f.type === "VariableDeclaration" || f.type === "WhileStatement" || f.type === "WithStatement";
          }
          __name(F, "F");
          function A(f) {
            let x = 0, m = f.getValue();
            for (; m; ) {
              let E = f.getParentNode(x++);
              if (E && E.type === "ForStatement" && E.init === m)
                return true;
              m = E;
            }
            return false;
          }
          __name(A, "A");
          function B(f) {
            return l(f, (x) => x.type === "ObjectTypeAnnotation" && l(x, (m) => m.type === "FunctionTypeAnnotation" || void 0) || void 0);
          }
          __name(B, "B");
          function I(f) {
            switch (f.type) {
              case "ObjectExpression":
                return true;
              default:
                return false;
            }
          }
          __name(I, "I");
          function P(f) {
            let x = f.getValue(), m = f.getParentNode(), E = f.getName();
            switch (m.type) {
              case "NGPipeExpression":
                if (typeof E == "number" && m.arguments[E] === x && m.arguments.length - 1 === E)
                  return f.callParent(P);
                break;
              case "ObjectProperty":
                if (E === "value") {
                  let o = f.getParentNode(1);
                  return t(o.properties) === m;
                }
                break;
              case "BinaryExpression":
              case "LogicalExpression":
                if (E === "right")
                  return f.callParent(P);
                break;
              case "ConditionalExpression":
                if (E === "alternate")
                  return f.callParent(P);
                break;
              case "UnaryExpression":
                if (m.prefix)
                  return f.callParent(P);
                break;
            }
            return false;
          }
          __name(P, "P");
          function R(f, x) {
            let m = f.getValue(), E = f.getParentNode();
            return m.type === "FunctionExpression" || m.type === "ClassExpression" ? E.type === "ExportDefaultDeclaration" || !T(f, x) : !i(m) || E.type !== "ExportDefaultDeclaration" && T(f, x) ? false : f.call((o) => R(o, x), ...r(f, m));
          }
          __name(R, "R");
          n.exports = T;
        } }), eo = ee({ "src/language-js/print-preprocess.js"(e, n) {
          "use strict";
          re();
          function t(s, a) {
            switch (a.parser) {
              case "json":
              case "json5":
              case "json-stringify":
              case "__js_expression":
              case "__vue_expression":
              case "__vue_ts_expression":
                return Object.assign(Object.assign({}, s), {}, { type: a.parser.startsWith("__") ? "JsExpressionRoot" : "JsonRoot", node: s, comments: [], rootMarker: a.rootMarker });
              default:
                return s;
            }
          }
          __name(t, "t");
          n.exports = t;
        } }), qm = ee({ "src/language-js/print/html-binding.js"(e, n) {
          "use strict";
          re();
          var { builders: { join: t, line: s, group: a, softline: r, indent: u } } = qe();
          function i(c, y, h) {
            let g = c.getValue();
            if (y.__onHtmlBindingRoot && c.getName() === null && y.__onHtmlBindingRoot(g, y), g.type === "File") {
              if (y.__isVueForBindingLeft)
                return c.call((p) => {
                  let D = t([",", s], p.map(h, "params")), { params: v } = p.getValue();
                  return v.length === 1 ? D : ["(", u([r, a(D)]), r, ")"];
                }, "program", "body", 0);
              if (y.__isVueBindings)
                return c.call((p) => t([",", s], p.map(h, "params")), "program", "body", 0);
            }
          }
          __name(i, "i");
          function l(c) {
            switch (c.type) {
              case "MemberExpression":
                switch (c.property.type) {
                  case "Identifier":
                  case "NumericLiteral":
                  case "StringLiteral":
                    return l(c.object);
                }
                return false;
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          __name(l, "l");
          n.exports = { isVueEventBindingExpression: l, printHtmlBinding: i };
        } }), Jn = ee({ "src/language-js/print/binaryish.js"(e, n) {
          "use strict";
          re();
          var { printComments: t } = et(), { getLast: s } = Ge(), { builders: { join: a, line: r, softline: u, group: i, indent: l, align: c, indentIfBreak: y }, utils: { cleanDoc: h, getDocParts: g, isConcat: p } } = qe(), { hasLeadingOwnLineComment: D, isBinaryish: v, isJsxNode: w, shouldFlatten: T, hasComment: F, CommentCheckFlags: A, isCallExpression: B, isMemberExpression: I, isObjectProperty: P, isEnabledHackPipeline: R } = Ke(), f = 0;
          function x(o, d, C) {
            let _ = o.getValue(), b = o.getParentNode(), N = o.getParentNode(1), k = _ !== b.body && (b.type === "IfStatement" || b.type === "WhileStatement" || b.type === "SwitchStatement" || b.type === "DoWhileStatement"), $ = R(d) && _.operator === "|>", M = m(o, C, d, false, k);
            if (k)
              return M;
            if ($)
              return i(M);
            if (B(b) && b.callee === _ || b.type === "UnaryExpression" || I(b) && !b.computed)
              return i([l([u, ...M]), u]);
            let q = b.type === "ReturnStatement" || b.type === "ThrowStatement" || b.type === "JSXExpressionContainer" && N.type === "JSXAttribute" || _.operator !== "|" && b.type === "JsExpressionRoot" || _.type !== "NGPipeExpression" && (b.type === "NGRoot" && d.parser === "__ng_binding" || b.type === "NGMicrosyntaxExpression" && N.type === "NGMicrosyntax" && N.body.length === 1) || _ === b.body && b.type === "ArrowFunctionExpression" || _ !== b.body && b.type === "ForStatement" || b.type === "ConditionalExpression" && N.type !== "ReturnStatement" && N.type !== "ThrowStatement" && !B(N) || b.type === "TemplateLiteral", J = b.type === "AssignmentExpression" || b.type === "VariableDeclarator" || b.type === "ClassProperty" || b.type === "PropertyDefinition" || b.type === "TSAbstractPropertyDefinition" || b.type === "ClassPrivateProperty" || P(b), L = v(_.left) && T(_.operator, _.left.operator);
            if (q || E(_) && !L || !E(_) && J)
              return i(M);
            if (M.length === 0)
              return "";
            let Y = w(_.right), V = M.findIndex((W) => typeof W != "string" && !Array.isArray(W) && W.type === "group"), O = M.slice(0, V === -1 ? 1 : V + 1), K = M.slice(O.length, Y ? -1 : void 0), se = Symbol("logicalChain-" + ++f), Q = i([...O, l(K)], { id: se });
            if (!Y)
              return Q;
            let le = s(M);
            return i([Q, y(le, { groupId: se })]);
          }
          __name(x, "x");
          function m(o, d, C, _, b) {
            let N = o.getValue();
            if (!v(N))
              return [i(d())];
            let k = [];
            T(N.operator, N.left.operator) ? k = o.call((K) => m(K, d, C, true, b), "left") : k.push(i(d("left")));
            let $ = E(N), M = (N.operator === "|>" || N.type === "NGPipeExpression" || N.operator === "|" && C.parser === "__vue_expression") && !D(C.originalText, N.right), q = N.type === "NGPipeExpression" ? "|" : N.operator, J = N.type === "NGPipeExpression" && N.arguments.length > 0 ? i(l([r, ": ", a([r, ": "], o.map(d, "arguments").map((K) => c(2, i(K))))])) : "", L;
            if ($)
              L = [q, " ", d("right"), J];
            else {
              let se = R(C) && q === "|>" ? o.call((Q) => m(Q, d, C, true, b), "right") : d("right");
              L = [M ? r : "", q, M ? " " : r, se, J];
            }
            let Y = o.getParentNode(), V = F(N.left, A.Trailing | A.Line), O = V || !(b && N.type === "LogicalExpression") && Y.type !== N.type && N.left.type !== N.type && N.right.type !== N.type;
            if (k.push(M ? "" : " ", O ? i(L, { shouldBreak: V }) : L), _ && F(N)) {
              let K = h(t(o, k, C));
              return p(K) || K.type === "fill" ? g(K) : [K];
            }
            return k;
          }
          __name(m, "m");
          function E(o) {
            return o.type !== "LogicalExpression" ? false : !!(o.right.type === "ObjectExpression" && o.right.properties.length > 0 || o.right.type === "ArrayExpression" && o.right.elements.length > 0 || w(o.right));
          }
          __name(E, "E");
          n.exports = { printBinaryishExpression: x, shouldInlineLogicalExpression: E };
        } }), Mm = ee({ "src/language-js/print/angular.js"(e, n) {
          "use strict";
          re();
          var { builders: { join: t, line: s, group: a } } = qe(), { hasNode: r, hasComment: u, getComments: i } = Ke(), { printBinaryishExpression: l } = Jn();
          function c(g, p, D) {
            let v = g.getValue();
            if (!!v.type.startsWith("NG"))
              switch (v.type) {
                case "NGRoot":
                  return [D("node"), u(v.node) ? " //" + i(v.node)[0].value.trimEnd() : ""];
                case "NGPipeExpression":
                  return l(g, p, D);
                case "NGChainedExpression":
                  return a(t([";", s], g.map((w) => h(w) ? D() : ["(", D(), ")"], "expressions")));
                case "NGEmptyExpression":
                  return "";
                case "NGQuotedExpression":
                  return [v.prefix, ": ", v.value.trim()];
                case "NGMicrosyntax":
                  return g.map((w, T) => [T === 0 ? "" : y(w.getValue(), T, v) ? " " : [";", s], D()], "body");
                case "NGMicrosyntaxKey":
                  return /^[$_a-z][\w$]*(?:-[$_a-z][\w$])*$/i.test(v.name) ? v.name : JSON.stringify(v.name);
                case "NGMicrosyntaxExpression":
                  return [D("expression"), v.alias === null ? "" : [" as ", D("alias")]];
                case "NGMicrosyntaxKeyedExpression": {
                  let w = g.getName(), T = g.getParentNode(), F = y(v, w, T) || (w === 1 && (v.key.name === "then" || v.key.name === "else") || w === 2 && v.key.name === "else" && T.body[w - 1].type === "NGMicrosyntaxKeyedExpression" && T.body[w - 1].key.name === "then") && T.body[0].type === "NGMicrosyntaxExpression";
                  return [D("key"), F ? " " : ": ", D("expression")];
                }
                case "NGMicrosyntaxLet":
                  return ["let ", D("key"), v.value === null ? "" : [" = ", D("value")]];
                case "NGMicrosyntaxAs":
                  return [D("key"), " as ", D("alias")];
                default:
                  throw new Error(`Unknown Angular node type: ${JSON.stringify(v.type)}.`);
              }
          }
          __name(c, "c");
          function y(g, p, D) {
            return g.type === "NGMicrosyntaxKeyedExpression" && g.key.name === "of" && p === 1 && D.body[0].type === "NGMicrosyntaxLet" && D.body[0].value === null;
          }
          __name(y, "y");
          function h(g) {
            return r(g.getValue(), (p) => {
              switch (p.type) {
                case void 0:
                  return false;
                case "CallExpression":
                case "OptionalCallExpression":
                case "AssignmentExpression":
                  return true;
              }
            });
          }
          __name(h, "h");
          n.exports = { printAngular: c };
        } }), Rm = ee({ "src/language-js/print/jsx.js"(e, n) {
          "use strict";
          re();
          var { printComments: t, printDanglingComments: s } = et(), { builders: { line: a, hardline: r, softline: u, group: i, indent: l, conditionalGroup: c, fill: y, ifBreak: h, lineSuffixBoundary: g, join: p }, utils: { willBreak: D } } = qe(), { getLast: v, getPreferredQuote: w } = Ge(), { isJsxNode: T, rawText: F, isLiteral: A, isCallExpression: B, isStringLiteral: I, isBinaryish: P, hasComment: R, CommentCheckFlags: f, hasNodeIgnoreComment: x } = Ke(), m = Ot(), { willPrintOwnComments: E } = Za(), o = /* @__PURE__ */ __name((H) => H === "" || H === a || H === r || H === u, "o");
          function d(H, Z, ne) {
            let fe = H.getValue();
            if (fe.type === "JSXElement" && oe(fe))
              return [ne("openingElement"), ne("closingElement")];
            let ge = fe.type === "JSXElement" ? ne("openingElement") : ne("openingFragment"), Ce = fe.type === "JSXElement" ? ne("closingElement") : ne("closingFragment");
            if (fe.children.length === 1 && fe.children[0].type === "JSXExpressionContainer" && (fe.children[0].expression.type === "TemplateLiteral" || fe.children[0].expression.type === "TaggedTemplateExpression"))
              return [ge, ...H.map(ne, "children"), Ce];
            fe.children = fe.children.map((S) => Ae(S) ? { type: "JSXText", value: " ", raw: " " } : S);
            let _e = fe.children.some(T), Oe = fe.children.filter((S) => S.type === "JSXExpressionContainer").length > 1, pe = fe.type === "JSXElement" && fe.openingElement.attributes.length > 1, ie = D(ge) || _e || pe || Oe, ve = H.getParentNode().rootMarker === "mdx", ce = Z.singleQuote ? "{' '}" : '{" "}', U = ve ? " " : h([ce, u], " "), de = fe.openingElement && fe.openingElement.name && fe.openingElement.name.name === "fbt", De = C(H, Z, ne, U, de), he = fe.children.some((S) => ae(S));
            for (let S = De.length - 2; S >= 0; S--) {
              let G = De[S] === "" && De[S + 1] === "", te = De[S] === r && De[S + 1] === "" && De[S + 2] === r, Ee = (De[S] === u || De[S] === r) && De[S + 1] === "" && De[S + 2] === U, Re = De[S] === U && De[S + 1] === "" && (De[S + 2] === u || De[S + 2] === r), Te = De[S] === U && De[S + 1] === "" && De[S + 2] === U, Pe = De[S] === u && De[S + 1] === "" && De[S + 2] === r || De[S] === r && De[S + 1] === "" && De[S + 2] === u;
              te && he || G || Ee || Te || Pe ? De.splice(S, 2) : Re && De.splice(S + 1, 2);
            }
            for (; De.length > 0 && o(v(De)); )
              De.pop();
            for (; De.length > 1 && o(De[0]) && o(De[1]); )
              De.shift(), De.shift();
            let Be = [];
            for (let [S, G] of De.entries()) {
              if (G === U) {
                if (S === 1 && De[S - 1] === "") {
                  if (De.length === 2) {
                    Be.push(ce);
                    continue;
                  }
                  Be.push([ce, r]);
                  continue;
                } else if (S === De.length - 1) {
                  Be.push(ce);
                  continue;
                } else if (De[S - 1] === "" && De[S - 2] === r) {
                  Be.push(ce);
                  continue;
                }
              }
              Be.push(G), D(G) && (ie = true);
            }
            let Se = he ? y(Be) : i(Be, { shouldBreak: true });
            if (ve)
              return Se;
            let ye = i([ge, l([r, Se]), r, Ce]);
            return ie ? ye : c([i([ge, ...De, Ce]), ye]);
          }
          __name(d, "d");
          function C(H, Z, ne, fe, ge) {
            let Ce = [];
            return H.each((_e, Oe, pe) => {
              let ie = _e.getValue();
              if (A(ie)) {
                let ve = F(ie);
                if (ae(ie)) {
                  let ce = ve.split(le);
                  if (ce[0] === "") {
                    if (Ce.push(""), ce.shift(), /\n/.test(ce[0])) {
                      let de = pe[Oe + 1];
                      Ce.push(b(ge, ce[1], ie, de));
                    } else
                      Ce.push(fe);
                    ce.shift();
                  }
                  let U;
                  if (v(ce) === "" && (ce.pop(), U = ce.pop()), ce.length === 0)
                    return;
                  for (let [de, De] of ce.entries())
                    de % 2 === 1 ? Ce.push(a) : Ce.push(De);
                  if (U !== void 0)
                    if (/\n/.test(U)) {
                      let de = pe[Oe + 1];
                      Ce.push(b(ge, v(Ce), ie, de));
                    } else
                      Ce.push(fe);
                  else {
                    let de = pe[Oe + 1];
                    Ce.push(_(ge, v(Ce), ie, de));
                  }
                } else
                  /\n/.test(ve) ? ve.match(/\n/g).length > 1 && Ce.push("", r) : Ce.push("", fe);
              } else {
                let ve = ne();
                Ce.push(ve);
                let ce = pe[Oe + 1];
                if (ce && ae(ce)) {
                  let de = X(F(ce)).split(le)[0];
                  Ce.push(_(ge, de, ie, ce));
                } else
                  Ce.push(r);
              }
            }, "children"), Ce;
          }
          __name(C, "C");
          function _(H, Z, ne, fe) {
            return H ? "" : ne.type === "JSXElement" && !ne.closingElement || fe && fe.type === "JSXElement" && !fe.closingElement ? Z.length === 1 ? u : r : u;
          }
          __name(_, "_");
          function b(H, Z, ne, fe) {
            return H ? r : Z.length === 1 ? ne.type === "JSXElement" && !ne.closingElement || fe && fe.type === "JSXElement" && !fe.closingElement ? r : u : r;
          }
          __name(b, "b");
          function N(H, Z, ne) {
            let fe = H.getParentNode();
            if (!fe || { ArrayExpression: true, JSXAttribute: true, JSXElement: true, JSXExpressionContainer: true, JSXFragment: true, ExpressionStatement: true, CallExpression: true, OptionalCallExpression: true, ConditionalExpression: true, JsExpressionRoot: true }[fe.type])
              return Z;
            let Ce = H.match(void 0, (Oe) => Oe.type === "ArrowFunctionExpression", B, (Oe) => Oe.type === "JSXExpressionContainer"), _e = m(H, ne);
            return i([_e ? "" : h("("), l([u, Z]), u, _e ? "" : h(")")], { shouldBreak: Ce });
          }
          __name(N, "N");
          function k(H, Z, ne) {
            let fe = H.getValue(), ge = [];
            if (ge.push(ne("name")), fe.value) {
              let Ce;
              if (I(fe.value)) {
                let Oe = F(fe.value).slice(1, -1).replace(/&apos;/g, "'").replace(/&quot;/g, '"'), { escaped: pe, quote: ie, regex: ve } = w(Oe, Z.jsxSingleQuote ? "'" : '"');
                Oe = Oe.replace(ve, pe), Ce = [ie, Oe, ie];
              } else
                Ce = ne("value");
              ge.push("=", Ce);
            }
            return ge;
          }
          __name(k, "k");
          function $(H, Z, ne) {
            let fe = H.getValue(), ge = /* @__PURE__ */ __name((Ce, _e) => Ce.type === "JSXEmptyExpression" || !R(Ce) && (Ce.type === "ArrayExpression" || Ce.type === "ObjectExpression" || Ce.type === "ArrowFunctionExpression" || Ce.type === "AwaitExpression" && (ge(Ce.argument, Ce) || Ce.argument.type === "JSXElement") || B(Ce) || Ce.type === "FunctionExpression" || Ce.type === "TemplateLiteral" || Ce.type === "TaggedTemplateExpression" || Ce.type === "DoExpression" || T(_e) && (Ce.type === "ConditionalExpression" || P(Ce))), "ge");
            return ge(fe.expression, H.getParentNode(0)) ? i(["{", ne("expression"), g, "}"]) : i(["{", l([u, ne("expression")]), u, g, "}"]);
          }
          __name($, "$");
          function M(H, Z, ne) {
            let fe = H.getValue(), ge = fe.name && R(fe.name) || fe.typeParameters && R(fe.typeParameters);
            if (fe.selfClosing && fe.attributes.length === 0 && !ge)
              return ["<", ne("name"), ne("typeParameters"), " />"];
            if (fe.attributes && fe.attributes.length === 1 && fe.attributes[0].value && I(fe.attributes[0].value) && !fe.attributes[0].value.value.includes(`
`) && !ge && !R(fe.attributes[0]))
              return i(["<", ne("name"), ne("typeParameters"), " ", ...H.map(ne, "attributes"), fe.selfClosing ? " />" : ">"]);
            let Ce = fe.attributes && fe.attributes.some((Oe) => Oe.value && I(Oe.value) && Oe.value.value.includes(`
`)), _e = Z.singleAttributePerLine && fe.attributes.length > 1 ? r : a;
            return i(["<", ne("name"), ne("typeParameters"), l(H.map(() => [_e, ne()], "attributes")), ...q(fe, Z, ge)], { shouldBreak: Ce });
          }
          __name(M, "M");
          function q(H, Z, ne) {
            return H.selfClosing ? [a, "/>"] : J(H, Z, ne) ? [">"] : [u, ">"];
          }
          __name(q, "q");
          function J(H, Z, ne) {
            let fe = H.attributes.length > 0 && R(v(H.attributes), f.Trailing);
            return H.attributes.length === 0 && !ne || (Z.bracketSameLine || Z.jsxBracketSameLine) && (!ne || H.attributes.length > 0) && !fe;
          }
          __name(J, "J");
          function L(H, Z, ne) {
            let fe = H.getValue(), ge = [];
            ge.push("</");
            let Ce = ne("name");
            return R(fe.name, f.Leading | f.Line) ? ge.push(l([r, Ce]), r) : R(fe.name, f.Leading | f.Block) ? ge.push(" ", Ce) : ge.push(Ce), ge.push(">"), ge;
          }
          __name(L, "L");
          function Y(H, Z) {
            let ne = H.getValue(), fe = R(ne), ge = R(ne, f.Line), Ce = ne.type === "JSXOpeningFragment";
            return [Ce ? "<" : "</", l([ge ? r : fe && !Ce ? " " : "", s(H, Z, true)]), ge ? r : "", ">"];
          }
          __name(Y, "Y");
          function V(H, Z, ne) {
            let fe = t(H, d(H, Z, ne), Z);
            return N(H, fe, Z);
          }
          __name(V, "V");
          function O(H, Z) {
            let ne = H.getValue(), fe = R(ne, f.Line);
            return [s(H, Z, !fe), fe ? r : ""];
          }
          __name(O, "O");
          function K(H, Z, ne) {
            let fe = H.getValue();
            return ["{", H.call((ge) => {
              let Ce = ["...", ne()], _e = ge.getValue();
              return !R(_e) || !E(ge) ? Ce : [l([u, t(ge, Ce, Z)]), u];
            }, fe.type === "JSXSpreadAttribute" ? "argument" : "expression"), "}"];
          }
          __name(K, "K");
          function se(H, Z, ne) {
            let fe = H.getValue();
            if (!!fe.type.startsWith("JSX"))
              switch (fe.type) {
                case "JSXAttribute":
                  return k(H, Z, ne);
                case "JSXIdentifier":
                  return String(fe.name);
                case "JSXNamespacedName":
                  return p(":", [ne("namespace"), ne("name")]);
                case "JSXMemberExpression":
                  return p(".", [ne("object"), ne("property")]);
                case "JSXSpreadAttribute":
                  return K(H, Z, ne);
                case "JSXSpreadChild":
                  return K(H, Z, ne);
                case "JSXExpressionContainer":
                  return $(H, Z, ne);
                case "JSXFragment":
                case "JSXElement":
                  return V(H, Z, ne);
                case "JSXOpeningElement":
                  return M(H, Z, ne);
                case "JSXClosingElement":
                  return L(H, Z, ne);
                case "JSXOpeningFragment":
                case "JSXClosingFragment":
                  return Y(H, Z);
                case "JSXEmptyExpression":
                  return O(H, Z);
                case "JSXText":
                  throw new Error("JSXTest should be handled by JSXElement");
                default:
                  throw new Error(`Unknown JSX node type: ${JSON.stringify(fe.type)}.`);
              }
          }
          __name(se, "se");
          var Q = ` 
\r	`, le = new RegExp("([" + Q + "]+)"), W = new RegExp("[^" + Q + "]"), X = /* @__PURE__ */ __name((H) => H.replace(new RegExp("(?:^" + le.source + "|" + le.source + "$)"), ""), "X");
          function oe(H) {
            if (H.children.length === 0)
              return true;
            if (H.children.length > 1)
              return false;
            let Z = H.children[0];
            return A(Z) && !ae(Z);
          }
          __name(oe, "oe");
          function ae(H) {
            return A(H) && (W.test(F(H)) || !/\n/.test(F(H)));
          }
          __name(ae, "ae");
          function Ae(H) {
            return H.type === "JSXExpressionContainer" && A(H.expression) && H.expression.value === " " && !R(H.expression);
          }
          __name(Ae, "Ae");
          function z(H) {
            let Z = H.getValue(), ne = H.getParentNode();
            if (!ne || !Z || !T(Z) || !T(ne))
              return false;
            let fe = ne.children.indexOf(Z), ge = null;
            for (let Ce = fe; Ce > 0; Ce--) {
              let _e = ne.children[Ce - 1];
              if (!(_e.type === "JSXText" && !ae(_e))) {
                ge = _e;
                break;
              }
            }
            return ge && ge.type === "JSXExpressionContainer" && ge.expression.type === "JSXEmptyExpression" && x(ge.expression);
          }
          __name(z, "z");
          n.exports = { hasJsxIgnoreComment: z, printJsx: se };
        } }), Dt = ee({ "src/language-js/print/misc.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t } = Ge(), { builders: { indent: s, join: a, line: r } } = qe(), { isFlowAnnotationComment: u } = Ke();
          function i(v) {
            let w = v.getValue();
            return !w.optional || w.type === "Identifier" && w === v.getParentNode().key ? "" : w.type === "OptionalCallExpression" || w.type === "OptionalMemberExpression" && w.computed ? "?." : "?";
          }
          __name(i, "i");
          function l(v) {
            return v.getValue().definite || v.match(void 0, (w, T) => T === "id" && w.type === "VariableDeclarator" && w.definite) ? "!" : "";
          }
          __name(l, "l");
          function c(v, w, T) {
            let F = v.getValue();
            return F.typeArguments ? T("typeArguments") : F.typeParameters ? T("typeParameters") : "";
          }
          __name(c, "c");
          function y(v, w, T) {
            let F = v.getValue();
            if (!F.typeAnnotation)
              return "";
            let A = v.getParentNode(), B = A.type === "DeclareFunction" && A.id === F;
            return u(w.originalText, F.typeAnnotation) ? [" /*: ", T("typeAnnotation"), " */"] : [B ? "" : ": ", T("typeAnnotation")];
          }
          __name(y, "y");
          function h(v, w, T) {
            return ["::", T("callee")];
          }
          __name(h, "h");
          function g(v, w, T) {
            let F = v.getValue();
            return t(F.modifiers) ? [a(" ", v.map(T, "modifiers")), " "] : "";
          }
          __name(g, "g");
          function p(v, w, T) {
            return v.type === "EmptyStatement" ? ";" : v.type === "BlockStatement" || T ? [" ", w] : s([r, w]);
          }
          __name(p, "p");
          function D(v, w, T) {
            return ["...", T("argument"), y(v, w, T)];
          }
          __name(D, "D");
          n.exports = { printOptionalToken: i, printDefiniteToken: l, printFunctionTypeParameters: c, printBindExpressionCallee: h, printTypeScriptModifiers: g, printTypeAnnotation: y, printRestSpread: D, adjustClause: p };
        } }), Qt = ee({ "src/language-js/print/array.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { builders: { line: s, softline: a, hardline: r, group: u, indent: i, ifBreak: l, fill: c } } = qe(), { getLast: y, hasNewline: h } = Ge(), { shouldPrintComma: g, hasComment: p, CommentCheckFlags: D, isNextLineEmpty: v, isNumericLiteral: w, isSignedNumericLiteral: T } = Ke(), { locStart: F } = it(), { printOptionalToken: A, printTypeAnnotation: B } = Dt();
          function I(x, m, E) {
            let o = x.getValue(), d = [], C = o.type === "TupleExpression" ? "#[" : "[", _ = "]";
            if (o.elements.length === 0)
              p(o, D.Dangling) ? d.push(u([C, t(x, m), a, _])) : d.push(C, _);
            else {
              let b = y(o.elements), N = !(b && b.type === "RestElement"), k = b === null, $ = Symbol("array"), M = !m.__inJestEach && o.elements.length > 1 && o.elements.every((L, Y, V) => {
                let O = L && L.type;
                if (O !== "ArrayExpression" && O !== "ObjectExpression")
                  return false;
                let K = V[Y + 1];
                if (K && O !== K.type)
                  return false;
                let se = O === "ArrayExpression" ? "elements" : "properties";
                return L[se] && L[se].length > 1;
              }), q = P(o, m), J = N ? k ? "," : g(m) ? q ? l(",", "", { groupId: $ }) : l(",") : "" : "";
              d.push(u([C, i([a, q ? f(x, m, E, J) : [R(x, m, "elements", E), J], t(x, m, true)]), a, _], { shouldBreak: M, id: $ }));
            }
            return d.push(A(x), B(x, m, E)), d;
          }
          __name(I, "I");
          function P(x, m) {
            return x.elements.length > 1 && x.elements.every((E) => E && (w(E) || T(E) && !p(E.argument)) && !p(E, D.Trailing | D.Line, (o) => !h(m.originalText, F(o), { backwards: true })));
          }
          __name(P, "P");
          function R(x, m, E, o) {
            let d = [], C = [];
            return x.each((_) => {
              d.push(C, u(o())), C = [",", s], _.getValue() && v(_.getValue(), m) && C.push(a);
            }, E), d;
          }
          __name(R, "R");
          function f(x, m, E, o) {
            let d = [];
            return x.each((C, _, b) => {
              let N = _ === b.length - 1;
              d.push([E(), N ? o : ","]), N || d.push(v(C.getValue(), m) ? [r, r] : p(b[_ + 1], D.Leading | D.Line) ? r : s);
            }, "elements"), c(d);
          }
          __name(f, "f");
          n.exports = { printArray: I, printArrayItems: R, isConciselyPrintedArray: P };
        } }), to = ee({ "src/language-js/print/call-arguments.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { getLast: s, getPenultimate: a } = Ge(), { getFunctionParameters: r, hasComment: u, CommentCheckFlags: i, isFunctionCompositionArgs: l, isJsxNode: c, isLongCurriedCallExpression: y, shouldPrintComma: h, getCallArguments: g, iterateCallArgumentsPath: p, isNextLineEmpty: D, isCallExpression: v, isStringLiteral: w, isObjectProperty: T, isTSTypeExpression: F } = Ke(), { builders: { line: A, hardline: B, softline: I, group: P, indent: R, conditionalGroup: f, ifBreak: x, breakParent: m }, utils: { willBreak: E } } = qe(), { ArgExpansionBailout: o } = Kt(), { isConciselyPrintedArray: d } = Qt();
          function C(q, J, L) {
            let Y = q.getValue(), V = Y.type === "ImportExpression", O = g(Y);
            if (O.length === 0)
              return ["(", t(q, J, true), ")"];
            if (k(O))
              return ["(", L(["arguments", 0]), ", ", L(["arguments", 1]), ")"];
            let K = false, se = false, Q = O.length - 1, le = [];
            p(q, (z, H) => {
              let Z = z.getNode(), ne = [L()];
              H === Q || (D(Z, J) ? (H === 0 && (se = true), K = true, ne.push(",", B, B)) : ne.push(",", A)), le.push(ne);
            });
            let W = !(V || Y.callee && Y.callee.type === "Import") && h(J, "all") ? "," : "";
            function X() {
              return P(["(", R([A, ...le]), W, A, ")"], { shouldBreak: true });
            }
            __name(X, "X");
            if (K || q.getParentNode().type !== "Decorator" && l(O))
              return X();
            let oe = N(O), ae = b(O, J);
            if (oe || ae) {
              if (oe ? le.slice(1).some(E) : le.slice(0, -1).some(E))
                return X();
              let z = [];
              try {
                q.try(() => {
                  p(q, (H, Z) => {
                    oe && Z === 0 && (z = [[L([], { expandFirstArg: true }), le.length > 1 ? "," : "", se ? B : A, se ? B : ""], ...le.slice(1)]), ae && Z === Q && (z = [...le.slice(0, -1), L([], { expandLastArg: true })]);
                  });
                });
              } catch (H) {
                if (H instanceof o)
                  return X();
                throw H;
              }
              return [le.some(E) ? m : "", f([["(", ...z, ")"], oe ? ["(", P(z[0], { shouldBreak: true }), ...z.slice(1), ")"] : ["(", ...le.slice(0, -1), P(s(z), { shouldBreak: true }), ")"], X()])];
            }
            let Ae = ["(", R([I, ...le]), x(W), I, ")"];
            return y(q) ? Ae : P(Ae, { shouldBreak: le.some(E) || K });
          }
          __name(C, "C");
          function _(q) {
            let J = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            return q.type === "ObjectExpression" && (q.properties.length > 0 || u(q)) || q.type === "ArrayExpression" && (q.elements.length > 0 || u(q)) || q.type === "TSTypeAssertion" && _(q.expression) || F(q) && _(q.expression) || q.type === "FunctionExpression" || q.type === "ArrowFunctionExpression" && (!q.returnType || !q.returnType.typeAnnotation || q.returnType.typeAnnotation.type !== "TSTypeReference" || $(q.body)) && (q.body.type === "BlockStatement" || q.body.type === "ArrowFunctionExpression" && _(q.body, true) || q.body.type === "ObjectExpression" || q.body.type === "ArrayExpression" || !J && (v(q.body) || q.body.type === "ConditionalExpression") || c(q.body)) || q.type === "DoExpression" || q.type === "ModuleExpression";
          }
          __name(_, "_");
          function b(q, J) {
            let L = s(q), Y = a(q);
            return !u(L, i.Leading) && !u(L, i.Trailing) && _(L) && (!Y || Y.type !== L.type) && (q.length !== 2 || Y.type !== "ArrowFunctionExpression" || L.type !== "ArrayExpression") && !(q.length > 1 && L.type === "ArrayExpression" && d(L, J));
          }
          __name(b, "b");
          function N(q) {
            if (q.length !== 2)
              return false;
            let [J, L] = q;
            return J.type === "ModuleExpression" && M(L) ? true : !u(J) && (J.type === "FunctionExpression" || J.type === "ArrowFunctionExpression" && J.body.type === "BlockStatement") && L.type !== "FunctionExpression" && L.type !== "ArrowFunctionExpression" && L.type !== "ConditionalExpression" && !_(L);
          }
          __name(N, "N");
          function k(q) {
            return q.length === 2 && q[0].type === "ArrowFunctionExpression" && r(q[0]).length === 0 && q[0].body.type === "BlockStatement" && q[1].type === "ArrayExpression" && !q.some((J) => u(J));
          }
          __name(k, "k");
          function $(q) {
            return q.type === "BlockStatement" && (q.body.some((J) => J.type !== "EmptyStatement") || u(q, i.Dangling));
          }
          __name($, "$");
          function M(q) {
            return q.type === "ObjectExpression" && q.properties.length === 1 && T(q.properties[0]) && q.properties[0].key.type === "Identifier" && q.properties[0].key.name === "type" && w(q.properties[0].value) && q.properties[0].value.value === "module";
          }
          __name(M, "M");
          n.exports = C;
        } }), ro = ee({ "src/language-js/print/member.js"(e, n) {
          "use strict";
          re();
          var { builders: { softline: t, group: s, indent: a, label: r } } = qe(), { isNumericLiteral: u, isMemberExpression: i, isCallExpression: l } = Ke(), { printOptionalToken: c } = Dt();
          function y(g, p, D) {
            let v = g.getValue(), w = g.getParentNode(), T, F = 0;
            do
              T = g.getParentNode(F), F++;
            while (T && (i(T) || T.type === "TSNonNullExpression"));
            let A = D("object"), B = h(g, p, D), I = T && (T.type === "NewExpression" || T.type === "BindExpression" || T.type === "AssignmentExpression" && T.left.type !== "Identifier") || v.computed || v.object.type === "Identifier" && v.property.type === "Identifier" && !i(w) || (w.type === "AssignmentExpression" || w.type === "VariableDeclarator") && (l(v.object) && v.object.arguments.length > 0 || v.object.type === "TSNonNullExpression" && l(v.object.expression) && v.object.expression.arguments.length > 0 || A.label === "member-chain");
            return r(A.label === "member-chain" ? "member-chain" : "member", [A, I ? B : s(a([t, B]))]);
          }
          __name(y, "y");
          function h(g, p, D) {
            let v = D("property"), w = g.getValue(), T = c(g);
            return w.computed ? !w.property || u(w.property) ? [T, "[", v, "]"] : s([T, "[", a([t, v]), t, "]"]) : [T, ".", v];
          }
          __name(h, "h");
          n.exports = { printMemberExpression: y, printMemberLookup: h };
        } }), $m = ee({ "src/language-js/print/member-chain.js"(e, n) {
          "use strict";
          re();
          var { printComments: t } = et(), { getLast: s, isNextLineEmptyAfterIndex: a, getNextNonSpaceNonCommentCharacterIndex: r } = Ge(), u = Ot(), { isCallExpression: i, isMemberExpression: l, isFunctionOrArrowExpression: c, isLongCurriedCallExpression: y, isMemberish: h, isNumericLiteral: g, isSimpleCallArgument: p, hasComment: D, CommentCheckFlags: v, isNextLineEmpty: w } = Ke(), { locEnd: T } = it(), { builders: { join: F, hardline: A, group: B, indent: I, conditionalGroup: P, breakParent: R, label: f }, utils: { willBreak: x } } = qe(), m = to(), { printMemberLookup: E } = ro(), { printOptionalToken: o, printFunctionTypeParameters: d, printBindExpressionCallee: C } = Dt();
          function _(b, N, k) {
            let $ = b.getParentNode(), M = !$ || $.type === "ExpressionStatement", q = [];
            function J(ie) {
              let { originalText: ve } = N, ce = r(ve, ie, T);
              return ve.charAt(ce) === ")" ? ce !== false && a(ve, ce + 1) : w(ie, N);
            }
            __name(J, "J");
            function L(ie) {
              let ve = ie.getValue();
              i(ve) && (h(ve.callee) || i(ve.callee)) ? (q.unshift({ node: ve, printed: [t(ie, [o(ie), d(ie, N, k), m(ie, N, k)], N), J(ve) ? A : ""] }), ie.call((ce) => L(ce), "callee")) : h(ve) ? (q.unshift({ node: ve, needsParens: u(ie, N), printed: t(ie, l(ve) ? E(ie, N, k) : C(ie, N, k), N) }), ie.call((ce) => L(ce), "object")) : ve.type === "TSNonNullExpression" ? (q.unshift({ node: ve, printed: t(ie, "!", N) }), ie.call((ce) => L(ce), "expression")) : q.unshift({ node: ve, printed: k() });
            }
            __name(L, "L");
            let Y = b.getValue();
            q.unshift({ node: Y, printed: [o(b), d(b, N, k), m(b, N, k)] }), Y.callee && b.call((ie) => L(ie), "callee");
            let V = [], O = [q[0]], K = 1;
            for (; K < q.length && (q[K].node.type === "TSNonNullExpression" || i(q[K].node) || l(q[K].node) && q[K].node.computed && g(q[K].node.property)); ++K)
              O.push(q[K]);
            if (!i(q[0].node))
              for (; K + 1 < q.length && (h(q[K].node) && h(q[K + 1].node)); ++K)
                O.push(q[K]);
            V.push(O), O = [];
            let se = false;
            for (; K < q.length; ++K) {
              if (se && h(q[K].node)) {
                if (q[K].node.computed && g(q[K].node.property)) {
                  O.push(q[K]);
                  continue;
                }
                V.push(O), O = [], se = false;
              }
              (i(q[K].node) || q[K].node.type === "ImportExpression") && (se = true), O.push(q[K]), D(q[K].node, v.Trailing) && (V.push(O), O = [], se = false);
            }
            O.length > 0 && V.push(O);
            function Q(ie) {
              return /^[A-Z]|^[$_]+$/.test(ie);
            }
            __name(Q, "Q");
            function le(ie) {
              return ie.length <= N.tabWidth;
            }
            __name(le, "le");
            function W(ie) {
              let ve = ie[1].length > 0 && ie[1][0].node.computed;
              if (ie[0].length === 1) {
                let U = ie[0][0].node;
                return U.type === "ThisExpression" || U.type === "Identifier" && (Q(U.name) || M && le(U.name) || ve);
              }
              let ce = s(ie[0]).node;
              return l(ce) && ce.property.type === "Identifier" && (Q(ce.property.name) || ve);
            }
            __name(W, "W");
            let X = V.length >= 2 && !D(V[1][0].node) && W(V);
            function oe(ie) {
              let ve = ie.map((ce) => ce.printed);
              return ie.length > 0 && s(ie).needsParens ? ["(", ...ve, ")"] : ve;
            }
            __name(oe, "oe");
            function ae(ie) {
              return ie.length === 0 ? "" : I(B([A, F(A, ie.map(oe))]));
            }
            __name(ae, "ae");
            let Ae = V.map(oe), z = Ae, H = X ? 3 : 2, Z = V.flat(), ne = Z.slice(1, -1).some((ie) => D(ie.node, v.Leading)) || Z.slice(0, -1).some((ie) => D(ie.node, v.Trailing)) || V[H] && D(V[H][0].node, v.Leading);
            if (V.length <= H && !ne)
              return y(b) ? z : B(z);
            let fe = s(V[X ? 1 : 0]).node, ge = !i(fe) && J(fe), Ce = [oe(V[0]), X ? V.slice(1, 2).map(oe) : "", ge ? A : "", ae(V.slice(X ? 2 : 1))], _e = q.map((ie) => {
              let { node: ve } = ie;
              return ve;
            }).filter(i);
            function Oe() {
              let ie = s(s(V)).node, ve = s(Ae);
              return i(ie) && x(ve) && _e.slice(0, -1).some((ce) => ce.arguments.some(c));
            }
            __name(Oe, "Oe");
            let pe;
            return ne || _e.length > 2 && _e.some((ie) => !ie.arguments.every((ve) => p(ve, 0))) || Ae.slice(0, -1).some(x) || Oe() ? pe = B(Ce) : pe = [x(z) || ge ? R : "", P([z, Ce])], f("member-chain", pe);
          }
          __name(_, "_");
          n.exports = _;
        } }), no = ee({ "src/language-js/print/call-expression.js"(e, n) {
          "use strict";
          re();
          var { builders: { join: t, group: s } } = qe(), a = Ot(), { getCallArguments: r, hasFlowAnnotationComment: u, isCallExpression: i, isMemberish: l, isStringLiteral: c, isTemplateOnItsOwnLine: y, isTestCall: h, iterateCallArgumentsPath: g } = Ke(), p = $m(), D = to(), { printOptionalToken: v, printFunctionTypeParameters: w } = Dt();
          function T(A, B, I) {
            let P = A.getValue(), R = A.getParentNode(), f = P.type === "NewExpression", x = P.type === "ImportExpression", m = v(A), E = r(P);
            if (E.length > 0 && (!x && !f && F(P, R) || E.length === 1 && y(E[0], B.originalText) || !f && h(P, R))) {
              let C = [];
              return g(A, () => {
                C.push(I());
              }), [f ? "new " : "", I("callee"), m, w(A, B, I), "(", t(", ", C), ")"];
            }
            let o = (B.parser === "babel" || B.parser === "babel-flow") && P.callee && P.callee.type === "Identifier" && u(P.callee.trailingComments);
            if (o && (P.callee.trailingComments[0].printed = true), !x && !f && l(P.callee) && !A.call((C) => a(C, B), "callee"))
              return p(A, B, I);
            let d = [f ? "new " : "", x ? "import" : I("callee"), m, o ? `/*:: ${P.callee.trailingComments[0].value.slice(2).trim()} */` : "", w(A, B, I), D(A, B, I)];
            return x || i(P.callee) ? s(d) : d;
          }
          __name(T, "T");
          function F(A, B) {
            if (A.callee.type !== "Identifier")
              return false;
            if (A.callee.name === "require")
              return true;
            if (A.callee.name === "define") {
              let I = r(A);
              return B.type === "ExpressionStatement" && (I.length === 1 || I.length === 2 && I[0].type === "ArrayExpression" || I.length === 3 && c(I[0]) && I[1].type === "ArrayExpression");
            }
            return false;
          }
          __name(F, "F");
          n.exports = { printCallExpression: T };
        } }), Zt = ee({ "src/language-js/print/assignment.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t, getStringWidth: s } = Ge(), { builders: { line: a, group: r, indent: u, indentIfBreak: i, lineSuffixBoundary: l }, utils: { cleanDoc: c, willBreak: y, canBreak: h } } = qe(), { hasLeadingOwnLineComment: g, isBinaryish: p, isStringLiteral: D, isLiteral: v, isNumericLiteral: w, isCallExpression: T, isMemberExpression: F, getCallArguments: A, rawText: B, hasComment: I, isSignedNumericLiteral: P, isObjectProperty: R } = Ke(), { shouldInlineLogicalExpression: f } = Jn(), { printCallExpression: x } = no();
          function m(W, X, oe, ae, Ae, z) {
            let H = d(W, X, oe, ae, z), Z = oe(z, { assignmentLayout: H });
            switch (H) {
              case "break-after-operator":
                return r([r(ae), Ae, r(u([a, Z]))]);
              case "never-break-after-operator":
                return r([r(ae), Ae, " ", Z]);
              case "fluid": {
                let ne = Symbol("assignment");
                return r([r(ae), Ae, r(u(a), { id: ne }), l, i(Z, { groupId: ne })]);
              }
              case "break-lhs":
                return r([ae, Ae, " ", r(Z)]);
              case "chain":
                return [r(ae), Ae, a, Z];
              case "chain-tail":
                return [r(ae), Ae, u([a, Z])];
              case "chain-tail-arrow-chain":
                return [r(ae), Ae, Z];
              case "only-left":
                return ae;
            }
          }
          __name(m, "m");
          function E(W, X, oe) {
            let ae = W.getValue();
            return m(W, X, oe, oe("left"), [" ", ae.operator], "right");
          }
          __name(E, "E");
          function o(W, X, oe) {
            return m(W, X, oe, oe("id"), " =", "init");
          }
          __name(o, "o");
          function d(W, X, oe, ae, Ae) {
            let z = W.getValue(), H = z[Ae];
            if (!H)
              return "only-left";
            let Z = !b(H);
            if (W.match(b, N, (Ce) => !Z || Ce.type !== "ExpressionStatement" && Ce.type !== "VariableDeclaration"))
              return Z ? H.type === "ArrowFunctionExpression" && H.body.type === "ArrowFunctionExpression" ? "chain-tail-arrow-chain" : "chain-tail" : "chain";
            if (!Z && b(H.right) || g(X.originalText, H))
              return "break-after-operator";
            if (H.type === "CallExpression" && H.callee.name === "require" || X.parser === "json5" || X.parser === "json")
              return "never-break-after-operator";
            if (_(z) || k(z) || q(z) || J(z) && h(ae))
              return "break-lhs";
            let ge = se(z, ae, X);
            return W.call(() => C(W, X, oe, ge), Ae) ? "break-after-operator" : ge || H.type === "TemplateLiteral" || H.type === "TaggedTemplateExpression" || H.type === "BooleanLiteral" || w(H) || H.type === "ClassExpression" ? "never-break-after-operator" : "fluid";
          }
          __name(d, "d");
          function C(W, X, oe, ae) {
            let Ae = W.getValue();
            if (p(Ae) && !f(Ae))
              return true;
            switch (Ae.type) {
              case "StringLiteralTypeAnnotation":
              case "SequenceExpression":
                return true;
              case "ConditionalExpression": {
                let { test: Z } = Ae;
                return p(Z) && !f(Z);
              }
              case "ClassExpression":
                return t(Ae.decorators);
            }
            if (ae)
              return false;
            let z = Ae, H = [];
            for (; ; )
              if (z.type === "UnaryExpression")
                z = z.argument, H.push("argument");
              else if (z.type === "TSNonNullExpression")
                z = z.expression, H.push("expression");
              else
                break;
            return !!(D(z) || W.call(() => V(W, X, oe), ...H));
          }
          __name(C, "C");
          function _(W) {
            if (N(W)) {
              let X = W.left || W.id;
              return X.type === "ObjectPattern" && X.properties.length > 2 && X.properties.some((oe) => R(oe) && (!oe.shorthand || oe.value && oe.value.type === "AssignmentPattern"));
            }
            return false;
          }
          __name(_, "_");
          function b(W) {
            return W.type === "AssignmentExpression";
          }
          __name(b, "b");
          function N(W) {
            return b(W) || W.type === "VariableDeclarator";
          }
          __name(N, "N");
          function k(W) {
            let X = $(W);
            if (t(X)) {
              let oe = W.type === "TSTypeAliasDeclaration" ? "constraint" : "bound";
              if (X.length > 1 && X.some((ae) => ae[oe] || ae.default))
                return true;
            }
            return false;
          }
          __name(k, "k");
          function $(W) {
            return M(W) && W.typeParameters && W.typeParameters.params ? W.typeParameters.params : null;
          }
          __name($, "$");
          function M(W) {
            return W.type === "TSTypeAliasDeclaration" || W.type === "TypeAlias";
          }
          __name(M, "M");
          function q(W) {
            if (W.type !== "VariableDeclarator")
              return false;
            let { typeAnnotation: X } = W.id;
            if (!X || !X.typeAnnotation)
              return false;
            let oe = L(X.typeAnnotation);
            return t(oe) && oe.length > 1 && oe.some((ae) => t(L(ae)) || ae.type === "TSConditionalType");
          }
          __name(q, "q");
          function J(W) {
            return W.type === "VariableDeclarator" && W.init && W.init.type === "ArrowFunctionExpression";
          }
          __name(J, "J");
          function L(W) {
            return Y(W) && W.typeParameters && W.typeParameters.params ? W.typeParameters.params : null;
          }
          __name(L, "L");
          function Y(W) {
            return W.type === "TSTypeReference" || W.type === "GenericTypeAnnotation";
          }
          __name(Y, "Y");
          function V(W, X, oe) {
            let ae = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, Ae = W.getValue(), z = /* @__PURE__ */ __name(() => V(W, X, oe, true), "z");
            if (Ae.type === "TSNonNullExpression")
              return W.call(z, "expression");
            if (T(Ae)) {
              if (x(W, X, oe).label === "member-chain")
                return false;
              let Z = A(Ae);
              return !(Z.length === 0 || Z.length === 1 && K(Z[0], X)) || Q(Ae, oe) ? false : W.call(z, "callee");
            }
            return F(Ae) ? W.call(z, "object") : ae && (Ae.type === "Identifier" || Ae.type === "ThisExpression");
          }
          __name(V, "V");
          var O = 0.25;
          function K(W, X) {
            let { printWidth: oe } = X;
            if (I(W))
              return false;
            let ae = oe * O;
            if (W.type === "ThisExpression" || W.type === "Identifier" && W.name.length <= ae || P(W) && !I(W.argument))
              return true;
            let Ae = W.type === "Literal" && "regex" in W && W.regex.pattern || W.type === "RegExpLiteral" && W.pattern;
            return Ae ? Ae.length <= ae : D(W) ? B(W).length <= ae : W.type === "TemplateLiteral" ? W.expressions.length === 0 && W.quasis[0].value.raw.length <= ae && !W.quasis[0].value.raw.includes(`
`) : v(W);
          }
          __name(K, "K");
          function se(W, X, oe) {
            if (!R(W))
              return false;
            X = c(X);
            let ae = 3;
            return typeof X == "string" && s(X) < oe.tabWidth + ae;
          }
          __name(se, "se");
          function Q(W, X) {
            let oe = le(W);
            if (t(oe)) {
              if (oe.length > 1)
                return true;
              if (oe.length === 1) {
                let Ae = oe[0];
                if (Ae.type === "TSUnionType" || Ae.type === "UnionTypeAnnotation" || Ae.type === "TSIntersectionType" || Ae.type === "IntersectionTypeAnnotation" || Ae.type === "TSTypeLiteral" || Ae.type === "ObjectTypeAnnotation")
                  return true;
              }
              let ae = W.typeParameters ? "typeParameters" : "typeArguments";
              if (y(X(ae)))
                return true;
            }
            return false;
          }
          __name(Q, "Q");
          function le(W) {
            return W.typeParameters && W.typeParameters.params || W.typeArguments && W.typeArguments.params;
          }
          __name(le, "le");
          n.exports = { printVariableDeclarator: o, printAssignmentExpression: E, printAssignment: m, isArrowFunctionVariableDeclarator: J };
        } }), kr = ee({ "src/language-js/print/function-parameters.js"(e, n) {
          "use strict";
          re();
          var { getNextNonSpaceNonCommentCharacter: t } = Ge(), { printDanglingComments: s } = et(), { builders: { line: a, hardline: r, softline: u, group: i, indent: l, ifBreak: c }, utils: { removeLines: y, willBreak: h } } = qe(), { getFunctionParameters: g, iterateFunctionParametersPath: p, isSimpleType: D, isTestCall: v, isTypeAnnotationAFunction: w, isObjectType: T, isObjectTypePropertyAFunction: F, hasRestParameter: A, shouldPrintComma: B, hasComment: I, isNextLineEmpty: P } = Ke(), { locEnd: R } = it(), { ArgExpansionBailout: f } = Kt(), { printFunctionTypeParameters: x } = Dt();
          function m(C, _, b, N, k) {
            let $ = C.getValue(), M = g($), q = k ? x(C, b, _) : "";
            if (M.length === 0)
              return [q, "(", s(C, b, true, (se) => t(b.originalText, se, R) === ")"), ")"];
            let J = C.getParentNode(), L = v(J), Y = E($), V = [];
            if (p(C, (se, Q) => {
              let le = Q === M.length - 1;
              le && $.rest && V.push("..."), V.push(_()), !le && (V.push(","), L || Y ? V.push(" ") : P(M[Q], b) ? V.push(r, r) : V.push(a));
            }), N) {
              if (h(q) || h(V))
                throw new f();
              return i([y(q), "(", y(V), ")"]);
            }
            let O = M.every((se) => !se.decorators);
            return Y && O ? [q, "(", ...V, ")"] : L ? [q, "(", ...V, ")"] : (F(J) || w(J) || J.type === "TypeAlias" || J.type === "UnionTypeAnnotation" || J.type === "TSUnionType" || J.type === "IntersectionTypeAnnotation" || J.type === "FunctionTypeAnnotation" && J.returnType === $) && M.length === 1 && M[0].name === null && $.this !== M[0] && M[0].typeAnnotation && $.typeParameters === null && D(M[0].typeAnnotation) && !$.rest ? b.arrowParens === "always" ? ["(", ...V, ")"] : V : [q, "(", l([u, ...V]), c(!A($) && B(b, "all") ? "," : ""), u, ")"];
          }
          __name(m, "m");
          function E(C) {
            if (!C)
              return false;
            let _ = g(C);
            if (_.length !== 1)
              return false;
            let [b] = _;
            return !I(b) && (b.type === "ObjectPattern" || b.type === "ArrayPattern" || b.type === "Identifier" && b.typeAnnotation && (b.typeAnnotation.type === "TypeAnnotation" || b.typeAnnotation.type === "TSTypeAnnotation") && T(b.typeAnnotation.typeAnnotation) || b.type === "FunctionTypeParam" && T(b.typeAnnotation) || b.type === "AssignmentPattern" && (b.left.type === "ObjectPattern" || b.left.type === "ArrayPattern") && (b.right.type === "Identifier" || b.right.type === "ObjectExpression" && b.right.properties.length === 0 || b.right.type === "ArrayExpression" && b.right.elements.length === 0));
          }
          __name(E, "E");
          function o(C) {
            let _;
            return C.returnType ? (_ = C.returnType, _.typeAnnotation && (_ = _.typeAnnotation)) : C.typeAnnotation && (_ = C.typeAnnotation), _;
          }
          __name(o, "o");
          function d(C, _) {
            let b = o(C);
            if (!b)
              return false;
            let N = C.typeParameters && C.typeParameters.params;
            if (N) {
              if (N.length > 1)
                return false;
              if (N.length === 1) {
                let k = N[0];
                if (k.constraint || k.default)
                  return false;
              }
            }
            return g(C).length === 1 && (T(b) || h(_));
          }
          __name(d, "d");
          n.exports = { printFunctionParameters: m, shouldHugFunctionParameters: E, shouldGroupFunctionParameters: d };
        } }), Lr = ee({ "src/language-js/print/type-annotation.js"(e, n) {
          "use strict";
          re();
          var { printComments: t, printDanglingComments: s } = et(), { isNonEmptyArray: a } = Ge(), { builders: { group: r, join: u, line: i, softline: l, indent: c, align: y, ifBreak: h } } = qe(), g = Ot(), { locStart: p } = it(), { isSimpleType: D, isObjectType: v, hasLeadingOwnLineComment: w, isObjectTypePropertyAFunction: T, shouldPrintComma: F } = Ke(), { printAssignment: A } = Zt(), { printFunctionParameters: B, shouldGroupFunctionParameters: I } = kr(), { printArrayItems: P } = Qt();
          function R(b) {
            if (D(b) || v(b))
              return true;
            if (b.type === "UnionTypeAnnotation" || b.type === "TSUnionType") {
              let N = b.types.filter(($) => $.type === "VoidTypeAnnotation" || $.type === "TSVoidKeyword" || $.type === "NullLiteralTypeAnnotation" || $.type === "TSNullKeyword").length, k = b.types.some(($) => $.type === "ObjectTypeAnnotation" || $.type === "TSTypeLiteral" || $.type === "GenericTypeAnnotation" || $.type === "TSTypeReference");
              if (b.types.length - 1 === N && k)
                return true;
            }
            return false;
          }
          __name(R, "R");
          function f(b, N, k) {
            let $ = N.semi ? ";" : "", M = b.getValue(), q = [];
            return q.push("opaque type ", k("id"), k("typeParameters")), M.supertype && q.push(": ", k("supertype")), M.impltype && q.push(" = ", k("impltype")), q.push($), q;
          }
          __name(f, "f");
          function x(b, N, k) {
            let $ = N.semi ? ";" : "", M = b.getValue(), q = [];
            M.declare && q.push("declare "), q.push("type ", k("id"), k("typeParameters"));
            let J = M.type === "TSTypeAliasDeclaration" ? "typeAnnotation" : "right";
            return [A(b, N, k, q, " =", J), $];
          }
          __name(x, "x");
          function m(b, N, k) {
            let $ = b.getValue(), M = b.map(k, "types"), q = [], J = false;
            for (let L = 0; L < M.length; ++L)
              L === 0 ? q.push(M[L]) : v($.types[L - 1]) && v($.types[L]) ? q.push([" & ", J ? c(M[L]) : M[L]]) : !v($.types[L - 1]) && !v($.types[L]) ? q.push(c([" &", i, M[L]])) : (L > 1 && (J = true), q.push(" & ", L > 1 ? c(M[L]) : M[L]));
            return r(q);
          }
          __name(m, "m");
          function E(b, N, k) {
            let $ = b.getValue(), M = b.getParentNode(), q = M.type !== "TypeParameterInstantiation" && M.type !== "TSTypeParameterInstantiation" && M.type !== "GenericTypeAnnotation" && M.type !== "TSTypeReference" && M.type !== "TSTypeAssertion" && M.type !== "TupleTypeAnnotation" && M.type !== "TSTupleType" && !(M.type === "FunctionTypeParam" && !M.name && b.getParentNode(1).this !== M) && !((M.type === "TypeAlias" || M.type === "VariableDeclarator" || M.type === "TSTypeAliasDeclaration") && w(N.originalText, $)), J = R($), L = b.map((O) => {
              let K = k();
              return J || (K = y(2, K)), t(O, K, N);
            }, "types");
            if (J)
              return u(" | ", L);
            let Y = q && !w(N.originalText, $), V = [h([Y ? i : "", "| "]), u([i, "| "], L)];
            return g(b, N) ? r([c(V), l]) : M.type === "TupleTypeAnnotation" && M.types.length > 1 || M.type === "TSTupleType" && M.elementTypes.length > 1 ? r([c([h(["(", l]), V]), l, h(")")]) : r(q ? c(V) : V);
          }
          __name(E, "E");
          function o(b, N, k) {
            let $ = b.getValue(), M = [], q = b.getParentNode(0), J = b.getParentNode(1), L = b.getParentNode(2), Y = $.type === "TSFunctionType" || !((q.type === "ObjectTypeProperty" || q.type === "ObjectTypeInternalSlot") && !q.variance && !q.optional && p(q) === p($) || q.type === "ObjectTypeCallProperty" || L && L.type === "DeclareFunction"), V = Y && (q.type === "TypeAnnotation" || q.type === "TSTypeAnnotation"), O = V && Y && (q.type === "TypeAnnotation" || q.type === "TSTypeAnnotation") && J.type === "ArrowFunctionExpression";
            T(q) && (Y = true, V = true), O && M.push("(");
            let K = B(b, k, N, false, true), se = $.returnType || $.predicate || $.typeAnnotation ? [Y ? " => " : ": ", k("returnType"), k("predicate"), k("typeAnnotation")] : "", Q = I($, se);
            return M.push(Q ? r(K) : K), se && M.push(se), O && M.push(")"), r(M);
          }
          __name(o, "o");
          function d(b, N, k) {
            let $ = b.getValue(), M = $.type === "TSTupleType" ? "elementTypes" : "types", q = $[M], J = a(q), L = J ? l : "";
            return r(["[", c([L, P(b, N, M, k)]), h(J && F(N, "all") ? "," : ""), s(b, N, true), L, "]"]);
          }
          __name(d, "d");
          function C(b, N, k) {
            let $ = b.getValue(), M = $.type === "OptionalIndexedAccessType" && $.optional ? "?.[" : "[";
            return [k("objectType"), M, k("indexType"), "]"];
          }
          __name(C, "C");
          function _(b, N, k) {
            let $ = b.getValue();
            return [$.postfix ? "" : k, N("typeAnnotation"), $.postfix ? k : ""];
          }
          __name(_, "_");
          n.exports = { printOpaqueType: f, printTypeAlias: x, printIntersectionType: m, printUnionType: E, printFunctionType: o, printTupleType: d, printIndexedAccessType: C, shouldHugType: R, printJSDocType: _ };
        } }), jr = ee({ "src/language-js/print/type-parameters.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { builders: { join: s, line: a, hardline: r, softline: u, group: i, indent: l, ifBreak: c } } = qe(), { isTestCall: y, hasComment: h, CommentCheckFlags: g, isTSXFile: p, shouldPrintComma: D, getFunctionParameters: v, isObjectType: w } = Ke(), { createGroupIdMapper: T } = Ge(), { shouldHugType: F } = Lr(), { isArrowFunctionVariableDeclarator: A } = Zt(), B = T("typeParameters");
          function I(f, x, m, E) {
            let o = f.getValue();
            if (!o[E])
              return "";
            if (!Array.isArray(o[E]))
              return m(E);
            let d = f.getNode(2), C = d && y(d);
            if (!f.match((k) => !(k[E].length === 1 && w(k[E][0])), void 0, (k, $) => $ === "typeAnnotation", (k) => k.type === "Identifier", A) && (C || o[E].length === 0 || o[E].length === 1 && (o[E][0].type === "NullableTypeAnnotation" || F(o[E][0]))))
              return ["<", s(", ", f.map(m, E)), P(f, x), ">"];
            let N = o.type === "TSTypeParameterInstantiation" ? "" : v(o).length === 1 && p(x) && !o[E][0].constraint && f.getParentNode().type === "ArrowFunctionExpression" ? "," : D(x, "all") ? c(",") : "";
            return i(["<", l([u, s([",", a], f.map(m, E))]), N, u, ">"], { id: B(o) });
          }
          __name(I, "I");
          function P(f, x) {
            let m = f.getValue();
            if (!h(m, g.Dangling))
              return "";
            let E = !h(m, g.Line), o = t(f, x, E);
            return E ? o : [o, r];
          }
          __name(P, "P");
          function R(f, x, m) {
            let E = f.getValue(), o = [], d = f.getParentNode();
            return d.type === "TSMappedType" ? (o.push("[", m("name")), E.constraint && o.push(" in ", m("constraint")), d.nameType && o.push(" as ", f.callParent(() => m("nameType"))), o.push("]"), o) : (E.variance && o.push(m("variance")), E.in && o.push("in "), E.out && o.push("out "), o.push(m("name")), E.bound && o.push(": ", m("bound")), E.constraint && o.push(" extends ", m("constraint")), E.default && o.push(" = ", m("default")), o);
          }
          __name(R, "R");
          n.exports = { printTypeParameter: R, printTypeParameters: I, getTypeParametersGroupId: B };
        } }), er = ee({ "src/language-js/print/property.js"(e, n) {
          "use strict";
          re();
          var { printComments: t } = et(), { printString: s, printNumber: a } = Ge(), { isNumericLiteral: r, isSimpleNumber: u, isStringLiteral: i, isStringPropSafeToUnquote: l, rawText: c } = Ke(), { printAssignment: y } = Zt(), h = /* @__PURE__ */ new WeakMap();
          function g(D, v, w) {
            let T = D.getNode();
            if (T.computed)
              return ["[", w("key"), "]"];
            let F = D.getParentNode(), { key: A } = T;
            if (T.type === "ClassPrivateProperty" && A.type === "Identifier")
              return ["#", w("key")];
            if (v.quoteProps === "consistent" && !h.has(F)) {
              let B = (F.properties || F.body || F.members).some((I) => !I.computed && I.key && i(I.key) && !l(I, v));
              h.set(F, B);
            }
            if ((A.type === "Identifier" || r(A) && u(a(c(A))) && String(A.value) === a(c(A)) && !(v.parser === "typescript" || v.parser === "babel-ts")) && (v.parser === "json" || v.quoteProps === "consistent" && h.get(F))) {
              let B = s(JSON.stringify(A.type === "Identifier" ? A.name : A.value.toString()), v);
              return D.call((I) => t(I, B, v), "key");
            }
            return l(T, v) && (v.quoteProps === "as-needed" || v.quoteProps === "consistent" && !h.get(F)) ? D.call((B) => t(B, /^\d/.test(A.value) ? a(A.value) : A.value, v), "key") : w("key");
          }
          __name(g, "g");
          function p(D, v, w) {
            return D.getValue().shorthand ? w("value") : y(D, v, w, g(D, v, w), ":", "value");
          }
          __name(p, "p");
          n.exports = { printProperty: p, printPropertyKey: g };
        } }), Or = ee({ "src/language-js/print/function.js"(e, n) {
          "use strict";
          re();
          var t = Yt(), { printDanglingComments: s, printCommentsSeparately: a } = et(), r = lt(), { getNextNonSpaceNonCommentCharacterIndex: u } = Ge(), { builders: { line: i, softline: l, group: c, indent: y, ifBreak: h, hardline: g, join: p, indentIfBreak: D }, utils: { removeLines: v, willBreak: w } } = qe(), { ArgExpansionBailout: T } = Kt(), { getFunctionParameters: F, hasLeadingOwnLineComment: A, isFlowAnnotationComment: B, isJsxNode: I, isTemplateOnItsOwnLine: P, shouldPrintComma: R, startsWithNoLookaheadToken: f, isBinaryish: x, isLineComment: m, hasComment: E, getComments: o, CommentCheckFlags: d, isCallLikeExpression: C, isCallExpression: _, getCallArguments: b, hasNakedLeftSide: N, getLeftSide: k } = Ke(), { locEnd: $ } = it(), { printFunctionParameters: M, shouldGroupFunctionParameters: q } = kr(), { printPropertyKey: J } = er(), { printFunctionTypeParameters: L } = Dt();
          function Y(H, Z, ne, fe) {
            let ge = H.getValue(), Ce = false;
            if ((ge.type === "FunctionDeclaration" || ge.type === "FunctionExpression") && fe && fe.expandLastArg) {
              let ve = H.getParentNode();
              _(ve) && b(ve).length > 1 && (Ce = true);
            }
            let _e = [];
            ge.type === "TSDeclareFunction" && ge.declare && _e.push("declare "), ge.async && _e.push("async "), ge.generator ? _e.push("function* ") : _e.push("function "), ge.id && _e.push(Z("id"));
            let Oe = M(H, Z, ne, Ce), pe = X(H, Z, ne), ie = q(ge, pe);
            return _e.push(L(H, ne, Z), c([ie ? c(Oe) : Oe, pe]), ge.body ? " " : "", Z("body")), ne.semi && (ge.declare || !ge.body) && _e.push(";"), _e;
          }
          __name(Y, "Y");
          function V(H, Z, ne) {
            let fe = H.getNode(), { kind: ge } = fe, Ce = fe.value || fe, _e = [];
            return !ge || ge === "init" || ge === "method" || ge === "constructor" ? Ce.async && _e.push("async ") : (t.ok(ge === "get" || ge === "set"), _e.push(ge, " ")), Ce.generator && _e.push("*"), _e.push(J(H, Z, ne), fe.optional || fe.key.optional ? "?" : ""), fe === Ce ? _e.push(O(H, Z, ne)) : Ce.type === "FunctionExpression" ? _e.push(H.call((Oe) => O(Oe, Z, ne), "value")) : _e.push(ne("value")), _e;
          }
          __name(V, "V");
          function O(H, Z, ne) {
            let fe = H.getNode(), ge = M(H, ne, Z), Ce = X(H, ne, Z), _e = q(fe, Ce), Oe = [L(H, Z, ne), c([_e ? c(ge) : ge, Ce])];
            return fe.body ? Oe.push(" ", ne("body")) : Oe.push(Z.semi ? ";" : ""), Oe;
          }
          __name(O, "O");
          function K(H, Z, ne, fe) {
            let ge = H.getValue(), Ce = [];
            if (ge.async && Ce.push("async "), W(H, Z))
              Ce.push(ne(["params", 0]));
            else {
              let Oe = fe && (fe.expandLastArg || fe.expandFirstArg), pe = X(H, ne, Z);
              if (Oe) {
                if (w(pe))
                  throw new T();
                pe = c(v(pe));
              }
              Ce.push(c([M(H, ne, Z, Oe, true), pe]));
            }
            let _e = s(H, Z, true, (Oe) => {
              let pe = u(Z.originalText, Oe, $);
              return pe !== false && Z.originalText.slice(pe, pe + 2) === "=>";
            });
            return _e && Ce.push(" ", _e), Ce;
          }
          __name(K, "K");
          function se(H, Z, ne, fe, ge, Ce) {
            let _e = H.getName(), Oe = H.getParentNode(), pe = C(Oe) && _e === "callee", ie = Boolean(Z && Z.assignmentLayout), ve = Ce.body.type !== "BlockStatement" && Ce.body.type !== "ObjectExpression" && Ce.body.type !== "SequenceExpression", ce = pe && ve || Z && Z.assignmentLayout === "chain-tail-arrow-chain", U = Symbol("arrow-chain");
            return Ce.body.type === "SequenceExpression" && (ge = c(["(", y([l, ge]), l, ")"])), c([c(y([pe || ie ? l : "", c(p([" =>", i], ne), { shouldBreak: fe })]), { id: U, shouldBreak: ce }), " =>", D(ve ? y([i, ge]) : [" ", ge], { groupId: U }), pe ? h(l, "", { groupId: U }) : ""]);
          }
          __name(se, "se");
          function Q(H, Z, ne, fe) {
            let ge = H.getValue(), Ce = [], _e = [], Oe = false;
            if ((/* @__PURE__ */ __name(function U() {
              let de = K(H, Z, ne, fe);
              if (Ce.length === 0)
                Ce.push(de);
              else {
                let { leading: De, trailing: he } = a(H, Z);
                Ce.push([De, de]), _e.unshift(he);
              }
              Oe = Oe || ge.returnType && F(ge).length > 0 || ge.typeParameters || F(ge).some((De) => De.type !== "Identifier"), ge.body.type !== "ArrowFunctionExpression" || fe && fe.expandLastArg ? _e.unshift(ne("body", fe)) : (ge = ge.body, H.call(U, "body"));
            }, "U"))(), Ce.length > 1)
              return se(H, fe, Ce, Oe, _e, ge);
            let pe = Ce;
            if (pe.push(" =>"), !A(Z.originalText, ge.body) && (ge.body.type === "ArrayExpression" || ge.body.type === "ObjectExpression" || ge.body.type === "BlockStatement" || I(ge.body) || P(ge.body, Z.originalText) || ge.body.type === "ArrowFunctionExpression" || ge.body.type === "DoExpression"))
              return c([...pe, " ", _e]);
            if (ge.body.type === "SequenceExpression")
              return c([...pe, c([" (", y([l, _e]), l, ")"])]);
            let ie = (fe && fe.expandLastArg || H.getParentNode().type === "JSXExpressionContainer") && !E(ge), ve = fe && fe.expandLastArg && R(Z, "all"), ce = ge.body.type === "ConditionalExpression" && !f(ge.body, false);
            return c([...pe, c([y([i, ce ? h("", "(") : "", _e, ce ? h("", ")") : ""]), ie ? [h(ve ? "," : ""), l] : ""])]);
          }
          __name(Q, "Q");
          function le(H) {
            let Z = F(H);
            return Z.length === 1 && !H.typeParameters && !E(H, d.Dangling) && Z[0].type === "Identifier" && !Z[0].typeAnnotation && !E(Z[0]) && !Z[0].optional && !H.predicate && !H.returnType;
          }
          __name(le, "le");
          function W(H, Z) {
            if (Z.arrowParens === "always")
              return false;
            if (Z.arrowParens === "avoid") {
              let ne = H.getValue();
              return le(ne);
            }
            return false;
          }
          __name(W, "W");
          function X(H, Z, ne) {
            let fe = H.getValue(), ge = Z("returnType");
            if (fe.returnType && B(ne.originalText, fe.returnType))
              return [" /*: ", ge, " */"];
            let Ce = [ge];
            return fe.returnType && fe.returnType.typeAnnotation && Ce.unshift(": "), fe.predicate && Ce.push(fe.returnType ? " " : ": ", Z("predicate")), Ce;
          }
          __name(X, "X");
          function oe(H, Z, ne) {
            let fe = H.getValue(), ge = Z.semi ? ";" : "", Ce = [];
            fe.argument && (z(Z, fe.argument) ? Ce.push([" (", y([g, ne("argument")]), g, ")"]) : x(fe.argument) || fe.argument.type === "SequenceExpression" ? Ce.push(c([h(" (", " "), y([l, ne("argument")]), l, h(")")])) : Ce.push(" ", ne("argument")));
            let _e = o(fe), Oe = r(_e), pe = Oe && m(Oe);
            return pe && Ce.push(ge), E(fe, d.Dangling) && Ce.push(" ", s(H, Z, true)), pe || Ce.push(ge), Ce;
          }
          __name(oe, "oe");
          function ae(H, Z, ne) {
            return ["return", oe(H, Z, ne)];
          }
          __name(ae, "ae");
          function Ae(H, Z, ne) {
            return ["throw", oe(H, Z, ne)];
          }
          __name(Ae, "Ae");
          function z(H, Z) {
            if (A(H.originalText, Z))
              return true;
            if (N(Z)) {
              let ne = Z, fe;
              for (; fe = k(ne); )
                if (ne = fe, A(H.originalText, ne))
                  return true;
            }
            return false;
          }
          __name(z, "z");
          n.exports = { printFunction: Y, printArrowFunction: Q, printMethod: V, printReturnStatement: ae, printThrowStatement: Ae, printMethodInternal: O, shouldPrintParamsWithoutParens: W };
        } }), zn = ee({ "src/language-js/print/decorators.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t, hasNewline: s } = Ge(), { builders: { line: a, hardline: r, join: u, breakParent: i, group: l } } = qe(), { locStart: c, locEnd: y } = it(), { getParentExportDeclaration: h } = Ke();
          function g(T, F, A) {
            let B = T.getValue();
            return l([u(a, T.map(A, "decorators")), v(B, F) ? r : a]);
          }
          __name(g, "g");
          function p(T, F, A) {
            return [u(r, T.map(A, "declaration", "decorators")), r];
          }
          __name(p, "p");
          function D(T, F, A) {
            let B = T.getValue(), { decorators: I } = B;
            if (!t(I) || w(T.getParentNode()))
              return;
            let P = B.type === "ClassExpression" || B.type === "ClassDeclaration" || v(B, F);
            return [h(T) ? r : P ? i : "", u(a, T.map(A, "decorators")), a];
          }
          __name(D, "D");
          function v(T, F) {
            return T.decorators.some((A) => s(F.originalText, y(A)));
          }
          __name(v, "v");
          function w(T) {
            if (T.type !== "ExportDefaultDeclaration" && T.type !== "ExportNamedDeclaration" && T.type !== "DeclareExportDeclaration")
              return false;
            let F = T.declaration && T.declaration.decorators;
            return t(F) && c(T) === c(F[0]);
          }
          __name(w, "w");
          n.exports = { printDecorators: D, printClassMemberDecorators: g, printDecoratorsBeforeExport: p, hasDecoratorsBeforeExport: w };
        } }), tr = ee({ "src/language-js/print/class.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t, createGroupIdMapper: s } = Ge(), { printComments: a, printDanglingComments: r } = et(), { builders: { join: u, line: i, hardline: l, softline: c, group: y, indent: h, ifBreak: g } } = qe(), { hasComment: p, CommentCheckFlags: D } = Ke(), { getTypeParametersGroupId: v } = jr(), { printMethod: w } = Or(), { printOptionalToken: T, printTypeAnnotation: F, printDefiniteToken: A } = Dt(), { printPropertyKey: B } = er(), { printAssignment: I } = Zt(), { printClassMemberDecorators: P } = zn();
          function R(b, N, k) {
            let $ = b.getValue(), M = [];
            $.declare && M.push("declare "), $.abstract && M.push("abstract "), M.push("class");
            let q = $.id && p($.id, D.Trailing) || $.typeParameters && p($.typeParameters, D.Trailing) || $.superClass && p($.superClass) || t($.extends) || t($.mixins) || t($.implements), J = [], L = [];
            if ($.id && J.push(" ", k("id")), J.push(k("typeParameters")), $.superClass) {
              let Y = [d(b, N, k), k("superTypeParameters")], V = b.call((O) => ["extends ", a(O, Y, N)], "superClass");
              q ? L.push(i, y(V)) : L.push(" ", V);
            } else
              L.push(o(b, N, k, "extends"));
            if (L.push(o(b, N, k, "mixins"), o(b, N, k, "implements")), q) {
              let Y;
              E($) ? Y = [...J, h(L)] : Y = h([...J, L]), M.push(y(Y, { id: f($) }));
            } else
              M.push(...J, ...L);
            return M.push(" ", k("body")), M;
          }
          __name(R, "R");
          var f = s("heritageGroup");
          function x(b) {
            return g(l, "", { groupId: f(b) });
          }
          __name(x, "x");
          function m(b) {
            return ["superClass", "extends", "mixins", "implements"].filter((N) => Boolean(b[N])).length > 1;
          }
          __name(m, "m");
          function E(b) {
            return b.typeParameters && !p(b.typeParameters, D.Trailing | D.Line) && !m(b);
          }
          __name(E, "E");
          function o(b, N, k, $) {
            let M = b.getValue();
            if (!t(M[$]))
              return "";
            let q = r(b, N, true, (J) => {
              let { marker: L } = J;
              return L === $;
            });
            return [E(M) ? g(" ", i, { groupId: v(M.typeParameters) }) : i, q, q && l, $, y(h([i, u([",", i], b.map(k, $))]))];
          }
          __name(o, "o");
          function d(b, N, k) {
            let $ = k("superClass");
            return b.getParentNode().type === "AssignmentExpression" ? y(g(["(", h([c, $]), c, ")"], $)) : $;
          }
          __name(d, "d");
          function C(b, N, k) {
            let $ = b.getValue(), M = [];
            return t($.decorators) && M.push(P(b, N, k)), $.accessibility && M.push($.accessibility + " "), $.readonly && M.push("readonly "), $.declare && M.push("declare "), $.static && M.push("static "), ($.type === "TSAbstractMethodDefinition" || $.abstract) && M.push("abstract "), $.override && M.push("override "), M.push(w(b, N, k)), M;
          }
          __name(C, "C");
          function _(b, N, k) {
            let $ = b.getValue(), M = [], q = N.semi ? ";" : "";
            return t($.decorators) && M.push(P(b, N, k)), $.accessibility && M.push($.accessibility + " "), $.declare && M.push("declare "), $.static && M.push("static "), ($.type === "TSAbstractPropertyDefinition" || $.abstract) && M.push("abstract "), $.override && M.push("override "), $.readonly && M.push("readonly "), $.variance && M.push(k("variance")), $.type === "ClassAccessorProperty" && M.push("accessor "), M.push(B(b, N, k), T(b), A(b), F(b, N, k)), [I(b, N, k, M, " =", "value"), q];
          }
          __name(_, "_");
          n.exports = { printClass: R, printClassMethod: C, printClassProperty: _, printHardlineAfterHeritage: x };
        } }), uo = ee({ "src/language-js/print/interface.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t } = Ge(), { builders: { join: s, line: a, group: r, indent: u, ifBreak: i } } = qe(), { hasComment: l, identity: c, CommentCheckFlags: y } = Ke(), { getTypeParametersGroupId: h } = jr(), { printTypeScriptModifiers: g } = Dt();
          function p(D, v, w) {
            let T = D.getValue(), F = [];
            T.declare && F.push("declare "), T.type === "TSInterfaceDeclaration" && F.push(T.abstract ? "abstract " : "", g(D, v, w)), F.push("interface");
            let A = [], B = [];
            T.type !== "InterfaceTypeAnnotation" && A.push(" ", w("id"), w("typeParameters"));
            let I = T.typeParameters && !l(T.typeParameters, y.Trailing | y.Line);
            return t(T.extends) && B.push(I ? i(" ", a, { groupId: h(T.typeParameters) }) : a, "extends ", (T.extends.length === 1 ? c : u)(s([",", a], D.map(w, "extends")))), T.id && l(T.id, y.Trailing) || t(T.extends) ? I ? F.push(r([...A, u(B)])) : F.push(r(u([...A, ...B]))) : F.push(...A, ...B), F.push(" ", w("body")), r(F);
          }
          __name(p, "p");
          n.exports = { printInterface: p };
        } }), so = ee({ "src/language-js/print/module.js"(e, n) {
          "use strict";
          re();
          var { isNonEmptyArray: t } = Ge(), { builders: { softline: s, group: a, indent: r, join: u, line: i, ifBreak: l, hardline: c } } = qe(), { printDanglingComments: y } = et(), { hasComment: h, CommentCheckFlags: g, shouldPrintComma: p, needsHardlineAfterDanglingComment: D, isStringLiteral: v, rawText: w } = Ke(), { locStart: T, hasSameLoc: F } = it(), { hasDecoratorsBeforeExport: A, printDecoratorsBeforeExport: B } = zn();
          function I(_, b, N) {
            let k = _.getValue(), $ = b.semi ? ";" : "", M = [], { importKind: q } = k;
            return M.push("import"), q && q !== "value" && M.push(" ", q), M.push(m(_, b, N), x(_, b, N), o(_, b, N), $), M;
          }
          __name(I, "I");
          function P(_, b, N) {
            let k = _.getValue(), $ = [];
            A(k) && $.push(B(_, b, N));
            let { type: M, exportKind: q, declaration: J } = k;
            return $.push("export"), (k.default || M === "ExportDefaultDeclaration") && $.push(" default"), h(k, g.Dangling) && ($.push(" ", y(_, b, true)), D(k) && $.push(c)), J ? $.push(" ", N("declaration")) : $.push(q === "type" ? " type" : "", m(_, b, N), x(_, b, N), o(_, b, N)), f(k, b) && $.push(";"), $;
          }
          __name(P, "P");
          function R(_, b, N) {
            let k = _.getValue(), $ = b.semi ? ";" : "", M = [], { exportKind: q, exported: J } = k;
            return M.push("export"), q === "type" && M.push(" type"), M.push(" *"), J && M.push(" as ", N("exported")), M.push(x(_, b, N), o(_, b, N), $), M;
          }
          __name(R, "R");
          function f(_, b) {
            if (!b.semi)
              return false;
            let { type: N, declaration: k } = _, $ = _.default || N === "ExportDefaultDeclaration";
            if (!k)
              return true;
            let { type: M } = k;
            return !!($ && M !== "ClassDeclaration" && M !== "FunctionDeclaration" && M !== "TSInterfaceDeclaration" && M !== "DeclareClass" && M !== "DeclareFunction" && M !== "TSDeclareFunction" && M !== "EnumDeclaration");
          }
          __name(f, "f");
          function x(_, b, N) {
            let k = _.getValue();
            if (!k.source)
              return "";
            let $ = [];
            return E(k, b) || $.push(" from"), $.push(" ", N("source")), $;
          }
          __name(x, "x");
          function m(_, b, N) {
            let k = _.getValue();
            if (E(k, b))
              return "";
            let $ = [" "];
            if (t(k.specifiers)) {
              let M = [], q = [];
              _.each(() => {
                let J = _.getValue().type;
                if (J === "ExportNamespaceSpecifier" || J === "ExportDefaultSpecifier" || J === "ImportNamespaceSpecifier" || J === "ImportDefaultSpecifier")
                  M.push(N());
                else if (J === "ExportSpecifier" || J === "ImportSpecifier")
                  q.push(N());
                else
                  throw new Error(`Unknown specifier type ${JSON.stringify(J)}`);
              }, "specifiers"), $.push(u(", ", M)), q.length > 0 && (M.length > 0 && $.push(", "), q.length > 1 || M.length > 0 || k.specifiers.some((L) => h(L)) ? $.push(a(["{", r([b.bracketSpacing ? i : s, u([",", i], q)]), l(p(b) ? "," : ""), b.bracketSpacing ? i : s, "}"])) : $.push(["{", b.bracketSpacing ? " " : "", ...q, b.bracketSpacing ? " " : "", "}"]));
            } else
              $.push("{}");
            return $;
          }
          __name(m, "m");
          function E(_, b) {
            let { type: N, importKind: k, source: $, specifiers: M } = _;
            return N !== "ImportDeclaration" || t(M) || k === "type" ? false : !/{\s*}/.test(b.originalText.slice(T(_), T($)));
          }
          __name(E, "E");
          function o(_, b, N) {
            let k = _.getNode();
            return t(k.assertions) ? [" assert {", b.bracketSpacing ? " " : "", u(", ", _.map(N, "assertions")), b.bracketSpacing ? " " : "", "}"] : "";
          }
          __name(o, "o");
          function d(_, b, N) {
            let k = _.getNode(), { type: $ } = k, M = [], q = $ === "ImportSpecifier" ? k.importKind : k.exportKind;
            q && q !== "value" && M.push(q, " ");
            let J = $.startsWith("Import"), L = J ? "imported" : "local", Y = J ? "local" : "exported", V = k[L], O = k[Y], K = "", se = "";
            return $ === "ExportNamespaceSpecifier" || $ === "ImportNamespaceSpecifier" ? K = "*" : V && (K = N(L)), O && !C(k) && (se = N(Y)), M.push(K, K && se ? " as " : "", se), M;
          }
          __name(d, "d");
          function C(_) {
            if (_.type !== "ImportSpecifier" && _.type !== "ExportSpecifier")
              return false;
            let { local: b, [_.type === "ImportSpecifier" ? "imported" : "exported"]: N } = _;
            if (b.type !== N.type || !F(b, N))
              return false;
            if (v(b))
              return b.value === N.value && w(b) === w(N);
            switch (b.type) {
              case "Identifier":
                return b.name === N.name;
              default:
                return false;
            }
          }
          __name(C, "C");
          n.exports = { printImportDeclaration: I, printExportDeclaration: P, printExportAllDeclaration: R, printModuleSpecifier: d };
        } }), Xn = ee({ "src/language-js/print/object.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { builders: { line: s, softline: a, group: r, indent: u, ifBreak: i, hardline: l } } = qe(), { getLast: c, hasNewlineInRange: y, hasNewline: h, isNonEmptyArray: g } = Ge(), { shouldPrintComma: p, hasComment: D, getComments: v, CommentCheckFlags: w, isNextLineEmpty: T } = Ke(), { locStart: F, locEnd: A } = it(), { printOptionalToken: B, printTypeAnnotation: I } = Dt(), { shouldHugFunctionParameters: P } = kr(), { shouldHugType: R } = Lr(), { printHardlineAfterHeritage: f } = tr();
          function x(m, E, o) {
            let d = E.semi ? ";" : "", C = m.getValue(), _;
            C.type === "TSTypeLiteral" ? _ = "members" : C.type === "TSInterfaceBody" ? _ = "body" : _ = "properties";
            let b = C.type === "ObjectTypeAnnotation", N = [_];
            b && N.push("indexers", "callProperties", "internalSlots");
            let k = N.map((W) => C[W][0]).sort((W, X) => F(W) - F(X))[0], $ = m.getParentNode(0), M = b && $ && ($.type === "InterfaceDeclaration" || $.type === "DeclareInterface" || $.type === "DeclareClass") && m.getName() === "body", q = C.type === "TSInterfaceBody" || M || C.type === "ObjectPattern" && $.type !== "FunctionDeclaration" && $.type !== "FunctionExpression" && $.type !== "ArrowFunctionExpression" && $.type !== "ObjectMethod" && $.type !== "ClassMethod" && $.type !== "ClassPrivateMethod" && $.type !== "AssignmentPattern" && $.type !== "CatchClause" && C.properties.some((W) => W.value && (W.value.type === "ObjectPattern" || W.value.type === "ArrayPattern")) || C.type !== "ObjectPattern" && k && y(E.originalText, F(C), F(k)), J = M ? ";" : C.type === "TSInterfaceBody" || C.type === "TSTypeLiteral" ? i(d, ";") : ",", L = C.type === "RecordExpression" ? "#{" : C.exact ? "{|" : "{", Y = C.exact ? "|}" : "}", V = [];
            for (let W of N)
              m.each((X) => {
                let oe = X.getValue();
                V.push({ node: oe, printed: o(), loc: F(oe) });
              }, W);
            N.length > 1 && V.sort((W, X) => W.loc - X.loc);
            let O = [], K = V.map((W) => {
              let X = [...O, r(W.printed)];
              return O = [J, s], (W.node.type === "TSPropertySignature" || W.node.type === "TSMethodSignature" || W.node.type === "TSConstructSignatureDeclaration") && D(W.node, w.PrettierIgnore) && O.shift(), T(W.node, E) && O.push(l), X;
            });
            if (C.inexact) {
              let W;
              if (D(C, w.Dangling)) {
                let X = D(C, w.Line);
                W = [t(m, E, true), X || h(E.originalText, A(c(v(C)))) ? l : s, "..."];
              } else
                W = ["..."];
              K.push([...O, ...W]);
            }
            let se = c(C[_]), Q = !(C.inexact || se && se.type === "RestElement" || se && (se.type === "TSPropertySignature" || se.type === "TSCallSignatureDeclaration" || se.type === "TSMethodSignature" || se.type === "TSConstructSignatureDeclaration") && D(se, w.PrettierIgnore)), le;
            if (K.length === 0) {
              if (!D(C, w.Dangling))
                return [L, Y, I(m, E, o)];
              le = r([L, t(m, E), a, Y, B(m), I(m, E, o)]);
            } else
              le = [M && g(C.properties) ? f($) : "", L, u([E.bracketSpacing ? s : a, ...K]), i(Q && (J !== "," || p(E)) ? J : ""), E.bracketSpacing ? s : a, Y, B(m), I(m, E, o)];
            return m.match((W) => W.type === "ObjectPattern" && !W.decorators, (W, X, oe) => P(W) && (X === "params" || X === "parameters" || X === "this" || X === "rest") && oe === 0) || m.match(R, (W, X) => X === "typeAnnotation", (W, X) => X === "typeAnnotation", (W, X, oe) => P(W) && (X === "params" || X === "parameters" || X === "this" || X === "rest") && oe === 0) || !q && m.match((W) => W.type === "ObjectPattern", (W) => W.type === "AssignmentExpression" || W.type === "VariableDeclarator") ? le : r(le, { shouldBreak: q });
          }
          __name(x, "x");
          n.exports = { printObject: x };
        } }), Vm = ee({ "src/language-js/print/flow.js"(e, n) {
          "use strict";
          re();
          var t = Yt(), { printDanglingComments: s } = et(), { printString: a, printNumber: r } = Ge(), { builders: { hardline: u, softline: i, group: l, indent: c } } = qe(), { getParentExportDeclaration: y, isFunctionNotation: h, isGetterOrSetter: g, rawText: p, shouldPrintComma: D } = Ke(), { locStart: v, locEnd: w } = it(), { replaceTextEndOfLine: T } = Xt(), { printClass: F } = tr(), { printOpaqueType: A, printTypeAlias: B, printIntersectionType: I, printUnionType: P, printFunctionType: R, printTupleType: f, printIndexedAccessType: x } = Lr(), { printInterface: m } = uo(), { printTypeParameter: E, printTypeParameters: o } = jr(), { printExportDeclaration: d, printExportAllDeclaration: C } = so(), { printArrayItems: _ } = Qt(), { printObject: b } = Xn(), { printPropertyKey: N } = er(), { printOptionalToken: k, printTypeAnnotation: $, printRestSpread: M } = Dt();
          function q(L, Y, V) {
            let O = L.getValue(), K = Y.semi ? ";" : "", se = [];
            switch (O.type) {
              case "DeclareClass":
                return J(L, F(L, Y, V));
              case "DeclareFunction":
                return J(L, ["function ", V("id"), O.predicate ? " " : "", V("predicate"), K]);
              case "DeclareModule":
                return J(L, ["module ", V("id"), " ", V("body")]);
              case "DeclareModuleExports":
                return J(L, ["module.exports", ": ", V("typeAnnotation"), K]);
              case "DeclareVariable":
                return J(L, ["var ", V("id"), K]);
              case "DeclareOpaqueType":
                return J(L, A(L, Y, V));
              case "DeclareInterface":
                return J(L, m(L, Y, V));
              case "DeclareTypeAlias":
                return J(L, B(L, Y, V));
              case "DeclareExportDeclaration":
                return J(L, d(L, Y, V));
              case "DeclareExportAllDeclaration":
                return J(L, C(L, Y, V));
              case "OpaqueType":
                return A(L, Y, V);
              case "TypeAlias":
                return B(L, Y, V);
              case "IntersectionTypeAnnotation":
                return I(L, Y, V);
              case "UnionTypeAnnotation":
                return P(L, Y, V);
              case "FunctionTypeAnnotation":
                return R(L, Y, V);
              case "TupleTypeAnnotation":
                return f(L, Y, V);
              case "GenericTypeAnnotation":
                return [V("id"), o(L, Y, V, "typeParameters")];
              case "IndexedAccessType":
              case "OptionalIndexedAccessType":
                return x(L, Y, V);
              case "TypeAnnotation":
                return V("typeAnnotation");
              case "TypeParameter":
                return E(L, Y, V);
              case "TypeofTypeAnnotation":
                return ["typeof ", V("argument")];
              case "ExistsTypeAnnotation":
                return "*";
              case "EmptyTypeAnnotation":
                return "empty";
              case "MixedTypeAnnotation":
                return "mixed";
              case "ArrayTypeAnnotation":
                return [V("elementType"), "[]"];
              case "BooleanLiteralTypeAnnotation":
                return String(O.value);
              case "EnumDeclaration":
                return ["enum ", V("id"), " ", V("body")];
              case "EnumBooleanBody":
              case "EnumNumberBody":
              case "EnumStringBody":
              case "EnumSymbolBody": {
                if (O.type === "EnumSymbolBody" || O.explicitType) {
                  let Q = null;
                  switch (O.type) {
                    case "EnumBooleanBody":
                      Q = "boolean";
                      break;
                    case "EnumNumberBody":
                      Q = "number";
                      break;
                    case "EnumStringBody":
                      Q = "string";
                      break;
                    case "EnumSymbolBody":
                      Q = "symbol";
                      break;
                  }
                  se.push("of ", Q, " ");
                }
                if (O.members.length === 0 && !O.hasUnknownMembers)
                  se.push(l(["{", s(L, Y), i, "}"]));
                else {
                  let Q = O.members.length > 0 ? [u, _(L, Y, "members", V), O.hasUnknownMembers || D(Y) ? "," : ""] : [];
                  se.push(l(["{", c([...Q, ...O.hasUnknownMembers ? [u, "..."] : []]), s(L, Y, true), u, "}"]));
                }
                return se;
              }
              case "EnumBooleanMember":
              case "EnumNumberMember":
              case "EnumStringMember":
                return [V("id"), " = ", typeof O.init == "object" ? V("init") : String(O.init)];
              case "EnumDefaultedMember":
                return V("id");
              case "FunctionTypeParam": {
                let Q = O.name ? V("name") : L.getParentNode().this === O ? "this" : "";
                return [Q, k(L), Q ? ": " : "", V("typeAnnotation")];
              }
              case "InterfaceDeclaration":
              case "InterfaceTypeAnnotation":
                return m(L, Y, V);
              case "ClassImplements":
              case "InterfaceExtends":
                return [V("id"), V("typeParameters")];
              case "NullableTypeAnnotation":
                return ["?", V("typeAnnotation")];
              case "Variance": {
                let { kind: Q } = O;
                return t.ok(Q === "plus" || Q === "minus"), Q === "plus" ? "+" : "-";
              }
              case "ObjectTypeCallProperty":
                return O.static && se.push("static "), se.push(V("value")), se;
              case "ObjectTypeIndexer":
                return [O.static ? "static " : "", O.variance ? V("variance") : "", "[", V("id"), O.id ? ": " : "", V("key"), "]: ", V("value")];
              case "ObjectTypeProperty": {
                let Q = "";
                return O.proto ? Q = "proto " : O.static && (Q = "static "), [Q, g(O) ? O.kind + " " : "", O.variance ? V("variance") : "", N(L, Y, V), k(L), h(O) ? "" : ": ", V("value")];
              }
              case "ObjectTypeAnnotation":
                return b(L, Y, V);
              case "ObjectTypeInternalSlot":
                return [O.static ? "static " : "", "[[", V("id"), "]]", k(L), O.method ? "" : ": ", V("value")];
              case "ObjectTypeSpreadProperty":
                return M(L, Y, V);
              case "QualifiedTypeofIdentifier":
              case "QualifiedTypeIdentifier":
                return [V("qualification"), ".", V("id")];
              case "StringLiteralTypeAnnotation":
                return T(a(p(O), Y));
              case "NumberLiteralTypeAnnotation":
                t.strictEqual(typeof O.value, "number");
              case "BigIntLiteralTypeAnnotation":
                return O.extra ? r(O.extra.raw) : r(O.raw);
              case "TypeCastExpression":
                return ["(", V("expression"), $(L, Y, V), ")"];
              case "TypeParameterDeclaration":
              case "TypeParameterInstantiation": {
                let Q = o(L, Y, V, "params");
                if (Y.parser === "flow") {
                  let le = v(O), W = w(O), X = Y.originalText.lastIndexOf("/*", le), oe = Y.originalText.indexOf("*/", W);
                  if (X !== -1 && oe !== -1) {
                    let ae = Y.originalText.slice(X + 2, oe).trim();
                    if (ae.startsWith("::") && !ae.includes("/*") && !ae.includes("*/"))
                      return ["/*:: ", Q, " */"];
                  }
                }
                return Q;
              }
              case "InferredPredicate":
                return "%checks";
              case "DeclaredPredicate":
                return ["%checks(", V("value"), ")"];
              case "AnyTypeAnnotation":
                return "any";
              case "BooleanTypeAnnotation":
                return "boolean";
              case "BigIntTypeAnnotation":
                return "bigint";
              case "NullLiteralTypeAnnotation":
                return "null";
              case "NumberTypeAnnotation":
                return "number";
              case "SymbolTypeAnnotation":
                return "symbol";
              case "StringTypeAnnotation":
                return "string";
              case "VoidTypeAnnotation":
                return "void";
              case "ThisTypeAnnotation":
                return "this";
              case "Node":
              case "Printable":
              case "SourceLocation":
              case "Position":
              case "Statement":
              case "Function":
              case "Pattern":
              case "Expression":
              case "Declaration":
              case "Specifier":
              case "NamedSpecifier":
              case "Comment":
              case "MemberTypeAnnotation":
              case "Type":
                throw new Error("unprintable type: " + JSON.stringify(O.type));
            }
          }
          __name(q, "q");
          function J(L, Y) {
            let V = y(L);
            return V ? (t.strictEqual(V.type, "DeclareExportDeclaration"), Y) : ["declare ", Y];
          }
          __name(J, "J");
          n.exports = { printFlow: q };
        } }), Wm = ee({ "src/language-js/utils/is-ts-keyword-type.js"(e, n) {
          "use strict";
          re();
          function t(s) {
            let { type: a } = s;
            return a.startsWith("TS") && a.endsWith("Keyword");
          }
          __name(t, "t");
          n.exports = t;
        } }), io = ee({ "src/language-js/print/ternary.js"(e, n) {
          "use strict";
          re();
          var { hasNewlineInRange: t } = Ge(), { isJsxNode: s, getComments: a, isCallExpression: r, isMemberExpression: u, isTSTypeExpression: i } = Ke(), { locStart: l, locEnd: c } = it(), y = Lt(), { builders: { line: h, softline: g, group: p, indent: D, align: v, ifBreak: w, dedent: T, breakParent: F } } = qe();
          function A(f) {
            let x = [f];
            for (let m = 0; m < x.length; m++) {
              let E = x[m];
              for (let o of ["test", "consequent", "alternate"]) {
                let d = E[o];
                if (s(d))
                  return true;
                d.type === "ConditionalExpression" && x.push(d);
              }
            }
            return false;
          }
          __name(A, "A");
          function B(f, x, m) {
            let E = f.getValue(), o = E.type === "ConditionalExpression", d = o ? "alternate" : "falseType", C = f.getParentNode(), _ = o ? m("test") : [m("checkType"), " ", "extends", " ", m("extendsType")];
            return C.type === E.type && C[d] === E ? v(2, _) : _;
          }
          __name(B, "B");
          var I = /* @__PURE__ */ new Map([["AssignmentExpression", "right"], ["VariableDeclarator", "init"], ["ReturnStatement", "argument"], ["ThrowStatement", "argument"], ["UnaryExpression", "argument"], ["YieldExpression", "argument"]]);
          function P(f) {
            let x = f.getValue();
            if (x.type !== "ConditionalExpression")
              return false;
            let m, E = x;
            for (let o = 0; !m; o++) {
              let d = f.getParentNode(o);
              if (r(d) && d.callee === E || u(d) && d.object === E || d.type === "TSNonNullExpression" && d.expression === E) {
                E = d;
                continue;
              }
              d.type === "NewExpression" && d.callee === E || i(d) && d.expression === E ? (m = f.getParentNode(o + 1), E = d) : m = d;
            }
            return E === x ? false : m[I.get(m.type)] === E;
          }
          __name(P, "P");
          function R(f, x, m) {
            let E = f.getValue(), o = E.type === "ConditionalExpression", d = o ? "consequent" : "trueType", C = o ? "alternate" : "falseType", _ = o ? ["test"] : ["checkType", "extendsType"], b = E[d], N = E[C], k = [], $ = false, M = f.getParentNode(), q = M.type === E.type && _.some((ae) => M[ae] === E), J = M.type === E.type && !q, L, Y, V = 0;
            do
              Y = L || E, L = f.getParentNode(V), V++;
            while (L && L.type === E.type && _.every((ae) => L[ae] !== Y));
            let O = L || M, K = Y;
            if (o && (s(E[_[0]]) || s(b) || s(N) || A(K))) {
              $ = true, J = true;
              let ae = /* @__PURE__ */ __name((z) => [w("("), D([g, z]), g, w(")")], "ae"), Ae = /* @__PURE__ */ __name((z) => z.type === "NullLiteral" || z.type === "Literal" && z.value === null || z.type === "Identifier" && z.name === "undefined", "Ae");
              k.push(" ? ", Ae(b) ? m(d) : ae(m(d)), " : ", N.type === E.type || Ae(N) ? m(C) : ae(m(C)));
            } else {
              let ae = [h, "? ", b.type === E.type ? w("", "(") : "", v(2, m(d)), b.type === E.type ? w("", ")") : "", h, ": ", N.type === E.type ? m(C) : v(2, m(C))];
              k.push(M.type !== E.type || M[C] === E || q ? ae : x.useTabs ? T(D(ae)) : v(Math.max(0, x.tabWidth - 2), ae));
            }
            let Q = [..._.map((ae) => a(E[ae])), a(b), a(N)].flat().some((ae) => y(ae) && t(x.originalText, l(ae), c(ae))), le = /* @__PURE__ */ __name((ae) => M === O ? p(ae, { shouldBreak: Q }) : Q ? [ae, F] : ae, "le"), W = !$ && (u(M) || M.type === "NGPipeExpression" && M.left === E) && !M.computed, X = P(f), oe = le([B(f, x, m), J ? k : D(k), o && W && !X ? g : ""]);
            return q || X ? p([D([g, oe]), g]) : oe;
          }
          __name(R, "R");
          n.exports = { printTernary: R };
        } }), ao = ee({ "src/language-js/print/statement.js"(e, n) {
          "use strict";
          re();
          var { builders: { hardline: t } } = qe(), s = Ot(), { getLeftSidePathName: a, hasNakedLeftSide: r, isJsxNode: u, isTheOnlyJsxElementInMarkdown: i, hasComment: l, CommentCheckFlags: c, isNextLineEmpty: y } = Ke(), { shouldPrintParamsWithoutParens: h } = Or();
          function g(B, I, P, R) {
            let f = B.getValue(), x = [], m = f.type === "ClassBody", E = p(f[R]);
            return B.each((o, d, C) => {
              let _ = o.getValue();
              if (_.type === "EmptyStatement")
                return;
              let b = P();
              !I.semi && !m && !i(I, o) && D(o, I) ? l(_, c.Leading) ? x.push(P([], { needsSemi: true })) : x.push(";", b) : x.push(b), !I.semi && m && F(_) && A(_, C[d + 1]) && x.push(";"), _ !== E && (x.push(t), y(_, I) && x.push(t));
            }, R), x;
          }
          __name(g, "g");
          function p(B) {
            for (let I = B.length - 1; I >= 0; I--) {
              let P = B[I];
              if (P.type !== "EmptyStatement")
                return P;
            }
          }
          __name(p, "p");
          function D(B, I) {
            return B.getNode().type !== "ExpressionStatement" ? false : B.call((R) => v(R, I), "expression");
          }
          __name(D, "D");
          function v(B, I) {
            let P = B.getValue();
            switch (P.type) {
              case "ParenthesizedExpression":
              case "TypeCastExpression":
              case "ArrayExpression":
              case "ArrayPattern":
              case "TemplateLiteral":
              case "TemplateElement":
              case "RegExpLiteral":
                return true;
              case "ArrowFunctionExpression": {
                if (!h(B, I))
                  return true;
                break;
              }
              case "UnaryExpression": {
                let { prefix: R, operator: f } = P;
                if (R && (f === "+" || f === "-"))
                  return true;
                break;
              }
              case "BindExpression": {
                if (!P.object)
                  return true;
                break;
              }
              case "Literal": {
                if (P.regex)
                  return true;
                break;
              }
              default:
                if (u(P))
                  return true;
            }
            return s(B, I) ? true : r(P) ? B.call((R) => v(R, I), ...a(B, P)) : false;
          }
          __name(v, "v");
          function w(B, I, P) {
            return g(B, I, P, "body");
          }
          __name(w, "w");
          function T(B, I, P) {
            return g(B, I, P, "consequent");
          }
          __name(T, "T");
          var F = /* @__PURE__ */ __name((B) => {
            let { type: I } = B;
            return I === "ClassProperty" || I === "PropertyDefinition" || I === "ClassPrivateProperty" || I === "ClassAccessorProperty";
          }, "F");
          function A(B, I) {
            let P = B.key && B.key.name;
            if ((P === "static" || P === "get" || P === "set") && !B.value && !B.typeAnnotation)
              return true;
            if (!I || I.static || I.accessibility)
              return false;
            if (!I.computed) {
              let R = I.key && I.key.name;
              if (R === "in" || R === "instanceof")
                return true;
            }
            if (F(I) && I.variance && !I.static && !I.declare)
              return true;
            switch (I.type) {
              case "ClassProperty":
              case "PropertyDefinition":
              case "TSAbstractPropertyDefinition":
                return I.computed;
              case "MethodDefinition":
              case "TSAbstractMethodDefinition":
              case "ClassMethod":
              case "ClassPrivateMethod": {
                if ((I.value ? I.value.async : I.async) || I.kind === "get" || I.kind === "set")
                  return false;
                let f = I.value ? I.value.generator : I.generator;
                return !!(I.computed || f);
              }
              case "TSIndexSignature":
                return true;
            }
            return false;
          }
          __name(A, "A");
          n.exports = { printBody: w, printSwitchCaseConsequent: T };
        } }), oo = ee({ "src/language-js/print/block.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { isNonEmptyArray: s } = Ge(), { builders: { hardline: a, indent: r } } = qe(), { hasComment: u, CommentCheckFlags: i, isNextLineEmpty: l } = Ke(), { printHardlineAfterHeritage: c } = tr(), { printBody: y } = ao();
          function h(p, D, v) {
            let w = p.getValue(), T = [];
            if (w.type === "StaticBlock" && T.push("static "), w.type === "ClassBody" && s(w.body)) {
              let A = p.getParentNode();
              T.push(c(A));
            }
            T.push("{");
            let F = g(p, D, v);
            if (F)
              T.push(r([a, F]), a);
            else {
              let A = p.getParentNode(), B = p.getParentNode(1);
              A.type === "ArrowFunctionExpression" || A.type === "FunctionExpression" || A.type === "FunctionDeclaration" || A.type === "ObjectMethod" || A.type === "ClassMethod" || A.type === "ClassPrivateMethod" || A.type === "ForStatement" || A.type === "WhileStatement" || A.type === "DoWhileStatement" || A.type === "DoExpression" || A.type === "CatchClause" && !B.finalizer || A.type === "TSModuleDeclaration" || A.type === "TSDeclareFunction" || w.type === "StaticBlock" || w.type === "ClassBody" || T.push(a);
            }
            return T.push("}"), T;
          }
          __name(h, "h");
          function g(p, D, v) {
            let w = p.getValue(), T = s(w.directives), F = w.body.some((I) => I.type !== "EmptyStatement"), A = u(w, i.Dangling);
            if (!T && !F && !A)
              return "";
            let B = [];
            if (T && p.each((I, P, R) => {
              B.push(v()), (P < R.length - 1 || F || A) && (B.push(a), l(I.getValue(), D) && B.push(a));
            }, "directives"), F && B.push(y(p, D, v)), A && B.push(t(p, D, true)), w.type === "Program") {
              let I = p.getParentNode();
              (!I || I.type !== "ModuleExpression") && B.push(a);
            }
            return B;
          }
          __name(g, "g");
          n.exports = { printBlock: h, printBlockBody: g };
        } }), Hm = ee({ "src/language-js/print/typescript.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { hasNewlineInRange: s } = Ge(), { builders: { join: a, line: r, hardline: u, softline: i, group: l, indent: c, conditionalGroup: y, ifBreak: h } } = qe(), { isLiteral: g, getTypeScriptMappedTypeModifier: p, shouldPrintComma: D, isCallExpression: v, isMemberExpression: w } = Ke(), T = Wm(), { locStart: F, locEnd: A } = it(), { printOptionalToken: B, printTypeScriptModifiers: I } = Dt(), { printTernary: P } = io(), { printFunctionParameters: R, shouldGroupFunctionParameters: f } = kr(), { printTemplateLiteral: x } = jt(), { printArrayItems: m } = Qt(), { printObject: E } = Xn(), { printClassProperty: o, printClassMethod: d } = tr(), { printTypeParameter: C, printTypeParameters: _ } = jr(), { printPropertyKey: b } = er(), { printFunction: N, printMethodInternal: k } = Or(), { printInterface: $ } = uo(), { printBlock: M } = oo(), { printTypeAlias: q, printIntersectionType: J, printUnionType: L, printFunctionType: Y, printTupleType: V, printIndexedAccessType: O, printJSDocType: K } = Lr();
          function se(Q, le, W) {
            let X = Q.getValue();
            if (!X.type.startsWith("TS"))
              return;
            if (T(X))
              return X.type.slice(2, -7).toLowerCase();
            let oe = le.semi ? ";" : "", ae = [];
            switch (X.type) {
              case "TSThisType":
                return "this";
              case "TSTypeAssertion": {
                let Ae = !(X.expression.type === "ArrayExpression" || X.expression.type === "ObjectExpression"), z = l(["<", c([i, W("typeAnnotation")]), i, ">"]), H = [h("("), c([i, W("expression")]), i, h(")")];
                return Ae ? y([[z, W("expression")], [z, l(H, { shouldBreak: true })], [z, W("expression")]]) : l([z, W("expression")]);
              }
              case "TSDeclareFunction":
                return N(Q, W, le);
              case "TSExportAssignment":
                return ["export = ", W("expression"), oe];
              case "TSModuleBlock":
                return M(Q, le, W);
              case "TSInterfaceBody":
              case "TSTypeLiteral":
                return E(Q, le, W);
              case "TSTypeAliasDeclaration":
                return q(Q, le, W);
              case "TSQualifiedName":
                return a(".", [W("left"), W("right")]);
              case "TSAbstractMethodDefinition":
              case "TSDeclareMethod":
                return d(Q, le, W);
              case "TSAbstractPropertyDefinition":
                return o(Q, le, W);
              case "TSInterfaceHeritage":
              case "TSExpressionWithTypeArguments":
                return ae.push(W("expression")), X.typeParameters && ae.push(W("typeParameters")), ae;
              case "TSTemplateLiteralType":
                return x(Q, W, le);
              case "TSNamedTupleMember":
                return [W("label"), X.optional ? "?" : "", ": ", W("elementType")];
              case "TSRestType":
                return ["...", W("typeAnnotation")];
              case "TSOptionalType":
                return [W("typeAnnotation"), "?"];
              case "TSInterfaceDeclaration":
                return $(Q, le, W);
              case "TSClassImplements":
                return [W("expression"), W("typeParameters")];
              case "TSTypeParameterDeclaration":
              case "TSTypeParameterInstantiation":
                return _(Q, le, W, "params");
              case "TSTypeParameter":
                return C(Q, le, W);
              case "TSSatisfiesExpression":
              case "TSAsExpression": {
                let Ae = X.type === "TSAsExpression" ? "as" : "satisfies";
                ae.push(W("expression"), ` ${Ae} `, W("typeAnnotation"));
                let z = Q.getParentNode();
                return v(z) && z.callee === X || w(z) && z.object === X ? l([c([i, ...ae]), i]) : ae;
              }
              case "TSArrayType":
                return [W("elementType"), "[]"];
              case "TSPropertySignature":
                return X.readonly && ae.push("readonly "), ae.push(b(Q, le, W), B(Q)), X.typeAnnotation && ae.push(": ", W("typeAnnotation")), X.initializer && ae.push(" = ", W("initializer")), ae;
              case "TSParameterProperty":
                return X.accessibility && ae.push(X.accessibility + " "), X.export && ae.push("export "), X.static && ae.push("static "), X.override && ae.push("override "), X.readonly && ae.push("readonly "), ae.push(W("parameter")), ae;
              case "TSTypeQuery":
                return ["typeof ", W("exprName"), W("typeParameters")];
              case "TSIndexSignature": {
                let Ae = Q.getParentNode(), z = X.parameters.length > 1 ? h(D(le) ? "," : "") : "", H = l([c([i, a([", ", i], Q.map(W, "parameters"))]), z, i]);
                return [X.export ? "export " : "", X.accessibility ? [X.accessibility, " "] : "", X.static ? "static " : "", X.readonly ? "readonly " : "", X.declare ? "declare " : "", "[", X.parameters ? H : "", X.typeAnnotation ? "]: " : "]", X.typeAnnotation ? W("typeAnnotation") : "", Ae.type === "ClassBody" ? oe : ""];
              }
              case "TSTypePredicate":
                return [X.asserts ? "asserts " : "", W("parameterName"), X.typeAnnotation ? [" is ", W("typeAnnotation")] : ""];
              case "TSNonNullExpression":
                return [W("expression"), "!"];
              case "TSImportType":
                return [X.isTypeOf ? "typeof " : "", "import(", W(X.parameter ? "parameter" : "argument"), ")", X.qualifier ? [".", W("qualifier")] : "", _(Q, le, W, "typeParameters")];
              case "TSLiteralType":
                return W("literal");
              case "TSIndexedAccessType":
                return O(Q, le, W);
              case "TSConstructSignatureDeclaration":
              case "TSCallSignatureDeclaration":
              case "TSConstructorType": {
                if (X.type === "TSConstructorType" && X.abstract && ae.push("abstract "), X.type !== "TSCallSignatureDeclaration" && ae.push("new "), ae.push(l(R(Q, W, le, false, true))), X.returnType || X.typeAnnotation) {
                  let Ae = X.type === "TSConstructorType";
                  ae.push(Ae ? " => " : ": ", W("returnType"), W("typeAnnotation"));
                }
                return ae;
              }
              case "TSTypeOperator":
                return [X.operator, " ", W("typeAnnotation")];
              case "TSMappedType": {
                let Ae = s(le.originalText, F(X), A(X));
                return l(["{", c([le.bracketSpacing ? r : i, X.readonly ? [p(X.readonly, "readonly"), " "] : "", I(Q, le, W), W("typeParameter"), X.optional ? p(X.optional, "?") : "", X.typeAnnotation ? ": " : "", W("typeAnnotation"), h(oe)]), t(Q, le, true), le.bracketSpacing ? r : i, "}"], { shouldBreak: Ae });
              }
              case "TSMethodSignature": {
                let Ae = X.kind && X.kind !== "method" ? `${X.kind} ` : "";
                ae.push(X.accessibility ? [X.accessibility, " "] : "", Ae, X.export ? "export " : "", X.static ? "static " : "", X.readonly ? "readonly " : "", X.abstract ? "abstract " : "", X.declare ? "declare " : "", X.computed ? "[" : "", W("key"), X.computed ? "]" : "", B(Q));
                let z = R(Q, W, le, false, true), H = X.returnType ? "returnType" : "typeAnnotation", Z = X[H], ne = Z ? W(H) : "", fe = f(X, ne);
                return ae.push(fe ? l(z) : z), Z && ae.push(": ", l(ne)), l(ae);
              }
              case "TSNamespaceExportDeclaration":
                return ae.push("export as namespace ", W("id")), le.semi && ae.push(";"), l(ae);
              case "TSEnumDeclaration":
                return X.declare && ae.push("declare "), X.modifiers && ae.push(I(Q, le, W)), X.const && ae.push("const "), ae.push("enum ", W("id"), " "), X.members.length === 0 ? ae.push(l(["{", t(Q, le), i, "}"])) : ae.push(l(["{", c([u, m(Q, le, "members", W), D(le, "es5") ? "," : ""]), t(Q, le, true), u, "}"])), ae;
              case "TSEnumMember":
                return X.computed ? ae.push("[", W("id"), "]") : ae.push(W("id")), X.initializer && ae.push(" = ", W("initializer")), ae;
              case "TSImportEqualsDeclaration":
                return X.isExport && ae.push("export "), ae.push("import "), X.importKind && X.importKind !== "value" && ae.push(X.importKind, " "), ae.push(W("id"), " = ", W("moduleReference")), le.semi && ae.push(";"), l(ae);
              case "TSExternalModuleReference":
                return ["require(", W("expression"), ")"];
              case "TSModuleDeclaration": {
                let Ae = Q.getParentNode(), z = g(X.id), H = Ae.type === "TSModuleDeclaration", Z = X.body && X.body.type === "TSModuleDeclaration";
                if (H)
                  ae.push(".");
                else {
                  X.declare && ae.push("declare "), ae.push(I(Q, le, W));
                  let ne = le.originalText.slice(F(X), F(X.id));
                  X.id.type === "Identifier" && X.id.name === "global" && !/namespace|module/.test(ne) || ae.push(z || /(?:^|\s)module(?:\s|$)/.test(ne) ? "module " : "namespace ");
                }
                return ae.push(W("id")), Z ? ae.push(W("body")) : X.body ? ae.push(" ", l(W("body"))) : ae.push(oe), ae;
              }
              case "TSConditionalType":
                return P(Q, le, W);
              case "TSInferType":
                return ["infer", " ", W("typeParameter")];
              case "TSIntersectionType":
                return J(Q, le, W);
              case "TSUnionType":
                return L(Q, le, W);
              case "TSFunctionType":
                return Y(Q, le, W);
              case "TSTupleType":
                return V(Q, le, W);
              case "TSTypeReference":
                return [W("typeName"), _(Q, le, W, "typeParameters")];
              case "TSTypeAnnotation":
                return W("typeAnnotation");
              case "TSEmptyBodyFunctionExpression":
                return k(Q, le, W);
              case "TSJSDocAllType":
                return "*";
              case "TSJSDocUnknownType":
                return "?";
              case "TSJSDocNullableType":
                return K(Q, W, "?");
              case "TSJSDocNonNullableType":
                return K(Q, W, "!");
              case "TSInstantiationExpression":
                return [W("expression"), W("typeParameters")];
              default:
                throw new Error(`Unknown TypeScript node type: ${JSON.stringify(X.type)}.`);
            }
          }
          __name(se, "se");
          n.exports = { printTypescript: se };
        } }), Gm = ee({ "src/language-js/print/comment.js"(e, n) {
          "use strict";
          re();
          var { hasNewline: t } = Ge(), { builders: { join: s, hardline: a }, utils: { replaceTextEndOfLine: r } } = qe(), { isLineComment: u } = Ke(), { locStart: i, locEnd: l } = it(), c = Lt();
          function y(p, D) {
            let v = p.getValue();
            if (u(v))
              return D.originalText.slice(i(v), l(v)).trimEnd();
            if (c(v)) {
              if (h(v)) {
                let F = g(v);
                return v.trailing && !t(D.originalText, i(v), { backwards: true }) ? [a, F] : F;
              }
              let w = l(v), T = D.originalText.slice(w - 3, w) === "*-/";
              return ["/*", r(v.value), T ? "*-/" : "*/"];
            }
            throw new Error("Not a comment: " + JSON.stringify(v));
          }
          __name(y, "y");
          function h(p) {
            let D = `*${p.value}*`.split(`
`);
            return D.length > 1 && D.every((v) => v.trim()[0] === "*");
          }
          __name(h, "h");
          function g(p) {
            let D = p.value.split(`
`);
            return ["/*", s(a, D.map((v, w) => w === 0 ? v.trimEnd() : " " + (w < D.length - 1 ? v.trim() : v.trimStart()))), "*/"];
          }
          __name(g, "g");
          n.exports = { printComment: y };
        } }), Um = ee({ "src/language-js/print/literal.js"(e, n) {
          "use strict";
          re();
          var { printString: t, printNumber: s } = Ge(), { replaceTextEndOfLine: a } = Xt();
          function r(l, c) {
            let y = l.getNode();
            switch (y.type) {
              case "RegExpLiteral":
                return i(y);
              case "BigIntLiteral":
                return u(y.bigint || y.extra.raw);
              case "NumericLiteral":
                return s(y.extra.raw);
              case "StringLiteral":
                return a(t(y.extra.raw, c));
              case "NullLiteral":
                return "null";
              case "BooleanLiteral":
                return String(y.value);
              case "DecimalLiteral":
                return s(y.value) + "m";
              case "Literal": {
                if (y.regex)
                  return i(y.regex);
                if (y.bigint)
                  return u(y.raw);
                if (y.decimal)
                  return s(y.decimal) + "m";
                let { value: h } = y;
                return typeof h == "number" ? s(y.raw) : typeof h == "string" ? a(t(y.raw, c)) : String(h);
              }
            }
          }
          __name(r, "r");
          function u(l) {
            return l.toLowerCase();
          }
          __name(u, "u");
          function i(l) {
            let { pattern: c, flags: y } = l;
            return y = [...y].sort().join(""), `/${c}/${y}`;
          }
          __name(i, "i");
          n.exports = { printLiteral: r };
        } }), Jm = ee({ "src/language-js/printer-estree.js"(e, n) {
          "use strict";
          re();
          var { printDanglingComments: t } = et(), { hasNewline: s } = Ge(), { builders: { join: a, line: r, hardline: u, softline: i, group: l, indent: c }, utils: { replaceTextEndOfLine: y } } = qe(), h = Nm(), g = wm(), { insertPragma: p } = Qa(), D = Za(), v = Ot(), w = eo(), { hasFlowShorthandAnnotationComment: T, hasComment: F, CommentCheckFlags: A, isTheOnlyJsxElementInMarkdown: B, isLineComment: I, isNextLineEmpty: P, needsHardlineAfterDanglingComment: R, rawText: f, hasIgnoreComment: x, isCallExpression: m, isMemberExpression: E, markerForIfWithoutBlockAndSameLineComment: o } = Ke(), { locStart: d, locEnd: C } = it(), _ = Lt(), { printHtmlBinding: b, isVueEventBindingExpression: N } = qm(), { printAngular: k } = Mm(), { printJsx: $, hasJsxIgnoreComment: M } = Rm(), { printFlow: q } = Vm(), { printTypescript: J } = Hm(), { printOptionalToken: L, printBindExpressionCallee: Y, printTypeAnnotation: V, adjustClause: O, printRestSpread: K, printDefiniteToken: se } = Dt(), { printImportDeclaration: Q, printExportDeclaration: le, printExportAllDeclaration: W, printModuleSpecifier: X } = so(), { printTernary: oe } = io(), { printTemplateLiteral: ae } = jt(), { printArray: Ae } = Qt(), { printObject: z } = Xn(), { printClass: H, printClassMethod: Z, printClassProperty: ne } = tr(), { printProperty: fe } = er(), { printFunction: ge, printArrowFunction: Ce, printMethod: _e, printReturnStatement: Oe, printThrowStatement: pe } = Or(), { printCallExpression: ie } = no(), { printVariableDeclarator: ve, printAssignmentExpression: ce } = Zt(), { printBinaryishExpression: U } = Jn(), { printSwitchCaseConsequent: de } = ao(), { printMemberExpression: De } = ro(), { printBlock: he, printBlockBody: Be } = oo(), { printComment: Se } = Gm(), { printLiteral: ye } = Um(), { printDecorators: S } = zn();
          function G(Te, Pe, Fe, Ze) {
            let xe = te(Te, Pe, Fe, Ze);
            if (!xe)
              return "";
            let Je = Te.getValue(), { type: we } = Je;
            if (we === "ClassMethod" || we === "ClassPrivateMethod" || we === "ClassProperty" || we === "ClassAccessorProperty" || we === "PropertyDefinition" || we === "TSAbstractPropertyDefinition" || we === "ClassPrivateProperty" || we === "MethodDefinition" || we === "TSAbstractMethodDefinition" || we === "TSDeclareMethod")
              return xe;
            let Le = [xe], Ve = S(Te, Pe, Fe), be = Je.type === "ClassExpression" && Ve;
            if (Ve && (Le = [...Ve, xe], !be))
              return l(Le);
            if (!v(Te, Pe))
              return Ze && Ze.needsSemi && Le.unshift(";"), Le.length === 1 && Le[0] === xe ? xe : Le;
            if (be && (Le = [c([r, ...Le])]), Le.unshift("("), Ze && Ze.needsSemi && Le.unshift(";"), T(Je)) {
              let [Me] = Je.trailingComments;
              Le.push(" /*", Me.value.trimStart(), "*/"), Me.printed = true;
            }
            return be && Le.push(r), Le.push(")"), Le;
          }
          __name(G, "G");
          function te(Te, Pe, Fe, Ze) {
            let xe = Te.getValue(), Je = Pe.semi ? ";" : "";
            if (!xe)
              return "";
            if (typeof xe == "string")
              return xe;
            for (let Le of [ye, b, k, $, q, J]) {
              let Ve = Le(Te, Pe, Fe);
              if (typeof Ve < "u")
                return Ve;
            }
            let we = [];
            switch (xe.type) {
              case "JsExpressionRoot":
                return Fe("node");
              case "JsonRoot":
                return [Fe("node"), u];
              case "File":
                return xe.program && xe.program.interpreter && we.push(Fe(["program", "interpreter"])), we.push(Fe("program")), we;
              case "Program":
                return Be(Te, Pe, Fe);
              case "EmptyStatement":
                return "";
              case "ExpressionStatement": {
                if (xe.directive)
                  return [Ee(xe.expression, Pe), Je];
                if (Pe.parser === "__vue_event_binding" || Pe.parser === "__vue_ts_event_binding") {
                  let Ve = Te.getParentNode();
                  if (Ve.type === "Program" && Ve.body.length === 1 && Ve.body[0] === xe)
                    return [Fe("expression"), N(xe.expression) ? ";" : ""];
                }
                let Le = t(Te, Pe, true, (Ve) => {
                  let { marker: be } = Ve;
                  return be === o;
                });
                return [Fe("expression"), B(Pe, Te) ? "" : Je, Le ? [" ", Le] : ""];
              }
              case "ParenthesizedExpression":
                return !F(xe.expression) && (xe.expression.type === "ObjectExpression" || xe.expression.type === "ArrayExpression") ? ["(", Fe("expression"), ")"] : l(["(", c([i, Fe("expression")]), i, ")"]);
              case "AssignmentExpression":
                return ce(Te, Pe, Fe);
              case "VariableDeclarator":
                return ve(Te, Pe, Fe);
              case "BinaryExpression":
              case "LogicalExpression":
                return U(Te, Pe, Fe);
              case "AssignmentPattern":
                return [Fe("left"), " = ", Fe("right")];
              case "OptionalMemberExpression":
              case "MemberExpression":
                return De(Te, Pe, Fe);
              case "MetaProperty":
                return [Fe("meta"), ".", Fe("property")];
              case "BindExpression":
                return xe.object && we.push(Fe("object")), we.push(l(c([i, Y(Te, Pe, Fe)]))), we;
              case "Identifier":
                return [xe.name, L(Te), se(Te), V(Te, Pe, Fe)];
              case "V8IntrinsicIdentifier":
                return ["%", xe.name];
              case "SpreadElement":
              case "SpreadElementPattern":
              case "SpreadProperty":
              case "SpreadPropertyPattern":
              case "RestElement":
                return K(Te, Pe, Fe);
              case "FunctionDeclaration":
              case "FunctionExpression":
                return ge(Te, Fe, Pe, Ze);
              case "ArrowFunctionExpression":
                return Ce(Te, Pe, Fe, Ze);
              case "YieldExpression":
                return we.push("yield"), xe.delegate && we.push("*"), xe.argument && we.push(" ", Fe("argument")), we;
              case "AwaitExpression": {
                if (we.push("await"), xe.argument) {
                  we.push(" ", Fe("argument"));
                  let Le = Te.getParentNode();
                  if (m(Le) && Le.callee === xe || E(Le) && Le.object === xe) {
                    we = [c([i, ...we]), i];
                    let Ve = Te.findAncestor((be) => be.type === "AwaitExpression" || be.type === "BlockStatement");
                    if (!Ve || Ve.type !== "AwaitExpression")
                      return l(we);
                  }
                }
                return we;
              }
              case "ExportDefaultDeclaration":
              case "ExportNamedDeclaration":
                return le(Te, Pe, Fe);
              case "ExportAllDeclaration":
                return W(Te, Pe, Fe);
              case "ImportDeclaration":
                return Q(Te, Pe, Fe);
              case "ImportSpecifier":
              case "ExportSpecifier":
              case "ImportNamespaceSpecifier":
              case "ExportNamespaceSpecifier":
              case "ImportDefaultSpecifier":
              case "ExportDefaultSpecifier":
                return X(Te, Pe, Fe);
              case "ImportAttribute":
                return [Fe("key"), ": ", Fe("value")];
              case "Import":
                return "import";
              case "BlockStatement":
              case "StaticBlock":
              case "ClassBody":
                return he(Te, Pe, Fe);
              case "ThrowStatement":
                return pe(Te, Pe, Fe);
              case "ReturnStatement":
                return Oe(Te, Pe, Fe);
              case "NewExpression":
              case "ImportExpression":
              case "OptionalCallExpression":
              case "CallExpression":
                return ie(Te, Pe, Fe);
              case "ObjectExpression":
              case "ObjectPattern":
              case "RecordExpression":
                return z(Te, Pe, Fe);
              case "ObjectProperty":
              case "Property":
                return xe.method || xe.kind === "get" || xe.kind === "set" ? _e(Te, Pe, Fe) : fe(Te, Pe, Fe);
              case "ObjectMethod":
                return _e(Te, Pe, Fe);
              case "Decorator":
                return ["@", Fe("expression")];
              case "ArrayExpression":
              case "ArrayPattern":
              case "TupleExpression":
                return Ae(Te, Pe, Fe);
              case "SequenceExpression": {
                let Le = Te.getParentNode(0);
                if (Le.type === "ExpressionStatement" || Le.type === "ForStatement") {
                  let Ve = [];
                  return Te.each((be, ke) => {
                    ke === 0 ? Ve.push(Fe()) : Ve.push(",", c([r, Fe()]));
                  }, "expressions"), l(Ve);
                }
                return l(a([",", r], Te.map(Fe, "expressions")));
              }
              case "ThisExpression":
                return "this";
              case "Super":
                return "super";
              case "Directive":
                return [Fe("value"), Je];
              case "DirectiveLiteral":
                return Ee(xe, Pe);
              case "UnaryExpression":
                return we.push(xe.operator), /[a-z]$/.test(xe.operator) && we.push(" "), F(xe.argument) ? we.push(l(["(", c([i, Fe("argument")]), i, ")"])) : we.push(Fe("argument")), we;
              case "UpdateExpression":
                return we.push(Fe("argument"), xe.operator), xe.prefix && we.reverse(), we;
              case "ConditionalExpression":
                return oe(Te, Pe, Fe);
              case "VariableDeclaration": {
                let Le = Te.map(Fe, "declarations"), Ve = Te.getParentNode(), be = Ve.type === "ForStatement" || Ve.type === "ForInStatement" || Ve.type === "ForOfStatement", ke = xe.declarations.some((ue) => ue.init), Me;
                return Le.length === 1 && !F(xe.declarations[0]) ? Me = Le[0] : Le.length > 0 && (Me = c(Le[0])), we = [xe.declare ? "declare " : "", xe.kind, Me ? [" ", Me] : "", c(Le.slice(1).map((ue) => [",", ke && !be ? u : r, ue]))], be && Ve.body !== xe || we.push(Je), l(we);
              }
              case "WithStatement":
                return l(["with (", Fe("object"), ")", O(xe.body, Fe("body"))]);
              case "IfStatement": {
                let Le = O(xe.consequent, Fe("consequent")), Ve = l(["if (", l([c([i, Fe("test")]), i]), ")", Le]);
                if (we.push(Ve), xe.alternate) {
                  let be = F(xe.consequent, A.Trailing | A.Line) || R(xe), ke = xe.consequent.type === "BlockStatement" && !be;
                  we.push(ke ? " " : u), F(xe, A.Dangling) && we.push(t(Te, Pe, true), be ? u : " "), we.push("else", l(O(xe.alternate, Fe("alternate"), xe.alternate.type === "IfStatement")));
                }
                return we;
              }
              case "ForStatement": {
                let Le = O(xe.body, Fe("body")), Ve = t(Te, Pe, true), be = Ve ? [Ve, i] : "";
                return !xe.init && !xe.test && !xe.update ? [be, l(["for (;;)", Le])] : [be, l(["for (", l([c([i, Fe("init"), ";", r, Fe("test"), ";", r, Fe("update")]), i]), ")", Le])];
              }
              case "WhileStatement":
                return l(["while (", l([c([i, Fe("test")]), i]), ")", O(xe.body, Fe("body"))]);
              case "ForInStatement":
                return l(["for (", Fe("left"), " in ", Fe("right"), ")", O(xe.body, Fe("body"))]);
              case "ForOfStatement":
                return l(["for", xe.await ? " await" : "", " (", Fe("left"), " of ", Fe("right"), ")", O(xe.body, Fe("body"))]);
              case "DoWhileStatement": {
                let Le = O(xe.body, Fe("body"));
                return we = [l(["do", Le])], xe.body.type === "BlockStatement" ? we.push(" ") : we.push(u), we.push("while (", l([c([i, Fe("test")]), i]), ")", Je), we;
              }
              case "DoExpression":
                return [xe.async ? "async " : "", "do ", Fe("body")];
              case "BreakStatement":
                return we.push("break"), xe.label && we.push(" ", Fe("label")), we.push(Je), we;
              case "ContinueStatement":
                return we.push("continue"), xe.label && we.push(" ", Fe("label")), we.push(Je), we;
              case "LabeledStatement":
                return xe.body.type === "EmptyStatement" ? [Fe("label"), ":;"] : [Fe("label"), ": ", Fe("body")];
              case "TryStatement":
                return ["try ", Fe("block"), xe.handler ? [" ", Fe("handler")] : "", xe.finalizer ? [" finally ", Fe("finalizer")] : ""];
              case "CatchClause":
                if (xe.param) {
                  let Le = F(xe.param, (be) => !_(be) || be.leading && s(Pe.originalText, C(be)) || be.trailing && s(Pe.originalText, d(be), { backwards: true })), Ve = Fe("param");
                  return ["catch ", Le ? ["(", c([i, Ve]), i, ") "] : ["(", Ve, ") "], Fe("body")];
                }
                return ["catch ", Fe("body")];
              case "SwitchStatement":
                return [l(["switch (", c([i, Fe("discriminant")]), i, ")"]), " {", xe.cases.length > 0 ? c([u, a(u, Te.map((Le, Ve, be) => {
                  let ke = Le.getValue();
                  return [Fe(), Ve !== be.length - 1 && P(ke, Pe) ? u : ""];
                }, "cases"))]) : "", u, "}"];
              case "SwitchCase": {
                xe.test ? we.push("case ", Fe("test"), ":") : we.push("default:"), F(xe, A.Dangling) && we.push(" ", t(Te, Pe, true));
                let Le = xe.consequent.filter((Ve) => Ve.type !== "EmptyStatement");
                if (Le.length > 0) {
                  let Ve = de(Te, Pe, Fe);
                  we.push(Le.length === 1 && Le[0].type === "BlockStatement" ? [" ", Ve] : c([u, Ve]));
                }
                return we;
              }
              case "DebuggerStatement":
                return ["debugger", Je];
              case "ClassDeclaration":
              case "ClassExpression":
                return H(Te, Pe, Fe);
              case "ClassMethod":
              case "ClassPrivateMethod":
              case "MethodDefinition":
                return Z(Te, Pe, Fe);
              case "ClassProperty":
              case "PropertyDefinition":
              case "ClassPrivateProperty":
              case "ClassAccessorProperty":
                return ne(Te, Pe, Fe);
              case "TemplateElement":
                return y(xe.value.raw);
              case "TemplateLiteral":
                return ae(Te, Fe, Pe);
              case "TaggedTemplateExpression":
                return [Fe("tag"), Fe("typeParameters"), Fe("quasi")];
              case "PrivateIdentifier":
                return ["#", Fe("name")];
              case "PrivateName":
                return ["#", Fe("id")];
              case "InterpreterDirective":
                return we.push("#!", xe.value, u), P(xe, Pe) && we.push(u), we;
              case "TopicReference":
                return "%";
              case "ArgumentPlaceholder":
                return "?";
              case "ModuleExpression": {
                we.push("module {");
                let Le = Fe("body");
                return Le && we.push(c([u, Le]), u), we.push("}"), we;
              }
              default:
                throw new Error("unknown type: " + JSON.stringify(xe.type));
            }
          }
          __name(te, "te");
          function Ee(Te, Pe) {
            let Fe = f(Te), Ze = Fe.slice(1, -1);
            if (Ze.includes('"') || Ze.includes("'"))
              return Fe;
            let xe = Pe.singleQuote ? "'" : '"';
            return xe + Ze + xe;
          }
          __name(Ee, "Ee");
          function Re(Te) {
            return Te.type && !_(Te) && !I(Te) && Te.type !== "EmptyStatement" && Te.type !== "TemplateElement" && Te.type !== "Import" && Te.type !== "TSEmptyBodyFunctionExpression";
          }
          __name(Re, "Re");
          n.exports = { preprocess: w, print: G, embed: h, insertPragma: p, massageAstNode: g, hasPrettierIgnore(Te) {
            return x(Te) || M(Te);
          }, willPrintOwnComments: D.willPrintOwnComments, canAttachComment: Re, printComment: Se, isBlockComment: _, handleComments: { avoidAstMutation: true, ownLine: D.handleOwnLineComment, endOfLine: D.handleEndOfLineComment, remaining: D.handleRemainingComment }, getCommentChildNodes: D.getCommentChildNodes };
        } }), zm = ee({ "src/language-js/printer-estree-json.js"(e, n) {
          "use strict";
          re();
          var { builders: { hardline: t, indent: s, join: a } } = qe(), r = eo();
          function u(c, y, h) {
            let g = c.getValue();
            switch (g.type) {
              case "JsonRoot":
                return [h("node"), t];
              case "ArrayExpression": {
                if (g.elements.length === 0)
                  return "[]";
                let p = c.map(() => c.getValue() === null ? "null" : h(), "elements");
                return ["[", s([t, a([",", t], p)]), t, "]"];
              }
              case "ObjectExpression":
                return g.properties.length === 0 ? "{}" : ["{", s([t, a([",", t], c.map(h, "properties"))]), t, "}"];
              case "ObjectProperty":
                return [h("key"), ": ", h("value")];
              case "UnaryExpression":
                return [g.operator === "+" ? "" : g.operator, h("argument")];
              case "NullLiteral":
                return "null";
              case "BooleanLiteral":
                return g.value ? "true" : "false";
              case "StringLiteral":
              case "NumericLiteral":
                return JSON.stringify(g.value);
              case "Identifier": {
                let p = c.getParentNode();
                return p && p.type === "ObjectProperty" && p.key === g ? JSON.stringify(g.name) : g.name;
              }
              case "TemplateLiteral":
                return h(["quasis", 0]);
              case "TemplateElement":
                return JSON.stringify(g.value.cooked);
              default:
                throw new Error("unknown type: " + JSON.stringify(g.type));
            }
          }
          __name(u, "u");
          var i = /* @__PURE__ */ new Set(["start", "end", "extra", "loc", "comments", "leadingComments", "trailingComments", "innerComments", "errors", "range", "tokens"]);
          function l(c, y) {
            let { type: h } = c;
            if (h === "ObjectProperty" && c.key.type === "Identifier") {
              y.key = { type: "StringLiteral", value: c.key.name };
              return;
            }
            if (h === "UnaryExpression" && c.operator === "+")
              return y.argument;
            if (h === "ArrayExpression") {
              for (let [g, p] of c.elements.entries())
                p === null && y.elements.splice(g, 0, { type: "NullLiteral" });
              return;
            }
            if (h === "TemplateLiteral")
              return { type: "StringLiteral", value: c.quasis[0].value.cooked };
          }
          __name(l, "l");
          l.ignoredProperties = i, n.exports = { preprocess: r, print: u, massageAstNode: l };
        } }), qt = ee({ "src/common/common-options.js"(e, n) {
          "use strict";
          re();
          var t = "Common";
          n.exports = { bracketSpacing: { since: "0.0.0", category: t, type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, singleQuote: { since: "0.0.0", category: t, type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, proseWrap: { since: "1.8.2", category: t, type: "choice", default: [{ since: "1.8.2", value: true }, { since: "1.9.0", value: "preserve" }], description: "How to wrap prose.", choices: [{ since: "1.9.0", value: "always", description: "Wrap prose if it exceeds the print width." }, { since: "1.9.0", value: "never", description: "Do not wrap prose." }, { since: "1.9.0", value: "preserve", description: "Wrap prose as-is." }] }, bracketSameLine: { since: "2.4.0", category: t, type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { since: "2.6.0", category: t, type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } };
        } }), Xm = ee({ "src/language-js/options.js"(e, n) {
          "use strict";
          re();
          var t = qt(), s = "JavaScript";
          n.exports = { arrowParens: { since: "1.9.0", category: s, type: "choice", default: [{ since: "1.9.0", value: "avoid" }, { since: "2.0.0", value: "always" }], description: "Include parentheses around a sole arrow function parameter.", choices: [{ value: "always", description: "Always include parens. Example: `(x) => x`" }, { value: "avoid", description: "Omit parens when possible. Example: `x => x`" }] }, bracketSameLine: t.bracketSameLine, bracketSpacing: t.bracketSpacing, jsxBracketSameLine: { since: "0.17.0", category: s, type: "boolean", description: "Put > on the last line instead of at a new line.", deprecated: "2.4.0" }, semi: { since: "1.0.0", category: s, type: "boolean", default: true, description: "Print semicolons.", oppositeDescription: "Do not print semicolons, except at the beginning of lines which may need them." }, singleQuote: t.singleQuote, jsxSingleQuote: { since: "1.15.0", category: s, type: "boolean", default: false, description: "Use single quotes in JSX." }, quoteProps: { since: "1.17.0", category: s, type: "choice", default: "as-needed", description: "Change when properties in objects are quoted.", choices: [{ value: "as-needed", description: "Only add quotes around object properties where required." }, { value: "consistent", description: "If at least one property in an object requires quotes, quote all properties." }, { value: "preserve", description: "Respect the input use of quotes in object properties." }] }, trailingComma: { since: "0.0.0", category: s, type: "choice", default: [{ since: "0.0.0", value: false }, { since: "0.19.0", value: "none" }, { since: "2.0.0", value: "es5" }], description: "Print trailing commas wherever possible when multi-line.", choices: [{ value: "es5", description: "Trailing commas where valid in ES5 (objects, arrays, etc.)" }, { value: "none", description: "No trailing commas." }, { value: "all", description: "Trailing commas wherever possible (including function arguments)." }] }, singleAttributePerLine: t.singleAttributePerLine };
        } }), Km = ee({ "src/language-js/parse/parsers.js"() {
          re();
        } }), bn = ee({ "node_modules/linguist-languages/data/JavaScript.json"(e, n) {
          n.exports = { name: "JavaScript", type: "programming", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", color: "#f1e05a", aliases: ["js", "node"], extensions: [".js", "._js", ".bones", ".cjs", ".es", ".es6", ".frag", ".gs", ".jake", ".javascript", ".jsb", ".jscad", ".jsfl", ".jslib", ".jsm", ".jspre", ".jss", ".jsx", ".mjs", ".njs", ".pac", ".sjs", ".ssjs", ".xsjs", ".xsjslib"], filenames: ["Jakefile"], interpreters: ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell"], languageId: 183 };
        } }), Ym = ee({ "node_modules/linguist-languages/data/TypeScript.json"(e, n) {
          n.exports = { name: "TypeScript", type: "programming", color: "#3178c6", aliases: ["ts"], interpreters: ["deno", "ts-node"], extensions: [".ts", ".cts", ".mts"], tmScope: "source.ts", aceMode: "typescript", codemirrorMode: "javascript", codemirrorMimeType: "application/typescript", languageId: 378 };
        } }), Qm = ee({ "node_modules/linguist-languages/data/TSX.json"(e, n) {
          n.exports = { name: "TSX", type: "programming", color: "#3178c6", group: "TypeScript", extensions: [".tsx"], tmScope: "source.tsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", languageId: 94901924 };
        } }), la = ee({ "node_modules/linguist-languages/data/JSON.json"(e, n) {
          n.exports = { name: "JSON", type: "data", color: "#292929", tmScope: "source.json", aceMode: "json", codemirrorMode: "javascript", codemirrorMimeType: "application/json", aliases: ["geojson", "jsonl", "topojson"], extensions: [".json", ".4DForm", ".4DProject", ".avsc", ".geojson", ".gltf", ".har", ".ice", ".JSON-tmLanguage", ".jsonl", ".mcmeta", ".tfstate", ".tfstate.backup", ".topojson", ".webapp", ".webmanifest", ".yy", ".yyp"], filenames: [".arcconfig", ".auto-changelog", ".c8rc", ".htmlhintrc", ".imgbotconfig", ".nycrc", ".tern-config", ".tern-project", ".watchmanconfig", "Pipfile.lock", "composer.lock", "mcmod.info"], languageId: 174 };
        } }), Zm = ee({ "node_modules/linguist-languages/data/JSON with Comments.json"(e, n) {
          n.exports = { name: "JSON with Comments", type: "data", color: "#292929", group: "JSON", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", aliases: ["jsonc"], extensions: [".jsonc", ".code-snippets", ".sublime-build", ".sublime-commands", ".sublime-completions", ".sublime-keymap", ".sublime-macro", ".sublime-menu", ".sublime-mousemap", ".sublime-project", ".sublime-settings", ".sublime-theme", ".sublime-workspace", ".sublime_metrics", ".sublime_session"], filenames: [".babelrc", ".devcontainer.json", ".eslintrc.json", ".jscsrc", ".jshintrc", ".jslintrc", "api-extractor.json", "devcontainer.json", "jsconfig.json", "language-configuration.json", "tsconfig.json", "tslint.json"], languageId: 423 };
        } }), ed = ee({ "node_modules/linguist-languages/data/JSON5.json"(e, n) {
          n.exports = { name: "JSON5", type: "data", color: "#267CB9", extensions: [".json5"], tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "application/json", languageId: 175 };
        } }), td = ee({ "src/language-js/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = Jm(), a = zm(), r = Xm(), u = Km(), i = [t(bn(), (c) => ({ since: "0.0.0", parsers: ["babel", "acorn", "espree", "meriyah", "babel-flow", "babel-ts", "flow", "typescript"], vscodeLanguageIds: ["javascript", "mongo"], interpreters: [...c.interpreters, "zx"], extensions: [...c.extensions.filter((y) => y !== ".jsx"), ".wxs"] })), t(bn(), () => ({ name: "Flow", since: "0.0.0", parsers: ["flow", "babel-flow"], vscodeLanguageIds: ["javascript"], aliases: [], filenames: [], extensions: [".js.flow"] })), t(bn(), () => ({ name: "JSX", since: "0.0.0", parsers: ["babel", "babel-flow", "babel-ts", "flow", "typescript", "espree", "meriyah"], vscodeLanguageIds: ["javascriptreact"], aliases: void 0, filenames: void 0, extensions: [".jsx"], group: "JavaScript", interpreters: void 0, tmScope: "source.js.jsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", color: void 0 })), t(Ym(), () => ({ since: "1.4.0", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescript"] })), t(Qm(), () => ({ since: "1.4.0", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescriptreact"] })), t(la(), () => ({ name: "JSON.stringify", since: "1.13.0", parsers: ["json-stringify"], vscodeLanguageIds: ["json"], extensions: [".importmap"], filenames: ["package.json", "package-lock.json", "composer.json"] })), t(la(), (c) => ({ since: "1.5.0", parsers: ["json"], vscodeLanguageIds: ["json"], extensions: c.extensions.filter((y) => y !== ".jsonl") })), t(Zm(), (c) => ({ since: "1.5.0", parsers: ["json"], vscodeLanguageIds: ["jsonc"], filenames: [...c.filenames, ".eslintrc", ".swcrc"] })), t(ed(), () => ({ since: "1.13.0", parsers: ["json5"], vscodeLanguageIds: ["json5"] }))], l = { estree: s, "estree-json": a };
          n.exports = { languages: i, options: r, printers: l, parsers: u };
        } }), rd = ee({ "src/language-css/clean.js"(e, n) {
          "use strict";
          re();
          var { isFrontMatterNode: t } = Ge(), s = lt(), a = /* @__PURE__ */ new Set(["raw", "raws", "sourceIndex", "source", "before", "after", "trailingComma"]);
          function r(i, l, c) {
            if (t(i) && i.lang === "yaml" && delete l.value, i.type === "css-comment" && c.type === "css-root" && c.nodes.length > 0 && ((c.nodes[0] === i || t(c.nodes[0]) && c.nodes[1] === i) && (delete l.text, /^\*\s*@(?:format|prettier)\s*$/.test(i.text)) || c.type === "css-root" && s(c.nodes) === i))
              return null;
            if (i.type === "value-root" && delete l.text, (i.type === "media-query" || i.type === "media-query-list" || i.type === "media-feature-expression") && delete l.value, i.type === "css-rule" && delete l.params, i.type === "selector-combinator" && (l.value = l.value.replace(/\s+/g, " ")), i.type === "media-feature" && (l.value = l.value.replace(/ /g, "")), (i.type === "value-word" && (i.isColor && i.isHex || ["initial", "inherit", "unset", "revert"].includes(l.value.replace().toLowerCase())) || i.type === "media-feature" || i.type === "selector-root-invalid" || i.type === "selector-pseudo") && (l.value = l.value.toLowerCase()), i.type === "css-decl" && (l.prop = l.prop.toLowerCase()), (i.type === "css-atrule" || i.type === "css-import") && (l.name = l.name.toLowerCase()), i.type === "value-number" && (l.unit = l.unit.toLowerCase()), (i.type === "media-feature" || i.type === "media-keyword" || i.type === "media-type" || i.type === "media-unknown" || i.type === "media-url" || i.type === "media-value" || i.type === "selector-attribute" || i.type === "selector-string" || i.type === "selector-class" || i.type === "selector-combinator" || i.type === "value-string") && l.value && (l.value = u(l.value)), i.type === "selector-attribute" && (l.attribute = l.attribute.trim(), l.namespace && typeof l.namespace == "string" && (l.namespace = l.namespace.trim(), l.namespace.length === 0 && (l.namespace = true)), l.value && (l.value = l.value.trim().replace(/^["']|["']$/g, ""), delete l.quoted)), (i.type === "media-value" || i.type === "media-type" || i.type === "value-number" || i.type === "selector-root-invalid" || i.type === "selector-class" || i.type === "selector-combinator" || i.type === "selector-tag") && l.value && (l.value = l.value.replace(/([\d+.Ee-]+)([A-Za-z]*)/g, (y, h, g) => {
              let p = Number(h);
              return Number.isNaN(p) ? y : p + g.toLowerCase();
            })), i.type === "selector-tag") {
              let y = i.value.toLowerCase();
              ["from", "to"].includes(y) && (l.value = y);
            }
            if (i.type === "css-atrule" && i.name.toLowerCase() === "supports" && delete l.value, i.type === "selector-unknown" && delete l.value, i.type === "value-comma_group") {
              let y = i.groups.findIndex((h) => h.type === "value-number" && h.unit === "...");
              y !== -1 && (l.groups[y].unit = "", l.groups.splice(y + 1, 0, { type: "value-word", value: "...", isColor: false, isHex: false }));
            }
          }
          __name(r, "r");
          r.ignoredProperties = a;
          function u(i) {
            return i.replace(/'/g, '"').replace(/\\([^\dA-Fa-f])/g, "$1");
          }
          __name(u, "u");
          n.exports = r;
        } }), Kn = ee({ "src/utils/front-matter/print.js"(e, n) {
          "use strict";
          re();
          var { builders: { hardline: t, markAsRoot: s } } = qe();
          function a(r, u) {
            if (r.lang === "yaml") {
              let i = r.value.trim(), l = i ? u(i, { parser: "yaml" }, { stripTrailingHardline: true }) : "";
              return s([r.startDelimiter, t, l, l ? t : "", r.endDelimiter]);
            }
          }
          __name(a, "a");
          n.exports = a;
        } }), nd = ee({ "src/language-css/embed.js"(e, n) {
          "use strict";
          re();
          var { builders: { hardline: t } } = qe(), s = Kn();
          function a(r, u, i) {
            let l = r.getValue();
            if (l.type === "front-matter") {
              let c = s(l, i);
              return c ? [c, t] : "";
            }
          }
          __name(a, "a");
          n.exports = a;
        } }), lo = ee({ "src/utils/front-matter/parse.js"(e, n) {
          "use strict";
          re();
          var t = new RegExp("^(?<startDelimiter>-{3}|\\+{3})(?<language>[^\\n]*)\\n(?:|(?<value>.*?)\\n)(?<endDelimiter>\\k<startDelimiter>|\\.{3})[^\\S\\n]*(?:\\n|$)", "s");
          function s(a) {
            let r = a.match(t);
            if (!r)
              return { content: a };
            let { startDelimiter: u, language: i, value: l = "", endDelimiter: c } = r.groups, y = i.trim() || "yaml";
            if (u === "+++" && (y = "toml"), y !== "yaml" && u !== c)
              return { content: a };
            let [h] = r;
            return { frontMatter: { type: "front-matter", lang: y, value: l, startDelimiter: u, endDelimiter: c, raw: h.replace(/\n$/, "") }, content: h.replace(/[^\n]/g, " ") + a.slice(h.length) };
          }
          __name(s, "s");
          n.exports = s;
        } }), ud = ee({ "src/language-css/pragma.js"(e, n) {
          "use strict";
          re();
          var t = Qa(), s = lo();
          function a(u) {
            return t.hasPragma(s(u).content);
          }
          __name(a, "a");
          function r(u) {
            let { frontMatter: i, content: l } = s(u);
            return (i ? i.raw + `

` : "") + t.insertPragma(l);
          }
          __name(r, "r");
          n.exports = { hasPragma: a, insertPragma: r };
        } }), sd = ee({ "src/language-css/utils/index.js"(e, n) {
          "use strict";
          re();
          var t = /* @__PURE__ */ new Set(["red", "green", "blue", "alpha", "a", "rgb", "hue", "h", "saturation", "s", "lightness", "l", "whiteness", "w", "blackness", "b", "tint", "shade", "blend", "blenda", "contrast", "hsl", "hsla", "hwb", "hwba"]);
          function s(z, H) {
            let Z = Array.isArray(H) ? H : [H], ne = -1, fe;
            for (; fe = z.getParentNode(++ne); )
              if (Z.includes(fe.type))
                return ne;
            return -1;
          }
          __name(s, "s");
          function a(z, H) {
            let Z = s(z, H);
            return Z === -1 ? null : z.getParentNode(Z);
          }
          __name(a, "a");
          function r(z) {
            var H;
            let Z = a(z, "css-decl");
            return Z == null || (H = Z.prop) === null || H === void 0 ? void 0 : H.toLowerCase();
          }
          __name(r, "r");
          var u = /* @__PURE__ */ new Set(["initial", "inherit", "unset", "revert"]);
          function i(z) {
            return u.has(z.toLowerCase());
          }
          __name(i, "i");
          function l(z, H) {
            let Z = a(z, "css-atrule");
            return (Z == null ? void 0 : Z.name) && Z.name.toLowerCase().endsWith("keyframes") && ["from", "to"].includes(H.toLowerCase());
          }
          __name(l, "l");
          function c(z) {
            return z.includes("$") || z.includes("@") || z.includes("#") || z.startsWith("%") || z.startsWith("--") || z.startsWith(":--") || z.includes("(") && z.includes(")") ? z : z.toLowerCase();
          }
          __name(c, "c");
          function y(z, H) {
            var Z;
            let ne = a(z, "value-func");
            return (ne == null || (Z = ne.value) === null || Z === void 0 ? void 0 : Z.toLowerCase()) === H;
          }
          __name(y, "y");
          function h(z) {
            var H;
            let Z = a(z, "css-rule"), ne = Z == null || (H = Z.raws) === null || H === void 0 ? void 0 : H.selector;
            return ne && (ne.startsWith(":import") || ne.startsWith(":export"));
          }
          __name(h, "h");
          function g(z, H) {
            let Z = Array.isArray(H) ? H : [H], ne = a(z, "css-atrule");
            return ne && Z.includes(ne.name.toLowerCase());
          }
          __name(g, "g");
          function p(z) {
            let H = z.getValue(), Z = a(z, "css-atrule");
            return (Z == null ? void 0 : Z.name) === "import" && H.groups[0].value === "url" && H.groups.length === 2;
          }
          __name(p, "p");
          function D(z) {
            return z.type === "value-func" && z.value.toLowerCase() === "url";
          }
          __name(D, "D");
          function v(z, H) {
            var Z;
            let ne = (Z = z.getParentNode()) === null || Z === void 0 ? void 0 : Z.nodes;
            return ne && ne.indexOf(H) === ne.length - 1;
          }
          __name(v, "v");
          function w(z) {
            let { selector: H } = z;
            return H ? typeof H == "string" && /^@.+:.*$/.test(H) || H.value && /^@.+:.*$/.test(H.value) : false;
          }
          __name(w, "w");
          function T(z) {
            return z.type === "value-word" && ["from", "through", "end"].includes(z.value);
          }
          __name(T, "T");
          function F(z) {
            return z.type === "value-word" && ["and", "or", "not"].includes(z.value);
          }
          __name(F, "F");
          function A(z) {
            return z.type === "value-word" && z.value === "in";
          }
          __name(A, "A");
          function B(z) {
            return z.type === "value-operator" && z.value === "*";
          }
          __name(B, "B");
          function I(z) {
            return z.type === "value-operator" && z.value === "/";
          }
          __name(I, "I");
          function P(z) {
            return z.type === "value-operator" && z.value === "+";
          }
          __name(P, "P");
          function R(z) {
            return z.type === "value-operator" && z.value === "-";
          }
          __name(R, "R");
          function f(z) {
            return z.type === "value-operator" && z.value === "%";
          }
          __name(f, "f");
          function x(z) {
            return B(z) || I(z) || P(z) || R(z) || f(z);
          }
          __name(x, "x");
          function m(z) {
            return z.type === "value-word" && ["==", "!="].includes(z.value);
          }
          __name(m, "m");
          function E(z) {
            return z.type === "value-word" && ["<", ">", "<=", ">="].includes(z.value);
          }
          __name(E, "E");
          function o(z) {
            return z.type === "css-atrule" && ["if", "else", "for", "each", "while"].includes(z.name);
          }
          __name(o, "o");
          function d(z) {
            var H;
            return ((H = z.raws) === null || H === void 0 ? void 0 : H.params) && /^\(\s*\)$/.test(z.raws.params);
          }
          __name(d, "d");
          function C(z) {
            return z.name.startsWith("prettier-placeholder");
          }
          __name(C, "C");
          function _(z) {
            return z.prop.startsWith("@prettier-placeholder");
          }
          __name(_, "_");
          function b(z, H) {
            return z.value === "$$" && z.type === "value-func" && (H == null ? void 0 : H.type) === "value-word" && !H.raws.before;
          }
          __name(b, "b");
          function N(z) {
            var H, Z;
            return ((H = z.value) === null || H === void 0 ? void 0 : H.type) === "value-root" && ((Z = z.value.group) === null || Z === void 0 ? void 0 : Z.type) === "value-value" && z.prop.toLowerCase() === "composes";
          }
          __name(N, "N");
          function k(z) {
            var H, Z, ne;
            return ((H = z.value) === null || H === void 0 || (Z = H.group) === null || Z === void 0 || (ne = Z.group) === null || ne === void 0 ? void 0 : ne.type) === "value-paren_group" && z.value.group.group.open !== null && z.value.group.group.close !== null;
          }
          __name(k, "k");
          function $(z) {
            var H;
            return ((H = z.raws) === null || H === void 0 ? void 0 : H.before) === "";
          }
          __name($, "$");
          function M(z) {
            var H, Z;
            return z.type === "value-comma_group" && ((H = z.groups) === null || H === void 0 || (Z = H[1]) === null || Z === void 0 ? void 0 : Z.type) === "value-colon";
          }
          __name(M, "M");
          function q(z) {
            var H;
            return z.type === "value-paren_group" && ((H = z.groups) === null || H === void 0 ? void 0 : H[0]) && M(z.groups[0]);
          }
          __name(q, "q");
          function J(z) {
            var H;
            let Z = z.getValue();
            if (Z.groups.length === 0)
              return false;
            let ne = z.getParentNode(1);
            if (!q(Z) && !(ne && q(ne)))
              return false;
            let fe = a(z, "css-decl");
            return !!(fe != null && (H = fe.prop) !== null && H !== void 0 && H.startsWith("$") || q(ne) || ne.type === "value-func");
          }
          __name(J, "J");
          function L(z) {
            return z.type === "value-comment" && z.inline;
          }
          __name(L, "L");
          function Y(z) {
            return z.type === "value-word" && z.value === "#";
          }
          __name(Y, "Y");
          function V(z) {
            return z.type === "value-word" && z.value === "{";
          }
          __name(V, "V");
          function O(z) {
            return z.type === "value-word" && z.value === "}";
          }
          __name(O, "O");
          function K(z) {
            return ["value-word", "value-atword"].includes(z.type);
          }
          __name(K, "K");
          function se(z) {
            return (z == null ? void 0 : z.type) === "value-colon";
          }
          __name(se, "se");
          function Q(z, H) {
            if (!M(H))
              return false;
            let { groups: Z } = H, ne = Z.indexOf(z);
            return ne === -1 ? false : se(Z[ne + 1]);
          }
          __name(Q, "Q");
          function le(z) {
            return z.value && ["not", "and", "or"].includes(z.value.toLowerCase());
          }
          __name(le, "le");
          function W(z) {
            return z.type !== "value-func" ? false : t.has(z.value.toLowerCase());
          }
          __name(W, "W");
          function X(z) {
            return /\/\//.test(z.split(/[\n\r]/).pop());
          }
          __name(X, "X");
          function oe(z) {
            return (z == null ? void 0 : z.type) === "value-atword" && z.value.startsWith("prettier-placeholder-");
          }
          __name(oe, "oe");
          function ae(z, H) {
            var Z, ne;
            if (((Z = z.open) === null || Z === void 0 ? void 0 : Z.value) !== "(" || ((ne = z.close) === null || ne === void 0 ? void 0 : ne.value) !== ")" || z.groups.some((fe) => fe.type !== "value-comma_group"))
              return false;
            if (H.type === "value-comma_group") {
              let fe = H.groups.indexOf(z) - 1, ge = H.groups[fe];
              if ((ge == null ? void 0 : ge.type) === "value-word" && ge.value === "with")
                return true;
            }
            return false;
          }
          __name(ae, "ae");
          function Ae(z) {
            var H, Z;
            return z.type === "value-paren_group" && ((H = z.open) === null || H === void 0 ? void 0 : H.value) === "(" && ((Z = z.close) === null || Z === void 0 ? void 0 : Z.value) === ")";
          }
          __name(Ae, "Ae");
          n.exports = { getAncestorCounter: s, getAncestorNode: a, getPropOfDeclNode: r, maybeToLowerCase: c, insideValueFunctionNode: y, insideICSSRuleNode: h, insideAtRuleNode: g, insideURLFunctionInImportAtRuleNode: p, isKeyframeAtRuleKeywords: l, isWideKeywords: i, isLastNode: v, isSCSSControlDirectiveNode: o, isDetachedRulesetDeclarationNode: w, isRelationalOperatorNode: E, isEqualityOperatorNode: m, isMultiplicationNode: B, isDivisionNode: I, isAdditionNode: P, isSubtractionNode: R, isModuloNode: f, isMathOperatorNode: x, isEachKeywordNode: A, isForKeywordNode: T, isURLFunctionNode: D, isIfElseKeywordNode: F, hasComposesNode: N, hasParensAroundNode: k, hasEmptyRawBefore: $, isDetachedRulesetCallNode: d, isTemplatePlaceholderNode: C, isTemplatePropNode: _, isPostcssSimpleVarNode: b, isKeyValuePairNode: M, isKeyValuePairInParenGroupNode: q, isKeyInValuePairNode: Q, isSCSSMapItemNode: J, isInlineValueCommentNode: L, isHashNode: Y, isLeftCurlyBraceNode: V, isRightCurlyBraceNode: O, isWordNode: K, isColonNode: se, isMediaAndSupportsKeywords: le, isColorAdjusterFuncNode: W, lastLineHasInlineComment: X, isAtWordPlaceholderNode: oe, isConfigurationNode: ae, isParenGroupNode: Ae };
        } }), id = ee({ "src/utils/line-column-to-index.js"(e, n) {
          "use strict";
          re(), n.exports = function(t, s) {
            let a = 0;
            for (let r = 0; r < t.line - 1; ++r)
              a = s.indexOf(`
`, a) + 1;
            return a + t.column;
          };
        } }), ad = ee({ "src/language-css/loc.js"(e, n) {
          "use strict";
          re();
          var { skipEverythingButNewLine: t } = _r(), s = lt(), a = id();
          function r(p, D) {
            return typeof p.sourceIndex == "number" ? p.sourceIndex : p.source ? a(p.source.start, D) - 1 : null;
          }
          __name(r, "r");
          function u(p, D) {
            if (p.type === "css-comment" && p.inline)
              return t(D, p.source.startOffset);
            let v = p.nodes && s(p.nodes);
            return v && p.source && !p.source.end && (p = v), p.source && p.source.end ? a(p.source.end, D) : null;
          }
          __name(u, "u");
          function i(p, D) {
            p.source && (p.source.startOffset = r(p, D), p.source.endOffset = u(p, D));
            for (let v in p) {
              let w = p[v];
              v === "source" || !w || typeof w != "object" || (w.type === "value-root" || w.type === "value-unknown" ? l(w, c(p), w.text || w.value) : i(w, D));
            }
          }
          __name(i, "i");
          function l(p, D, v) {
            p.source && (p.source.startOffset = r(p, v) + D, p.source.endOffset = u(p, v) + D);
            for (let w in p) {
              let T = p[w];
              w === "source" || !T || typeof T != "object" || l(T, D, v);
            }
          }
          __name(l, "l");
          function c(p) {
            let D = p.source.startOffset;
            return typeof p.prop == "string" && (D += p.prop.length), p.type === "css-atrule" && typeof p.name == "string" && (D += 1 + p.name.length + p.raws.afterName.match(/^\s*:?\s*/)[0].length), p.type !== "css-atrule" && p.raws && typeof p.raws.between == "string" && (D += p.raws.between.length), D;
          }
          __name(c, "c");
          function y(p) {
            let D = "initial", v = "initial", w, T = false, F = [];
            for (let A = 0; A < p.length; A++) {
              let B = p[A];
              switch (D) {
                case "initial":
                  if (B === "'") {
                    D = "single-quotes";
                    continue;
                  }
                  if (B === '"') {
                    D = "double-quotes";
                    continue;
                  }
                  if ((B === "u" || B === "U") && p.slice(A, A + 4).toLowerCase() === "url(") {
                    D = "url", A += 3;
                    continue;
                  }
                  if (B === "*" && p[A - 1] === "/") {
                    D = "comment-block";
                    continue;
                  }
                  if (B === "/" && p[A - 1] === "/") {
                    D = "comment-inline", w = A - 1;
                    continue;
                  }
                  continue;
                case "single-quotes":
                  if (B === "'" && p[A - 1] !== "\\" && (D = v, v = "initial"), B === `
` || B === "\r")
                    return p;
                  continue;
                case "double-quotes":
                  if (B === '"' && p[A - 1] !== "\\" && (D = v, v = "initial"), B === `
` || B === "\r")
                    return p;
                  continue;
                case "url":
                  if (B === ")" && (D = "initial"), B === `
` || B === "\r")
                    return p;
                  if (B === "'") {
                    D = "single-quotes", v = "url";
                    continue;
                  }
                  if (B === '"') {
                    D = "double-quotes", v = "url";
                    continue;
                  }
                  continue;
                case "comment-block":
                  B === "/" && p[A - 1] === "*" && (D = "initial");
                  continue;
                case "comment-inline":
                  (B === '"' || B === "'" || B === "*") && (T = true), (B === `
` || B === "\r") && (T && F.push([w, A]), D = "initial", T = false);
                  continue;
              }
            }
            for (let [A, B] of F)
              p = p.slice(0, A) + p.slice(A, B).replace(/["'*]/g, " ") + p.slice(B);
            return p;
          }
          __name(y, "y");
          function h(p) {
            return p.source.startOffset;
          }
          __name(h, "h");
          function g(p) {
            return p.source.endOffset;
          }
          __name(g, "g");
          n.exports = { locStart: h, locEnd: g, calculateLoc: i, replaceQuotesInInlineComments: y };
        } }), od = ee({ "src/language-css/utils/is-less-parser.js"(e, n) {
          "use strict";
          re();
          function t(s) {
            return s.parser === "css" || s.parser === "less";
          }
          __name(t, "t");
          n.exports = t;
        } }), ld = ee({ "src/language-css/utils/is-scss.js"(e, n) {
          "use strict";
          re();
          function t(s, a) {
            return s === "less" || s === "scss" ? s === "scss" : /(?:\w\s*:\s*[^:}]+|#){|@import[^\n]+(?:url|,)/.test(a);
          }
          __name(t, "t");
          n.exports = t;
        } }), cd = ee({ "src/language-css/utils/css-units.evaluate.js"(e, n) {
          n.exports = { em: "em", rem: "rem", ex: "ex", rex: "rex", cap: "cap", rcap: "rcap", ch: "ch", rch: "rch", ic: "ic", ric: "ric", lh: "lh", rlh: "rlh", vw: "vw", svw: "svw", lvw: "lvw", dvw: "dvw", vh: "vh", svh: "svh", lvh: "lvh", dvh: "dvh", vi: "vi", svi: "svi", lvi: "lvi", dvi: "dvi", vb: "vb", svb: "svb", lvb: "lvb", dvb: "dvb", vmin: "vmin", svmin: "svmin", lvmin: "lvmin", dvmin: "dvmin", vmax: "vmax", svmax: "svmax", lvmax: "lvmax", dvmax: "dvmax", cm: "cm", mm: "mm", q: "Q", in: "in", pt: "pt", pc: "pc", px: "px", deg: "deg", grad: "grad", rad: "rad", turn: "turn", s: "s", ms: "ms", hz: "Hz", khz: "kHz", dpi: "dpi", dpcm: "dpcm", dppx: "dppx", x: "x" };
        } }), pd = ee({ "src/language-css/utils/print-unit.js"(e, n) {
          "use strict";
          re();
          var t = cd();
          function s(a) {
            let r = a.toLowerCase();
            return Object.prototype.hasOwnProperty.call(t, r) ? t[r] : a;
          }
          __name(s, "s");
          n.exports = s;
        } }), fd = ee({ "src/language-css/printer-postcss.js"(e, n) {
          "use strict";
          re();
          var t = lt(), { printNumber: s, printString: a, hasNewline: r, isFrontMatterNode: u, isNextLineEmpty: i, isNonEmptyArray: l } = Ge(), { builders: { join: c, line: y, hardline: h, softline: g, group: p, fill: D, indent: v, dedent: w, ifBreak: T, breakParent: F }, utils: { removeLines: A, getDocParts: B } } = qe(), I = rd(), P = nd(), { insertPragma: R } = ud(), { getAncestorNode: f, getPropOfDeclNode: x, maybeToLowerCase: m, insideValueFunctionNode: E, insideICSSRuleNode: o, insideAtRuleNode: d, insideURLFunctionInImportAtRuleNode: C, isKeyframeAtRuleKeywords: _, isWideKeywords: b, isLastNode: N, isSCSSControlDirectiveNode: k, isDetachedRulesetDeclarationNode: $, isRelationalOperatorNode: M, isEqualityOperatorNode: q, isMultiplicationNode: J, isDivisionNode: L, isAdditionNode: Y, isSubtractionNode: V, isMathOperatorNode: O, isEachKeywordNode: K, isForKeywordNode: se, isURLFunctionNode: Q, isIfElseKeywordNode: le, hasComposesNode: W, hasParensAroundNode: X, hasEmptyRawBefore: oe, isKeyValuePairNode: ae, isKeyInValuePairNode: Ae, isDetachedRulesetCallNode: z, isTemplatePlaceholderNode: H, isTemplatePropNode: Z, isPostcssSimpleVarNode: ne, isSCSSMapItemNode: fe, isInlineValueCommentNode: ge, isHashNode: Ce, isLeftCurlyBraceNode: _e, isRightCurlyBraceNode: Oe, isWordNode: pe, isColonNode: ie, isMediaAndSupportsKeywords: ve, isColorAdjusterFuncNode: ce, lastLineHasInlineComment: U, isAtWordPlaceholderNode: de, isConfigurationNode: De, isParenGroupNode: he } = sd(), { locStart: Be, locEnd: Se } = ad(), ye = od(), S = ld(), G = pd();
          function te(be) {
            return be.trailingComma === "es5" || be.trailingComma === "all";
          }
          __name(te, "te");
          function Ee(be, ke, Me) {
            let ue = be.getValue();
            if (!ue)
              return "";
            if (typeof ue == "string")
              return ue;
            switch (ue.type) {
              case "front-matter":
                return [ue.raw, h];
              case "css-root": {
                let He = Re(be, ke, Me), Ue = ue.raws.after.trim();
                return [He, Ue ? ` ${Ue}` : "", B(He).length > 0 ? h : ""];
              }
              case "css-comment": {
                let He = ue.inline || ue.raws.inline, Ue = ke.originalText.slice(Be(ue), Se(ue));
                return He ? Ue.trimEnd() : Ue;
              }
              case "css-rule":
                return [Me("selector"), ue.important ? " !important" : "", ue.nodes ? [ue.selector && ue.selector.type === "selector-unknown" && U(ue.selector.value) ? y : " ", "{", ue.nodes.length > 0 ? v([h, Re(be, ke, Me)]) : "", h, "}", $(ue) ? ";" : ""] : ";"];
              case "css-decl": {
                let He = be.getParentNode(), { between: Ue } = ue.raws, Xe = Ue.trim(), at = Xe === ":", nt = W(ue) ? A(Me("value")) : Me("value");
                return !at && U(Xe) && (nt = v([h, w(nt)])), [ue.raws.before.replace(/[\s;]/g, ""), o(be) ? ue.prop : m(ue.prop), Xe.startsWith("//") ? " " : "", Xe, ue.extend ? "" : " ", ye(ke) && ue.extend && ue.selector ? ["extend(", Me("selector"), ")"] : "", nt, ue.raws.important ? ue.raws.important.replace(/\s*!\s*important/i, " !important") : ue.important ? " !important" : "", ue.raws.scssDefault ? ue.raws.scssDefault.replace(/\s*!default/i, " !default") : ue.scssDefault ? " !default" : "", ue.raws.scssGlobal ? ue.raws.scssGlobal.replace(/\s*!global/i, " !global") : ue.scssGlobal ? " !global" : "", ue.nodes ? [" {", v([g, Re(be, ke, Me)]), g, "}"] : Z(ue) && !He.raws.semicolon && ke.originalText[Se(ue) - 1] !== ";" ? "" : ke.__isHTMLStyleAttribute && N(be, ue) ? T(";") : ";"];
              }
              case "css-atrule": {
                let He = be.getParentNode(), Ue = H(ue) && !He.raws.semicolon && ke.originalText[Se(ue) - 1] !== ";";
                if (ye(ke)) {
                  if (ue.mixin)
                    return [Me("selector"), ue.important ? " !important" : "", Ue ? "" : ";"];
                  if (ue.function)
                    return [ue.name, Me("params"), Ue ? "" : ";"];
                  if (ue.variable)
                    return ["@", ue.name, ": ", ue.value ? Me("value") : "", ue.raws.between.trim() ? ue.raws.between.trim() + " " : "", ue.nodes ? ["{", v([ue.nodes.length > 0 ? g : "", Re(be, ke, Me)]), g, "}"] : "", Ue ? "" : ";"];
                }
                return ["@", z(ue) || ue.name.endsWith(":") ? ue.name : m(ue.name), ue.params ? [z(ue) ? "" : H(ue) ? ue.raws.afterName === "" ? "" : ue.name.endsWith(":") ? " " : /^\s*\n\s*\n/.test(ue.raws.afterName) ? [h, h] : /^\s*\n/.test(ue.raws.afterName) ? h : " " : " ", Me("params")] : "", ue.selector ? v([" ", Me("selector")]) : "", ue.value ? p([" ", Me("value"), k(ue) ? X(ue) ? " " : y : ""]) : ue.name === "else" ? " " : "", ue.nodes ? [k(ue) ? "" : ue.selector && !ue.selector.nodes && typeof ue.selector.value == "string" && U(ue.selector.value) || !ue.selector && typeof ue.params == "string" && U(ue.params) ? y : " ", "{", v([ue.nodes.length > 0 ? g : "", Re(be, ke, Me)]), g, "}"] : Ue ? "" : ";"];
              }
              case "media-query-list": {
                let He = [];
                return be.each((Ue) => {
                  let Xe = Ue.getValue();
                  Xe.type === "media-query" && Xe.value === "" || He.push(Me());
                }, "nodes"), p(v(c(y, He)));
              }
              case "media-query":
                return [c(" ", be.map(Me, "nodes")), N(be, ue) ? "" : ","];
              case "media-type":
                return Le(Je(ue.value, ke));
              case "media-feature-expression":
                return ue.nodes ? ["(", ...be.map(Me, "nodes"), ")"] : ue.value;
              case "media-feature":
                return m(Je(ue.value.replace(/ +/g, " "), ke));
              case "media-colon":
                return [ue.value, " "];
              case "media-value":
                return Le(Je(ue.value, ke));
              case "media-keyword":
                return Je(ue.value, ke);
              case "media-url":
                return Je(ue.value.replace(/^url\(\s+/gi, "url(").replace(/\s+\)$/g, ")"), ke);
              case "media-unknown":
                return ue.value;
              case "selector-root":
                return p([d(be, "custom-selector") ? [f(be, "css-atrule").customSelector, y] : "", c([",", d(be, ["extend", "custom-selector", "nest"]) ? y : h], be.map(Me, "nodes"))]);
              case "selector-selector":
                return p(v(be.map(Me, "nodes")));
              case "selector-comment":
                return ue.value;
              case "selector-string":
                return Je(ue.value, ke);
              case "selector-tag": {
                let He = be.getParentNode(), Ue = He && He.nodes.indexOf(ue), Xe = Ue && He.nodes[Ue - 1];
                return [ue.namespace ? [ue.namespace === true ? "" : ue.namespace.trim(), "|"] : "", Xe.type === "selector-nesting" ? ue.value : Le(_(be, ue.value) ? ue.value.toLowerCase() : ue.value)];
              }
              case "selector-id":
                return ["#", ue.value];
              case "selector-class":
                return [".", Le(Je(ue.value, ke))];
              case "selector-attribute": {
                var st;
                return ["[", ue.namespace ? [ue.namespace === true ? "" : ue.namespace.trim(), "|"] : "", ue.attribute.trim(), (st = ue.operator) !== null && st !== void 0 ? st : "", ue.value ? we(Je(ue.value.trim(), ke), ke) : "", ue.insensitive ? " i" : "", "]"];
              }
              case "selector-combinator": {
                if (ue.value === "+" || ue.value === ">" || ue.value === "~" || ue.value === ">>>") {
                  let Xe = be.getParentNode();
                  return [Xe.type === "selector-selector" && Xe.nodes[0] === ue ? "" : y, ue.value, N(be, ue) ? "" : " "];
                }
                let He = ue.value.trim().startsWith("(") ? y : "", Ue = Le(Je(ue.value.trim(), ke)) || y;
                return [He, Ue];
              }
              case "selector-universal":
                return [ue.namespace ? [ue.namespace === true ? "" : ue.namespace.trim(), "|"] : "", ue.value];
              case "selector-pseudo":
                return [m(ue.value), l(ue.nodes) ? p(["(", v([g, c([",", y], be.map(Me, "nodes"))]), g, ")"]) : ""];
              case "selector-nesting":
                return ue.value;
              case "selector-unknown": {
                let He = f(be, "css-rule");
                if (He && He.isSCSSNesterProperty)
                  return Le(Je(m(ue.value), ke));
                let Ue = be.getParentNode();
                if (Ue.raws && Ue.raws.selector) {
                  let at = Be(Ue), nt = at + Ue.raws.selector.length;
                  return ke.originalText.slice(at, nt).trim();
                }
                let Xe = be.getParentNode(1);
                if (Ue.type === "value-paren_group" && Xe && Xe.type === "value-func" && Xe.value === "selector") {
                  let at = Se(Ue.open) + 1, nt = Be(Ue.close), j = ke.originalText.slice(at, nt).trim();
                  return U(j) ? [F, j] : j;
                }
                return ue.value;
              }
              case "value-value":
              case "value-root":
                return Me("group");
              case "value-comment":
                return ke.originalText.slice(Be(ue), Se(ue));
              case "value-comma_group": {
                let He = be.getParentNode(), Ue = be.getParentNode(1), Xe = x(be), at = Xe && He.type === "value-value" && (Xe === "grid" || Xe.startsWith("grid-template")), nt = f(be, "css-atrule"), j = nt && k(nt), me = ue.groups.some((ot) => ge(ot)), Ie = be.map(Me, "groups"), je = [], Ye = E(be, "url"), ut = false, ze = false;
                for (let ot = 0; ot < ue.groups.length; ++ot) {
                  var rt;
                  je.push(Ie[ot]);
                  let tt = ue.groups[ot - 1], $e = ue.groups[ot], We = ue.groups[ot + 1], nr = ue.groups[ot + 2];
                  if (Ye) {
                    (We && Y(We) || Y($e)) && je.push(" ");
                    continue;
                  }
                  if (d(be, "forward") && $e.type === "value-word" && $e.value && tt !== void 0 && tt.type === "value-word" && tt.value === "as" && We.type === "value-operator" && We.value === "*" || !We || $e.type === "value-word" && $e.value.endsWith("-") && de(We))
                    continue;
                  let go = $e.type === "value-string" && $e.value.startsWith("#{"), yo = ut && We.type === "value-string" && We.value.endsWith("}");
                  if (go || yo) {
                    ut = !ut;
                    continue;
                  }
                  if (ut || ie($e) || ie(We) || $e.type === "value-atword" && $e.value === "" || $e.value === "~" || $e.value && $e.value.includes("\\") && We && We.type !== "value-comment" || tt && tt.value && tt.value.indexOf("\\") === tt.value.length - 1 && $e.type === "value-operator" && $e.value === "/" || $e.value === "\\" || ne($e, We) || Ce($e) || _e($e) || Oe(We) || _e(We) && oe(We) || Oe($e) && oe(We) || $e.value === "--" && Ce(We))
                    continue;
                  let Zn = O($e), eu = O(We);
                  if ((Zn && Ce(We) || eu && Oe($e)) && oe(We) || !tt && L($e) || E(be, "calc") && (Y($e) || Y(We) || V($e) || V(We)) && oe(We))
                    continue;
                  let ho = (Y($e) || V($e)) && ot === 0 && (We.type === "value-number" || We.isHex) && Ue && ce(Ue) && !oe(We), tu = nr && nr.type === "value-func" || nr && pe(nr) || $e.type === "value-func" || pe($e), ru = We.type === "value-func" || pe(We) || tt && tt.type === "value-func" || tt && pe(tt);
                  if (!(!(J(We) || J($e)) && !E(be, "calc") && !ho && (L(We) && !tu || L($e) && !ru || Y(We) && !tu || Y($e) && !ru || V(We) || V($e)) && (oe(We) || Zn && (!tt || tt && O(tt))))) {
                    if (ge($e)) {
                      if (He.type === "value-paren_group") {
                        je.push(w(h));
                        continue;
                      }
                      je.push(h);
                      continue;
                    }
                    if (j && (q(We) || M(We) || le(We) || K($e) || se($e))) {
                      je.push(" ");
                      continue;
                    }
                    if (nt && nt.name.toLowerCase() === "namespace") {
                      je.push(" ");
                      continue;
                    }
                    if (at) {
                      $e.source && We.source && $e.source.start.line !== We.source.start.line ? (je.push(h), ze = true) : je.push(" ");
                      continue;
                    }
                    if (eu) {
                      je.push(" ");
                      continue;
                    }
                    if (!(We && We.value === "...") && !(de($e) && de(We) && Se($e) === Be(We))) {
                      if (de($e) && he(We) && Se($e) === Be(We.open)) {
                        je.push(g);
                        continue;
                      }
                      if ($e.value === "with" && he(We)) {
                        je.push(" ");
                        continue;
                      }
                      (rt = $e.value) !== null && rt !== void 0 && rt.endsWith("#") && We.value === "{" && he(We.group) || je.push(y);
                    }
                  }
                }
                return me && je.push(F), ze && je.unshift(h), j ? p(v(je)) : C(be) ? p(D(je)) : p(v(D(je)));
              }
              case "value-paren_group": {
                let He = be.getParentNode();
                if (He && Q(He) && (ue.groups.length === 1 || ue.groups.length > 0 && ue.groups[0].type === "value-comma_group" && ue.groups[0].groups.length > 0 && ue.groups[0].groups[0].type === "value-word" && ue.groups[0].groups[0].value.startsWith("data:")))
                  return [ue.open ? Me("open") : "", c(",", be.map(Me, "groups")), ue.close ? Me("close") : ""];
                if (!ue.open) {
                  let Ye = be.map(Me, "groups"), ut = [];
                  for (let ze = 0; ze < Ye.length; ze++)
                    ze !== 0 && ut.push([",", y]), ut.push(Ye[ze]);
                  return p(v(D(ut)));
                }
                let Ue = fe(be), Xe = t(ue.groups), at = Xe && Xe.type === "value-comment", nt = Ae(ue, He), j = De(ue, He), me = j || Ue && !nt, Ie = j || nt, je = p([ue.open ? Me("open") : "", v([g, c([y], be.map((Ye, ut) => {
                  let ze = Ye.getValue(), ot = ut === ue.groups.length - 1, tt = [Me(), ot ? "" : ","];
                  if (ae(ze) && ze.type === "value-comma_group" && ze.groups && ze.groups[0].type !== "value-paren_group" && ze.groups[2] && ze.groups[2].type === "value-paren_group") {
                    let $e = B(tt[0].contents.contents);
                    return $e[1] = p($e[1]), p(w(tt));
                  }
                  if (!ot && ze.type === "value-comma_group" && l(ze.groups)) {
                    let $e = t(ze.groups);
                    $e.source && i(ke.originalText, $e, Se) && tt.push(h);
                  }
                  return tt;
                }, "groups"))]), T(!at && S(ke.parser, ke.originalText) && Ue && te(ke) ? "," : ""), g, ue.close ? Me("close") : ""], { shouldBreak: me });
                return Ie ? w(je) : je;
              }
              case "value-func":
                return [ue.value, d(be, "supports") && ve(ue) ? " " : "", Me("group")];
              case "value-paren":
                return ue.value;
              case "value-number":
                return [Ve(ue.value), G(ue.unit)];
              case "value-operator":
                return ue.value;
              case "value-word":
                return ue.isColor && ue.isHex || b(ue.value) ? ue.value.toLowerCase() : ue.value;
              case "value-colon": {
                let He = be.getParentNode(), Ue = He && He.groups.indexOf(ue), Xe = Ue && He.groups[Ue - 1];
                return [ue.value, Xe && typeof Xe.value == "string" && t(Xe.value) === "\\" || E(be, "url") ? "" : y];
              }
              case "value-comma":
                return [ue.value, " "];
              case "value-string":
                return a(ue.raws.quote + ue.value + ue.raws.quote, ke);
              case "value-atword":
                return ["@", ue.value];
              case "value-unicode-range":
                return ue.value;
              case "value-unknown":
                return ue.value;
              default:
                throw new Error(`Unknown postcss type ${JSON.stringify(ue.type)}`);
            }
          }
          __name(Ee, "Ee");
          function Re(be, ke, Me) {
            let ue = [];
            return be.each((st, rt, He) => {
              let Ue = He[rt - 1];
              if (Ue && Ue.type === "css-comment" && Ue.text.trim() === "prettier-ignore") {
                let Xe = st.getValue();
                ue.push(ke.originalText.slice(Be(Xe), Se(Xe)));
              } else
                ue.push(Me());
              rt !== He.length - 1 && (He[rt + 1].type === "css-comment" && !r(ke.originalText, Be(He[rt + 1]), { backwards: true }) && !u(He[rt]) || He[rt + 1].type === "css-atrule" && He[rt + 1].name === "else" && He[rt].type !== "css-comment" ? ue.push(" ") : (ue.push(ke.__isHTMLStyleAttribute ? y : h), i(ke.originalText, st.getValue(), Se) && !u(He[rt]) && ue.push(h)));
            }, "nodes"), ue;
          }
          __name(Re, "Re");
          var Te = /(["'])(?:(?!\1)[^\\]|\\.)*\1/gs, Pe = /(?:\d*\.\d+|\d+\.?)(?:[Ee][+-]?\d+)?/g, Fe = /[A-Za-z]+/g, Ze = /[$@]?[A-Z_a-z\u0080-\uFFFF][\w\u0080-\uFFFF-]*/g, xe = new RegExp(Te.source + `|(${Ze.source})?(${Pe.source})(${Fe.source})?`, "g");
          function Je(be, ke) {
            return be.replace(Te, (Me) => a(Me, ke));
          }
          __name(Je, "Je");
          function we(be, ke) {
            let Me = ke.singleQuote ? "'" : '"';
            return be.includes('"') || be.includes("'") ? be : Me + be + Me;
          }
          __name(we, "we");
          function Le(be) {
            return be.replace(xe, (ke, Me, ue, st, rt) => !ue && st ? Ve(st) + m(rt || "") : ke);
          }
          __name(Le, "Le");
          function Ve(be) {
            return s(be).replace(/\.0(?=$|e)/, "");
          }
          __name(Ve, "Ve");
          n.exports = { print: Ee, embed: P, insertPragma: R, massageAstNode: I };
        } }), Dd = ee({ "src/language-css/options.js"(e, n) {
          "use strict";
          re();
          var t = qt();
          n.exports = { singleQuote: t.singleQuote };
        } }), md = ee({ "src/language-css/parsers.js"() {
          re();
        } }), dd = ee({ "node_modules/linguist-languages/data/CSS.json"(e, n) {
          n.exports = { name: "CSS", type: "markup", tmScope: "source.css", aceMode: "css", codemirrorMode: "css", codemirrorMimeType: "text/css", color: "#563d7c", extensions: [".css"], languageId: 50 };
        } }), gd = ee({ "node_modules/linguist-languages/data/PostCSS.json"(e, n) {
          n.exports = { name: "PostCSS", type: "markup", color: "#dc3a0c", tmScope: "source.postcss", group: "CSS", extensions: [".pcss", ".postcss"], aceMode: "text", languageId: 262764437 };
        } }), yd = ee({ "node_modules/linguist-languages/data/Less.json"(e, n) {
          n.exports = { name: "Less", type: "markup", color: "#1d365d", aliases: ["less-css"], extensions: [".less"], tmScope: "source.css.less", aceMode: "less", codemirrorMode: "css", codemirrorMimeType: "text/css", languageId: 198 };
        } }), hd = ee({ "node_modules/linguist-languages/data/SCSS.json"(e, n) {
          n.exports = { name: "SCSS", type: "markup", color: "#c6538c", tmScope: "source.css.scss", aceMode: "scss", codemirrorMode: "css", codemirrorMimeType: "text/x-scss", extensions: [".scss"], languageId: 329 };
        } }), vd = ee({ "src/language-css/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = fd(), a = Dd(), r = md(), u = [t(dd(), (l) => ({ since: "1.4.0", parsers: ["css"], vscodeLanguageIds: ["css"], extensions: [...l.extensions, ".wxss"] })), t(gd(), () => ({ since: "1.4.0", parsers: ["css"], vscodeLanguageIds: ["postcss"] })), t(yd(), () => ({ since: "1.4.0", parsers: ["less"], vscodeLanguageIds: ["less"] })), t(hd(), () => ({ since: "1.4.0", parsers: ["scss"], vscodeLanguageIds: ["scss"] }))], i = { postcss: s };
          n.exports = { languages: u, options: a, printers: i, parsers: r };
        } }), Cd = ee({ "src/language-handlebars/loc.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return a.loc.start.offset;
          }
          __name(t, "t");
          function s(a) {
            return a.loc.end.offset;
          }
          __name(s, "s");
          n.exports = { locStart: t, locEnd: s };
        } }), Ed = ee({ "src/language-handlebars/clean.js"(e, n) {
          "use strict";
          re();
          function t(s, a) {
            if (s.type === "TextNode") {
              let r = s.chars.trim();
              if (!r)
                return null;
              a.chars = r.replace(/[\t\n\f\r ]+/g, " ");
            }
            s.type === "AttrNode" && s.name.toLowerCase() === "class" && delete a.value;
          }
          __name(t, "t");
          t.ignoredProperties = /* @__PURE__ */ new Set(["loc", "selfClosing"]), n.exports = t;
        } }), Fd = ee({ "vendors/html-void-elements.json"(e, n) {
          n.exports = { htmlVoidElements: ["area", "base", "basefont", "bgsound", "br", "col", "command", "embed", "frame", "hr", "image", "img", "input", "isindex", "keygen", "link", "menuitem", "meta", "nextid", "param", "source", "track", "wbr"] };
        } }), Ad = ee({ "src/language-handlebars/utils.js"(e, n) {
          "use strict";
          re();
          var { htmlVoidElements: t } = Fd(), s = lt();
          function a(A) {
            let B = A.getValue(), I = A.getParentNode(0);
            return !!(h(A, ["ElementNode"]) && s(I.children) === B || h(A, ["Block"]) && s(I.body) === B);
          }
          __name(a, "a");
          function r(A) {
            return A.toUpperCase() === A;
          }
          __name(r, "r");
          function u(A) {
            return y(A, ["ElementNode"]) && typeof A.tag == "string" && !A.tag.startsWith(":") && (r(A.tag[0]) || A.tag.includes("."));
          }
          __name(u, "u");
          var i = new Set(t);
          function l(A) {
            return i.has(A.tag) || u(A) && A.children.every((B) => c(B));
          }
          __name(l, "l");
          function c(A) {
            return y(A, ["TextNode"]) && !/\S/.test(A.chars);
          }
          __name(c, "c");
          function y(A, B) {
            return A && B.includes(A.type);
          }
          __name(y, "y");
          function h(A, B) {
            let I = A.getParentNode(0);
            return y(I, B);
          }
          __name(h, "h");
          function g(A, B) {
            let I = v(A);
            return y(I, B);
          }
          __name(g, "g");
          function p(A, B) {
            let I = w(A);
            return y(I, B);
          }
          __name(p, "p");
          function D(A, B) {
            var I, P, R, f;
            let x = A.getValue(), m = (I = A.getParentNode(0)) !== null && I !== void 0 ? I : {}, E = (P = (R = (f = m.children) !== null && f !== void 0 ? f : m.body) !== null && R !== void 0 ? R : m.parts) !== null && P !== void 0 ? P : [], o = E.indexOf(x);
            return o !== -1 && E[o + B];
          }
          __name(D, "D");
          function v(A) {
            let B = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
            return D(A, -B);
          }
          __name(v, "v");
          function w(A) {
            return D(A, 1);
          }
          __name(w, "w");
          function T(A) {
            return y(A, ["MustacheCommentStatement"]) && typeof A.value == "string" && A.value.trim() === "prettier-ignore";
          }
          __name(T, "T");
          function F(A) {
            let B = A.getValue(), I = v(A, 2);
            return T(B) || T(I);
          }
          __name(F, "F");
          n.exports = { getNextNode: w, getPreviousNode: v, hasPrettierIgnore: F, isLastNodeOfSiblings: a, isNextNodeOfSomeType: p, isNodeOfSomeType: y, isParentOfSomeType: h, isPreviousNodeOfSomeType: g, isVoid: l, isWhitespaceNode: c };
        } }), Sd = ee({ "src/language-handlebars/printer-glimmer.js"(e, n) {
          "use strict";
          re();
          var { builders: { dedent: t, fill: s, group: a, hardline: r, ifBreak: u, indent: i, join: l, line: c, softline: y }, utils: { getDocParts: h, replaceTextEndOfLine: g } } = qe(), { getPreferredQuote: p, isNonEmptyArray: D } = Ge(), { locStart: v, locEnd: w } = Cd(), T = Ed(), { getNextNode: F, getPreviousNode: A, hasPrettierIgnore: B, isLastNodeOfSiblings: I, isNextNodeOfSomeType: P, isNodeOfSomeType: R, isParentOfSomeType: f, isPreviousNodeOfSomeType: x, isVoid: m, isWhitespaceNode: E } = Ad(), o = 2;
          function d(U, de, De) {
            let he = U.getValue();
            if (!he)
              return "";
            if (B(U))
              return de.originalText.slice(v(he), w(he));
            let Be = de.singleQuote ? "'" : '"';
            switch (he.type) {
              case "Block":
              case "Program":
              case "Template":
                return a(U.map(De, "body"));
              case "ElementNode": {
                let Se = a(_(U, De)), ye = de.htmlWhitespaceSensitivity === "ignore" && P(U, ["ElementNode"]) ? y : "";
                if (m(he))
                  return [Se, ye];
                let S = ["</", he.tag, ">"];
                return he.children.length === 0 ? [Se, i(S), ye] : de.htmlWhitespaceSensitivity === "ignore" ? [Se, i(b(U, de, De)), r, i(S), ye] : [Se, i(a(b(U, de, De))), i(S), ye];
              }
              case "BlockStatement": {
                let Se = U.getParentNode(1);
                return Se && Se.inverse && Se.inverse.body.length === 1 && Se.inverse.body[0] === he && Se.inverse.body[0].path.parts[0] === Se.path.parts[0] ? [se(U, De, Se.inverse.body[0].path.parts[0]), oe(U, De, de), ae(U, De, de)] : [O(U, De), a([oe(U, De, de), ae(U, De, de), Q(U, De, de)])];
              }
              case "ElementModifierStatement":
                return a(["{{", pe(U, De), "}}"]);
              case "MustacheStatement":
                return a([k(he), pe(U, De), $(he)]);
              case "SubExpression":
                return a(["(", Oe(U, De), y, ")"]);
              case "AttrNode": {
                let Se = he.value.type === "TextNode";
                if (Se && he.value.chars === "" && v(he.value) === w(he.value))
                  return he.name;
                let S = Se ? p(he.value.chars, Be).quote : he.value.type === "ConcatStatement" ? p(he.value.parts.filter((te) => te.type === "TextNode").map((te) => te.chars).join(""), Be).quote : "", G = De("value");
                return [he.name, "=", S, he.name === "class" && S ? a(i(G)) : G, S];
              }
              case "ConcatStatement":
                return U.map(De, "parts");
              case "Hash":
                return l(c, U.map(De, "pairs"));
              case "HashPair":
                return [he.key, "=", De("value")];
              case "TextNode": {
                let Se = he.chars.replace(/{{/g, "\\{{"), ye = H(U);
                if (ye) {
                  if (ye === "class") {
                    let xe = Se.trim().split(/\s+/).join(" "), Je = false, we = false;
                    return f(U, ["ConcatStatement"]) && (x(U, ["MustacheStatement"]) && /^\s/.test(Se) && (Je = true), P(U, ["MustacheStatement"]) && /\s$/.test(Se) && xe !== "" && (we = true)), [Je ? c : "", xe, we ? c : ""];
                  }
                  return g(Se);
                }
                let G = /^[\t\n\f\r ]*$/.test(Se), te = !A(U), Ee = !F(U);
                if (de.htmlWhitespaceSensitivity !== "ignore") {
                  let xe = /^[\t\n\f\r ]*/, Je = /[\t\n\f\r ]*$/, we = Ee && f(U, ["Template"]), Le = te && f(U, ["Template"]);
                  if (G) {
                    if (Le || we)
                      return "";
                    let ue = [c], st = Z(Se);
                    return st && (ue = ge(st)), I(U) && (ue = ue.map((rt) => t(rt))), ue;
                  }
                  let [Ve] = Se.match(xe), [be] = Se.match(Je), ke = [];
                  if (Ve) {
                    ke = [c];
                    let ue = Z(Ve);
                    ue && (ke = ge(ue)), Se = Se.replace(xe, "");
                  }
                  let Me = [];
                  if (be) {
                    if (!we) {
                      Me = [c];
                      let ue = Z(be);
                      ue && (Me = ge(ue)), I(U) && (Me = Me.map((st) => t(st)));
                    }
                    Se = Se.replace(Je, "");
                  }
                  return [...ke, s(Ae(Se)), ...Me];
                }
                let Re = Z(Se), Te = ne(Se), Pe = fe(Se);
                if ((te || Ee) && G && f(U, ["Block", "ElementNode", "Template"]))
                  return "";
                G && Re ? (Te = Math.min(Re, o), Pe = 0) : (P(U, ["BlockStatement", "ElementNode"]) && (Pe = Math.max(Pe, 1)), x(U, ["BlockStatement", "ElementNode"]) && (Te = Math.max(Te, 1)));
                let Fe = "", Ze = "";
                return Pe === 0 && P(U, ["MustacheStatement"]) && (Ze = " "), Te === 0 && x(U, ["MustacheStatement"]) && (Fe = " "), te && (Te = 0, Fe = ""), Ee && (Pe = 0, Ze = ""), Se = Se.replace(/^[\t\n\f\r ]+/g, Fe).replace(/[\t\n\f\r ]+$/, Ze), [...ge(Te), s(Ae(Se)), ...ge(Pe)];
              }
              case "MustacheCommentStatement": {
                let Se = v(he), ye = w(he), S = de.originalText.charAt(Se + 2) === "~", G = de.originalText.charAt(ye - 3) === "~", te = he.value.includes("}}") ? "--" : "";
                return ["{{", S ? "~" : "", "!", te, he.value, te, G ? "~" : "", "}}"];
              }
              case "PathExpression":
                return he.original;
              case "BooleanLiteral":
                return String(he.value);
              case "CommentStatement":
                return ["<!--", he.value, "-->"];
              case "StringLiteral": {
                if (_e(U)) {
                  let Se = de.singleQuote ? '"' : "'";
                  return Ce(he.value, Se);
                }
                return Ce(he.value, Be);
              }
              case "NumberLiteral":
                return String(he.value);
              case "UndefinedLiteral":
                return "undefined";
              case "NullLiteral":
                return "null";
              default:
                throw new Error("unknown glimmer type: " + JSON.stringify(he.type));
            }
          }
          __name(d, "d");
          function C(U, de) {
            return v(U) - v(de);
          }
          __name(C, "C");
          function _(U, de) {
            let De = U.getValue(), he = ["attributes", "modifiers", "comments"].filter((Se) => D(De[Se])), Be = he.flatMap((Se) => De[Se]).sort(C);
            for (let Se of he)
              U.each((ye) => {
                let S = Be.indexOf(ye.getValue());
                Be.splice(S, 1, [c, de()]);
              }, Se);
            return D(De.blockParams) && Be.push(c, ce(De)), ["<", De.tag, i(Be), N(De)];
          }
          __name(_, "_");
          function b(U, de, De) {
            let Be = U.getValue().children.every((Se) => E(Se));
            return de.htmlWhitespaceSensitivity === "ignore" && Be ? "" : U.map((Se, ye) => {
              let S = De();
              return ye === 0 && de.htmlWhitespaceSensitivity === "ignore" ? [y, S] : S;
            }, "children");
          }
          __name(b, "b");
          function N(U) {
            return m(U) ? u([y, "/>"], [" />", y]) : u([y, ">"], ">");
          }
          __name(N, "N");
          function k(U) {
            let de = U.escaped === false ? "{{{" : "{{", De = U.strip && U.strip.open ? "~" : "";
            return [de, De];
          }
          __name(k, "k");
          function $(U) {
            let de = U.escaped === false ? "}}}" : "}}";
            return [U.strip && U.strip.close ? "~" : "", de];
          }
          __name($, "$");
          function M(U) {
            let de = k(U), De = U.openStrip.open ? "~" : "";
            return [de, De, "#"];
          }
          __name(M, "M");
          function q(U) {
            let de = $(U);
            return [U.openStrip.close ? "~" : "", de];
          }
          __name(q, "q");
          function J(U) {
            let de = k(U), De = U.closeStrip.open ? "~" : "";
            return [de, De, "/"];
          }
          __name(J, "J");
          function L(U) {
            let de = $(U);
            return [U.closeStrip.close ? "~" : "", de];
          }
          __name(L, "L");
          function Y(U) {
            let de = k(U), De = U.inverseStrip.open ? "~" : "";
            return [de, De];
          }
          __name(Y, "Y");
          function V(U) {
            let de = $(U);
            return [U.inverseStrip.close ? "~" : "", de];
          }
          __name(V, "V");
          function O(U, de) {
            let De = U.getValue(), he = M(De), Be = q(De), Se = [ie(U, de)], ye = ve(U, de);
            if (ye && Se.push(c, ye), D(De.program.blockParams)) {
              let S = ce(De.program);
              Se.push(c, S);
            }
            return a([he, i(Se), y, Be]);
          }
          __name(O, "O");
          function K(U, de) {
            return [de.htmlWhitespaceSensitivity === "ignore" ? r : "", Y(U), "else", V(U)];
          }
          __name(K, "K");
          function se(U, de, De) {
            let he = U.getParentNode(1);
            return [Y(he), "else ", De, " ", ve(U, de), V(he)];
          }
          __name(se, "se");
          function Q(U, de, De) {
            let he = U.getValue();
            return De.htmlWhitespaceSensitivity === "ignore" ? [le(he) ? y : r, J(he), de("path"), L(he)] : [J(he), de("path"), L(he)];
          }
          __name(Q, "Q");
          function le(U) {
            return R(U, ["BlockStatement"]) && U.program.body.every((de) => E(de));
          }
          __name(le, "le");
          function W(U) {
            return X(U) && U.inverse.body.length === 1 && R(U.inverse.body[0], ["BlockStatement"]) && U.inverse.body[0].path.parts[0] === U.path.parts[0];
          }
          __name(W, "W");
          function X(U) {
            return R(U, ["BlockStatement"]) && U.inverse;
          }
          __name(X, "X");
          function oe(U, de, De) {
            let he = U.getValue();
            if (le(he))
              return "";
            let Be = de("program");
            return De.htmlWhitespaceSensitivity === "ignore" ? i([r, Be]) : i(Be);
          }
          __name(oe, "oe");
          function ae(U, de, De) {
            let he = U.getValue(), Be = de("inverse"), Se = De.htmlWhitespaceSensitivity === "ignore" ? [r, Be] : Be;
            return W(he) ? Se : X(he) ? [K(he, De), i(Se)] : "";
          }
          __name(ae, "ae");
          function Ae(U) {
            return h(l(c, z(U)));
          }
          __name(Ae, "Ae");
          function z(U) {
            return U.split(/[\t\n\f\r ]+/);
          }
          __name(z, "z");
          function H(U) {
            for (let de = 0; de < 2; de++) {
              let De = U.getParentNode(de);
              if (De && De.type === "AttrNode")
                return De.name.toLowerCase();
            }
          }
          __name(H, "H");
          function Z(U) {
            return U = typeof U == "string" ? U : "", U.split(`
`).length - 1;
          }
          __name(Z, "Z");
          function ne(U) {
            U = typeof U == "string" ? U : "";
            let de = (U.match(/^([^\S\n\r]*[\n\r])+/g) || [])[0] || "";
            return Z(de);
          }
          __name(ne, "ne");
          function fe(U) {
            U = typeof U == "string" ? U : "";
            let de = (U.match(/([\n\r][^\S\n\r]*)+$/g) || [])[0] || "";
            return Z(de);
          }
          __name(fe, "fe");
          function ge() {
            let U = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
            return Array.from({ length: Math.min(U, o) }).fill(r);
          }
          __name(ge, "ge");
          function Ce(U, de) {
            let { quote: De, regex: he } = p(U, de);
            return [De, U.replace(he, `\\${De}`), De];
          }
          __name(Ce, "Ce");
          function _e(U) {
            let de = 0, De = U.getParentNode(de);
            for (; De && R(De, ["SubExpression"]); )
              de++, De = U.getParentNode(de);
            return !!(De && R(U.getParentNode(de + 1), ["ConcatStatement"]) && R(U.getParentNode(de + 2), ["AttrNode"]));
          }
          __name(_e, "_e");
          function Oe(U, de) {
            let De = ie(U, de), he = ve(U, de);
            return he ? i([De, c, a(he)]) : De;
          }
          __name(Oe, "Oe");
          function pe(U, de) {
            let De = ie(U, de), he = ve(U, de);
            return he ? [i([De, c, he]), y] : De;
          }
          __name(pe, "pe");
          function ie(U, de) {
            return de("path");
          }
          __name(ie, "ie");
          function ve(U, de) {
            let De = U.getValue(), he = [];
            if (De.params.length > 0) {
              let Be = U.map(de, "params");
              he.push(...Be);
            }
            if (De.hash && De.hash.pairs.length > 0) {
              let Be = de("hash");
              he.push(Be);
            }
            return he.length === 0 ? "" : l(c, he);
          }
          __name(ve, "ve");
          function ce(U) {
            return ["as |", U.blockParams.join(" "), "|"];
          }
          __name(ce, "ce");
          n.exports = { print: d, massageAstNode: T };
        } }), xd = ee({ "src/language-handlebars/parsers.js"() {
          re();
        } }), bd = ee({ "node_modules/linguist-languages/data/Handlebars.json"(e, n) {
          n.exports = { name: "Handlebars", type: "markup", color: "#f7931e", aliases: ["hbs", "htmlbars"], extensions: [".handlebars", ".hbs"], tmScope: "text.html.handlebars", aceMode: "handlebars", languageId: 155 };
        } }), Td = ee({ "src/language-handlebars/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = Sd(), a = xd(), r = [t(bd(), () => ({ since: "2.3.0", parsers: ["glimmer"], vscodeLanguageIds: ["handlebars"] }))], u = { glimmer: s };
          n.exports = { languages: r, printers: u, parsers: a };
        } }), Bd = ee({ "src/language-graphql/pragma.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return /^\s*#[^\S\n]*@(?:format|prettier)\s*(?:\n|$)/.test(a);
          }
          __name(t, "t");
          function s(a) {
            return `# @format

` + a;
          }
          __name(s, "s");
          n.exports = { hasPragma: t, insertPragma: s };
        } }), Nd = ee({ "src/language-graphql/loc.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return typeof a.start == "number" ? a.start : a.loc && a.loc.start;
          }
          __name(t, "t");
          function s(a) {
            return typeof a.end == "number" ? a.end : a.loc && a.loc.end;
          }
          __name(s, "s");
          n.exports = { locStart: t, locEnd: s };
        } }), wd = ee({ "src/language-graphql/printer-graphql.js"(e, n) {
          "use strict";
          re();
          var { builders: { join: t, hardline: s, line: a, softline: r, group: u, indent: i, ifBreak: l } } = qe(), { isNextLineEmpty: c, isNonEmptyArray: y } = Ge(), { insertPragma: h } = Bd(), { locStart: g, locEnd: p } = Nd();
          function D(P, R, f) {
            let x = P.getValue();
            if (!x)
              return "";
            if (typeof x == "string")
              return x;
            switch (x.kind) {
              case "Document": {
                let m = [];
                return P.each((E, o, d) => {
                  m.push(f()), o !== d.length - 1 && (m.push(s), c(R.originalText, E.getValue(), p) && m.push(s));
                }, "definitions"), [...m, s];
              }
              case "OperationDefinition": {
                let m = R.originalText[g(x)] !== "{", E = Boolean(x.name);
                return [m ? x.operation : "", m && E ? [" ", f("name")] : "", m && !E && y(x.variableDefinitions) ? " " : "", y(x.variableDefinitions) ? u(["(", i([r, t([l("", ", "), r], P.map(f, "variableDefinitions"))]), r, ")"]) : "", v(P, f, x), x.selectionSet ? !m && !E ? "" : " " : "", f("selectionSet")];
              }
              case "FragmentDefinition":
                return ["fragment ", f("name"), y(x.variableDefinitions) ? u(["(", i([r, t([l("", ", "), r], P.map(f, "variableDefinitions"))]), r, ")"]) : "", " on ", f("typeCondition"), v(P, f, x), " ", f("selectionSet")];
              case "SelectionSet":
                return ["{", i([s, t(s, w(P, R, f, "selections"))]), s, "}"];
              case "Field":
                return u([x.alias ? [f("alias"), ": "] : "", f("name"), x.arguments.length > 0 ? u(["(", i([r, t([l("", ", "), r], w(P, R, f, "arguments"))]), r, ")"]) : "", v(P, f, x), x.selectionSet ? " " : "", f("selectionSet")]);
              case "Name":
                return x.value;
              case "StringValue": {
                if (x.block) {
                  let m = x.value.replace(/"""/g, "\\$&").split(`
`);
                  return m.length === 1 && (m[0] = m[0].trim()), m.every((E) => E === "") && (m.length = 0), t(s, ['"""', ...m, '"""']);
                }
                return ['"', x.value.replace(/["\\]/g, "\\$&").replace(/\n/g, "\\n"), '"'];
              }
              case "IntValue":
              case "FloatValue":
              case "EnumValue":
                return x.value;
              case "BooleanValue":
                return x.value ? "true" : "false";
              case "NullValue":
                return "null";
              case "Variable":
                return ["$", f("name")];
              case "ListValue":
                return u(["[", i([r, t([l("", ", "), r], P.map(f, "values"))]), r, "]"]);
              case "ObjectValue":
                return u(["{", R.bracketSpacing && x.fields.length > 0 ? " " : "", i([r, t([l("", ", "), r], P.map(f, "fields"))]), r, l("", R.bracketSpacing && x.fields.length > 0 ? " " : ""), "}"]);
              case "ObjectField":
              case "Argument":
                return [f("name"), ": ", f("value")];
              case "Directive":
                return ["@", f("name"), x.arguments.length > 0 ? u(["(", i([r, t([l("", ", "), r], w(P, R, f, "arguments"))]), r, ")"]) : ""];
              case "NamedType":
                return f("name");
              case "VariableDefinition":
                return [f("variable"), ": ", f("type"), x.defaultValue ? [" = ", f("defaultValue")] : "", v(P, f, x)];
              case "ObjectTypeExtension":
              case "ObjectTypeDefinition":
                return [f("description"), x.description ? s : "", x.kind === "ObjectTypeExtension" ? "extend " : "", "type ", f("name"), x.interfaces.length > 0 ? [" implements ", ...A(P, R, f)] : "", v(P, f, x), x.fields.length > 0 ? [" {", i([s, t(s, w(P, R, f, "fields"))]), s, "}"] : ""];
              case "FieldDefinition":
                return [f("description"), x.description ? s : "", f("name"), x.arguments.length > 0 ? u(["(", i([r, t([l("", ", "), r], w(P, R, f, "arguments"))]), r, ")"]) : "", ": ", f("type"), v(P, f, x)];
              case "DirectiveDefinition":
                return [f("description"), x.description ? s : "", "directive ", "@", f("name"), x.arguments.length > 0 ? u(["(", i([r, t([l("", ", "), r], w(P, R, f, "arguments"))]), r, ")"]) : "", x.repeatable ? " repeatable" : "", " on ", t(" | ", P.map(f, "locations"))];
              case "EnumTypeExtension":
              case "EnumTypeDefinition":
                return [f("description"), x.description ? s : "", x.kind === "EnumTypeExtension" ? "extend " : "", "enum ", f("name"), v(P, f, x), x.values.length > 0 ? [" {", i([s, t(s, w(P, R, f, "values"))]), s, "}"] : ""];
              case "EnumValueDefinition":
                return [f("description"), x.description ? s : "", f("name"), v(P, f, x)];
              case "InputValueDefinition":
                return [f("description"), x.description ? x.description.block ? s : a : "", f("name"), ": ", f("type"), x.defaultValue ? [" = ", f("defaultValue")] : "", v(P, f, x)];
              case "InputObjectTypeExtension":
              case "InputObjectTypeDefinition":
                return [f("description"), x.description ? s : "", x.kind === "InputObjectTypeExtension" ? "extend " : "", "input ", f("name"), v(P, f, x), x.fields.length > 0 ? [" {", i([s, t(s, w(P, R, f, "fields"))]), s, "}"] : ""];
              case "SchemaExtension":
                return ["extend schema", v(P, f, x), ...x.operationTypes.length > 0 ? [" {", i([s, t(s, w(P, R, f, "operationTypes"))]), s, "}"] : []];
              case "SchemaDefinition":
                return [f("description"), x.description ? s : "", "schema", v(P, f, x), " {", x.operationTypes.length > 0 ? i([s, t(s, w(P, R, f, "operationTypes"))]) : "", s, "}"];
              case "OperationTypeDefinition":
                return [f("operation"), ": ", f("type")];
              case "InterfaceTypeExtension":
              case "InterfaceTypeDefinition":
                return [f("description"), x.description ? s : "", x.kind === "InterfaceTypeExtension" ? "extend " : "", "interface ", f("name"), x.interfaces.length > 0 ? [" implements ", ...A(P, R, f)] : "", v(P, f, x), x.fields.length > 0 ? [" {", i([s, t(s, w(P, R, f, "fields"))]), s, "}"] : ""];
              case "FragmentSpread":
                return ["...", f("name"), v(P, f, x)];
              case "InlineFragment":
                return ["...", x.typeCondition ? [" on ", f("typeCondition")] : "", v(P, f, x), " ", f("selectionSet")];
              case "UnionTypeExtension":
              case "UnionTypeDefinition":
                return u([f("description"), x.description ? s : "", u([x.kind === "UnionTypeExtension" ? "extend " : "", "union ", f("name"), v(P, f, x), x.types.length > 0 ? [" =", l("", " "), i([l([a, "  "]), t([a, "| "], P.map(f, "types"))])] : ""])]);
              case "ScalarTypeExtension":
              case "ScalarTypeDefinition":
                return [f("description"), x.description ? s : "", x.kind === "ScalarTypeExtension" ? "extend " : "", "scalar ", f("name"), v(P, f, x)];
              case "NonNullType":
                return [f("type"), "!"];
              case "ListType":
                return ["[", f("type"), "]"];
              default:
                throw new Error("unknown graphql type: " + JSON.stringify(x.kind));
            }
          }
          __name(D, "D");
          function v(P, R, f) {
            if (f.directives.length === 0)
              return "";
            let x = t(a, P.map(R, "directives"));
            return f.kind === "FragmentDefinition" || f.kind === "OperationDefinition" ? u([a, x]) : [" ", u(i([r, x]))];
          }
          __name(v, "v");
          function w(P, R, f, x) {
            return P.map((m, E, o) => {
              let d = f();
              return E < o.length - 1 && c(R.originalText, m.getValue(), p) ? [d, s] : d;
            }, x);
          }
          __name(w, "w");
          function T(P) {
            return P.kind && P.kind !== "Comment";
          }
          __name(T, "T");
          function F(P) {
            let R = P.getValue();
            if (R.kind === "Comment")
              return "#" + R.value.trimEnd();
            throw new Error("Not a comment: " + JSON.stringify(R));
          }
          __name(F, "F");
          function A(P, R, f) {
            let x = P.getNode(), m = [], { interfaces: E } = x, o = P.map((d) => f(d), "interfaces");
            for (let d = 0; d < E.length; d++) {
              let C = E[d];
              m.push(o[d]);
              let _ = E[d + 1];
              if (_) {
                let b = R.originalText.slice(C.loc.end, _.loc.start), N = b.includes("#"), k = b.replace(/#.*/g, "").trim();
                m.push(k === "," ? "," : " &", N ? a : " ");
              }
            }
            return m;
          }
          __name(A, "A");
          function B(P, R) {
            P.kind === "StringValue" && P.block && !P.value.includes(`
`) && (R.value = R.value.trim());
          }
          __name(B, "B");
          B.ignoredProperties = /* @__PURE__ */ new Set(["loc", "comments"]);
          function I(P) {
            var R;
            let f = P.getValue();
            return f == null || (R = f.comments) === null || R === void 0 ? void 0 : R.some((x) => x.value.trim() === "prettier-ignore");
          }
          __name(I, "I");
          n.exports = { print: D, massageAstNode: B, hasPrettierIgnore: I, insertPragma: h, printComment: F, canAttachComment: T };
        } }), _d = ee({ "src/language-graphql/options.js"(e, n) {
          "use strict";
          re();
          var t = qt();
          n.exports = { bracketSpacing: t.bracketSpacing };
        } }), Pd = ee({ "src/language-graphql/parsers.js"() {
          re();
        } }), Id = ee({ "node_modules/linguist-languages/data/GraphQL.json"(e, n) {
          n.exports = { name: "GraphQL", type: "data", color: "#e10098", extensions: [".graphql", ".gql", ".graphqls"], tmScope: "source.graphql", aceMode: "text", languageId: 139 };
        } }), kd = ee({ "src/language-graphql/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = wd(), a = _d(), r = Pd(), u = [t(Id(), () => ({ since: "1.5.0", parsers: ["graphql"], vscodeLanguageIds: ["graphql"] }))], i = { graphql: s };
          n.exports = { languages: u, options: a, printers: i, parsers: r };
        } }), co = ee({ "src/language-markdown/loc.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return a.position.start.offset;
          }
          __name(t, "t");
          function s(a) {
            return a.position.end.offset;
          }
          __name(s, "s");
          n.exports = { locStart: t, locEnd: s };
        } }), Ld = ee({ "src/language-markdown/constants.evaluate.js"(e, n) {
          n.exports = { cjkPattern: "(?:[\\u02ea-\\u02eb\\u1100-\\u11ff\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u303f\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u3190-\\u3191\\u3196-\\u31ba\\u31c0-\\u31e3\\u31f0-\\u321e\\u322a-\\u3247\\u3260-\\u327e\\u328a-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u3370\\u337b-\\u337f\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fef\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufe10-\\ufe1f\\ufe30-\\ufe6f\\uff00-\\uffef]|[\\ud840-\\ud868\\ud86a-\\ud86c\\ud86f-\\ud872\\ud874-\\ud879][\\udc00-\\udfff]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67]|\\ud83c[\\ude00\\ude50-\\ude51]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d])(?:[\\ufe00-\\ufe0f]|\\udb40[\\udd00-\\uddef])?", kPattern: "[\\u1100-\\u11ff\\u3001-\\u3003\\u3008-\\u3011\\u3013-\\u301f\\u302e-\\u3030\\u3037\\u30fb\\u3131-\\u318e\\u3200-\\u321e\\u3260-\\u327e\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ufe45-\\ufe46\\uff61-\\uff65\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]", punctuationPattern: "[\\u0021-\\u002f\\u003a-\\u0040\\u005b-\\u0060\\u007b-\\u007e\\u00a1\\u00a7\\u00ab\\u00b6-\\u00b7\\u00bb\\u00bf\\u037e\\u0387\\u055a-\\u055f\\u0589-\\u058a\\u05be\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0a76\\u0af0\\u0c77\\u0c84\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f3a-\\u0f3d\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u1400\\u166e\\u169b-\\u169c\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205e\\u207d-\\u207e\\u208d-\\u208e\\u2308-\\u230b\\u2329-\\u232a\\u2768-\\u2775\\u27c5-\\u27c6\\u27e6-\\u27ef\\u2983-\\u2998\\u29d8-\\u29db\\u29fc-\\u29fd\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e2e\\u2e30-\\u2e4f\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301f\\u3030\\u303d\\u30a0\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufd3e-\\ufd3f\\ufe10-\\ufe19\\ufe30-\\ufe52\\ufe54-\\ufe61\\ufe63\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff0a\\uff0c-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3b-\\uff3d\\uff3f\\uff5b\\uff5d\\uff5f-\\uff65]|\\ud800[\\udd00-\\udd02\\udf9f\\udfd0]|\\ud801[\\udd6f]|\\ud802[\\udc57\\udd1f\\udd3f\\ude50-\\ude58\\ude7f\\udef0-\\udef6\\udf39-\\udf3f\\udf99-\\udf9c]|\\ud803[\\udf55-\\udf59]|\\ud804[\\udc47-\\udc4d\\udcbb-\\udcbc\\udcbe-\\udcc1\\udd40-\\udd43\\udd74-\\udd75\\uddc5-\\uddc8\\uddcd\\udddb\\udddd-\\udddf\\ude38-\\ude3d\\udea9]|\\ud805[\\udc4b-\\udc4f\\udc5b\\udc5d\\udcc6\\uddc1-\\uddd7\\ude41-\\ude43\\ude60-\\ude6c\\udf3c-\\udf3e]|\\ud806[\\udc3b\\udde2\\ude3f-\\ude46\\ude9a-\\ude9c\\ude9e-\\udea2]|\\ud807[\\udc41-\\udc45\\udc70-\\udc71\\udef7-\\udef8\\udfff]|\\ud809[\\udc70-\\udc74]|\\ud81a[\\ude6e-\\ude6f\\udef5\\udf37-\\udf3b\\udf44]|\\ud81b[\\ude97-\\ude9a\\udfe2]|\\ud82f[\\udc9f]|\\ud836[\\ude87-\\ude8b]|\\ud83a[\\udd5e-\\udd5f]" };
        } }), Yn = ee({ "src/language-markdown/utils.js"(e, n) {
          "use strict";
          re();
          var { getLast: t } = Ge(), { locStart: s, locEnd: a } = co(), { cjkPattern: r, kPattern: u, punctuationPattern: i } = Ld(), l = ["liquidNode", "inlineCode", "emphasis", "esComment", "strong", "delete", "wikiLink", "link", "linkReference", "image", "imageReference", "footnote", "footnoteReference", "sentence", "whitespace", "word", "break", "inlineMath"], c = [...l, "tableCell", "paragraph", "heading"], y = new RegExp(u), h = new RegExp(i);
          function g(F, A) {
            let B = "non-cjk", I = "cj-letter", P = "k-letter", R = "cjk-punctuation", f = [], x = (A.proseWrap === "preserve" ? F : F.replace(new RegExp(`(${r})
(${r})`, "g"), "$1$2")).split(/([\t\n ]+)/);
            for (let [E, o] of x.entries()) {
              if (E % 2 === 1) {
                f.push({ type: "whitespace", value: /\n/.test(o) ? `
` : " " });
                continue;
              }
              if ((E === 0 || E === x.length - 1) && o === "")
                continue;
              let d = o.split(new RegExp(`(${r})`));
              for (let [C, _] of d.entries())
                if (!((C === 0 || C === d.length - 1) && _ === "")) {
                  if (C % 2 === 0) {
                    _ !== "" && m({ type: "word", value: _, kind: B, hasLeadingPunctuation: h.test(_[0]), hasTrailingPunctuation: h.test(t(_)) });
                    continue;
                  }
                  m(h.test(_) ? { type: "word", value: _, kind: R, hasLeadingPunctuation: true, hasTrailingPunctuation: true } : { type: "word", value: _, kind: y.test(_) ? P : I, hasLeadingPunctuation: false, hasTrailingPunctuation: false });
                }
            }
            return f;
            function m(E) {
              let o = t(f);
              o && o.type === "word" && (o.kind === B && E.kind === I && !o.hasTrailingPunctuation || o.kind === I && E.kind === B && !E.hasLeadingPunctuation ? f.push({ type: "whitespace", value: " " }) : !d(B, R) && ![o.value, E.value].some((C) => /\u3000/.test(C)) && f.push({ type: "whitespace", value: "" })), f.push(E);
              function d(C, _) {
                return o.kind === C && E.kind === _ || o.kind === _ && E.kind === C;
              }
              __name(d, "d");
            }
            __name(m, "m");
          }
          __name(g, "g");
          function p(F, A) {
            let [, B, I, P] = A.slice(F.position.start.offset, F.position.end.offset).match(/^\s*(\d+)(\.|\))(\s*)/);
            return { numberText: B, marker: I, leadingSpaces: P };
          }
          __name(p, "p");
          function D(F, A) {
            if (!F.ordered || F.children.length < 2)
              return false;
            let B = Number(p(F.children[0], A.originalText).numberText), I = Number(p(F.children[1], A.originalText).numberText);
            if (B === 0 && F.children.length > 2) {
              let P = Number(p(F.children[2], A.originalText).numberText);
              return I === 1 && P === 1;
            }
            return I === 1;
          }
          __name(D, "D");
          function v(F, A) {
            let { value: B } = F;
            return F.position.end.offset === A.length && B.endsWith(`
`) && A.endsWith(`
`) ? B.slice(0, -1) : B;
          }
          __name(v, "v");
          function w(F, A) {
            return (/* @__PURE__ */ __name(function B(I, P, R) {
              let f = Object.assign({}, A(I, P, R));
              return f.children && (f.children = f.children.map((x, m) => B(x, m, [f, ...R]))), f;
            }, "B"))(F, null, []);
          }
          __name(w, "w");
          function T(F) {
            if ((F == null ? void 0 : F.type) !== "link" || F.children.length !== 1)
              return false;
            let [A] = F.children;
            return s(F) === s(A) && a(F) === a(A);
          }
          __name(T, "T");
          n.exports = { mapAst: w, splitText: g, punctuationPattern: i, getFencedCodeBlockValue: v, getOrderedListItemInfo: p, hasGitDiffFriendlyOrderedList: D, INLINE_NODE_TYPES: l, INLINE_NODE_WRAPPER_TYPES: c, isAutolink: T };
        } }), jd = ee({ "src/language-markdown/embed.js"(e, n) {
          "use strict";
          re();
          var { inferParserByLanguage: t, getMaxContinuousCount: s } = Ge(), { builders: { hardline: a, markAsRoot: r }, utils: { replaceEndOfLine: u } } = qe(), i = Kn(), { getFencedCodeBlockValue: l } = Yn();
          function c(y, h, g, p) {
            let D = y.getValue();
            if (D.type === "code" && D.lang !== null) {
              let v = t(D.lang, p);
              if (v) {
                let w = p.__inJsTemplate ? "~" : "`", T = w.repeat(Math.max(3, s(D.value, w) + 1)), F = { parser: v };
                D.lang === "tsx" && (F.filepath = "dummy.tsx");
                let A = g(l(D, p.originalText), F, { stripTrailingHardline: true });
                return r([T, D.lang, D.meta ? " " + D.meta : "", a, u(A), a, T]);
              }
            }
            switch (D.type) {
              case "front-matter":
                return i(D, g);
              case "importExport":
                return [g(D.value, { parser: "babel" }, { stripTrailingHardline: true }), a];
              case "jsx":
                return g(`<$>${D.value}</$>`, { parser: "__js_expression", rootMarker: "mdx" }, { stripTrailingHardline: true });
            }
            return null;
          }
          __name(c, "c");
          n.exports = c;
        } }), po = ee({ "src/language-markdown/pragma.js"(e, n) {
          "use strict";
          re();
          var t = lo(), s = ["format", "prettier"];
          function a(r) {
            let u = `@(${s.join("|")})`, i = new RegExp([`<!--\\s*${u}\\s*-->`, `{\\s*\\/\\*\\s*${u}\\s*\\*\\/\\s*}`, `<!--.*\r?
[\\s\\S]*(^|
)[^\\S
]*${u}[^\\S
]*($|
)[\\s\\S]*
.*-->`].join("|"), "m"), l = r.match(i);
            return (l == null ? void 0 : l.index) === 0;
          }
          __name(a, "a");
          n.exports = { startWithPragma: a, hasPragma: (r) => a(t(r).content.trimStart()), insertPragma: (r) => {
            let u = t(r), i = `<!-- @${s[0]} -->`;
            return u.frontMatter ? `${u.frontMatter.raw}

${i}

${u.content}` : `${i}

${u.content}`;
          } };
        } }), Od = ee({ "src/language-markdown/print-preprocess.js"(e, n) {
          "use strict";
          re();
          var t = lt(), { getOrderedListItemInfo: s, mapAst: a, splitText: r } = Yn(), u = /^.$/su;
          function i(T, F) {
            return T = y(T, F), T = p(T), T = c(T, F), T = v(T, F), T = w(T, F), T = D(T, F), T = l(T), T = h(T), T;
          }
          __name(i, "i");
          function l(T) {
            return a(T, (F) => F.type !== "import" && F.type !== "export" ? F : Object.assign(Object.assign({}, F), {}, { type: "importExport" }));
          }
          __name(l, "l");
          function c(T, F) {
            return a(T, (A) => A.type !== "inlineCode" || F.proseWrap === "preserve" ? A : Object.assign(Object.assign({}, A), {}, { value: A.value.replace(/\s+/g, " ") }));
          }
          __name(c, "c");
          function y(T, F) {
            return a(T, (A) => A.type !== "text" || A.value === "*" || A.value === "_" || !u.test(A.value) || A.position.end.offset - A.position.start.offset === A.value.length ? A : Object.assign(Object.assign({}, A), {}, { value: F.originalText.slice(A.position.start.offset, A.position.end.offset) }));
          }
          __name(y, "y");
          function h(T) {
            return g(T, (F, A) => F.type === "importExport" && A.type === "importExport", (F, A) => ({ type: "importExport", value: F.value + `

` + A.value, position: { start: F.position.start, end: A.position.end } }));
          }
          __name(h, "h");
          function g(T, F, A) {
            return a(T, (B) => {
              if (!B.children)
                return B;
              let I = B.children.reduce((P, R) => {
                let f = t(P);
                return f && F(f, R) ? P.splice(-1, 1, A(f, R)) : P.push(R), P;
              }, []);
              return Object.assign(Object.assign({}, B), {}, { children: I });
            });
          }
          __name(g, "g");
          function p(T) {
            return g(T, (F, A) => F.type === "text" && A.type === "text", (F, A) => ({ type: "text", value: F.value + A.value, position: { start: F.position.start, end: A.position.end } }));
          }
          __name(p, "p");
          function D(T, F) {
            return a(T, (A, B, I) => {
              let [P] = I;
              if (A.type !== "text")
                return A;
              let { value: R } = A;
              return P.type === "paragraph" && (B === 0 && (R = R.trimStart()), B === P.children.length - 1 && (R = R.trimEnd())), { type: "sentence", position: A.position, children: r(R, F) };
            });
          }
          __name(D, "D");
          function v(T, F) {
            return a(T, (A, B, I) => {
              if (A.type === "code") {
                let P = /^\n?(?: {4,}|\t)/.test(F.originalText.slice(A.position.start.offset, A.position.end.offset));
                if (A.isIndented = P, P)
                  for (let R = 0; R < I.length; R++) {
                    let f = I[R];
                    if (f.hasIndentedCodeblock)
                      break;
                    f.type === "list" && (f.hasIndentedCodeblock = true);
                  }
              }
              return A;
            });
          }
          __name(v, "v");
          function w(T, F) {
            return a(T, (I, P, R) => {
              if (I.type === "list" && I.children.length > 0) {
                for (let f = 0; f < R.length; f++) {
                  let x = R[f];
                  if (x.type === "list" && !x.isAligned)
                    return I.isAligned = false, I;
                }
                I.isAligned = B(I);
              }
              return I;
            });
            function A(I) {
              return I.children.length === 0 ? -1 : I.children[0].position.start.column - 1;
            }
            __name(A, "A");
            function B(I) {
              if (!I.ordered)
                return true;
              let [P, R] = I.children;
              if (s(P, F.originalText).leadingSpaces.length > 1)
                return true;
              let x = A(P);
              if (x === -1)
                return false;
              if (I.children.length === 1)
                return x % F.tabWidth === 0;
              let m = A(R);
              return x !== m ? false : x % F.tabWidth === 0 ? true : s(R, F.originalText).leadingSpaces.length > 1;
            }
            __name(B, "B");
          }
          __name(w, "w");
          n.exports = i;
        } }), qd = ee({ "src/language-markdown/clean.js"(e, n) {
          "use strict";
          re();
          var { isFrontMatterNode: t } = Ge(), { startWithPragma: s } = po(), a = /* @__PURE__ */ new Set(["position", "raw"]);
          function r(u, i, l) {
            if ((u.type === "front-matter" || u.type === "code" || u.type === "yaml" || u.type === "import" || u.type === "export" || u.type === "jsx") && delete i.value, u.type === "list" && delete i.isAligned, (u.type === "list" || u.type === "listItem") && (delete i.spread, delete i.loose), u.type === "text" || (u.type === "inlineCode" && (i.value = u.value.replace(/[\t\n ]+/g, " ")), u.type === "wikiLink" && (i.value = u.value.trim().replace(/[\t\n]+/g, " ")), (u.type === "definition" || u.type === "linkReference") && (i.label = u.label.trim().replace(/[\t\n ]+/g, " ").toLowerCase()), (u.type === "definition" || u.type === "link" || u.type === "image") && u.title && (i.title = u.title.replace(/\\(["')])/g, "$1")), l && l.type === "root" && l.children.length > 0 && (l.children[0] === u || t(l.children[0]) && l.children[1] === u) && u.type === "html" && s(u.value)))
              return null;
          }
          __name(r, "r");
          r.ignoredProperties = a, n.exports = r;
        } }), Md = ee({ "src/language-markdown/printer-markdown.js"(e, n) {
          "use strict";
          re();
          var { getLast: t, getMinNotPresentContinuousCount: s, getMaxContinuousCount: a, getStringWidth: r, isNonEmptyArray: u } = Ge(), { builders: { breakParent: i, join: l, line: c, literalline: y, markAsRoot: h, hardline: g, softline: p, ifBreak: D, fill: v, align: w, indent: T, group: F, hardlineWithoutBreakParent: A }, utils: { normalizeDoc: B, replaceTextEndOfLine: I }, printer: { printDocToString: P } } = qe(), R = jd(), { insertPragma: f } = po(), { locStart: x, locEnd: m } = co(), E = Od(), o = qd(), { getFencedCodeBlockValue: d, hasGitDiffFriendlyOrderedList: C, splitText: _, punctuationPattern: b, INLINE_NODE_TYPES: N, INLINE_NODE_WRAPPER_TYPES: k, isAutolink: $ } = Yn(), M = /* @__PURE__ */ new Set(["importExport"]), q = ["heading", "tableCell", "link", "wikiLink"], J = /* @__PURE__ */ new Set(["listItem", "definition", "footnoteDefinition"]);
          function L(pe, ie, ve) {
            let ce = pe.getValue();
            if (fe(pe))
              return _(ie.originalText.slice(ce.position.start.offset, ce.position.end.offset), ie).map((U) => U.type === "word" ? U.value : U.value === "" ? "" : le(pe, U.value, ie));
            switch (ce.type) {
              case "front-matter":
                return ie.originalText.slice(ce.position.start.offset, ce.position.end.offset);
              case "root":
                return ce.children.length === 0 ? "" : [B(X(pe, ie, ve)), M.has(Ae(ce).type) ? "" : g];
              case "paragraph":
                return oe(pe, ie, ve, { postprocessor: v });
              case "sentence":
                return oe(pe, ie, ve);
              case "word": {
                let U = ce.value.replace(/\*/g, "\\$&").replace(new RegExp([`(^|${b})(_+)`, `(_+)(${b}|$)`].join("|"), "g"), (he, Be, Se, ye, S) => (Se ? `${Be}${Se}` : `${ye}${S}`).replace(/_/g, "\\_")), de = /* @__PURE__ */ __name((he, Be, Se) => he.type === "sentence" && Se === 0, "de"), De = /* @__PURE__ */ __name((he, Be, Se) => $(he.children[Se - 1]), "De");
                return U !== ce.value && (pe.match(void 0, de, De) || pe.match(void 0, de, (he, Be, Se) => he.type === "emphasis" && Se === 0, De)) && (U = U.replace(/^(\\?[*_])+/, (he) => he.replace(/\\/g, ""))), U;
              }
              case "whitespace": {
                let U = pe.getParentNode(), de = U.children.indexOf(ce), De = U.children[de + 1], he = De && /^>|^(?:[*+-]|#{1,6}|\d+[).])$/.test(De.value) ? "never" : ie.proseWrap;
                return le(pe, ce.value, { proseWrap: he });
              }
              case "emphasis": {
                let U;
                if ($(ce.children[0]))
                  U = ie.originalText[ce.position.start.offset];
                else {
                  let de = pe.getParentNode(), De = de.children.indexOf(ce), he = de.children[De - 1], Be = de.children[De + 1];
                  U = he && he.type === "sentence" && he.children.length > 0 && t(he.children).type === "word" && !t(he.children).hasTrailingPunctuation || Be && Be.type === "sentence" && Be.children.length > 0 && Be.children[0].type === "word" && !Be.children[0].hasLeadingPunctuation || Q(pe, "emphasis") ? "*" : "_";
                }
                return [U, oe(pe, ie, ve), U];
              }
              case "strong":
                return ["**", oe(pe, ie, ve), "**"];
              case "delete":
                return ["~~", oe(pe, ie, ve), "~~"];
              case "inlineCode": {
                let U = s(ce.value, "`"), de = "`".repeat(U || 1), De = U && !/^\s/.test(ce.value) ? " " : "";
                return [de, De, ce.value, De, de];
              }
              case "wikiLink": {
                let U = "";
                return ie.proseWrap === "preserve" ? U = ce.value : U = ce.value.replace(/[\t\n]+/g, " "), ["[[", U, "]]"];
              }
              case "link":
                switch (ie.originalText[ce.position.start.offset]) {
                  case "<": {
                    let U = "mailto:", de = ce.url.startsWith(U) && ie.originalText.slice(ce.position.start.offset + 1, ce.position.start.offset + 1 + U.length) !== U ? ce.url.slice(U.length) : ce.url;
                    return ["<", de, ">"];
                  }
                  case "[":
                    return ["[", oe(pe, ie, ve), "](", ge(ce.url, ")"), Ce(ce.title, ie), ")"];
                  default:
                    return ie.originalText.slice(ce.position.start.offset, ce.position.end.offset);
                }
              case "image":
                return ["![", ce.alt || "", "](", ge(ce.url, ")"), Ce(ce.title, ie), ")"];
              case "blockquote":
                return ["> ", w("> ", oe(pe, ie, ve))];
              case "heading":
                return ["#".repeat(ce.depth) + " ", oe(pe, ie, ve)];
              case "code": {
                if (ce.isIndented) {
                  let De = " ".repeat(4);
                  return w(De, [De, ...I(ce.value, g)]);
                }
                let U = ie.__inJsTemplate ? "~" : "`", de = U.repeat(Math.max(3, a(ce.value, U) + 1));
                return [de, ce.lang || "", ce.meta ? " " + ce.meta : "", g, ...I(d(ce, ie.originalText), g), g, de];
              }
              case "html": {
                let U = pe.getParentNode(), de = U.type === "root" && t(U.children) === ce ? ce.value.trimEnd() : ce.value, De = /^<!--.*-->$/s.test(de);
                return I(de, De ? g : h(y));
              }
              case "list": {
                let U = O(ce, pe.getParentNode()), de = C(ce, ie);
                return oe(pe, ie, ve, { processor: (De, he) => {
                  let Be = ye(), Se = De.getValue();
                  if (Se.children.length === 2 && Se.children[1].type === "html" && Se.children[0].position.start.column !== Se.children[1].position.start.column)
                    return [Be, Y(De, ie, ve, Be)];
                  return [Be, w(" ".repeat(Be.length), Y(De, ie, ve, Be))];
                  function ye() {
                    let S = ce.ordered ? (he === 0 ? ce.start : de ? 1 : ce.start + he) + (U % 2 === 0 ? ". " : ") ") : U % 2 === 0 ? "- " : "* ";
                    return ce.isAligned || ce.hasIndentedCodeblock ? V(S, ie) : S;
                  }
                  __name(ye, "ye");
                } });
              }
              case "thematicBreak": {
                let U = se(pe, "list");
                return U === -1 ? "---" : O(pe.getParentNode(U), pe.getParentNode(U + 1)) % 2 === 0 ? "***" : "---";
              }
              case "linkReference":
                return ["[", oe(pe, ie, ve), "]", ce.referenceType === "full" ? ["[", ce.identifier, "]"] : ce.referenceType === "collapsed" ? "[]" : ""];
              case "imageReference":
                switch (ce.referenceType) {
                  case "full":
                    return ["![", ce.alt || "", "][", ce.identifier, "]"];
                  default:
                    return ["![", ce.alt, "]", ce.referenceType === "collapsed" ? "[]" : ""];
                }
              case "definition": {
                let U = ie.proseWrap === "always" ? c : " ";
                return F(["[", ce.identifier, "]:", T([U, ge(ce.url), ce.title === null ? "" : [U, Ce(ce.title, ie, false)]])]);
              }
              case "footnote":
                return ["[^", oe(pe, ie, ve), "]"];
              case "footnoteReference":
                return ["[^", ce.identifier, "]"];
              case "footnoteDefinition": {
                let U = pe.getParentNode().children[pe.getName() + 1], de = ce.children.length === 1 && ce.children[0].type === "paragraph" && (ie.proseWrap === "never" || ie.proseWrap === "preserve" && ce.children[0].position.start.line === ce.children[0].position.end.line);
                return ["[^", ce.identifier, "]: ", de ? oe(pe, ie, ve) : F([w(" ".repeat(4), oe(pe, ie, ve, { processor: (De, he) => he === 0 ? F([p, ve()]) : ve() })), U && U.type === "footnoteDefinition" ? p : ""])];
              }
              case "table":
                return W(pe, ie, ve);
              case "tableCell":
                return oe(pe, ie, ve);
              case "break":
                return /\s/.test(ie.originalText[ce.position.start.offset]) ? ["  ", h(y)] : ["\\", g];
              case "liquidNode":
                return I(ce.value, g);
              case "importExport":
                return [ce.value, g];
              case "esComment":
                return ["{/* ", ce.value, " */}"];
              case "jsx":
                return ce.value;
              case "math":
                return ["$$", g, ce.value ? [...I(ce.value, g), g] : "", "$$"];
              case "inlineMath":
                return ie.originalText.slice(x(ce), m(ce));
              case "tableRow":
              case "listItem":
              default:
                throw new Error(`Unknown markdown type ${JSON.stringify(ce.type)}`);
            }
          }
          __name(L, "L");
          function Y(pe, ie, ve, ce) {
            let U = pe.getValue(), de = U.checked === null ? "" : U.checked ? "[x] " : "[ ] ";
            return [de, oe(pe, ie, ve, { processor: (De, he) => {
              if (he === 0 && De.getValue().type !== "list")
                return w(" ".repeat(de.length), ve());
              let Be = " ".repeat(_e(ie.tabWidth - ce.length, 0, 3));
              return [Be, w(Be, ve())];
            } })];
          }
          __name(Y, "Y");
          function V(pe, ie) {
            let ve = ce();
            return pe + " ".repeat(ve >= 4 ? 0 : ve);
            function ce() {
              let U = pe.length % ie.tabWidth;
              return U === 0 ? 0 : ie.tabWidth - U;
            }
            __name(ce, "ce");
          }
          __name(V, "V");
          function O(pe, ie) {
            return K(pe, ie, (ve) => ve.ordered === pe.ordered);
          }
          __name(O, "O");
          function K(pe, ie, ve) {
            let ce = -1;
            for (let U of ie.children)
              if (U.type === pe.type && ve(U) ? ce++ : ce = -1, U === pe)
                return ce;
          }
          __name(K, "K");
          function se(pe, ie) {
            let ve = Array.isArray(ie) ? ie : [ie], ce = -1, U;
            for (; U = pe.getParentNode(++ce); )
              if (ve.includes(U.type))
                return ce;
            return -1;
          }
          __name(se, "se");
          function Q(pe, ie) {
            let ve = se(pe, ie);
            return ve === -1 ? null : pe.getParentNode(ve);
          }
          __name(Q, "Q");
          function le(pe, ie, ve) {
            if (ve.proseWrap === "preserve" && ie === `
`)
              return g;
            let ce = ve.proseWrap === "always" && !Q(pe, q);
            return ie !== "" ? ce ? c : " " : ce ? p : "";
          }
          __name(le, "le");
          function W(pe, ie, ve) {
            let ce = pe.getValue(), U = [], de = pe.map((S) => S.map((G, te) => {
              let Ee = P(ve(), ie).formatted, Re = r(Ee);
              return U[te] = Math.max(U[te] || 3, Re), { text: Ee, width: Re };
            }, "children"), "children"), De = Be(false);
            if (ie.proseWrap !== "never")
              return [i, De];
            let he = Be(true);
            return [i, F(D(he, De))];
            function Be(S) {
              let G = [ye(de[0], S), Se(S)];
              return de.length > 1 && G.push(l(A, de.slice(1).map((te) => ye(te, S)))), l(A, G);
            }
            __name(Be, "Be");
            function Se(S) {
              return `| ${U.map((te, Ee) => {
                let Re = ce.align[Ee], Te = Re === "center" || Re === "left" ? ":" : "-", Pe = Re === "center" || Re === "right" ? ":" : "-", Fe = S ? "-" : "-".repeat(te - 2);
                return `${Te}${Fe}${Pe}`;
              }).join(" | ")} |`;
            }
            __name(Se, "Se");
            function ye(S, G) {
              return `| ${S.map((Ee, Re) => {
                let { text: Te, width: Pe } = Ee;
                if (G)
                  return Te;
                let Fe = U[Re] - Pe, Ze = ce.align[Re], xe = 0;
                Ze === "right" ? xe = Fe : Ze === "center" && (xe = Math.floor(Fe / 2));
                let Je = Fe - xe;
                return `${" ".repeat(xe)}${Te}${" ".repeat(Je)}`;
              }).join(" | ")} |`;
            }
            __name(ye, "ye");
          }
          __name(W, "W");
          function X(pe, ie, ve) {
            let ce = [], U = null, { children: de } = pe.getValue();
            for (let [De, he] of de.entries())
              switch (z(he)) {
                case "start":
                  U === null && (U = { index: De, offset: he.position.end.offset });
                  break;
                case "end":
                  U !== null && (ce.push({ start: U, end: { index: De, offset: he.position.start.offset } }), U = null);
                  break;
                default:
                  break;
              }
            return oe(pe, ie, ve, { processor: (De, he) => {
              if (ce.length > 0) {
                let Be = ce[0];
                if (he === Be.start.index)
                  return [ae(de[Be.start.index]), ie.originalText.slice(Be.start.offset, Be.end.offset), ae(de[Be.end.index])];
                if (Be.start.index < he && he < Be.end.index)
                  return false;
                if (he === Be.end.index)
                  return ce.shift(), false;
              }
              return ve();
            } });
          }
          __name(X, "X");
          function oe(pe, ie, ve) {
            let ce = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, { postprocessor: U } = ce, de = ce.processor || (() => ve()), De = pe.getValue(), he = [], Be;
            return pe.each((Se, ye) => {
              let S = Se.getValue(), G = de(Se, ye);
              if (G !== false) {
                let te = { parts: he, prevNode: Be, parentNode: De, options: ie };
                H(S, te) && (he.push(g), Be && M.has(Be.type) || (Z(S, te) || ne(S, te)) && he.push(g), ne(S, te) && he.push(g)), he.push(G), Be = S;
              }
            }, "children"), U ? U(he) : he;
          }
          __name(oe, "oe");
          function ae(pe) {
            if (pe.type === "html")
              return pe.value;
            if (pe.type === "paragraph" && Array.isArray(pe.children) && pe.children.length === 1 && pe.children[0].type === "esComment")
              return ["{/* ", pe.children[0].value, " */}"];
          }
          __name(ae, "ae");
          function Ae(pe) {
            let ie = pe;
            for (; u(ie.children); )
              ie = t(ie.children);
            return ie;
          }
          __name(Ae, "Ae");
          function z(pe) {
            let ie;
            if (pe.type === "html")
              ie = pe.value.match(/^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/);
            else {
              let ve;
              pe.type === "esComment" ? ve = pe : pe.type === "paragraph" && pe.children.length === 1 && pe.children[0].type === "esComment" && (ve = pe.children[0]), ve && (ie = ve.value.match(/^prettier-ignore(?:-(start|end))?$/));
            }
            return ie ? ie[1] || "next" : false;
          }
          __name(z, "z");
          function H(pe, ie) {
            let ve = ie.parts.length === 0, ce = N.includes(pe.type), U = pe.type === "html" && k.includes(ie.parentNode.type);
            return !ve && !ce && !U;
          }
          __name(H, "H");
          function Z(pe, ie) {
            var ve, ce, U;
            let De = (ie.prevNode && ie.prevNode.type) === pe.type && J.has(pe.type), he = ie.parentNode.type === "listItem" && !ie.parentNode.loose, Be = ((ve = ie.prevNode) === null || ve === void 0 ? void 0 : ve.type) === "listItem" && ie.prevNode.loose, Se = z(ie.prevNode) === "next", ye = pe.type === "html" && ((ce = ie.prevNode) === null || ce === void 0 ? void 0 : ce.type) === "html" && ie.prevNode.position.end.line + 1 === pe.position.start.line, S = pe.type === "html" && ie.parentNode.type === "listItem" && ((U = ie.prevNode) === null || U === void 0 ? void 0 : U.type) === "paragraph" && ie.prevNode.position.end.line + 1 === pe.position.start.line;
            return Be || !(De || he || Se || ye || S);
          }
          __name(Z, "Z");
          function ne(pe, ie) {
            let ve = ie.prevNode && ie.prevNode.type === "list", ce = pe.type === "code" && pe.isIndented;
            return ve && ce;
          }
          __name(ne, "ne");
          function fe(pe) {
            let ie = Q(pe, ["linkReference", "imageReference"]);
            return ie && (ie.type !== "linkReference" || ie.referenceType !== "full");
          }
          __name(fe, "fe");
          function ge(pe) {
            let ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], ve = [" ", ...Array.isArray(ie) ? ie : [ie]];
            return new RegExp(ve.map((ce) => `\\${ce}`).join("|")).test(pe) ? `<${pe}>` : pe;
          }
          __name(ge, "ge");
          function Ce(pe, ie) {
            let ve = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
            if (!pe)
              return "";
            if (ve)
              return " " + Ce(pe, ie, false);
            if (pe = pe.replace(/\\(["')])/g, "$1"), pe.includes('"') && pe.includes("'") && !pe.includes(")"))
              return `(${pe})`;
            let ce = pe.split("'").length - 1, U = pe.split('"').length - 1, de = ce > U ? '"' : U > ce || ie.singleQuote ? "'" : '"';
            return pe = pe.replace(/\\/, "\\\\"), pe = pe.replace(new RegExp(`(${de})`, "g"), "\\$1"), `${de}${pe}${de}`;
          }
          __name(Ce, "Ce");
          function _e(pe, ie, ve) {
            return pe < ie ? ie : pe > ve ? ve : pe;
          }
          __name(_e, "_e");
          function Oe(pe) {
            let ie = Number(pe.getName());
            if (ie === 0)
              return false;
            let ve = pe.getParentNode().children[ie - 1];
            return z(ve) === "next";
          }
          __name(Oe, "Oe");
          n.exports = { preprocess: E, print: L, embed: R, massageAstNode: o, hasPrettierIgnore: Oe, insertPragma: f };
        } }), Rd = ee({ "src/language-markdown/options.js"(e, n) {
          "use strict";
          re();
          var t = qt();
          n.exports = { proseWrap: t.proseWrap, singleQuote: t.singleQuote };
        } }), $d = ee({ "src/language-markdown/parsers.js"() {
          re();
        } }), ca = ee({ "node_modules/linguist-languages/data/Markdown.json"(e, n) {
          n.exports = { name: "Markdown", type: "prose", color: "#083fa1", aliases: ["pandoc"], aceMode: "markdown", codemirrorMode: "gfm", codemirrorMimeType: "text/x-gfm", wrap: true, extensions: [".md", ".livemd", ".markdown", ".mdown", ".mdwn", ".mdx", ".mkd", ".mkdn", ".mkdown", ".ronn", ".scd", ".workbook"], filenames: ["contents.lr"], tmScope: "source.gfm", languageId: 222 };
        } }), Vd = ee({ "src/language-markdown/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = Md(), a = Rd(), r = $d(), u = [t(ca(), (l) => ({ since: "1.8.0", parsers: ["markdown"], vscodeLanguageIds: ["markdown"], filenames: [...l.filenames, "README"], extensions: l.extensions.filter((c) => c !== ".mdx") })), t(ca(), () => ({ name: "MDX", since: "1.15.0", parsers: ["mdx"], vscodeLanguageIds: ["mdx"], filenames: [], extensions: [".mdx"] }))], i = { mdast: s };
          n.exports = { languages: u, options: a, printers: i, parsers: r };
        } }), Wd = ee({ "src/language-html/clean.js"(e, n) {
          "use strict";
          re();
          var { isFrontMatterNode: t } = Ge(), s = /* @__PURE__ */ new Set(["sourceSpan", "startSourceSpan", "endSourceSpan", "nameSpan", "valueSpan"]);
          function a(r, u) {
            if (r.type === "text" || r.type === "comment" || t(r) || r.type === "yaml" || r.type === "toml")
              return null;
            r.type === "attribute" && delete u.value, r.type === "docType" && delete u.value;
          }
          __name(a, "a");
          a.ignoredProperties = s, n.exports = a;
        } }), Hd = ee({ "src/language-html/constants.evaluate.js"(e, n) {
          n.exports = { CSS_DISPLAY_TAGS: { area: "none", base: "none", basefont: "none", datalist: "none", head: "none", link: "none", meta: "none", noembed: "none", noframes: "none", param: "block", rp: "none", script: "block", source: "block", style: "none", template: "inline", track: "block", title: "none", html: "block", body: "block", address: "block", blockquote: "block", center: "block", div: "block", figure: "block", figcaption: "block", footer: "block", form: "block", header: "block", hr: "block", legend: "block", listing: "block", main: "block", p: "block", plaintext: "block", pre: "block", xmp: "block", slot: "contents", ruby: "ruby", rt: "ruby-text", article: "block", aside: "block", h1: "block", h2: "block", h3: "block", h4: "block", h5: "block", h6: "block", hgroup: "block", nav: "block", section: "block", dir: "block", dd: "block", dl: "block", dt: "block", ol: "block", ul: "block", li: "list-item", table: "table", caption: "table-caption", colgroup: "table-column-group", col: "table-column", thead: "table-header-group", tbody: "table-row-group", tfoot: "table-footer-group", tr: "table-row", td: "table-cell", th: "table-cell", fieldset: "block", button: "inline-block", details: "block", summary: "block", dialog: "block", meter: "inline-block", progress: "inline-block", object: "inline-block", video: "inline-block", audio: "inline-block", select: "inline-block", option: "block", optgroup: "block" }, CSS_DISPLAY_DEFAULT: "inline", CSS_WHITE_SPACE_TAGS: { listing: "pre", plaintext: "pre", pre: "pre", xmp: "pre", nobr: "nowrap", table: "initial", textarea: "pre-wrap" }, CSS_WHITE_SPACE_DEFAULT: "normal" };
        } }), Gd = ee({ "src/language-html/utils/is-unknown-namespace.js"(e, n) {
          "use strict";
          re();
          function t(s) {
            return s.type === "element" && !s.hasExplicitNamespace && !["html", "svg"].includes(s.namespace);
          }
          __name(t, "t");
          n.exports = t;
        } }), Mt = ee({ "src/language-html/utils/index.js"(e, n) {
          "use strict";
          re();
          var { inferParserByLanguage: t, isFrontMatterNode: s } = Ge(), { builders: { line: a, hardline: r, join: u }, utils: { getDocParts: i, replaceTextEndOfLine: l } } = qe(), { CSS_DISPLAY_TAGS: c, CSS_DISPLAY_DEFAULT: y, CSS_WHITE_SPACE_TAGS: h, CSS_WHITE_SPACE_DEFAULT: g } = Hd(), p = Gd(), D = /* @__PURE__ */ new Set(["	", `
`, "\f", "\r", " "]), v = /* @__PURE__ */ __name((S) => S.replace(/^[\t\n\f\r ]+/, ""), "v"), w = /* @__PURE__ */ __name((S) => S.replace(/[\t\n\f\r ]+$/, ""), "w"), T = /* @__PURE__ */ __name((S) => v(w(S)), "T"), F = /* @__PURE__ */ __name((S) => S.replace(/^[\t\f\r ]*\n/g, ""), "F"), A = /* @__PURE__ */ __name((S) => F(w(S)), "A"), B = /* @__PURE__ */ __name((S) => S.split(/[\t\n\f\r ]+/), "B"), I = /* @__PURE__ */ __name((S) => S.match(/^[\t\n\f\r ]*/)[0], "I"), P = /* @__PURE__ */ __name((S) => {
            let [, G, te, Ee] = S.match(/^([\t\n\f\r ]*)(.*?)([\t\n\f\r ]*)$/s);
            return { leadingWhitespace: G, trailingWhitespace: Ee, text: te };
          }, "P"), R = /* @__PURE__ */ __name((S) => /[\t\n\f\r ]/.test(S), "R");
          function f(S, G) {
            return !!(S.type === "ieConditionalComment" && S.lastChild && !S.lastChild.isSelfClosing && !S.lastChild.endSourceSpan || S.type === "ieConditionalComment" && !S.complete || ne(S) && S.children.some((te) => te.type !== "text" && te.type !== "interpolation") || De(S, G) && !o(S) && S.type !== "interpolation");
          }
          __name(f, "f");
          function x(S) {
            return S.type === "attribute" || !S.parent || !S.prev ? false : m(S.prev);
          }
          __name(x, "x");
          function m(S) {
            return S.type === "comment" && S.value.trim() === "prettier-ignore";
          }
          __name(m, "m");
          function E(S) {
            return S.type === "text" || S.type === "comment";
          }
          __name(E, "E");
          function o(S) {
            return S.type === "element" && (S.fullName === "script" || S.fullName === "style" || S.fullName === "svg:style" || p(S) && (S.name === "script" || S.name === "style"));
          }
          __name(o, "o");
          function d(S) {
            return S.children && !o(S);
          }
          __name(d, "d");
          function C(S) {
            return o(S) || S.type === "interpolation" || _(S);
          }
          __name(C, "C");
          function _(S) {
            return _e(S).startsWith("pre");
          }
          __name(_, "_");
          function b(S, G) {
            let te = Ee();
            if (te && !S.prev && S.parent && S.parent.tagDefinition && S.parent.tagDefinition.ignoreFirstLf)
              return S.type === "interpolation";
            return te;
            function Ee() {
              return s(S) ? false : (S.type === "text" || S.type === "interpolation") && S.prev && (S.prev.type === "text" || S.prev.type === "interpolation") ? true : !S.parent || S.parent.cssDisplay === "none" ? false : ne(S.parent) ? true : !(!S.prev && (S.parent.type === "root" || ne(S) && S.parent || o(S.parent) || U(S.parent, G) || !ae(S.parent.cssDisplay)) || S.prev && !H(S.prev.cssDisplay));
            }
            __name(Ee, "Ee");
          }
          __name(b, "b");
          function N(S, G) {
            return s(S) ? false : (S.type === "text" || S.type === "interpolation") && S.next && (S.next.type === "text" || S.next.type === "interpolation") ? true : !S.parent || S.parent.cssDisplay === "none" ? false : ne(S.parent) ? true : !(!S.next && (S.parent.type === "root" || ne(S) && S.parent || o(S.parent) || U(S.parent, G) || !Ae(S.parent.cssDisplay)) || S.next && !z(S.next.cssDisplay));
          }
          __name(N, "N");
          function k(S) {
            return Z(S.cssDisplay) && !o(S);
          }
          __name(k, "k");
          function $(S) {
            return s(S) || S.next && S.sourceSpan.end && S.sourceSpan.end.line + 1 < S.next.sourceSpan.start.line;
          }
          __name($, "$");
          function M(S) {
            return q(S) || S.type === "element" && S.children.length > 0 && (["body", "script", "style"].includes(S.name) || S.children.some((G) => Q(G))) || S.firstChild && S.firstChild === S.lastChild && S.firstChild.type !== "text" && V(S.firstChild) && (!S.lastChild.isTrailingSpaceSensitive || O(S.lastChild));
          }
          __name(M, "M");
          function q(S) {
            return S.type === "element" && S.children.length > 0 && (["html", "head", "ul", "ol", "select"].includes(S.name) || S.cssDisplay.startsWith("table") && S.cssDisplay !== "table-cell");
          }
          __name(q, "q");
          function J(S) {
            return K(S) || S.prev && L(S.prev) || Y(S);
          }
          __name(J, "J");
          function L(S) {
            return K(S) || S.type === "element" && S.fullName === "br" || Y(S);
          }
          __name(L, "L");
          function Y(S) {
            return V(S) && O(S);
          }
          __name(Y, "Y");
          function V(S) {
            return S.hasLeadingSpaces && (S.prev ? S.prev.sourceSpan.end.line < S.sourceSpan.start.line : S.parent.type === "root" || S.parent.startSourceSpan.end.line < S.sourceSpan.start.line);
          }
          __name(V, "V");
          function O(S) {
            return S.hasTrailingSpaces && (S.next ? S.next.sourceSpan.start.line > S.sourceSpan.end.line : S.parent.type === "root" || S.parent.endSourceSpan && S.parent.endSourceSpan.start.line > S.sourceSpan.end.line);
          }
          __name(O, "O");
          function K(S) {
            switch (S.type) {
              case "ieConditionalComment":
              case "comment":
              case "directive":
                return true;
              case "element":
                return ["script", "select"].includes(S.name);
            }
            return false;
          }
          __name(K, "K");
          function se(S) {
            return S.lastChild ? se(S.lastChild) : S;
          }
          __name(se, "se");
          function Q(S) {
            return S.children && S.children.some((G) => G.type !== "text");
          }
          __name(Q, "Q");
          function le(S) {
            let { type: G, lang: te } = S.attrMap;
            if (G === "module" || G === "text/javascript" || G === "text/babel" || G === "application/javascript" || te === "jsx")
              return "babel";
            if (G === "application/x-typescript" || te === "ts" || te === "tsx")
              return "typescript";
            if (G === "text/markdown")
              return "markdown";
            if (G === "text/html")
              return "html";
            if (G && (G.endsWith("json") || G.endsWith("importmap")) || G === "speculationrules")
              return "json";
            if (G === "text/x-handlebars-template")
              return "glimmer";
          }
          __name(le, "le");
          function W(S, G) {
            let { lang: te } = S.attrMap;
            if (!te || te === "postcss" || te === "css")
              return "css";
            if (te === "scss")
              return "scss";
            if (te === "less")
              return "less";
            if (te === "stylus")
              return t("stylus", G);
          }
          __name(W, "W");
          function X(S, G) {
            if (S.name === "script" && !S.attrMap.src)
              return !S.attrMap.lang && !S.attrMap.type ? "babel" : le(S);
            if (S.name === "style")
              return W(S, G);
            if (G && De(S, G))
              return le(S) || !("src" in S.attrMap) && t(S.attrMap.lang, G);
          }
          __name(X, "X");
          function oe(S) {
            return S === "block" || S === "list-item" || S.startsWith("table");
          }
          __name(oe, "oe");
          function ae(S) {
            return !oe(S) && S !== "inline-block";
          }
          __name(ae, "ae");
          function Ae(S) {
            return !oe(S) && S !== "inline-block";
          }
          __name(Ae, "Ae");
          function z(S) {
            return !oe(S);
          }
          __name(z, "z");
          function H(S) {
            return !oe(S);
          }
          __name(H, "H");
          function Z(S) {
            return !oe(S) && S !== "inline-block";
          }
          __name(Z, "Z");
          function ne(S) {
            return _e(S).startsWith("pre");
          }
          __name(ne, "ne");
          function fe(S, G) {
            let te = 0;
            for (let Ee = S.stack.length - 1; Ee >= 0; Ee--) {
              let Re = S.stack[Ee];
              Re && typeof Re == "object" && !Array.isArray(Re) && G(Re) && te++;
            }
            return te;
          }
          __name(fe, "fe");
          function ge(S, G) {
            let te = S;
            for (; te; ) {
              if (G(te))
                return true;
              te = te.parent;
            }
            return false;
          }
          __name(ge, "ge");
          function Ce(S, G) {
            if (S.prev && S.prev.type === "comment") {
              let Ee = S.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);
              if (Ee)
                return Ee[1];
            }
            let te = false;
            if (S.type === "element" && S.namespace === "svg")
              if (ge(S, (Ee) => Ee.fullName === "svg:foreignObject"))
                te = true;
              else
                return S.name === "svg" ? "inline-block" : "block";
            switch (G.htmlWhitespaceSensitivity) {
              case "strict":
                return "inline";
              case "ignore":
                return "block";
              default:
                return G.parser === "vue" && S.parent && S.parent.type === "root" ? "block" : S.type === "element" && (!S.namespace || te || p(S)) && c[S.name] || y;
            }
          }
          __name(Ce, "Ce");
          function _e(S) {
            return S.type === "element" && (!S.namespace || p(S)) && h[S.name] || g;
          }
          __name(_e, "_e");
          function Oe(S) {
            let G = Number.POSITIVE_INFINITY;
            for (let te of S.split(`
`)) {
              if (te.length === 0)
                continue;
              if (!D.has(te[0]))
                return 0;
              let Ee = I(te).length;
              te.length !== Ee && Ee < G && (G = Ee);
            }
            return G === Number.POSITIVE_INFINITY ? 0 : G;
          }
          __name(Oe, "Oe");
          function pe(S) {
            let G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Oe(S);
            return G === 0 ? S : S.split(`
`).map((te) => te.slice(G)).join(`
`);
          }
          __name(pe, "pe");
          function ie(S, G) {
            let te = 0;
            for (let Ee = 0; Ee < S.length; Ee++)
              S[Ee] === G && te++;
            return te;
          }
          __name(ie, "ie");
          function ve(S) {
            return S.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
          }
          __name(ve, "ve");
          var ce = /* @__PURE__ */ new Set(["template", "style", "script"]);
          function U(S, G) {
            return de(S, G) && !ce.has(S.fullName);
          }
          __name(U, "U");
          function de(S, G) {
            return G.parser === "vue" && S.type === "element" && S.parent.type === "root" && S.fullName.toLowerCase() !== "html";
          }
          __name(de, "de");
          function De(S, G) {
            return de(S, G) && (U(S, G) || S.attrMap.lang && S.attrMap.lang !== "html");
          }
          __name(De, "De");
          function he(S) {
            let G = S.fullName;
            return G.charAt(0) === "#" || G === "slot-scope" || G === "v-slot" || G.startsWith("v-slot:");
          }
          __name(he, "he");
          function Be(S, G) {
            let te = S.parent;
            if (!de(te, G))
              return false;
            let Ee = te.fullName, Re = S.fullName;
            return Ee === "script" && Re === "setup" || Ee === "style" && Re === "vars";
          }
          __name(Be, "Be");
          function Se(S) {
            let G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : S.value;
            return S.parent.isWhitespaceSensitive ? S.parent.isIndentationSensitive ? l(G) : l(pe(A(G)), r) : i(u(a, B(G)));
          }
          __name(Se, "Se");
          function ye(S, G) {
            return de(S, G) && S.name === "script";
          }
          __name(ye, "ye");
          n.exports = { htmlTrim: T, htmlTrimPreserveIndentation: A, hasHtmlWhitespace: R, getLeadingAndTrailingHtmlWhitespace: P, canHaveInterpolation: d, countChars: ie, countParents: fe, dedentString: pe, forceBreakChildren: q, forceBreakContent: M, forceNextEmptyLine: $, getLastDescendant: se, getNodeCssStyleDisplay: Ce, getNodeCssStyleWhiteSpace: _e, hasPrettierIgnore: x, inferScriptParser: X, isVueCustomBlock: U, isVueNonHtmlBlock: De, isVueScriptTag: ye, isVueSlotAttribute: he, isVueSfcBindingsAttribute: Be, isVueSfcBlock: de, isDanglingSpaceSensitiveNode: k, isIndentationSensitiveNode: _, isLeadingSpaceSensitiveNode: b, isPreLikeNode: ne, isScriptLikeTag: o, isTextLikeNode: E, isTrailingSpaceSensitiveNode: N, isWhitespaceSensitiveNode: C, isUnknownNamespace: p, preferHardlineAsLeadingSpaces: J, preferHardlineAsTrailingSpaces: L, shouldPreserveContent: f, unescapeQuoteEntities: ve, getTextValueParts: Se };
        } }), Ud = ee({ "node_modules/angular-html-parser/lib/compiler/src/chars.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true }), e.$EOF = 0, e.$BSPACE = 8, e.$TAB = 9, e.$LF = 10, e.$VTAB = 11, e.$FF = 12, e.$CR = 13, e.$SPACE = 32, e.$BANG = 33, e.$DQ = 34, e.$HASH = 35, e.$$ = 36, e.$PERCENT = 37, e.$AMPERSAND = 38, e.$SQ = 39, e.$LPAREN = 40, e.$RPAREN = 41, e.$STAR = 42, e.$PLUS = 43, e.$COMMA = 44, e.$MINUS = 45, e.$PERIOD = 46, e.$SLASH = 47, e.$COLON = 58, e.$SEMICOLON = 59, e.$LT = 60, e.$EQ = 61, e.$GT = 62, e.$QUESTION = 63, e.$0 = 48, e.$7 = 55, e.$9 = 57, e.$A = 65, e.$E = 69, e.$F = 70, e.$X = 88, e.$Z = 90, e.$LBRACKET = 91, e.$BACKSLASH = 92, e.$RBRACKET = 93, e.$CARET = 94, e.$_ = 95, e.$a = 97, e.$b = 98, e.$e = 101, e.$f = 102, e.$n = 110, e.$r = 114, e.$t = 116, e.$u = 117, e.$v = 118, e.$x = 120, e.$z = 122, e.$LBRACE = 123, e.$BAR = 124, e.$RBRACE = 125, e.$NBSP = 160, e.$PIPE = 124, e.$TILDA = 126, e.$AT = 64, e.$BT = 96;
          function n(i) {
            return i >= e.$TAB && i <= e.$SPACE || i == e.$NBSP;
          }
          __name(n, "n");
          e.isWhitespace = n;
          function t(i) {
            return e.$0 <= i && i <= e.$9;
          }
          __name(t, "t");
          e.isDigit = t;
          function s(i) {
            return i >= e.$a && i <= e.$z || i >= e.$A && i <= e.$Z;
          }
          __name(s, "s");
          e.isAsciiLetter = s;
          function a(i) {
            return i >= e.$a && i <= e.$f || i >= e.$A && i <= e.$F || t(i);
          }
          __name(a, "a");
          e.isAsciiHexDigit = a;
          function r(i) {
            return i === e.$LF || i === e.$CR;
          }
          __name(r, "r");
          e.isNewLine = r;
          function u(i) {
            return e.$0 <= i && i <= e.$7;
          }
          __name(u, "u");
          e.isOctalDigit = u;
        } }), Jd = ee({ "node_modules/angular-html-parser/lib/compiler/src/aot/static_symbol.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = /* @__PURE__ */ __name(class {
            constructor(s, a, r) {
              this.filePath = s, this.name = a, this.members = r;
            }
            assertNoMembers() {
              if (this.members.length)
                throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);
            }
          }, "n");
          e.StaticSymbol = n;
          var t = /* @__PURE__ */ __name(class {
            constructor() {
              this.cache = /* @__PURE__ */ new Map();
            }
            get(s, a, r) {
              r = r || [];
              let u = r.length ? `.${r.join(".")}` : "", i = `"${s}".${a}${u}`, l = this.cache.get(i);
              return l || (l = new n(s, a, r), this.cache.set(i, l)), l;
            }
          }, "t");
          e.StaticSymbolCache = t;
        } }), zd = ee({ "node_modules/angular-html-parser/lib/compiler/src/util.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = /-+([a-z0-9])/g;
          function t(o) {
            return o.replace(n, function() {
              for (var d = arguments.length, C = new Array(d), _ = 0; _ < d; _++)
                C[_] = arguments[_];
              return C[1].toUpperCase();
            });
          }
          __name(t, "t");
          e.dashCaseToCamelCase = t;
          function s(o, d) {
            return r(o, ":", d);
          }
          __name(s, "s");
          e.splitAtColon = s;
          function a(o, d) {
            return r(o, ".", d);
          }
          __name(a, "a");
          e.splitAtPeriod = a;
          function r(o, d, C) {
            let _ = o.indexOf(d);
            return _ == -1 ? C : [o.slice(0, _).trim(), o.slice(_ + 1).trim()];
          }
          __name(r, "r");
          function u(o, d, C) {
            return Array.isArray(o) ? d.visitArray(o, C) : F(o) ? d.visitStringMap(o, C) : o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean" ? d.visitPrimitive(o, C) : d.visitOther(o, C);
          }
          __name(u, "u");
          e.visitValue = u;
          function i(o) {
            return o != null;
          }
          __name(i, "i");
          e.isDefined = i;
          function l(o) {
            return o === void 0 ? null : o;
          }
          __name(l, "l");
          e.noUndefined = l;
          var c = /* @__PURE__ */ __name(class {
            visitArray(o, d) {
              return o.map((C) => u(C, this, d));
            }
            visitStringMap(o, d) {
              let C = {};
              return Object.keys(o).forEach((_) => {
                C[_] = u(o[_], this, d);
              }), C;
            }
            visitPrimitive(o, d) {
              return o;
            }
            visitOther(o, d) {
              return o;
            }
          }, "c");
          e.ValueTransformer = c, e.SyncAsync = { assertSync: (o) => {
            if (P(o))
              throw new Error("Illegal state: value cannot be a promise");
            return o;
          }, then: (o, d) => P(o) ? o.then(d) : d(o), all: (o) => o.some(P) ? Promise.all(o) : o };
          function y(o) {
            throw new Error(`Internal Error: ${o}`);
          }
          __name(y, "y");
          e.error = y;
          function h(o, d) {
            let C = Error(o);
            return C[g] = true, d && (C[p] = d), C;
          }
          __name(h, "h");
          e.syntaxError = h;
          var g = "ngSyntaxError", p = "ngParseErrors";
          function D(o) {
            return o[g];
          }
          __name(D, "D");
          e.isSyntaxError = D;
          function v(o) {
            return o[p] || [];
          }
          __name(v, "v");
          e.getParseErrors = v;
          function w(o) {
            return o.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
          }
          __name(w, "w");
          e.escapeRegExp = w;
          var T = Object.getPrototypeOf({});
          function F(o) {
            return typeof o == "object" && o !== null && Object.getPrototypeOf(o) === T;
          }
          __name(F, "F");
          function A(o) {
            let d = "";
            for (let C = 0; C < o.length; C++) {
              let _ = o.charCodeAt(C);
              if (_ >= 55296 && _ <= 56319 && o.length > C + 1) {
                let b = o.charCodeAt(C + 1);
                b >= 56320 && b <= 57343 && (C++, _ = (_ - 55296 << 10) + b - 56320 + 65536);
              }
              _ <= 127 ? d += String.fromCharCode(_) : _ <= 2047 ? d += String.fromCharCode(_ >> 6 & 31 | 192, _ & 63 | 128) : _ <= 65535 ? d += String.fromCharCode(_ >> 12 | 224, _ >> 6 & 63 | 128, _ & 63 | 128) : _ <= 2097151 && (d += String.fromCharCode(_ >> 18 & 7 | 240, _ >> 12 & 63 | 128, _ >> 6 & 63 | 128, _ & 63 | 128));
            }
            return d;
          }
          __name(A, "A");
          e.utf8Encode = A;
          function B(o) {
            if (typeof o == "string")
              return o;
            if (o instanceof Array)
              return "[" + o.map(B).join(", ") + "]";
            if (o == null)
              return "" + o;
            if (o.overriddenName)
              return `${o.overriddenName}`;
            if (o.name)
              return `${o.name}`;
            if (!o.toString)
              return "object";
            let d = o.toString();
            if (d == null)
              return "" + d;
            let C = d.indexOf(`
`);
            return C === -1 ? d : d.substring(0, C);
          }
          __name(B, "B");
          e.stringify = B;
          function I(o) {
            return typeof o == "function" && o.hasOwnProperty("__forward_ref__") ? o() : o;
          }
          __name(I, "I");
          e.resolveForwardRef = I;
          function P(o) {
            return !!o && typeof o.then == "function";
          }
          __name(P, "P");
          e.isPromise = P;
          var R = /* @__PURE__ */ __name(class {
            constructor(o) {
              this.full = o;
              let d = o.split(".");
              this.major = d[0], this.minor = d[1], this.patch = d.slice(2).join(".");
            }
          }, "R");
          e.Version = R;
          var f = typeof window < "u" && window, x = typeof self < "u" && typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope && self, m = typeof globalThis < "u" && globalThis, E = m || f || x;
          e.global = E;
        } }), Xd = ee({ "node_modules/angular-html-parser/lib/compiler/src/compile_metadata.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Jd(), t = zd(), s = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
          function a(C) {
            return C.replace(/\W/g, "_");
          }
          __name(a, "a");
          e.sanitizeIdentifier = a;
          var r = 0;
          function u(C) {
            if (!C || !C.reference)
              return null;
            let _ = C.reference;
            if (_ instanceof n.StaticSymbol)
              return _.name;
            if (_.__anonymousType)
              return _.__anonymousType;
            let b = t.stringify(_);
            return b.indexOf("(") >= 0 ? (b = `anonymous_${r++}`, _.__anonymousType = b) : b = a(b), b;
          }
          __name(u, "u");
          e.identifierName = u;
          function i(C) {
            let _ = C.reference;
            return _ instanceof n.StaticSymbol ? _.filePath : `./${t.stringify(_)}`;
          }
          __name(i, "i");
          e.identifierModuleUrl = i;
          function l(C, _) {
            return `View_${u({ reference: C })}_${_}`;
          }
          __name(l, "l");
          e.viewClassName = l;
          function c(C) {
            return `RenderType_${u({ reference: C })}`;
          }
          __name(c, "c");
          e.rendererTypeName = c;
          function y(C) {
            return `HostView_${u({ reference: C })}`;
          }
          __name(y, "y");
          e.hostViewClassName = y;
          function h(C) {
            return `${u({ reference: C })}NgFactory`;
          }
          __name(h, "h");
          e.componentFactoryName = h;
          var g;
          (function(C) {
            C[C.Pipe = 0] = "Pipe", C[C.Directive = 1] = "Directive", C[C.NgModule = 2] = "NgModule", C[C.Injectable = 3] = "Injectable";
          })(g = e.CompileSummaryKind || (e.CompileSummaryKind = {}));
          function p(C) {
            return C.value != null ? a(C.value) : u(C.identifier);
          }
          __name(p, "p");
          e.tokenName = p;
          function D(C) {
            return C.identifier != null ? C.identifier.reference : C.value;
          }
          __name(D, "D");
          e.tokenReference = D;
          var v = /* @__PURE__ */ __name(class {
            constructor() {
              let { moduleUrl: C, styles: _, styleUrls: b } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              this.moduleUrl = C || null, this.styles = P(_), this.styleUrls = P(b);
            }
          }, "v");
          e.CompileStylesheetMetadata = v;
          var w = /* @__PURE__ */ __name(class {
            constructor(C) {
              let { encapsulation: _, template: b, templateUrl: N, htmlAst: k, styles: $, styleUrls: M, externalStylesheets: q, animations: J, ngContentSelectors: L, interpolation: Y, isInline: V, preserveWhitespaces: O } = C;
              if (this.encapsulation = _, this.template = b, this.templateUrl = N, this.htmlAst = k, this.styles = P($), this.styleUrls = P(M), this.externalStylesheets = P(q), this.animations = J ? f(J) : [], this.ngContentSelectors = L || [], Y && Y.length != 2)
                throw new Error("'interpolation' should have a start and an end symbol.");
              this.interpolation = Y, this.isInline = V, this.preserveWhitespaces = O;
            }
            toSummary() {
              return { ngContentSelectors: this.ngContentSelectors, encapsulation: this.encapsulation, styles: this.styles, animations: this.animations };
            }
          }, "w");
          e.CompileTemplateMetadata = w;
          var T = /* @__PURE__ */ __name(class {
            static create(C) {
              let { isHost: _, type: b, isComponent: N, selector: k, exportAs: $, changeDetection: M, inputs: q, outputs: J, host: L, providers: Y, viewProviders: V, queries: O, guards: K, viewQueries: se, entryComponents: Q, template: le, componentViewType: W, rendererType: X, componentFactory: oe } = C, ae = {}, Ae = {}, z = {};
              L != null && Object.keys(L).forEach((ne) => {
                let fe = L[ne], ge = ne.match(s);
                ge === null ? z[ne] = fe : ge[1] != null ? Ae[ge[1]] = fe : ge[2] != null && (ae[ge[2]] = fe);
              });
              let H = {};
              q != null && q.forEach((ne) => {
                let fe = t.splitAtColon(ne, [ne, ne]);
                H[fe[0]] = fe[1];
              });
              let Z = {};
              return J != null && J.forEach((ne) => {
                let fe = t.splitAtColon(ne, [ne, ne]);
                Z[fe[0]] = fe[1];
              }), new T({ isHost: _, type: b, isComponent: !!N, selector: k, exportAs: $, changeDetection: M, inputs: H, outputs: Z, hostListeners: ae, hostProperties: Ae, hostAttributes: z, providers: Y, viewProviders: V, queries: O, guards: K, viewQueries: se, entryComponents: Q, template: le, componentViewType: W, rendererType: X, componentFactory: oe });
            }
            constructor(C) {
              let { isHost: _, type: b, isComponent: N, selector: k, exportAs: $, changeDetection: M, inputs: q, outputs: J, hostListeners: L, hostProperties: Y, hostAttributes: V, providers: O, viewProviders: K, queries: se, guards: Q, viewQueries: le, entryComponents: W, template: X, componentViewType: oe, rendererType: ae, componentFactory: Ae } = C;
              this.isHost = !!_, this.type = b, this.isComponent = N, this.selector = k, this.exportAs = $, this.changeDetection = M, this.inputs = q, this.outputs = J, this.hostListeners = L, this.hostProperties = Y, this.hostAttributes = V, this.providers = P(O), this.viewProviders = P(K), this.queries = P(se), this.guards = Q, this.viewQueries = P(le), this.entryComponents = P(W), this.template = X, this.componentViewType = oe, this.rendererType = ae, this.componentFactory = Ae;
            }
            toSummary() {
              return { summaryKind: g.Directive, type: this.type, isComponent: this.isComponent, selector: this.selector, exportAs: this.exportAs, inputs: this.inputs, outputs: this.outputs, hostListeners: this.hostListeners, hostProperties: this.hostProperties, hostAttributes: this.hostAttributes, providers: this.providers, viewProviders: this.viewProviders, queries: this.queries, guards: this.guards, viewQueries: this.viewQueries, entryComponents: this.entryComponents, changeDetection: this.changeDetection, template: this.template && this.template.toSummary(), componentViewType: this.componentViewType, rendererType: this.rendererType, componentFactory: this.componentFactory };
            }
          }, "T");
          e.CompileDirectiveMetadata = T;
          var F = /* @__PURE__ */ __name(class {
            constructor(C) {
              let { type: _, name: b, pure: N } = C;
              this.type = _, this.name = b, this.pure = !!N;
            }
            toSummary() {
              return { summaryKind: g.Pipe, type: this.type, name: this.name, pure: this.pure };
            }
          }, "F");
          e.CompilePipeMetadata = F;
          var A = /* @__PURE__ */ __name(class {
          }, "A");
          e.CompileShallowModuleMetadata = A;
          var B = /* @__PURE__ */ __name(class {
            constructor(C) {
              let { type: _, providers: b, declaredDirectives: N, exportedDirectives: k, declaredPipes: $, exportedPipes: M, entryComponents: q, bootstrapComponents: J, importedModules: L, exportedModules: Y, schemas: V, transitiveModule: O, id: K } = C;
              this.type = _ || null, this.declaredDirectives = P(N), this.exportedDirectives = P(k), this.declaredPipes = P($), this.exportedPipes = P(M), this.providers = P(b), this.entryComponents = P(q), this.bootstrapComponents = P(J), this.importedModules = P(L), this.exportedModules = P(Y), this.schemas = P(V), this.id = K || null, this.transitiveModule = O || null;
            }
            toSummary() {
              let C = this.transitiveModule;
              return { summaryKind: g.NgModule, type: this.type, entryComponents: C.entryComponents, providers: C.providers, modules: C.modules, exportedDirectives: C.exportedDirectives, exportedPipes: C.exportedPipes };
            }
          }, "B");
          e.CompileNgModuleMetadata = B;
          var I = /* @__PURE__ */ __name(class {
            constructor() {
              this.directivesSet = /* @__PURE__ */ new Set(), this.directives = [], this.exportedDirectivesSet = /* @__PURE__ */ new Set(), this.exportedDirectives = [], this.pipesSet = /* @__PURE__ */ new Set(), this.pipes = [], this.exportedPipesSet = /* @__PURE__ */ new Set(), this.exportedPipes = [], this.modulesSet = /* @__PURE__ */ new Set(), this.modules = [], this.entryComponentsSet = /* @__PURE__ */ new Set(), this.entryComponents = [], this.providers = [];
            }
            addProvider(C, _) {
              this.providers.push({ provider: C, module: _ });
            }
            addDirective(C) {
              this.directivesSet.has(C.reference) || (this.directivesSet.add(C.reference), this.directives.push(C));
            }
            addExportedDirective(C) {
              this.exportedDirectivesSet.has(C.reference) || (this.exportedDirectivesSet.add(C.reference), this.exportedDirectives.push(C));
            }
            addPipe(C) {
              this.pipesSet.has(C.reference) || (this.pipesSet.add(C.reference), this.pipes.push(C));
            }
            addExportedPipe(C) {
              this.exportedPipesSet.has(C.reference) || (this.exportedPipesSet.add(C.reference), this.exportedPipes.push(C));
            }
            addModule(C) {
              this.modulesSet.has(C.reference) || (this.modulesSet.add(C.reference), this.modules.push(C));
            }
            addEntryComponent(C) {
              this.entryComponentsSet.has(C.componentType) || (this.entryComponentsSet.add(C.componentType), this.entryComponents.push(C));
            }
          }, "I");
          e.TransitiveCompileNgModuleMetadata = I;
          function P(C) {
            return C || [];
          }
          __name(P, "P");
          var R = /* @__PURE__ */ __name(class {
            constructor(C, _) {
              let { useClass: b, useValue: N, useExisting: k, useFactory: $, deps: M, multi: q } = _;
              this.token = C, this.useClass = b || null, this.useValue = N, this.useExisting = k, this.useFactory = $ || null, this.dependencies = M || null, this.multi = !!q;
            }
          }, "R");
          e.ProviderMeta = R;
          function f(C) {
            return C.reduce((_, b) => {
              let N = Array.isArray(b) ? f(b) : b;
              return _.concat(N);
            }, []);
          }
          __name(f, "f");
          e.flatten = f;
          function x(C) {
            return C.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, "ng:///");
          }
          __name(x, "x");
          function m(C, _, b) {
            let N;
            return b.isInline ? _.type.reference instanceof n.StaticSymbol ? N = `${_.type.reference.filePath}.${_.type.reference.name}.html` : N = `${u(C)}/${u(_.type)}.html` : N = b.templateUrl, _.type.reference instanceof n.StaticSymbol ? N : x(N);
          }
          __name(m, "m");
          e.templateSourceUrl = m;
          function E(C, _) {
            let b = C.moduleUrl.split(/\/\\/g), N = b[b.length - 1];
            return x(`css/${_}${N}.ngstyle.js`);
          }
          __name(E, "E");
          e.sharedStylesheetJitUrl = E;
          function o(C) {
            return x(`${u(C.type)}/module.ngfactory.js`);
          }
          __name(o, "o");
          e.ngModuleJitUrl = o;
          function d(C, _) {
            return x(`${u(C)}/${u(_.type)}.ngfactory.js`);
          }
          __name(d, "d");
          e.templateJitUrl = d;
        } }), Kd = ee({ "node_modules/angular-html-parser/lib/compiler/src/parse_util.js"(e) {
          "use strict";
          re(), Object.defineProperty(e, "__esModule", { value: true });
          var n = Ud(), t = Xd(), s = /* @__PURE__ */ __name(class {
            constructor(y, h, g, p) {
              this.file = y, this.offset = h, this.line = g, this.col = p;
            }
            toString() {
              return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
            }
            moveBy(y) {
              let h = this.file.content, g = h.length, p = this.offset, D = this.line, v = this.col;
              for (; p > 0 && y < 0; )
                if (p--, y++, h.charCodeAt(p) == n.$LF) {
                  D--;
                  let T = h.substr(0, p - 1).lastIndexOf(String.fromCharCode(n.$LF));
                  v = T > 0 ? p - T : p;
                } else
                  v--;
              for (; p < g && y > 0; ) {
                let w = h.charCodeAt(p);
                p++, y--, w == n.$LF ? (D++, v = 0) : v++;
              }
              return new s(this.file, p, D, v);
            }
            getContext(y, h) {
              let g = this.file.content, p = this.offset;
              if (p != null) {
                p > g.length - 1 && (p = g.length - 1);
                let D = p, v = 0, w = 0;
                for (; v < y && p > 0 && (p--, v++, !(g[p] == `
` && ++w == h)); )
                  ;
                for (v = 0, w = 0; v < y && D < g.length - 1 && (D++, v++, !(g[D] == `
` && ++w == h)); )
                  ;
                return { before: g.substring(p, this.offset), after: g.substring(this.offset, D + 1) };
              }
              return null;
            }
          }, "s");
          e.ParseLocation = s;
          var a = /* @__PURE__ */ __name(class {
            constructor(y, h) {
              this.content = y, this.url = h;
            }
          }, "a");
          e.ParseSourceFile = a;
          var r = /* @__PURE__ */ __name(class {
            constructor(y, h) {
              let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.start = y, this.end = h, this.details = g;
            }
            toString() {
              return this.start.file.content.substring(this.start.offset, this.end.offset);
            }
          }, "r");
          e.ParseSourceSpan = r, e.EMPTY_PARSE_LOCATION = new s(new a("", ""), 0, 0, 0), e.EMPTY_SOURCE_SPAN = new r(e.EMPTY_PARSE_LOCATION, e.EMPTY_PARSE_LOCATION);
          var u;
          (function(y) {
            y[y.WARNING = 0] = "WARNING", y[y.ERROR = 1] = "ERROR";
          })(u = e.ParseErrorLevel || (e.ParseErrorLevel = {}));
          var i = /* @__PURE__ */ __name(class {
            constructor(y, h) {
              let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : u.ERROR;
              this.span = y, this.msg = h, this.level = g;
            }
            contextualMessage() {
              let y = this.span.start.getContext(100, 3);
              return y ? `${this.msg} ("${y.before}[${u[this.level]} ->]${y.after}")` : this.msg;
            }
            toString() {
              let y = this.span.details ? `, ${this.span.details}` : "";
              return `${this.contextualMessage()}: ${this.span.start}${y}`;
            }
          }, "i");
          e.ParseError = i;
          function l(y, h) {
            let g = t.identifierModuleUrl(h), p = g != null ? `in ${y} ${t.identifierName(h)} in ${g}` : `in ${y} ${t.identifierName(h)}`, D = new a("", p);
            return new r(new s(D, -1, -1, -1), new s(D, -1, -1, -1));
          }
          __name(l, "l");
          e.typeSourceSpan = l;
          function c(y, h, g) {
            let p = `in ${y} ${h} in ${g}`, D = new a("", p);
            return new r(new s(D, -1, -1, -1), new s(D, -1, -1, -1));
          }
          __name(c, "c");
          e.r3JitTypeSourceSpan = c;
        } }), Yd = ee({ "src/language-html/print-preprocess.js"(e, n) {
          "use strict";
          re();
          var { ParseSourceSpan: t } = Kd(), { htmlTrim: s, getLeadingAndTrailingHtmlWhitespace: a, hasHtmlWhitespace: r, canHaveInterpolation: u, getNodeCssStyleDisplay: i, isDanglingSpaceSensitiveNode: l, isIndentationSensitiveNode: c, isLeadingSpaceSensitiveNode: y, isTrailingSpaceSensitiveNode: h, isWhitespaceSensitiveNode: g, isVueScriptTag: p } = Mt(), D = [w, T, A, I, P, x, R, f, m, B, E];
          function v(o, d) {
            for (let C of D)
              C(o, d);
            return o;
          }
          __name(v, "v");
          function w(o) {
            o.walk((d) => {
              if (d.type === "element" && d.tagDefinition.ignoreFirstLf && d.children.length > 0 && d.children[0].type === "text" && d.children[0].value[0] === `
`) {
                let C = d.children[0];
                C.value.length === 1 ? d.removeChild(C) : C.value = C.value.slice(1);
              }
            });
          }
          __name(w, "w");
          function T(o) {
            let d = /* @__PURE__ */ __name((C) => C.type === "element" && C.prev && C.prev.type === "ieConditionalStartComment" && C.prev.sourceSpan.end.offset === C.startSourceSpan.start.offset && C.firstChild && C.firstChild.type === "ieConditionalEndComment" && C.firstChild.sourceSpan.start.offset === C.startSourceSpan.end.offset, "d");
            o.walk((C) => {
              if (C.children)
                for (let _ = 0; _ < C.children.length; _++) {
                  let b = C.children[_];
                  if (!d(b))
                    continue;
                  let N = b.prev, k = b.firstChild;
                  C.removeChild(N), _--;
                  let $ = new t(N.sourceSpan.start, k.sourceSpan.end), M = new t($.start, b.sourceSpan.end);
                  b.condition = N.condition, b.sourceSpan = M, b.startSourceSpan = $, b.removeChild(k);
                }
            });
          }
          __name(T, "T");
          function F(o, d, C) {
            o.walk((_) => {
              if (_.children)
                for (let b = 0; b < _.children.length; b++) {
                  let N = _.children[b];
                  if (N.type !== "text" && !d(N))
                    continue;
                  N.type !== "text" && (N.type = "text", N.value = C(N));
                  let k = N.prev;
                  !k || k.type !== "text" || (k.value += N.value, k.sourceSpan = new t(k.sourceSpan.start, N.sourceSpan.end), _.removeChild(N), b--);
                }
            });
          }
          __name(F, "F");
          function A(o) {
            return F(o, (d) => d.type === "cdata", (d) => `<![CDATA[${d.value}]]>`);
          }
          __name(A, "A");
          function B(o) {
            let d = /* @__PURE__ */ __name((C) => C.type === "element" && C.attrs.length === 0 && C.children.length === 1 && C.firstChild.type === "text" && !r(C.children[0].value) && !C.firstChild.hasLeadingSpaces && !C.firstChild.hasTrailingSpaces && C.isLeadingSpaceSensitive && !C.hasLeadingSpaces && C.isTrailingSpaceSensitive && !C.hasTrailingSpaces && C.prev && C.prev.type === "text" && C.next && C.next.type === "text", "d");
            o.walk((C) => {
              if (C.children)
                for (let _ = 0; _ < C.children.length; _++) {
                  let b = C.children[_];
                  if (!d(b))
                    continue;
                  let N = b.prev, k = b.next;
                  N.value += `<${b.rawName}>` + b.firstChild.value + `</${b.rawName}>` + k.value, N.sourceSpan = new t(N.sourceSpan.start, k.sourceSpan.end), N.isTrailingSpaceSensitive = k.isTrailingSpaceSensitive, N.hasTrailingSpaces = k.hasTrailingSpaces, C.removeChild(b), _--, C.removeChild(k);
                }
            });
          }
          __name(B, "B");
          function I(o, d) {
            if (d.parser === "html")
              return;
            let C = /{{(.+?)}}/s;
            o.walk((_) => {
              if (!!u(_))
                for (let b of _.children) {
                  if (b.type !== "text")
                    continue;
                  let N = b.sourceSpan.start, k = null, $ = b.value.split(C);
                  for (let M = 0; M < $.length; M++, N = k) {
                    let q = $[M];
                    if (M % 2 === 0) {
                      k = N.moveBy(q.length), q.length > 0 && _.insertChildBefore(b, { type: "text", value: q, sourceSpan: new t(N, k) });
                      continue;
                    }
                    k = N.moveBy(q.length + 4), _.insertChildBefore(b, { type: "interpolation", sourceSpan: new t(N, k), children: q.length === 0 ? [] : [{ type: "text", value: q, sourceSpan: new t(N.moveBy(2), k.moveBy(-2)) }] });
                  }
                  _.removeChild(b);
                }
            });
          }
          __name(I, "I");
          function P(o) {
            o.walk((d) => {
              if (!d.children)
                return;
              if (d.children.length === 0 || d.children.length === 1 && d.children[0].type === "text" && s(d.children[0].value).length === 0) {
                d.hasDanglingSpaces = d.children.length > 0, d.children = [];
                return;
              }
              let C = g(d), _ = c(d);
              if (!C)
                for (let b = 0; b < d.children.length; b++) {
                  let N = d.children[b];
                  if (N.type !== "text")
                    continue;
                  let { leadingWhitespace: k, text: $, trailingWhitespace: M } = a(N.value), q = N.prev, J = N.next;
                  $ ? (N.value = $, N.sourceSpan = new t(N.sourceSpan.start.moveBy(k.length), N.sourceSpan.end.moveBy(-M.length)), k && (q && (q.hasTrailingSpaces = true), N.hasLeadingSpaces = true), M && (N.hasTrailingSpaces = true, J && (J.hasLeadingSpaces = true))) : (d.removeChild(N), b--, (k || M) && (q && (q.hasTrailingSpaces = true), J && (J.hasLeadingSpaces = true)));
                }
              d.isWhitespaceSensitive = C, d.isIndentationSensitive = _;
            });
          }
          __name(P, "P");
          function R(o) {
            o.walk((d) => {
              d.isSelfClosing = !d.children || d.type === "element" && (d.tagDefinition.isVoid || d.startSourceSpan === d.endSourceSpan);
            });
          }
          __name(R, "R");
          function f(o, d) {
            o.walk((C) => {
              C.type === "element" && (C.hasHtmComponentClosingTag = C.endSourceSpan && /^<\s*\/\s*\/\s*>$/.test(d.originalText.slice(C.endSourceSpan.start.offset, C.endSourceSpan.end.offset)));
            });
          }
          __name(f, "f");
          function x(o, d) {
            o.walk((C) => {
              C.cssDisplay = i(C, d);
            });
          }
          __name(x, "x");
          function m(o, d) {
            o.walk((C) => {
              let { children: _ } = C;
              if (!!_) {
                if (_.length === 0) {
                  C.isDanglingSpaceSensitive = l(C);
                  return;
                }
                for (let b of _)
                  b.isLeadingSpaceSensitive = y(b, d), b.isTrailingSpaceSensitive = h(b, d);
                for (let b = 0; b < _.length; b++) {
                  let N = _[b];
                  N.isLeadingSpaceSensitive = (b === 0 || N.prev.isTrailingSpaceSensitive) && N.isLeadingSpaceSensitive, N.isTrailingSpaceSensitive = (b === _.length - 1 || N.next.isLeadingSpaceSensitive) && N.isTrailingSpaceSensitive;
                }
              }
            });
          }
          __name(m, "m");
          function E(o, d) {
            if (d.parser === "vue") {
              let C = o.children.find((b) => p(b, d));
              if (!C)
                return;
              let { lang: _ } = C.attrMap;
              (_ === "ts" || _ === "typescript") && (d.__should_parse_vue_template_with_ts = true);
            }
          }
          __name(E, "E");
          n.exports = v;
        } }), Qd = ee({ "src/language-html/pragma.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return /^\s*<!--\s*@(?:format|prettier)\s*-->/.test(a);
          }
          __name(t, "t");
          function s(a) {
            return `<!-- @format -->

` + a.replace(/^\s*\n/, "");
          }
          __name(s, "s");
          n.exports = { hasPragma: t, insertPragma: s };
        } }), Qn = ee({ "src/language-html/loc.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return a.sourceSpan.start.offset;
          }
          __name(t, "t");
          function s(a) {
            return a.sourceSpan.end.offset;
          }
          __name(s, "s");
          n.exports = { locStart: t, locEnd: s };
        } }), rr = ee({ "src/language-html/print/tag.js"(e, n) {
          "use strict";
          re();
          var t = Yt(), { isNonEmptyArray: s } = Ge(), { builders: { indent: a, join: r, line: u, softline: i, hardline: l }, utils: { replaceTextEndOfLine: c } } = qe(), { locStart: y, locEnd: h } = Qn(), { isTextLikeNode: g, getLastDescendant: p, isPreLikeNode: D, hasPrettierIgnore: v, shouldPreserveContent: w, isVueSfcBlock: T } = Mt();
          function F(L, Y) {
            return [L.isSelfClosing ? "" : A(L, Y), B(L, Y)];
          }
          __name(F, "F");
          function A(L, Y) {
            return L.lastChild && o(L.lastChild) ? "" : [I(L, Y), R(L, Y)];
          }
          __name(A, "A");
          function B(L, Y) {
            return (L.next ? m(L.next) : E(L.parent)) ? "" : [f(L, Y), P(L, Y)];
          }
          __name(B, "B");
          function I(L, Y) {
            return E(L) ? f(L.lastChild, Y) : "";
          }
          __name(I, "I");
          function P(L, Y) {
            return o(L) ? R(L.parent, Y) : d(L) ? q(L.next) : "";
          }
          __name(P, "P");
          function R(L, Y) {
            if (t(!L.isSelfClosing), x(L, Y))
              return "";
            switch (L.type) {
              case "ieConditionalComment":
                return "<!";
              case "element":
                if (L.hasHtmComponentClosingTag)
                  return "<//";
              default:
                return `</${L.rawName}`;
            }
          }
          __name(R, "R");
          function f(L, Y) {
            if (x(L, Y))
              return "";
            switch (L.type) {
              case "ieConditionalComment":
              case "ieConditionalEndComment":
                return "[endif]-->";
              case "ieConditionalStartComment":
                return "]><!-->";
              case "interpolation":
                return "}}";
              case "element":
                if (L.isSelfClosing)
                  return "/>";
              default:
                return ">";
            }
          }
          __name(f, "f");
          function x(L, Y) {
            return !L.isSelfClosing && !L.endSourceSpan && (v(L) || w(L.parent, Y));
          }
          __name(x, "x");
          function m(L) {
            return L.prev && L.prev.type !== "docType" && !g(L.prev) && L.isLeadingSpaceSensitive && !L.hasLeadingSpaces;
          }
          __name(m, "m");
          function E(L) {
            return L.lastChild && L.lastChild.isTrailingSpaceSensitive && !L.lastChild.hasTrailingSpaces && !g(p(L.lastChild)) && !D(L);
          }
          __name(E, "E");
          function o(L) {
            return !L.next && !L.hasTrailingSpaces && L.isTrailingSpaceSensitive && g(p(L));
          }
          __name(o, "o");
          function d(L) {
            return L.next && !g(L.next) && g(L) && L.isTrailingSpaceSensitive && !L.hasTrailingSpaces;
          }
          __name(d, "d");
          function C(L) {
            let Y = L.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);
            return Y ? Y[1] ? Y[1].split(/\s+/) : true : false;
          }
          __name(C, "C");
          function _(L) {
            return !L.prev && L.isLeadingSpaceSensitive && !L.hasLeadingSpaces;
          }
          __name(_, "_");
          function b(L, Y, V) {
            let O = L.getValue();
            if (!s(O.attrs))
              return O.isSelfClosing ? " " : "";
            let K = O.prev && O.prev.type === "comment" && C(O.prev.value), se = typeof K == "boolean" ? () => K : Array.isArray(K) ? (ae) => K.includes(ae.rawName) : () => false, Q = L.map((ae) => {
              let Ae = ae.getValue();
              return se(Ae) ? c(Y.originalText.slice(y(Ae), h(Ae))) : V();
            }, "attrs"), le = O.type === "element" && O.fullName === "script" && O.attrs.length === 1 && O.attrs[0].fullName === "src" && O.children.length === 0, X = Y.singleAttributePerLine && O.attrs.length > 1 && !T(O, Y) ? l : u, oe = [a([le ? " " : u, r(X, Q)])];
            return O.firstChild && _(O.firstChild) || O.isSelfClosing && E(O.parent) || le ? oe.push(O.isSelfClosing ? " " : "") : oe.push(Y.bracketSameLine ? O.isSelfClosing ? " " : "" : O.isSelfClosing ? u : i), oe;
          }
          __name(b, "b");
          function N(L) {
            return L.firstChild && _(L.firstChild) ? "" : J(L);
          }
          __name(N, "N");
          function k(L, Y, V) {
            let O = L.getValue();
            return [$(O, Y), b(L, Y, V), O.isSelfClosing ? "" : N(O)];
          }
          __name(k, "k");
          function $(L, Y) {
            return L.prev && d(L.prev) ? "" : [M(L, Y), q(L)];
          }
          __name($, "$");
          function M(L, Y) {
            return _(L) ? J(L.parent) : m(L) ? f(L.prev, Y) : "";
          }
          __name(M, "M");
          function q(L) {
            switch (L.type) {
              case "ieConditionalComment":
              case "ieConditionalStartComment":
                return `<!--[if ${L.condition}`;
              case "ieConditionalEndComment":
                return "<!--<!";
              case "interpolation":
                return "{{";
              case "docType":
                return "<!DOCTYPE";
              case "element":
                if (L.condition)
                  return `<!--[if ${L.condition}]><!--><${L.rawName}`;
              default:
                return `<${L.rawName}`;
            }
          }
          __name(q, "q");
          function J(L) {
            switch (t(!L.isSelfClosing), L.type) {
              case "ieConditionalComment":
                return "]>";
              case "element":
                if (L.condition)
                  return "><!--<![endif]-->";
              default:
                return ">";
            }
          }
          __name(J, "J");
          n.exports = { printClosingTag: F, printClosingTagStart: A, printClosingTagStartMarker: R, printClosingTagEndMarker: f, printClosingTagSuffix: P, printClosingTagEnd: B, needsToBorrowLastChildClosingTagEndMarker: E, needsToBorrowParentClosingTagStartMarker: o, needsToBorrowPrevClosingTagEndMarker: m, printOpeningTag: k, printOpeningTagStart: $, printOpeningTagPrefix: M, printOpeningTagStartMarker: q, printOpeningTagEndMarker: J, needsToBorrowNextOpeningTagStartMarker: d, needsToBorrowParentOpeningTagEndMarker: _ };
        } }), Zd = ee({ "node_modules/parse-srcset/src/parse-srcset.js"(e, n) {
          re(), function(t, s) {
            typeof define == "function" && define.amd ? define([], s) : typeof n == "object" && n.exports ? n.exports = s() : t.parseSrcset = s();
          }(e, function() {
            return function(t, s) {
              var a = s && s.logger || console;
              function r(R) {
                return R === " " || R === "	" || R === `
` || R === "\f" || R === "\r";
              }
              __name(r, "r");
              function u(R) {
                var f, x = R.exec(t.substring(A));
                if (x)
                  return f = x[0], A += f.length, f;
              }
              __name(u, "u");
              for (var i = t.length, l = /^[ \t\n\r\u000c]+/, c = /^[, \t\n\r\u000c]+/, y = /^[^ \t\n\r\u000c]+/, h = /[,]+$/, g = /^\d+$/, p = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, D, v, w, T, F, A = 0, B = []; ; ) {
                if (u(c), A >= i)
                  return B;
                D = u(y), v = [], D.slice(-1) === "," ? (D = D.replace(h, ""), P()) : I();
              }
              function I() {
                for (u(l), w = "", T = "in descriptor"; ; ) {
                  if (F = t.charAt(A), T === "in descriptor")
                    if (r(F))
                      w && (v.push(w), w = "", T = "after descriptor");
                    else if (F === ",") {
                      A += 1, w && v.push(w), P();
                      return;
                    } else if (F === "(")
                      w = w + F, T = "in parens";
                    else if (F === "") {
                      w && v.push(w), P();
                      return;
                    } else
                      w = w + F;
                  else if (T === "in parens")
                    if (F === ")")
                      w = w + F, T = "in descriptor";
                    else if (F === "") {
                      v.push(w), P();
                      return;
                    } else
                      w = w + F;
                  else if (T === "after descriptor" && !r(F))
                    if (F === "") {
                      P();
                      return;
                    } else
                      T = "in descriptor", A -= 1;
                  A += 1;
                }
              }
              __name(I, "I");
              function P() {
                var R = false, f, x, m, E, o = {}, d, C, _, b, N;
                for (E = 0; E < v.length; E++)
                  d = v[E], C = d[d.length - 1], _ = d.substring(0, d.length - 1), b = parseInt(_, 10), N = parseFloat(_), g.test(_) && C === "w" ? ((f || x) && (R = true), b === 0 ? R = true : f = b) : p.test(_) && C === "x" ? ((f || x || m) && (R = true), N < 0 ? R = true : x = N) : g.test(_) && C === "h" ? ((m || x) && (R = true), b === 0 ? R = true : m = b) : R = true;
                R ? a && a.error && a.error("Invalid srcset descriptor found in '" + t + "' at '" + d + "'.") : (o.url = D, f && (o.w = f), x && (o.d = x), m && (o.h = m), B.push(o));
              }
              __name(P, "P");
            };
          });
        } }), eg = ee({ "src/language-html/syntax-attribute.js"(e, n) {
          "use strict";
          re();
          var t = Zd(), { builders: { ifBreak: s, join: a, line: r } } = qe();
          function u(l) {
            let c = t(l, { logger: { error(I) {
              throw new Error(I);
            } } }), y = c.some((I) => {
              let { w: P } = I;
              return P;
            }), h = c.some((I) => {
              let { h: P } = I;
              return P;
            }), g = c.some((I) => {
              let { d: P } = I;
              return P;
            });
            if (y + h + g > 1)
              throw new Error("Mixed descriptor in srcset is not supported");
            let p = y ? "w" : h ? "h" : "d", D = y ? "w" : h ? "h" : "x", v = /* @__PURE__ */ __name((I) => Math.max(...I), "v"), w = c.map((I) => I.url), T = v(w.map((I) => I.length)), F = c.map((I) => I[p]).map((I) => I ? I.toString() : ""), A = F.map((I) => {
              let P = I.indexOf(".");
              return P === -1 ? I.length : P;
            }), B = v(A);
            return a([",", r], w.map((I, P) => {
              let R = [I], f = F[P];
              if (f) {
                let x = T - I.length + 1, m = B - A[P], E = " ".repeat(x + m);
                R.push(s(E, " "), f + D);
              }
              return R;
            }));
          }
          __name(u, "u");
          function i(l) {
            return l.trim().split(/\s+/).join(" ");
          }
          __name(i, "i");
          n.exports = { printImgSrcset: u, printClassNames: i };
        } }), tg = ee({ "src/language-html/syntax-vue.js"(e, n) {
          "use strict";
          re();
          var { builders: { group: t } } = qe();
          function s(i, l) {
            let { left: c, operator: y, right: h } = a(i);
            return [t(l(`function _(${c}) {}`, { parser: "babel", __isVueForBindingLeft: true })), " ", y, " ", l(h, { parser: "__js_expression" }, { stripTrailingHardline: true })];
          }
          __name(s, "s");
          function a(i) {
            let l = /(.*?)\s+(in|of)\s+(.*)/s, c = /,([^,\]}]*)(?:,([^,\]}]*))?$/, y = /^\(|\)$/g, h = i.match(l);
            if (!h)
              return;
            let g = {};
            if (g.for = h[3].trim(), !g.for)
              return;
            let p = h[1].trim().replace(y, ""), D = p.match(c);
            D ? (g.alias = p.replace(c, ""), g.iterator1 = D[1].trim(), D[2] && (g.iterator2 = D[2].trim())) : g.alias = p;
            let v = [g.alias, g.iterator1, g.iterator2];
            if (!v.some((w, T) => !w && (T === 0 || v.slice(T + 1).some(Boolean))))
              return { left: v.filter(Boolean).join(","), operator: h[2], right: g.for };
          }
          __name(a, "a");
          function r(i, l) {
            return l(`function _(${i}) {}`, { parser: "babel", __isVueBindings: true });
          }
          __name(r, "r");
          function u(i) {
            let l = /^(?:[\w$]+|\([^)]*\))\s*=>|^function\s*\(/, c = /^[$A-Z_a-z][\w$]*(?:\.[$A-Z_a-z][\w$]*|\['[^']*']|\["[^"]*"]|\[\d+]|\[[$A-Z_a-z][\w$]*])*$/, y = i.trim();
            return l.test(y) || c.test(y);
          }
          __name(u, "u");
          n.exports = { isVueEventBindingExpression: u, printVueFor: s, printVueBindings: r };
        } }), fo = ee({ "src/language-html/get-node-content.js"(e, n) {
          "use strict";
          re();
          var { needsToBorrowParentClosingTagStartMarker: t, printClosingTagStartMarker: s, needsToBorrowLastChildClosingTagEndMarker: a, printClosingTagEndMarker: r, needsToBorrowParentOpeningTagEndMarker: u, printOpeningTagEndMarker: i } = rr();
          function l(c, y) {
            let h = c.startSourceSpan.end.offset;
            c.firstChild && u(c.firstChild) && (h -= i(c).length);
            let g = c.endSourceSpan.start.offset;
            return c.lastChild && t(c.lastChild) ? g += s(c, y).length : a(c) && (g -= r(c.lastChild, y).length), y.originalText.slice(h, g);
          }
          __name(l, "l");
          n.exports = l;
        } }), rg = ee({ "src/language-html/embed.js"(e, n) {
          "use strict";
          re();
          var { builders: { breakParent: t, group: s, hardline: a, indent: r, line: u, fill: i, softline: l }, utils: { mapDoc: c, replaceTextEndOfLine: y } } = qe(), h = Kn(), { printClosingTag: g, printClosingTagSuffix: p, needsToBorrowPrevClosingTagEndMarker: D, printOpeningTagPrefix: v, printOpeningTag: w } = rr(), { printImgSrcset: T, printClassNames: F } = eg(), { printVueFor: A, printVueBindings: B, isVueEventBindingExpression: I } = tg(), { isScriptLikeTag: P, isVueNonHtmlBlock: R, inferScriptParser: f, htmlTrimPreserveIndentation: x, dedentString: m, unescapeQuoteEntities: E, isVueSlotAttribute: o, isVueSfcBindingsAttribute: d, getTextValueParts: C } = Mt(), _ = fo();
          function b(k, $, M) {
            let q = /* @__PURE__ */ __name((Q) => new RegExp(Q.join("|")).test(k.fullName), "q"), J = /* @__PURE__ */ __name(() => E(k.value), "J"), L = false, Y = /* @__PURE__ */ __name((Q, le) => {
              let W = Q.type === "NGRoot" ? Q.node.type === "NGMicrosyntax" && Q.node.body.length === 1 && Q.node.body[0].type === "NGMicrosyntaxExpression" ? Q.node.body[0].expression : Q.node : Q.type === "JsExpressionRoot" ? Q.node : Q;
              W && (W.type === "ObjectExpression" || W.type === "ArrayExpression" || le.parser === "__vue_expression" && (W.type === "TemplateLiteral" || W.type === "StringLiteral")) && (L = true);
            }, "Y"), V = /* @__PURE__ */ __name((Q) => s(Q), "V"), O = /* @__PURE__ */ __name(function(Q) {
              let le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              return s([r([l, Q]), le ? l : ""]);
            }, "O"), K = /* @__PURE__ */ __name((Q) => L ? V(Q) : O(Q), "K"), se = /* @__PURE__ */ __name((Q, le) => $(Q, Object.assign({ __onHtmlBindingRoot: Y, __embeddedInHtml: true }, le)), "se");
            if (k.fullName === "srcset" && (k.parent.fullName === "img" || k.parent.fullName === "source"))
              return O(T(J()));
            if (k.fullName === "class" && !M.parentParser) {
              let Q = J();
              if (!Q.includes("{{"))
                return F(Q);
            }
            if (k.fullName === "style" && !M.parentParser) {
              let Q = J();
              if (!Q.includes("{{"))
                return O(se(Q, { parser: "css", __isHTMLStyleAttribute: true }));
            }
            if (M.parser === "vue") {
              if (k.fullName === "v-for")
                return A(J(), se);
              if (o(k) || d(k, M))
                return B(J(), se);
              let Q = ["^@", "^v-on:"], le = ["^:", "^v-bind:"], W = ["^v-"];
              if (q(Q)) {
                let X = J(), oe = I(X) ? "__js_expression" : M.__should_parse_vue_template_with_ts ? "__vue_ts_event_binding" : "__vue_event_binding";
                return K(se(X, { parser: oe }));
              }
              if (q(le))
                return K(se(J(), { parser: "__vue_expression" }));
              if (q(W))
                return K(se(J(), { parser: "__js_expression" }));
            }
            if (M.parser === "angular") {
              let Q = /* @__PURE__ */ __name((z, H) => se(z, Object.assign(Object.assign({}, H), {}, { trailingComma: "none" })), "Q"), le = ["^\\*"], W = ["^\\(.+\\)$", "^on-"], X = ["^\\[.+\\]$", "^bind(on)?-", "^ng-(if|show|hide|class|style)$"], oe = ["^i18n(-.+)?$"];
              if (q(W))
                return K(Q(J(), { parser: "__ng_action" }));
              if (q(X))
                return K(Q(J(), { parser: "__ng_binding" }));
              if (q(oe)) {
                let z = J().trim();
                return O(i(C(k, z)), !z.includes("@@"));
              }
              if (q(le))
                return K(Q(J(), { parser: "__ng_directive" }));
              let ae = /{{(.+?)}}/s, Ae = J();
              if (ae.test(Ae)) {
                let z = [];
                for (let [H, Z] of Ae.split(ae).entries())
                  if (H % 2 === 0)
                    z.push(y(Z));
                  else
                    try {
                      z.push(s(["{{", r([u, Q(Z, { parser: "__ng_interpolation", __isInHtmlInterpolation: true })]), u, "}}"]));
                    } catch {
                      z.push("{{", y(Z), "}}");
                    }
                return s(z);
              }
            }
            return null;
          }
          __name(b, "b");
          function N(k, $, M, q) {
            let J = k.getValue();
            switch (J.type) {
              case "element": {
                if (P(J) || J.type === "interpolation")
                  return;
                if (!J.isSelfClosing && R(J, q)) {
                  let L = f(J, q);
                  if (!L)
                    return;
                  let Y = _(J, q), V = /^\s*$/.test(Y), O = "";
                  return V || (O = M(x(Y), { parser: L, __embeddedInHtml: true }, { stripTrailingHardline: true }), V = O === ""), [v(J, q), s(w(k, q, $)), V ? "" : a, O, V ? "" : a, g(J, q), p(J, q)];
                }
                break;
              }
              case "text": {
                if (P(J.parent)) {
                  let L = f(J.parent, q);
                  if (L) {
                    let Y = L === "markdown" ? m(J.value.replace(/^[^\S\n]*\n/, "")) : J.value, V = { parser: L, __embeddedInHtml: true };
                    if (q.parser === "html" && L === "babel") {
                      let O = "script", { attrMap: K } = J.parent;
                      K && (K.type === "module" || K.type === "text/babel" && K["data-type"] === "module") && (O = "module"), V.__babelSourceType = O;
                    }
                    return [t, v(J, q), M(Y, V, { stripTrailingHardline: true }), p(J, q)];
                  }
                } else if (J.parent.type === "interpolation") {
                  let L = { __isInHtmlInterpolation: true, __embeddedInHtml: true };
                  return q.parser === "angular" ? (L.parser = "__ng_interpolation", L.trailingComma = "none") : q.parser === "vue" ? L.parser = q.__should_parse_vue_template_with_ts ? "__vue_ts_expression" : "__vue_expression" : L.parser = "__js_expression", [r([u, M(J.value, L, { stripTrailingHardline: true })]), J.parent.next && D(J.parent.next) ? " " : u];
                }
                break;
              }
              case "attribute": {
                if (!J.value)
                  break;
                if (/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(q.originalText.slice(J.valueSpan.start.offset, J.valueSpan.end.offset)))
                  return [J.rawName, "=", J.value];
                if (q.parser === "lwc" && /^{.*}$/s.test(q.originalText.slice(J.valueSpan.start.offset, J.valueSpan.end.offset)))
                  return [J.rawName, "=", J.value];
                let L = b(J, (Y, V) => M(Y, Object.assign({ __isInHtmlAttribute: true, __embeddedInHtml: true }, V), { stripTrailingHardline: true }), q);
                if (L)
                  return [J.rawName, '="', s(c(L, (Y) => typeof Y == "string" ? Y.replace(/"/g, "&quot;") : Y)), '"'];
                break;
              }
              case "front-matter":
                return h(J, M);
            }
          }
          __name(N, "N");
          n.exports = N;
        } }), Do = ee({ "src/language-html/print/children.js"(e, n) {
          "use strict";
          re();
          var { builders: { breakParent: t, group: s, ifBreak: a, line: r, softline: u, hardline: i }, utils: { replaceTextEndOfLine: l } } = qe(), { locStart: c, locEnd: y } = Qn(), { forceBreakChildren: h, forceNextEmptyLine: g, isTextLikeNode: p, hasPrettierIgnore: D, preferHardlineAsLeadingSpaces: v } = Mt(), { printOpeningTagPrefix: w, needsToBorrowNextOpeningTagStartMarker: T, printOpeningTagStartMarker: F, needsToBorrowPrevClosingTagEndMarker: A, printClosingTagEndMarker: B, printClosingTagSuffix: I, needsToBorrowParentClosingTagStartMarker: P } = rr();
          function R(m, E, o) {
            let d = m.getValue();
            return D(d) ? [w(d, E), ...l(E.originalText.slice(c(d) + (d.prev && T(d.prev) ? F(d).length : 0), y(d) - (d.next && A(d.next) ? B(d, E).length : 0))), I(d, E)] : o();
          }
          __name(R, "R");
          function f(m, E) {
            return p(m) && p(E) ? m.isTrailingSpaceSensitive ? m.hasTrailingSpaces ? v(E) ? i : r : "" : v(E) ? i : u : T(m) && (D(E) || E.firstChild || E.isSelfClosing || E.type === "element" && E.attrs.length > 0) || m.type === "element" && m.isSelfClosing && A(E) ? "" : !E.isLeadingSpaceSensitive || v(E) || A(E) && m.lastChild && P(m.lastChild) && m.lastChild.lastChild && P(m.lastChild.lastChild) ? i : E.hasLeadingSpaces ? r : u;
          }
          __name(f, "f");
          function x(m, E, o) {
            let d = m.getValue();
            if (h(d))
              return [t, ...m.map((_) => {
                let b = _.getValue(), N = b.prev ? f(b.prev, b) : "";
                return [N ? [N, g(b.prev) ? i : ""] : "", R(_, E, o)];
              }, "children")];
            let C = d.children.map(() => Symbol(""));
            return m.map((_, b) => {
              let N = _.getValue();
              if (p(N)) {
                if (N.prev && p(N.prev)) {
                  let Y = f(N.prev, N);
                  if (Y)
                    return g(N.prev) ? [i, i, R(_, E, o)] : [Y, R(_, E, o)];
                }
                return R(_, E, o);
              }
              let k = [], $ = [], M = [], q = [], J = N.prev ? f(N.prev, N) : "", L = N.next ? f(N, N.next) : "";
              return J && (g(N.prev) ? k.push(i, i) : J === i ? k.push(i) : p(N.prev) ? $.push(J) : $.push(a("", u, { groupId: C[b - 1] }))), L && (g(N) ? p(N.next) && q.push(i, i) : L === i ? p(N.next) && q.push(i) : M.push(L)), [...k, s([...$, s([R(_, E, o), ...M], { id: C[b] })]), ...q];
            }, "children");
          }
          __name(x, "x");
          n.exports = { printChildren: x };
        } }), ng = ee({ "src/language-html/print/element.js"(e, n) {
          "use strict";
          re();
          var { builders: { breakParent: t, dedentToRoot: s, group: a, ifBreak: r, indentIfBreak: u, indent: i, line: l, softline: c }, utils: { replaceTextEndOfLine: y } } = qe(), h = fo(), { shouldPreserveContent: g, isScriptLikeTag: p, isVueCustomBlock: D, countParents: v, forceBreakContent: w } = Mt(), { printOpeningTagPrefix: T, printOpeningTag: F, printClosingTagSuffix: A, printClosingTag: B, needsToBorrowPrevClosingTagEndMarker: I, needsToBorrowLastChildClosingTagEndMarker: P } = rr(), { printChildren: R } = Do();
          function f(x, m, E) {
            let o = x.getValue();
            if (g(o, m))
              return [T(o, m), a(F(x, m, E)), ...y(h(o, m)), ...B(o, m), A(o, m)];
            let d = o.children.length === 1 && o.firstChild.type === "interpolation" && o.firstChild.isLeadingSpaceSensitive && !o.firstChild.hasLeadingSpaces && o.lastChild.isTrailingSpaceSensitive && !o.lastChild.hasTrailingSpaces, C = Symbol("element-attr-group-id"), _ = /* @__PURE__ */ __name(($) => a([a(F(x, m, E), { id: C }), $, B(o, m)]), "_"), b = /* @__PURE__ */ __name(($) => d ? u($, { groupId: C }) : (p(o) || D(o, m)) && o.parent.type === "root" && m.parser === "vue" && !m.vueIndentScriptAndStyle ? $ : i($), "b"), N = /* @__PURE__ */ __name(() => d ? r(c, "", { groupId: C }) : o.firstChild.hasLeadingSpaces && o.firstChild.isLeadingSpaceSensitive ? l : o.firstChild.type === "text" && o.isWhitespaceSensitive && o.isIndentationSensitive ? s(c) : c, "N"), k = /* @__PURE__ */ __name(() => (o.next ? I(o.next) : P(o.parent)) ? o.lastChild.hasTrailingSpaces && o.lastChild.isTrailingSpaceSensitive ? " " : "" : d ? r(c, "", { groupId: C }) : o.lastChild.hasTrailingSpaces && o.lastChild.isTrailingSpaceSensitive ? l : (o.lastChild.type === "comment" || o.lastChild.type === "text" && o.isWhitespaceSensitive && o.isIndentationSensitive) && new RegExp(`\\n[\\t ]{${m.tabWidth * v(x, (M) => M.parent && M.parent.type !== "root")}}$`).test(o.lastChild.value) ? "" : c, "k");
            return o.children.length === 0 ? _(o.hasDanglingSpaces && o.isDanglingSpaceSensitive ? l : "") : _([w(o) ? t : "", b([N(), R(x, m, E)]), k()]);
          }
          __name(f, "f");
          n.exports = { printElement: f };
        } }), ug = ee({ "src/language-html/printer-html.js"(e, n) {
          "use strict";
          re();
          var { builders: { fill: t, group: s, hardline: a, literalline: r }, utils: { cleanDoc: u, getDocParts: i, isConcat: l, replaceTextEndOfLine: c } } = qe(), y = Wd(), { countChars: h, unescapeQuoteEntities: g, getTextValueParts: p } = Mt(), D = Yd(), { insertPragma: v } = Qd(), { locStart: w, locEnd: T } = Qn(), F = rg(), { printClosingTagSuffix: A, printClosingTagEnd: B, printOpeningTagPrefix: I, printOpeningTagStart: P } = rr(), { printElement: R } = ng(), { printChildren: f } = Do();
          function x(m, E, o) {
            let d = m.getValue();
            switch (d.type) {
              case "front-matter":
                return c(d.raw);
              case "root":
                return E.__onHtmlRoot && E.__onHtmlRoot(d), [s(f(m, E, o)), a];
              case "element":
              case "ieConditionalComment":
                return R(m, E, o);
              case "ieConditionalStartComment":
              case "ieConditionalEndComment":
                return [P(d), B(d)];
              case "interpolation":
                return [P(d, E), ...m.map(o, "children"), B(d, E)];
              case "text": {
                if (d.parent.type === "interpolation") {
                  let _ = /\n[^\S\n]*$/, b = _.test(d.value), N = b ? d.value.replace(_, "") : d.value;
                  return [...c(N), b ? a : ""];
                }
                let C = u([I(d, E), ...p(d), A(d, E)]);
                return l(C) || C.type === "fill" ? t(i(C)) : C;
              }
              case "docType":
                return [s([P(d, E), " ", d.value.replace(/^html\b/i, "html").replace(/\s+/g, " ")]), B(d, E)];
              case "comment":
                return [I(d, E), ...c(E.originalText.slice(w(d), T(d)), r), A(d, E)];
              case "attribute": {
                if (d.value === null)
                  return d.rawName;
                let C = g(d.value), _ = h(C, "'"), b = h(C, '"'), N = _ < b ? "'" : '"';
                return [d.rawName, "=", N, ...c(N === '"' ? C.replace(/"/g, "&quot;") : C.replace(/'/g, "&apos;")), N];
              }
              default:
                throw new Error(`Unexpected node type ${d.type}`);
            }
          }
          __name(x, "x");
          n.exports = { preprocess: D, print: x, insertPragma: v, massageAstNode: y, embed: F };
        } }), sg = ee({ "src/language-html/options.js"(e, n) {
          "use strict";
          re();
          var t = qt(), s = "HTML";
          n.exports = { bracketSameLine: t.bracketSameLine, htmlWhitespaceSensitivity: { since: "1.15.0", category: s, type: "choice", default: "css", description: "How to handle whitespaces in HTML.", choices: [{ value: "css", description: "Respect the default value of CSS display property." }, { value: "strict", description: "Whitespaces are considered sensitive." }, { value: "ignore", description: "Whitespaces are considered insensitive." }] }, singleAttributePerLine: t.singleAttributePerLine, vueIndentScriptAndStyle: { since: "1.19.0", category: s, type: "boolean", default: false, description: "Indent script and style tags in Vue files." } };
        } }), ig = ee({ "src/language-html/parsers.js"() {
          re();
        } }), Tn = ee({ "node_modules/linguist-languages/data/HTML.json"(e, n) {
          n.exports = { name: "HTML", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [".html", ".hta", ".htm", ".html.hl", ".inc", ".xht", ".xhtml"], languageId: 146 };
        } }), ag = ee({ "node_modules/linguist-languages/data/Vue.json"(e, n) {
          n.exports = { name: "Vue", type: "markup", color: "#41b883", extensions: [".vue"], tmScope: "text.html.vue", aceMode: "html", languageId: 391 };
        } }), og = ee({ "src/language-html/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = ug(), a = sg(), r = ig(), u = [t(Tn(), () => ({ name: "Angular", since: "1.15.0", parsers: ["angular"], vscodeLanguageIds: ["html"], extensions: [".component.html"], filenames: [] })), t(Tn(), (l) => ({ since: "1.15.0", parsers: ["html"], vscodeLanguageIds: ["html"], extensions: [...l.extensions, ".mjml"] })), t(Tn(), () => ({ name: "Lightning Web Components", since: "1.17.0", parsers: ["lwc"], vscodeLanguageIds: ["html"], extensions: [], filenames: [] })), t(ag(), () => ({ since: "1.10.0", parsers: ["vue"], vscodeLanguageIds: ["vue"] }))], i = { html: s };
          n.exports = { languages: u, printers: i, options: a, parsers: r };
        } }), lg = ee({ "src/language-yaml/pragma.js"(e, n) {
          "use strict";
          re();
          function t(r) {
            return /^\s*@(?:prettier|format)\s*$/.test(r);
          }
          __name(t, "t");
          function s(r) {
            return /^\s*#[^\S\n]*@(?:prettier|format)\s*?(?:\n|$)/.test(r);
          }
          __name(s, "s");
          function a(r) {
            return `# @format

${r}`;
          }
          __name(a, "a");
          n.exports = { isPragma: t, hasPragma: s, insertPragma: a };
        } }), cg = ee({ "src/language-yaml/loc.js"(e, n) {
          "use strict";
          re();
          function t(a) {
            return a.position.start.offset;
          }
          __name(t, "t");
          function s(a) {
            return a.position.end.offset;
          }
          __name(s, "s");
          n.exports = { locStart: t, locEnd: s };
        } }), pg = ee({ "src/language-yaml/embed.js"(e, n) {
          "use strict";
          re();
          function t(s, a, r, u) {
            if (s.getValue().type === "root" && u.filepath && /(?:[/\\]|^)\.(?:prettier|stylelint|lintstaged)rc$/.test(u.filepath))
              return r(u.originalText, Object.assign(Object.assign({}, u), {}, { parser: "json" }));
          }
          __name(t, "t");
          n.exports = t;
        } }), Rt = ee({ "src/language-yaml/utils.js"(e, n) {
          "use strict";
          re();
          var { getLast: t, isNonEmptyArray: s } = Ge();
          function a(f, x) {
            let m = 0, E = f.stack.length - 1;
            for (let o = 0; o < E; o++) {
              let d = f.stack[o];
              r(d) && x(d) && m++;
            }
            return m;
          }
          __name(a, "a");
          function r(f, x) {
            return f && typeof f.type == "string" && (!x || x.includes(f.type));
          }
          __name(r, "r");
          function u(f, x, m) {
            return x("children" in f ? Object.assign(Object.assign({}, f), {}, { children: f.children.map((E) => u(E, x, f)) }) : f, m);
          }
          __name(u, "u");
          function i(f, x, m) {
            Object.defineProperty(f, x, { get: m, enumerable: false });
          }
          __name(i, "i");
          function l(f, x) {
            let m = 0, E = x.length;
            for (let o = f.position.end.offset - 1; o < E; o++) {
              let d = x[o];
              if (d === `
` && m++, m === 1 && /\S/.test(d))
                return false;
              if (m === 2)
                return true;
            }
            return false;
          }
          __name(l, "l");
          function c(f) {
            switch (f.getValue().type) {
              case "tag":
              case "anchor":
              case "comment":
                return false;
            }
            let m = f.stack.length;
            for (let E = 1; E < m; E++) {
              let o = f.stack[E], d = f.stack[E - 1];
              if (Array.isArray(d) && typeof o == "number" && o !== d.length - 1)
                return false;
            }
            return true;
          }
          __name(c, "c");
          function y(f) {
            return s(f.children) ? y(t(f.children)) : f;
          }
          __name(y, "y");
          function h(f) {
            return f.value.trim() === "prettier-ignore";
          }
          __name(h, "h");
          function g(f) {
            let x = f.getValue();
            if (x.type === "documentBody") {
              let m = f.getParentNode();
              return A(m.head) && h(t(m.head.endComments));
            }
            return v(x) && h(t(x.leadingComments));
          }
          __name(g, "g");
          function p(f) {
            return !s(f.children) && !D(f);
          }
          __name(p, "p");
          function D(f) {
            return v(f) || w(f) || T(f) || F(f) || A(f);
          }
          __name(D, "D");
          function v(f) {
            return s(f == null ? void 0 : f.leadingComments);
          }
          __name(v, "v");
          function w(f) {
            return s(f == null ? void 0 : f.middleComments);
          }
          __name(w, "w");
          function T(f) {
            return f == null ? void 0 : f.indicatorComment;
          }
          __name(T, "T");
          function F(f) {
            return f == null ? void 0 : f.trailingComment;
          }
          __name(F, "F");
          function A(f) {
            return s(f == null ? void 0 : f.endComments);
          }
          __name(A, "A");
          function B(f) {
            let x = [], m;
            for (let E of f.split(/( +)/))
              E !== " " ? m === " " ? x.push(E) : x.push((x.pop() || "") + E) : m === void 0 && x.unshift(""), m = E;
            return m === " " && x.push((x.pop() || "") + " "), x[0] === "" && (x.shift(), x.unshift(" " + (x.shift() || ""))), x;
          }
          __name(B, "B");
          function I(f, x, m) {
            let E = x.split(`
`).map((o, d, C) => d === 0 && d === C.length - 1 ? o : d !== 0 && d !== C.length - 1 ? o.trim() : d === 0 ? o.trimEnd() : o.trimStart());
            return m.proseWrap === "preserve" ? E.map((o) => o.length === 0 ? [] : [o]) : E.map((o) => o.length === 0 ? [] : B(o)).reduce((o, d, C) => C !== 0 && E[C - 1].length > 0 && d.length > 0 && !(f === "quoteDouble" && t(t(o)).endsWith("\\")) ? [...o.slice(0, -1), [...t(o), ...d]] : [...o, d], []).map((o) => m.proseWrap === "never" ? [o.join(" ")] : o);
          }
          __name(I, "I");
          function P(f, x) {
            let { parentIndent: m, isLastDescendant: E, options: o } = x, d = f.position.start.line === f.position.end.line ? "" : o.originalText.slice(f.position.start.offset, f.position.end.offset).match(/^[^\n]*\n(.*)$/s)[1], C;
            if (f.indent === null) {
              let N = d.match(/^(?<leadingSpace> *)[^\n\r ]/m);
              C = N ? N.groups.leadingSpace.length : Number.POSITIVE_INFINITY;
            } else
              C = f.indent - 1 + m;
            let _ = d.split(`
`).map((N) => N.slice(C));
            if (o.proseWrap === "preserve" || f.type === "blockLiteral")
              return b(_.map((N) => N.length === 0 ? [] : [N]));
            return b(_.map((N) => N.length === 0 ? [] : B(N)).reduce((N, k, $) => $ !== 0 && _[$ - 1].length > 0 && k.length > 0 && !/^\s/.test(k[0]) && !/^\s|\s$/.test(t(N)) ? [...N.slice(0, -1), [...t(N), ...k]] : [...N, k], []).map((N) => N.reduce((k, $) => k.length > 0 && /\s$/.test(t(k)) ? [...k.slice(0, -1), t(k) + " " + $] : [...k, $], [])).map((N) => o.proseWrap === "never" ? [N.join(" ")] : N));
            function b(N) {
              if (f.chomping === "keep")
                return t(N).length === 0 ? N.slice(0, -1) : N;
              let k = 0;
              for (let $ = N.length - 1; $ >= 0 && N[$].length === 0; $--)
                k++;
              return k === 0 ? N : k >= 2 && !E ? N.slice(0, -(k - 1)) : N.slice(0, -k);
            }
            __name(b, "b");
          }
          __name(P, "P");
          function R(f) {
            if (!f)
              return true;
            switch (f.type) {
              case "plain":
              case "quoteDouble":
              case "quoteSingle":
              case "alias":
              case "flowMapping":
              case "flowSequence":
                return true;
              default:
                return false;
            }
          }
          __name(R, "R");
          n.exports = { getLast: t, getAncestorCount: a, isNode: r, isEmptyNode: p, isInlineNode: R, mapNode: u, defineShortcut: i, isNextLineEmpty: l, isLastDescendantNode: c, getBlockValueLineContents: P, getFlowScalarLineContents: I, getLastDescendantNode: y, hasPrettierIgnore: g, hasLeadingComments: v, hasMiddleComments: w, hasIndicatorComment: T, hasTrailingComment: F, hasEndComments: A };
        } }), fg = ee({ "src/language-yaml/print-preprocess.js"(e, n) {
          "use strict";
          re();
          var { defineShortcut: t, mapNode: s } = Rt();
          function a(u) {
            return s(u, r);
          }
          __name(a, "a");
          function r(u) {
            switch (u.type) {
              case "document":
                t(u, "head", () => u.children[0]), t(u, "body", () => u.children[1]);
                break;
              case "documentBody":
              case "sequenceItem":
              case "flowSequenceItem":
              case "mappingKey":
              case "mappingValue":
                t(u, "content", () => u.children[0]);
                break;
              case "mappingItem":
              case "flowMappingItem":
                t(u, "key", () => u.children[0]), t(u, "value", () => u.children[1]);
                break;
            }
            return u;
          }
          __name(r, "r");
          n.exports = a;
        } }), qr = ee({ "src/language-yaml/print/misc.js"(e, n) {
          "use strict";
          re();
          var { builders: { softline: t, align: s } } = qe(), { hasEndComments: a, isNextLineEmpty: r, isNode: u } = Rt(), i = /* @__PURE__ */ new WeakMap();
          function l(h, g) {
            let p = h.getValue(), D = h.stack[0], v;
            return i.has(D) ? v = i.get(D) : (v = /* @__PURE__ */ new Set(), i.set(D, v)), !v.has(p.position.end.line) && (v.add(p.position.end.line), r(p, g) && !c(h.getParentNode())) ? t : "";
          }
          __name(l, "l");
          function c(h) {
            return a(h) && !u(h, ["documentHead", "documentBody", "flowMapping", "flowSequence"]);
          }
          __name(c, "c");
          function y(h, g) {
            return s(" ".repeat(h), g);
          }
          __name(y, "y");
          n.exports = { alignWithSpaces: y, shouldPrintEndComments: c, printNextEmptyLine: l };
        } }), Dg = ee({ "src/language-yaml/print/flow-mapping-sequence.js"(e, n) {
          "use strict";
          re();
          var { builders: { ifBreak: t, line: s, softline: a, hardline: r, join: u } } = qe(), { isEmptyNode: i, getLast: l, hasEndComments: c } = Rt(), { printNextEmptyLine: y, alignWithSpaces: h } = qr();
          function g(D, v, w) {
            let T = D.getValue(), F = T.type === "flowMapping", A = F ? "{" : "[", B = F ? "}" : "]", I = a;
            F && T.children.length > 0 && w.bracketSpacing && (I = s);
            let P = l(T.children), R = P && P.type === "flowMappingItem" && i(P.key) && i(P.value);
            return [A, h(w.tabWidth, [I, p(D, v, w), w.trailingComma === "none" ? "" : t(","), c(T) ? [r, u(r, D.map(v, "endComments"))] : ""]), R ? "" : I, B];
          }
          __name(g, "g");
          function p(D, v, w) {
            let T = D.getValue();
            return D.map((A, B) => [v(), B === T.children.length - 1 ? "" : [",", s, T.children[B].position.start.line !== T.children[B + 1].position.start.line ? y(A, w.originalText) : ""]], "children");
          }
          __name(p, "p");
          n.exports = { printFlowMapping: g, printFlowSequence: g };
        } }), mg = ee({ "src/language-yaml/print/mapping-item.js"(e, n) {
          "use strict";
          re();
          var { builders: { conditionalGroup: t, group: s, hardline: a, ifBreak: r, join: u, line: i } } = qe(), { hasLeadingComments: l, hasMiddleComments: c, hasTrailingComment: y, hasEndComments: h, isNode: g, isEmptyNode: p, isInlineNode: D } = Rt(), { alignWithSpaces: v } = qr();
          function w(B, I, P, R, f) {
            let { key: x, value: m } = B, E = p(x), o = p(m);
            if (E && o)
              return ": ";
            let d = R("key"), C = F(B) ? " " : "";
            if (o)
              return B.type === "flowMappingItem" && I.type === "flowMapping" ? d : B.type === "mappingItem" && T(x.content, f) && !y(x.content) && (!I.tag || I.tag.value !== "tag:yaml.org,2002:set") ? [d, C, ":"] : ["? ", v(2, d)];
            let _ = R("value");
            if (E)
              return [": ", v(2, _)];
            if (l(m) || !D(x.content))
              return ["? ", v(2, d), a, u("", P.map(R, "value", "leadingComments").map((q) => [q, a])), ": ", v(2, _)];
            if (A(x.content) && !l(x.content) && !c(x.content) && !y(x.content) && !h(x) && !l(m.content) && !c(m.content) && !h(m) && T(m.content, f))
              return [d, C, ": ", _];
            let b = Symbol("mappingKey"), N = s([r("? "), s(v(2, d), { id: b })]), k = [a, ": ", v(2, _)], $ = [C, ":"];
            l(m.content) || h(m) && m.content && !g(m.content, ["mapping", "sequence"]) || I.type === "mapping" && y(x.content) && D(m.content) || g(m.content, ["mapping", "sequence"]) && m.content.tag === null && m.content.anchor === null ? $.push(a) : m.content && $.push(i), $.push(_);
            let M = v(f.tabWidth, $);
            return T(x.content, f) && !l(x.content) && !c(x.content) && !h(x) ? t([[d, M]]) : t([[N, r(k, M, { groupId: b })]]);
          }
          __name(w, "w");
          function T(B, I) {
            if (!B)
              return true;
            switch (B.type) {
              case "plain":
              case "quoteSingle":
              case "quoteDouble":
                break;
              case "alias":
                return true;
              default:
                return false;
            }
            if (I.proseWrap === "preserve")
              return B.position.start.line === B.position.end.line;
            if (/\\$/m.test(I.originalText.slice(B.position.start.offset, B.position.end.offset)))
              return false;
            switch (I.proseWrap) {
              case "never":
                return !B.value.includes(`
`);
              case "always":
                return !/[\n ]/.test(B.value);
              default:
                return false;
            }
          }
          __name(T, "T");
          function F(B) {
            return B.key.content && B.key.content.type === "alias";
          }
          __name(F, "F");
          function A(B) {
            if (!B)
              return true;
            switch (B.type) {
              case "plain":
              case "quoteDouble":
              case "quoteSingle":
                return B.position.start.line === B.position.end.line;
              case "alias":
                return true;
              default:
                return false;
            }
          }
          __name(A, "A");
          n.exports = w;
        } }), dg = ee({ "src/language-yaml/print/block.js"(e, n) {
          "use strict";
          re();
          var { builders: { dedent: t, dedentToRoot: s, fill: a, hardline: r, join: u, line: i, literalline: l, markAsRoot: c }, utils: { getDocParts: y } } = qe(), { getAncestorCount: h, getBlockValueLineContents: g, hasIndicatorComment: p, isLastDescendantNode: D, isNode: v } = Rt(), { alignWithSpaces: w } = qr();
          function T(F, A, B) {
            let I = F.getValue(), P = h(F, (E) => v(E, ["sequence", "mapping"])), R = D(F), f = [I.type === "blockFolded" ? ">" : "|"];
            I.indent !== null && f.push(I.indent.toString()), I.chomping !== "clip" && f.push(I.chomping === "keep" ? "+" : "-"), p(I) && f.push(" ", A("indicatorComment"));
            let x = g(I, { parentIndent: P, isLastDescendant: R, options: B }), m = [];
            for (let [E, o] of x.entries())
              E === 0 && m.push(r), m.push(a(y(u(i, o)))), E !== x.length - 1 ? m.push(o.length === 0 ? r : c(l)) : I.chomping === "keep" && R && m.push(s(o.length === 0 ? r : l));
            return I.indent === null ? f.push(t(w(B.tabWidth, m))) : f.push(s(w(I.indent - 1 + P, m))), f;
          }
          __name(T, "T");
          n.exports = T;
        } }), gg = ee({ "src/language-yaml/printer-yaml.js"(e, n) {
          "use strict";
          re();
          var { builders: { breakParent: t, fill: s, group: a, hardline: r, join: u, line: i, lineSuffix: l, literalline: c }, utils: { getDocParts: y, replaceTextEndOfLine: h } } = qe(), { isPreviousLineEmpty: g } = Ge(), { insertPragma: p, isPragma: D } = lg(), { locStart: v } = cg(), w = pg(), { getFlowScalarLineContents: T, getLastDescendantNode: F, hasLeadingComments: A, hasMiddleComments: B, hasTrailingComment: I, hasEndComments: P, hasPrettierIgnore: R, isLastDescendantNode: f, isNode: x, isInlineNode: m } = Rt(), E = fg(), { alignWithSpaces: o, printNextEmptyLine: d, shouldPrintEndComments: C } = qr(), { printFlowMapping: _, printFlowSequence: b } = Dg(), N = mg(), k = dg();
          function $(O, K, se) {
            let Q = O.getValue(), le = [];
            Q.type !== "mappingValue" && A(Q) && le.push([u(r, O.map(se, "leadingComments")), r]);
            let { tag: W, anchor: X } = Q;
            W && le.push(se("tag")), W && X && le.push(" "), X && le.push(se("anchor"));
            let oe = "";
            x(Q, ["mapping", "sequence", "comment", "directive", "mappingItem", "sequenceItem"]) && !f(O) && (oe = d(O, K.originalText)), (W || X) && (x(Q, ["sequence", "mapping"]) && !B(Q) ? le.push(r) : le.push(" ")), B(Q) && le.push([Q.middleComments.length === 1 ? "" : r, u(r, O.map(se, "middleComments")), r]);
            let ae = O.getParentNode();
            return R(O) ? le.push(h(K.originalText.slice(Q.position.start.offset, Q.position.end.offset).trimEnd(), c)) : le.push(a(M(Q, ae, O, K, se))), I(Q) && !x(Q, ["document", "documentHead"]) && le.push(l([Q.type === "mappingValue" && !Q.content ? "" : " ", ae.type === "mappingKey" && O.getParentNode(2).type === "mapping" && m(Q) ? "" : t, se("trailingComment")])), C(Q) && le.push(o(Q.type === "sequenceItem" ? 2 : 0, [r, u(r, O.map((Ae) => [g(K.originalText, Ae.getValue(), v) ? r : "", se()], "endComments"))])), le.push(oe), le;
          }
          __name($, "$");
          function M(O, K, se, Q, le) {
            switch (O.type) {
              case "root": {
                let { children: W } = O, X = [];
                se.each((ae, Ae) => {
                  let z = W[Ae], H = W[Ae + 1];
                  Ae !== 0 && X.push(r), X.push(le()), J(z, H) ? (X.push(r, "..."), I(z) && X.push(" ", le("trailingComment"))) : H && !I(H.head) && X.push(r, "---");
                }, "children");
                let oe = F(O);
                return (!x(oe, ["blockLiteral", "blockFolded"]) || oe.chomping !== "keep") && X.push(r), X;
              }
              case "document": {
                let W = K.children[se.getName() + 1], X = [];
                return L(O, W, K, Q) === "head" && ((O.head.children.length > 0 || O.head.endComments.length > 0) && X.push(le("head")), I(O.head) ? X.push(["---", " ", le(["head", "trailingComment"])]) : X.push("---")), q(O) && X.push(le("body")), u(r, X);
              }
              case "documentHead":
                return u(r, [...se.map(le, "children"), ...se.map(le, "endComments")]);
              case "documentBody": {
                let { children: W, endComments: X } = O, oe = "";
                if (W.length > 0 && X.length > 0) {
                  let ae = F(O);
                  x(ae, ["blockFolded", "blockLiteral"]) ? ae.chomping !== "keep" && (oe = [r, r]) : oe = r;
                }
                return [u(r, se.map(le, "children")), oe, u(r, se.map(le, "endComments"))];
              }
              case "directive":
                return ["%", u(" ", [O.name, ...O.parameters])];
              case "comment":
                return ["#", O.value];
              case "alias":
                return ["*", O.value];
              case "tag":
                return Q.originalText.slice(O.position.start.offset, O.position.end.offset);
              case "anchor":
                return ["&", O.value];
              case "plain":
                return Y(O.type, Q.originalText.slice(O.position.start.offset, O.position.end.offset), Q);
              case "quoteDouble":
              case "quoteSingle": {
                let W = "'", X = '"', oe = Q.originalText.slice(O.position.start.offset + 1, O.position.end.offset - 1);
                if (O.type === "quoteSingle" && oe.includes("\\") || O.type === "quoteDouble" && /\\[^"]/.test(oe)) {
                  let Ae = O.type === "quoteDouble" ? X : W;
                  return [Ae, Y(O.type, oe, Q), Ae];
                }
                if (oe.includes(X))
                  return [W, Y(O.type, O.type === "quoteDouble" ? oe.replace(/\\"/g, X).replace(/'/g, W.repeat(2)) : oe, Q), W];
                if (oe.includes(W))
                  return [X, Y(O.type, O.type === "quoteSingle" ? oe.replace(/''/g, W) : oe, Q), X];
                let ae = Q.singleQuote ? W : X;
                return [ae, Y(O.type, oe, Q), ae];
              }
              case "blockFolded":
              case "blockLiteral":
                return k(se, le, Q);
              case "mapping":
              case "sequence":
                return u(r, se.map(le, "children"));
              case "sequenceItem":
                return ["- ", o(2, O.content ? le("content") : "")];
              case "mappingKey":
              case "mappingValue":
                return O.content ? le("content") : "";
              case "mappingItem":
              case "flowMappingItem":
                return N(O, K, se, le, Q);
              case "flowMapping":
                return _(se, le, Q);
              case "flowSequence":
                return b(se, le, Q);
              case "flowSequenceItem":
                return le("content");
              default:
                throw new Error(`Unexpected node type ${O.type}`);
            }
          }
          __name(M, "M");
          function q(O) {
            return O.body.children.length > 0 || P(O.body);
          }
          __name(q, "q");
          function J(O, K) {
            return I(O) || K && (K.head.children.length > 0 || P(K.head));
          }
          __name(J, "J");
          function L(O, K, se, Q) {
            return se.children[0] === O && /---(?:\s|$)/.test(Q.originalText.slice(v(O), v(O) + 4)) || O.head.children.length > 0 || P(O.head) || I(O.head) ? "head" : J(O, K) ? false : K ? "root" : false;
          }
          __name(L, "L");
          function Y(O, K, se) {
            let Q = T(O, K, se);
            return u(r, Q.map((le) => s(y(u(i, le)))));
          }
          __name(Y, "Y");
          function V(O, K) {
            if (x(K))
              switch (delete K.position, K.type) {
                case "comment":
                  if (D(K.value))
                    return null;
                  break;
                case "quoteDouble":
                case "quoteSingle":
                  K.type = "quote";
                  break;
              }
          }
          __name(V, "V");
          n.exports = { preprocess: E, embed: w, print: $, massageAstNode: V, insertPragma: p };
        } }), yg = ee({ "src/language-yaml/options.js"(e, n) {
          "use strict";
          re();
          var t = qt();
          n.exports = { bracketSpacing: t.bracketSpacing, singleQuote: t.singleQuote, proseWrap: t.proseWrap };
        } }), hg = ee({ "src/language-yaml/parsers.js"() {
          re();
        } }), vg = ee({ "node_modules/linguist-languages/data/YAML.json"(e, n) {
          n.exports = { name: "YAML", type: "data", color: "#cb171e", tmScope: "source.yaml", aliases: ["yml"], extensions: [".yml", ".mir", ".reek", ".rviz", ".sublime-syntax", ".syntax", ".yaml", ".yaml-tmlanguage", ".yaml.sed", ".yml.mysql"], filenames: [".clang-format", ".clang-tidy", ".gemrc", "CITATION.cff", "glide.lock", "yarn.lock"], aceMode: "yaml", codemirrorMode: "yaml", codemirrorMimeType: "text/x-yaml", languageId: 407 };
        } }), Cg = ee({ "src/language-yaml/index.js"(e, n) {
          "use strict";
          re();
          var t = wt(), s = gg(), a = yg(), r = hg(), u = [t(vg(), (i) => ({ since: "1.14.0", parsers: ["yaml"], vscodeLanguageIds: ["yaml", "ansible", "home-assistant"], filenames: [...i.filenames.filter((l) => l !== "yarn.lock"), ".prettierrc", ".stylelintrc", ".lintstagedrc"] }))];
          n.exports = { languages: u, printers: { yaml: s }, options: a, parsers: r };
        } }), Eg = ee({ "src/languages.js"(e, n) {
          "use strict";
          re(), n.exports = [td(), vd(), Td(), kd(), Vd(), og(), Cg()];
        } });
        re();
        var { version: Fg } = fa(), kt = vm(), { getSupportInfo: Ag } = Rn(), Sg = Cm(), xg = Eg(), bg = qe();
        function Bt(e) {
          let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
          return function() {
            for (var t = arguments.length, s = new Array(t), a = 0; a < t; a++)
              s[a] = arguments[a];
            let r = s[n] || {}, u = r.plugins || [];
            return s[n] = Object.assign(Object.assign({}, r), {}, { plugins: [...xg, ...Array.isArray(u) ? u : Object.values(u)] }), e(...s);
          };
        }
        __name(Bt, "Bt");
        var Bn = Bt(kt.formatWithCursor);
        mo.exports = { formatWithCursor: Bn, format(e, n) {
          return Bn(e, n).formatted;
        }, check(e, n) {
          let { formatted: t } = Bn(e, n);
          return t === e;
        }, doc: bg, getSupportInfo: Bt(Ag, 0), version: Fg, util: Sg, __debug: { parse: Bt(kt.parse), formatAST: Bt(kt.formatAST), formatDoc: Bt(kt.formatDoc), printToDoc: Bt(kt.printToDoc), printDocToString: Bt(kt.printDocToString) } };
      });
      return Tg();
    });
  }
});

// js/Editor.tsx
init_define_process();
var import_react2 = __toESM(require_emotion_react_cjs(), 1);
var import_react3 = __toESM(require_react(), 1);

// ../../.yarn/__virtual__/react-rnd-virtual-1610495181/0/global/cache/react-rnd-npm-10.3.7-cb1aaea902-9.zip/node_modules/react-rnd/lib/index.js
init_define_process();
var import_react = __toESM(require_react());
var import_react_draggable = __toESM(require_cjs());

// ../../.yarn/__virtual__/re-resizable-virtual-3b39e27e89/0/global/cache/re-resizable-npm-6.9.6-ea5c7065a7-9.zip/node_modules/re-resizable/lib/index.js
init_define_process();
var React2 = __toESM(require_react());

// ../../.yarn/__virtual__/re-resizable-virtual-3b39e27e89/0/global/cache/re-resizable-npm-6.9.6-ea5c7065a7-9.zip/node_modules/re-resizable/lib/resizer.js
init_define_process();
var React = __toESM(require_react());
var __extends = function() {
  var extendStatics2 = /* @__PURE__ */ __name(function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics2(d, b);
  }, "extendStatics");
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    __name(__, "__");
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var styles = {
  top: {
    width: "100%",
    height: "10px",
    top: "-5px",
    left: "0px",
    cursor: "row-resize"
  },
  right: {
    width: "10px",
    height: "100%",
    top: "0px",
    right: "-5px",
    cursor: "col-resize"
  },
  bottom: {
    width: "100%",
    height: "10px",
    bottom: "-5px",
    left: "0px",
    cursor: "row-resize"
  },
  left: {
    width: "10px",
    height: "100%",
    top: "0px",
    left: "-5px",
    cursor: "col-resize"
  },
  topRight: {
    width: "20px",
    height: "20px",
    position: "absolute",
    right: "-10px",
    top: "-10px",
    cursor: "ne-resize"
  },
  bottomRight: {
    width: "20px",
    height: "20px",
    position: "absolute",
    right: "-10px",
    bottom: "-10px",
    cursor: "se-resize"
  },
  bottomLeft: {
    width: "20px",
    height: "20px",
    position: "absolute",
    left: "-10px",
    bottom: "-10px",
    cursor: "sw-resize"
  },
  topLeft: {
    width: "20px",
    height: "20px",
    position: "absolute",
    left: "-10px",
    top: "-10px",
    cursor: "nw-resize"
  }
};
var Resizer = function(_super) {
  __extends(Resizer2, _super);
  function Resizer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.onMouseDown = function(e) {
      _this.props.onResizeStart(e, _this.props.direction);
    };
    _this.onTouchStart = function(e) {
      _this.props.onResizeStart(e, _this.props.direction);
    };
    return _this;
  }
  __name(Resizer2, "Resizer");
  Resizer2.prototype.render = function() {
    return React.createElement("div", { className: this.props.className || "", style: __assign(__assign({ position: "absolute", userSelect: "none" }, styles[this.props.direction]), this.props.replaceStyles || {}), onMouseDown: this.onMouseDown, onTouchStart: this.onTouchStart }, this.props.children);
  };
  return Resizer2;
}(React.PureComponent);

// ../../.yarn/__virtual__/re-resizable-virtual-3b39e27e89/0/global/cache/re-resizable-npm-6.9.6-ea5c7065a7-9.zip/node_modules/re-resizable/lib/index.js
var import_fast_memoize = __toESM(require_src());
var __extends2 = function() {
  var extendStatics2 = /* @__PURE__ */ __name(function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics2(d, b);
  }, "extendStatics");
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    __name(__, "__");
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var DEFAULT_SIZE = {
  width: "auto",
  height: "auto"
};
var clamp = (0, import_fast_memoize.default)(function(n, min, max) {
  return Math.max(Math.min(n, max), min);
});
var snap = (0, import_fast_memoize.default)(function(n, size) {
  return Math.round(n / size) * size;
});
var hasDirection = (0, import_fast_memoize.default)(function(dir, target) {
  return new RegExp(dir, "i").test(target);
});
var isTouchEvent = /* @__PURE__ */ __name(function(event) {
  return Boolean(event.touches && event.touches.length);
}, "isTouchEvent");
var isMouseEvent = /* @__PURE__ */ __name(function(event) {
  return Boolean((event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0));
}, "isMouseEvent");
var findClosestSnap = (0, import_fast_memoize.default)(function(n, snapArray, snapGap) {
  if (snapGap === void 0) {
    snapGap = 0;
  }
  var closestGapIndex = snapArray.reduce(function(prev, curr, index) {
    return Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev;
  }, 0);
  var gap = Math.abs(snapArray[closestGapIndex] - n);
  return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
});
var endsWith = (0, import_fast_memoize.default)(function(str, searchStr) {
  return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
});
var getStringSize = (0, import_fast_memoize.default)(function(n) {
  n = n.toString();
  if (n === "auto") {
    return n;
  }
  if (endsWith(n, "px")) {
    return n;
  }
  if (endsWith(n, "%")) {
    return n;
  }
  if (endsWith(n, "vh")) {
    return n;
  }
  if (endsWith(n, "vw")) {
    return n;
  }
  if (endsWith(n, "vmax")) {
    return n;
  }
  if (endsWith(n, "vmin")) {
    return n;
  }
  return n + "px";
});
var getPixelSize = /* @__PURE__ */ __name(function(size, parentSize, innerWidth, innerHeight) {
  if (size && typeof size === "string") {
    if (endsWith(size, "px")) {
      return Number(size.replace("px", ""));
    }
    if (endsWith(size, "%")) {
      var ratio = Number(size.replace("%", "")) / 100;
      return parentSize * ratio;
    }
    if (endsWith(size, "vw")) {
      var ratio = Number(size.replace("vw", "")) / 100;
      return innerWidth * ratio;
    }
    if (endsWith(size, "vh")) {
      var ratio = Number(size.replace("vh", "")) / 100;
      return innerHeight * ratio;
    }
  }
  return size;
}, "getPixelSize");
var calculateNewMax = (0, import_fast_memoize.default)(function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
  maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
  maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
  minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
  minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
  return {
    maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
    maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
    minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
    minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
  };
});
var definedProps = [
  "as",
  "style",
  "className",
  "grid",
  "snap",
  "bounds",
  "boundsByDirection",
  "size",
  "defaultSize",
  "minWidth",
  "minHeight",
  "maxWidth",
  "maxHeight",
  "lockAspectRatio",
  "lockAspectRatioExtraWidth",
  "lockAspectRatioExtraHeight",
  "enable",
  "handleStyles",
  "handleClasses",
  "handleWrapperStyle",
  "handleWrapperClass",
  "children",
  "onResizeStart",
  "onResize",
  "onResizeStop",
  "handleComponent",
  "scale",
  "resizeRatio",
  "snapGap"
];
var baseClassName = "__resizable_base__";
var Resizable = function(_super) {
  __extends2(Resizable2, _super);
  function Resizable2(props) {
    var _this = _super.call(this, props) || this;
    _this.ratio = 1;
    _this.resizable = null;
    _this.parentLeft = 0;
    _this.parentTop = 0;
    _this.resizableLeft = 0;
    _this.resizableRight = 0;
    _this.resizableTop = 0;
    _this.resizableBottom = 0;
    _this.targetLeft = 0;
    _this.targetTop = 0;
    _this.appendBase = function() {
      if (!_this.resizable || !_this.window) {
        return null;
      }
      var parent = _this.parentNode;
      if (!parent) {
        return null;
      }
      var element = _this.window.document.createElement("div");
      element.style.width = "100%";
      element.style.height = "100%";
      element.style.position = "absolute";
      element.style.transform = "scale(0, 0)";
      element.style.left = "0";
      element.style.flex = "0 0 100%";
      if (element.classList) {
        element.classList.add(baseClassName);
      } else {
        element.className += baseClassName;
      }
      parent.appendChild(element);
      return element;
    };
    _this.removeBase = function(base) {
      var parent = _this.parentNode;
      if (!parent) {
        return;
      }
      parent.removeChild(base);
    };
    _this.ref = function(c) {
      if (c) {
        _this.resizable = c;
      }
    };
    _this.state = {
      isResizing: false,
      width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
      height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
      direction: "right",
      original: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      backgroundStyle: {
        height: "100%",
        width: "100%",
        backgroundColor: "rgba(0,0,0,0)",
        cursor: "auto",
        opacity: 0,
        position: "fixed",
        zIndex: 9999,
        top: "0",
        left: "0",
        bottom: "0",
        right: "0"
      },
      flexBasis: void 0
    };
    _this.onResizeStart = _this.onResizeStart.bind(_this);
    _this.onMouseMove = _this.onMouseMove.bind(_this);
    _this.onMouseUp = _this.onMouseUp.bind(_this);
    return _this;
  }
  __name(Resizable2, "Resizable");
  Object.defineProperty(Resizable2.prototype, "parentNode", {
    get: function() {
      if (!this.resizable) {
        return null;
      }
      return this.resizable.parentNode;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Resizable2.prototype, "window", {
    get: function() {
      if (!this.resizable) {
        return null;
      }
      if (!this.resizable.ownerDocument) {
        return null;
      }
      return this.resizable.ownerDocument.defaultView;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Resizable2.prototype, "propsSize", {
    get: function() {
      return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Resizable2.prototype, "size", {
    get: function() {
      var width = 0;
      var height = 0;
      if (this.resizable && this.window) {
        var orgWidth = this.resizable.offsetWidth;
        var orgHeight = this.resizable.offsetHeight;
        var orgPosition = this.resizable.style.position;
        if (orgPosition !== "relative") {
          this.resizable.style.position = "relative";
        }
        width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
        height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
        this.resizable.style.position = orgPosition;
      }
      return { width, height };
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Resizable2.prototype, "sizeStyle", {
    get: function() {
      var _this = this;
      var size = this.props.size;
      var getSize = /* @__PURE__ */ __name(function(key) {
        if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
          return "auto";
        }
        if (_this.propsSize && _this.propsSize[key] && endsWith(_this.propsSize[key].toString(), "%")) {
          if (endsWith(_this.state[key].toString(), "%")) {
            return _this.state[key].toString();
          }
          var parentSize = _this.getParentSize();
          var value = Number(_this.state[key].toString().replace("px", ""));
          var percent = value / parentSize[key] * 100;
          return percent + "%";
        }
        return getStringSize(_this.state[key]);
      }, "getSize");
      var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize(size.width) : getSize("width");
      var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize(size.height) : getSize("height");
      return { width, height };
    },
    enumerable: false,
    configurable: true
  });
  Resizable2.prototype.getParentSize = function() {
    if (!this.parentNode) {
      if (!this.window) {
        return { width: 0, height: 0 };
      }
      return { width: this.window.innerWidth, height: this.window.innerHeight };
    }
    var base = this.appendBase();
    if (!base) {
      return { width: 0, height: 0 };
    }
    var wrapChanged = false;
    var wrap = this.parentNode.style.flexWrap;
    if (wrap !== "wrap") {
      wrapChanged = true;
      this.parentNode.style.flexWrap = "wrap";
    }
    base.style.position = "relative";
    base.style.minWidth = "100%";
    base.style.minHeight = "100%";
    var size = {
      width: base.offsetWidth,
      height: base.offsetHeight
    };
    if (wrapChanged) {
      this.parentNode.style.flexWrap = wrap;
    }
    this.removeBase(base);
    return size;
  };
  Resizable2.prototype.bindEvents = function() {
    if (this.window) {
      this.window.addEventListener("mouseup", this.onMouseUp);
      this.window.addEventListener("mousemove", this.onMouseMove);
      this.window.addEventListener("mouseleave", this.onMouseUp);
      this.window.addEventListener("touchmove", this.onMouseMove, {
        capture: true,
        passive: false
      });
      this.window.addEventListener("touchend", this.onMouseUp);
    }
  };
  Resizable2.prototype.unbindEvents = function() {
    if (this.window) {
      this.window.removeEventListener("mouseup", this.onMouseUp);
      this.window.removeEventListener("mousemove", this.onMouseMove);
      this.window.removeEventListener("mouseleave", this.onMouseUp);
      this.window.removeEventListener("touchmove", this.onMouseMove, true);
      this.window.removeEventListener("touchend", this.onMouseUp);
    }
  };
  Resizable2.prototype.componentDidMount = function() {
    if (!this.resizable || !this.window) {
      return;
    }
    var computedStyle = this.window.getComputedStyle(this.resizable);
    this.setState({
      width: this.state.width || this.size.width,
      height: this.state.height || this.size.height,
      flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
    });
  };
  Resizable2.prototype.componentWillUnmount = function() {
    if (this.window) {
      this.unbindEvents();
    }
  };
  Resizable2.prototype.createSizeForCssProperty = function(newSize, kind) {
    var propsSize = this.propsSize && this.propsSize[kind];
    return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
  };
  Resizable2.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
    var boundsByDirection = this.props.boundsByDirection;
    var direction = this.state.direction;
    var widthByDirection = boundsByDirection && hasDirection("left", direction);
    var heightByDirection = boundsByDirection && hasDirection("top", direction);
    var boundWidth;
    var boundHeight;
    if (this.props.bounds === "parent") {
      var parent_1 = this.parentNode;
      if (parent_1) {
        boundWidth = widthByDirection ? this.resizableRight - this.parentLeft : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
        boundHeight = heightByDirection ? this.resizableBottom - this.parentTop : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
      }
    } else if (this.props.bounds === "window") {
      if (this.window) {
        boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;
        boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;
      }
    } else if (this.props.bounds) {
      boundWidth = widthByDirection ? this.resizableRight - this.targetLeft : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
      boundHeight = heightByDirection ? this.resizableBottom - this.targetTop : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
    }
    if (boundWidth && Number.isFinite(boundWidth)) {
      maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
    }
    if (boundHeight && Number.isFinite(boundHeight)) {
      maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
    }
    return { maxWidth, maxHeight };
  };
  Resizable2.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
    var scale = this.props.scale || 1;
    var resizeRatio = this.props.resizeRatio || 1;
    var _a = this.state, direction = _a.direction, original = _a.original;
    var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
    var newWidth = original.width;
    var newHeight = original.height;
    var extraHeight = lockAspectRatioExtraHeight || 0;
    var extraWidth = lockAspectRatioExtraWidth || 0;
    if (hasDirection("right", direction)) {
      newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
      if (lockAspectRatio) {
        newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
      }
    }
    if (hasDirection("left", direction)) {
      newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
      if (lockAspectRatio) {
        newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
      }
    }
    if (hasDirection("bottom", direction)) {
      newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
      if (lockAspectRatio) {
        newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
      }
    }
    if (hasDirection("top", direction)) {
      newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
      if (lockAspectRatio) {
        newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
      }
    }
    return { newWidth, newHeight };
  };
  Resizable2.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max, min) {
    var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
    var computedMinWidth = typeof min.width === "undefined" ? 10 : min.width;
    var computedMaxWidth = typeof max.width === "undefined" || max.width < 0 ? newWidth : max.width;
    var computedMinHeight = typeof min.height === "undefined" ? 10 : min.height;
    var computedMaxHeight = typeof max.height === "undefined" || max.height < 0 ? newHeight : max.height;
    var extraHeight = lockAspectRatioExtraHeight || 0;
    var extraWidth = lockAspectRatioExtraWidth || 0;
    if (lockAspectRatio) {
      var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
      var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
      var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
      var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
      var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
      var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
      var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
      var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
      newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
      newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
    } else {
      newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
      newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
    }
    return { newWidth, newHeight };
  };
  Resizable2.prototype.setBoundingClientRect = function() {
    if (this.props.bounds === "parent") {
      var parent_2 = this.parentNode;
      if (parent_2) {
        var parentRect = parent_2.getBoundingClientRect();
        this.parentLeft = parentRect.left;
        this.parentTop = parentRect.top;
      }
    }
    if (this.props.bounds && typeof this.props.bounds !== "string") {
      var targetRect = this.props.bounds.getBoundingClientRect();
      this.targetLeft = targetRect.left;
      this.targetTop = targetRect.top;
    }
    if (this.resizable) {
      var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;
      this.resizableLeft = left;
      this.resizableRight = right;
      this.resizableTop = top_1;
      this.resizableBottom = bottom;
    }
  };
  Resizable2.prototype.onResizeStart = function(event, direction) {
    if (!this.resizable || !this.window) {
      return;
    }
    var clientX = 0;
    var clientY = 0;
    if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
      clientX = event.nativeEvent.clientX;
      clientY = event.nativeEvent.clientY;
    } else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
      clientX = event.nativeEvent.touches[0].clientX;
      clientY = event.nativeEvent.touches[0].clientY;
    }
    if (this.props.onResizeStart) {
      if (this.resizable) {
        var startResize = this.props.onResizeStart(event, direction, this.resizable);
        if (startResize === false) {
          return;
        }
      }
    }
    if (this.props.size) {
      if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
        this.setState({ height: this.props.size.height });
      }
      if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
        this.setState({ width: this.props.size.width });
      }
    }
    this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
    var flexBasis;
    var computedStyle = this.window.getComputedStyle(this.resizable);
    if (computedStyle.flexBasis !== "auto") {
      var parent_3 = this.parentNode;
      if (parent_3) {
        var dir = this.window.getComputedStyle(parent_3).flexDirection;
        this.flexDir = dir.startsWith("row") ? "row" : "column";
        flexBasis = computedStyle.flexBasis;
      }
    }
    this.setBoundingClientRect();
    this.bindEvents();
    var state = {
      original: {
        x: clientX,
        y: clientY,
        width: this.size.width,
        height: this.size.height
      },
      isResizing: true,
      backgroundStyle: __assign2(__assign2({}, this.state.backgroundStyle), { cursor: this.window.getComputedStyle(event.target).cursor || "auto" }),
      direction,
      flexBasis
    };
    this.setState(state);
  };
  Resizable2.prototype.onMouseMove = function(event) {
    if (!this.state.isResizing || !this.resizable || !this.window) {
      return;
    }
    if (this.window.TouchEvent && isTouchEvent(event)) {
      try {
        event.preventDefault();
        event.stopPropagation();
      } catch (e) {
      }
    }
    var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
    var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;
    var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;
    var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
    var parentSize = this.getParentSize();
    var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
    maxWidth = max.maxWidth;
    maxHeight = max.maxHeight;
    minWidth = max.minWidth;
    minHeight = max.minHeight;
    var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
    var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
    if (this.props.snap && this.props.snap.x) {
      newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
    }
    if (this.props.snap && this.props.snap.y) {
      newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
    }
    var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, { width: boundaryMax.maxWidth, height: boundaryMax.maxHeight }, { width: minWidth, height: minHeight });
    newWidth = newSize.newWidth;
    newHeight = newSize.newHeight;
    if (this.props.grid) {
      var newGridWidth = snap(newWidth, this.props.grid[0]);
      var newGridHeight = snap(newHeight, this.props.grid[1]);
      var gap = this.props.snapGap || 0;
      newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
      newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
    }
    var delta = {
      width: newWidth - original.width,
      height: newHeight - original.height
    };
    if (width && typeof width === "string") {
      if (endsWith(width, "%")) {
        var percent = newWidth / parentSize.width * 100;
        newWidth = percent + "%";
      } else if (endsWith(width, "vw")) {
        var vw = newWidth / this.window.innerWidth * 100;
        newWidth = vw + "vw";
      } else if (endsWith(width, "vh")) {
        var vh = newWidth / this.window.innerHeight * 100;
        newWidth = vh + "vh";
      }
    }
    if (height && typeof height === "string") {
      if (endsWith(height, "%")) {
        var percent = newHeight / parentSize.height * 100;
        newHeight = percent + "%";
      } else if (endsWith(height, "vw")) {
        var vw = newHeight / this.window.innerWidth * 100;
        newHeight = vw + "vw";
      } else if (endsWith(height, "vh")) {
        var vh = newHeight / this.window.innerHeight * 100;
        newHeight = vh + "vh";
      }
    }
    var newState = {
      width: this.createSizeForCssProperty(newWidth, "width"),
      height: this.createSizeForCssProperty(newHeight, "height")
    };
    if (this.flexDir === "row") {
      newState.flexBasis = newState.width;
    } else if (this.flexDir === "column") {
      newState.flexBasis = newState.height;
    }
    this.setState(newState);
    if (this.props.onResize) {
      this.props.onResize(event, direction, this.resizable, delta);
    }
  };
  Resizable2.prototype.onMouseUp = function(event) {
    var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
    if (!isResizing || !this.resizable) {
      return;
    }
    var delta = {
      width: this.size.width - original.width,
      height: this.size.height - original.height
    };
    if (this.props.onResizeStop) {
      this.props.onResizeStop(event, direction, this.resizable, delta);
    }
    if (this.props.size) {
      this.setState(this.props.size);
    }
    this.unbindEvents();
    this.setState({
      isResizing: false,
      backgroundStyle: __assign2(__assign2({}, this.state.backgroundStyle), { cursor: "auto" })
    });
  };
  Resizable2.prototype.updateSize = function(size) {
    this.setState({ width: size.width, height: size.height });
  };
  Resizable2.prototype.renderResizer = function() {
    var _this = this;
    var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
    if (!enable) {
      return null;
    }
    var resizers = Object.keys(enable).map(function(dir) {
      if (enable[dir] !== false) {
        return React2.createElement(Resizer, { key: dir, direction: dir, onResizeStart: _this.onResizeStart, replaceStyles: handleStyles && handleStyles[dir], className: handleClasses && handleClasses[dir] }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
      }
      return null;
    });
    return React2.createElement("div", { className: handleWrapperClass, style: handleWrapperStyle }, resizers);
  };
  Resizable2.prototype.render = function() {
    var _this = this;
    var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
      if (definedProps.indexOf(key) !== -1) {
        return acc;
      }
      acc[key] = _this.props[key];
      return acc;
    }, {});
    var style = __assign2(__assign2(__assign2({ position: "relative", userSelect: this.state.isResizing ? "none" : "auto" }, this.props.style), this.sizeStyle), { maxWidth: this.props.maxWidth, maxHeight: this.props.maxHeight, minWidth: this.props.minWidth, minHeight: this.props.minHeight, boxSizing: "border-box", flexShrink: 0 });
    if (this.state.flexBasis) {
      style.flexBasis = this.state.flexBasis;
    }
    var Wrapper = this.props.as || "div";
    return React2.createElement(
      Wrapper,
      __assign2({ ref: this.ref, style, className: this.props.className }, extendsProps),
      this.state.isResizing && React2.createElement("div", { style: this.state.backgroundStyle }),
      this.props.children,
      this.renderResizer()
    );
  };
  Resizable2.defaultProps = {
    as: "div",
    onResizeStart: function() {
    },
    onResize: function() {
    },
    onResizeStop: function() {
    },
    enable: {
      top: true,
      right: true,
      bottom: true,
      left: true,
      topRight: true,
      bottomRight: true,
      bottomLeft: true,
      topLeft: true
    },
    style: {},
    grid: [1, 1],
    lockAspectRatio: false,
    lockAspectRatioExtraWidth: 0,
    lockAspectRatioExtraHeight: 0,
    scale: 1,
    resizeRatio: 1,
    snapGap: 0
  };
  return Resizable2;
}(React2.PureComponent);

// ../../.yarn/__virtual__/react-rnd-virtual-1610495181/0/global/cache/react-rnd-npm-10.3.7-cb1aaea902-9.zip/node_modules/react-rnd/lib/index.js
var extendStatics = /* @__PURE__ */ __name(function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
}, "extendStatics");
function __extends3(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  __name(__, "__");
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
__name(__extends3, "__extends");
var __assign3 = /* @__PURE__ */ __name(function() {
  __assign3 = Object.assign || /* @__PURE__ */ __name(function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  }, "__assign");
  return __assign3.apply(this, arguments);
}, "__assign");
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
__name(__rest, "__rest");
var Draggable = import_react_draggable.default;
var resizableStyle = {
  width: "auto",
  height: "auto",
  display: "inline-block",
  position: "absolute",
  top: 0,
  left: 0
};
var getEnableResizingByFlag = /* @__PURE__ */ __name(function(flag) {
  return {
    bottom: flag,
    bottomLeft: flag,
    bottomRight: flag,
    left: flag,
    right: flag,
    top: flag,
    topLeft: flag,
    topRight: flag
  };
}, "getEnableResizingByFlag");
var Rnd = function(_super) {
  __extends3(Rnd2, _super);
  function Rnd2(props) {
    var _this = _super.call(this, props) || this;
    _this.resizingPosition = { x: 0, y: 0 };
    _this.offsetFromParent = { left: 0, top: 0 };
    _this.resizableElement = { current: null };
    _this.originalPosition = { x: 0, y: 0 };
    _this.refDraggable = function(c) {
      if (!c)
        return;
      _this.draggable = c;
    };
    _this.refResizable = function(c) {
      if (!c)
        return;
      _this.resizable = c;
      _this.resizableElement.current = c.resizable;
    };
    _this.state = {
      resizing: false,
      bounds: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      maxWidth: props.maxWidth,
      maxHeight: props.maxHeight
    };
    _this.onResizeStart = _this.onResizeStart.bind(_this);
    _this.onResize = _this.onResize.bind(_this);
    _this.onResizeStop = _this.onResizeStop.bind(_this);
    _this.onDragStart = _this.onDragStart.bind(_this);
    _this.onDrag = _this.onDrag.bind(_this);
    _this.onDragStop = _this.onDragStop.bind(_this);
    _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);
    return _this;
  }
  __name(Rnd2, "Rnd");
  Rnd2.prototype.componentDidMount = function() {
    this.updateOffsetFromParent();
    var _a = this.offsetFromParent, left = _a.left, top = _a.top;
    var _b = this.getDraggablePosition(), x = _b.x, y = _b.y;
    this.draggable.setState({
      x: x - left,
      y: y - top
    });
    this.forceUpdate();
  };
  Rnd2.prototype.getDraggablePosition = function() {
    var _a = this.draggable.state, x = _a.x, y = _a.y;
    return { x, y };
  };
  Rnd2.prototype.getParent = function() {
    return this.resizable && this.resizable.parentNode;
  };
  Rnd2.prototype.getParentSize = function() {
    return this.resizable.getParentSize();
  };
  Rnd2.prototype.getMaxSizesFromProps = function() {
    var maxWidth = typeof this.props.maxWidth === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;
    var maxHeight = typeof this.props.maxHeight === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;
    return { maxWidth, maxHeight };
  };
  Rnd2.prototype.getSelfElement = function() {
    return this.resizable && this.resizable.resizable;
  };
  Rnd2.prototype.getOffsetHeight = function(boundary) {
    var scale = this.props.scale;
    switch (this.props.bounds) {
      case "window":
        return window.innerHeight / scale;
      case "body":
        return document.body.offsetHeight / scale;
      default:
        return boundary.offsetHeight;
    }
  };
  Rnd2.prototype.getOffsetWidth = function(boundary) {
    var scale = this.props.scale;
    switch (this.props.bounds) {
      case "window":
        return window.innerWidth / scale;
      case "body":
        return document.body.offsetWidth / scale;
      default:
        return boundary.offsetWidth;
    }
  };
  Rnd2.prototype.onDragStart = function(e, data) {
    if (this.props.onDragStart) {
      this.props.onDragStart(e, data);
    }
    var pos = this.getDraggablePosition();
    this.originalPosition = pos;
    if (!this.props.bounds)
      return;
    var parent = this.getParent();
    var scale = this.props.scale;
    var boundary;
    if (this.props.bounds === "parent") {
      boundary = parent;
    } else if (this.props.bounds === "body") {
      var parentRect_1 = parent.getBoundingClientRect();
      var parentLeft_1 = parentRect_1.left;
      var parentTop_1 = parentRect_1.top;
      var bodyRect = document.body.getBoundingClientRect();
      var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;
      var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;
      var right = (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;
      var bottom = (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;
      return this.setState({ bounds: { top: top_1, right, bottom, left: left_1 } });
    } else if (this.props.bounds === "window") {
      if (!this.resizable)
        return;
      var parentRect_2 = parent.getBoundingClientRect();
      var parentLeft_2 = parentRect_2.left;
      var parentTop_2 = parentRect_2.top;
      var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;
      var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;
      var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;
      var bottom = (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;
      return this.setState({ bounds: { top: top_2, right, bottom, left: left_2 } });
    } else {
      boundary = document.querySelector(this.props.bounds);
    }
    if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) {
      return;
    }
    var boundaryRect = boundary.getBoundingClientRect();
    var boundaryLeft = boundaryRect.left;
    var boundaryTop = boundaryRect.top;
    var parentRect = parent.getBoundingClientRect();
    var parentLeft = parentRect.left;
    var parentTop = parentRect.top;
    var left = (boundaryLeft - parentLeft) / scale;
    var top = boundaryTop - parentTop;
    if (!this.resizable)
      return;
    this.updateOffsetFromParent();
    var offset = this.offsetFromParent;
    this.setState({
      bounds: {
        top: top - offset.top,
        right: left + (boundary.offsetWidth - this.resizable.size.width) - offset.left / scale,
        bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset.top,
        left: left - offset.left / scale
      }
    });
  };
  Rnd2.prototype.onDrag = function(e, data) {
    if (!this.props.onDrag)
      return;
    var _a = this.offsetFromParent, left = _a.left, top = _a.top;
    if (!this.props.dragAxis || this.props.dragAxis === "both") {
      return this.props.onDrag(e, __assign3(__assign3({}, data), { x: data.x - left, y: data.y - top }));
    } else if (this.props.dragAxis === "x") {
      return this.props.onDrag(e, __assign3(__assign3({}, data), { x: data.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
    } else if (this.props.dragAxis === "y") {
      return this.props.onDrag(e, __assign3(__assign3({}, data), { x: this.originalPosition.x + left, y: data.y + top, deltaX: 0 }));
    }
  };
  Rnd2.prototype.onDragStop = function(e, data) {
    if (!this.props.onDragStop)
      return;
    var _a = this.offsetFromParent, left = _a.left, top = _a.top;
    if (!this.props.dragAxis || this.props.dragAxis === "both") {
      return this.props.onDragStop(e, __assign3(__assign3({}, data), { x: data.x + left, y: data.y + top }));
    } else if (this.props.dragAxis === "x") {
      return this.props.onDragStop(e, __assign3(__assign3({}, data), { x: data.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
    } else if (this.props.dragAxis === "y") {
      return this.props.onDragStop(e, __assign3(__assign3({}, data), { x: this.originalPosition.x + left, y: data.y + top, deltaX: 0 }));
    }
  };
  Rnd2.prototype.onResizeStart = function(e, dir, elementRef) {
    e.stopPropagation();
    this.setState({
      resizing: true
    });
    var scale = this.props.scale;
    var offset = this.offsetFromParent;
    var pos = this.getDraggablePosition();
    this.resizingPosition = { x: pos.x + offset.left, y: pos.y + offset.top };
    this.originalPosition = pos;
    if (this.props.bounds) {
      var parent_1 = this.getParent();
      var boundary = void 0;
      if (this.props.bounds === "parent") {
        boundary = parent_1;
      } else if (this.props.bounds === "body") {
        boundary = document.body;
      } else if (this.props.bounds === "window") {
        boundary = window;
      } else {
        boundary = document.querySelector(this.props.bounds);
      }
      var self_1 = this.getSelfElement();
      if (self_1 instanceof Element && (boundary instanceof HTMLElement || boundary === window) && parent_1 instanceof HTMLElement) {
        var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
        var parentSize = this.getParentSize();
        if (maxWidth && typeof maxWidth === "string") {
          if (maxWidth.endsWith("%")) {
            var ratio = Number(maxWidth.replace("%", "")) / 100;
            maxWidth = parentSize.width * ratio;
          } else if (maxWidth.endsWith("px")) {
            maxWidth = Number(maxWidth.replace("px", ""));
          }
        }
        if (maxHeight && typeof maxHeight === "string") {
          if (maxHeight.endsWith("%")) {
            var ratio = Number(maxHeight.replace("%", "")) / 100;
            maxHeight = parentSize.width * ratio;
          } else if (maxHeight.endsWith("px")) {
            maxHeight = Number(maxHeight.replace("px", ""));
          }
        }
        var selfRect = self_1.getBoundingClientRect();
        var selfLeft = selfRect.left;
        var selfTop = selfRect.top;
        var boundaryRect = this.props.bounds === "window" ? { left: 0, top: 0 } : boundary.getBoundingClientRect();
        var boundaryLeft = boundaryRect.left;
        var boundaryTop = boundaryRect.top;
        var offsetWidth = this.getOffsetWidth(boundary);
        var offsetHeight = this.getOffsetHeight(boundary);
        var hasLeft = dir.toLowerCase().endsWith("left");
        var hasRight = dir.toLowerCase().endsWith("right");
        var hasTop = dir.startsWith("top");
        var hasBottom = dir.startsWith("bottom");
        if ((hasLeft || hasTop) && this.resizable) {
          var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;
          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
        }
        if (hasRight || this.props.lockAspectRatio && !hasLeft && !hasTop) {
          var max = offsetWidth + (boundaryLeft - selfLeft) / scale;
          this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
        }
        if ((hasTop || hasLeft) && this.resizable) {
          var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;
          this.setState({
            maxHeight: max > Number(maxHeight) ? maxHeight : max
          });
        }
        if (hasBottom || this.props.lockAspectRatio && !hasTop && !hasLeft) {
          var max = offsetHeight + (boundaryTop - selfTop) / scale;
          this.setState({
            maxHeight: max > Number(maxHeight) ? maxHeight : max
          });
        }
      }
    } else {
      this.setState({
        maxWidth: this.props.maxWidth,
        maxHeight: this.props.maxHeight
      });
    }
    if (this.props.onResizeStart) {
      this.props.onResizeStart(e, dir, elementRef);
    }
  };
  Rnd2.prototype.onResize = function(e, direction, elementRef, delta) {
    var newPos = { x: this.originalPosition.x, y: this.originalPosition.y };
    var left = -delta.width;
    var top = -delta.height;
    var directions = ["top", "left", "topLeft", "bottomLeft", "topRight"];
    if (directions.indexOf(direction) !== -1) {
      if (direction === "bottomLeft") {
        newPos.x += left;
      } else if (direction === "topRight") {
        newPos.y += top;
      } else {
        newPos.x += left;
        newPos.y += top;
      }
    }
    if (newPos.x !== this.draggable.state.x || newPos.y !== this.draggable.state.y) {
      this.draggable.setState(newPos);
    }
    this.updateOffsetFromParent();
    var offset = this.offsetFromParent;
    var x = this.getDraggablePosition().x + offset.left;
    var y = this.getDraggablePosition().y + offset.top;
    this.resizingPosition = { x, y };
    if (!this.props.onResize)
      return;
    this.props.onResize(e, direction, elementRef, delta, {
      x,
      y
    });
  };
  Rnd2.prototype.onResizeStop = function(e, direction, elementRef, delta) {
    this.setState({
      resizing: false
    });
    var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
    this.setState({ maxWidth, maxHeight });
    if (this.props.onResizeStop) {
      this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);
    }
  };
  Rnd2.prototype.updateSize = function(size) {
    if (!this.resizable)
      return;
    this.resizable.updateSize({ width: size.width, height: size.height });
  };
  Rnd2.prototype.updatePosition = function(position) {
    this.draggable.setState(position);
  };
  Rnd2.prototype.updateOffsetFromParent = function() {
    var scale = this.props.scale;
    var parent = this.getParent();
    var self2 = this.getSelfElement();
    if (!parent || self2 === null) {
      return {
        top: 0,
        left: 0
      };
    }
    var parentRect = parent.getBoundingClientRect();
    var parentLeft = parentRect.left;
    var parentTop = parentRect.top;
    var selfRect = self2.getBoundingClientRect();
    var position = this.getDraggablePosition();
    var scrollLeft = parent.scrollLeft;
    var scrollTop = parent.scrollTop;
    this.offsetFromParent = {
      left: selfRect.left - parentLeft + scrollLeft - position.x * scale,
      top: selfRect.top - parentTop + scrollTop - position.y * scale
    };
  };
  Rnd2.prototype.render = function() {
    var _a = this.props, disableDragging = _a.disableDragging, style = _a.style, dragHandleClassName = _a.dragHandleClassName, position = _a.position, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, dragAxis = _a.dragAxis, dragGrid = _a.dragGrid, bounds = _a.bounds, enableUserSelectHack = _a.enableUserSelectHack, cancel = _a.cancel, children = _a.children, onResizeStart = _a.onResizeStart, onResize = _a.onResize, onResizeStop = _a.onResizeStop, onDragStart = _a.onDragStart, onDrag = _a.onDrag, onDragStop = _a.onDragStop, resizeHandleStyles = _a.resizeHandleStyles, resizeHandleClasses = _a.resizeHandleClasses, resizeHandleComponent = _a.resizeHandleComponent, enableResizing = _a.enableResizing, resizeGrid = _a.resizeGrid, resizeHandleWrapperClass = _a.resizeHandleWrapperClass, resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle, scale = _a.scale, allowAnyClick = _a.allowAnyClick, resizableProps = __rest(_a, ["disableDragging", "style", "dragHandleClassName", "position", "onMouseDown", "onMouseUp", "dragAxis", "dragGrid", "bounds", "enableUserSelectHack", "cancel", "children", "onResizeStart", "onResize", "onResizeStop", "onDragStart", "onDrag", "onDragStop", "resizeHandleStyles", "resizeHandleClasses", "resizeHandleComponent", "enableResizing", "resizeGrid", "resizeHandleWrapperClass", "resizeHandleWrapperStyle", "scale", "allowAnyClick"]);
    var defaultValue = this.props.default ? __assign3({}, this.props.default) : void 0;
    delete resizableProps.default;
    var cursorStyle = disableDragging || dragHandleClassName ? { cursor: "auto" } : { cursor: "move" };
    var innerStyle = __assign3(__assign3(__assign3({}, resizableStyle), cursorStyle), style);
    var _b = this.offsetFromParent, left = _b.left, top = _b.top;
    var draggablePosition;
    if (position) {
      draggablePosition = {
        x: position.x - left,
        y: position.y - top
      };
    }
    var pos = this.state.resizing ? void 0 : draggablePosition;
    var dragAxisOrUndefined = this.state.resizing ? "both" : dragAxis;
    return (0, import_react.createElement)(
      Draggable,
      { ref: this.refDraggable, handle: dragHandleClassName ? ".".concat(dragHandleClassName) : void 0, defaultPosition: defaultValue, onMouseDown, onMouseUp, onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop, axis: dragAxisOrUndefined, disabled: disableDragging, grid: dragGrid, bounds: bounds ? this.state.bounds : void 0, position: pos, enableUserSelectHack, cancel, scale, allowAnyClick, nodeRef: this.resizableElement },
      (0, import_react.createElement)(Resizable, __assign3({}, resizableProps, { ref: this.refResizable, defaultSize: defaultValue, size: this.props.size, enable: typeof enableResizing === "boolean" ? getEnableResizingByFlag(enableResizing) : enableResizing, onResizeStart: this.onResizeStart, onResize: this.onResize, onResizeStop: this.onResizeStop, style: innerStyle, minWidth: this.props.minWidth, minHeight: this.props.minHeight, maxWidth: this.state.resizing ? this.state.maxWidth : this.props.maxWidth, maxHeight: this.state.resizing ? this.state.maxHeight : this.props.maxHeight, grid: resizeGrid, handleWrapperClass: resizeHandleWrapperClass, handleWrapperStyle: resizeHandleWrapperStyle, lockAspectRatio: this.props.lockAspectRatio, lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth, lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight, handleStyles: resizeHandleStyles, handleClasses: resizeHandleClasses, handleComponent: resizeHandleComponent, scale: this.props.scale }), children)
    );
  };
  Rnd2.defaultProps = {
    maxWidth: Number.MAX_SAFE_INTEGER,
    maxHeight: Number.MAX_SAFE_INTEGER,
    scale: 1,
    onResizeStart: function() {
    },
    onResize: function() {
    },
    onResizeStop: function() {
    },
    onDragStart: function() {
    },
    onDrag: function() {
    },
    onDragStop: function() {
    }
  };
  return Rnd2;
}(import_react.PureComponent);

// js/isMobile.mjs
init_define_process();
function isMobile() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === "MacIntel" && navigator.userAgent.indexOf("SAMSUNG") === -1;
  let check = false;
  (function(a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[23]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.slice(0, 4))) {
      check = true;
    }
  })(navigator.userAgent || navigator.vendor || window.opera);
  return check && !isIOS;
}
__name(isMobile, "isMobile");

// js/prettierEsm.ts
init_define_process();
var import_parser_babel = __toESM(require_parser_babel(), 1);
var import_standalone = __toESM(require_standalone(), 1);
var prettierJs = /* @__PURE__ */ __name((code) => {
  try {
    return (0, import_standalone.format)(code, {
      arrowParens: "always",
      bracketSpacing: true,
      embeddedLanguageFormatting: "auto",
      insertPragma: false,
      bracketSameLine: true,
      jsxSingleQuote: false,
      htmlWhitespaceSensitivity: "strict",
      printWidth: 90,
      proseWrap: "preserve",
      quoteProps: "as-needed",
      requirePragma: false,
      semi: true,
      singleQuote: true,
      tabWidth: 2,
      trailingComma: "all",
      useTabs: false,
      parser: "babel-ts",
      plugins: [
        import_parser_babel.default
      ]
    });
  } catch (error) {
    console.error("prettier error"), console.error({ err: error });
    return null;
  }
}, "prettierJs");

// js/Editor.tsx
var import_jsx_runtime = __toESM(require_emotion_react_jsx_runtime_cjs(), 1);
var mod = {
  getValue: async () => "",
  setValue: async (code) => {
    if (code.length < 10)
      console.log(code);
  },
  getErrors: async () => [],
  code: "",
  counter: 0,
  codeToSet: ""
};
var Editor = /* @__PURE__ */ __name(({ codeSpace }) => {
  const ref = (0, import_react3.useRef)(null);
  const { i, code } = mST();
  const engine = isMobile() ? "ace" : "monaco";
  const [
    mySession,
    changeContent
  ] = (0, import_react3.useState)({
    myCode: code,
    counter: i,
    started: false,
    onChange(_cb) {
    }
  });
  mod.counter = mST().i;
  const {
    myCode,
    started,
    onChange
  } = mySession;
  mod.code = myCode;
  (0, import_react3.useEffect)(() => {
    if (started)
      return;
    if (!ref?.current || started) {
      return;
    }
    const container = ref?.current;
    if (container === null)
      return;
    (engine === "monaco" ? setMonaco(container, codeSpace) : setAce(container, codeSpace)).then((res) => Object.assign(mod, { setValue: res?.setValue })).then(
      () => changeContent((x) => ({ ...x, started: true }))
    );
  }, [started, ref.current]);
  (0, import_react3.useEffect)(
    () => {
      mod.getErrors().then(console.log);
      onChange(
        () => mod.getValue().then(
          () => changeContent((x) => ({
            ...x,
            counter: mod.counter,
            myCode: mod.code
          }))
        )
      );
    },
    [onChange, myCode, changeContent]
  );
  onSessionUpdate(async () => {
    if (mod.counter >= mST().i) {
      return;
    }
    const { i: i2, code: code2 } = mST();
    if (!code2)
      return;
    mod.setValue(code2);
    mod.code = code2;
    mod.counter = i2;
    changeContent((x) => ({
      ...x,
      counter: i2,
      myCode: code2
    }));
  }, "editor");
  const EditorNode = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "div",
    {
      "data-test-id": "editor",
      ref,
      css: import_react2.css`
    ${engine === "ace" ? `` : `border-right: 4px dashed gray;
    border-bottom: 4px dashed gray;`}

    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top:0;
    bottom:0;
    left:0;
    right:0;
    `
    }
  );
  if (engine === "ace")
    return EditorNode;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    Rnd,
    {
      enableResizing: true,
      disableDragging: true,
      minWidth: 640,
      minHeight: "100vh",
      bounds: "body",
      allowAnyClick: true,
      lockAspectRatio: false,
      enable: {
        top: false,
        bottom: true,
        right: true,
        left: false
      },
      defaultSize: {
        width: "640px",
        height: "100vh"
      },
      children: EditorNode
    }
  );
}, "Editor");
async function onModChange(_code, codeSpace) {
  const code = prettierJs(_code);
  if (!code)
    return;
  if (code === prettierJs(mod.code))
    return;
  const counter = ++mod.counter;
  mod.code = code;
  runner({ code, counter, codeSpace });
}
__name(onModChange, "onModChange");
var startedM = 0;
async function setMonaco(container, codeSpace) {
  if (startedM)
    return;
  startedM = 1;
  const link = document.createElement("link");
  link.setAttribute("rel", "stylesheet");
  link.href = location.origin + "/Editor.css";
  document.head.append(link);
  const { startMonaco } = await import("./chunk-startMonaco-EXBA2WSG.mjs");
  return await startMonaco({
    container,
    codeSpace,
    code: mST().code,
    onChange: (code) => onModChange(code, codeSpace)
  });
}
__name(setMonaco, "setMonaco");
var startedAce = 0;
async function setAce(container, codeSpace) {
  if (startedAce)
    return;
  startedAce = 1;
  const { startAce } = await import("./chunk-startAce-L4DX4ZHZ.mjs");
  return await startAce(
    mST().code,
    (code) => onModChange(code, codeSpace),
    container
  );
}
__name(setAce, "setAce");

export {
  Editor
};
