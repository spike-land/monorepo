function p(l) {
  return new Promise(function (i, a) {
    var o;
    o = window.document.createElement("script"),
      o.src = l,
      o.onload = () => i(window),
      o.onerror = a,
      window.document.head.appendChild(o);
  });
}
export const startMonaco = async ({ onChange: l, code: i, language: a }) => {
  if (typeof window == "undefined") return { monaco: {}, editor: {} };
  const o = window.document, u = window.document.getElementById("container");
  if (!u) {
    const e = o.getElementById("container");
    e.id = "container", o.body.appendChild(e);
  }
  const y = a === "typescript" ? "file:///main.tsx" : "file:///main.html";
  let n;
  if (
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      window.navigator.userAgent,
    )
  ) {
    const e = window.document.createElement("div");
    e.id = "ace",
      window.document.body.appendChild(e),
      await p("https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.min.js"),
      a === "typescript"
        ? await p(
          "https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/mode-typescript.min.js",
        )
        : await p(
          "https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/mode-html.min.js",
        ),
      await p(
        "https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/theme-monokai.min.js",
      ),
      window.document.getElementById("ace").style.setProperty(
        "display",
        "block",
      ),
      u.style.setProperty("display", "none"),
      n = window.ace.edit("ace"),
      n.getSession().setMode("ace/mode/typescript");
    const d = (s) =>
      setTimeout(() => {
        const m = window.ace.edit("ace"), g = m.getTheme();
        g !== "ace/theme/monokai " &&
          (m.setOptions({ fontSize: "14pt" }),
            m.setTheme("ace/theme/monokai"),
            d(2 * s));
      }, s);
    d(100), n.setValue(i), n.blur();
  }
  if (window.monaco === void 0) {
    const e = "https://unpkg.com/monaco-editor@0.21.2/min/vs",
      { require: d } = await p(`${e}/loader.js`);
    d.config({ paths: { vs: e } }),
      await new Promise((s) => d(["vs/editor/editor.main"], s));
  }
  const r = window.monaco;
  let c;
  try {
    c = r.editor.getModel(y), c.getValue() !== i && c.setValue(i);
  } catch {
    c = await r.editor.createModel(i, a, r.Uri.parse(y));
  }
  const t = {
    monaco: r,
    editor: r.editor.create(
      window.document.getElementById("container"),
      {
        formatOnType: !0,
        scrollbar: {
          horizontal: "hidden",
          verticalHasArrows: !0,
          verticalScrollbarSize: 20,
        },
        minimap: { enabled: !1 },
        folding: !1,
        multiCursorModifier: "alt",
        wordWrap: "on",
        wordWrapBreakAfterCharacters: ">([{]))],;} ",
        mouseWheelZoom: !1,
        wordWrapColumn: 80,
        automaticLayout: !0,
        scrollBeyondLastLine: !1,
        autoIndent: "brackets",
        autoClosingQuotes: "always",
        padding: { bottom: 300 },
        lineNumbers: "on",
        autoClosingBrackets: "always",
        autoClosingOvertype: "always",
        suggest: {},
        codeLens: !0,
        autoSurround: "languageDefined",
        trimAutoWhitespace: !0,
        codeActionsOnSaveTimeout: 100,
        model: c,
        value: i,
        language: a,
        theme: "vs-dark",
      },
    ),
  };
  if (
    t.editor.onDidChangeModelContent(() => l(t.editor.getValue())),
      n && n.session.on("change", function () {
        const e = n.getValue();
        t.editor.setValue(e), l(e);
      }),
      n && o.getElementById("container").replaceWith(o.getElementById("ace")),
      t.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions(
        {
          noSuggestionDiagnostics: !0,
          noSemanticValidation: !0,
          noSyntaxValidation: !0,
        },
      ),
      a === "typescript"
  ) {
    const e = [
        {
          name: "react",
          url: "https://unpkg.com/@types/react@17.0.0/index.d.ts",
          depend: ["global", "csstype", "react-dom", "prop-types"],
        },
        {
          name: "global",
          url: "https://unpkg.com/@types/react@17.0.0/global.d.ts",
          depend: [],
        },
        {
          name: "prop-types",
          url: "https://unpkg.com/@types/prop-types@15.7.3/index.d.ts",
          depend: [],
        },
        {
          name: "react-dom",
          url: "https://unpkg.com/@types/react-dom@17.0.0/index.d.ts",
          depend: [],
        },
        {
          name: "csstype",
          url: "https://unpkg.com/csstype@3.0.5/index.d.ts",
          depend: [],
        },
        {
          name: "@emotion/styled/base.d.ts",
          url: "https://unpkg.com/@emotion/styled@11.0.0/types/base.d.ts",
          depend: ["@emotion/react", "@emotion/serialize", "react"],
        },
        {
          name: "@emotion/styled/index.d.ts",
          url: "https://unpkg.com/@emotion/styled@11.0.0/types/index.d.ts",
          depend: ["@emotion/react", "@emotion/serialize", "react"],
        },
        {
          name: "@emotion/cache/index.d.ts",
          url: "https://unpkg.com/@emotion/cache@11.0.0/types/index.d.ts",
          depend: ["@emotion/utils"],
        },
        {
          name: "@emotion/react/index.d.ts",
          url: "https://unpkg.com/@emotion/react@11.1.2/types/index.d.ts",
          depend: ["@emotion/cache"],
        },
        {
          name: "@emotion/react/jsx-namespace.d.ts",
          url:
            "https://unpkg.com/@emotion/react@11.1.2/types/jsx-namespace.d.ts",
          depend: ["@emotion/utils", "csstype"],
        },
        {
          name: "@emotion/react/css-prop.d.ts",
          url: "https://unpkg.com/@emotion/react@11.1.2/types/css-prop.d.ts",
          depend: ["@emotion/utils", "csstype"],
        },
        {
          name: "@emotion/react/helper.d.ts",
          url: "https://unpkg.com/@emotion/react@11.1.2/types/helper.d.ts",
          depend: ["@emotion/utils", "csstype"],
        },
        {
          name: "@emotion/react/theming.d.ts",
          url: "https://unpkg.com/@emotion/react@11.1.2/types/theming.d.ts",
          depend: ["@emotion/utils", "csstype"],
        },
        {
          name: "@emotion/serialize/index.d.ts",
          url: "https://unpkg.com/@emotion/serialize@1.0.0/types/index.d.ts",
          depend: ["@emotion/utils", "csstype"],
        },
        {
          name: "@emotion/utils/index.d.ts",
          url: "https://unpkg.com/@emotion/utils@1.0.0/types/index.d.ts",
          depend: [],
        },
        {
          name: "framer-motion",
          url: "https://unpkg.com/framer-motion@3.1.1/dist/framer-motion.d.ts",
          depend: [],
        },
        {
          name: "popmotion",
          url: "https://unpkg.com/popmotion@9.0.2/lib/index.d.ts",
        },
        {
          name: "@zedvision/qrious/index.d.ts",
          url: "https://unpkg.com/@zedvision/qrious@8.5.7/dist/qrious.d.ts",
        },
      ],
      d = e.map(({ name: s, url: m }) =>
        (async () =>
          t.monaco.languages.typescript.typescriptDefaults.addExtraLib(
            await (await fetch(m)).text(),
            s.includes("@")
              ? `file:///node_modules/${s}`
              : `file:///node_modules/@types/${s}/index.d.ts`,
          ))()
      );
    return t.monaco.languages.typescript.typescriptDefaults.setCompilerOptions(
      {
        target: t.monaco.languages.typescript.ScriptTarget.ESNext,
        allowNonTsExtensions: !0,
        allowUmdGlobalAccess: !0,
        strict: !0,
        allowJs: !0,
        noEmitOnError: !0,
        allowSyntheticDefaultImports: !0,
        moduleResolution:
          t.monaco.languages.typescript.ModuleResolutionKind.Nodejs,
        module: t.monaco.languages.typescript.ModuleKind.CommonJS,
        noEmit: !0,
        typeRoots: ["node_modules/@types"],
        jsx: "react-jsx",
        esModuleInterop: !0,
      },
    ),
      await Promise.all(d),
      t.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions(
        {
          noSuggestionDiagnostics: !1,
          noSemanticValidation: !1,
          noSyntaxValidation: !1,
        },
      ),
      t;
  }
};
