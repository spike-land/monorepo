var SHATEST;
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET,HEAD,POST,OPTIONS",
  "Access-Control-Max-Age": "86400",
};
async function handleCloudRequest(e) {
  if (e.method === "GET") {
    const n = new URL(e.url);
    if (e.url.includes("?h")) {
      const s = n.searchParams.get("h");
      if (s !== null) {
        const r = await SHATEST.get(s, "stream");
        if (r !== null) {
          return new Response(r, { headers: { "content-type": "" } });
        }
      }
    }
    return Response.redirect("https://zed.vision/code", 301);
  } else if (e.method === "POST") {
    const n = await e.json(),
      s = new TextEncoder().encode(JSON.stringify(n)),
      r = await crypto.subtle.digest({ name: "SHA-256" }, s),
      a = Array.from(new Uint8Array(r)),
      c = a.map((l) => ("00" + l.toString(16)).slice(-2)).join(""),
      t = c.substring(0, 8);
    await SHATEST.put(t, s);
    const o = new Response(`{"hash":"${t}"}`);
    return o.headers.append("Access-Control-Allow-Origin", "*"),
      o.headers.append("Access-Control-Allow-Methods", "GET,HEAD,POST,OPTIONS"),
      o.headers.append("Access-Control-Max-Age", "86400"),
      o;
  }
  return handleOptions(e);
}
function handleOptions(e) {
  const n = e.headers;
  let s;
  return new Response(
    e.body,
    {
      headers: {
        ...n,
        ...corsHeaders,
        "Access-Control-Allow-Headers": e.headers.get(
          "Access-Control-Request-Headers",
        ),
      },
    },
  );
}
self.runner = self.runner || "worker-cf",
  addEventListener("fetch", (e) => {
    if (self.runner !== "worker-cf") return;
    e.respondWith(handleCloudRequest(e.request));
  });
