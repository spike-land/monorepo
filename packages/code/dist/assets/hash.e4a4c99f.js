import{CID as t,fromHexString as n,ipfsClient as e,ipfsCat as i}from"./ipfsClient.95a66388.js";export{CID}from"./ipfsClient.95a66388.js";import"./getWorker.a337a27a.js";const a=t=>{"string"==typeof mgs?console.log(t):"object"==typeof t?console.table({msg:t}):console.log(t)};function s(e){return new t(0,112,n("1220"+e)).toString()}async function r(t,n){if(a(`sending signal: ${t}`),n){a("sending data as well....");let i=n;"string"!=typeof n&&(i=JSON.stringify(n)),a(i);const s=(await e.add(i)).cid.toString(),{pathname:r}=new URL(t);await fetch(`https://spike.land/signal/?cid=${s}&signal=${r.slice(1)}`),fetch(`https://spike.land/ipfs/${s}`)}const{path:i}=await e.add(t);return a(`signal sent --- ${i}`),{success:!0}}async function o(t,n){if("undefined"==typeof window)return;const a="number"==typeof n?n:999;try{if(0===a)throw new Error("No more retry");const n=(await e.add(t,{onlyHash:!0})).cid.toString();await i(n,{timeout:1500});const s=t.slice(-8),r=await fetch(`https://spike.land/signal?signal=${s}&securityrandomparam=${1e4*Math.random()}`).then((t=>t.text())),o=await fetch(`https://spike.land/ipfs/${r}`).then((t=>t.text()));return()=>function(t){try{if("string"!=typeof t)return t;return JSON.parse(t)}catch(n){return t}}(o)}catch(s){if(a>1)return o(t,a-1)}}export{o as fetchSignal,r as sendSignal,s as sha256ToCid};
