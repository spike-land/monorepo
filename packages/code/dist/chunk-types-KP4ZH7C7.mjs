import {
  init_define_process
} from "./chunk-chunk-LOLF3VNB.mjs";

// js/types.mjs
init_define_process();

// ../../.yarn/__virtual__/@emotion-react-virtual-18b5205166/0/cache/@emotion-react-npm-11.10.0-06b9abb1e2-6d692e43ff.zip/node_modules/@emotion/react/types/index.d.ts?text
var index_d_default = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMy40CgppbXBvcnQgeyBFbW90aW9uQ2FjaGUgfSBmcm9tICdAZW1vdGlvbi9jYWNoZScKaW1wb3J0IHsKICBBcnJheUludGVycG9sYXRpb24sCiAgQ29tcG9uZW50U2VsZWN0b3IsCiAgQ1NTSW50ZXJwb2xhdGlvbiwKICBDU1NPYmplY3QsCiAgRnVuY3Rpb25JbnRlcnBvbGF0aW9uLAogIEludGVycG9sYXRpb24sCiAgS2V5ZnJhbWVzLAogIFNlcmlhbGl6ZWRTdHlsZXMKfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnCmltcG9ydCB7CiAgQ2xhc3NBdHRyaWJ1dGVzLAogIENvbnRleHQsCiAgUHJvdmlkZXIsCiAgRkMsCiAgUmVhY3RFbGVtZW50LAogIFJlYWN0Tm9kZSwKICBSZWYsCiAgY3JlYXRlRWxlbWVudAp9IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBFbW90aW9uSlNYIH0gZnJvbSAnLi9qc3gtbmFtZXNwYWNlJwoKZXhwb3J0IHsKICBBcnJheUludGVycG9sYXRpb24sCiAgQ29tcG9uZW50U2VsZWN0b3IsCiAgQ1NTT2JqZWN0LAogIEVtb3Rpb25DYWNoZSwKICBGdW5jdGlvbkludGVycG9sYXRpb24sCiAgSW50ZXJwb2xhdGlvbiwKICBLZXlmcmFtZXMsCiAgU2VyaWFsaXplZFN0eWxlcwp9CgpleHBvcnQgKiBmcm9tICcuL3RoZW1pbmcnCmV4cG9ydCAqIGZyb20gJy4vaGVscGVyJwoKLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eS1pbnRlcmZhY2UKZXhwb3J0IGludGVyZmFjZSBUaGVtZSB7fQoKZXhwb3J0IGNvbnN0IFRoZW1lQ29udGV4dDogQ29udGV4dDxvYmplY3Q+CmV4cG9ydCBjb25zdCBDYWNoZVByb3ZpZGVyOiBQcm92aWRlcjxFbW90aW9uQ2FjaGU+CmV4cG9ydCBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlPFByb3BzLCBSZWZUeXBlID0gYW55PigKICBmdW5jOiAocHJvcHM6IFByb3BzLCBjb250ZXh0OiBFbW90aW9uQ2FjaGUsIHJlZjogUmVmPFJlZlR5cGU+KSA9PiBSZWFjdE5vZGUKKTogRkM8UHJvcHMgJiBDbGFzc0F0dHJpYnV0ZXM8UmVmVHlwZT4+CgpleHBvcnQgZnVuY3Rpb24gY3NzKAogIHRlbXBsYXRlOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwKICAuLi5hcmdzOiBBcnJheTxDU1NJbnRlcnBvbGF0aW9uPgopOiBTZXJpYWxpemVkU3R5bGVzCmV4cG9ydCBmdW5jdGlvbiBjc3MoLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4pOiBTZXJpYWxpemVkU3R5bGVzCgpleHBvcnQgaW50ZXJmYWNlIEdsb2JhbFByb3BzIHsKICBzdHlsZXM6IEludGVycG9sYXRpb248VGhlbWU+Cn0KCi8qKgogKiBAZGVzYwogKiBKU1ggZ2VuZXJpYyBhcmUgc3VwcG9ydGVkIG9ubHkgYWZ0ZXIgVFNAMi45CiAqLwpleHBvcnQgZnVuY3Rpb24gR2xvYmFsKHByb3BzOiBHbG9iYWxQcm9wcyk6IFJlYWN0RWxlbWVudAoKZXhwb3J0IGZ1bmN0aW9uIGtleWZyYW1lcygKICB0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksCiAgLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4KKTogS2V5ZnJhbWVzCmV4cG9ydCBmdW5jdGlvbiBrZXlmcmFtZXMoLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4pOiBLZXlmcmFtZXMKCmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlDbGFzc05hbWVzQXJnIGV4dGVuZHMgQXJyYXk8Q2xhc3NOYW1lc0FyZz4ge30KZXhwb3J0IHR5cGUgQ2xhc3NOYW1lc0FyZyA9CiAgfCB1bmRlZmluZWQKICB8IG51bGwKICB8IHN0cmluZwogIHwgYm9vbGVhbgogIHwgeyBbY2xhc3NOYW1lOiBzdHJpbmddOiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB9CiAgfCBBcnJheUNsYXNzTmFtZXNBcmcKCmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3NOYW1lc0NvbnRlbnQgewogIGNzcyh0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLmFyZ3M6IEFycmF5PENTU0ludGVycG9sYXRpb24+KTogc3RyaW5nCiAgY3NzKC4uLmFyZ3M6IEFycmF5PENTU0ludGVycG9sYXRpb24+KTogc3RyaW5nCiAgY3goLi4uYXJnczogQXJyYXk8Q2xhc3NOYW1lc0FyZz4pOiBzdHJpbmcKICB0aGVtZTogVGhlbWUKfQpleHBvcnQgaW50ZXJmYWNlIENsYXNzTmFtZXNQcm9wcyB7CiAgY2hpbGRyZW4oY29udGVudDogQ2xhc3NOYW1lc0NvbnRlbnQpOiBSZWFjdE5vZGUKfQovKioKICogQGRlc2MKICogSlNYIGdlbmVyaWMgYXJlIHN1cHBvcnRlZCBvbmx5IGFmdGVyIFRTQDIuOQogKi8KZXhwb3J0IGZ1bmN0aW9uIENsYXNzTmFtZXMocHJvcHM6IENsYXNzTmFtZXNQcm9wcyk6IFJlYWN0RWxlbWVudAoKZXhwb3J0IGNvbnN0IGpzeDogdHlwZW9mIGNyZWF0ZUVsZW1lbnQKZXhwb3J0IG5hbWVzcGFjZSBqc3ggewogIG5hbWVzcGFjZSBKU1ggewogICAgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnQge30KICAgIGludGVyZmFjZSBFbGVtZW50Q2xhc3MgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRDbGFzcyB7fQogICAgaW50ZXJmYWNlIEVsZW1lbnRBdHRyaWJ1dGVzUHJvcGVydHkKICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRBdHRyaWJ1dGVzUHJvcGVydHkge30KICAgIGludGVyZmFjZSBFbGVtZW50Q2hpbGRyZW5BdHRyaWJ1dGUKICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7fQogICAgdHlwZSBMaWJyYXJ5TWFuYWdlZEF0dHJpYnV0ZXM8QywgUD4gPSBFbW90aW9uSlNYLkxpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczwKICAgICAgQywKICAgICAgUAogICAgPgogICAgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBFbW90aW9uSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge30KICAgIGludGVyZmFjZSBJbnRyaW5zaWNDbGFzc0F0dHJpYnV0ZXM8VD4KICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkludHJpbnNpY0NsYXNzQXR0cmlidXRlczxUPiB7fQogICAgdHlwZSBJbnRyaW5zaWNFbGVtZW50cyA9IEVtb3Rpb25KU1guSW50cmluc2ljRWxlbWVudHMKICB9Cn0K";

// ../../.yarn/__virtual__/@emotion-react-virtual-18b5205166/0/cache/@emotion-react-npm-11.10.0-06b9abb1e2-6d692e43ff.zip/node_modules/@emotion/react/types/helper.d.ts?text
var helper_d_default = "data:text/plain;charset=utf-8;base64,aW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnCgovKioKICogQGRlc2MgVXRpbGl0eSB0eXBlIGZvciBnZXR0aW5nIHByb3BzIHR5cGUgb2YgUmVhY3QgY29tcG9uZW50LgogKiBJdCB0YWtlcyBgZGVmYXVsdFByb3BzYCBpbnRvIGFuIGFjY291bnQgLSBtYWtpbmcgcHJvcHMgd2l0aCBkZWZhdWx0cyBvcHRpb25hbC4KICovCmV4cG9ydCB0eXBlIFByb3BzT2Y8CiAgQyBleHRlbmRzIGtleW9mIEpTWC5JbnRyaW5zaWNFbGVtZW50cyB8IFJlYWN0LkpTWEVsZW1lbnRDb25zdHJ1Y3Rvcjxhbnk+Cj4gPSBKU1guTGlicmFyeU1hbmFnZWRBdHRyaWJ1dGVzPEMsIFJlYWN0LkNvbXBvbmVudFByb3BzPEM+PgoKLy8gV2UgbmVlZCB0byB1c2UgdGhpcyB2ZXJzaW9uIG9mIE9taXQgYXMgaXQncyBkaXN0cmlidXRpdmUgKFdpbGwgcHJlc2VydmUgdW5pb25zKQpleHBvcnQgdHlwZSBEaXN0cmlidXRpdmVPbWl0PFQsIFU+ID0gVCBleHRlbmRzIGFueQogID8gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIFU+PgogIDogbmV2ZXIK";

// ../../.yarn/cache/@types-react-npm-18.0.17-c4860cbae4-18cae64f5b.zip/node_modules/@types/react/index.d.ts
var index_d_default2 = "data:text/plain;charset=utf-8;base64,";

// js/types.mjs
var cssTypeDts = "https://unpkg.com/csstype/index.d.ts?text";
var framerDts = "https://raw.githubusercontent.com/zerdos/spike.land/main/packages/code/js/types/framer.d.ts";
var emotionStyleBase = "https://unpkg.com/@emotion/styled/types/base.d.ts?text";
var emotionStyled = "https://unpkg.com/@emotion/styled/types/index.d.ts?text";
var emotionCache = "https://unpkg.com/@emotion/cache/types/index.d.ts?text";
var emotionJSXDts = "https://unpkg.com/@emotion/react/types/jsx-runtime.d.ts?text";
var emotionJSXRuntimeDTS = "https://unpkg.com/@emotion/react/types/jsx-runtime.d.ts?text";
var emotionJSXNameSpaceDTS = "https://unpkg.com/@emotion/react/types/jsx-namespace.d.ts?text";
var emotionReactCssPropDts = "https://unpkg.com/@emotion/react/types/css-prop.d.ts?text";
var emotionThemingDts = "https://unpkg.com/@emotion/react/types/theming.d.ts?text";
var emotionSerializeDts = "https://unpkg.com/@emotion/serialize/types/index.d.ts?text";
var dtsFiles = {
  reactDts: index_d_default2,
  jsxRuntimeDts: "https://unpkg.com/@types/react/jsx-runtime.d.ts",
  propTypesDts: "https://unpkg.com/@types/prop-types/index.d.ts",
  cssTypeDts,
  framerDts,
  emotionStyleBase,
  emotionStyled,
  emotionCache,
  emotionJSXDts,
  emotionJSXNameSpaceDTS,
  emotionJSXRuntimeDTS,
  emotionReactDts: index_d_default,
  emotionReactCssPropDts,
  emotionReactHelperDts: helper_d_default,
  emotionThemingDts,
  emotionSerializeDts,
  emotionUtilsDts: "https://unpkg.com/@emotion/utils/types/index.d.ts"
};
export {
  dtsFiles
};
