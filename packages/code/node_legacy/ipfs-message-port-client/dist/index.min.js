!function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? module.exports = t()
    : "function" == typeof define && define.amd
    ? define([], t)
    : "object" == typeof exports
    ? exports.IpfsMessagePortClient = t()
    : e.IpfsMessagePortClient = t();
}(
  self,
  (function () {
    return function (e) {
      var t = {};
      function n(s) {
        if (t[s]) return t[s].exports;
        var i = t[s] = { i: s, l: !1, exports: {} };
        return e[s].call(i.exports, i, i.exports, n), i.l = !0, i.exports;
      }
      return n.m = e,
        n.c = t,
        n.d = function (e, t, s) {
          n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: s });
        },
        n.r = function (e) {
          "undefined" != typeof Symbol && Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
            Object.defineProperty(e, "__esModule", { value: !0 });
        },
        n.t = function (e, t) {
          if (1 & t && (e = n(e)), 8 & t) return e;
          if (4 & t && "object" == typeof e && e && e.__esModule) return e;
          var s = Object.create(null);
          if (
            n.r(s),
              Object.defineProperty(s, "default", { enumerable: !0, value: e }),
              2 & t && "string" != typeof e
          ) {
            for (var i in e) {
              n.d(
                s,
                i,
                function (t) {
                  return e[t];
                }.bind(null, i),
              );
            }
          }
          return s;
        },
        n.n = function (e) {
          var t = e && e.__esModule ? function () {
            return e.default;
          } : function () {
            return e;
          };
          return n.d(t, "a", t), t;
        },
        n.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        },
        n.p = "",
        n(n.s = 12);
    }([function (e, t, n) {
      "use strict";
      const s = n(9);
      t.encodeCID = (e, t) => (t && t.push(e.multihash.buffer), e);
      t.decodeCID = (e) => {
        const t = e;
        return Object.setPrototypeOf(t.multihash, Uint8Array.prototype),
          Object.setPrototypeOf(t, s.prototype),
          Object.defineProperty(t, Symbol.for("@ipld/js-cid/CID"), {
            value: !0,
          }),
          t;
      }, t.CID = s;
    }, function (e, t, n) {
      "use strict";
      t.TextEncoder = TextEncoder, t.TextDecoder = TextDecoder;
    }, function (e, t, n) {
      "use strict";
      const s = n(6), { encodeText: i, decodeText: r, concat: o } = n(7);
      function a(e) {
        if (s.names[e]) return s.names[e];
        if (s.codes[e]) return s.codes[e];
        throw new Error("Unsupported encoding: " + e);
      }
      (t = e.exports = function (e, t) {
        if (!t) throw new Error("requires an encoded Uint8Array");
        const { name: n, codeBuf: s } = a(e);
        return function (e, t) {
          a(e).decode(r(t));
        }(n, t),
          o([s, t], s.length + t.length);
      }).encode = function (e, t) {
        const n = a(e), s = i(n.encode(t));
        return o([n.codeBuf, s], n.codeBuf.length + s.length);
      },
        t.decode = function (e) {
          e instanceof Uint8Array && (e = r(e));
          const t = e[0];
          return [
            "f",
            "F",
            "v",
            "V",
            "t",
            "T",
            "b",
            "B",
            "c",
            "C",
            "h",
            "k",
            "K",
          ].includes(t) && (e = e.toLowerCase()),
            a(e[0]).decode(e.substring(1));
        },
        t.isEncoded = function (e) {
          if (
            e instanceof Uint8Array && (e = r(e)),
              "[object String]" !== Object.prototype.toString.call(e)
          ) {
            return !1;
          }
          try {
            return a(e[0]).name;
          } catch (t) {
            return !1;
          }
        },
        t.encoding = a,
        t.encodingFromData = function (e) {
          return e instanceof Uint8Array && (e = r(e)), a(e[0]);
        },
        t.names = Object.freeze(s.names),
        t.codes = Object.freeze(s.codes);
    }, function (e, t, n) {
      "use strict";
      const s = Object.freeze({
        identity: 0,
        cidv1: 1,
        cidv2: 2,
        cidv3: 3,
        ip4: 4,
        tcp: 6,
        sha1: 17,
        "sha2-256": 18,
        "sha2-512": 19,
        "sha3-512": 20,
        "sha3-384": 21,
        "sha3-256": 22,
        "sha3-224": 23,
        "shake-128": 24,
        "shake-256": 25,
        "keccak-224": 26,
        "keccak-256": 27,
        "keccak-384": 28,
        "keccak-512": 29,
        blake3: 30,
        dccp: 33,
        "murmur3-128": 34,
        "murmur3-32": 35,
        ip6: 41,
        ip6zone: 42,
        path: 47,
        multicodec: 48,
        multihash: 49,
        multiaddr: 50,
        multibase: 51,
        dns: 53,
        dns4: 54,
        dns6: 55,
        dnsaddr: 56,
        protobuf: 80,
        cbor: 81,
        raw: 85,
        "dbl-sha2-256": 86,
        rlp: 96,
        bencode: 99,
        "dag-pb": 112,
        "dag-cbor": 113,
        "libp2p-key": 114,
        "git-raw": 120,
        "torrent-info": 123,
        "torrent-file": 124,
        "leofcoin-block": 129,
        "leofcoin-tx": 130,
        "leofcoin-pr": 131,
        sctp: 132,
        "dag-jose": 133,
        "dag-cose": 134,
        "eth-block": 144,
        "eth-block-list": 145,
        "eth-tx-trie": 146,
        "eth-tx": 147,
        "eth-tx-receipt-trie": 148,
        "eth-tx-receipt": 149,
        "eth-state-trie": 150,
        "eth-account-snapshot": 151,
        "eth-storage-trie": 152,
        "bitcoin-block": 176,
        "bitcoin-tx": 177,
        "bitcoin-witness-commitment": 178,
        "zcash-block": 192,
        "zcash-tx": 193,
        docid: 206,
        "stellar-block": 208,
        "stellar-tx": 209,
        md4: 212,
        md5: 213,
        bmt: 214,
        "decred-block": 224,
        "decred-tx": 225,
        "ipld-ns": 226,
        "ipfs-ns": 227,
        "swarm-ns": 228,
        "ipns-ns": 229,
        zeronet: 230,
        "secp256k1-pub": 231,
        "bls12_381-g1-pub": 234,
        "bls12_381-g2-pub": 235,
        "x25519-pub": 236,
        "ed25519-pub": 237,
        "bls12_381-g1g2-pub": 238,
        "dash-block": 240,
        "dash-tx": 241,
        "swarm-manifest": 250,
        "swarm-feed": 251,
        udp: 273,
        "p2p-webrtc-star": 275,
        "p2p-webrtc-direct": 276,
        "p2p-stardust": 277,
        "p2p-circuit": 290,
        "dag-json": 297,
        udt: 301,
        utp: 302,
        unix: 400,
        p2p: 421,
        ipfs: 421,
        https: 443,
        onion: 444,
        onion3: 445,
        garlic64: 446,
        garlic32: 447,
        tls: 448,
        quic: 460,
        ws: 477,
        wss: 478,
        "p2p-websocket-star": 479,
        http: 480,
        json: 512,
        messagepack: 513,
        "libp2p-peer-record": 769,
        "sha2-256-trunc254-padded": 4114,
        "ripemd-128": 4178,
        "ripemd-160": 4179,
        "ripemd-256": 4180,
        "ripemd-320": 4181,
        x11: 4352,
        "p256-pub": 4608,
        "p384-pub": 4609,
        "p521-pub": 4610,
        "ed448-pub": 4611,
        "x448-pub": 4612,
        "ed25519-priv": 4864,
        kangarootwelve: 7425,
        "sm3-256": 21325,
        "blake2b-8": 45569,
        "blake2b-16": 45570,
        "blake2b-24": 45571,
        "blake2b-32": 45572,
        "blake2b-40": 45573,
        "blake2b-48": 45574,
        "blake2b-56": 45575,
        "blake2b-64": 45576,
        "blake2b-72": 45577,
        "blake2b-80": 45578,
        "blake2b-88": 45579,
        "blake2b-96": 45580,
        "blake2b-104": 45581,
        "blake2b-112": 45582,
        "blake2b-120": 45583,
        "blake2b-128": 45584,
        "blake2b-136": 45585,
        "blake2b-144": 45586,
        "blake2b-152": 45587,
        "blake2b-160": 45588,
        "blake2b-168": 45589,
        "blake2b-176": 45590,
        "blake2b-184": 45591,
        "blake2b-192": 45592,
        "blake2b-200": 45593,
        "blake2b-208": 45594,
        "blake2b-216": 45595,
        "blake2b-224": 45596,
        "blake2b-232": 45597,
        "blake2b-240": 45598,
        "blake2b-248": 45599,
        "blake2b-256": 45600,
        "blake2b-264": 45601,
        "blake2b-272": 45602,
        "blake2b-280": 45603,
        "blake2b-288": 45604,
        "blake2b-296": 45605,
        "blake2b-304": 45606,
        "blake2b-312": 45607,
        "blake2b-320": 45608,
        "blake2b-328": 45609,
        "blake2b-336": 45610,
        "blake2b-344": 45611,
        "blake2b-352": 45612,
        "blake2b-360": 45613,
        "blake2b-368": 45614,
        "blake2b-376": 45615,
        "blake2b-384": 45616,
        "blake2b-392": 45617,
        "blake2b-400": 45618,
        "blake2b-408": 45619,
        "blake2b-416": 45620,
        "blake2b-424": 45621,
        "blake2b-432": 45622,
        "blake2b-440": 45623,
        "blake2b-448": 45624,
        "blake2b-456": 45625,
        "blake2b-464": 45626,
        "blake2b-472": 45627,
        "blake2b-480": 45628,
        "blake2b-488": 45629,
        "blake2b-496": 45630,
        "blake2b-504": 45631,
        "blake2b-512": 45632,
        "blake2s-8": 45633,
        "blake2s-16": 45634,
        "blake2s-24": 45635,
        "blake2s-32": 45636,
        "blake2s-40": 45637,
        "blake2s-48": 45638,
        "blake2s-56": 45639,
        "blake2s-64": 45640,
        "blake2s-72": 45641,
        "blake2s-80": 45642,
        "blake2s-88": 45643,
        "blake2s-96": 45644,
        "blake2s-104": 45645,
        "blake2s-112": 45646,
        "blake2s-120": 45647,
        "blake2s-128": 45648,
        "blake2s-136": 45649,
        "blake2s-144": 45650,
        "blake2s-152": 45651,
        "blake2s-160": 45652,
        "blake2s-168": 45653,
        "blake2s-176": 45654,
        "blake2s-184": 45655,
        "blake2s-192": 45656,
        "blake2s-200": 45657,
        "blake2s-208": 45658,
        "blake2s-216": 45659,
        "blake2s-224": 45660,
        "blake2s-232": 45661,
        "blake2s-240": 45662,
        "blake2s-248": 45663,
        "blake2s-256": 45664,
        "skein256-8": 45825,
        "skein256-16": 45826,
        "skein256-24": 45827,
        "skein256-32": 45828,
        "skein256-40": 45829,
        "skein256-48": 45830,
        "skein256-56": 45831,
        "skein256-64": 45832,
        "skein256-72": 45833,
        "skein256-80": 45834,
        "skein256-88": 45835,
        "skein256-96": 45836,
        "skein256-104": 45837,
        "skein256-112": 45838,
        "skein256-120": 45839,
        "skein256-128": 45840,
        "skein256-136": 45841,
        "skein256-144": 45842,
        "skein256-152": 45843,
        "skein256-160": 45844,
        "skein256-168": 45845,
        "skein256-176": 45846,
        "skein256-184": 45847,
        "skein256-192": 45848,
        "skein256-200": 45849,
        "skein256-208": 45850,
        "skein256-216": 45851,
        "skein256-224": 45852,
        "skein256-232": 45853,
        "skein256-240": 45854,
        "skein256-248": 45855,
        "skein256-256": 45856,
        "skein512-8": 45857,
        "skein512-16": 45858,
        "skein512-24": 45859,
        "skein512-32": 45860,
        "skein512-40": 45861,
        "skein512-48": 45862,
        "skein512-56": 45863,
        "skein512-64": 45864,
        "skein512-72": 45865,
        "skein512-80": 45866,
        "skein512-88": 45867,
        "skein512-96": 45868,
        "skein512-104": 45869,
        "skein512-112": 45870,
        "skein512-120": 45871,
        "skein512-128": 45872,
        "skein512-136": 45873,
        "skein512-144": 45874,
        "skein512-152": 45875,
        "skein512-160": 45876,
        "skein512-168": 45877,
        "skein512-176": 45878,
        "skein512-184": 45879,
        "skein512-192": 45880,
        "skein512-200": 45881,
        "skein512-208": 45882,
        "skein512-216": 45883,
        "skein512-224": 45884,
        "skein512-232": 45885,
        "skein512-240": 45886,
        "skein512-248": 45887,
        "skein512-256": 45888,
        "skein512-264": 45889,
        "skein512-272": 45890,
        "skein512-280": 45891,
        "skein512-288": 45892,
        "skein512-296": 45893,
        "skein512-304": 45894,
        "skein512-312": 45895,
        "skein512-320": 45896,
        "skein512-328": 45897,
        "skein512-336": 45898,
        "skein512-344": 45899,
        "skein512-352": 45900,
        "skein512-360": 45901,
        "skein512-368": 45902,
        "skein512-376": 45903,
        "skein512-384": 45904,
        "skein512-392": 45905,
        "skein512-400": 45906,
        "skein512-408": 45907,
        "skein512-416": 45908,
        "skein512-424": 45909,
        "skein512-432": 45910,
        "skein512-440": 45911,
        "skein512-448": 45912,
        "skein512-456": 45913,
        "skein512-464": 45914,
        "skein512-472": 45915,
        "skein512-480": 45916,
        "skein512-488": 45917,
        "skein512-496": 45918,
        "skein512-504": 45919,
        "skein512-512": 45920,
        "skein1024-8": 45921,
        "skein1024-16": 45922,
        "skein1024-24": 45923,
        "skein1024-32": 45924,
        "skein1024-40": 45925,
        "skein1024-48": 45926,
        "skein1024-56": 45927,
        "skein1024-64": 45928,
        "skein1024-72": 45929,
        "skein1024-80": 45930,
        "skein1024-88": 45931,
        "skein1024-96": 45932,
        "skein1024-104": 45933,
        "skein1024-112": 45934,
        "skein1024-120": 45935,
        "skein1024-128": 45936,
        "skein1024-136": 45937,
        "skein1024-144": 45938,
        "skein1024-152": 45939,
        "skein1024-160": 45940,
        "skein1024-168": 45941,
        "skein1024-176": 45942,
        "skein1024-184": 45943,
        "skein1024-192": 45944,
        "skein1024-200": 45945,
        "skein1024-208": 45946,
        "skein1024-216": 45947,
        "skein1024-224": 45948,
        "skein1024-232": 45949,
        "skein1024-240": 45950,
        "skein1024-248": 45951,
        "skein1024-256": 45952,
        "skein1024-264": 45953,
        "skein1024-272": 45954,
        "skein1024-280": 45955,
        "skein1024-288": 45956,
        "skein1024-296": 45957,
        "skein1024-304": 45958,
        "skein1024-312": 45959,
        "skein1024-320": 45960,
        "skein1024-328": 45961,
        "skein1024-336": 45962,
        "skein1024-344": 45963,
        "skein1024-352": 45964,
        "skein1024-360": 45965,
        "skein1024-368": 45966,
        "skein1024-376": 45967,
        "skein1024-384": 45968,
        "skein1024-392": 45969,
        "skein1024-400": 45970,
        "skein1024-408": 45971,
        "skein1024-416": 45972,
        "skein1024-424": 45973,
        "skein1024-432": 45974,
        "skein1024-440": 45975,
        "skein1024-448": 45976,
        "skein1024-456": 45977,
        "skein1024-464": 45978,
        "skein1024-472": 45979,
        "skein1024-480": 45980,
        "skein1024-488": 45981,
        "skein1024-496": 45982,
        "skein1024-504": 45983,
        "skein1024-512": 45984,
        "skein1024-520": 45985,
        "skein1024-528": 45986,
        "skein1024-536": 45987,
        "skein1024-544": 45988,
        "skein1024-552": 45989,
        "skein1024-560": 45990,
        "skein1024-568": 45991,
        "skein1024-576": 45992,
        "skein1024-584": 45993,
        "skein1024-592": 45994,
        "skein1024-600": 45995,
        "skein1024-608": 45996,
        "skein1024-616": 45997,
        "skein1024-624": 45998,
        "skein1024-632": 45999,
        "skein1024-640": 46e3,
        "skein1024-648": 46001,
        "skein1024-656": 46002,
        "skein1024-664": 46003,
        "skein1024-672": 46004,
        "skein1024-680": 46005,
        "skein1024-688": 46006,
        "skein1024-696": 46007,
        "skein1024-704": 46008,
        "skein1024-712": 46009,
        "skein1024-720": 46010,
        "skein1024-728": 46011,
        "skein1024-736": 46012,
        "skein1024-744": 46013,
        "skein1024-752": 46014,
        "skein1024-760": 46015,
        "skein1024-768": 46016,
        "skein1024-776": 46017,
        "skein1024-784": 46018,
        "skein1024-792": 46019,
        "skein1024-800": 46020,
        "skein1024-808": 46021,
        "skein1024-816": 46022,
        "skein1024-824": 46023,
        "skein1024-832": 46024,
        "skein1024-840": 46025,
        "skein1024-848": 46026,
        "skein1024-856": 46027,
        "skein1024-864": 46028,
        "skein1024-872": 46029,
        "skein1024-880": 46030,
        "skein1024-888": 46031,
        "skein1024-896": 46032,
        "skein1024-904": 46033,
        "skein1024-912": 46034,
        "skein1024-920": 46035,
        "skein1024-928": 46036,
        "skein1024-936": 46037,
        "skein1024-944": 46038,
        "skein1024-952": 46039,
        "skein1024-960": 46040,
        "skein1024-968": 46041,
        "skein1024-976": 46042,
        "skein1024-984": 46043,
        "skein1024-992": 46044,
        "skein1024-1000": 46045,
        "skein1024-1008": 46046,
        "skein1024-1016": 46047,
        "skein1024-1024": 46048,
        "poseidon-bls12_381-a2-fc1": 46081,
        "poseidon-bls12_381-a2-fc1-sc": 46082,
        "zeroxcert-imprint-256": 52753,
        "fil-commitment-unsealed": 61697,
        "fil-commitment-sealed": 61698,
        "holochain-adr-v0": 8417572,
        "holochain-adr-v1": 8483108,
        "holochain-key-v0": 9728292,
        "holochain-key-v1": 9793828,
        "holochain-sig-v0": 10645796,
        "holochain-sig-v1": 10711332,
        "skynet-ns": 11639056,
      });
      e.exports = { baseTable: s };
    }, function (e, t, n) {
      "use strict";
      const s = n(17);
      e.exports = class {
        constructor(e, t, n) {
          this.remote = new s(e, t, n);
        }
      };
    }, function (e, t, n) {
      "use strict";
      t.encodeError = (e) => {
        const { name: t, message: n, stack: s, code: i, detail: r } = e;
        return { name: t, message: n, stack: s, code: i, detail: r };
      };
      t.decodeError = (e) => {
        if (e instanceof Error) return e;
        {
          const { name: t, message: n, stack: i, code: r } = e;
          return Object.assign(s(t, n), { name: t, stack: i, code: r });
        }
      };
      const s = (e, t) => {
        switch (e) {
          case "RangeError":
            return new RangeError(t);
          case "ReferenceError":
            return ReferenceError(t);
          case "SyntaxError":
            return new SyntaxError(t);
          case "TypeError":
            return new TypeError(t);
          case "URIError":
            return new URIError(t);
          default:
            return new Error(t);
        }
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(19),
        i = n(20),
        { rfc4648: r } = n(21),
        { decodeText: o, encodeText: a } = n(7),
        c = [
          ["identity", "\0", () => ({ encode: o, decode: a }), ""],
          ["base2", "0", r(1), "01"],
          ["base8", "7", r(3), "01234567"],
          ["base10", "9", s, "0123456789"],
          ["base16", "f", r(4), "0123456789abcdef"],
          ["base16upper", "F", r(4), "0123456789ABCDEF"],
          ["base32hex", "v", r(5), "0123456789abcdefghijklmnopqrstuv"],
          ["base32hexupper", "V", r(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV"],
          ["base32hexpad", "t", r(5), "0123456789abcdefghijklmnopqrstuv="],
          ["base32hexpadupper", "T", r(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV="],
          ["base32", "b", r(5), "abcdefghijklmnopqrstuvwxyz234567"],
          ["base32upper", "B", r(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"],
          ["base32pad", "c", r(5), "abcdefghijklmnopqrstuvwxyz234567="],
          ["base32padupper", "C", r(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567="],
          ["base32z", "h", r(5), "ybndrfg8ejkmcpqxot1uwisza345h769"],
          ["base36", "k", s, "0123456789abcdefghijklmnopqrstuvwxyz"],
          ["base36upper", "K", s, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"],
          [
            "base58btc",
            "z",
            s,
            "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
          ],
          [
            "base58flickr",
            "Z",
            s,
            "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
          ],
          [
            "base64",
            "m",
            r(6),
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
          ],
          [
            "base64pad",
            "M",
            r(6),
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          ],
          [
            "base64url",
            "u",
            r(6),
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
          ],
          [
            "base64urlpad",
            "U",
            r(6),
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
          ],
        ],
        l = c.reduce(
          (e, t) => (e[t[0]] = new i(t[0], t[1], t[2], t[3]), e),
          {},
        ),
        k = c.reduce((e, t) => (e[t[1]] = l[t[0]], e), {});
      e.exports = { names: l, codes: k };
    }, function (e, t, n) {
      "use strict";
      const { TextEncoder: s, TextDecoder: i } = n(1), r = new i(), o = new s();
      e.exports = {
        decodeText: (e) => r.decode(e),
        encodeText: (e) => o.encode(e),
        concat: function (e, t) {
          const n = new Uint8Array(t);
          let s = 0;
          for (const i of e) n.set(i, s), s += i.length;
          return n;
        },
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = { encode: n(22), decode: n(23), encodingLength: n(24) };
    }, function (e, t, n) {
      "use strict";
      const s = n(10),
        i = n(2),
        r = n(29),
        { baseTable: o } = n(3),
        a = n(37),
        c = n(38),
        l = n(39),
        k = n(40),
        u = Object.keys(o).reduce((e, t) => (e[o[t]] = t, e), {}),
        d = Symbol.for("@ipld/js-cid/CID");
      class b {
        constructor(e, t, n, o) {
          if (
            this.version,
              this.codec,
              this.multihash,
              Object.defineProperty(this, d, { value: !0 }),
              b.isCID(e)
          ) {
            const t = e;
            return this.version = t.version,
              this.codec = t.codec,
              this.multihash = t.multihash,
              void (this.multibaseName = t.multibaseName ||
                (0 === t.version ? "base58btc" : "base32"));
          }
          if ("string" == typeof e) {
            const t = i.isEncoded(e);
            if (t) {
              const n = i.decode(e);
              this.version = parseInt(n[0].toString(), 16),
                this.codec = r.getCodec(n.slice(1)),
                this.multihash = r.rmPrefix(n.slice(1)),
                this.multibaseName = t;
            } else {
              this.version = 0,
                this.codec = "dag-pb",
                this.multihash = s.fromB58String(e),
                this.multibaseName = "base58btc";
            }
            return b.validateCID(this),
              void Object.defineProperty(this, "string", { value: e });
          }
          if (e instanceof Uint8Array) {
            const t = parseInt(e[0].toString(), 16);
            if (1 === t) {
              const n = e;
              this.version = t,
                this.codec = r.getCodec(n.slice(1)),
                this.multihash = r.rmPrefix(n.slice(1)),
                this.multibaseName = "base32";
            } else {
              this.version = 0,
                this.codec = "dag-pb",
                this.multihash = e,
                this.multibaseName = "base58btc";
            }
            b.validateCID(this);
          } else {
            this.version = e,
              "number" == typeof t && (t = u[t]),
              this.codec = t,
              this.multihash = n,
              this.multibaseName = o || (0 === e ? "base58btc" : "base32"),
              b.validateCID(this);
          }
        }
        get bytes() {
          let e = this._bytes;
          if (!e) {
            if (0 === this.version) e = this.multihash;
            else {
              if (1 !== this.version) throw new Error("unsupported version");
              {
                const t = r.getCodeVarint(this.codec);
                e = c(
                  [[1], t, this.multihash],
                  1 + t.byteLength + this.multihash.byteLength,
                );
              }
            }
            Object.defineProperty(this, "_bytes", { value: e });
          }
          return e;
        }
        get prefix() {
          const e = r.getCodeVarint(this.codec), t = s.prefix(this.multihash);
          return c([[this.version], e, t], 1 + e.byteLength + t.byteLength);
        }
        get code() {
          return o[this.codec];
        }
        toV0() {
          if ("dag-pb" !== this.codec) {
            throw new Error("Cannot convert a non dag-pb CID to CIDv0");
          }
          const { name: e, length: t } = s.decode(this.multihash);
          if ("sha2-256" !== e) {
            throw new Error(
              "Cannot convert non sha2-256 multihash CID to CIDv0",
            );
          }
          if (32 !== t) {
            throw new Error(
              "Cannot convert non 32 byte multihash CID to CIDv0",
            );
          }
          return new b(0, this.codec, this.multihash);
        }
        toV1() {
          return new b(1, this.codec, this.multihash);
        }
        toBaseEncodedString(e = this.multibaseName) {
          if (
            this.string && 0 !== this.string.length && e === this.multibaseName
          ) {
            return this.string;
          }
          let t;
          if (0 === this.version) {
            if ("base58btc" !== e) {
              throw new Error(
                "not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()",
              );
            }
            t = s.toB58String(this.multihash);
          } else {
            if (1 !== this.version) throw new Error("unsupported version");
            t = l(i.encode(e, this.bytes));
          }
          return e === this.multibaseName &&
            Object.defineProperty(this, "string", { value: t }),
            t;
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        toString(e) {
          return this.toBaseEncodedString(e);
        }
        toJSON() {
          return {
            codec: this.codec,
            version: this.version,
            hash: this.multihash,
          };
        }
        equals(e) {
          return this.codec === e.codec && this.version === e.version &&
            k(this.multihash, e.multihash);
        }
        static validateCID(e) {
          const t = a.checkCIDComponents(e);
          if (t) throw new Error(t);
        }
        static isCID(e) {
          return e instanceof b || Boolean(e && e[d]);
        }
      }
      b.codecs = o, e.exports = b;
    }, function (e, t, n) {
      "use strict";
      const s = n(2),
        i = n(8),
        { names: r } = n(25),
        o = n(26),
        a = n(27),
        c = n(28),
        l = {};
      for (const h in r) {
        const e = h;
        l[r[e]] = e;
      }
      function k(e) {
        if (!(e instanceof Uint8Array)) {
          throw new Error("multihash must be a Uint8Array");
        }
        if (e.length < 2) {
          throw new Error("multihash too short. must be > 2 bytes.");
        }
        const t = i.decode(e);
        if (!b(t)) {
          throw new Error(
            "multihash unknown function code: 0x" + t.toString(16),
          );
        }
        e = e.slice(i.decode.bytes);
        const n = i.decode(e);
        if (n < 0) throw new Error("multihash invalid length: " + n);
        if ((e = e.slice(i.decode.bytes)).length !== n) {
          throw new Error("multihash length inconsistent: 0x" + o(e, "base16"));
        }
        return { code: t, name: l[t], length: n, digest: e };
      }
      function u(e) {
        let t = e;
        if ("string" == typeof e) {
          if (void 0 === r[e]) {
            throw new Error("Unrecognized hash function named: " + e);
          }
          t = r[e];
        }
        if ("number" != typeof t) {
          throw new Error("Hash function code should be a number. Got: " + t);
        }
        if (void 0 === l[t] && !d(t)) {
          throw new Error("Unrecognized function code: " + t);
        }
        return t;
      }
      function d(e) {
        return e > 0 && e < 16;
      }
      function b(e) {
        return !!d(e) || !!l[e];
      }
      function f(e) {
        k(e);
      }
      e.exports = {
        names: r,
        codes: Object.freeze(l),
        toHexString: function (e) {
          if (!(e instanceof Uint8Array)) {
            throw new Error("must be passed a Uint8Array");
          }
          return o(e, "base16");
        },
        fromHexString: function (e) {
          return a(e, "base16");
        },
        toB58String: function (e) {
          if (!(e instanceof Uint8Array)) {
            throw new Error("must be passed a Uint8Array");
          }
          return o(s.encode("base58btc", e)).slice(1);
        },
        fromB58String: function (e) {
          const t = e instanceof Uint8Array ? o(e) : e;
          return s.decode("z" + t);
        },
        decode: k,
        encode: function (e, t, n) {
          if (!e || void 0 === t) {
            throw new Error(
              "multihash encode requires at least two args: digest, code",
            );
          }
          const s = u(t);
          if (!(e instanceof Uint8Array)) {
            throw new Error("digest should be a Uint8Array");
          }
          if (null == n && (n = e.length), n && e.length !== n) {
            throw new Error(
              "digest length should be equal to specified length.",
            );
          }
          const r = i.encode(s), o = i.encode(n);
          return c([r, o, e], r.length + o.length + e.length);
        },
        coerceCode: u,
        isAppCode: d,
        validate: f,
        prefix: function (e) {
          return f(e), e.subarray(0, 2);
        },
        isValidCode: b,
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(8), i = n(32), r = n(33);
      function o(e) {
        return parseInt(i(e, "base16"), 16);
      }
      e.exports = {
        numberToUint8Array: function (e) {
          let t = e.toString(16);
          t.length % 2 == 1 && (t = "0" + t);
          return r(t, "base16");
        },
        uint8ArrayToNumber: o,
        varintUint8ArrayEncode: function (e) {
          return Uint8Array.from(s.encode(o(e)));
        },
        varintEncode: function (e) {
          return Uint8Array.from(s.encode(e));
        },
      };
    }, function (e, t, n) {
      e.exports = n(13);
    }, function (e, t, n) {
      "use strict";
      const s = n(14), i = n(16), r = n(44), o = n(46), a = n(49);
      class c extends o {
        constructor(e) {
          super(e),
            this.transport = e,
            this.dag = new r(this.transport),
            this.files = new a(this.transport),
            this.block = new i(this.transport);
        }
        static attach(e, t) {
          e.transport.connect(t);
        }
        static detached() {
          return new c(new s(void 0));
        }
        static from(e) {
          return new c(new s(e));
        }
      }
      e.exports = c;
    }, function (e, t, n) {
      "use strict";
      const { decodeError: s } = n(5),
        { DisconnectError: i, TimeoutError: r, AbortError: o } = n(15);
      e.exports = class e {
        constructor(e) {
          this.port = null,
            this.id = Math.random().toString(32).slice(2),
            this.nextID = 0,
            this.queries = Object.create(null),
            e && this.connect(e);
        }
        execute(t) {
          const n = `${this.id}@${this.nextID++}`;
          return this.queries[n] = t,
            t.timeout > 0 && t.timeout < 1 / 0 &&
            (t.timerID = setTimeout(e.timeout, t.timeout, this, n)),
            t.signal &&
            t.signal.addEventListener("abort", () => this.abort(n), {
              once: !0,
            }),
            this.port && e.postQuery(this.port, n, t),
            t.result;
        }
        connect(t) {
          if (this.port) throw new Error("Transport is already open");
          this.port = t,
            this.port.addEventListener("message", this),
            this.port.start();
          for (const [n, s] of Object.entries(this.queries)) {
            e.postQuery(t, n, s);
          }
        }
        disconnect() {
          const e = new i();
          for (const [t, n] of Object.entries(this.queries)) {
            n.fail(e), this.abort(t);
          }
          this.port &&
            (this.port.removeEventListener("message", this), this.port.close());
        }
        static timeout(e, t) {
          const { queries: n } = e, s = n[t];
          s &&
            (delete n[t],
              s.fail(new r("request timed out")),
              e.port && e.port.postMessage({ type: "abort", id: t }));
        }
        abort(e) {
          const { queries: t } = this, n = t[e];
          n &&
            (delete t[e],
              n.fail(new o()),
              this.port && this.port.postMessage({ type: "abort", id: e }),
              null != n.timerID && clearTimeout(n.timerID));
        }
        static postQuery(e, t, n) {
          e.postMessage({
            type: "query",
            namespace: n.namespace,
            method: n.method,
            id: t,
            input: n.toJSON(),
          }, [...new Set(n.transfer() || [])]);
        }
        handleEvent(e) {
          const { id: t, result: n } = e.data, i = this.queries[t];
          i &&
            (delete this.queries[t],
              n.ok ? i.succeed(n.value) : i.fail(s(n.error)),
              null != i.timerID && clearTimeout(i.timerID));
        }
      };
    }, function (e, t, n) {
      "use strict";
      t.TimeoutError = class extends Error {
        get name() {
          return this.constructor.name;
        }
      },
        t.AbortError = class extends Error {
          get name() {
            return this.constructor.name;
          }
        },
        t.DisconnectError = class extends Error {
          get name() {
            return this.constructor.name;
          }
        };
    }, function (e, t, n) {
      "use strict";
      const s = n(4),
        { encodeCID: i, decodeCID: r } = n(0),
        { decodeError: o } = n(5),
        { encodeBlock: a, decodeBlock: c } = n(41);
      const l = (e) => {
        const t = r(e.cid);
        return e.error ? { cid: t, error: o(e.error) } : { cid: t };
      };
      e.exports = class extends s {
        constructor(e) {
          super("block", ["put", "get", "rm", "stat"], e);
        }
        async get(e, t = {}) {
          const { transfer: n } = t,
            { block: s } = await this.remote.get({ ...t, cid: i(e, n) });
          return c(s);
        }
        async put(e, t = {}) {
          const { transfer: n } = t;
          delete t.progress;
          const s = await this.remote.put({
            ...t,
            cid: null == t.cid ? void 0 : i(t.cid, n),
            block: e instanceof Uint8Array ? e : a(e, n),
          });
          return c(s.block);
        }
        async *rm(e, t = {}) {
          const { transfer: n } = t,
            s = await this.remote.rm({
              ...t,
              cids: Array.isArray(e) ? e.map((e) => i(e, n)) : [i(e, n)],
            });
          yield* s.map(l);
        }
        async stat(e, t = {}) {
          const { transfer: n } = t,
            s = await this.remote.stat({ ...t, cid: i(e, n) });
          return { ...s, cid: r(s.cid) };
        }
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(18);
      e.exports = class {
        constructor(e, t, n) {
          this.transport = n;
          const i = this;
          for (const r of t) {
            i[r] = (t) => this.transport.execute(new s(e, r.toString(), t));
          }
        }
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = class {
        constructor(e, t, n) {
          this.result = new Promise((s, i) => {
            this.succeed = s,
              this.fail = i,
              this.signal = n.signal,
              this.input = n,
              this.namespace = e,
              this.method = t,
              this.timeout = null == n.timeout ? 1 / 0 : n.timeout,
              this.timerID = null;
          });
        }
        toJSON() {
          return this.input;
        }
        transfer() {
          return this.input.transfer;
        }
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = function (e) {
        if (e.length >= 255) throw new TypeError("Alphabet too long");
        for (var t = new Uint8Array(256), n = 0; n < t.length; n++) t[n] = 255;
        for (var s = 0; s < e.length; s++) {
          var i = e.charAt(s), r = i.charCodeAt(0);
          if (255 !== t[r]) throw new TypeError(i + " is ambiguous");
          t[r] = s;
        }
        var o = e.length,
          a = e.charAt(0),
          c = Math.log(o) / Math.log(256),
          l = Math.log(256) / Math.log(o);
        function k(e) {
          if ("string" != typeof e) throw new TypeError("Expected String");
          if (0 === e.length) return new Uint8Array();
          var n = 0;
          if (" " !== e[n]) {
            for (var s = 0, i = 0; e[n] === a;) s++, n++;
            for (
              var r = (e.length - n) * c + 1 >>> 0, l = new Uint8Array(r);
              e[n];
            ) {
              var k = t[e.charCodeAt(n)];
              if (255 === k) return;
              for (
                var u = 0, d = r - 1;
                (0 !== k || u < i) && -1 !== d;
                d--, u++
              ) {
                k += o * l[d] >>> 0, l[d] = k % 256 >>> 0, k = k / 256 >>> 0;
              }
              if (0 !== k) throw new Error("Non-zero carry");
              i = u, n++;
            }
            if (" " !== e[n]) {
              for (var b = r - i; b !== r && 0 === l[b];) b++;
              for (var f = new Uint8Array(s + (r - b)), h = s; b !== r;) {
                f[h++] = l[b++];
              }
              return f;
            }
          }
        }
        return {
          encode: function (t) {
            if (
              t instanceof Uint8Array ||
              (ArrayBuffer.isView(t)
                ? t = new Uint8Array(t.buffer, t.byteOffset, t.byteLength)
                : Array.isArray(t) && (t = Uint8Array.from(t))),
                !(t instanceof Uint8Array)
            ) {
              throw new TypeError("Expected Uint8Array");
            }
            if (0 === t.length) return "";
            for (
              var n = 0, s = 0, i = 0, r = t.length;
              i !== r && 0 === t[i];
            ) {
              i++, n++;
            }
            for (
              var c = (r - i) * l + 1 >>> 0, k = new Uint8Array(c);
              i !== r;
            ) {
              for (
                var u = t[i], d = 0, b = c - 1;
                (0 !== u || d < s) && -1 !== b;
                b--, d++
              ) {
                u += 256 * k[b] >>> 0, k[b] = u % o >>> 0, u = u / o >>> 0;
              }
              if (0 !== u) throw new Error("Non-zero carry");
              s = d, i++;
            }
            for (var f = c - s; f !== c && 0 === k[f];) f++;
            for (var h = a.repeat(n); f < c; ++f) h += e.charAt(k[f]);
            return h;
          },
          decodeUnsafe: k,
          decode: function (e) {
            var t = k(e);
            if (t) return t;
            throw new Error("Non-base" + o + " character");
          },
        };
      };
    }, function (e, t, n) {
      "use strict";
      const { encodeText: s } = n(7);
      e.exports = class {
        constructor(e, t, n, i) {
          this.name = e,
            this.code = t,
            this.codeBuf = s(this.code),
            this.alphabet = i,
            this.codec = n(i);
        }
        encode(e) {
          return this.codec.encode(e);
        }
        decode(e) {
          for (const t of e) {
            if (this.alphabet && this.alphabet.indexOf(t) < 0) {
              throw new Error(`invalid character '${t}' in '${e}'`);
            }
          }
          return this.codec.decode(e);
        }
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = {
        rfc4648: (e) =>
          (t) => ({
            encode: (n) =>
              ((e, t, n) => {
                const s = "=" === t[t.length - 1], i = (1 << n) - 1;
                let r = "", o = 0, a = 0;
                for (let c = 0; c < e.length; ++c) {
                  for (a = a << 8 | e[c], o += 8; o > n;) {
                    o -= n, r += t[i & a >> o];
                  }
                }
                if (o && (r += t[i & a << n - o]), s) {
                  for (; r.length * n & 7;) {
                    r += "=";
                  }
                }
                return r;
              })(n, t, e),
            decode: (n) =>
              ((e, t, n) => {
                const s = {};
                for (let l = 0; l < t.length; ++l) s[t[l]] = l;
                let i = e.length;
                for (; "=" === e[i - 1];) --i;
                const r = new Uint8Array(i * n / 8 | 0);
                let o = 0, a = 0, c = 0;
                for (let l = 0; l < i; ++l) {
                  const t = s[e[l]];
                  if (void 0 === t) {
                    throw new SyntaxError("Invalid character " + e[l]);
                  }
                  a = a << n | t,
                    o += n,
                    o >= 8 && (o -= 8, r[c++] = 255 & a >> o);
                }
                if (o >= n || 255 & a << 8 - o) {
                  throw new SyntaxError("Unexpected end of data");
                }
                return r;
              })(n, t, e),
          }),
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = function e(t, n, i) {
        if (Number.MAX_SAFE_INTEGER && t > Number.MAX_SAFE_INTEGER) {
          throw e.bytes = 0, new RangeError("Could not encode varint");
        }
        n = n || [];
        var r = i = i || 0;
        for (; t >= s;) {
          n[i++] = 255 & t | 128, t /= 128;
        }
        for (; -128 & t;) n[i++] = 255 & t | 128, t >>>= 7;
        return n[i] = 0 | t, e.bytes = i - r + 1, n;
      };
      var s = Math.pow(2, 31);
    }, function (e, t, n) {
      "use strict";
      e.exports = function e(t, n) {
        var s, i = 0, r = 0, o = n = n || 0, a = t.length;
        do {
          if (o >= a || r > 49) {
            throw e.bytes = 0, new RangeError("Could not decode varint");
          }
          s = t[o++],
            i += r < 28 ? (127 & s) << r : (127 & s) * Math.pow(2, r),
            r += 7;
        } while (s >= 128);
        return e.bytes = o - n, i;
      };
    }, function (e, t, n) {
      "use strict";
      var s = Math.pow(2, 7),
        i = Math.pow(2, 14),
        r = Math.pow(2, 21),
        o = Math.pow(2, 28),
        a = Math.pow(2, 35),
        c = Math.pow(2, 42),
        l = Math.pow(2, 49),
        k = Math.pow(2, 56),
        u = Math.pow(2, 63);
      e.exports = function (e) {
        return e < s
          ? 1
          : e < i
          ? 2
          : e < r
          ? 3
          : e < o
          ? 4
          : e < a
          ? 5
          : e < c
          ? 6
          : e < l
          ? 7
          : e < k
          ? 8
          : e < u
          ? 9
          : 10;
      };
    }, function (e, t, n) {
      "use strict";
      const s = Object.freeze({
        identity: 0,
        sha1: 17,
        "sha2-256": 18,
        "sha2-512": 19,
        "sha3-512": 20,
        "sha3-384": 21,
        "sha3-256": 22,
        "sha3-224": 23,
        "shake-128": 24,
        "shake-256": 25,
        "keccak-224": 26,
        "keccak-256": 27,
        "keccak-384": 28,
        "keccak-512": 29,
        blake3: 30,
        "murmur3-128": 34,
        "murmur3-32": 35,
        "dbl-sha2-256": 86,
        md4: 212,
        md5: 213,
        bmt: 214,
        "sha2-256-trunc254-padded": 4114,
        "ripemd-128": 4178,
        "ripemd-160": 4179,
        "ripemd-256": 4180,
        "ripemd-320": 4181,
        x11: 4352,
        kangarootwelve: 7425,
        "sm3-256": 21325,
        "blake2b-8": 45569,
        "blake2b-16": 45570,
        "blake2b-24": 45571,
        "blake2b-32": 45572,
        "blake2b-40": 45573,
        "blake2b-48": 45574,
        "blake2b-56": 45575,
        "blake2b-64": 45576,
        "blake2b-72": 45577,
        "blake2b-80": 45578,
        "blake2b-88": 45579,
        "blake2b-96": 45580,
        "blake2b-104": 45581,
        "blake2b-112": 45582,
        "blake2b-120": 45583,
        "blake2b-128": 45584,
        "blake2b-136": 45585,
        "blake2b-144": 45586,
        "blake2b-152": 45587,
        "blake2b-160": 45588,
        "blake2b-168": 45589,
        "blake2b-176": 45590,
        "blake2b-184": 45591,
        "blake2b-192": 45592,
        "blake2b-200": 45593,
        "blake2b-208": 45594,
        "blake2b-216": 45595,
        "blake2b-224": 45596,
        "blake2b-232": 45597,
        "blake2b-240": 45598,
        "blake2b-248": 45599,
        "blake2b-256": 45600,
        "blake2b-264": 45601,
        "blake2b-272": 45602,
        "blake2b-280": 45603,
        "blake2b-288": 45604,
        "blake2b-296": 45605,
        "blake2b-304": 45606,
        "blake2b-312": 45607,
        "blake2b-320": 45608,
        "blake2b-328": 45609,
        "blake2b-336": 45610,
        "blake2b-344": 45611,
        "blake2b-352": 45612,
        "blake2b-360": 45613,
        "blake2b-368": 45614,
        "blake2b-376": 45615,
        "blake2b-384": 45616,
        "blake2b-392": 45617,
        "blake2b-400": 45618,
        "blake2b-408": 45619,
        "blake2b-416": 45620,
        "blake2b-424": 45621,
        "blake2b-432": 45622,
        "blake2b-440": 45623,
        "blake2b-448": 45624,
        "blake2b-456": 45625,
        "blake2b-464": 45626,
        "blake2b-472": 45627,
        "blake2b-480": 45628,
        "blake2b-488": 45629,
        "blake2b-496": 45630,
        "blake2b-504": 45631,
        "blake2b-512": 45632,
        "blake2s-8": 45633,
        "blake2s-16": 45634,
        "blake2s-24": 45635,
        "blake2s-32": 45636,
        "blake2s-40": 45637,
        "blake2s-48": 45638,
        "blake2s-56": 45639,
        "blake2s-64": 45640,
        "blake2s-72": 45641,
        "blake2s-80": 45642,
        "blake2s-88": 45643,
        "blake2s-96": 45644,
        "blake2s-104": 45645,
        "blake2s-112": 45646,
        "blake2s-120": 45647,
        "blake2s-128": 45648,
        "blake2s-136": 45649,
        "blake2s-144": 45650,
        "blake2s-152": 45651,
        "blake2s-160": 45652,
        "blake2s-168": 45653,
        "blake2s-176": 45654,
        "blake2s-184": 45655,
        "blake2s-192": 45656,
        "blake2s-200": 45657,
        "blake2s-208": 45658,
        "blake2s-216": 45659,
        "blake2s-224": 45660,
        "blake2s-232": 45661,
        "blake2s-240": 45662,
        "blake2s-248": 45663,
        "blake2s-256": 45664,
        "skein256-8": 45825,
        "skein256-16": 45826,
        "skein256-24": 45827,
        "skein256-32": 45828,
        "skein256-40": 45829,
        "skein256-48": 45830,
        "skein256-56": 45831,
        "skein256-64": 45832,
        "skein256-72": 45833,
        "skein256-80": 45834,
        "skein256-88": 45835,
        "skein256-96": 45836,
        "skein256-104": 45837,
        "skein256-112": 45838,
        "skein256-120": 45839,
        "skein256-128": 45840,
        "skein256-136": 45841,
        "skein256-144": 45842,
        "skein256-152": 45843,
        "skein256-160": 45844,
        "skein256-168": 45845,
        "skein256-176": 45846,
        "skein256-184": 45847,
        "skein256-192": 45848,
        "skein256-200": 45849,
        "skein256-208": 45850,
        "skein256-216": 45851,
        "skein256-224": 45852,
        "skein256-232": 45853,
        "skein256-240": 45854,
        "skein256-248": 45855,
        "skein256-256": 45856,
        "skein512-8": 45857,
        "skein512-16": 45858,
        "skein512-24": 45859,
        "skein512-32": 45860,
        "skein512-40": 45861,
        "skein512-48": 45862,
        "skein512-56": 45863,
        "skein512-64": 45864,
        "skein512-72": 45865,
        "skein512-80": 45866,
        "skein512-88": 45867,
        "skein512-96": 45868,
        "skein512-104": 45869,
        "skein512-112": 45870,
        "skein512-120": 45871,
        "skein512-128": 45872,
        "skein512-136": 45873,
        "skein512-144": 45874,
        "skein512-152": 45875,
        "skein512-160": 45876,
        "skein512-168": 45877,
        "skein512-176": 45878,
        "skein512-184": 45879,
        "skein512-192": 45880,
        "skein512-200": 45881,
        "skein512-208": 45882,
        "skein512-216": 45883,
        "skein512-224": 45884,
        "skein512-232": 45885,
        "skein512-240": 45886,
        "skein512-248": 45887,
        "skein512-256": 45888,
        "skein512-264": 45889,
        "skein512-272": 45890,
        "skein512-280": 45891,
        "skein512-288": 45892,
        "skein512-296": 45893,
        "skein512-304": 45894,
        "skein512-312": 45895,
        "skein512-320": 45896,
        "skein512-328": 45897,
        "skein512-336": 45898,
        "skein512-344": 45899,
        "skein512-352": 45900,
        "skein512-360": 45901,
        "skein512-368": 45902,
        "skein512-376": 45903,
        "skein512-384": 45904,
        "skein512-392": 45905,
        "skein512-400": 45906,
        "skein512-408": 45907,
        "skein512-416": 45908,
        "skein512-424": 45909,
        "skein512-432": 45910,
        "skein512-440": 45911,
        "skein512-448": 45912,
        "skein512-456": 45913,
        "skein512-464": 45914,
        "skein512-472": 45915,
        "skein512-480": 45916,
        "skein512-488": 45917,
        "skein512-496": 45918,
        "skein512-504": 45919,
        "skein512-512": 45920,
        "skein1024-8": 45921,
        "skein1024-16": 45922,
        "skein1024-24": 45923,
        "skein1024-32": 45924,
        "skein1024-40": 45925,
        "skein1024-48": 45926,
        "skein1024-56": 45927,
        "skein1024-64": 45928,
        "skein1024-72": 45929,
        "skein1024-80": 45930,
        "skein1024-88": 45931,
        "skein1024-96": 45932,
        "skein1024-104": 45933,
        "skein1024-112": 45934,
        "skein1024-120": 45935,
        "skein1024-128": 45936,
        "skein1024-136": 45937,
        "skein1024-144": 45938,
        "skein1024-152": 45939,
        "skein1024-160": 45940,
        "skein1024-168": 45941,
        "skein1024-176": 45942,
        "skein1024-184": 45943,
        "skein1024-192": 45944,
        "skein1024-200": 45945,
        "skein1024-208": 45946,
        "skein1024-216": 45947,
        "skein1024-224": 45948,
        "skein1024-232": 45949,
        "skein1024-240": 45950,
        "skein1024-248": 45951,
        "skein1024-256": 45952,
        "skein1024-264": 45953,
        "skein1024-272": 45954,
        "skein1024-280": 45955,
        "skein1024-288": 45956,
        "skein1024-296": 45957,
        "skein1024-304": 45958,
        "skein1024-312": 45959,
        "skein1024-320": 45960,
        "skein1024-328": 45961,
        "skein1024-336": 45962,
        "skein1024-344": 45963,
        "skein1024-352": 45964,
        "skein1024-360": 45965,
        "skein1024-368": 45966,
        "skein1024-376": 45967,
        "skein1024-384": 45968,
        "skein1024-392": 45969,
        "skein1024-400": 45970,
        "skein1024-408": 45971,
        "skein1024-416": 45972,
        "skein1024-424": 45973,
        "skein1024-432": 45974,
        "skein1024-440": 45975,
        "skein1024-448": 45976,
        "skein1024-456": 45977,
        "skein1024-464": 45978,
        "skein1024-472": 45979,
        "skein1024-480": 45980,
        "skein1024-488": 45981,
        "skein1024-496": 45982,
        "skein1024-504": 45983,
        "skein1024-512": 45984,
        "skein1024-520": 45985,
        "skein1024-528": 45986,
        "skein1024-536": 45987,
        "skein1024-544": 45988,
        "skein1024-552": 45989,
        "skein1024-560": 45990,
        "skein1024-568": 45991,
        "skein1024-576": 45992,
        "skein1024-584": 45993,
        "skein1024-592": 45994,
        "skein1024-600": 45995,
        "skein1024-608": 45996,
        "skein1024-616": 45997,
        "skein1024-624": 45998,
        "skein1024-632": 45999,
        "skein1024-640": 46e3,
        "skein1024-648": 46001,
        "skein1024-656": 46002,
        "skein1024-664": 46003,
        "skein1024-672": 46004,
        "skein1024-680": 46005,
        "skein1024-688": 46006,
        "skein1024-696": 46007,
        "skein1024-704": 46008,
        "skein1024-712": 46009,
        "skein1024-720": 46010,
        "skein1024-728": 46011,
        "skein1024-736": 46012,
        "skein1024-744": 46013,
        "skein1024-752": 46014,
        "skein1024-760": 46015,
        "skein1024-768": 46016,
        "skein1024-776": 46017,
        "skein1024-784": 46018,
        "skein1024-792": 46019,
        "skein1024-800": 46020,
        "skein1024-808": 46021,
        "skein1024-816": 46022,
        "skein1024-824": 46023,
        "skein1024-832": 46024,
        "skein1024-840": 46025,
        "skein1024-848": 46026,
        "skein1024-856": 46027,
        "skein1024-864": 46028,
        "skein1024-872": 46029,
        "skein1024-880": 46030,
        "skein1024-888": 46031,
        "skein1024-896": 46032,
        "skein1024-904": 46033,
        "skein1024-912": 46034,
        "skein1024-920": 46035,
        "skein1024-928": 46036,
        "skein1024-936": 46037,
        "skein1024-944": 46038,
        "skein1024-952": 46039,
        "skein1024-960": 46040,
        "skein1024-968": 46041,
        "skein1024-976": 46042,
        "skein1024-984": 46043,
        "skein1024-992": 46044,
        "skein1024-1000": 46045,
        "skein1024-1008": 46046,
        "skein1024-1016": 46047,
        "skein1024-1024": 46048,
        "poseidon-bls12_381-a2-fc1": 46081,
        "poseidon-bls12_381-a2-fc1-sc": 46082,
      });
      e.exports = { names: s };
    }, function (e, t, n) {
      "use strict";
      const { encoding: s } = n(2),
        { TextDecoder: i } = n(1),
        r = new i("utf8");
      e.exports = function (e, t = "utf8") {
        return "utf8" === t || "utf-8" === t
          ? r.decode(e)
          : "ascii" === t
          ? function (e) {
            let t = "";
            for (let n = 0; n < e.length; n++) t += String.fromCharCode(e[n]);
            return t;
          }(e)
          : s(t).encode(e);
      };
    }, function (e, t, n) {
      "use strict";
      const { encoding: s } = n(2), { TextEncoder: i } = n(1), r = new i();
      e.exports = function (e, t = "utf8") {
        return "utf8" === t || "utf-8" === t
          ? r.encode(e)
          : "ascii" === t
          ? function (e) {
            const t = new Uint8Array(e.length);
            for (let n = 0; n < e.length; n++) t[n] = e.charCodeAt(n);
            return t;
          }(e)
          : s(t).decode(e);
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = function (e, t) {
        t || (t = e.reduce((e, t) => e + t.length, 0));
        const n = new Uint8Array(t);
        let s = 0;
        for (const i of e) n.set(i, s), s += i.length;
        return n;
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(8), i = n(30), r = n(31), o = n(11), a = n(34);
      const c = n(35), l = n(36);
      e.exports = {
        addPrefix: function (e, t) {
          let n;
          if (e instanceof Uint8Array) n = o.varintUint8ArrayEncode(e);
          else {
            if (!r[e]) throw new Error("multicodec not recognized");
            n = r[e];
          }
          return a([n, t], n.length + t.length);
        },
        rmPrefix: function (e) {
          return s.decode(e), e.slice(s.decode.bytes);
        },
        getCodec: function (e) {
          const t = s.decode(e), n = i.get(t);
          if (void 0 === n) throw new Error(`Code ${t} not found`);
          return n;
        },
        getName: function (e) {
          return i.get(e);
        },
        getNumber: function (e) {
          const t = r[e];
          if (void 0 === t) throw new Error("Codec `" + e + "` not found");
          return s.decode(t);
        },
        getCode: function (e) {
          return s.decode(e);
        },
        getCodeVarint: function (e) {
          const t = r[e];
          if (void 0 === t) throw new Error("Codec `" + e + "` not found");
          return t;
        },
        getVarint: function (e) {
          return s.encode(e);
        },
        print: l,
        ...c,
      };
    }, function (e, t, n) {
      "use strict";
      const { baseTable: s } = n(3), i = new Map();
      for (const r in s) {
        const e = s[r];
        i.set(e, r);
      }
      e.exports = Object.freeze(i);
    }, function (e, t, n) {
      "use strict";
      const { baseTable: s } = n(3), i = n(11).varintEncode, r = {};
      for (const o in s) {
        const e = s[o];
        r[o] = i(e);
      }
      e.exports = Object.freeze(r);
    }, function (e, t, n) {
      "use strict";
      const { names: s } = n(6), { TextDecoder: i } = n(1), r = new i("utf8");
      e.exports = function (e, t = "utf8") {
        if ("utf8" === t || "utf-8" === t) return r.decode(e);
        if ("ascii" === t) {
          return function (e) {
            let t = "";
            for (let n = 0; n < e.length; n++) t += String.fromCharCode(e[n]);
            return t;
          }(e);
        }
        const n = s[t];
        if (!n) throw new Error("Unknown base");
        return n.encode(e);
      };
    }, function (e, t, n) {
      "use strict";
      const { names: s } = n(6), { TextEncoder: i } = n(1), r = new i();
      e.exports = function (e, t = "utf8") {
        if ("utf8" === t || "utf-8" === t) return r.encode(e);
        if ("ascii" === t) {
          return function (e) {
            const t = new Uint8Array(e.length);
            for (let n = 0; n < e.length; n++) t[n] = e.charCodeAt(n);
            return t;
          }(e);
        }
        const n = s[t];
        if (!n) throw new Error("Unknown base");
        return n.decode(e);
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = function (e, t) {
        t || (t = e.reduce((e, t) => e + t.length, 0));
        const n = new Uint8Array(t);
        let s = 0;
        for (const i of e) n.set(i, s), s += i.length;
        return n;
      };
    }, function (e, t, n) {
      "use strict";
      const { baseTable: s } = n(3), i = {};
      for (
        const [r, o] of Object.entries(s)
      ) {
        i[r.toUpperCase().replace(/-/g, "_")] = o;
      }
      e.exports = Object.freeze(i);
    }, function (e, t, n) {
      "use strict";
      const { baseTable: s } = n(3), i = {};
      for (const [r, o] of Object.entries(s)) void 0 === i[o] && (i[o] = r);
      e.exports = Object.freeze(i);
    }, function (e, t, n) {
      "use strict";
      const s = n(10),
        i = {
          checkCIDComponents: function (e) {
            if (null == e) return "null values are not valid CIDs";
            if (0 !== e.version && 1 !== e.version) {
              return "Invalid version, must be a number equal to 1 or 0";
            }
            if ("string" != typeof e.codec) {
              return "codec must be string";
            }
            if (0 === e.version) {
              if ("dag-pb" !== e.codec) {
                return "codec must be 'dag-pb' for CIDv0";
              }
              if (
                "base58btc" !== e.multibaseName
              ) {
                return "multibaseName must be 'base58btc' for CIDv0";
              }
            }
            if (
              !(e.multihash instanceof Uint8Array)
            ) {
              return "multihash must be a Uint8Array";
            }
            try {
              s.validate(e.multihash);
            } catch (t) {
              let e = t.message;
              return e || (e = "Multihash validation failed"), e;
            }
          },
        };
      e.exports = i;
    }, function (e, t, n) {
      "use strict";
      e.exports = function (e, t) {
        t || (t = e.reduce((e, t) => e + t.length, 0));
        const n = new Uint8Array(t);
        let s = 0;
        for (const i of e) n.set(i, s), s += i.length;
        return n;
      };
    }, function (e, t, n) {
      "use strict";
      const { encoding: s } = n(2),
        { TextDecoder: i } = n(1),
        r = new i("utf8");
      e.exports = function (e, t = "utf8") {
        return "utf8" === t || "utf-8" === t
          ? r.decode(e)
          : "ascii" === t
          ? function (e) {
            let t = "";
            for (let n = 0; n < e.length; n++) t += String.fromCharCode(e[n]);
            return t;
          }(e)
          : s(t).encode(e);
      };
    }, function (e, t, n) {
      "use strict";
      e.exports = function (e, t) {
        if (e === t) return !0;
        if (e.byteLength !== t.byteLength) return !1;
        for (let n = 0; n < e.byteLength; n++) if (e[n] !== t[n]) return !1;
        return !0;
      };
    }, function (e, t, n) {
      "use strict";
      const { encodeCID: s, decodeCID: i } = n(0), r = n(42);
      t.encodeBlock = (
        { cid: e, data: t },
        n,
      ) => (n && n.push(t.buffer), { cid: s(e, n), data: t });
      t.decodeBlock = ({ cid: e, data: t }) => new r(t, i(e)), t.Block = r;
    }, function (e, t, n) {
      "use strict";
      const s = n(9),
        { version: i } = n(43),
        r = Symbol.for("@ipld/js-ipld-block/block"),
        o = { writable: !1, configurable: !1, enumerable: !0 };
      class a {
        constructor(e, t) {
          if (!(e && e instanceof Uint8Array)) {
            throw new Error("first argument  must be a Uint8Array");
          }
          if (!t || !s.isCID(t)) {
            throw new Error("second argument must be a CID");
          }
          this.data = e,
            this.cid = t,
            Object.defineProperties(this, { data: o, cid: o });
        }
        get _data() {
          return k(), this.data;
        }
        get _cid() {
          return l(), this.cid;
        }
        get [Symbol.toStringTag]() {
          return "Block";
        }
        get [r]() {
          return !0;
        }
        static isBlock(e) {
          return Boolean(e && e[r]);
        }
      }
      const c = (e, t) => {
          let n = !1;
          return () => {
            if (!e.test(i)) throw new Error(t);
            n || (n = !0, console.warn(t));
          };
        },
        l = c(
          /^0\.10|^0\.11/,
          "block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead",
        ),
        k = c(
          /^0\.10|^0.11/,
          "block._data is deprecated and will be removed in 0.12 release. Please use block.data instead",
        );
      e.exports = a;
    }, function (e) {
      e.exports = JSON.parse(
        '{"_from":"ipld-block@^0.11.0","_id":"ipld-block@0.11.0","_inBundle":false,"_integrity":"sha512-Kk56OOPmlWAjXfBJXvx2jX5RA6R9qUrcc2JXwF7Y4IL9mlmxcxTNkgcsJYR78DbyMllQbi7yreghjGjtCTYKaw==","_location":"/ipld-block","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"ipld-block@^0.11.0","name":"ipld-block","escapedName":"ipld-block","rawSpec":"^0.11.0","saveSpec":null,"fetchSpec":"^0.11.0"},"_requiredBy":["/","/ipfs-bitswap","/ipfs-core","/ipfs-repo","/ipld"],"_resolved":"https://registry.npmjs.org/ipld-block/-/ipld-block-0.11.0.tgz","_shasum":"71b24b70f4d867b0609a738efa4872ef4df84c7a","_spec":"ipld-block@^0.11.0","_where":"/Users/alex/Documents/Workspaces/ipfs/js-ipfs","bugs":{"url":"https://github.com/ipld/js-ipld-block/issues"},"bundleDependencies":false,"contributors":[{"name":"David Dias","email":"daviddias.p@gmail.com"},{"name":"Volker Mische","email":"volker.mische@gmail.com"},{"name":"Friedel Ziegelmayer","email":"dignifiedquire@gmail.com"},{"name":"Irakli Gozalishvili","email":"contact@gozala.io"},{"name":"achingbrain","email":"alex@achingbrain.net"},{"name":"ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ","email":"victorbjelkholm@gmail.com"},{"name":"Alan Shaw","email":"alan.shaw@protocol.ai"},{"name":"Charlie","email":"the_charlie_daly@hotmail.co.uk"},{"name":"Diogo Silva","email":"fsdiogo@gmail.com"},{"name":"Hugo Dias","email":"hugomrdias@gmail.com"},{"name":"Mikeal Rogers","email":"mikeal.rogers@gmail.com"},{"name":"Richard Littauer","email":"richard.littauer@gmail.com"},{"name":"Richard Schneider","email":"makaretu@gmail.com"},{"name":"Xmader","email":"xmader@outlook.com"}],"dependencies":{"cids":"^1.0.0"},"deprecated":false,"description":"JavaScript Implementation of IPLD Block","devDependencies":{"aegir":"^27.0.0","typescript":"^4.0.3","uint8arrays":"^1.0.0"},"engines":{"node":">=6.0.0","npm":">=3.0.0"},"homepage":"https://github.com/ipld/js-ipld-block#readme","keywords":["IPLD"],"leadMaintainer":"Volker Mische <volker.mische@gmail.com>","license":"MIT","main":"src/index.js","name":"ipld-block","pre-push":["lint","test"],"repository":{"type":"git","url":"git+https://github.com/ipld/js-ipld-block.git"},"scripts":{"build":"npm run build:js && npm run build:types","build:js":"aegir build","build:types":"tsc --emitDeclarationOnly --declarationDir dist","check":"tsc --noEmit --noErrorTruncation","coverage":"aegir coverage","coverage-publish":"aegir coverage --provider coveralls","docs":"aegir docs","lint":"aegir lint","prepare":"npm run build:types","release":"aegir release --docs","release-major":"aegir release --type major --docs","release-minor":"aegir release --type minor --docs","test":"aegir test","test:browser":"aegir test --target browser","test:node":"aegir test --target node"},"typesVersions":{"*":{"*":["dist/*"]}},"version":"0.11.0"}',
      );
    }, function (e, t, n) {
      "use strict";
      const s = n(4),
        { encodeCID: i, decodeCID: r } = n(0),
        { encodeNode: o, decodeNode: a } = n(45);
      const c = (e, t) => "string" == typeof e ? e : i(e, t);
      e.exports = class extends s {
        constructor(e) {
          super("dag", ["put", "get", "resolve", "tree"], e);
        }
        async put(e, t = {}) {
          const { cid: n } = t,
            s = await this.remote.put({
              ...t,
              cid: null != n ? i(n) : void 0,
              dagNode: o(e, t.transfer),
            });
          return r(s);
        }
        async get(e, t = {}) {
          const { value: n, remainderPath: s } = await this.remote.get({
            ...t,
            cid: i(e, t.transfer),
          });
          return { value: a(n), remainderPath: s };
        }
        async resolve(e, t = {}) {
          const { cid: n, remainderPath: s } = await this.remote.resolve({
            ...t,
            cid: c(e, t.transfer),
          });
          return { cid: r(n), remainderPath: s };
        }
        async *tree(e, t = {}) {
          const n = await this.remote.tree({ ...t, cid: i(e, t.transfer) });
          yield* n;
        }
      };
    }, function (e, t, n) {
      "use strict";
      const { encodeCID: s, decodeCID: i, CID: r } = n(0);
      t.decodeNode = ({ dagNode: e, cids: t }) => {
        for (const n of t) i(n);
        return e;
      };
      t.encodeNode = (e, t) => {
        const n = [];
        return o(e, n, t), { dagNode: e, cids: n };
      };
      const o = (e, t, n) => {
        if (null != e && "object" == typeof e) {
          if (r.isCID(e)) t.push(e), s(e, n);
          else if (e instanceof ArrayBuffer) n && n.push(e);
          else if (ArrayBuffer.isView(e)) n && n.push(e.buffer);
          else if (Array.isArray(e)) for (const s of e) o(s, t, n);
          else for (const s of Object.values(e)) o(s, t, n);
        }
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(4),
        { encodeCID: i, decodeCID: r, CID: o } = n(0),
        { decodeIterable: a, encodeIterable: c, encodeCallback: l } = n(47),
        k = n(48);
      const u = ({ path: e, cid: t, mode: n, mtime: s, size: i }) => ({
          path: e,
          cid: r(t),
          mode: n,
          mtime: s,
          size: i,
        }),
        d = (
          {
            depth: e,
            name: t,
            path: n,
            size: s,
            cid: i,
            type: o,
            mode: a,
            mtime: c,
          },
        ) => ({
          cid: r(i),
          type: o,
          name: t,
          path: n,
          mode: a,
          mtime: c,
          size: s,
          depth: e,
        }),
        b = (e) => e,
        f = (e, t) => {
          if (e instanceof Blob) return e;
          if ("string" == typeof e) return e;
          if (e instanceof ArrayBuffer) return e;
          if (ArrayBuffer.isView(e)) return e;
          {
            const n = w(e);
            if (n) return c(n, m, t);
            const s = v(e);
            if (s) return c(s, p, t);
            const i = x(e);
            if (i) return c(k(i), p, t);
            const r = E(e);
            if (r) return g(r, t);
            throw TypeError("Unexpected input: " + typeof e);
          }
        },
        h = (e, t) => {
          const n = w(e);
          if (n) return c(n, m, t);
          const s = v(e);
          if (s) return c(s, p, t);
          const i = x(e);
          if (i) return c(k(i), p, t);
          throw TypeError("Unexpected input: " + typeof e);
        },
        p = (e, t) => {
          if (e instanceof ArrayBuffer) return e;
          if (ArrayBuffer.isView(e)) return e;
          if (e instanceof Blob) return { path: "", content: e };
          if ("string" == typeof e) return { path: "", content: e };
          {
            const n = E(e);
            if (n) return g(n, t);
            throw TypeError("Unexpected input: " + typeof e);
          }
        },
        m = (e, t) => {
          if ("number" == typeof e) {
            throw TypeError("Iterable of numbers is not supported");
          }
          if (e instanceof ArrayBuffer) return e;
          if (ArrayBuffer.isView(e)) return e;
          if (e instanceof Blob) return { path: "", content: e };
          if ("string" == typeof e) return { path: "", content: e };
          {
            const n = E(e);
            if (n) return g(n, t);
            throw TypeError("Unexpected input: " + typeof e);
          }
        },
        g = ({ path: e, mode: t, mtime: n, content: s }, i) => ({
          path: e,
          mode: t,
          mtime: n,
          content: s ? y(s, i) : void 0,
        }),
        y = (e, t) => {
          if (null == e) return "";
          if (e instanceof ArrayBuffer || ArrayBuffer.isView(e)) return e;
          if (e instanceof Blob) return e;
          if ("string" == typeof e) return e;
          {
            const n = w(e);
            if (n) return c(n, m, t);
            const s = v(e);
            if (s) return c(s, p, t);
            const i = x(e);
            if (i) return c(k(i), p, t);
            throw TypeError("Unexpected input: " + typeof e);
          }
        },
        w = (e) => {
          const t = e;
          return t && "function" == typeof t[Symbol.iterator] ? t : null;
        },
        v = (e) => {
          const t = e;
          return t && "function" == typeof t[Symbol.asyncIterator] ? t : null;
        },
        x = (e) => e && "function" == typeof e.getReader ? e : null,
        E = (e) => "object" == typeof e && (e.path || e.content) ? e : null;
      e.exports = class extends s {
        constructor(e) {
          super("core", ["add", "addAll", "cat", "ls"], e);
        }
        async *addAll(e, t = {}) {
          const { timeout: n, signal: s } = t,
            i = [...t.transfer || []],
            r = t.progress ? l(t.progress, i) : void 0,
            o = await this.remote.addAll({
              ...t,
              input: h(e, i),
              progress: r,
              transfer: i,
              timeout: n,
              signal: s,
            });
          yield* a(o.data, u);
        }
        async add(e, t = {}) {
          const { timeout: n, signal: s } = t,
            i = [...t.transfer || []],
            r = t.progress ? l(t.progress, i) : void 0,
            o = await this.remote.add({
              ...t,
              input: f(e, i),
              progress: r,
              transfer: i,
              timeout: n,
              signal: s,
            });
          return u(o.data);
        }
        async *cat(e, t = {}) {
          const n = o.isCID(e) ? i(e) : e,
            s = await this.remote.cat({ ...t, path: n });
          yield* a(s.data, b);
        }
        async *ls(e, t = {}) {
          const n = o.isCID(e) ? i(e) : e,
            s = await this.remote.ls({ ...t, path: n });
          yield* a(s.data, d);
        }
      };
    }, function (e, t, n) {
      "use strict";
      const { encodeError: s, decodeError: i } = n(5);
      t.decodeIterable = async function* ({ port: e }, t) {
        let n = (e) => {};
        const s = () => (e.postMessage({ method: "next" }),
          new Promise((e) => n = e));
        e.onmessage = (e) => n(e.data);
        let r = !1;
        try {
          for (; !r;) {
            const { done: e, value: n, error: o } = await s();
            if (r = e, null != o) throw i(o);
            null != n && (yield t(n));
          }
        } finally {
          r || e.postMessage({ method: "return" }), e.close();
        }
      };
      t.encodeIterable = (e, t, n) => {
        const { port1: i, port2: o } = new MessageChannel(), a = [], c = r(e);
        return i.onmessage = async ({ data: { method: e } }) => {
          switch (e) {
            case "next":
              try {
                const { done: e, value: n } = await c.next();
                e
                  ? (i.postMessage({ type: "next", done: !0 }), i.close())
                  : (a.length = 0,
                    i.postMessage(
                      { type: "next", done: !1, value: t(n, a) },
                      a,
                    ));
              } catch (n) {
                i.postMessage({ type: "throw", error: s(n) }), i.close();
              }
              break;
            case "return":
              i.close(), c.return && c.return();
          }
        },
          i.start(),
          n.push(o),
          { type: "RemoteIterable", port: o };
      };
      const r = (e) => {
        if (null != e) {
          if (
            "function" == typeof e[Symbol.asyncIterator]
          ) {
            return e[Symbol.asyncIterator]();
          }
          if (
            "function" == typeof e[Symbol.iterator]
          ) {
            return e[Symbol.iterator]();
          }
        }
        throw TypeError("Value must be async or sync iterable");
      };
      t.encodeCallback = (e, t) => {
        const { port1: n, port2: s } = new MessageChannel();
        return n.onmessage = ({ data: t }) => e.apply(null, t),
          t.push(s),
          { type: "RemoteCallback", port: s };
      };
      t.decodeCallback = ({ port: e }) =>
        (t, n = []) => {
          e.postMessage(t, [...new Set(n)]);
        };
    }, function (e, t, n) {
      "use strict";
      e.exports = async function* (e, t = {}) {
        const n = e.getReader();
        try {
          for (;;) {
            const e = await n.read();
            if (e.done) return;
            yield e.value;
          }
        } finally {
          !0 !== t.preventCancel && n.cancel(), n.releaseLock();
        }
      };
    }, function (e, t, n) {
      "use strict";
      const s = n(4), { decodeCID: i, CID: r } = n(0);
      e.exports = class extends s {
        constructor(e) {
          super("files", ["stat"], e);
        }
        async stat(e, t = {}) {
          const { size: n, hash: s, withLocal: i, timeout: r, signal: c } = t,
            { stat: l } = await this.remote.stat({
              path: o(e),
              size: n,
              hash: s,
              withLocal: i,
              timeout: r,
              signal: c,
            });
          return a(l);
        }
      };
      const o = (e) => r.isCID(e) ? "/ipfs/" + e.toString() : e,
        a = (e) => ({ ...e, cid: i(e.cid) });
    }]);
  }),
);
