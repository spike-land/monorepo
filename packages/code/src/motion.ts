export * from "framer-motion";
export { default } from "framer-motion";
// export const { createDomMotionComponent, motion } = fm; // ./render/dom/motion.mjs';
// export const { m } = fm; // ./render/dom/motion-minimal.mjs';
// export const { AnimatePresence } = fm; // ./components/AnimatePresence/index.mjs';
// export const { AnimateSharedLayout } = fm; // ./components/AnimateSharedLayout.mjs';
// export const { MotionConfig } = fm; // ./components/MotionConfig/index.mjs';
// export const { LazyMotion } = fm; // ./components/LazyMotion/index.mjs';
// export const { LayoutGroup } = fm; // ./components/LayoutGroup/index.mjs';
// export const { Reorder } = fm; // ./components/Reorder/index.mjs';
// export const { domAnimation } = fm; // ./render/dom/features-animation.mjs';
// export const { domMax } = fm; // ./render/dom/features-max.mjs';
// export const { useMotionValue } = fm; // ./value/use-motion-value.mjs';
// export const { useMotionTemplate } = fm; // ./value/use-motion-template.mjs';
// export const { MotionValue, motionValue } = fm; // ./value/index.mjs';
// export const { resolveMotionValue } = fm; // ./value/utils/resolve-motion-value.mjs';
// export const { useTransform } = fm; // ./value/use-transform.mjs';
// export const { useSpring } = fm; // ./value/use-spring.mjs';
// export const { useVelocity } = fm; // ./value/use-velocity.mjs';
// export const { useScroll } = fm; // ./value/use-scroll.mjs';
// export const { useElementScroll } = fm; // ./value/scroll/use-element-scroll.mjs';
// export const { useViewportScroll } = fm; // ./value/scroll/use-viewport-scroll.mjs';
// export const { useTime } = fm; // ./value/use-time.mjs';
// export const { useWillChange } = fm; // ./value/use-will-change/index.mjs';
// export const { useReducedMotion } = fm; // ./utils/reduced-motion/use-reduced-motion.mjs';
// export const { useReducedMotionConfig } = fm; // ./utils/reduced-motion/use-reduced-motion-config.mjs';
// export const { animationControls } = fm; // ./animation/animation-controls.mjs';
// export const { useAnimation, useAnimationControls } = fm; // ./animation/use-animation.mjs';
// export const { useAnimationFrame } = fm; // ./utils/use-animation-frame.mjs';
// export const { animate } = fm; // ./animation/animate.mjs';
// export const { animateVisualElement } = fm; // ./render/utils/animation.mjs';
// export const { useCycle } = fm; // ./utils/use-cycle.mjs';
// export const { transform } = fm; // ./utils/transform.mjs';
// export const { isValidMotionProp } = fm; // ./motion/utils/valid-prop.mjs';
// export const { useIsPresent, usePresence } = fm; // ./components/AnimatePresence/use-presence.mjs';
// export const { useInView } = fm; // ./utils/use-in-view.mjs';
// export const { DragControls, useDragControls } = fm; // ./gestures/drag/use-drag-controls.mjs';
// export const { useDomEvent } = fm; // ./events/use-dom-event.mjs';
// export const { createMotionComponent } = fm; // ./motion/index.mjs';
// export const { isMotionComponent } = fm; // ./motion/utils/is-motion-component.mjs';
// export const { unwrapMotionComponent } = fm; // ./motion/utils/unwrap-motion-component.mjs';
// export const { visualElement } = fm; // ./render/index.mjs';
// export const { addScaleCorrector } = fm; // ./projection/styles/scale-correction.mjs';
// export const { useInstantTransition } = fm; // ./utils/use-instant-transition.mjs';
// export const { useInstantLayoutTransition } = fm; // ./projection/use-instant-layout-transition.mjs';
// export const { useResetProjection } = fm; // ./projection/use-reset-projection.mjs';
// export const { buildTransform } = fm; // ./render/html/utils/build-transform.mjs';
// export const { delay } = fm; // ./utils/delay.mjs';
// export const { MotionContext, useVisualElementContext } = fm; // ./context/MotionContext/index.mjs';
// export const { MotionConfigContext } = fm; // ./context/MotionConfigContext.mjs';
// export const { PresenceContext } = fm; // ./context/PresenceContext.mjs';
// export const { LayoutGroupContext } = fm; // ./context/LayoutGroupContext.mjs';
// export const { DeprecatedLayoutGroupContext } = fm; // ./context/DeprecatedLayoutGroupContext.mjs';
// export const { SwitchLayoutGroupContext } = fm; // ./context/SwitchLayoutGroupContext.mjs';
// export const { FlatTree } = fm; // ./render/utils/flat-tree.mjs';
// export const { useDeprecatedAnimatedState } = fm; // ./animation/use-animated-state.mjs';
// export const { useDeprecatedInvertedScale } = fm; // ./value/use-inverted-scale.mjs';
// export const { AnimationType } = fm; // ./render/utils/types.mjs';
// export const { animations } = fm; // ./motion/features/animations.mjs';
// export const { checkTargetForNewValues } = fm; // ./render/utils/setters.mjs';
// export const { createBox } = fm; // ./projection/geometry/models.mjs';
// export const { calcLength } = fm; // ./projection/geometry/delta-calc.mjs';
// export const { filterProps } = fm; // ./render/dom/utils/filter-props.mjs';
// export const { makeUseVisualState } = fm; // ./motion/utils/use-visual-state.mjs';
// export const { isDragActive } = fm; // ./gestures/drag/utils/lock.mjs';
// export const { addPointerEvent } = fm; // ./events/use-pointer-event.mjs';
// export const { wrapHandler } = fm; // ./events/event-info.mjs';
// export const { isMotionValue } = fm; // ./value/utils/is-motion-value.mjs';
// export const { isBrowser } = fm; // ./utils/is-browser.mjs';
// export const { useUnmountEffect } = fm; // ./utils/use-unmount-effect.mjs';
// export const { useIsomorphicLayoutEffect } = fm; // ./utils/use-isomorphic-effect.mjs';
// export const { useForceUpdate } = fm; // ./utils/use-force-update.mjs';
