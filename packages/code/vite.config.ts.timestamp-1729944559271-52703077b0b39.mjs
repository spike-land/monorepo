// vite.config.ts
import path from "path";
import { defineConfig } from "file:///home/z/spike.land/.yarn/__virtual__/vite-virtual-d1836b2cec/2/.yarn/berry/cache/vite-npm-5.4.10-30d2e3a4e2-10c0.zip/node_modules/vite/dist/node/index.js";
import react from "@XX/vitejs/plugin-react-swc";

// src/@/lib/importmap-utils.ts
var oo = {
  "/@/": "/@/",
  "@emotion/react/jsx-runtime": "/emotionJsxRuntime.mjs",
  "react/jsx-runtime": "/jsx.mjs",
  "react-dom/server": "/reactDomServer.mjs",
  "react-dom/client": "/reactDomClient.mjs",
  "@emotion/react": "/emotion.mjs",
  "react": "/reactMod.mjs",
  "framer-motion": "/motion.mjs",
  "react-dom": "/reactDom.mjs"
};
var importMap = { imports: oo };

// vite.config.ts
import fs from "fs";
var __vite_injected_original_dirname = "/home/z/spike.land/packages/code";
var externalFiles = fs.readdirSync(path.resolve(__vite_injected_original_dirname, "./src/@/external"));
var externalRollup = externalFiles.map((file) => {
  return {
    type: "external",
    file: "/@/external/" + file
  };
}).map(
  (file) => {
    const fileParts = file.file.split(".");
    fileParts.pop();
    fileParts.push("mjs");
    file.file = fileParts.join(".");
    return file;
  }
);
var externalAliases = externalRollup.reduce(
  (acc, file) => {
    const fileParts = file.file.split(".");
    fileParts.pop();
    file.file = fileParts.join(".");
    file.file = file.file.replace("/@/external/", "@/external/");
    acc[file.file] = "/" + file.file + ".mjs";
    return acc;
  },
  {}
);
var rollupExternal = Object.values(externalAliases);
var importMapProxy = {};
Object.entries(importMap.imports).forEach(([key, value]) => {
  importMapProxy[key] = {
    target: "https://testing.spike.land" + value,
    changeOrigin: true,
    rewrite: (path2) => path2.replace(key, "")
  };
});
var config = defineConfig((config2) => ({
  ...config2,
  plugins: [
    react({
      jsxImportSource: "@emotion/react"
    })
  ],
  build: {
    rollupOptions: {
      external: [
        // "/start.mjs",
        // "/swVersion.mjs",
        ...Object.keys(importMap.imports),
        ...rollupExternal
      ]
    },
    outDir: "dist-vite"
  },
  appType: "spa",
  assetsInclude: [
    "src/index.html"
  ],
  server: {
    proxy: {
      ...config2.mode === "build" ? { "/@": {
        target: "https://testing.spike.land/@",
        changeOrigin: true,
        rewrite: (path2) => path2.replace(/^\/@/, "")
      } } : {},
      "^/live/.*/": {
        target: "https://testing.spike.land/live",
        changeOrigin: true,
        rewrite: (path2) => {
          console.log("Proxying path:", path2);
          return path2.replace(/^\/live/, "");
        }
      },
      "/sw.js": {
        target: "https://testing.spike.land/sw.js",
        changeOrigin: true
      },
      // '/start.mjs': {
      //   target: "https://testing.spike.land/start.mjs",
      //   changeOrigin: true,
      //   rewrite: (path: string) => path.replace(/^\/start.mjs/, ""),
      // },
      "/swVersion.mjs": {
        target: "https://testing.spike.land/swVersion.mjs",
        changeOrigin: true,
        rewrite: (path2) => path2.replace(/^\/swVersion.mjs/, "")
      }
      // ...importMapProxy,
    }
  },
  resolve: {
    alias: {
      ...config2.command === "build" ? externalAliases : {},
      "@": path.resolve(__vite_injected_original_dirname, "./src/@")
      // ...importMap.imports
    }
  }
}));
console.log("Vite config:", JSON.stringify(config, null, 2));
console.log("Rollup external:", JSON.stringify(rollupExternal, null, 2));
console.log("External aliases:", JSON.stringify(externalAliases, null, 2));
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
