var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb2, mod2) => function __require() {
  return mod2 || (0, cb2[Object.keys(cb2)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// ../../node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "../../node_modules/tslib/tslib.js"(exports2, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id, v) {
          return exports3[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b2) {
        d.__proto__ = b2;
      } || function(d, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d[p] = b2[p];
      };
      __extends2 = function(d, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d, b2);
        function __() {
          this.constructor = d;
        }
        d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c3 = arguments.length, r = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c3 < 3 ? d(r) : c3 > 3 ? d(target, key, r) : d(target, key)) || r;
        return c3 > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve) {
            resolve(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _4 = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_4)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _4.label++;
                  return { value: op[1], done: false };
                case 5:
                  _4.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _4.ops.pop();
                  _4.trys.pop();
                  continue;
                default:
                  if (!(t = _4.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _4 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _4.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _4.label < t[1]) {
                    _4.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _4.label < t[2]) {
                    _4.label = t[2];
                    _4.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _4.ops.pop();
                  _4.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _4);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m3, o2) {
        for (var p in m3)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o2, p))
            __createBinding2(o2, m3, p);
      };
      __createBinding2 = Object.create ? function(o2, m3, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        Object.defineProperty(o2, k22, { enumerable: true, get: function() {
          return m3[k2];
        } });
      } : function(o2, m3, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m3[k2];
      };
      __values2 = function(o2) {
        var s = typeof Symbol === "function" && Symbol.iterator, m3 = s && o2[s], i = 0;
        if (m3)
          return m3.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i++], done: !o2 };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o2, n) {
        var m3 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m3)
          return o2;
        var i = m3.call(o2), r, ar2 = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar2.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m3 = i["return"]))
              m3.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar2;
      };
      __spread2 = function() {
        for (var ar2 = [], i = 0; i < arguments.length; i++)
          ar2 = ar2.concat(__read2(arguments[i]));
        return ar2;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k2 = 0, i = 0; i < il; i++)
          for (var a2 = arguments[i], j3 = 0, jl = a2.length; j3 < jl; j3++, k2++)
            r[k2] = a2[j3];
        return r;
      };
      __spreadArray2 = function(to2, from2, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from2.length, ar2; i < l; i++) {
            if (ar2 || !(i in from2)) {
              if (!ar2)
                ar2 = Array.prototype.slice.call(from2, 0, i);
              ar2[i] = from2[i];
            }
          }
        return to2.concat(ar2 || Array.prototype.slice.call(from2));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q2 = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a2, b2) {
                q2.push([n, v, a2, b2]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator2 = function(o2) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o2[n] ? function(v) {
            return (p = !p) ? { value: __await2(o2[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o2[Symbol.asyncIterator], i;
        return m3 ? m3.call(o2) : (o2 = typeof __values2 === "function" ? __values2(o2) : o2[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o2[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o2[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o2, v) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v });
      } : function(o2, v) {
        o2["default"] = v;
      };
      __importStar2 = function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k2 in mod2)
            if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2))
              __createBinding2(result, mod2, k2);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault2 = function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// ../../node_modules/tslib/modules/index.js
var import_tslib, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __createBinding, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet;
var init_modules = __esm({
  "../../node_modules/tslib/modules/index.js"() {
    import_tslib = __toModule(require_tslib());
    ({
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __exportStar,
      __createBinding,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet
    } = import_tslib.default);
  }
});

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order22 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order22.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty2.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
  }
});

// ../../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../node_modules/react/cjs/react.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var ReactVersion = "17.0.2";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports2.Fragment = 60107;
        exports2.StrictMode = 60108;
        exports2.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports2.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports2.Fragment = symbolFor("react.fragment");
          exports2.StrictMode = symbolFor("react.strict_mode");
          exports2.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports2.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn(format2) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format2, args);
          }
        }
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component3(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component3.prototype.isReactComponent = {};
        Component3.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component3.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component3.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component3.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component3.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports2.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports2.Profiler:
              return "Profiler";
            case exports2.StrictMode:
              return "StrictMode";
            case exports2.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement13(type, config2, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement10(element, config2, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement5(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match2) {
            return escaperLookup[match2];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                return c3;
              });
            } else if (mappedChild != null) {
              if (isValidElement5(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii2 = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii2++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement5(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext10(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef23(render3) {
          {
            if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render3 !== "function") {
              error("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
            } else {
              if (render3.length !== 0 && render3.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render3 != null) {
              if (render3.defaultProps != null || render3.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render3
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render3.displayName == null) {
                  render3.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports2.Fragment || type === exports2.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports2.StrictMode || type === exports2.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext21(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState16(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init3) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init3);
        }
        function useRef23(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect27(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect4(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback9(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo8(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle3(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue3(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c3 = controlLines.length - 1;
              while (s >= 1 && c3 >= 0 && sampleLines[s] !== controlLines[c3]) {
                c3--;
              }
              for (; s >= 1 && c3 >= 0; s--, c3--) {
                if (sampleLines[s] !== controlLines[c3]) {
                  if (s !== 1 || c3 !== 1) {
                    do {
                      s--;
                      c3--;
                      if (c3 < 0 || sampleLines[s] !== controlLines[c3]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c3 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component4) {
          var prototype = Component4.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports2.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          if (typeof node2 !== "object") {
            return;
          }
          if (Array.isArray(node2)) {
            for (var i = 0; i < node2.length; i++) {
              var child = node2[i];
              if (isValidElement5(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement5(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement5(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement13.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === exports2.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement10.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            new Map([[frozenObject, null]]);
            new Set([frozenObject]);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children4 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children4;
        exports2.Component = Component3;
        exports2.PureComponent = PureComponent;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext10;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef23;
        exports2.isValidElement = isValidElement5;
        exports2.lazy = lazy;
        exports2.memo = memo2;
        exports2.useCallback = useCallback9;
        exports2.useContext = useContext21;
        exports2.useDebugValue = useDebugValue3;
        exports2.useEffect = useEffect27;
        exports2.useImperativeHandle = useImperativeHandle3;
        exports2.useLayoutEffect = useLayoutEffect4;
        exports2.useMemo = useMemo8;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef23;
        exports2.useState = useState16;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// ../../node_modules/react/index.js
var require_react = __commonJS({
  "../../node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/definitions.js
function loadFeatures(features) {
  for (var key in features) {
    var Component3 = features[key];
    if (Component3 !== null)
      featureDefinitions[key].Component = Component3;
  }
}
var createDefinition, featureDefinitions;
var init_definitions = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/definitions.js"() {
    createDefinition = function(propNames) {
      return {
        isEnabled: function(props) {
          return propNames.some(function(name) {
            return !!props[name];
          });
        }
      };
    };
    featureDefinitions = {
      measureLayout: createDefinition([
        "layout",
        "layoutId",
        "drag",
        "_layoutResetTransform"
      ]),
      animation: createDefinition([
        "animate",
        "exit",
        "variants",
        "whileHover",
        "whileTap",
        "whileFocus",
        "whileDrag"
      ]),
      exit: createDefinition(["exit"]),
      drag: createDefinition(["drag", "dragControls"]),
      focus: createDefinition(["whileFocus"]),
      hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
      tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
      pan: createDefinition([
        "onPan",
        "onPanStart",
        "onPanSessionStart",
        "onPanEnd"
      ]),
      layoutAnimation: createDefinition(["layout", "layoutId"])
    };
  }
});

// ../../node_modules/hey-listen/dist/hey-listen.es.js
var warning, invariant;
var init_hey_listen_es = __esm({
  "../../node_modules/hey-listen/dist/hey-listen.es.js"() {
    warning = function() {
    };
    invariant = function() {
    };
    if (true) {
      warning = function(check, message) {
        if (!check && typeof console !== "undefined") {
          console.warn(message);
        }
      };
      invariant = function(check, message) {
        if (!check) {
          throw new Error(message);
        }
      };
    }
  }
});

// ../../node_modules/framer-motion/dist/es/context/LazyContext.js
var import_react, LazyContext;
var init_LazyContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/LazyContext.js"() {
    import_react = __toModule(require_react());
    LazyContext = (0, import_react.createContext)({ strict: false });
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/use-features.js
function useFeatures(props, visualElement2, preloadedFeatures) {
  var features = [];
  var lazyContext = (0, import_react2.useContext)(LazyContext);
  if (!visualElement2)
    return null;
  if (preloadedFeatures && lazyContext.strict) {
    invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
  }
  for (var i = 0; i < numFeatures; i++) {
    var name_1 = featureNames[i];
    var _a2 = featureDefinitions[name_1], isEnabled = _a2.isEnabled, Component3 = _a2.Component;
    if (isEnabled(props) && Component3) {
      features.push(React.createElement(Component3, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
    }
  }
  return features;
}
var React, import_react2, featureNames, numFeatures;
var init_use_features = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/use-features.js"() {
    init_modules();
    React = __toModule(require_react());
    import_react2 = __toModule(require_react());
    init_definitions();
    init_hey_listen_es();
    init_LazyContext();
    featureNames = Object.keys(featureDefinitions);
    numFeatures = featureNames.length;
  }
});

// ../../node_modules/framer-motion/dist/es/context/MotionConfigContext.js
var import_react3, MotionConfigContext;
var init_MotionConfigContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/MotionConfigContext.js"() {
    import_react3 = __toModule(require_react());
    MotionConfigContext = (0, import_react3.createContext)({
      transformPagePoint: function(p) {
        return p;
      },
      isStatic: false
    });
  }
});

// ../../node_modules/framer-motion/dist/es/context/MotionContext/index.js
function useVisualElementContext() {
  return (0, import_react4.useContext)(MotionContext).visualElement;
}
var import_react4, MotionContext;
var init_MotionContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/MotionContext/index.js"() {
    import_react4 = __toModule(require_react());
    MotionContext = (0, import_react4.createContext)({});
  }
});

// ../../node_modules/framer-motion/dist/es/context/PresenceContext.js
var import_react5, PresenceContext;
var init_PresenceContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/PresenceContext.js"() {
    import_react5 = __toModule(require_react());
    PresenceContext = (0, import_react5.createContext)(null);
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-constant.js
function useConstant(init3) {
  var ref = (0, import_react6.useRef)(null);
  if (ref.current === null) {
    ref.current = init3();
  }
  return ref.current;
}
var import_react6;
var init_use_constant = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-constant.js"() {
    import_react6 = __toModule(require_react());
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
function usePresence() {
  var context = (0, import_react7.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
  var id = useUniqueId();
  (0, import_react7.useEffect)(function() {
    return register(id);
  }, []);
  var safeToRemove = function() {
    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);
  };
  return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent((0, import_react7.useContext)(PresenceContext));
}
function isPresent(context) {
  return context === null ? true : context.isPresent;
}
var import_react7, counter, incrementId, useUniqueId;
var init_use_presence = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js"() {
    import_react7 = __toModule(require_react());
    init_PresenceContext();
    init_use_constant();
    counter = 0;
    incrementId = function() {
      return counter++;
    };
    useUniqueId = function() {
      return useConstant(incrementId);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
var import_react8, LayoutGroupContext;
var init_LayoutGroupContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.js"() {
    import_react8 = __toModule(require_react());
    LayoutGroupContext = (0, import_react8.createContext)(null);
  }
});

// ../../node_modules/framer-motion/dist/es/utils/is-browser.js
var isBrowser;
var init_is_browser = __esm({
  "../../node_modules/framer-motion/dist/es/utils/is-browser.js"() {
    isBrowser = typeof window !== "undefined";
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var import_react9, useIsomorphicLayoutEffect;
var init_use_isomorphic_effect = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js"() {
    import_react9 = __toModule(require_react());
    init_is_browser();
    useIsomorphicLayoutEffect = isBrowser ? import_react9.useLayoutEffect : import_react9.useEffect;
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
function useLayoutId(_a2) {
  var layoutId = _a2.layoutId;
  var layoutGroupId = (0, import_react10.useContext)(LayoutGroupContext);
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}
function useVisualElement(Component3, visualState, props, createVisualElement) {
  var config2 = (0, import_react10.useContext)(MotionConfigContext);
  var lazyContext = (0, import_react10.useContext)(LazyContext);
  var parent = useVisualElementContext();
  var presenceContext = (0, import_react10.useContext)(PresenceContext);
  var layoutId = useLayoutId(props);
  var visualElementRef = (0, import_react10.useRef)(void 0);
  if (!createVisualElement)
    createVisualElement = lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component3, {
      visualState,
      parent,
      props: __assign(__assign({}, props), { layoutId }),
      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
    });
  }
  var visualElement2 = visualElementRef.current;
  useIsomorphicLayoutEffect(function() {
    if (!visualElement2)
      return;
    visualElement2.setProps(__assign(__assign(__assign({}, config2), props), { layoutId }));
    visualElement2.isPresent = isPresent(presenceContext);
    visualElement2.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);
    visualElement2.syncRender();
  });
  (0, import_react10.useEffect)(function() {
    var _a2;
    if (!visualElement2)
      return;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.animateChanges();
  });
  useIsomorphicLayoutEffect(function() {
    return function() {
      return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
    };
  }, []);
  return visualElement2;
}
var import_react10;
var init_use_visual_element = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js"() {
    init_modules();
    import_react10 = __toModule(require_react());
    init_PresenceContext();
    init_use_presence();
    init_LayoutGroupContext();
    init_MotionContext();
    init_use_isomorphic_effect();
    init_MotionConfigContext();
    init_LazyContext();
  }
});

// ../../node_modules/framer-motion/dist/es/utils/is-ref-object.js
function isRefObject(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}
var init_is_ref_object = __esm({
  "../../node_modules/framer-motion/dist/es/utils/is-ref-object.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
function useMotionRef(visualState, visualElement2, externalRef) {
  return (0, import_react11.useCallback)(function(instance) {
    var _a2;
    instance && ((_a2 = visualState.mount) === null || _a2 === void 0 ? void 0 : _a2.call(visualState, instance));
    if (visualElement2) {
      instance ? visualElement2.mount(instance) : visualElement2.unmount();
    }
    if (externalRef) {
      if (typeof externalRef === "function") {
        externalRef(instance);
      } else if (isRefObject(externalRef)) {
        externalRef.current = instance;
      }
    }
  }, [visualElement2]);
}
var import_react11;
var init_use_motion_ref = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js"() {
    import_react11 = __toModule(require_react());
    init_is_ref_object();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/variants.js
function isVariantLabels(v) {
  return Array.isArray(v);
}
function isVariantLabel(v) {
  return typeof v === "string" || isVariantLabels(v);
}
function getCurrent(visualElement2) {
  var current = {};
  visualElement2.forEachValue(function(value, key) {
    return current[key] = value.get();
  });
  return current;
}
function getVelocity(visualElement2) {
  var velocity = {};
  visualElement2.forEachValue(function(value, key) {
    return velocity[key] = value.getVelocity();
  });
  return velocity;
}
function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
  var _a2;
  if (currentValues === void 0) {
    currentValues = {};
  }
  if (currentVelocity === void 0) {
    currentVelocity = {};
  }
  if (typeof definition === "string") {
    definition = (_a2 = props.variants) === null || _a2 === void 0 ? void 0 : _a2[definition];
  }
  return typeof definition === "function" ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity) : definition;
}
function resolveVariant(visualElement2, definition, custom) {
  var props = visualElement2.getProps();
  return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
}
function checkIfControllingVariants(props) {
  var _a2;
  return typeof ((_a2 = props.animate) === null || _a2 === void 0 ? void 0 : _a2.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
}
function checkIfVariantNode(props) {
  return Boolean(checkIfControllingVariants(props) || props.variants);
}
var init_variants = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/variants.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/context/MotionContext/utils.js
function getCurrentTreeVariants(props, context) {
  if (checkIfControllingVariants(props)) {
    var initial = props.initial, animate3 = props.animate;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate3) ? animate3 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}
var init_utils = __esm({
  "../../node_modules/framer-motion/dist/es/context/MotionContext/utils.js"() {
    init_variants();
  }
});

// ../../node_modules/framer-motion/dist/es/context/MotionContext/create.js
function useCreateMotionContext(props, isStatic) {
  var _a2 = getCurrentTreeVariants(props, (0, import_react12.useContext)(MotionContext)), initial = _a2.initial, animate3 = _a2.animate;
  return (0, import_react12.useMemo)(function() {
    return { initial, animate: animate3 };
  }, isStatic ? [
    variantLabelsAsDependency(initial),
    variantLabelsAsDependency(animate3)
  ] : []);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}
var import_react12;
var init_create = __esm({
  "../../node_modules/framer-motion/dist/es/context/MotionContext/create.js"() {
    import_react12 = __toModule(require_react());
    init_MotionContext();
    init_utils();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/index.js
function createMotionComponent(_a2) {
  var preloadedFeatures = _a2.preloadedFeatures, createVisualElement = _a2.createVisualElement, useRender = _a2.useRender, useVisualState2 = _a2.useVisualState, Component3 = _a2.Component;
  preloadedFeatures && loadFeatures(preloadedFeatures);
  function MotionComponent(props, externalRef) {
    var isStatic = (0, import_react13.useContext)(MotionConfigContext).isStatic;
    var features = null;
    var context = useCreateMotionContext(props, isStatic);
    var visualState = useVisualState2(props, isStatic);
    if (!isStatic && isBrowser) {
      context.visualElement = useVisualElement(Component3, visualState, props, createVisualElement);
      features = useFeatures(props, context.visualElement, preloadedFeatures);
    }
    return React2.createElement(React2.Fragment, null, React2.createElement(MotionContext.Provider, { value: context }, useRender(Component3, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic)), features);
  }
  return (0, import_react13.forwardRef)(MotionComponent);
}
var React2, import_react13;
var init_motion = __esm({
  "../../node_modules/framer-motion/dist/es/motion/index.js"() {
    React2 = __toModule(require_react());
    import_react13 = __toModule(require_react());
    init_use_features();
    init_MotionConfigContext();
    init_MotionContext();
    init_use_visual_element();
    init_use_motion_ref();
    init_create();
    init_definitions();
    init_is_browser();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
function createMotionProxy(createConfig) {
  function custom(Component3, customMotionComponentConfig) {
    if (customMotionComponentConfig === void 0) {
      customMotionComponentConfig = {};
    }
    return createMotionComponent(createConfig(Component3, customMotionComponentConfig));
  }
  var componentCache = new Map();
  return new Proxy(custom, {
    get: function(_target, key) {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom(key));
      }
      return componentCache.get(key);
    }
  });
}
var init_motion_proxy = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/motion-proxy.js"() {
    init_motion();
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
var lowercaseSVGElements;
var init_lowercase_elements = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js"() {
    lowercaseSVGElements = [
      "animate",
      "circle",
      "defs",
      "desc",
      "ellipse",
      "g",
      "image",
      "line",
      "filter",
      "marker",
      "mask",
      "metadata",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "rect",
      "stop",
      "svg",
      "switch",
      "symbol",
      "text",
      "tspan",
      "use",
      "view"
    ];
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
function isSVGComponent(Component3) {
  if (typeof Component3 !== "string" || Component3.includes("-")) {
    return false;
  } else if (lowercaseSVGElements.indexOf(Component3) > -1 || /[A-Z]/.test(Component3)) {
    return true;
  }
  return false;
}
var init_is_svg_component = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js"() {
    init_lowercase_elements();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/scale-correction.js
function addScaleCorrection(correctors) {
  for (var key in correctors) {
    valueScaleCorrection[key] = correctors[key];
  }
}
var valueScaleCorrection;
var init_scale_correction = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/scale-correction.js"() {
    valueScaleCorrection = {};
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/transform.js
function sortTransformProps(a2, b2) {
  return transformProps.indexOf(a2) - transformProps.indexOf(b2);
}
function isTransformProp(key) {
  return transformPropSet.has(key);
}
function isTransformOriginProp(key) {
  return transformOriginProps.has(key);
}
var transformAxes, order, transformProps, transformPropSet, transformOriginProps;
var init_transform = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/transform.js"() {
    transformAxes = ["", "X", "Y", "Z"];
    order = ["translate", "scale", "rotate", "skew"];
    transformProps = ["transformPerspective", "x", "y", "z"];
    order.forEach(function(operationKey) {
      return transformAxes.forEach(function(axesKey) {
        return transformProps.push(operationKey + axesKey);
      });
    });
    transformPropSet = new Set(transformProps);
    transformOriginProps = new Set(["originX", "originY", "originZ"]);
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
function isForcedMotionValue(key, _a2) {
  var layout = _a2.layout, layoutId = _a2.layoutId;
  return isTransformProp(key) || isTransformOriginProp(key) || (layout || layoutId !== void 0) && (!!valueScaleCorrection[key] || key === "opacity");
}
var init_is_forced_motion_value = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js"() {
    init_scale_correction();
    init_transform();
  }
});

// ../../node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
var isMotionValue;
var init_is_motion_value = __esm({
  "../../node_modules/framer-motion/dist/es/value/utils/is-motion-value.js"() {
    isMotionValue = function(value) {
      return value !== null && typeof value === "object" && value.getVelocity;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
function buildTransform(_a2, _b, transformIsDefault, transformTemplate) {
  var transform4 = _a2.transform, transformKeys2 = _a2.transformKeys;
  var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
  var transformString = "";
  transformKeys2.sort(sortTransformProps);
  var transformHasZ = false;
  var numTransformKeys = transformKeys2.length;
  for (var i = 0; i < numTransformKeys; i++) {
    var key = transformKeys2[i];
    transformString += (translateAlias[key] || key) + "(" + transform4[key] + ") ";
    if (key === "z")
      transformHasZ = true;
  }
  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += "translateZ(0)";
  } else {
    transformString = transformString.trim();
  }
  if (transformTemplate) {
    transformString = transformTemplate(transform4, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildTransformOrigin(_a2) {
  var _b = _a2.originX, originX = _b === void 0 ? "50%" : _b, _c = _a2.originY, originY = _c === void 0 ? "50%" : _c, _d = _a2.originZ, originZ = _d === void 0 ? 0 : _d;
  return originX + " " + originY + " " + originZ;
}
var translateAlias;
var init_build_transform = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.js"() {
    init_transform();
    translateAlias = {
      x: "translateX",
      y: "translateY",
      z: "translateZ",
      transformPerspective: "perspective"
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
function isCSSVariable(key) {
  return key.startsWith("--");
}
var init_is_css_variable = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
var getValueAsType;
var init_get_as_type = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js"() {
    getValueAsType = function(value, type) {
      return type && typeof value === "number" ? type.transform(value) : value;
    };
  }
});

// ../../node_modules/style-value-types/dist/es/utils.js
function isString(v) {
  return typeof v === "string";
}
var clamp, sanitize, floatRegex, colorRegex, singleColorRegex;
var init_utils2 = __esm({
  "../../node_modules/style-value-types/dist/es/utils.js"() {
    clamp = function(min, max) {
      return function(v) {
        return Math.max(Math.min(v, max), min);
      };
    };
    sanitize = function(v) {
      return v % 1 ? Number(v.toFixed(5)) : v;
    };
    floatRegex = /(-)?([\d]*\.?[\d])+/g;
    colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
    singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
  }
});

// ../../node_modules/style-value-types/dist/es/numbers/index.js
var number, alpha, scale;
var init_numbers = __esm({
  "../../node_modules/style-value-types/dist/es/numbers/index.js"() {
    init_modules();
    init_utils2();
    number = {
      test: function(v) {
        return typeof v === "number";
      },
      parse: parseFloat,
      transform: function(v) {
        return v;
      }
    };
    alpha = __assign(__assign({}, number), { transform: clamp(0, 1) });
    scale = __assign(__assign({}, number), { default: 1 });
  }
});

// ../../node_modules/style-value-types/dist/es/numbers/units.js
var createUnitType, degrees, percent, px, vh, vw, progressPercentage;
var init_units = __esm({
  "../../node_modules/style-value-types/dist/es/numbers/units.js"() {
    init_modules();
    init_utils2();
    createUnitType = function(unit) {
      return {
        test: function(v) {
          return isString(v) && v.endsWith(unit) && v.split(" ").length === 1;
        },
        parse: parseFloat,
        transform: function(v) {
          return "" + v + unit;
        }
      };
    };
    degrees = createUnitType("deg");
    percent = createUnitType("%");
    px = createUnitType("px");
    vh = createUnitType("vh");
    vw = createUnitType("vw");
    progressPercentage = __assign(__assign({}, percent), { parse: function(v) {
      return percent.parse(v) / 100;
    }, transform: function(v) {
      return percent.transform(v * 100);
    } });
  }
});

// ../../node_modules/style-value-types/dist/es/color/utils.js
var isColorString, splitColor;
var init_utils3 = __esm({
  "../../node_modules/style-value-types/dist/es/color/utils.js"() {
    init_utils2();
    isColorString = function(type, testProp) {
      return function(v) {
        return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
      };
    };
    splitColor = function(aName, bName, cName) {
      return function(v) {
        var _a2;
        if (!isString(v))
          return v;
        var _b = v.match(floatRegex), a2 = _b[0], b2 = _b[1], c3 = _b[2], alpha3 = _b[3];
        return _a2 = {}, _a2[aName] = parseFloat(a2), _a2[bName] = parseFloat(b2), _a2[cName] = parseFloat(c3), _a2.alpha = alpha3 !== void 0 ? parseFloat(alpha3) : 1, _a2;
      };
    };
  }
});

// ../../node_modules/style-value-types/dist/es/color/hsla.js
var hsla;
var init_hsla = __esm({
  "../../node_modules/style-value-types/dist/es/color/hsla.js"() {
    init_numbers();
    init_units();
    init_utils2();
    init_utils3();
    hsla = {
      test: isColorString("hsl", "hue"),
      parse: splitColor("hue", "saturation", "lightness"),
      transform: function(_a2) {
        var hue = _a2.hue, saturation = _a2.saturation, lightness = _a2.lightness, _b = _a2.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
      }
    };
  }
});

// ../../node_modules/style-value-types/dist/es/color/rgba.js
var clampRgbUnit, rgbUnit, rgba;
var init_rgba = __esm({
  "../../node_modules/style-value-types/dist/es/color/rgba.js"() {
    init_modules();
    init_numbers();
    init_utils2();
    init_utils3();
    clampRgbUnit = clamp(0, 255);
    rgbUnit = __assign(__assign({}, number), { transform: function(v) {
      return Math.round(clampRgbUnit(v));
    } });
    rgba = {
      test: isColorString("rgb", "red"),
      parse: splitColor("red", "green", "blue"),
      transform: function(_a2) {
        var red2 = _a2.red, green2 = _a2.green, blue2 = _a2.blue, _b = _a2.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return "rgba(" + rgbUnit.transform(red2) + ", " + rgbUnit.transform(green2) + ", " + rgbUnit.transform(blue2) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
      }
    };
  }
});

// ../../node_modules/style-value-types/dist/es/color/hex.js
function parseHex(v) {
  var r = "";
  var g = "";
  var b2 = "";
  var a2 = "";
  if (v.length > 5) {
    r = v.substr(1, 2);
    g = v.substr(3, 2);
    b2 = v.substr(5, 2);
    a2 = v.substr(7, 2);
  } else {
    r = v.substr(1, 1);
    g = v.substr(2, 1);
    b2 = v.substr(3, 1);
    a2 = v.substr(4, 1);
    r += r;
    g += g;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex;
var init_hex = __esm({
  "../../node_modules/style-value-types/dist/es/color/hex.js"() {
    init_rgba();
    init_utils3();
    hex = {
      test: isColorString("#"),
      parse: parseHex,
      transform: rgba.transform
    };
  }
});

// ../../node_modules/style-value-types/dist/es/color/index.js
var color;
var init_color = __esm({
  "../../node_modules/style-value-types/dist/es/color/index.js"() {
    init_utils2();
    init_hex();
    init_hsla();
    init_rgba();
    color = {
      test: function(v) {
        return rgba.test(v) || hex.test(v) || hsla.test(v);
      },
      parse: function(v) {
        if (rgba.test(v)) {
          return rgba.parse(v);
        } else if (hsla.test(v)) {
          return hsla.parse(v);
        } else {
          return hex.parse(v);
        }
      },
      transform: function(v) {
        return isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
      }
    };
  }
});

// ../../node_modules/style-value-types/dist/es/complex/index.js
function test(v) {
  var _a2, _b, _c, _d;
  return isNaN(v) && isString(v) && ((_b = (_a2 = v.match(floatRegex)) === null || _a2 === void 0 ? void 0 : _a2.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}
function analyse(v) {
  var values3 = [];
  var numColors = 0;
  var colors = v.match(colorRegex);
  if (colors) {
    numColors = colors.length;
    v = v.replace(colorRegex, colorToken);
    values3.push.apply(values3, colors.map(color.parse));
  }
  var numbers = v.match(floatRegex);
  if (numbers) {
    v = v.replace(floatRegex, numberToken);
    values3.push.apply(values3, numbers.map(number.parse));
  }
  return { values: values3, numColors, tokenised: v };
}
function parse(v) {
  return analyse(v).values;
}
function createTransformer(v) {
  var _a2 = analyse(v), values3 = _a2.values, numColors = _a2.numColors, tokenised = _a2.tokenised;
  var numValues = values3.length;
  return function(v2) {
    var output = tokenised;
    for (var i = 0; i < numValues; i++) {
      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v2[i]) : sanitize(v2[i]));
    }
    return output;
  };
}
function getAnimatableNone(v) {
  var parsed = parse(v);
  var transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var colorToken, numberToken, convertNumbersToZero, complex;
var init_complex = __esm({
  "../../node_modules/style-value-types/dist/es/complex/index.js"() {
    init_color();
    init_numbers();
    init_utils2();
    colorToken = "${c}";
    numberToken = "${n}";
    convertNumbersToZero = function(v) {
      return typeof v === "number" ? 0 : v;
    };
    complex = { test, parse, createTransformer, getAnimatableNone };
  }
});

// ../../node_modules/style-value-types/dist/es/complex/filter.js
function applyDefaultFilter(v) {
  var _a2 = v.slice(0, -1).split("("), name = _a2[0], value = _a2[1];
  if (name === "drop-shadow")
    return v;
  var number2 = (value.match(floatRegex) || [])[0];
  if (!number2)
    return v;
  var unit = value.replace(number2, "");
  var defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var maxDefaults, functionRegex, filter;
var init_filter = __esm({
  "../../node_modules/style-value-types/dist/es/complex/filter.js"() {
    init_modules();
    init_complex();
    init_utils2();
    maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
    functionRegex = /([a-z-]*)\(.*?\)/g;
    filter = __assign(__assign({}, complex), { getAnimatableNone: function(v) {
      var functions = v.match(functionRegex);
      return functions ? functions.map(applyDefaultFilter).join(" ") : v;
    } });
  }
});

// ../../node_modules/style-value-types/dist/es/index.js
var init_es = __esm({
  "../../node_modules/style-value-types/dist/es/index.js"() {
    init_numbers();
    init_units();
    init_hsla();
    init_rgba();
    init_hex();
    init_color();
    init_complex();
    init_filter();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
var int;
var init_type_int = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js"() {
    init_modules();
    init_es();
    int = __assign(__assign({}, number), { transform: Math.round });
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/number.js
var numberValueTypes;
var init_number = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/number.js"() {
    init_es();
    init_type_int();
    numberValueTypes = {
      borderWidth: px,
      borderTopWidth: px,
      borderRightWidth: px,
      borderBottomWidth: px,
      borderLeftWidth: px,
      borderRadius: px,
      radius: px,
      borderTopLeftRadius: px,
      borderTopRightRadius: px,
      borderBottomRightRadius: px,
      borderBottomLeftRadius: px,
      width: px,
      maxWidth: px,
      height: px,
      maxHeight: px,
      size: px,
      top: px,
      right: px,
      bottom: px,
      left: px,
      padding: px,
      paddingTop: px,
      paddingRight: px,
      paddingBottom: px,
      paddingLeft: px,
      margin: px,
      marginTop: px,
      marginRight: px,
      marginBottom: px,
      marginLeft: px,
      rotate: degrees,
      rotateX: degrees,
      rotateY: degrees,
      rotateZ: degrees,
      scale,
      scaleX: scale,
      scaleY: scale,
      scaleZ: scale,
      skew: degrees,
      skewX: degrees,
      skewY: degrees,
      distance: px,
      translateX: px,
      translateY: px,
      translateZ: px,
      x: px,
      y: px,
      z: px,
      perspective: px,
      transformPerspective: px,
      opacity: alpha,
      originX: progressPercentage,
      originY: progressPercentage,
      originZ: px,
      zIndex: int,
      fillOpacity: alpha,
      strokeOpacity: alpha,
      numOctaves: int
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
function buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
  var _a2;
  var style3 = state.style, vars = state.vars, transform4 = state.transform, transformKeys2 = state.transformKeys, transformOrigin = state.transformOrigin;
  transformKeys2.length = 0;
  var hasTransform = false;
  var hasTransformOrigin = false;
  var transformIsNone = true;
  for (var key in latestValues) {
    var value = latestValues[key];
    if (isCSSVariable(key)) {
      vars[key] = value;
      continue;
    }
    var valueType = numberValueTypes[key];
    var valueAsType = getValueAsType(value, valueType);
    if (isTransformProp(key)) {
      hasTransform = true;
      transform4[key] = valueAsType;
      transformKeys2.push(key);
      if (!transformIsNone)
        continue;
      if (value !== ((_a2 = valueType.default) !== null && _a2 !== void 0 ? _a2 : 0))
        transformIsNone = false;
    } else if (isTransformOriginProp(key)) {
      transformOrigin[key] = valueAsType;
      hasTransformOrigin = true;
    } else {
      if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) && valueScaleCorrection[key]) {
        var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);
        var applyTo = valueScaleCorrection[key].applyTo;
        if (applyTo) {
          var num = applyTo.length;
          for (var i = 0; i < num; i++) {
            style3[applyTo[i]] = correctedValue;
          }
        } else {
          style3[key] = correctedValue;
        }
      } else {
        style3[key] = valueAsType;
      }
    }
  }
  if (layoutState && projection && buildProjectionTransform && buildProjectionTransformOrigin) {
    style3.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform4 : void 0);
    if (transformTemplate) {
      style3.transform = transformTemplate(transform4, style3.transform);
    }
    style3.transformOrigin = buildProjectionTransformOrigin(layoutState);
  } else {
    if (hasTransform) {
      style3.transform = buildTransform(state, options, transformIsNone, transformTemplate);
    }
    if (hasTransformOrigin) {
      style3.transformOrigin = buildTransformOrigin(transformOrigin);
    }
  }
}
var init_build_styles = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.js"() {
    init_scale_correction();
    init_build_transform();
    init_is_css_variable();
    init_transform();
    init_get_as_type();
    init_number();
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
var createHtmlRenderState;
var init_create_render_state = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js"() {
    createHtmlRenderState = function() {
      return {
        style: {},
        transform: {},
        transformKeys: [],
        transformOrigin: {},
        vars: {}
      };
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/use-props.js
function copyRawValuesOnly(target, source, props) {
  for (var key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues(_a2, visualState, isStatic) {
  var transformTemplate = _a2.transformTemplate;
  return (0, import_react14.useMemo)(function() {
    var state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, void 0, void 0, { enableHardwareAcceleration: !isStatic }, transformTemplate);
    var vars = state.vars, style3 = state.style;
    return __assign(__assign({}, vars), style3);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  var styleProp = props.style || {};
  var style3 = {};
  copyRawValuesOnly(style3, styleProp, props);
  Object.assign(style3, useInitialMotionValues(props, visualState, isStatic));
  if (props.transformValues) {
    style3 = props.transformValues(style3);
  }
  return style3;
}
function useHTMLProps(props, visualState, isStatic) {
  var htmlProps = {};
  var style3 = useStyle(props, visualState, isStatic);
  if (Boolean(props.drag)) {
    htmlProps.draggable = false;
    style3.userSelect = style3.WebkitUserSelect = style3.WebkitTouchCallout = "none";
    style3.touchAction = props.drag === true ? "none" : "pan-" + (props.drag === "x" ? "y" : "x");
  }
  htmlProps.style = style3;
  return htmlProps;
}
var import_react14;
var init_use_props = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/use-props.js"() {
    init_modules();
    import_react14 = __toModule(require_react());
    init_is_forced_motion_value();
    init_is_motion_value();
    init_build_styles();
    init_create_render_state();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
function isValidMotionProp(key) {
  return validMotionProps.has(key);
}
var validMotionProps;
var init_valid_prop = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.js"() {
    validMotionProps = new Set([
      "initial",
      "animate",
      "exit",
      "style",
      "variants",
      "transition",
      "transformTemplate",
      "transformValues",
      "custom",
      "inherit",
      "layout",
      "layoutId",
      "_layoutResetTransform",
      "onLayoutAnimationComplete",
      "onViewportBoxUpdate",
      "onLayoutMeasure",
      "onBeforeLayoutMeasure",
      "onAnimationStart",
      "onAnimationComplete",
      "onUpdate",
      "onDragStart",
      "onDrag",
      "onDragEnd",
      "onMeasureDragConstraints",
      "onDirectionLock",
      "onDragTransitionEnd",
      "drag",
      "dragControls",
      "dragListener",
      "dragConstraints",
      "dragDirectionLock",
      "_dragX",
      "_dragY",
      "dragElastic",
      "dragMomentum",
      "dragPropagation",
      "dragTransition",
      "whileDrag",
      "onPan",
      "onPanStart",
      "onPanEnd",
      "onPanSessionStart",
      "onTap",
      "onTapStart",
      "onTapCancel",
      "onHoverStart",
      "onHoverEnd",
      "whileFocus",
      "whileTap",
      "whileHover"
    ]);
  }
});

// ../../node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
var require_memoize_browser_cjs = __commonJS({
  "../../node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function memoize3(fn) {
      var cache = {};
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    exports2.default = memoize3;
  }
});

// ../../node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
var require_is_prop_valid_browser_cjs = __commonJS({
  "../../node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var memoize3 = _interopDefault(require_memoize_browser_cjs());
    var reactPropsRegex2 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var index = memoize3(function(prop) {
      return reactPropsRegex2.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    exports2.default = index;
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
function filterProps(props, isDom, forwardMotionProps) {
  var filteredProps = {};
  for (var key in props) {
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key)) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}
var shouldForward, emotionIsPropValid_1;
var init_filter_props = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js"() {
    init_valid_prop();
    shouldForward = function(key) {
      return !isValidMotionProp(key);
    };
    try {
      emotionIsPropValid_1 = require_is_prop_valid_browser_cjs().default;
      shouldForward = function(key) {
        if (key.startsWith("on")) {
          return !isValidMotionProp(key);
        } else {
          return emotionIsPropValid_1(key);
        }
      };
    } catch (_a2) {
    }
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
function calcOrigin(origin, offset, size) {
  return typeof origin === "string" ? origin : px.transform(offset + size * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return pxOriginX + " " + pxOriginY;
}
var init_transform_origin = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js"() {
    init_es();
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/path.js
function buildSVGPath(attrs, totalLength, length2, spacing2, offset, useDashCase) {
  if (spacing2 === void 0) {
    spacing2 = 1;
  }
  if (offset === void 0) {
    offset = 0;
  }
  if (useDashCase === void 0) {
    useDashCase = true;
  }
  var keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = progressToPixels(-offset, totalLength);
  var pathLength = progressToPixels(length2, totalLength);
  var pathSpacing = progressToPixels(spacing2, totalLength);
  attrs[keys.array] = pathLength + " " + pathSpacing;
}
var progressToPixels, dashKeys, camelKeys;
var init_path = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/path.js"() {
    init_es();
    progressToPixels = function(progress2, length2) {
      return px.transform(progress2 * length2);
    };
    dashKeys = {
      offset: "stroke-dashoffset",
      array: "stroke-dasharray"
    };
    camelKeys = {
      offset: "strokeDashoffset",
      array: "strokeDasharray"
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
function buildSVGAttrs(state, _a2, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
  var attrX = _a2.attrX, attrY = _a2.attrY, originX = _a2.originX, originY = _a2.originY, pathLength = _a2.pathLength, _b = _a2.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a2.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a2, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
  buildHTMLStyles(state, latest, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin);
  state.attrs = state.style;
  state.style = {};
  var attrs = state.attrs, style3 = state.style, dimensions = state.dimensions, totalPathLength = state.totalPathLength;
  if (attrs.transform) {
    if (dimensions)
      style3.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style3.transform)) {
    style3.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (totalPathLength !== void 0 && pathLength !== void 0) {
    buildSVGPath(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
  }
}
var init_build_attrs = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js"() {
    init_modules();
    init_build_styles();
    init_transform_origin();
    init_path();
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
var createSvgRenderState;
var init_create_render_state2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js"() {
    init_modules();
    init_create_render_state();
    createSvgRenderState = function() {
      return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/use-props.js
function useSVGProps(props, visualState) {
  var visualProps = (0, import_react15.useMemo)(function() {
    var state = createSvgRenderState();
    buildSVGAttrs(state, visualState, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
    return __assign(__assign({}, state.attrs), { style: __assign({}, state.style) });
  }, [visualState]);
  if (props.style) {
    var rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
  }
  return visualProps;
}
var import_react15;
var init_use_props2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/use-props.js"() {
    init_modules();
    import_react15 = __toModule(require_react());
    init_use_props();
    init_build_attrs();
    init_create_render_state2();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/use-render.js
function createUseRender(forwardMotionProps) {
  if (forwardMotionProps === void 0) {
    forwardMotionProps = false;
  }
  var useRender = function(Component3, props, ref, _a2, isStatic) {
    var latestValues = _a2.latestValues;
    var useVisualProps = isSVGComponent(Component3) ? useSVGProps : useHTMLProps;
    var visualProps = useVisualProps(props, latestValues, isStatic);
    var filteredProps = filterProps(props, typeof Component3 === "string", forwardMotionProps);
    var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
    return (0, import_react16.createElement)(Component3, elementProps);
  };
  return useRender;
}
var import_react16;
var init_use_render = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/use-render.js"() {
    init_modules();
    import_react16 = __toModule(require_react());
    init_use_props();
    init_filter_props();
    init_is_svg_component();
    init_use_props2();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
var CAMEL_CASE_PATTERN, REPLACE_TEMPLATE, camelToDash;
var init_camel_to_dash = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js"() {
    CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
    REPLACE_TEMPLATE = "$1-$2";
    camelToDash = function(str) {
      return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/render.js
function renderHTML(element, _a2) {
  var style3 = _a2.style, vars = _a2.vars;
  Object.assign(element.style, style3);
  for (var key in vars) {
    element.style.setProperty(key, vars[key]);
  }
}
var init_render = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/render.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
var camelCaseAttributes;
var init_camel_case_attrs = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js"() {
    camelCaseAttributes = new Set([
      "baseFrequency",
      "diffuseConstant",
      "kernelMatrix",
      "kernelUnitLength",
      "keySplines",
      "keyTimes",
      "limitingConeAngle",
      "markerHeight",
      "markerWidth",
      "numOctaves",
      "targetX",
      "targetY",
      "surfaceScale",
      "specularConstant",
      "specularExponent",
      "stdDeviation",
      "tableValues",
      "viewBox",
      "gradientTransform"
    ]);
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/render.js
function renderSVG(element, renderState) {
  renderHTML(element, renderState);
  for (var key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}
var init_render2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/render.js"() {
    init_camel_to_dash();
    init_render();
    init_camel_case_attrs();
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps(props) {
  var style3 = props.style;
  var newValues = {};
  for (var key in style3) {
    if (isMotionValue(style3[key]) || isForcedMotionValue(key, props)) {
      newValues[key] = style3[key];
    }
  }
  return newValues;
}
var init_scrape_motion_values = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js"() {
    init_is_forced_motion_value();
    init_is_motion_value();
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps2(props) {
  var newValues = scrapeMotionValuesFromProps(props);
  for (var key in props) {
    if (isMotionValue(props[key])) {
      var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}
var init_scrape_motion_values2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js"() {
    init_is_motion_value();
    init_scrape_motion_values();
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
function isAnimationControls(v) {
  return typeof v === "object" && typeof v.start === "function";
}
var init_is_animation_controls = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
var isKeyframesTarget;
var init_is_keyframes_target = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js"() {
    isKeyframesTarget = function(v) {
      return Array.isArray(v);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/utils/resolve-value.js
var isCustomValue, resolveFinalValueInKeyframes;
var init_resolve_value = __esm({
  "../../node_modules/framer-motion/dist/es/utils/resolve-value.js"() {
    init_is_keyframes_target();
    isCustomValue = function(v) {
      return Boolean(v && typeof v === "object" && v.mix && v.toValue);
    };
    resolveFinalValueInKeyframes = function(v) {
      return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
function resolveMotionValue(value) {
  var unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}
var init_resolve_motion_value = __esm({
  "../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js"() {
    init_resolve_value();
    init_is_motion_value();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
function makeState(_a2, props, context, presenceContext) {
  var scrapeMotionValuesFromProps3 = _a2.scrapeMotionValuesFromProps, createRenderState = _a2.createRenderState, onMount = _a2.onMount;
  var state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state.mount = function(instance) {
      return onMount(props, instance, state);
    };
  }
  return state;
}
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  var values3 = {};
  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
  var motionValues = scrapeMotionValues(props);
  for (var key in motionValues) {
    values3[key] = resolveMotionValue(motionValues[key]);
  }
  var initial = props.initial, animate3 = props.animate;
  var isControllingVariants = checkIfControllingVariants(props);
  var isVariantNode = checkIfVariantNode(props);
  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
    initial !== null && initial !== void 0 ? initial : initial = context.initial;
    animate3 !== null && animate3 !== void 0 ? animate3 : animate3 = context.animate;
  }
  var variantToSet = blockInitialAnimation || initial === false ? animate3 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list.forEach(function(definition) {
      var resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      var transitionEnd = resolved.transitionEnd;
      resolved.transition;
      var target = __rest(resolved, ["transitionEnd", "transition"]);
      for (var key2 in target)
        values3[key2] = target[key2];
      for (var key2 in transitionEnd)
        values3[key2] = transitionEnd[key2];
    });
  }
  return values3;
}
var import_react17, makeUseVisualState;
var init_use_visual_state = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js"() {
    init_modules();
    import_react17 = __toModule(require_react());
    init_is_animation_controls();
    init_PresenceContext();
    init_variants();
    init_use_constant();
    init_resolve_motion_value();
    init_MotionContext();
    makeUseVisualState = function(config2) {
      return function(props, isStatic) {
        var context = (0, import_react17.useContext)(MotionContext);
        var presenceContext = (0, import_react17.useContext)(PresenceContext);
        return isStatic ? makeState(config2, props, context, presenceContext) : useConstant(function() {
          return makeState(config2, props, context, presenceContext);
        });
      };
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/config-motion.js
function isPath(element) {
  return element.tagName === "path";
}
var svgMotionConfig;
var init_config_motion = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/config-motion.js"() {
    init_render2();
    init_scrape_motion_values2();
    init_use_visual_state();
    init_create_render_state2();
    init_build_attrs();
    svgMotionConfig = {
      useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
        createRenderState: createSvgRenderState,
        onMount: function(props, instance, _a2) {
          var renderState = _a2.renderState, latestValues = _a2.latestValues;
          try {
            renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
          } catch (e) {
            renderState.dimensions = {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            };
          }
          if (isPath(instance)) {
            renderState.totalPathLength = instance.getTotalLength();
          }
          buildSVGAttrs(renderState, latestValues, void 0, void 0, { enableHardwareAcceleration: false }, props.transformTemplate);
          renderSVG(instance, renderState);
        }
      })
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/config-motion.js
var htmlMotionConfig;
var init_config_motion2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/config-motion.js"() {
    init_use_visual_state();
    init_scrape_motion_values();
    init_create_render_state();
    htmlMotionConfig = {
      useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps,
        createRenderState: createHtmlRenderState
      })
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
function createDomMotionConfig(Component3, _a2, preloadedFeatures, createVisualElement) {
  var _b = _a2.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
  var baseConfig = isSVGComponent(Component3) ? svgMotionConfig : htmlMotionConfig;
  return __assign(__assign({}, baseConfig), {
    preloadedFeatures,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement,
    Component: Component3
  });
}
var init_create_config = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/create-config.js"() {
    init_modules();
    init_is_svg_component();
    init_use_render();
    init_config_motion();
    init_config_motion2();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/types.js
var AnimationType;
var init_types = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/types.js"() {
    (function(AnimationType2) {
      AnimationType2["Animate"] = "animate";
      AnimationType2["Hover"] = "whileHover";
      AnimationType2["Tap"] = "whileTap";
      AnimationType2["Drag"] = "whileDrag";
      AnimationType2["Focus"] = "whileFocus";
      AnimationType2["Exit"] = "exit";
    })(AnimationType || (AnimationType = {}));
  }
});

// ../../node_modules/framer-motion/dist/es/events/use-dom-event.js
function addDomEvent(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return function() {
    return target.removeEventListener(eventName, handler, options);
  };
}
function useDomEvent(ref, eventName, handler, options) {
  (0, import_react18.useEffect)(function() {
    var element = ref.current;
    if (handler && element) {
      return addDomEvent(element, eventName, handler, options);
    }
  }, [ref, eventName, handler, options]);
}
var import_react18;
var init_use_dom_event = __esm({
  "../../node_modules/framer-motion/dist/es/events/use-dom-event.js"() {
    import_react18 = __toModule(require_react());
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js
function useFocusGesture(_a2) {
  var whileFocus = _a2.whileFocus, visualElement2 = _a2.visualElement;
  var onFocus = function() {
    var _a3;
    (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Focus, true);
  };
  var onBlur = function() {
    var _a3;
    (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Focus, false);
  };
  useDomEvent(visualElement2, "focus", whileFocus ? onFocus : void 0);
  useDomEvent(visualElement2, "blur", whileFocus ? onBlur : void 0);
}
var init_use_focus_gesture = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js"() {
    init_types();
    init_use_dom_event();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/utils/event-type.js
function isMouseEvent(event) {
  if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof MouseEvent;
}
function isTouchEvent(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}
var init_event_type = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/utils/event-type.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/events/event-info.js
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var isMouseEvent2 = event instanceof MouseEvent;
    var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
function pointFromTouch(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
function getViewportPointFromEvent(event) {
  return extractEventInfo(event, "client");
}
var defaultPagePoint, wrapHandler;
var init_event_info = __esm({
  "../../node_modules/framer-motion/dist/es/events/event-info.js"() {
    init_event_type();
    defaultPagePoint = { pageX: 0, pageY: 0 };
    wrapHandler = function(handler, shouldFilterPrimaryPointer) {
      if (shouldFilterPrimaryPointer === void 0) {
        shouldFilterPrimaryPointer = false;
      }
      var listener = function(event) {
        return handler(event, extractEventInfo(event));
      };
      return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/events/utils.js
var supportsPointerEvents, supportsTouchEvents, supportsMouseEvents;
var init_utils4 = __esm({
  "../../node_modules/framer-motion/dist/es/events/utils.js"() {
    init_is_browser();
    supportsPointerEvents = function() {
      return isBrowser && window.onpointerdown === null;
    };
    supportsTouchEvents = function() {
      return isBrowser && window.ontouchstart === null;
    };
    supportsMouseEvents = function() {
      return isBrowser && window.onmousedown === null;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/events/use-pointer-event.js
function getPointerEventName(name) {
  if (supportsPointerEvents()) {
    return name;
  } else if (supportsTouchEvents()) {
    return touchEventNames[name];
  } else if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
}
function usePointerEvent(ref, eventName, handler, options) {
  return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
}
var mouseEventNames, touchEventNames;
var init_use_pointer_event = __esm({
  "../../node_modules/framer-motion/dist/es/events/use-pointer-event.js"() {
    init_use_dom_event();
    init_event_info();
    init_utils4();
    mouseEventNames = {
      pointerdown: "mousedown",
      pointermove: "mousemove",
      pointerup: "mouseup",
      pointercancel: "mousecancel",
      pointerover: "mouseover",
      pointerout: "mouseout",
      pointerenter: "mouseenter",
      pointerleave: "mouseleave"
    };
    touchEventNames = {
      pointerdown: "touchstart",
      pointermove: "touchmove",
      pointerup: "touchend",
      pointercancel: "touchcancel"
    };
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
function createLock(name) {
  var lock = null;
  return function() {
    var openLock = function() {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
function getGlobalLock(drag2) {
  var lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    var openHorizontal_1 = globalHorizontalLock();
    var openVertical_1 = globalVerticalLock();
    if (openHorizontal_1 && openVertical_1) {
      lock = function() {
        openHorizontal_1();
        openVertical_1();
      };
    } else {
      if (openHorizontal_1)
        openHorizontal_1();
      if (openVertical_1)
        openVertical_1();
    }
  }
  return lock;
}
function isDragActive() {
  var openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}
var globalHorizontalLock, globalVerticalLock;
var init_lock = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js"() {
    globalHorizontalLock = createLock("dragHorizontal");
    globalVerticalLock = createLock("dragVertical");
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js
function createHoverEvent(visualElement2, isActive, callback) {
  return function(event, info) {
    var _a2;
    if (!isMouseEvent(event) || isDragActive())
      return;
    callback === null || callback === void 0 ? void 0 : callback(event, info);
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Hover, isActive);
  };
}
function useHoverGesture(_a2) {
  var onHoverStart = _a2.onHoverStart, onHoverEnd = _a2.onHoverEnd, whileHover = _a2.whileHover, visualElement2 = _a2.visualElement;
  usePointerEvent(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
  usePointerEvent(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
}
var init_use_hover_gesture = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js"() {
    init_event_type();
    init_types();
    init_use_pointer_event();
    init_lock();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
var isNodeOrChild;
var init_is_node_or_child = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js"() {
    isNodeOrChild = function(parent, child) {
      if (!child) {
        return false;
      } else if (parent === child) {
        return true;
      } else {
        return isNodeOrChild(parent, child.parentElement);
      }
    };
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
function useUnmountEffect(callback) {
  return (0, import_react19.useEffect)(function() {
    return function() {
      return callback();
    };
  }, []);
}
var import_react19;
var init_use_unmount_effect = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-unmount-effect.js"() {
    import_react19 = __toModule(require_react());
  }
});

// ../../node_modules/popmotion/dist/es/utils/clamp.js
var clamp2;
var init_clamp = __esm({
  "../../node_modules/popmotion/dist/es/utils/clamp.js"() {
    clamp2 = function(min, max, v) {
      return Math.min(Math.max(v, min), max);
    };
  }
});

// ../../node_modules/popmotion/dist/es/animations/utils/find-spring.js
function findSpring(_a2) {
  var _b = _a2.duration, duration2 = _b === void 0 ? 800 : _b, _c = _a2.bounce, bounce = _c === void 0 ? 0.25 : _c, _d = _a2.velocity, velocity = _d === void 0 ? 0 : _d, _e3 = _a2.mass, mass = _e3 === void 0 ? 1 : _e3;
  var envelope;
  var derivative;
  warning(duration2 <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
  var dampingRatio = 1 - bounce;
  dampingRatio = clamp2(minDamping, maxDamping, dampingRatio);
  duration2 = clamp2(minDuration, maxDuration, duration2 / 1e3);
  if (dampingRatio < 1) {
    envelope = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration2;
      var a2 = exponentialDecay - velocity;
      var b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      var c3 = Math.exp(-delta2);
      return safeMin - a2 / b2 * c3;
    };
    derivative = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration2;
      var d = delta2 * velocity + velocity;
      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration2;
      var f = Math.exp(-delta2);
      var g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      var factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration2);
      var b2 = (undampedFreq2 - velocity) * duration2 + 1;
      return -safeMin + a2 * b2;
    };
    derivative = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration2);
      var b2 = (velocity - undampedFreq2) * (duration2 * duration2);
      return a2 * b2;
    };
  }
  var initialGuess = 5 / duration2;
  var undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration2 = duration2 * 1e3;
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration: duration2
    };
  } else {
    var stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration: duration2
    };
  }
}
function approximateRoot(envelope, derivative, initialGuess) {
  var result = initialGuess;
  for (var i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}
var safeMin, minDuration, maxDuration, minDamping, maxDamping, rootIterations;
var init_find_spring = __esm({
  "../../node_modules/popmotion/dist/es/animations/utils/find-spring.js"() {
    init_hey_listen_es();
    init_clamp();
    safeMin = 1e-3;
    minDuration = 0.01;
    maxDuration = 10;
    minDamping = 0.05;
    maxDamping = 1;
    rootIterations = 12;
  }
});

// ../../node_modules/popmotion/dist/es/animations/generators/spring.js
function isSpringType(options, keys) {
  return keys.some(function(key) {
    return options[key] !== void 0;
  });
}
function getSpringOptions(options) {
  var springOptions = __assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options);
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    var derived = findSpring(options);
    springOptions = __assign(__assign(__assign({}, springOptions), derived), { velocity: 0, mass: 1 });
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring(_a2) {
  var _b = _a2.from, from2 = _b === void 0 ? 0 : _b, _c = _a2.to, to2 = _c === void 0 ? 1 : _c, _d = _a2.restSpeed, restSpeed = _d === void 0 ? 2 : _d, restDelta = _a2.restDelta, options = __rest(_a2, ["from", "to", "restSpeed", "restDelta"]);
  var state = { done: false, value: from2 };
  var _e3 = getSpringOptions(options), stiffness = _e3.stiffness, damping = _e3.damping, mass = _e3.mass, velocity = _e3.velocity, duration2 = _e3.duration, isResolvedFromDuration = _e3.isResolvedFromDuration;
  var resolveSpring = zero;
  var resolveVelocity = zero;
  function createSpring() {
    var initialVelocity = velocity ? -(velocity / 1e3) : 0;
    var initialDelta = to2 - from2;
    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
    restDelta !== null && restDelta !== void 0 ? restDelta : restDelta = Math.abs(to2 - from2) <= 1 ? 0.01 : 0.4;
    if (dampingRatio < 1) {
      var angularFreq_1 = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 * Math.sin(angularFreq_1 * t) + initialDelta * Math.cos(angularFreq_1 * t));
      };
      resolveVelocity = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 + initialDelta * Math.cos(angularFreq_1 * t)) - envelope * (Math.cos(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq_1 * initialDelta * Math.sin(angularFreq_1 * t));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = function(t) {
        return to2 - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
      };
    } else {
      var dampedAngularFreq_1 = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        var freqForT = Math.min(dampedAngularFreq_1 * t, 300);
        return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq_1 * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq_1;
      };
    }
  }
  createSpring();
  return {
    next: function(t) {
      var current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        var currentVelocity = resolveVelocity(t) * 1e3;
        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        var isBelowDisplacementThreshold = Math.abs(to2 - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration2;
      }
      state.value = state.done ? to2 : current;
      return state;
    },
    flipTarget: function() {
      var _a3;
      velocity = -velocity;
      _a3 = [to2, from2], from2 = _a3[0], to2 = _a3[1];
      createSpring();
    }
  };
}
var durationKeys, physicsKeys, zero;
var init_spring = __esm({
  "../../node_modules/popmotion/dist/es/animations/generators/spring.js"() {
    init_modules();
    init_find_spring();
    durationKeys = ["duration", "bounce"];
    physicsKeys = ["stiffness", "damping", "mass"];
    spring.needsInterpolation = function(a2, b2) {
      return typeof a2 === "string" || typeof b2 === "string";
    };
    zero = function(_t5) {
      return 0;
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/progress.js
var progress;
var init_progress = __esm({
  "../../node_modules/popmotion/dist/es/utils/progress.js"() {
    progress = function(from2, to2, value) {
      var toFromDifference = to2 - from2;
      return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/mix.js
var mix;
var init_mix = __esm({
  "../../node_modules/popmotion/dist/es/utils/mix.js"() {
    mix = function(from2, to2, progress2) {
      return -progress2 * from2 + progress2 * to2 + from2;
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/mix-color.js
var mixLinearColor, colorTypes, getColorType, notAnimatable, mixColor;
var init_mix_color = __esm({
  "../../node_modules/popmotion/dist/es/utils/mix-color.js"() {
    init_modules();
    init_mix();
    init_es();
    init_hey_listen_es();
    mixLinearColor = function(from2, to2, v) {
      var fromExpo = from2 * from2;
      var toExpo = to2 * to2;
      return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
    };
    colorTypes = [hex, rgba, hsla];
    getColorType = function(v) {
      return colorTypes.find(function(type) {
        return type.test(v);
      });
    };
    notAnimatable = function(color3) {
      return "'" + color3 + "' is not an animatable color. Use the equivalent color code instead.";
    };
    mixColor = function(from2, to2) {
      var fromColorType = getColorType(from2);
      var toColorType = getColorType(to2);
      invariant(!!fromColorType, notAnimatable(from2));
      invariant(!!toColorType, notAnimatable(to2));
      invariant(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
      var fromColor = fromColorType.parse(from2);
      var toColor = toColorType.parse(to2);
      var blended = __assign({}, fromColor);
      var mixFunc = fromColorType === hsla ? mix : mixLinearColor;
      return function(v) {
        for (var key in blended) {
          if (key !== "alpha") {
            blended[key] = mixFunc(fromColor[key], toColor[key], v);
          }
        }
        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
        return fromColorType.transform(blended);
      };
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/inc.js
var isNum;
var init_inc = __esm({
  "../../node_modules/popmotion/dist/es/utils/inc.js"() {
    isNum = function(v) {
      return typeof v === "number";
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/pipe.js
var combineFunctions, pipe;
var init_pipe = __esm({
  "../../node_modules/popmotion/dist/es/utils/pipe.js"() {
    combineFunctions = function(a2, b2) {
      return function(v) {
        return b2(a2(v));
      };
    };
    pipe = function() {
      var transformers = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        transformers[_i] = arguments[_i];
      }
      return transformers.reduce(combineFunctions);
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/mix-complex.js
function getMixer(origin, target) {
  if (isNum(origin)) {
    return function(v) {
      return mix(origin, target, v);
    };
  } else if (color.test(origin)) {
    return mixColor(origin, target);
  } else {
    return mixComplex(origin, target);
  }
}
function analyse2(value) {
  var parsed = complex.parse(value);
  var numValues = parsed.length;
  var numNumbers = 0;
  var numRGB = 0;
  var numHSL = 0;
  for (var i = 0; i < numValues; i++) {
    if (numNumbers || typeof parsed[i] === "number") {
      numNumbers++;
    } else {
      if (parsed[i].hue !== void 0) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }
  return { parsed, numNumbers, numRGB, numHSL };
}
var mixArray, mixObject, mixComplex;
var init_mix_complex = __esm({
  "../../node_modules/popmotion/dist/es/utils/mix-complex.js"() {
    init_modules();
    init_es();
    init_mix();
    init_mix_color();
    init_inc();
    init_pipe();
    init_hey_listen_es();
    mixArray = function(from2, to2) {
      var output = __spreadArray([], from2);
      var numValues = output.length;
      var blendValue = from2.map(function(fromThis, i) {
        return getMixer(fromThis, to2[i]);
      });
      return function(v) {
        for (var i = 0; i < numValues; i++) {
          output[i] = blendValue[i](v);
        }
        return output;
      };
    };
    mixObject = function(origin, target) {
      var output = __assign(__assign({}, origin), target);
      var blendValue = {};
      for (var key in output) {
        if (origin[key] !== void 0 && target[key] !== void 0) {
          blendValue[key] = getMixer(origin[key], target[key]);
        }
      }
      return function(v) {
        for (var key2 in blendValue) {
          output[key2] = blendValue[key2](v);
        }
        return output;
      };
    };
    mixComplex = function(origin, target) {
      var template = complex.createTransformer(target);
      var originStats = analyse2(origin);
      var targetStats = analyse2(target);
      invariant(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
      return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/interpolate.js
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    if (color.test(v)) {
      return mixColor;
    } else {
      return mixComplex;
    }
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
}
function createMixers(output, ease, customMixer) {
  var mixers = [];
  var mixerFactory = customMixer || detectMixerFactory(output[0]);
  var numMixers = output.length - 1;
  for (var i = 0; i < numMixers; i++) {
    var mixer = mixerFactory(output[i], output[i + 1]);
    if (ease) {
      var easingFunction = Array.isArray(ease) ? ease[i] : ease;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function fastInterpolate(_a2, _b) {
  var from2 = _a2[0], to2 = _a2[1];
  var mixer = _b[0];
  return function(v) {
    return mixer(progress(from2, to2, v));
  };
}
function slowInterpolate(input, mixers) {
  var inputLength = input.length;
  var lastInputIndex = inputLength - 1;
  return function(v) {
    var mixerIndex = 0;
    var foundMixerIndex = false;
    if (v <= input[0]) {
      foundMixerIndex = true;
    } else if (v >= input[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }
    if (!foundMixerIndex) {
      var i = 1;
      for (; i < inputLength; i++) {
        if (input[i] > v || i === lastInputIndex) {
          break;
        }
      }
      mixerIndex = i - 1;
    }
    var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}
function interpolate(input, output, _a2) {
  var _b = _a2 === void 0 ? {} : _a2, _c = _b.clamp, isClamp = _c === void 0 ? true : _c, ease = _b.ease, mixer = _b.mixer;
  var inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
  if (input[0] > input[inputLength - 1]) {
    input = [].concat(input);
    output = [].concat(output);
    input.reverse();
    output.reverse();
  }
  var mixers = createMixers(output, ease, mixer);
  var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
  return isClamp ? function(v) {
    return interpolator(clamp2(input[0], input[inputLength - 1], v));
  } : interpolator;
}
var mixNumber;
var init_interpolate = __esm({
  "../../node_modules/popmotion/dist/es/utils/interpolate.js"() {
    init_progress();
    init_mix();
    init_mix_color();
    init_mix_complex();
    init_es();
    init_clamp();
    init_pipe();
    init_hey_listen_es();
    mixNumber = function(from2, to2) {
      return function(p) {
        return mix(from2, to2, p);
      };
    };
  }
});

// ../../node_modules/popmotion/dist/es/easing/utils.js
var reverseEasing, mirrorEasing, createExpoIn, createBackIn, createAnticipate;
var init_utils5 = __esm({
  "../../node_modules/popmotion/dist/es/easing/utils.js"() {
    reverseEasing = function(easing2) {
      return function(p) {
        return 1 - easing2(1 - p);
      };
    };
    mirrorEasing = function(easing2) {
      return function(p) {
        return p <= 0.5 ? easing2(2 * p) / 2 : (2 - easing2(2 * (1 - p))) / 2;
      };
    };
    createExpoIn = function(power) {
      return function(p) {
        return Math.pow(p, power);
      };
    };
    createBackIn = function(power) {
      return function(p) {
        return p * p * ((power + 1) * p - power);
      };
    };
    createAnticipate = function(power) {
      var backEasing = createBackIn(power);
      return function(p) {
        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
      };
    };
  }
});

// ../../node_modules/popmotion/dist/es/easing/index.js
var DEFAULT_OVERSHOOT_STRENGTH, BOUNCE_FIRST_THRESHOLD, BOUNCE_SECOND_THRESHOLD, BOUNCE_THIRD_THRESHOLD, linear, easeIn, easeOut, easeInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate, ca, cb, cc, bounceOut, bounceIn, bounceInOut;
var init_easing = __esm({
  "../../node_modules/popmotion/dist/es/easing/index.js"() {
    init_utils5();
    DEFAULT_OVERSHOOT_STRENGTH = 1.525;
    BOUNCE_FIRST_THRESHOLD = 4 / 11;
    BOUNCE_SECOND_THRESHOLD = 8 / 11;
    BOUNCE_THIRD_THRESHOLD = 9 / 10;
    linear = function(p) {
      return p;
    };
    easeIn = createExpoIn(2);
    easeOut = reverseEasing(easeIn);
    easeInOut = mirrorEasing(easeIn);
    circIn = function(p) {
      return 1 - Math.sin(Math.acos(p));
    };
    circOut = reverseEasing(circIn);
    circInOut = mirrorEasing(circOut);
    backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
    backOut = reverseEasing(backIn);
    backInOut = mirrorEasing(backIn);
    anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
    ca = 4356 / 361;
    cb = 35442 / 1805;
    cc = 16061 / 1805;
    bounceOut = function(p) {
      if (p === 1 || p === 0)
        return p;
      var p2 = p * p;
      return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
    };
    bounceIn = reverseEasing(bounceOut);
    bounceInOut = function(p) {
      return p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
    };
  }
});

// ../../node_modules/popmotion/dist/es/animations/generators/keyframes.js
function defaultEasing(values3, easing2) {
  return values3.map(function() {
    return easing2 || easeInOut;
  }).splice(0, values3.length - 1);
}
function defaultOffset(values3) {
  var numValues = values3.length;
  return values3.map(function(_value, i) {
    return i !== 0 ? i / (numValues - 1) : 0;
  });
}
function convertOffsetToTimes(offset, duration2) {
  return offset.map(function(o2) {
    return o2 * duration2;
  });
}
function keyframes(_a2) {
  var _b = _a2.from, from2 = _b === void 0 ? 0 : _b, _c = _a2.to, to2 = _c === void 0 ? 1 : _c, ease = _a2.ease, offset = _a2.offset, _d = _a2.duration, duration2 = _d === void 0 ? 300 : _d;
  var state = { done: false, value: from2 };
  var values3 = Array.isArray(to2) ? to2 : [from2, to2];
  var times = convertOffsetToTimes(offset && offset.length === values3.length ? offset : defaultOffset(values3), duration2);
  function createInterpolator() {
    return interpolate(times, values3, {
      ease: Array.isArray(ease) ? ease : defaultEasing(values3, ease)
    });
  }
  var interpolator = createInterpolator();
  return {
    next: function(t) {
      state.value = interpolator(t);
      state.done = t >= duration2;
      return state;
    },
    flipTarget: function() {
      values3.reverse();
      interpolator = createInterpolator();
    }
  };
}
var init_keyframes = __esm({
  "../../node_modules/popmotion/dist/es/animations/generators/keyframes.js"() {
    init_interpolate();
    init_easing();
  }
});

// ../../node_modules/popmotion/dist/es/animations/generators/decay.js
function decay(_a2) {
  var _b = _a2.velocity, velocity = _b === void 0 ? 0 : _b, _c = _a2.from, from2 = _c === void 0 ? 0 : _c, _d = _a2.power, power = _d === void 0 ? 0.8 : _d, _e3 = _a2.timeConstant, timeConstant = _e3 === void 0 ? 350 : _e3, _f = _a2.restDelta, restDelta = _f === void 0 ? 0.5 : _f, modifyTarget = _a2.modifyTarget;
  var state = { done: false, value: from2 };
  var amplitude = power * velocity;
  var ideal = from2 + amplitude;
  var target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - from2;
  return {
    next: function(t) {
      var delta2 = -amplitude * Math.exp(-t / timeConstant);
      state.done = !(delta2 > restDelta || delta2 < -restDelta);
      state.value = state.done ? target : target + delta2;
      return state;
    },
    flipTarget: function() {
    }
  };
}
var init_decay = __esm({
  "../../node_modules/popmotion/dist/es/animations/generators/decay.js"() {
  }
});

// ../../node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.js
function detectAnimationFromOptions(config2) {
  if (Array.isArray(config2.to)) {
    return keyframes;
  } else if (types[config2.type]) {
    return types[config2.type];
  }
  var keys = new Set(Object.keys(config2));
  if (keys.has("ease") || keys.has("duration") && !keys.has("dampingRatio")) {
    return keyframes;
  } else if (keys.has("dampingRatio") || keys.has("stiffness") || keys.has("mass") || keys.has("damping") || keys.has("restSpeed") || keys.has("restDelta")) {
    return spring;
  }
  return keyframes;
}
var types;
var init_detect_animation_from_options = __esm({
  "../../node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.js"() {
    init_spring();
    init_keyframes();
    init_decay();
    types = { keyframes, spring, decay };
  }
});

// ../../node_modules/framesync/dist/es/on-next-frame.js
var defaultTimestep, getCurrentTime, onNextFrame;
var init_on_next_frame = __esm({
  "../../node_modules/framesync/dist/es/on-next-frame.js"() {
    defaultTimestep = 1 / 60 * 1e3;
    getCurrentTime = typeof performance !== "undefined" ? function() {
      return performance.now();
    } : function() {
      return Date.now();
    };
    onNextFrame = typeof window !== "undefined" ? function(callback) {
      return window.requestAnimationFrame(callback);
    } : function(callback) {
      return setTimeout(function() {
        return callback(getCurrentTime());
      }, defaultTimestep);
    };
  }
});

// ../../node_modules/framesync/dist/es/create-render-step.js
function createRenderStep(runNextFrame2) {
  var toRun = [];
  var toRunNextFrame = [];
  var numToRun = 0;
  var isProcessing2 = false;
  var toKeepAlive = new WeakSet();
  var step = {
    schedule: function(callback, keepAlive, immediate) {
      if (keepAlive === void 0) {
        keepAlive = false;
      }
      if (immediate === void 0) {
        immediate = false;
      }
      var addToCurrentFrame = immediate && isProcessing2;
      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing2)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: function(callback) {
      var index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: function(frameData) {
      var _a2;
      isProcessing2 = true;
      _a2 = [toRunNextFrame, toRun], toRun = _a2[0], toRunNextFrame = _a2[1];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (var i = 0; i < numToRun; i++) {
          var callback = toRun[i];
          callback(frameData);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame2();
          }
        }
      }
      isProcessing2 = false;
    }
  };
  return step;
}
var init_create_render_step = __esm({
  "../../node_modules/framesync/dist/es/create-render-step.js"() {
  }
});

// ../../node_modules/framesync/dist/es/index.js
var maxElapsed, useDefaultElapsed, runNextFrame, isProcessing, frame, stepsOrder, steps, sync, cancelSync, flushSync, processStep, processFrame, startLoop, getFrameData, es_default;
var init_es2 = __esm({
  "../../node_modules/framesync/dist/es/index.js"() {
    init_on_next_frame();
    init_create_render_step();
    maxElapsed = 40;
    useDefaultElapsed = true;
    runNextFrame = false;
    isProcessing = false;
    frame = {
      delta: 0,
      timestamp: 0
    };
    stepsOrder = ["read", "update", "preRender", "render", "postRender"];
    steps = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
      acc[key] = createRenderStep(function() {
        return runNextFrame = true;
      });
      return acc;
    }, {});
    sync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
      var step = steps[key];
      acc[key] = function(process2, keepAlive, immediate) {
        if (keepAlive === void 0) {
          keepAlive = false;
        }
        if (immediate === void 0) {
          immediate = false;
        }
        if (!runNextFrame)
          startLoop();
        return step.schedule(process2, keepAlive, immediate);
      };
      return acc;
    }, {});
    cancelSync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
      acc[key] = steps[key].cancel;
      return acc;
    }, {});
    flushSync = /* @__PURE__ */ stepsOrder.reduce(function(acc, key) {
      acc[key] = function() {
        return steps[key].process(frame);
      };
      return acc;
    }, {});
    processStep = function(stepId) {
      return steps[stepId].process(frame);
    };
    processFrame = function(timestamp) {
      runNextFrame = false;
      frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
      frame.timestamp = timestamp;
      isProcessing = true;
      stepsOrder.forEach(processStep);
      isProcessing = false;
      if (runNextFrame) {
        useDefaultElapsed = false;
        onNextFrame(processFrame);
      }
    };
    startLoop = function() {
      runNextFrame = true;
      useDefaultElapsed = true;
      if (!isProcessing)
        onNextFrame(processFrame);
    };
    getFrameData = function() {
      return frame;
    };
    es_default = sync;
  }
});

// ../../node_modules/popmotion/dist/es/animations/utils/elapsed.js
function loopElapsed(elapsed, duration2, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return elapsed - duration2 - delay;
}
function reverseElapsed(elapsed, duration2, delay, isForwardPlayback) {
  if (delay === void 0) {
    delay = 0;
  }
  if (isForwardPlayback === void 0) {
    isForwardPlayback = true;
  }
  return isForwardPlayback ? loopElapsed(duration2 + -elapsed, duration2, delay) : duration2 - (elapsed - duration2) + delay;
}
function hasRepeatDelayElapsed(elapsed, duration2, delay, isForwardPlayback) {
  return isForwardPlayback ? elapsed >= duration2 + delay : elapsed <= -delay;
}
var init_elapsed = __esm({
  "../../node_modules/popmotion/dist/es/animations/utils/elapsed.js"() {
  }
});

// ../../node_modules/popmotion/dist/es/animations/index.js
function animate(_a2) {
  var _b, _c;
  var from2 = _a2.from, _d = _a2.autoplay, autoplay = _d === void 0 ? true : _d, _e3 = _a2.driver, driver = _e3 === void 0 ? framesync : _e3, _f = _a2.elapsed, elapsed = _f === void 0 ? 0 : _f, _g = _a2.repeat, repeatMax = _g === void 0 ? 0 : _g, _h = _a2.repeatType, repeatType = _h === void 0 ? "loop" : _h, _j = _a2.repeatDelay, repeatDelay = _j === void 0 ? 0 : _j, onPlay = _a2.onPlay, onStop = _a2.onStop, onComplete = _a2.onComplete, onRepeat = _a2.onRepeat, onUpdate = _a2.onUpdate, options = __rest(_a2, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
  var to2 = options.to;
  var driverControls;
  var repeatCount = 0;
  var computedDuration = options.duration;
  var latest;
  var isComplete = false;
  var isForwardPlayback = true;
  var interpolateFromNumber;
  var animator = detectAnimationFromOptions(options);
  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from2, to2)) {
    interpolateFromNumber = interpolate([0, 100], [from2, to2], {
      clamp: false
    });
    from2 = 0;
    to2 = 100;
  }
  var animation = animator(__assign(__assign({}, options), { from: from2, to: to2 }));
  function repeat() {
    repeatCount++;
    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror")
        animation.flipTarget();
    }
    isComplete = false;
    onRepeat && onRepeat();
  }
  function complete() {
    driverControls.stop();
    onComplete && onComplete();
  }
  function update(delta2) {
    if (!isForwardPlayback)
      delta2 = -delta2;
    elapsed += delta2;
    if (!isComplete) {
      var state = animation.next(Math.max(0, elapsed));
      latest = state.value;
      if (interpolateFromNumber)
        latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state.done : elapsed <= 0;
    }
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
    if (isComplete) {
      if (repeatCount === 0)
        computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
      } else {
        complete();
      }
    }
  }
  function play() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }
  autoplay && play();
  return {
    stop: function() {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}
var framesync;
var init_animations = __esm({
  "../../node_modules/popmotion/dist/es/animations/index.js"() {
    init_modules();
    init_detect_animation_from_options();
    init_es2();
    init_interpolate();
    init_elapsed();
    framesync = function(update) {
      var passTimestamp = function(_a2) {
        var delta2 = _a2.delta;
        return update(delta2);
      };
      return {
        start: function() {
          return es_default.update(passTimestamp, true);
        },
        stop: function() {
          return cancelSync.update(passTimestamp);
        }
      };
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/velocity-per-second.js
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}
var init_velocity_per_second = __esm({
  "../../node_modules/popmotion/dist/es/utils/velocity-per-second.js"() {
  }
});

// ../../node_modules/popmotion/dist/es/animations/inertia.js
function inertia(_a2) {
  var _b = _a2.from, from2 = _b === void 0 ? 0 : _b, _c = _a2.velocity, velocity = _c === void 0 ? 0 : _c, min = _a2.min, max = _a2.max, _d = _a2.power, power = _d === void 0 ? 0.8 : _d, _e3 = _a2.timeConstant, timeConstant = _e3 === void 0 ? 750 : _e3, _f = _a2.bounceStiffness, bounceStiffness = _f === void 0 ? 500 : _f, _g = _a2.bounceDamping, bounceDamping = _g === void 0 ? 10 : _g, _h = _a2.restDelta, restDelta = _h === void 0 ? 1 : _h, modifyTarget = _a2.modifyTarget, driver = _a2.driver, onUpdate = _a2.onUpdate, onComplete = _a2.onComplete;
  var currentAnimation;
  function isOutOfBounds(v) {
    return min !== void 0 && v < min || max !== void 0 && v > max;
  }
  function boundaryNearest(v) {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v) < Math.abs(max - v) ? min : max;
  }
  function startAnimation2(options) {
    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    currentAnimation = animate(__assign(__assign({}, options), { driver, onUpdate: function(v) {
      var _a3;
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
      (_a3 = options.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(options, v);
    }, onComplete }));
  }
  function startSpring(options) {
    startAnimation2(__assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
  }
  if (isOutOfBounds(from2)) {
    startSpring({ from: from2, velocity, to: boundaryNearest(from2) });
  } else {
    var target = power * velocity + from2;
    if (typeof modifyTarget !== "undefined")
      target = modifyTarget(target);
    var boundary_1 = boundaryNearest(target);
    var heading_1 = boundary_1 === min ? -1 : 1;
    var prev_1;
    var current_1;
    var checkBoundary = function(v) {
      prev_1 = current_1;
      current_1 = v;
      velocity = velocityPerSecond(v - prev_1, getFrameData().delta);
      if (heading_1 === 1 && v > boundary_1 || heading_1 === -1 && v < boundary_1) {
        startSpring({ from: v, to: boundary_1, velocity });
      }
    };
    startAnimation2({
      type: "decay",
      from: from2,
      velocity,
      timeConstant,
      power,
      restDelta,
      modifyTarget,
      onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
    });
  }
  return {
    stop: function() {
      return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    }
  };
}
var init_inertia = __esm({
  "../../node_modules/popmotion/dist/es/animations/inertia.js"() {
    init_modules();
    init_animations();
    init_velocity_per_second();
    init_es2();
  }
});

// ../../node_modules/popmotion/dist/es/utils/is-point.js
var isPoint;
var init_is_point = __esm({
  "../../node_modules/popmotion/dist/es/utils/is-point.js"() {
    isPoint = function(point) {
      return point.hasOwnProperty("x") && point.hasOwnProperty("y");
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/is-point-3d.js
var isPoint3D;
var init_is_point_3d = __esm({
  "../../node_modules/popmotion/dist/es/utils/is-point-3d.js"() {
    init_is_point();
    isPoint3D = function(point) {
      return isPoint(point) && point.hasOwnProperty("z");
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/distance.js
function distance(a2, b2) {
  if (isNum(a2) && isNum(b2)) {
    return distance1D(a2, b2);
  } else if (isPoint(a2) && isPoint(b2)) {
    var xDelta = distance1D(a2.x, b2.x);
    var yDelta = distance1D(a2.y, b2.y);
    var zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }
}
var distance1D;
var init_distance = __esm({
  "../../node_modules/popmotion/dist/es/utils/distance.js"() {
    init_is_point();
    init_is_point_3d();
    init_inc();
    distance1D = function(a2, b2) {
      return Math.abs(a2 - b2);
    };
  }
});

// ../../node_modules/popmotion/dist/es/utils/wrap.js
var wrap;
var init_wrap = __esm({
  "../../node_modules/popmotion/dist/es/utils/wrap.js"() {
    wrap = function(min, max, v) {
      var rangeSize = max - min;
      return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
    };
  }
});

// ../../node_modules/popmotion/dist/es/easing/cubic-bezier.js
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX;
  var currentT;
  var i = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < newtonIterations; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return linear;
  var sampleValues = new Float32Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    var intervalStart = 0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= newtonMinSlope) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function(t) {
    return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
  };
}
var a, b, c, calcBezier, getSlope, subdivisionPrecision, subdivisionMaxIterations, newtonIterations, newtonMinSlope, kSplineTableSize, kSampleStepSize;
var init_cubic_bezier = __esm({
  "../../node_modules/popmotion/dist/es/easing/cubic-bezier.js"() {
    init_easing();
    a = function(a1, a2) {
      return 1 - 3 * a2 + 3 * a1;
    };
    b = function(a1, a2) {
      return 3 * a2 - 6 * a1;
    };
    c = function(a1) {
      return 3 * a1;
    };
    calcBezier = function(t, a1, a2) {
      return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
    };
    getSlope = function(t, a1, a2) {
      return 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
    };
    subdivisionPrecision = 1e-7;
    subdivisionMaxIterations = 10;
    newtonIterations = 8;
    newtonMinSlope = 1e-3;
    kSplineTableSize = 11;
    kSampleStepSize = 1 / (kSplineTableSize - 1);
  }
});

// ../../node_modules/popmotion/dist/es/index.js
var init_es3 = __esm({
  "../../node_modules/popmotion/dist/es/index.js"() {
    init_animations();
    init_inertia();
    init_clamp();
    init_distance();
    init_interpolate();
    init_mix_color();
    init_mix();
    init_pipe();
    init_progress();
    init_velocity_per_second();
    init_wrap();
    init_easing();
    init_cubic_bezier();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
function useTapGesture(_a2) {
  var onTap = _a2.onTap, onTapStart = _a2.onTapStart, onTapCancel = _a2.onTapCancel, whileTap = _a2.whileTap, visualElement2 = _a2.visualElement;
  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
  var isPressing = (0, import_react20.useRef)(false);
  var cancelPointerEndListeners = (0, import_react20.useRef)(null);
  function removePointerEndListener() {
    var _a3;
    (_a3 = cancelPointerEndListeners.current) === null || _a3 === void 0 ? void 0 : _a3.call(cancelPointerEndListeners);
    cancelPointerEndListeners.current = null;
  }
  function checkPointerEnd() {
    var _a3;
    removePointerEndListener();
    isPressing.current = false;
    (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Tap, false);
    return !isDragActive();
  }
  function onPointerUp(event, info) {
    if (!checkPointerEnd())
      return;
    !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
  }
  function onPointerCancel(event, info) {
    if (!checkPointerEnd())
      return;
    onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
  }
  function onPointerDown(event, info) {
    var _a3;
    removePointerEndListener();
    if (isPressing.current)
      return;
    isPressing.current = true;
    cancelPointerEndListeners.current = pipe(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
    onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
    (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Tap, true);
  }
  usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
  useUnmountEffect(removePointerEndListener);
}
var import_react20;
var init_use_tap_gesture = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js"() {
    import_react20 = __toModule(require_react());
    init_is_node_or_child();
    init_use_pointer_event();
    init_use_unmount_effect();
    init_es3();
    init_types();
    init_lock();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js
var makeRenderlessComponent;
var init_make_renderless_component = __esm({
  "../../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js"() {
    makeRenderlessComponent = function(hook) {
      return function(props) {
        hook(props);
        return null;
      };
    };
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/gestures.js
var gestureAnimations;
var init_gestures = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/gestures.js"() {
    init_use_focus_gesture();
    init_use_hover_gesture();
    init_use_tap_gesture();
    init_make_renderless_component();
    gestureAnimations = {
      tap: makeRenderlessComponent(useTapGesture),
      focus: makeRenderlessComponent(useFocusGesture),
      hover: makeRenderlessComponent(useHoverGesture)
    };
  }
});

// ../../node_modules/framer-motion/dist/es/utils/shallow-compare.js
function shallowCompare(next2, prev2) {
  if (!Array.isArray(prev2))
    return false;
  var prevLength = prev2.length;
  if (prevLength !== next2.length)
    return false;
  for (var i = 0; i < prevLength; i++) {
    if (prev2[i] !== next2[i])
      return false;
  }
  return true;
}
var init_shallow_compare = __esm({
  "../../node_modules/framer-motion/dist/es/utils/shallow-compare.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/utils/time-conversion.js
var secondsToMilliseconds;
var init_time_conversion = __esm({
  "../../node_modules/framer-motion/dist/es/utils/time-conversion.js"() {
    secondsToMilliseconds = function(seconds) {
      return seconds * 1e3;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/easing.js
var easingLookup, easingDefinitionToFunction, isEasingArray;
var init_easing2 = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/easing.js"() {
    init_modules();
    init_hey_listen_es();
    init_es3();
    easingLookup = {
      linear,
      easeIn,
      easeInOut,
      easeOut,
      circIn,
      circInOut,
      circOut,
      backIn,
      backInOut,
      backOut,
      anticipate,
      bounceIn,
      bounceInOut,
      bounceOut
    };
    easingDefinitionToFunction = function(definition) {
      if (Array.isArray(definition)) {
        invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
        var _a2 = __read(definition, 4), x1 = _a2[0], y1 = _a2[1], x22 = _a2[2], y2 = _a2[3];
        return cubicBezier(x1, y1, x22, y2);
      } else if (typeof definition === "string") {
        invariant(easingLookup[definition] !== void 0, "Invalid easing type '" + definition + "'");
        return easingLookup[definition];
      }
      return definition;
    };
    isEasingArray = function(ease) {
      return Array.isArray(ease) && typeof ease[0] !== "number";
    };
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
var isAnimatable;
var init_is_animatable = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/is-animatable.js"() {
    init_es();
    isAnimatable = function(key, value) {
      if (key === "zIndex")
        return false;
      if (typeof value === "number" || Array.isArray(value))
        return true;
      if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
        return true;
      }
      return false;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
var underDampedSpring, criticallyDampedSpring, linearTween, keyframes2, defaultTransitions, getDefaultTransition;
var init_default_transitions = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.js"() {
    init_modules();
    init_is_keyframes_target();
    underDampedSpring = function() {
      return {
        type: "spring",
        stiffness: 500,
        damping: 25,
        restDelta: 0.5,
        restSpeed: 10
      };
    };
    criticallyDampedSpring = function(to2) {
      return {
        type: "spring",
        stiffness: 550,
        damping: to2 === 0 ? 2 * Math.sqrt(550) : 30,
        restDelta: 0.01,
        restSpeed: 10
      };
    };
    linearTween = function() {
      return {
        type: "keyframes",
        ease: "linear",
        duration: 0.3
      };
    };
    keyframes2 = function(values3) {
      return {
        type: "keyframes",
        duration: 0.8,
        values: values3
      };
    };
    defaultTransitions = {
      x: underDampedSpring,
      y: underDampedSpring,
      z: underDampedSpring,
      rotate: underDampedSpring,
      rotateX: underDampedSpring,
      rotateY: underDampedSpring,
      rotateZ: underDampedSpring,
      scaleX: criticallyDampedSpring,
      scaleY: criticallyDampedSpring,
      scale: criticallyDampedSpring,
      opacity: linearTween,
      backgroundColor: linearTween,
      color: linearTween,
      default: criticallyDampedSpring
    };
    getDefaultTransition = function(valueKey, to2) {
      var transitionFactory;
      if (isKeyframesTarget(to2)) {
        transitionFactory = keyframes2;
      } else {
        transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
      }
      return __assign({ to: to2 }, transitionFactory(to2));
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
var defaultValueTypes, getDefaultValueType;
var init_defaults = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js"() {
    init_modules();
    init_es();
    init_number();
    defaultValueTypes = __assign(__assign({}, numberValueTypes), {
      color,
      backgroundColor: color,
      outlineColor: color,
      fill: color,
      stroke: color,
      borderColor: color,
      borderTopColor: color,
      borderRightColor: color,
      borderBottomColor: color,
      borderLeftColor: color,
      filter,
      WebkitFilter: filter
    });
    getDefaultValueType = function(key) {
      return defaultValueTypes[key];
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
function getAnimatableNone2(key, value) {
  var _a2;
  var defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter)
    defaultValueType = complex;
  return (_a2 = defaultValueType.getAnimatableNone) === null || _a2 === void 0 ? void 0 : _a2.call(defaultValueType, value);
}
var init_animatable_none = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js"() {
    init_es();
    init_defaults();
  }
});

// ../../node_modules/framer-motion/dist/es/animation/utils/transitions.js
function isTransitionDefined(_a2) {
  _a2.when;
  _a2.delay;
  _a2.delayChildren;
  _a2.staggerChildren;
  _a2.staggerDirection;
  _a2.repeat;
  _a2.repeatType;
  _a2.repeatDelay;
  _a2.from;
  var transition = __rest(_a2, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
  return !!Object.keys(transition).length;
}
function convertTransitionToAnimationOptions(_a2) {
  var ease = _a2.ease, times = _a2.times, yoyo = _a2.yoyo, flip = _a2.flip, loop = _a2.loop, transition = __rest(_a2, ["ease", "times", "yoyo", "flip", "loop"]);
  var options = __assign({}, transition);
  if (times)
    options["offset"] = times;
  if (transition.duration)
    options["duration"] = secondsToMilliseconds(transition.duration);
  if (transition.repeatDelay)
    options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);
  if (ease) {
    options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
  }
  if (transition.type === "tween")
    options.type = "keyframes";
  if (yoyo || loop || flip) {
    warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
    legacyRepeatWarning = true;
    if (yoyo) {
      options.repeatType = "reverse";
    } else if (loop) {
      options.repeatType = "loop";
    } else if (flip) {
      options.repeatType = "mirror";
    }
    options.repeat = loop || yoyo || flip || transition.repeat;
  }
  if (transition.type !== "spring")
    options.type = "keyframes";
  return options;
}
function getDelayFromTransition(transition, key) {
  var _a2;
  var valueTransition = getValueTransition(transition, key) || {};
  return (_a2 = valueTransition.delay) !== null && _a2 !== void 0 ? _a2 : 0;
}
function hydrateKeyframes(options) {
  if (Array.isArray(options.to) && options.to[0] === null) {
    options.to = __spreadArray([], __read(options.to));
    options.to[0] = options.from;
  }
  return options;
}
function getPopmotionAnimationOptions(transition, options, key) {
  var _a2;
  if (Array.isArray(options.to)) {
    (_a2 = transition.duration) !== null && _a2 !== void 0 ? _a2 : transition.duration = 0.8;
  }
  hydrateKeyframes(options);
  if (!isTransitionDefined(transition)) {
    transition = __assign(__assign({}, transition), getDefaultTransition(key, options.to));
  }
  return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition));
}
function getAnimation(key, value, target, transition, onComplete) {
  var _a2;
  var valueTransition = getValueTransition(transition, key);
  var origin = (_a2 = valueTransition.from) !== null && _a2 !== void 0 ? _a2 : value.get();
  var isTargetAnimatable = isAnimatable(key, target);
  if (origin === "none" && isTargetAnimatable && typeof target === "string") {
    origin = getAnimatableNone2(key, target);
  } else if (isZero(origin) && typeof target === "string") {
    origin = getZeroUnit(target);
  } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
    target = getZeroUnit(origin);
  }
  var isOriginAnimatable = isAnimatable(key, origin);
  warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate " + key + ' from "' + origin + '" to "' + target + '". ' + origin + " is not an animatable value - to enable this animation set " + origin + " to a value animatable to " + target + " via the `style` property.");
  function start() {
    var options = {
      from: origin,
      to: target,
      velocity: value.getVelocity(),
      onComplete,
      onUpdate: function(v) {
        return value.set(v);
      }
    };
    return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function(v) {
      var _a3;
      options.onUpdate(v);
      (_a3 = valueTransition.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition, v);
    }, onComplete: function() {
      var _a3;
      options.onComplete();
      (_a3 = valueTransition.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition);
    } }));
  }
  function set() {
    var _a3;
    value.set(target);
    onComplete();
    (_a3 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition);
    return { stop: function() {
    } };
  }
  return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;
}
function isZero(value) {
  return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
}
function getValueTransition(transition, key) {
  return transition[key] || transition["default"] || transition;
}
function startAnimation(key, value, target, transition) {
  if (transition === void 0) {
    transition = {};
  }
  return value.start(function(onComplete) {
    var delayTimer;
    var controls;
    var animation = getAnimation(key, value, target, transition, onComplete);
    var delay = getDelayFromTransition(transition, key);
    var start = function() {
      return controls = animation();
    };
    if (delay) {
      delayTimer = setTimeout(start, secondsToMilliseconds(delay));
    } else {
      start();
    }
    return function() {
      clearTimeout(delayTimer);
      controls === null || controls === void 0 ? void 0 : controls.stop();
    };
  });
}
var legacyRepeatWarning;
var init_transitions = __esm({
  "../../node_modules/framer-motion/dist/es/animation/utils/transitions.js"() {
    init_modules();
    init_es3();
    init_time_conversion();
    init_easing2();
    init_is_animatable();
    init_default_transitions();
    init_hey_listen_es();
    init_animatable_none();
    legacyRepeatWarning = false;
  }
});

// ../../node_modules/framer-motion/dist/es/utils/is-numerical-string.js
var isNumericalString;
var init_is_numerical_string = __esm({
  "../../node_modules/framer-motion/dist/es/utils/is-numerical-string.js"() {
    isNumericalString = function(v) {
      return /^\-?\d*\.?\d+$/.test(v);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/utils/array.js
function addUniqueItem(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem(arr, item) {
  var index = arr.indexOf(item);
  index > -1 && arr.splice(index, 1);
}
var init_array = __esm({
  "../../node_modules/framer-motion/dist/es/utils/array.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/utils/subscription-manager.js
var SubscriptionManager;
var init_subscription_manager = __esm({
  "../../node_modules/framer-motion/dist/es/utils/subscription-manager.js"() {
    init_array();
    SubscriptionManager = function() {
      function SubscriptionManager2() {
        this.subscriptions = [];
      }
      SubscriptionManager2.prototype.add = function(handler) {
        var _this = this;
        addUniqueItem(this.subscriptions, handler);
        return function() {
          return removeItem(_this.subscriptions, handler);
        };
      };
      SubscriptionManager2.prototype.notify = function(a2, b2, c3) {
        var numSubscriptions = this.subscriptions.length;
        if (!numSubscriptions)
          return;
        if (numSubscriptions === 1) {
          this.subscriptions[0](a2, b2, c3);
        } else {
          for (var i = 0; i < numSubscriptions; i++) {
            var handler = this.subscriptions[i];
            handler && handler(a2, b2, c3);
          }
        }
      };
      SubscriptionManager2.prototype.getSize = function() {
        return this.subscriptions.length;
      };
      SubscriptionManager2.prototype.clear = function() {
        this.subscriptions.length = 0;
      };
      return SubscriptionManager2;
    }();
  }
});

// ../../node_modules/framer-motion/dist/es/value/index.js
function motionValue(init3) {
  return new MotionValue(init3);
}
var isFloat, MotionValue;
var init_value = __esm({
  "../../node_modules/framer-motion/dist/es/value/index.js"() {
    init_es2();
    init_es3();
    init_subscription_manager();
    isFloat = function(value) {
      return !isNaN(parseFloat(value));
    };
    MotionValue = function() {
      function MotionValue2(init3) {
        var _this = this;
        this.timeDelta = 0;
        this.lastUpdated = 0;
        this.updateSubscribers = new SubscriptionManager();
        this.velocityUpdateSubscribers = new SubscriptionManager();
        this.renderSubscribers = new SubscriptionManager();
        this.canTrackVelocity = false;
        this.updateAndNotify = function(v, render3) {
          if (render3 === void 0) {
            render3 = true;
          }
          _this.prev = _this.current;
          _this.current = v;
          var _a2 = getFrameData(), delta2 = _a2.delta, timestamp = _a2.timestamp;
          if (_this.lastUpdated !== timestamp) {
            _this.timeDelta = delta2;
            _this.lastUpdated = timestamp;
            es_default.postRender(_this.scheduleVelocityCheck);
          }
          if (_this.prev !== _this.current) {
            _this.updateSubscribers.notify(_this.current);
          }
          if (_this.velocityUpdateSubscribers.getSize()) {
            _this.velocityUpdateSubscribers.notify(_this.getVelocity());
          }
          if (render3) {
            _this.renderSubscribers.notify(_this.current);
          }
        };
        this.scheduleVelocityCheck = function() {
          return es_default.postRender(_this.velocityCheck);
        };
        this.velocityCheck = function(_a2) {
          var timestamp = _a2.timestamp;
          if (timestamp !== _this.lastUpdated) {
            _this.prev = _this.current;
            _this.velocityUpdateSubscribers.notify(_this.getVelocity());
          }
        };
        this.hasAnimated = false;
        this.prev = this.current = init3;
        this.canTrackVelocity = isFloat(this.current);
      }
      MotionValue2.prototype.onChange = function(subscription) {
        return this.updateSubscribers.add(subscription);
      };
      MotionValue2.prototype.clearListeners = function() {
        this.updateSubscribers.clear();
      };
      MotionValue2.prototype.onRenderRequest = function(subscription) {
        subscription(this.get());
        return this.renderSubscribers.add(subscription);
      };
      MotionValue2.prototype.attach = function(passiveEffect) {
        this.passiveEffect = passiveEffect;
      };
      MotionValue2.prototype.set = function(v, render3) {
        if (render3 === void 0) {
          render3 = true;
        }
        if (!render3 || !this.passiveEffect) {
          this.updateAndNotify(v, render3);
        } else {
          this.passiveEffect(v, this.updateAndNotify);
        }
      };
      MotionValue2.prototype.get = function() {
        return this.current;
      };
      MotionValue2.prototype.getPrevious = function() {
        return this.prev;
      };
      MotionValue2.prototype.getVelocity = function() {
        return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
      };
      MotionValue2.prototype.start = function(animation) {
        var _this = this;
        this.stop();
        return new Promise(function(resolve) {
          _this.hasAnimated = true;
          _this.stopAnimation = animation(resolve);
        }).then(function() {
          return _this.clearAnimation();
        });
      };
      MotionValue2.prototype.stop = function() {
        if (this.stopAnimation)
          this.stopAnimation();
        this.clearAnimation();
      };
      MotionValue2.prototype.isAnimating = function() {
        return !!this.stopAnimation;
      };
      MotionValue2.prototype.clearAnimation = function() {
        this.stopAnimation = null;
      };
      MotionValue2.prototype.destroy = function() {
        this.updateSubscribers.clear();
        this.renderSubscribers.clear();
        this.stop();
      };
      return MotionValue2;
    }();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/test.js
var testValueType;
var init_test = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/test.js"() {
    testValueType = function(v) {
      return function(type) {
        return type.test(v);
      };
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
var auto;
var init_type_auto = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js"() {
    auto = {
      test: function(v) {
        return v === "auto";
      },
      parse: function(v) {
        return v;
      }
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
var dimensionValueTypes, findDimensionValueType;
var init_dimensions = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js"() {
    init_es();
    init_test();
    init_type_auto();
    dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
    findDimensionValueType = function(v) {
      return dimensionValueTypes.find(testValueType(v));
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/value-types/find.js
var valueTypes, findValueType;
var init_find = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/value-types/find.js"() {
    init_modules();
    init_es();
    init_dimensions();
    init_test();
    valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color, complex]);
    findValueType = function(v) {
      return valueTypes.find(testValueType(v));
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/setters.js
function setMotionValue(visualElement2, key, value) {
  if (visualElement2.hasValue(key)) {
    visualElement2.getValue(key).set(value);
  } else {
    visualElement2.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement2, definition) {
  var resolved = resolveVariant(visualElement2, definition);
  var _a2 = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a2.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
  _a2.transition;
  var target = __rest(_a2, ["transitionEnd", "transition"]);
  target = __assign(__assign({}, target), transitionEnd);
  for (var key in target) {
    var value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement2, key, value);
  }
}
function setVariants(visualElement2, variantLabels) {
  var reversedLabels = __spreadArray([], __read(variantLabels)).reverse();
  reversedLabels.forEach(function(key) {
    var _a2;
    var variant = visualElement2.getVariant(key);
    variant && setTarget(visualElement2, variant);
    (_a2 = visualElement2.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(child) {
      setVariants(child, variantLabels);
    });
  });
}
function setValues(visualElement2, definition) {
  if (Array.isArray(definition)) {
    return setVariants(visualElement2, definition);
  } else if (typeof definition === "string") {
    return setVariants(visualElement2, [definition]);
  } else {
    setTarget(visualElement2, definition);
  }
}
function checkTargetForNewValues(visualElement2, target, origin) {
  var _a2, _b, _c;
  var _d;
  var newValueKeys = Object.keys(target).filter(function(key2) {
    return !visualElement2.hasValue(key2);
  });
  var numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (var i = 0; i < numNewValues; i++) {
    var key = newValueKeys[i];
    var targetValue = target[key];
    var value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b = (_a2 = origin[key]) !== null && _a2 !== void 0 ? _a2 : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && isNumericalString(value)) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key, targetValue);
    }
    visualElement2.addValue(key, motionValue(value));
    (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;
    visualElement2.setBaseTarget(key, value);
  }
}
function getOriginFromTransition(key, transition) {
  if (!transition)
    return;
  var valueTransition = transition[key] || transition["default"] || transition;
  return valueTransition.from;
}
function getOrigin(target, transition, visualElement2) {
  var _a2, _b;
  var origin = {};
  for (var key in target) {
    origin[key] = (_a2 = getOriginFromTransition(key, transition)) !== null && _a2 !== void 0 ? _a2 : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
  }
  return origin;
}
var init_setters = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/setters.js"() {
    init_modules();
    init_es();
    init_is_numerical_string();
    init_resolve_value();
    init_value();
    init_animatable_none();
    init_find();
    init_variants();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/animation.js
function animateVisualElement(visualElement2, definition, options) {
  if (options === void 0) {
    options = {};
  }
  visualElement2.notifyAnimationStart();
  var animation;
  if (Array.isArray(definition)) {
    var animations2 = definition.map(function(variant) {
      return animateVariant(visualElement2, variant, options);
    });
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement2, definition, options);
  } else {
    var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
    animation = animateTarget(visualElement2, resolvedDefinition, options);
  }
  return animation.then(function() {
    return visualElement2.notifyAnimationComplete(definition);
  });
}
function animateVariant(visualElement2, variant, options) {
  var _a2;
  if (options === void 0) {
    options = {};
  }
  var resolved = resolveVariant(visualElement2, variant, options.custom);
  var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  var getAnimation2 = resolved ? function() {
    return animateTarget(visualElement2, resolved, options);
  } : function() {
    return Promise.resolve();
  };
  var getChildAnimations = ((_a2 = visualElement2.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.size) ? function(forwardDelay) {
    if (forwardDelay === void 0) {
      forwardDelay = 0;
    }
    var _a3 = transition.delayChildren, delayChildren = _a3 === void 0 ? 0 : _a3, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;
    return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : function() {
    return Promise.resolve();
  };
  var when = transition.when;
  if (when) {
    var _c = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c[0], last3 = _c[1];
    return first().then(last3);
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
  }
}
function animateTarget(visualElement2, definition, _a2) {
  var _b;
  var _c = _a2 === void 0 ? {} : _a2, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
  var _e3 = visualElement2.makeTargetAnimatable(definition), _f = _e3.transition, transition = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e3.transitionEnd, target = __rest(_e3, ["transition", "transitionEnd"]);
  if (transitionOverride)
    transition = transitionOverride;
  var animations2 = [];
  var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
  for (var key in target) {
    var value = visualElement2.getValue(key);
    var valueTarget = target[key];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    var animation = startAnimation(key, value, valueTarget, __assign({ delay }, transition));
    animations2.push(animation);
  }
  return Promise.all(animations2).then(function() {
    transitionEnd && setTarget(visualElement2, transitionEnd);
  });
}
function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
  if (delayChildren === void 0) {
    delayChildren = 0;
  }
  if (staggerChildren === void 0) {
    staggerChildren = 0;
  }
  if (staggerDirection === void 0) {
    staggerDirection = 1;
  }
  var animations2 = [];
  var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  var generateStaggerDuration = staggerDirection === 1 ? function(i) {
    if (i === void 0) {
      i = 0;
    }
    return i * staggerChildren;
  } : function(i) {
    if (i === void 0) {
      i = 0;
    }
    return maxStaggerDuration - i * staggerChildren;
  };
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
    animations2.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function() {
      return child.notifyAnimationComplete(variant);
    }));
  });
  return Promise.all(animations2);
}
function stopAnimation(visualElement2) {
  visualElement2.forEachValue(function(value) {
    return value.stop();
  });
}
function sortByTreeOrder(a2, b2) {
  return a2.sortNodePosition(b2);
}
function shouldBlockAnimation(_a2, key) {
  var protectedKeys = _a2.protectedKeys, needsAnimating = _a2.needsAnimating;
  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}
var init_animation = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/animation.js"() {
    init_modules();
    init_transitions();
    init_setters();
    init_variants();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/animation-state.js
function animateList(visualElement2) {
  return function(animations2) {
    return Promise.all(animations2.map(function(_a2) {
      var animation = _a2.animation, options = _a2.options;
      return animateVisualElement(visualElement2, animation, options);
    }));
  };
}
function createAnimationState(visualElement2) {
  var animate3 = animateList(visualElement2);
  var state = createState();
  var allAnimatedKeys = {};
  var isInitialRender = true;
  var buildResolvedTypeValues = function(acc, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    if (resolved) {
      resolved.transition;
      var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
    }
    return acc;
  };
  function isAnimated(key) {
    return allAnimatedKeys[key] !== void 0;
  }
  function setAnimateFunction(makeAnimator) {
    animate3 = makeAnimator(visualElement2);
  }
  function animateChanges(options, changedActiveType) {
    var _a2;
    var props = visualElement2.getProps();
    var context = visualElement2.getVariantContext(true) || {};
    var animations2 = [];
    var removedKeys = new Set();
    var encounteredKeys = {};
    var removedVariantIndex = Infinity;
    var _loop_1 = function(i3) {
      var type = reversePriorityOrder[i3];
      var typeState = state[type];
      var prop = (_a2 = props[type]) !== null && _a2 !== void 0 ? _a2 : context[type];
      var propIsVariant = isVariantLabel(prop);
      var activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i3;
      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = __assign({}, encounteredKeys);
      if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
        return "continue";
      }
      var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i3 > removedVariantIndex && propIsVariant;
      var definitionList = Array.isArray(prop) ? prop : [prop];
      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
      var markToAnimate = function(key2) {
        shouldAnimateType = true;
        removedKeys.delete(key2);
        typeState.needsAnimating[key2] = true;
      };
      for (var key in allKeys) {
        var next2 = resolvedValues[key];
        var prev2 = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        if (next2 !== prev2) {
          if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
            if (!shallowCompare(next2, prev2)) {
              markToAnimate(key);
            } else {
              typeState.protectedKeys[key] = true;
            }
          } else if (next2 !== void 0) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next2 !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
          return {
            animation,
            options: __assign({ type }, options)
          };
        }))));
      }
    };
    for (var i = 0; i < numAnimationTypes; i++) {
      _loop_1(i);
    }
    allAnimatedKeys = __assign({}, encounteredKeys);
    if (removedKeys.size) {
      var fallbackAnimation_1 = {};
      removedKeys.forEach(function(key) {
        var fallbackTarget = visualElement2.getBaseTarget(key);
        if (fallbackTarget !== void 0) {
          fallbackAnimation_1[key] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation_1 });
    }
    var shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate3(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a2;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a2 = visualElement2.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(child) {
      var _a3;
      return (_a3 = child.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    return animateChanges(options, type);
  }
  return {
    isAnimated,
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: function() {
      return state;
    }
  };
}
function variantsHaveChanged(prev2, next2) {
  if (typeof next2 === "string") {
    return next2 !== prev2;
  } else if (isVariantLabels(next2)) {
    return !shallowCompare(next2, prev2);
  }
  return false;
}
function createTypeState(isActive) {
  if (isActive === void 0) {
    isActive = false;
  }
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  var _a2;
  return _a2 = {}, _a2[AnimationType.Animate] = createTypeState(true), _a2[AnimationType.Hover] = createTypeState(), _a2[AnimationType.Tap] = createTypeState(), _a2[AnimationType.Drag] = createTypeState(), _a2[AnimationType.Focus] = createTypeState(), _a2[AnimationType.Exit] = createTypeState(), _a2;
}
var variantPriorityOrder, reversePriorityOrder, numAnimationTypes;
var init_animation_state = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/animation-state.js"() {
    init_modules();
    init_is_animation_controls();
    init_is_keyframes_target();
    init_shallow_compare();
    init_animation();
    init_types();
    init_variants();
    variantPriorityOrder = [
      AnimationType.Animate,
      AnimationType.Hover,
      AnimationType.Tap,
      AnimationType.Drag,
      AnimationType.Focus,
      AnimationType.Exit
    ];
    reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();
    numAnimationTypes = variantPriorityOrder.length;
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/animations.js
var import_react21, animations;
var init_animations2 = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/animations.js"() {
    init_modules();
    import_react21 = __toModule(require_react());
    init_is_animation_controls();
    init_use_presence();
    init_PresenceContext();
    init_animation_state();
    init_types();
    init_make_renderless_component();
    animations = {
      animation: makeRenderlessComponent(function(_a2) {
        var visualElement2 = _a2.visualElement, animate3 = _a2.animate;
        visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
        if (isAnimationControls(animate3)) {
          (0, import_react21.useEffect)(function() {
            return animate3.subscribe(visualElement2);
          }, [animate3]);
        }
      }),
      exit: makeRenderlessComponent(function(props) {
        var custom = props.custom, visualElement2 = props.visualElement;
        var _a2 = __read(usePresence(), 2), isPresent2 = _a2[0], onExitComplete = _a2[1];
        var presenceContext = (0, import_react21.useContext)(PresenceContext);
        (0, import_react21.useEffect)(function() {
          var _a3, _b;
          var animation = (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Exit, !isPresent2, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });
          !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));
        }, [isPresent2]);
      })
    };
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/PanSession.js
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo(_a2, history2) {
  var point = _a2.point;
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history2)),
    offset: subtractPoint(point, startDevicePoint(history2)),
    velocity: getVelocity2(history2, 0.1)
  };
}
function startDevicePoint(history2) {
  return history2[0];
}
function lastDevicePoint(history2) {
  return history2[history2.length - 1];
}
function getVelocity2(history2, timeDelta) {
  if (history2.length < 2) {
    return { x: 0, y: 0 };
  }
  var i = history2.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint(history2);
  while (i >= 0) {
    timestampedPoint = history2[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return { x: 0, y: 0 };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
var PanSession;
var init_PanSession = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/PanSession.js"() {
    init_modules();
    init_event_type();
    init_event_info();
    init_es2();
    init_time_conversion();
    init_use_pointer_event();
    init_es3();
    PanSession = function() {
      function PanSession2(event, handlers, _a2) {
        var _this = this;
        var _b = _a2 === void 0 ? {} : _a2, transformPagePoint = _b.transformPagePoint;
        this.startEvent = null;
        this.lastMoveEvent = null;
        this.lastMoveEventInfo = null;
        this.handlers = {};
        this.updatePoint = function() {
          if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
            return;
          var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
          var isPanStarted = _this.startEvent !== null;
          var isDistancePastThreshold = distance(info2.offset, { x: 0, y: 0 }) >= 3;
          if (!isPanStarted && !isDistancePastThreshold)
            return;
          var point2 = info2.point;
          var timestamp2 = getFrameData().timestamp;
          _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
          var _a3 = _this.handlers, onStart = _a3.onStart, onMove = _a3.onMove;
          if (!isPanStarted) {
            onStart && onStart(_this.lastMoveEvent, info2);
            _this.startEvent = _this.lastMoveEvent;
          }
          onMove && onMove(_this.lastMoveEvent, info2);
        };
        this.handlePointerMove = function(event2, info2) {
          _this.lastMoveEvent = event2;
          _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
          if (isMouseEvent(event2) && event2.buttons === 0) {
            _this.handlePointerUp(event2, info2);
            return;
          }
          es_default.update(_this.updatePoint, true);
        };
        this.handlePointerUp = function(event2, info2) {
          _this.end();
          var _a3 = _this.handlers, onEnd = _a3.onEnd, onSessionEnd = _a3.onSessionEnd;
          var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
          if (_this.startEvent && onEnd) {
            onEnd(event2, panInfo);
          }
          onSessionEnd && onSessionEnd(event2, panInfo);
        };
        if (isTouchEvent(event) && event.touches.length > 1)
          return;
        this.handlers = handlers;
        this.transformPagePoint = transformPagePoint;
        var info = extractEventInfo(event);
        var initialInfo = transformPoint(info, this.transformPagePoint);
        var point = initialInfo.point;
        var timestamp = getFrameData().timestamp;
        this.history = [__assign(__assign({}, point), { timestamp })];
        var onSessionStart = handlers.onSessionStart;
        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
        this.removeListeners = pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
      }
      PanSession2.prototype.updateHandlers = function(handlers) {
        this.handlers = handlers;
      };
      PanSession2.prototype.end = function() {
        this.removeListeners && this.removeListeners();
        cancelSync.update(this.updatePoint);
      };
      return PanSession2;
    }();
  }
});

// ../../node_modules/framer-motion/dist/es/utils/noop.js
function noop(any) {
  return any;
}
var init_noop = __esm({
  "../../node_modules/framer-motion/dist/es/utils/noop.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/utils/geometry/index.js
function convertBoundingBoxToAxisBox(_a2) {
  var top2 = _a2.top, left2 = _a2.left, right2 = _a2.right, bottom2 = _a2.bottom;
  return {
    x: { min: left2, max: right2 },
    y: { min: top2, max: bottom2 }
  };
}
function convertAxisBoxToBoundingBox(_a2) {
  var x3 = _a2.x, y = _a2.y;
  return {
    top: y.min,
    bottom: y.max,
    left: x3.min,
    right: x3.max
  };
}
function transformBoundingBox(_a2, transformPoint2) {
  var top2 = _a2.top, left2 = _a2.left, bottom2 = _a2.bottom, right2 = _a2.right;
  if (transformPoint2 === void 0) {
    transformPoint2 = noop;
  }
  var topLeft = transformPoint2({ x: left2, y: top2 });
  var bottomRight = transformPoint2({ x: right2, y: bottom2 });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}
function axisBox() {
  return { x: { min: 0, max: 1 }, y: { min: 0, max: 1 } };
}
function copyAxisBox(box) {
  return {
    x: __assign({}, box.x),
    y: __assign({}, box.y)
  };
}
function delta() {
  return {
    x: __assign({}, zeroDelta),
    y: __assign({}, zeroDelta)
  };
}
var zeroDelta;
var init_geometry = __esm({
  "../../node_modules/framer-motion/dist/es/utils/geometry/index.js"() {
    init_modules();
    init_noop();
    zeroDelta = {
      translate: 0,
      scale: 1,
      origin: 0,
      originPoint: 0
    };
  }
});

// ../../node_modules/framer-motion/dist/es/utils/each-axis.js
function eachAxis(handler) {
  return [handler("x"), handler("y")];
}
var init_each_axis = __esm({
  "../../node_modules/framer-motion/dist/es/utils/each-axis.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
function applyConstraints(point, _a2, elastic) {
  var min = _a2.min, max = _a2.max;
  if (min !== void 0 && point < min) {
    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcConstrainedMinPoint(point, length2, progress2, constraints, elastic) {
  var min = point - length2 * progress2;
  return constraints ? applyConstraints(min, constraints, elastic) : min;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, _a2) {
  var top2 = _a2.top, left2 = _a2.left, bottom2 = _a2.bottom, right2 = _a2.right;
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left2, right2),
    y: calcRelativeAxisConstraints(layoutBox.y, top2, bottom2)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  var _a2;
  var min = constraintsAxis.min - layoutAxis.min;
  var max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    _a2 = __read([max, min], 2), min = _a2[0], max = _a2[1];
  }
  return {
    min: layoutAxis.min + min,
    max: layoutAxis.min + max
  };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcPositionFromProgress(axis, constraints, progress2) {
  var axisLength = axis.max - axis.min;
  var min = mix(constraints.min, constraints.max - axisLength, progress2);
  return { min, max: min + axisLength };
}
function rebaseAxisConstraints(layout, constraints) {
  var relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout.min;
  }
  return relativeConstraints;
}
function resolveDragElastic(dragElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  var _a2;
  return typeof dragElastic === "number" ? dragElastic : (_a2 = dragElastic[label]) !== null && _a2 !== void 0 ? _a2 : 0;
}
var defaultElastic;
var init_constraints = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js"() {
    init_modules();
    init_es3();
    defaultElastic = 0.35;
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/measure.js
function getBoundingBox(element, transformPagePoint) {
  var box = element.getBoundingClientRect();
  return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
}
var init_measure = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/measure.js"() {
    init_geometry();
  }
});

// ../../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js
function isNear(value, target, maxDistance) {
  if (target === void 0) {
    target = 0;
  }
  if (maxDistance === void 0) {
    maxDistance = 0.01;
  }
  return distance(value, target) < maxDistance;
}
function calcLength(axis) {
  return axis.max - axis.min;
}
function calcOrigin2(source, target) {
  var origin = 0.5;
  var sourceLength = calcLength(source);
  var targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clampProgress(origin);
}
function updateAxisDelta(delta2, source, target, origin) {
  if (origin === void 0) {
    origin = 0.5;
  }
  delta2.origin = origin;
  delta2.originPoint = mix(source.min, source.max, delta2.origin);
  delta2.scale = calcLength(target) / calcLength(source);
  if (isNear(delta2.scale, 1, 1e-4))
    delta2.scale = 1;
  delta2.translate = mix(target.min, target.max, delta2.origin) - delta2.originPoint;
  if (isNear(delta2.translate))
    delta2.translate = 0;
}
function updateBoxDelta(delta2, source, target, origin) {
  updateAxisDelta(delta2.x, source.x, target.x, defaultOrigin(origin.originX));
  updateAxisDelta(delta2.y, source.y, target.y, defaultOrigin(origin.originY));
}
function defaultOrigin(origin) {
  return typeof origin === "number" ? origin : 0.5;
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(projection, parentProjection) {
  calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
  calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
}
var clampProgress;
var init_delta_calc = __esm({
  "../../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js"() {
    init_es3();
    clampProgress = function(v) {
      return clamp2(0, 1, v);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
var compareByDepth;
var init_compare_by_depth = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js"() {
    compareByDepth = function(a2, b2) {
      return a2.depth - b2.depth;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/utils.js
function isProjecting(visualElement2) {
  var isEnabled = visualElement2.projection.isEnabled;
  return isEnabled || visualElement2.shouldResetTransform();
}
function collectProjectingAncestors(visualElement2, ancestors) {
  if (ancestors === void 0) {
    ancestors = [];
  }
  var parent = visualElement2.parent;
  if (parent)
    collectProjectingAncestors(parent, ancestors);
  if (isProjecting(visualElement2))
    ancestors.push(visualElement2);
  return ancestors;
}
function collectProjectingChildren(visualElement2) {
  var children = [];
  var addChild = function(child) {
    if (isProjecting(child))
      children.push(child);
    child.children.forEach(addChild);
  };
  visualElement2.children.forEach(addChild);
  return children.sort(compareByDepth);
}
function updateLayoutMeasurement(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  var layoutState = visualElement2.getLayoutState();
  visualElement2.notifyBeforeLayoutMeasure(layoutState.layout);
  layoutState.isHydrated = true;
  layoutState.layout = visualElement2.measureViewportBox();
  layoutState.layoutCorrected = copyAxisBox(layoutState.layout);
  visualElement2.notifyLayoutMeasure(layoutState.layout, visualElement2.prevViewportBox || layoutState.layout);
  es_default.update(function() {
    return visualElement2.rebaseProjectionTarget();
  });
}
function snapshotViewportBox(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  visualElement2.prevViewportBox = visualElement2.measureViewportBox(false);
  visualElement2.rebaseProjectionTarget(false, visualElement2.prevViewportBox);
}
var init_utils6 = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/utils.js"() {
    init_es2();
    init_geometry();
    init_compare_by_depth();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/layout/utils.js
function tweenAxis(target, prev2, next2, p) {
  target.min = mix(prev2.min, next2.min, p);
  target.max = mix(prev2.max, next2.max, p);
}
function calcRelativeOffsetAxis(parent, child) {
  return {
    min: child.min - parent.min,
    max: child.max - parent.min
  };
}
function calcRelativeOffset(parent, child) {
  return {
    x: calcRelativeOffsetAxis(parent.x, child.x),
    y: calcRelativeOffsetAxis(parent.y, child.y)
  };
}
function checkIfParentHasChanged(prev2, next2) {
  var prevId = prev2.getLayoutId();
  var nextId = next2.getLayoutId();
  return prevId !== nextId || nextId === void 0 && prev2 !== next2;
}
var init_utils7 = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/layout/utils.js"() {
    init_es3();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/is-draggable.js
function isDraggable(visualElement2) {
  var _a2 = visualElement2.getProps(), drag2 = _a2.drag, _dragX = _a2._dragX;
  return drag2 && !_dragX;
}
var init_is_draggable = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/is-draggable.js"() {
  }
});

// ../../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js
function resetAxis(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function resetBox(box, originBox) {
  resetAxis(box.x, originBox.x);
  resetAxis(box.y, originBox.y);
}
function scalePoint(point, scale2, originPoint) {
  var distanceFromOrigin = point - originPoint;
  var scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate, scale2, originPoint, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale2 === void 0) {
    scale2 = 1;
  }
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, _a2) {
  var x3 = _a2.x, y = _a2.y;
  applyAxisDelta(box.x, x3.translate, x3.scale, x3.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyAxisTransforms(final, axis, transforms, _a2) {
  var _b = __read(_a2, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  final.min = axis.min;
  final.max = axis.max;
  var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
  var originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
function applyBoxTransforms(finalBox, box, transforms) {
  applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);
  applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);
}
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate, scale2, origin, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale2 === void 0) {
    scale2 = 1;
  }
  if (origin === void 0) {
    origin = 0.5;
  }
  var originPoint = mix(axis.min, axis.max, origin) - translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, _a2) {
  var _b = __read(_a2, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);
}
function removeBoxTransforms(box, transforms) {
  removeAxisTransforms(box.x, transforms, xKeys);
  removeAxisTransforms(box.y, transforms, yKeys);
}
function applyTreeDeltas(box, treeScale, treePath) {
  var treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  var node2;
  var delta2;
  for (var i = 0; i < treeLength; i++) {
    node2 = treePath[i];
    delta2 = node2.getLayoutState().delta;
    treeScale.x *= delta2.x.scale;
    treeScale.y *= delta2.y.scale;
    applyBoxDelta(box, delta2);
    if (isDraggable(node2)) {
      applyBoxTransforms(box, box, node2.getLatestValues());
    }
  }
}
var xKeys, yKeys;
var init_delta_apply = __esm({
  "../../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js"() {
    init_modules();
    init_es3();
    init_is_draggable();
    xKeys = ["x", "scaleX", "originX"];
    yKeys = ["y", "scaleY", "originY"];
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js
function convertToRelativeProjection(visualElement2, isLayoutDrag) {
  if (isLayoutDrag === void 0) {
    isLayoutDrag = true;
  }
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent)
    return false;
  var offset;
  if (isLayoutDrag) {
    offset = calcRelativeOffset(projectionParent.projection.target, visualElement2.projection.target);
    removeBoxTransforms(offset, projectionParent.getLatestValues());
  } else {
    offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  }
  eachAxis(function(axis) {
    return visualElement2.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);
  });
  return true;
}
var init_convert_to_relative = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js"() {
    init_utils7();
    init_each_axis();
    init_delta_apply();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js
function pushJob(stack, job, pointer) {
  if (!stack[pointer])
    stack[pointer] = [];
  stack[pointer].push(job);
}
function batchLayout(callback) {
  unresolvedJobs.add(callback);
  return function() {
    return unresolvedJobs.delete(callback);
  };
}
function flushLayout() {
  if (!unresolvedJobs.size)
    return;
  var pointer = 0;
  var reads = [[]];
  var writes = [];
  var setRead = function(job) {
    return pushJob(reads, job, pointer);
  };
  var setWrite = function(job) {
    pushJob(writes, job, pointer);
    pointer++;
  };
  unresolvedJobs.forEach(function(callback) {
    callback(setRead, setWrite);
    pointer = 0;
  });
  unresolvedJobs.clear();
  var numStacks = writes.length;
  for (var i = 0; i <= numStacks; i++) {
    reads[i] && reads[i].forEach(executeJob);
    writes[i] && writes[i].forEach(executeJob);
  }
}
var unresolvedJobs, executeJob;
var init_batch_layout = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js"() {
    unresolvedJobs = new Set();
    executeJob = function(job) {
      return job();
    };
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
function shouldDrag(direction, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset, lockThreshold) {
  if (lockThreshold === void 0) {
    lockThreshold = 10;
  }
  var direction = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}
var elementDragControls, lastPointerEvent, VisualElementDragControls;
var init_VisualElementDragControls = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js"() {
    init_modules();
    init_hey_listen_es();
    init_PanSession();
    init_lock();
    init_is_ref_object();
    init_use_pointer_event();
    init_use_dom_event();
    init_event_info();
    init_geometry();
    init_each_axis();
    init_constraints();
    init_measure();
    init_delta_calc();
    init_transitions();
    init_types();
    init_utils6();
    init_es3();
    init_convert_to_relative();
    init_utils7();
    init_batch_layout();
    init_es2();
    elementDragControls = new WeakMap();
    VisualElementDragControls = function() {
      function VisualElementDragControls2(_a2) {
        var visualElement2 = _a2.visualElement;
        this.isDragging = false;
        this.currentDirection = null;
        this.constraints = false;
        this.elastic = axisBox();
        this.props = {};
        this.hasMutatedConstraints = false;
        this.cursorProgress = {
          x: 0.5,
          y: 0.5
        };
        this.originPoint = {};
        this.openGlobalLock = null;
        this.panSession = null;
        this.visualElement = visualElement2;
        this.visualElement.enableLayoutProjection();
        elementDragControls.set(visualElement2, this);
      }
      VisualElementDragControls2.prototype.start = function(originEvent, _a2) {
        var _this = this;
        var _b = _a2 === void 0 ? {} : _a2, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;
        var onSessionStart = function(event) {
          var _a3;
          _this.stopMotion();
          var initialPoint = getViewportPointFromEvent(event).point;
          (_a3 = _this.cancelLayout) === null || _a3 === void 0 ? void 0 : _a3.call(_this);
          _this.cancelLayout = batchLayout(function(read, write) {
            var ancestors = collectProjectingAncestors(_this.visualElement);
            var children = collectProjectingChildren(_this.visualElement);
            var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));
            var hasManuallySetCursorOrigin = false;
            _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
            write(function() {
              tree.forEach(function(element) {
                return element.resetTransform();
              });
            });
            read(function() {
              updateLayoutMeasurement(_this.visualElement);
              children.forEach(updateLayoutMeasurement);
            });
            write(function() {
              tree.forEach(function(element) {
                return element.restoreTransform();
              });
              if (snapToCursor) {
                hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
              }
            });
            read(function() {
              var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
              if (!isRelativeDrag) {
                _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
              }
              _this.visualElement.scheduleUpdateLayoutProjection();
              var projection = _this.visualElement.projection;
              eachAxis(function(axis) {
                if (!hasManuallySetCursorOrigin) {
                  var _a4 = projection.target[axis], min = _a4.min, max = _a4.max;
                  _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, initialPoint[axis]);
                }
                var axisValue = _this.getAxisMotionValue(axis);
                if (axisValue) {
                  _this.originPoint[axis] = axisValue.get();
                }
              });
            });
            write(function() {
              flushSync.update();
              flushSync.preRender();
              flushSync.render();
              flushSync.postRender();
            });
            read(function() {
              return _this.resolveDragConstraints();
            });
          });
        };
        var onStart = function(event, info) {
          var _a3, _b2, _c2;
          var _d = _this.props, drag2 = _d.drag, dragPropagation = _d.dragPropagation;
          if (drag2 && !dragPropagation) {
            if (_this.openGlobalLock)
              _this.openGlobalLock();
            _this.openGlobalLock = getGlobalLock(drag2);
            if (!_this.openGlobalLock)
              return;
          }
          flushLayout();
          _this.isDragging = true;
          _this.currentDirection = null;
          (_b2 = (_a3 = _this.props).onDragStart) === null || _b2 === void 0 ? void 0 : _b2.call(_a3, event, info);
          (_c2 = _this.visualElement.animationState) === null || _c2 === void 0 ? void 0 : _c2.setActive(AnimationType.Drag, true);
        };
        var onMove = function(event, info) {
          var _a3, _b2, _c2, _d;
          var _e3 = _this.props, dragPropagation = _e3.dragPropagation, dragDirectionLock = _e3.dragDirectionLock;
          if (!dragPropagation && !_this.openGlobalLock)
            return;
          var offset = info.offset;
          if (dragDirectionLock && _this.currentDirection === null) {
            _this.currentDirection = getCurrentDirection(offset);
            if (_this.currentDirection !== null) {
              (_b2 = (_a3 = _this.props).onDirectionLock) === null || _b2 === void 0 ? void 0 : _b2.call(_a3, _this.currentDirection);
            }
            return;
          }
          _this.updateAxis("x", info.point, offset);
          _this.updateAxis("y", info.point, offset);
          (_d = (_c2 = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c2, event, info);
          lastPointerEvent = event;
        };
        var onSessionEnd = function(event, info) {
          return _this.stop(event, info);
        };
        var transformPagePoint = this.props.transformPagePoint;
        this.panSession = new PanSession(originEvent, {
          onSessionStart,
          onStart,
          onMove,
          onSessionEnd
        }, { transformPagePoint });
      };
      VisualElementDragControls2.prototype.resolveDragConstraints = function() {
        var _this = this;
        var _a2 = this.props, dragConstraints = _a2.dragConstraints, dragElastic = _a2.dragElastic;
        var layout = this.visualElement.getLayoutState().layoutCorrected;
        if (dragConstraints) {
          this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(layout, dragConstraints) : calcRelativeConstraints(layout, dragConstraints);
        } else {
          this.constraints = false;
        }
        this.elastic = resolveDragElastic(dragElastic);
        if (this.constraints && !this.hasMutatedConstraints) {
          eachAxis(function(axis) {
            if (_this.getAxisMotionValue(axis)) {
              _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);
            }
          });
        }
      };
      VisualElementDragControls2.prototype.resolveRefConstraints = function(layoutBox, constraints) {
        var _a2 = this.props, onMeasureDragConstraints = _a2.onMeasureDragConstraints, transformPagePoint = _a2.transformPagePoint;
        var constraintsElement = constraints.current;
        invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);
        if (onMeasureDragConstraints) {
          var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
          this.hasMutatedConstraints = !!userConstraints;
          if (userConstraints) {
            measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
          }
        }
        return measuredConstraints;
      };
      VisualElementDragControls2.prototype.cancelDrag = function() {
        var _a2, _b;
        this.visualElement.unlockProjectionTarget();
        (_a2 = this.cancelLayout) === null || _a2 === void 0 ? void 0 : _a2.call(this);
        this.isDragging = false;
        this.panSession && this.panSession.end();
        this.panSession = null;
        if (!this.props.dragPropagation && this.openGlobalLock) {
          this.openGlobalLock();
          this.openGlobalLock = null;
        }
        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
      };
      VisualElementDragControls2.prototype.stop = function(event, info) {
        var _a2, _b, _c;
        (_a2 = this.panSession) === null || _a2 === void 0 ? void 0 : _a2.end();
        this.panSession = null;
        var isDragging = this.isDragging;
        this.cancelDrag();
        if (!isDragging)
          return;
        var velocity = info.velocity;
        this.animateDragEnd(velocity);
        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);
      };
      VisualElementDragControls2.prototype.snapToCursor = function(point) {
        var _this = this;
        return eachAxis(function(axis) {
          var drag2 = _this.props.drag;
          if (!shouldDrag(axis, drag2, _this.currentDirection))
            return;
          var axisValue = _this.getAxisMotionValue(axis);
          if (axisValue) {
            var box = _this.visualElement.getLayoutState().layout;
            var length_1 = box[axis].max - box[axis].min;
            var center = box[axis].min + length_1 / 2;
            var offset = point[axis] - center;
            _this.originPoint[axis] = point[axis];
            axisValue.set(offset);
          } else {
            _this.cursorProgress[axis] = 0.5;
            return true;
          }
        }).includes(true);
      };
      VisualElementDragControls2.prototype.updateAxis = function(axis, point, offset) {
        var drag2 = this.props.drag;
        if (!shouldDrag(axis, drag2, this.currentDirection))
          return;
        return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, point);
      };
      VisualElementDragControls2.prototype.updateAxisMotionValue = function(axis, offset) {
        var axisValue = this.getAxisMotionValue(axis);
        if (!offset || !axisValue)
          return;
        var nextValue = this.originPoint[axis] + offset[axis];
        var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;
        axisValue.set(update);
      };
      VisualElementDragControls2.prototype.updateVisualElementAxis = function(axis, point) {
        var _a2;
        var axisLayout = this.visualElement.getLayoutState().layout[axis];
        var axisLength = axisLayout.max - axisLayout.min;
        var axisProgress = this.cursorProgress[axis];
        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a2 = this.constraints) === null || _a2 === void 0 ? void 0 : _a2[axis], this.elastic[axis]);
        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);
      };
      VisualElementDragControls2.prototype.setProps = function(_a2) {
        var _b = _a2.drag, drag2 = _b === void 0 ? false : _b, _c = _a2.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a2.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e3 = _a2.dragConstraints, dragConstraints = _e3 === void 0 ? false : _e3, _f = _a2.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a2.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a2, ["drag", "dragDirectionLock", "dragPropagation", "dragConstraints", "dragElastic", "dragMomentum"]);
        this.props = __assign({
          drag: drag2,
          dragDirectionLock,
          dragPropagation,
          dragConstraints,
          dragElastic,
          dragMomentum
        }, remainingProps);
      };
      VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
        var _a2 = this.props, layout = _a2.layout, layoutId = _a2.layoutId;
        var dragKey = "_drag" + axis.toUpperCase();
        if (this.props[dragKey]) {
          return this.props[dragKey];
        } else if (!layout && layoutId === void 0) {
          return this.visualElement.getValue(axis, 0);
        }
      };
      VisualElementDragControls2.prototype.isLayoutDrag = function() {
        return !this.getAxisMotionValue("x");
      };
      VisualElementDragControls2.prototype.isExternalDrag = function() {
        var _a2 = this.props, _dragX = _a2._dragX, _dragY = _a2._dragY;
        return _dragX || _dragY;
      };
      VisualElementDragControls2.prototype.animateDragEnd = function(velocity) {
        var _this = this;
        var _a2 = this.props, drag2 = _a2.drag, dragMomentum = _a2.dragMomentum, dragElastic = _a2.dragElastic, dragTransition = _a2.dragTransition;
        var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
        var constraints = this.constraints || {};
        if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {
          var projectionParent = this.visualElement.getProjectionParent();
          if (projectionParent) {
            var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
            eachAxis(function(axis) {
              var _a3 = relativeConstraints_1[axis], min = _a3.min, max = _a3.max;
              constraints[axis] = {
                min: isNaN(min) ? void 0 : min,
                max: isNaN(max) ? void 0 : max
              };
            });
          }
        }
        var momentumAnimations = eachAxis(function(axis) {
          var _a3;
          if (!shouldDrag(axis, drag2, _this.currentDirection)) {
            return;
          }
          var transition = (_a3 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a3 !== void 0 ? _a3 : {};
          var bounceStiffness = dragElastic ? 200 : 1e6;
          var bounceDamping = dragElastic ? 40 : 1e7;
          var inertia2 = __assign(__assign({
            type: "inertia",
            velocity: dragMomentum ? velocity[axis] : 0,
            bounceStiffness,
            bounceDamping,
            timeConstant: 750,
            restDelta: 1,
            restSpeed: 10
          }, dragTransition), transition);
          return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia2) : _this.visualElement.startLayoutAnimation(axis, inertia2, isRelative);
        });
        return Promise.all(momentumAnimations).then(function() {
          var _a3, _b;
          (_b = (_a3 = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a3);
        });
      };
      VisualElementDragControls2.prototype.stopMotion = function() {
        var _this = this;
        eachAxis(function(axis) {
          var axisValue = _this.getAxisMotionValue(axis);
          axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();
        });
      };
      VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition) {
        var axisValue = this.getAxisMotionValue(axis);
        if (!axisValue)
          return;
        var currentValue = axisValue.get();
        axisValue.set(currentValue);
        axisValue.set(currentValue);
        return startAnimation(axis, axisValue, 0, transition);
      };
      VisualElementDragControls2.prototype.scalePoint = function() {
        var _this = this;
        var _a2 = this.props, drag2 = _a2.drag, dragConstraints = _a2.dragConstraints;
        if (!isRefObject(dragConstraints) || !this.constraintsBox)
          return;
        this.stopMotion();
        var boxProgress = { x: 0, y: 0 };
        eachAxis(function(axis) {
          boxProgress[axis] = calcOrigin2(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
        });
        this.updateConstraints(function() {
          eachAxis(function(axis) {
            if (!shouldDrag(axis, drag2, null))
              return;
            var _a3 = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a3.min, max = _a3.max;
            _this.visualElement.setProjectionTargetAxis(axis, min, max);
          });
        });
        setTimeout(flushLayout, 1);
      };
      VisualElementDragControls2.prototype.updateConstraints = function(onReady) {
        var _this = this;
        this.cancelLayout = batchLayout(function(read, write) {
          var ancestors = collectProjectingAncestors(_this.visualElement);
          write(function() {
            return ancestors.forEach(function(element) {
              return element.resetTransform();
            });
          });
          read(function() {
            return updateLayoutMeasurement(_this.visualElement);
          });
          write(function() {
            return ancestors.forEach(function(element) {
              return element.restoreTransform();
            });
          });
          read(function() {
            _this.resolveDragConstraints();
          });
          if (onReady)
            write(onReady);
        });
      };
      VisualElementDragControls2.prototype.mount = function(visualElement2) {
        var _this = this;
        var element = visualElement2.getInstance();
        var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
          var _a2 = _this.props, drag2 = _a2.drag, _b = _a2.dragListener, dragListener = _b === void 0 ? true : _b;
          drag2 && dragListener && _this.start(event);
        });
        var stopResizeListener = addDomEvent(window, "resize", function() {
          _this.scalePoint();
        });
        var stopLayoutUpdateListener = visualElement2.onLayoutUpdate(function() {
          if (_this.isDragging) {
            _this.resolveDragConstraints();
          }
        });
        var prevDragCursor = visualElement2.prevDragCursor;
        if (prevDragCursor) {
          this.start(lastPointerEvent, { cursorProgress: prevDragCursor });
        }
        return function() {
          stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();
          stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();
          stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();
          _this.cancelDrag();
        };
      };
      return VisualElementDragControls2;
    }();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
function useDrag(props) {
  var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
  var transformPagePoint = (0, import_react22.useContext)(MotionConfigContext).transformPagePoint;
  var dragControls = useConstant(function() {
    return new VisualElementDragControls({
      visualElement: visualElement2
    });
  });
  dragControls.setProps(__assign(__assign({}, props), { transformPagePoint }));
  (0, import_react22.useEffect)(function() {
    return groupDragControls && groupDragControls.subscribe(dragControls);
  }, [dragControls]);
  (0, import_react22.useEffect)(function() {
    return dragControls.mount(visualElement2);
  }, []);
}
var import_react22;
var init_use_drag = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js"() {
    init_modules();
    import_react22 = __toModule(require_react());
    init_MotionConfigContext();
    init_VisualElementDragControls();
    init_use_constant();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js
function usePanGesture(_a2) {
  var onPan = _a2.onPan, onPanStart = _a2.onPanStart, onPanEnd = _a2.onPanEnd, onPanSessionStart = _a2.onPanSessionStart, visualElement2 = _a2.visualElement;
  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
  var panSession = (0, import_react23.useRef)(null);
  var transformPagePoint = (0, import_react23.useContext)(MotionConfigContext).transformPagePoint;
  var handlers = {
    onSessionStart: onPanSessionStart,
    onStart: onPanStart,
    onMove: onPan,
    onEnd: function(event, info) {
      panSession.current = null;
      onPanEnd && onPanEnd(event, info);
    }
  };
  (0, import_react23.useEffect)(function() {
    if (panSession.current !== null) {
      panSession.current.updateHandlers(handlers);
    }
  });
  function onPointerDown(event) {
    panSession.current = new PanSession(event, handlers, {
      transformPagePoint
    });
  }
  usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
  useUnmountEffect(function() {
    return panSession.current && panSession.current.end();
  });
}
var import_react23;
var init_use_pan_gesture = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js"() {
    import_react23 = __toModule(require_react());
    init_MotionConfigContext();
    init_use_unmount_effect();
    init_use_pointer_event();
    init_PanSession();
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/drag.js
var drag;
var init_drag = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/drag.js"() {
    init_use_drag();
    init_use_pan_gesture();
    init_make_renderless_component();
    drag = {
      pan: makeRenderlessComponent(usePanGesture),
      drag: makeRenderlessComponent(useDrag)
    };
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js
var Presence, VisibilityAction;
var init_types2 = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js"() {
    (function(Presence2) {
      Presence2[Presence2["Entering"] = 0] = "Entering";
      Presence2[Presence2["Present"] = 1] = "Present";
      Presence2[Presence2["Exiting"] = 2] = "Exiting";
    })(Presence || (Presence = {}));
    (function(VisibilityAction2) {
      VisibilityAction2[VisibilityAction2["Hide"] = 0] = "Hide";
      VisibilityAction2[VisibilityAction2["Show"] = 1] = "Show";
    })(VisibilityAction || (VisibilityAction = {}));
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
function isCSSVariable2(value) {
  return typeof value === "string" && value.startsWith("var(--");
}
function parseCSSVariable(current) {
  var match2 = cssVariableRegex.exec(current);
  if (!match2)
    return [,];
  var _a2 = __read(match2, 3), token2 = _a2[1], fallback = _a2[2];
  return [token2, fallback];
}
function getVariableValue(current, element, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "' + current + '". This may indicate a circular fallback dependency.');
  var _a2 = __read(parseCSSVariable(current), 2), token2 = _a2[0], fallback = _a2[1];
  if (!token2)
    return;
  var resolved = window.getComputedStyle(element).getPropertyValue(token2);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariable2(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement2, _a2, transitionEnd) {
  var _b;
  var target = __rest(_a2, []);
  var element = visualElement2.getInstance();
  if (!(element instanceof HTMLElement))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = __assign({}, transitionEnd);
  }
  visualElement2.forEachValue(function(value) {
    var current2 = value.get();
    if (!isCSSVariable2(current2))
      return;
    var resolved2 = getVariableValue(current2, element);
    if (resolved2)
      value.set(resolved2);
  });
  for (var key in target) {
    var current = target[key];
    if (!isCSSVariable2(current))
      continue;
    var resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key] = resolved;
    if (transitionEnd)
      (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
  }
  return { target, transitionEnd };
}
var cssVariableRegex, maxDepth;
var init_css_variables_conversion = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js"() {
    init_modules();
    init_hey_listen_es();
    cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
    maxDepth = 4;
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js
function pixelsToPercent(pixels, axis) {
  return pixels / (axis.max - axis.min) * 100;
}
function correctBorderRadius(latest, _layoutState, _a2) {
  var target = _a2.target;
  if (typeof latest === "string") {
    if (px.test(latest)) {
      latest = parseFloat(latest);
    } else {
      return latest;
    }
  }
  var x3 = pixelsToPercent(latest, target.x);
  var y = pixelsToPercent(latest, target.y);
  return x3 + "% " + y + "%";
}
function correctBoxShadow(latest, _a2) {
  var delta2 = _a2.delta, treeScale = _a2.treeScale;
  var original = latest;
  var containsCSSVariables = latest.includes("var(");
  var cssVariables = [];
  if (containsCSSVariables) {
    latest = latest.replace(cssVariableRegex, function(match2) {
      cssVariables.push(match2);
      return varToken;
    });
  }
  var shadow = complex.parse(latest);
  if (shadow.length > 5)
    return original;
  var template = complex.createTransformer(latest);
  var offset = typeof shadow[0] !== "number" ? 1 : 0;
  var xScale = delta2.x.scale * treeScale.x;
  var yScale = delta2.y.scale * treeScale.y;
  shadow[0 + offset] /= xScale;
  shadow[1 + offset] /= yScale;
  var averageScale = mix(xScale, yScale, 0.5);
  if (typeof shadow[2 + offset] === "number")
    shadow[2 + offset] /= averageScale;
  if (typeof shadow[3 + offset] === "number")
    shadow[3 + offset] /= averageScale;
  var output = template(shadow);
  if (containsCSSVariables) {
    var i_1 = 0;
    output = output.replace(varToken, function() {
      var cssVariable = cssVariables[i_1];
      i_1++;
      return cssVariable;
    });
  }
  return output;
}
var varToken, borderCorrectionDefinition, defaultScaleCorrectors;
var init_default_scale_correctors = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js"() {
    init_modules();
    init_es();
    init_es3();
    init_css_variables_conversion();
    varToken = "_$css";
    borderCorrectionDefinition = {
      process: correctBorderRadius
    };
    defaultScaleCorrectors = {
      borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius"
      ] }),
      borderTopLeftRadius: borderCorrectionDefinition,
      borderTopRightRadius: borderCorrectionDefinition,
      borderBottomLeftRadius: borderCorrectionDefinition,
      borderBottomRightRadius: borderCorrectionDefinition,
      boxShadow: {
        process: correctBoxShadow
      }
    };
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
function AnimateLayoutContextProvider(props) {
  var _a2 = __read(usePresence(), 2), safeToRemove = _a2[1];
  return React3.createElement(Animate, __assign({}, props, { safeToRemove }));
}
function hasMoved(a2, b2) {
  return !isZeroBox(a2) && !isZeroBox(b2) && (!axisIsEqual(a2.x, b2.x) || !axisIsEqual(a2.y, b2.y));
}
function isZeroBox(a2) {
  return axisIsEqual(a2.x, zeroAxis) && axisIsEqual(a2.y, zeroAxis);
}
function axisIsEqual(a2, b2) {
  return a2.min === b2.min && a2.max === b2.max;
}
function isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {
  return prevParent || !prevParent && !(originBox || targetBox);
}
var React3, progressTarget, Animate, zeroAxis, defaultLayoutTransition;
var init_Animate = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js"() {
    init_modules();
    React3 = __toModule(require_react());
    init_each_axis();
    init_transitions();
    init_utils7();
    init_types2();
    init_use_presence();
    init_geometry();
    init_scale_correction();
    init_default_scale_correctors();
    progressTarget = 1e3;
    Animate = function(_super) {
      __extends(Animate2, _super);
      function Animate2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.frameTarget = axisBox();
        _this.currentAnimationTarget = axisBox();
        _this.isAnimating = {
          x: false,
          y: false
        };
        _this.stopAxisAnimation = {
          x: void 0,
          y: void 0
        };
        _this.isAnimatingTree = false;
        _this.animate = function(target, origin, _a2) {
          if (_a2 === void 0) {
            _a2 = {};
          }
          var originBox = _a2.originBox, targetBox = _a2.targetBox, visibilityAction = _a2.visibilityAction, shouldStackAnimate = _a2.shouldStackAnimate, onComplete = _a2.onComplete, prevParent = _a2.prevParent, config2 = __rest(_a2, ["originBox", "targetBox", "visibilityAction", "shouldStackAnimate", "onComplete", "prevParent"]);
          var _b = _this.props, visualElement2 = _b.visualElement, layout = _b.layout;
          if (shouldStackAnimate === false) {
            _this.isAnimatingTree = false;
            return _this.safeToRemove();
          }
          if (_this.isAnimatingTree && shouldStackAnimate !== true) {
            return;
          } else if (shouldStackAnimate) {
            _this.isAnimatingTree = true;
          }
          origin = originBox || origin;
          target = targetBox || target;
          var isRelative = false;
          var projectionParent = visualElement2.getProjectionParent();
          if (projectionParent) {
            var prevParentViewportBox = projectionParent.prevViewportBox;
            var parentLayout = projectionParent.getLayoutState().layout;
            if (prevParent) {
              if (targetBox) {
                parentLayout = prevParent.getLayoutState().layout;
              }
              if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {
                prevParentViewportBox = prevParent.prevViewportBox;
              }
            }
            if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {
              isRelative = true;
              origin = calcRelativeOffset(prevParentViewportBox, origin);
              target = calcRelativeOffset(parentLayout, target);
            }
          }
          var boxHasMoved = hasMoved(origin, target);
          var animations2 = eachAxis(function(axis) {
            var _a3, _b2;
            if (layout === "position") {
              var targetLength = target[axis].max - target[axis].min;
              origin[axis].max = origin[axis].min + targetLength;
            }
            if (visualElement2.projection.isTargetLocked) {
              return;
            } else if (visibilityAction !== void 0) {
              visualElement2.setVisibility(visibilityAction === VisibilityAction.Show);
            } else if (boxHasMoved) {
              return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config2), { isRelative }));
            } else {
              (_b2 = (_a3 = _this.stopAxisAnimation)[axis]) === null || _b2 === void 0 ? void 0 : _b2.call(_a3);
              return visualElement2.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);
            }
          });
          visualElement2.syncRender();
          return Promise.all(animations2).then(function() {
            _this.isAnimatingTree = false;
            onComplete && onComplete();
            visualElement2.notifyLayoutAnimationComplete();
          });
        };
        return _this;
      }
      Animate2.prototype.componentDidMount = function() {
        var _this = this;
        var visualElement2 = this.props.visualElement;
        visualElement2.animateMotionValue = startAnimation;
        visualElement2.enableLayoutProjection();
        this.unsubLayoutReady = visualElement2.onLayoutUpdate(this.animate);
        visualElement2.layoutSafeToRemove = function() {
          return _this.safeToRemove();
        };
        addScaleCorrection(defaultScaleCorrectors);
      };
      Animate2.prototype.componentWillUnmount = function() {
        var _this = this;
        this.unsubLayoutReady();
        eachAxis(function(axis) {
          var _a2, _b;
          return (_b = (_a2 = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a2);
        });
      };
      Animate2.prototype.animateAxis = function(axis, target, origin, _a2) {
        var _this = this;
        var _b, _c;
        var _d = _a2 === void 0 ? {} : _a2, transition = _d.transition, isRelative = _d.isRelative;
        if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {
          return;
        }
        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);
        this.isAnimating[axis] = true;
        var visualElement2 = this.props.visualElement;
        var frameTarget = this.frameTarget[axis];
        var layoutProgress = visualElement2.getProjectionAnimationProgress()[axis];
        layoutProgress.clearListeners();
        layoutProgress.set(0);
        layoutProgress.set(0);
        var frame2 = function() {
          var p = layoutProgress.get() / progressTarget;
          tweenAxis(frameTarget, origin, target, p);
          visualElement2.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);
        };
        frame2();
        var unsubscribeProgress = layoutProgress.onChange(frame2);
        this.stopAxisAnimation[axis] = function() {
          _this.isAnimating[axis] = false;
          layoutProgress.stop();
          unsubscribeProgress();
        };
        this.currentAnimationTarget[axis] = target;
        var layoutTransition = transition || visualElement2.getDefaultTransition() || defaultLayoutTransition;
        var animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, "layout")).then(this.stopAxisAnimation[axis]);
        return animation;
      };
      Animate2.prototype.safeToRemove = function() {
        var _a2, _b;
        (_b = (_a2 = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a2);
      };
      Animate2.prototype.render = function() {
        return null;
      };
      return Animate2;
    }(React3.Component);
    zeroAxis = { min: 0, max: 0 };
    defaultLayoutTransition = {
      duration: 0.45,
      ease: [0.4, 0, 0.1, 1]
    };
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js
function createBatcher() {
  var queue = new Set();
  return {
    add: function(child) {
      return queue.add(child);
    },
    flush: function(_a2) {
      var _b = _a2 === void 0 ? defaultHandler : _a2, layoutReady = _b.layoutReady, parent = _b.parent;
      batchLayout(function(read, write) {
        var order3 = Array.from(queue).sort(compareByDepth);
        var ancestors = parent ? collectProjectingAncestors(parent) : [];
        write(function() {
          var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order3));
          allElements.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read(function() {
          order3.forEach(updateLayoutMeasurement);
        });
        write(function() {
          ancestors.forEach(function(element) {
            return element.restoreTransform();
          });
          order3.forEach(layoutReady);
        });
        read(function() {
          order3.forEach(function(child) {
            if (child.isPresent)
              child.presence = Presence.Present;
          });
        });
        write(function() {
          flushSync.preRender();
          flushSync.render();
        });
        read(function() {
          es_default.postRender(function() {
            return order3.forEach(assignProjectionToSnapshot);
          });
          queue.clear();
        });
      });
      flushLayout();
    }
  };
}
function assignProjectionToSnapshot(child) {
  child.prevViewportBox = child.projection.target;
}
var defaultHandler;
var init_batcher = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js"() {
    init_modules();
    init_es2();
    init_utils6();
    init_batch_layout();
    init_compare_by_depth();
    init_types2();
    defaultHandler = {
      layoutReady: function(child) {
        return child.notifyLayoutReady();
      }
    };
  }
});

// ../../node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
function isSharedLayout(context) {
  return !!context.forceUpdate;
}
var import_react24, SharedLayoutContext, FramerTreeLayoutContext;
var init_SharedLayoutContext = __esm({
  "../../node_modules/framer-motion/dist/es/context/SharedLayoutContext.js"() {
    import_react24 = __toModule(require_react());
    init_batcher();
    SharedLayoutContext = (0, import_react24.createContext)(createBatcher());
    FramerTreeLayoutContext = (0, import_react24.createContext)(createBatcher());
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
function MeasureContextProvider(props) {
  var syncLayout = (0, import_react25.useContext)(SharedLayoutContext);
  var framerSyncLayout = (0, import_react25.useContext)(FramerTreeLayoutContext);
  return import_react25.default.createElement(Measure, __assign({}, props, { syncLayout, framerSyncLayout }));
}
var import_react25, Measure;
var init_Measure = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js"() {
    init_modules();
    import_react25 = __toModule(require_react());
    init_SharedLayoutContext();
    init_utils6();
    Measure = function(_super) {
      __extends(Measure2, _super);
      function Measure2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Measure2.prototype.componentDidMount = function() {
        var _a2 = this.props, syncLayout = _a2.syncLayout, framerSyncLayout = _a2.framerSyncLayout, visualElement2 = _a2.visualElement;
        isSharedLayout(syncLayout) && syncLayout.register(visualElement2);
        isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement2);
        visualElement2.onUnmount(function() {
          if (isSharedLayout(syncLayout)) {
            syncLayout.remove(visualElement2);
          }
          if (isSharedLayout(framerSyncLayout)) {
            framerSyncLayout.remove(visualElement2);
          }
        });
      };
      Measure2.prototype.getSnapshotBeforeUpdate = function() {
        var _a2 = this.props, syncLayout = _a2.syncLayout, visualElement2 = _a2.visualElement;
        if (isSharedLayout(syncLayout)) {
          syncLayout.syncUpdate();
        } else {
          snapshotViewportBox(visualElement2);
          syncLayout.add(visualElement2);
        }
        return null;
      };
      Measure2.prototype.componentDidUpdate = function() {
        var syncLayout = this.props.syncLayout;
        if (!isSharedLayout(syncLayout))
          syncLayout.flush();
      };
      Measure2.prototype.render = function() {
        return null;
      };
      return Measure2;
    }(import_react25.default.Component);
  }
});

// ../../node_modules/framer-motion/dist/es/motion/features/layout/index.js
var layoutAnimations;
var init_layout = __esm({
  "../../node_modules/framer-motion/dist/es/motion/features/layout/index.js"() {
    init_Animate();
    init_Measure();
    layoutAnimations = {
      measureLayout: MeasureContextProvider,
      layoutAnimation: AnimateLayoutContextProvider
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/state.js
function createLayoutState() {
  return {
    isHydrated: false,
    layout: axisBox(),
    layoutCorrected: axisBox(),
    treeScale: { x: 1, y: 1 },
    delta: delta(),
    deltaFinal: delta(),
    deltaTransform: ""
  };
}
var createProjectionState, zeroLayout;
var init_state = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/state.js"() {
    init_geometry();
    createProjectionState = function() {
      return {
        isEnabled: false,
        isHydrated: false,
        isTargetLocked: false,
        target: axisBox(),
        targetFinal: axisBox()
      };
    };
    zeroLayout = createLayoutState();
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js
function buildLayoutProjectionTransform(_a2, treeScale, latestTransform) {
  var x3 = _a2.x, y = _a2.y;
  var xTranslate = x3.translate / treeScale.x;
  var yTranslate = y.translate / treeScale.y;
  var transform4 = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
  if (latestTransform) {
    var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
    if (rotate)
      transform4 += "rotate(" + rotate + ") ";
    if (rotateX)
      transform4 += "rotateX(" + rotateX + ") ";
    if (rotateY)
      transform4 += "rotateY(" + rotateY + ") ";
  }
  transform4 += "scale(" + x3.scale + ", " + y.scale + ")";
  return !latestTransform && transform4 === identityProjection ? "" : transform4;
}
function buildLayoutProjectionTransformOrigin(_a2) {
  var deltaFinal = _a2.deltaFinal;
  return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
}
var identityProjection;
var init_build_projection_transform = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js"() {
    init_state();
    identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/lifecycles.js
function createLifecycles() {
  var managers = names.map(function() {
    return new SubscriptionManager();
  });
  var propSubscriptions = {};
  var lifecycles = {
    clearAllListeners: function() {
      return managers.forEach(function(manager) {
        return manager.clear();
      });
    },
    updatePropListeners: function(props) {
      return names.forEach(function(name) {
        var _a2;
        (_a2 = propSubscriptions[name]) === null || _a2 === void 0 ? void 0 : _a2.call(propSubscriptions);
        var on = "on" + name;
        var propListener = props[on];
        if (propListener) {
          propSubscriptions[name] = lifecycles[on](propListener);
        }
      });
    }
  };
  managers.forEach(function(manager, i) {
    lifecycles["on" + names[i]] = function(handler) {
      return manager.add(handler);
    };
    lifecycles["notify" + names[i]] = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return manager.notify.apply(manager, __spreadArray([], __read(args)));
    };
  });
  return lifecycles;
}
var names;
var init_lifecycles = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/lifecycles.js"() {
    init_modules();
    init_subscription_manager();
    names = [
      "LayoutMeasure",
      "BeforeLayoutMeasure",
      "LayoutUpdate",
      "ViewportBoxUpdate",
      "Update",
      "Render",
      "AnimationComplete",
      "LayoutAnimationComplete",
      "AnimationStart",
      "SetAxisTarget",
      "Unmount"
    ];
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/motion-values.js
function updateMotionValuesFromProps(element, next2, prev2) {
  var _a2;
  for (var key in next2) {
    var nextValue = next2[key];
    var prevValue = prev2[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue));
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        var existingValue = element.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        element.addValue(key, motionValue((_a2 = element.getStaticValue(key)) !== null && _a2 !== void 0 ? _a2 : nextValue));
      }
    }
  }
  for (var key in prev2) {
    if (next2[key] === void 0)
      element.removeValue(key);
  }
  return next2;
}
var init_motion_values = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/motion-values.js"() {
    init_value();
    init_is_motion_value();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/projection.js
function updateLayoutDeltas(_a2, _b, treePath, transformOrigin) {
  var delta2 = _a2.delta, layout = _a2.layout, layoutCorrected = _a2.layoutCorrected, treeScale = _a2.treeScale;
  var target = _b.target;
  resetBox(layoutCorrected, layout);
  applyTreeDeltas(layoutCorrected, treeScale, treePath);
  updateBoxDelta(delta2, layoutCorrected, target, transformOrigin);
}
var init_projection = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/projection.js"() {
    init_delta_apply();
    init_delta_calc();
  }
});

// ../../node_modules/framer-motion/dist/es/render/utils/flat-tree.js
var FlatTree;
var init_flat_tree = __esm({
  "../../node_modules/framer-motion/dist/es/render/utils/flat-tree.js"() {
    init_array();
    init_compare_by_depth();
    FlatTree = function() {
      function FlatTree2() {
        this.children = [];
        this.isDirty = false;
      }
      FlatTree2.prototype.add = function(child) {
        addUniqueItem(this.children, child);
        this.isDirty = true;
      };
      FlatTree2.prototype.remove = function(child) {
        removeItem(this.children, child);
        this.isDirty = true;
      };
      FlatTree2.prototype.forEach = function(callback) {
        this.isDirty && this.children.sort(compareByDepth);
        this.isDirty = false;
        this.children.forEach(callback);
      };
      return FlatTree2;
    }();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js
function setCurrentViewportBox(visualElement2) {
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent) {
    visualElement2.rebaseProjectionTarget();
    return;
  }
  var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  eachAxis(function(axis) {
    visualElement2.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
  });
}
var init_relative_set = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js"() {
    init_utils7();
    init_each_axis();
  }
});

// ../../node_modules/framer-motion/dist/es/render/index.js
function fireResolveRelativeTargetBox(child) {
  child.resolveRelativeTargetBox();
}
function fireUpdateLayoutProjection(child) {
  child.updateLayoutProjection();
}
var visualElement, variantProps, numVariantProps;
var init_render3 = __esm({
  "../../node_modules/framer-motion/dist/es/render/index.js"() {
    init_modules();
    init_es2();
    init_es3();
    init_types2();
    init_each_axis();
    init_geometry();
    init_delta_apply();
    init_delta_calc();
    init_value();
    init_is_motion_value();
    init_build_projection_transform();
    init_animation_state();
    init_lifecycles();
    init_motion_values();
    init_projection();
    init_state();
    init_flat_tree();
    init_variants();
    init_relative_set();
    init_is_draggable();
    visualElement = function(_a2) {
      var _b = _a2.treeType, treeType = _b === void 0 ? "" : _b, build = _a2.build, getBaseTarget = _a2.getBaseTarget, makeTargetAnimatable = _a2.makeTargetAnimatable, measureViewportBox = _a2.measureViewportBox, renderInstance = _a2.render, readValueFromInstance = _a2.readValueFromInstance, resetTransform = _a2.resetTransform, restoreTransform = _a2.restoreTransform, removeValueFromRenderState = _a2.removeValueFromRenderState, sortNodePosition = _a2.sortNodePosition, scrapeMotionValuesFromProps3 = _a2.scrapeMotionValuesFromProps;
      return function(_a3, options) {
        var parent = _a3.parent, props = _a3.props, presenceId2 = _a3.presenceId, blockInitialAnimation = _a3.blockInitialAnimation, visualState = _a3.visualState;
        if (options === void 0) {
          options = {};
        }
        var latestValues = visualState.latestValues, renderState = visualState.renderState;
        var instance;
        var lifecycles = createLifecycles();
        var projection = createProjectionState();
        var projectionParent;
        var leadProjection = projection;
        var leadLatestValues = latestValues;
        var unsubscribeFromLeadVisualElement;
        var layoutState = createLayoutState();
        var crossfader;
        var hasViewportBoxUpdated = false;
        var values3 = new Map();
        var valueSubscriptions = new Map();
        var prevMotionValues = {};
        var projectionTargetProgress;
        var baseTarget = __assign({}, latestValues);
        var removeFromVariantTree;
        function render3() {
          if (!instance)
            return;
          if (element.isProjectionReady()) {
            applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
            updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);
          }
          triggerBuild();
          renderInstance(instance, renderState);
        }
        function triggerBuild() {
          var valuesToRender = latestValues;
          if (crossfader && crossfader.isActive()) {
            var crossfadedValues = crossfader.getCrossfadeState(element);
            if (crossfadedValues)
              valuesToRender = crossfadedValues;
          }
          build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);
        }
        function update() {
          lifecycles.notifyUpdate(latestValues);
        }
        function updateLayoutProjection() {
          if (!element.isProjectionReady())
            return;
          var delta2 = layoutState.delta, treeScale = layoutState.treeScale;
          var prevTreeScaleX = treeScale.x;
          var prevTreeScaleY = treeScale.y;
          var prevDeltaTransform = layoutState.deltaTransform;
          updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);
          hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta2);
          hasViewportBoxUpdated = false;
          var deltaTransform = buildLayoutProjectionTransform(delta2, treeScale);
          if (deltaTransform !== prevDeltaTransform || prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {
            element.scheduleRender();
          }
          layoutState.deltaTransform = deltaTransform;
        }
        function updateTreeLayoutProjection() {
          element.layoutTree.forEach(fireUpdateLayoutProjection);
        }
        function bindToMotionValue(key2, value2) {
          var removeOnChange = value2.onChange(function(latestValue) {
            latestValues[key2] = latestValue;
            props.onUpdate && es_default.update(update, false, true);
          });
          var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
          valueSubscriptions.set(key2, function() {
            removeOnChange();
            removeOnRenderRequest();
          });
        }
        var initialMotionValues = scrapeMotionValuesFromProps3(props);
        for (var key in initialMotionValues) {
          var value = initialMotionValues[key];
          if (latestValues[key] !== void 0 && isMotionValue(value)) {
            value.set(latestValues[key], false);
          }
        }
        var isControllingVariants = checkIfControllingVariants(props);
        var isVariantNode = checkIfVariantNode(props);
        var element = __assign(__assign({
          treeType,
          current: null,
          depth: parent ? parent.depth + 1 : 0,
          parent,
          children: new Set(),
          path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],
          layoutTree: parent ? parent.layoutTree : new FlatTree(),
          presenceId: presenceId2,
          projection,
          variantChildren: isVariantNode ? new Set() : void 0,
          isVisible: void 0,
          manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
          blockInitialAnimation,
          isMounted: function() {
            return Boolean(instance);
          },
          mount: function(newInstance) {
            instance = element.current = newInstance;
            element.pointTo(element);
            if (isVariantNode && parent && !isControllingVariants) {
              removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
            }
            parent === null || parent === void 0 ? void 0 : parent.children.add(element);
          },
          unmount: function() {
            cancelSync.update(update);
            cancelSync.render(render3);
            cancelSync.preRender(element.updateLayoutProjection);
            valueSubscriptions.forEach(function(remove) {
              return remove();
            });
            element.stopLayoutAnimation();
            element.layoutTree.remove(element);
            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
            unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
            lifecycles.clearAllListeners();
          },
          addVariantChild: function(child) {
            var _a4;
            var closestVariantNode = element.getClosestVariantNode();
            if (closestVariantNode) {
              (_a4 = closestVariantNode.variantChildren) === null || _a4 === void 0 ? void 0 : _a4.add(child);
              return function() {
                return closestVariantNode.variantChildren.delete(child);
              };
            }
          },
          sortNodePosition: function(other) {
            if (!sortNodePosition || treeType !== other.treeType)
              return 0;
            return sortNodePosition(element.getInstance(), other.getInstance());
          },
          getClosestVariantNode: function() {
            return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
          },
          scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function() {
            return es_default.preRender(element.updateTreeLayoutProjection, false, true);
          },
          getLayoutId: function() {
            return props.layoutId;
          },
          getInstance: function() {
            return instance;
          },
          getStaticValue: function(key2) {
            return latestValues[key2];
          },
          setStaticValue: function(key2, value2) {
            return latestValues[key2] = value2;
          },
          getLatestValues: function() {
            return latestValues;
          },
          setVisibility: function(visibility2) {
            if (element.isVisible === visibility2)
              return;
            element.isVisible = visibility2;
            element.scheduleRender();
          },
          makeTargetAnimatable: function(target, canMutate) {
            if (canMutate === void 0) {
              canMutate = true;
            }
            return makeTargetAnimatable(element, target, props, canMutate);
          },
          addValue: function(key2, value2) {
            if (element.hasValue(key2))
              element.removeValue(key2);
            values3.set(key2, value2);
            latestValues[key2] = value2.get();
            bindToMotionValue(key2, value2);
          },
          removeValue: function(key2) {
            var _a4;
            values3.delete(key2);
            (_a4 = valueSubscriptions.get(key2)) === null || _a4 === void 0 ? void 0 : _a4();
            valueSubscriptions.delete(key2);
            delete latestValues[key2];
            removeValueFromRenderState(key2, renderState);
          },
          hasValue: function(key2) {
            return values3.has(key2);
          },
          getValue: function(key2, defaultValue) {
            var value2 = values3.get(key2);
            if (value2 === void 0 && defaultValue !== void 0) {
              value2 = motionValue(defaultValue);
              element.addValue(key2, value2);
            }
            return value2;
          },
          forEachValue: function(callback) {
            return values3.forEach(callback);
          },
          readValue: function(key2) {
            var _a4;
            return (_a4 = latestValues[key2]) !== null && _a4 !== void 0 ? _a4 : readValueFromInstance(instance, key2, options);
          },
          setBaseTarget: function(key2, value2) {
            baseTarget[key2] = value2;
          },
          getBaseTarget: function(key2) {
            if (getBaseTarget) {
              var target = getBaseTarget(props, key2);
              if (target !== void 0 && !isMotionValue(target))
                return target;
            }
            return baseTarget[key2];
          }
        }, lifecycles), {
          build: function() {
            triggerBuild();
            return renderState;
          },
          scheduleRender: function() {
            es_default.render(render3, false, true);
          },
          syncRender: render3,
          setProps: function(newProps) {
            props = newProps;
            lifecycles.updatePropListeners(newProps);
            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps3(props), prevMotionValues);
          },
          getProps: function() {
            return props;
          },
          getVariant: function(name) {
            var _a4;
            return (_a4 = props.variants) === null || _a4 === void 0 ? void 0 : _a4[name];
          },
          getDefaultTransition: function() {
            return props.transition;
          },
          getVariantContext: function(startAtParent) {
            if (startAtParent === void 0) {
              startAtParent = false;
            }
            if (startAtParent)
              return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
            if (!isControllingVariants) {
              var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
              if (props.initial !== void 0) {
                context_1.initial = props.initial;
              }
              return context_1;
            }
            var context = {};
            for (var i = 0; i < numVariantProps; i++) {
              var name_1 = variantProps[i];
              var prop = props[name_1];
              if (isVariantLabel(prop) || prop === false) {
                context[name_1] = prop;
              }
            }
            return context;
          },
          enableLayoutProjection: function() {
            projection.isEnabled = true;
            element.layoutTree.add(element);
          },
          lockProjectionTarget: function() {
            projection.isTargetLocked = true;
          },
          unlockProjectionTarget: function() {
            element.stopLayoutAnimation();
            projection.isTargetLocked = false;
          },
          getLayoutState: function() {
            return layoutState;
          },
          setCrossfader: function(newCrossfader) {
            crossfader = newCrossfader;
          },
          isProjectionReady: function() {
            return projection.isEnabled && projection.isHydrated && layoutState.isHydrated;
          },
          startLayoutAnimation: function(axis, transition, isRelative) {
            if (isRelative === void 0) {
              isRelative = false;
            }
            var progress2 = element.getProjectionAnimationProgress()[axis];
            var _a4 = isRelative ? projection.relativeTarget[axis] : projection.target[axis], min = _a4.min, max = _a4.max;
            var length2 = max - min;
            progress2.clearListeners();
            progress2.set(min);
            progress2.set(min);
            progress2.onChange(function(v) {
              element.setProjectionTargetAxis(axis, v, v + length2, isRelative);
            });
            return element.animateMotionValue(axis, progress2, 0, transition);
          },
          stopLayoutAnimation: function() {
            eachAxis(function(axis) {
              return element.getProjectionAnimationProgress()[axis].stop();
            });
          },
          measureViewportBox: function(withTransform) {
            if (withTransform === void 0) {
              withTransform = true;
            }
            var viewportBox = measureViewportBox(instance, options);
            if (!withTransform)
              removeBoxTransforms(viewportBox, latestValues);
            return viewportBox;
          },
          getProjectionAnimationProgress: function() {
            projectionTargetProgress || (projectionTargetProgress = {
              x: motionValue(0),
              y: motionValue(0)
            });
            return projectionTargetProgress;
          },
          setProjectionTargetAxis: function(axis, min, max, isRelative) {
            if (isRelative === void 0) {
              isRelative = false;
            }
            var target;
            if (isRelative) {
              if (!projection.relativeTarget) {
                projection.relativeTarget = axisBox();
              }
              target = projection.relativeTarget[axis];
            } else {
              projection.relativeTarget = void 0;
              target = projection.target[axis];
            }
            projection.isHydrated = true;
            target.min = min;
            target.max = max;
            hasViewportBoxUpdated = true;
            lifecycles.notifySetAxisTarget();
          },
          rebaseProjectionTarget: function(force, box) {
            if (box === void 0) {
              box = layoutState.layout;
            }
            var _a4 = element.getProjectionAnimationProgress(), x3 = _a4.x, y = _a4.y;
            var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x3.isAnimating() && !y.isAnimating();
            if (force || shouldRebase) {
              eachAxis(function(axis) {
                var _a5 = box[axis], min = _a5.min, max = _a5.max;
                element.setProjectionTargetAxis(axis, min, max);
              });
            }
          },
          notifyLayoutReady: function(config2) {
            setCurrentViewportBox(element);
            element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config2);
          },
          resetTransform: function() {
            return resetTransform(element, instance, props);
          },
          restoreTransform: function() {
            return restoreTransform(instance, renderState);
          },
          updateLayoutProjection,
          updateTreeLayoutProjection: function() {
            element.layoutTree.forEach(fireResolveRelativeTargetBox);
            es_default.preRender(updateTreeLayoutProjection, false, true);
          },
          getProjectionParent: function() {
            if (projectionParent === void 0) {
              var foundParent = false;
              for (var i = element.path.length - 1; i >= 0; i--) {
                var ancestor = element.path[i];
                if (ancestor.projection.isEnabled) {
                  foundParent = ancestor;
                  break;
                }
              }
              projectionParent = foundParent;
            }
            return projectionParent;
          },
          resolveRelativeTargetBox: function() {
            var relativeParent = element.getProjectionParent();
            if (!projection.relativeTarget || !relativeParent)
              return;
            calcRelativeBox(projection, relativeParent.projection);
            if (isDraggable(relativeParent)) {
              var target = projection.target;
              applyBoxTransforms(target, target, relativeParent.getLatestValues());
            }
          },
          shouldResetTransform: function() {
            return Boolean(props._layoutResetTransform);
          },
          pointTo: function(newLead) {
            leadProjection = newLead.projection;
            leadLatestValues = newLead.getLatestValues();
            unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
            unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function() {
              var _a4;
              if (element.isPresent) {
                element.presence = Presence.Present;
              } else {
                (_a4 = element.layoutSafeToRemove) === null || _a4 === void 0 ? void 0 : _a4.call(element);
              }
            }));
          },
          isPresent: true,
          presence: Presence.Entering
        });
        return element;
      };
    };
    variantProps = __spreadArray(["initial"], __read(variantPriorityOrder));
    numVariantProps = variantProps.length;
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
function removeNonTranslationalTransform(visualElement2) {
  var removedTransforms = [];
  nonTranslationalTransformKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.syncRender();
  return removedTransforms;
}
function unitConversion(visualElement2, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
}
var positionalKeys, isPositionalKey, hasPositionalKey, setAndResetVelocity, isNumOrPxType, BoundingBoxDimension, getPosFromMatrix, getTranslateFromMatrix, transformKeys, nonTranslationalTransformKeys, positionalValues, convertChangedValueTypes, checkAndConvertChangedValueTypes;
var init_unit_conversion = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js"() {
    init_modules();
    init_es();
    init_is_keyframes_target();
    init_hey_listen_es();
    init_transform();
    init_dimensions();
    positionalKeys = new Set([
      "width",
      "height",
      "top",
      "left",
      "right",
      "bottom",
      "x",
      "y"
    ]);
    isPositionalKey = function(key) {
      return positionalKeys.has(key);
    };
    hasPositionalKey = function(target) {
      return Object.keys(target).some(isPositionalKey);
    };
    setAndResetVelocity = function(value, to2) {
      value.set(to2, false);
      value.set(to2);
    };
    isNumOrPxType = function(v) {
      return v === number || v === px;
    };
    (function(BoundingBoxDimension2) {
      BoundingBoxDimension2["width"] = "width";
      BoundingBoxDimension2["height"] = "height";
      BoundingBoxDimension2["left"] = "left";
      BoundingBoxDimension2["right"] = "right";
      BoundingBoxDimension2["top"] = "top";
      BoundingBoxDimension2["bottom"] = "bottom";
    })(BoundingBoxDimension || (BoundingBoxDimension = {}));
    getPosFromMatrix = function(matrix, pos) {
      return parseFloat(matrix.split(", ")[pos]);
    };
    getTranslateFromMatrix = function(pos2, pos3) {
      return function(_bbox, _a2) {
        var transform4 = _a2.transform;
        if (transform4 === "none" || !transform4)
          return 0;
        var matrix3d = transform4.match(/^matrix3d\((.+)\)$/);
        if (matrix3d) {
          return getPosFromMatrix(matrix3d[1], pos3);
        } else {
          var matrix = transform4.match(/^matrix\((.+)\)$/);
          if (matrix) {
            return getPosFromMatrix(matrix[1], pos2);
          } else {
            return 0;
          }
        }
      };
    };
    transformKeys = new Set(["x", "y", "z"]);
    nonTranslationalTransformKeys = transformProps.filter(function(key) {
      return !transformKeys.has(key);
    });
    positionalValues = {
      width: function(_a2) {
        var x3 = _a2.x;
        return x3.max - x3.min;
      },
      height: function(_a2) {
        var y = _a2.y;
        return y.max - y.min;
      },
      top: function(_bbox, _a2) {
        var top2 = _a2.top;
        return parseFloat(top2);
      },
      left: function(_bbox, _a2) {
        var left2 = _a2.left;
        return parseFloat(left2);
      },
      bottom: function(_a2, _b) {
        var y = _a2.y;
        var top2 = _b.top;
        return parseFloat(top2) + (y.max - y.min);
      },
      right: function(_a2, _b) {
        var x3 = _a2.x;
        var left2 = _b.left;
        return parseFloat(left2) + (x3.max - x3.min);
      },
      x: getTranslateFromMatrix(4, 13),
      y: getTranslateFromMatrix(5, 14)
    };
    convertChangedValueTypes = function(target, visualElement2, changedKeys) {
      var originBbox = visualElement2.measureViewportBox();
      var element = visualElement2.getInstance();
      var elementComputedStyle = getComputedStyle(element);
      var display = elementComputedStyle.display, top2 = elementComputedStyle.top, left2 = elementComputedStyle.left, bottom2 = elementComputedStyle.bottom, right2 = elementComputedStyle.right, transform4 = elementComputedStyle.transform;
      var originComputedStyle = { top: top2, left: left2, bottom: bottom2, right: right2, transform: transform4 };
      if (display === "none") {
        visualElement2.setStaticValue("display", target.display || "block");
      }
      visualElement2.syncRender();
      var targetBbox = visualElement2.measureViewportBox();
      changedKeys.forEach(function(key) {
        var value = visualElement2.getValue(key);
        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));
        target[key] = positionalValues[key](targetBbox, elementComputedStyle);
      });
      return target;
    };
    checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
      if (origin === void 0) {
        origin = {};
      }
      if (transitionEnd === void 0) {
        transitionEnd = {};
      }
      target = __assign({}, target);
      transitionEnd = __assign({}, transitionEnd);
      var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
      var removedTransformValues = [];
      var hasAttemptedToRemoveTransformValues = false;
      var changedValueTypeKeys = [];
      targetPositionalKeys.forEach(function(key) {
        var value = visualElement2.getValue(key);
        if (!visualElement2.hasValue(key))
          return;
        var from2 = origin[key];
        var to2 = target[key];
        var fromType = findDimensionValueType(from2);
        var toType;
        if (isKeyframesTarget(to2)) {
          var numKeyframes = to2.length;
          for (var i = to2[0] === null ? 1 : 0; i < numKeyframes; i++) {
            if (!toType) {
              toType = findDimensionValueType(to2[i]);
              invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
            } else {
              invariant(findDimensionValueType(to2[i]) === toType, "All keyframes must be of the same type");
            }
          }
        } else {
          toType = findDimensionValueType(to2);
        }
        if (fromType !== toType) {
          if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
            var current = value.get();
            if (typeof current === "string") {
              value.set(parseFloat(current));
            }
            if (typeof to2 === "string") {
              target[key] = parseFloat(to2);
            } else if (Array.isArray(to2) && toType === px) {
              target[key] = to2.map(parseFloat);
            }
          } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from2 === 0 || to2 === 0)) {
            if (from2 === 0) {
              value.set(toType.transform(from2));
            } else {
              target[key] = fromType.transform(to2);
            }
          } else {
            if (!hasAttemptedToRemoveTransformValues) {
              removedTransformValues = removeNonTranslationalTransform(visualElement2);
              hasAttemptedToRemoveTransformValues = true;
            }
            changedValueTypeKeys.push(key);
            transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
            setAndResetVelocity(value, to2);
          }
        }
      });
      if (changedValueTypeKeys.length) {
        var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
        if (removedTransformValues.length) {
          removedTransformValues.forEach(function(_a2) {
            var _b = __read(_a2, 2), key = _b[0], value = _b[1];
            visualElement2.getValue(key).set(value);
          });
        }
        visualElement2.syncRender();
        return { target: convertedTarget, transitionEnd };
      } else {
        return { target, transitionEnd };
      }
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
var parseDomVariant;
var init_parse_dom_variant = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js"() {
    init_css_variables_conversion();
    init_unit_conversion();
    parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
      var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
      target = resolved.target;
      transitionEnd = resolved.transitionEnd;
      return unitConversion(visualElement2, target, origin, transitionEnd);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/html/visual-element.js
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var htmlConfig, htmlVisualElement;
var init_visual_element = __esm({
  "../../node_modules/framer-motion/dist/es/render/html/visual-element.js"() {
    init_modules();
    init_render3();
    init_setters();
    init_measure();
    init_build_styles();
    init_is_css_variable();
    init_parse_dom_variant();
    init_transform();
    init_scrape_motion_values();
    init_render();
    init_defaults();
    init_build_projection_transform();
    htmlConfig = {
      treeType: "dom",
      readValueFromInstance: function(domElement, key) {
        if (isTransformProp(key)) {
          var defaultType = getDefaultValueType(key);
          return defaultType ? defaultType.default || 0 : 0;
        } else {
          var computedStyle = getComputedStyle2(domElement);
          return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
        }
      },
      sortNodePosition: function(a2, b2) {
        return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
      },
      getBaseTarget: function(props, key) {
        var _a2;
        return (_a2 = props.style) === null || _a2 === void 0 ? void 0 : _a2[key];
      },
      measureViewportBox: function(element, _a2) {
        var transformPagePoint = _a2.transformPagePoint;
        return getBoundingBox(element, transformPagePoint);
      },
      resetTransform: function(element, domElement, props) {
        var transformTemplate = props.transformTemplate;
        domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
        element.scheduleRender();
      },
      restoreTransform: function(instance, mutableState) {
        instance.style.transform = mutableState.style.transform;
      },
      removeValueFromRenderState: function(key, _a2) {
        var vars = _a2.vars, style3 = _a2.style;
        delete vars[key];
        delete style3[key];
      },
      makeTargetAnimatable: function(element, _a2, _b, isMounted) {
        var transformValues = _b.transformValues;
        if (isMounted === void 0) {
          isMounted = true;
        }
        var transition = _a2.transition, transitionEnd = _a2.transitionEnd, target = __rest(_a2, ["transition", "transitionEnd"]);
        var origin = getOrigin(target, transition || {}, element);
        if (transformValues) {
          if (transitionEnd)
            transitionEnd = transformValues(transitionEnd);
          if (target)
            target = transformValues(target);
          if (origin)
            origin = transformValues(origin);
        }
        if (isMounted) {
          checkTargetForNewValues(element, target, origin);
          var parsed = parseDomVariant(element, target, origin, transitionEnd);
          transitionEnd = parsed.transitionEnd;
          target = parsed.target;
        }
        return __assign({
          transition,
          transitionEnd
        }, target);
      },
      scrapeMotionValuesFromProps,
      build: function(element, renderState, latestValues, projection, layoutState, options, props) {
        if (element.isVisible !== void 0) {
          renderState.style.visibility = element.isVisible ? "visible" : "hidden";
        }
        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
      },
      render: renderHTML
    };
    htmlVisualElement = visualElement(htmlConfig);
  }
});

// ../../node_modules/framer-motion/dist/es/render/svg/visual-element.js
var svgVisualElement;
var init_visual_element2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/svg/visual-element.js"() {
    init_modules();
    init_render3();
    init_scrape_motion_values2();
    init_visual_element();
    init_build_attrs();
    init_camel_to_dash();
    init_camel_case_attrs();
    init_transform();
    init_render2();
    init_defaults();
    init_build_projection_transform();
    svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), {
      getBaseTarget: function(props, key) {
        return props[key];
      },
      readValueFromInstance: function(domElement, key) {
        var _a2;
        if (isTransformProp(key)) {
          return ((_a2 = getDefaultValueType(key)) === null || _a2 === void 0 ? void 0 : _a2.default) || 0;
        }
        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        return domElement.getAttribute(key);
      },
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      build: function(_element, renderState, latestValues, projection, layoutState, options, props) {
        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
      },
      render: renderSVG
    }));
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
var createDomVisualElement;
var init_create_visual_element = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js"() {
    init_visual_element();
    init_visual_element2();
    init_is_svg_component();
    createDomVisualElement = function(Component3, options) {
      return isSVGComponent(Component3) ? svgVisualElement(options, { enableHardwareAcceleration: false }) : htmlVisualElement(options, { enableHardwareAcceleration: true });
    };
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/motion.js
function createDomMotionComponent(key) {
  return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, featureBundle, createDomVisualElement));
}
var featureBundle, motion;
var init_motion2 = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/motion.js"() {
    init_modules();
    init_motion();
    init_motion_proxy();
    init_create_config();
    init_gestures();
    init_animations2();
    init_drag();
    init_layout();
    init_create_visual_element();
    featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutAnimations);
    motion = /* @__PURE__ */ createMotionProxy(function(Component3, config2) {
      return createDomMotionConfig(Component3, config2, featureBundle, createDomVisualElement);
    });
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/motion-minimal.js
var m;
var init_motion_minimal = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/motion-minimal.js"() {
    init_motion_proxy();
    init_create_config();
    m = createMotionProxy(createDomMotionConfig);
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-force-update.js
function useForceUpdate() {
  var unloadingRef = (0, import_react26.useRef)(false);
  var _a2 = __read((0, import_react26.useState)(0), 2), forcedRenderCount = _a2[0], setForcedRenderCount = _a2[1];
  useUnmountEffect(function() {
    return unloadingRef.current = true;
  });
  return (0, import_react26.useCallback)(function() {
    !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
}
var import_react26;
var init_use_force_update = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-force-update.js"() {
    init_modules();
    import_react26 = __toModule(require_react());
    init_use_unmount_effect();
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
function getPresenceId() {
  var id = presenceId;
  presenceId++;
  return id;
}
function newChildrenMap() {
  return new Map();
}
var React4, import_react27, presenceId, PresenceChild;
var init_PresenceChild = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js"() {
    React4 = __toModule(require_react());
    import_react27 = __toModule(require_react());
    init_PresenceContext();
    init_use_constant();
    presenceId = 0;
    PresenceChild = function(_a2) {
      var children = _a2.children, initial = _a2.initial, isPresent2 = _a2.isPresent, onExitComplete = _a2.onExitComplete, custom = _a2.custom, presenceAffectsLayout = _a2.presenceAffectsLayout;
      var presenceChildren = useConstant(newChildrenMap);
      var id = useConstant(getPresenceId);
      var context = (0, import_react27.useMemo)(function() {
        return {
          id,
          initial,
          isPresent: isPresent2,
          custom,
          onExitComplete: function(childId) {
            presenceChildren.set(childId, true);
            var allComplete = true;
            presenceChildren.forEach(function(isComplete) {
              if (!isComplete)
                allComplete = false;
            });
            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
          },
          register: function(childId) {
            presenceChildren.set(childId, false);
            return function() {
              return presenceChildren.delete(childId);
            };
          }
        };
      }, presenceAffectsLayout ? void 0 : [isPresent2]);
      (0, import_react27.useMemo)(function() {
        presenceChildren.forEach(function(_4, key) {
          return presenceChildren.set(key, false);
        });
      }, [isPresent2]);
      React4.useEffect(function() {
        !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
      }, [isPresent2]);
      return React4.createElement(PresenceContext.Provider, { value: context }, children);
    };
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
function getChildKey(child) {
  return child.key || "";
}
function updateChildLookup(children, allChildren) {
  var seenChildren = true ? new Set() : null;
  children.forEach(function(child) {
    var key = getChildKey(child);
    if (seenChildren) {
      if (seenChildren.has(key)) {
        console.warn('Children of AnimatePresence require unique keys. "' + key + '" is a duplicate.');
      }
      seenChildren.add(key);
    }
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  var filtered = [];
  import_react28.Children.forEach(children, function(child) {
    if ((0, import_react28.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var React5, import_react28, AnimatePresence;
var init_AnimatePresence = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js"() {
    init_modules();
    React5 = __toModule(require_react());
    import_react28 = __toModule(require_react());
    init_use_force_update();
    init_PresenceChild();
    init_SharedLayoutContext();
    AnimatePresence = function(_a2) {
      var children = _a2.children, custom = _a2.custom, _b = _a2.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a2.onExitComplete, exitBeforeEnter = _a2.exitBeforeEnter, _c = _a2.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
      var forceRender = useForceUpdate();
      var layoutContext = (0, import_react28.useContext)(SharedLayoutContext);
      if (isSharedLayout(layoutContext)) {
        forceRender = layoutContext.forceUpdate;
      }
      var isInitialRender = (0, import_react28.useRef)(true);
      var filteredChildren = onlyElements(children);
      var presentChildren = (0, import_react28.useRef)(filteredChildren);
      var allChildren = (0, import_react28.useRef)(new Map()).current;
      var exiting = (0, import_react28.useRef)(new Set()).current;
      updateChildLookup(filteredChildren, allChildren);
      if (isInitialRender.current) {
        isInitialRender.current = false;
        return React5.createElement(React5.Fragment, null, filteredChildren.map(function(child) {
          return React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout }, child);
        }));
      }
      var childrenToRender = __spreadArray([], __read(filteredChildren));
      var presentKeys = presentChildren.current.map(getChildKey);
      var targetKeys = filteredChildren.map(getChildKey);
      var numPresent = presentKeys.length;
      for (var i = 0; i < numPresent; i++) {
        var key = presentKeys[i];
        if (targetKeys.indexOf(key) === -1) {
          exiting.add(key);
        } else {
          exiting.delete(key);
        }
      }
      if (exitBeforeEnter && exiting.size) {
        childrenToRender = [];
      }
      exiting.forEach(function(key2) {
        if (targetKeys.indexOf(key2) !== -1)
          return;
        var child = allChildren.get(key2);
        if (!child)
          return;
        var insertionIndex = presentKeys.indexOf(key2);
        var onExit = function() {
          allChildren.delete(key2);
          exiting.delete(key2);
          var removeIndex = presentChildren.current.findIndex(function(presentChild) {
            return presentChild.key === key2;
          });
          presentChildren.current.splice(removeIndex, 1);
          if (!exiting.size) {
            presentChildren.current = filteredChildren;
            forceRender();
            onExitComplete && onExitComplete();
          }
        };
        childrenToRender.splice(insertionIndex, 0, React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout }, child));
      });
      childrenToRender = childrenToRender.map(function(child) {
        var key2 = child.key;
        return exiting.has(key2) ? child : React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
      });
      presentChildren.current = childrenToRender;
      if (exitBeforeEnter && childrenToRender.length > 1) {
        console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
      }
      return React5.createElement(React5.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
        return (0, import_react28.cloneElement)(child);
      }));
    };
  }
});

// ../../node_modules/framer-motion/dist/es/animation/animate.js
function animate2(from2, to2, transition) {
  if (transition === void 0) {
    transition = {};
  }
  var value = isMotionValue(from2) ? from2 : motionValue(from2);
  startAnimation("", value, to2, transition);
  return {
    stop: function() {
      return value.stop();
    }
  };
}
var init_animate = __esm({
  "../../node_modules/framer-motion/dist/es/animation/animate.js"() {
    init_value();
    init_is_motion_value();
    init_transitions();
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/crossfader.js
function createCrossfader() {
  var progress2 = motionValue(1);
  var options = {
    lead: void 0,
    follow: void 0,
    crossfadeOpacity: false,
    preserveFollowOpacity: false
  };
  var prevOptions = __assign({}, options);
  var leadState = {};
  var followState = {};
  var isActive = false;
  var finalCrossfadeFrame = null;
  var prevUpdate = 0;
  function startCrossfadeAnimation(target, transition) {
    var lead = options.lead, follow = options.follow;
    isActive = true;
    finalCrossfadeFrame = null;
    var hasUpdated = false;
    var onUpdate = function() {
      hasUpdated = true;
      lead && lead.scheduleRender();
      follow && follow.scheduleRender();
    };
    var onComplete = function() {
      isActive = false;
      finalCrossfadeFrame = getFrameData().timestamp;
    };
    transition = transition && getValueTransition(transition, "crossfade");
    return animate2(progress2, target, __assign(__assign({}, transition), { onUpdate, onComplete: function() {
      if (!hasUpdated) {
        progress2.set(target);
        es_default.read(onComplete);
      } else {
        onComplete();
      }
      onUpdate();
    } }));
  }
  function updateCrossfade() {
    var _a2, _b;
    var timestamp = getFrameData().timestamp;
    var lead = options.lead, follow = options.follow;
    if (timestamp === prevUpdate || !lead)
      return;
    prevUpdate = timestamp;
    var latestLeadValues = lead.getLatestValues();
    Object.assign(leadState, latestLeadValues);
    var latestFollowValues = follow ? follow.getLatestValues() : options.prevValues;
    Object.assign(followState, latestFollowValues);
    var p = progress2.get();
    var leadTargetOpacity = (_a2 = latestLeadValues.opacity) !== null && _a2 !== void 0 ? _a2 : 1;
    var followTargetOpacity = (_b = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b !== void 0 ? _b : 1;
    if (options.crossfadeOpacity && follow) {
      leadState.opacity = mix(follow.isVisible !== false ? 0 : followTargetOpacity, leadTargetOpacity, easeCrossfadeIn(p));
      followState.opacity = options.preserveFollowOpacity ? followTargetOpacity : mix(followTargetOpacity, 0, easeCrossfadeOut(p));
    } else if (!follow) {
      leadState.opacity = mix(followTargetOpacity, leadTargetOpacity, p);
    }
    mixValues(leadState, followState, latestLeadValues, latestFollowValues || {}, Boolean(follow), p);
  }
  return {
    isActive: function() {
      return leadState && (isActive || getFrameData().timestamp === finalCrossfadeFrame);
    },
    fromLead: function(transition) {
      return startCrossfadeAnimation(0, transition);
    },
    toLead: function(transition) {
      var initialProgress = 0;
      if (!options.prevValues && !options.follow) {
        initialProgress = 1;
      } else if (prevOptions.lead === options.follow && prevOptions.follow === options.lead) {
        initialProgress = 1 - progress2.get();
      }
      progress2.set(initialProgress);
      return startCrossfadeAnimation(1, transition);
    },
    reset: function() {
      return progress2.set(1);
    },
    stop: function() {
      return progress2.stop();
    },
    getCrossfadeState: function(element) {
      updateCrossfade();
      if (element === options.lead) {
        return leadState;
      } else if (element === options.follow) {
        return followState;
      }
    },
    setOptions: function(newOptions) {
      prevOptions = options;
      options = newOptions;
      leadState = {};
      followState = {};
    },
    getLatestValues: function() {
      return leadState;
    }
  };
}
function compress(min, max, easing2) {
  return function(p) {
    if (p < min)
      return 0;
    if (p > max)
      return 1;
    return easing2(progress(min, max, p));
  };
}
function mixValues(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {
  for (var i = 0; i < numBorders; i++) {
    var borderLabel = "border" + borders[i] + "Radius";
    var followRadius = getRadius(latestFollowValues, borderLabel);
    var leadRadius = getRadius(latestLeadValues, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    if (typeof followRadius === "number" && typeof leadRadius === "number") {
      var radius = Math.max(mix(followRadius, leadRadius, p), 0);
      leadState[borderLabel] = followState[borderLabel] = radius;
    }
  }
  if (latestFollowValues.rotate || latestLeadValues.rotate) {
    var rotate = mix(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);
    leadState.rotate = followState.rotate = rotate;
  }
  if (!hasFollowElement && latestLeadValues.backgroundColor && latestFollowValues.backgroundColor) {
    leadState.backgroundColor = followState.backgroundColor = mixColor(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);
  }
}
function getRadius(values3, radiusName) {
  var _a2;
  return (_a2 = values3[radiusName]) !== null && _a2 !== void 0 ? _a2 : values3.borderRadius;
}
var easeCrossfadeIn, easeCrossfadeOut, borders, numBorders;
var init_crossfader = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/crossfader.js"() {
    init_modules();
    init_es2();
    init_es3();
    init_animate();
    init_transitions();
    init_value();
    easeCrossfadeIn = compress(0, 0.5, circOut);
    easeCrossfadeOut = compress(0.5, 0.95, linear);
    borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
    numBorders = borders.length;
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/stack.js
function layoutStack() {
  var stack = new Set();
  var state = { leadIsExiting: false };
  var prevState = __assign({}, state);
  var prevValues;
  var prevViewportBox;
  var prevDragCursor;
  var crossfader = createCrossfader();
  var needsCrossfadeAnimation = false;
  function getFollowViewportBox() {
    return state.follow ? state.follow.prevViewportBox : prevViewportBox;
  }
  function getFollowLayout() {
    var _a2;
    return (_a2 = state.follow) === null || _a2 === void 0 ? void 0 : _a2.getLayoutState().layout;
  }
  return {
    add: function(element) {
      element.setCrossfader(crossfader);
      stack.add(element);
      if (prevDragCursor)
        element.prevDragCursor = prevDragCursor;
      if (!state.lead)
        state.lead = element;
    },
    remove: function(element) {
      stack.delete(element);
    },
    getLead: function() {
      return state.lead;
    },
    updateSnapshot: function() {
      if (!state.lead)
        return;
      prevValues = crossfader.isActive() ? crossfader.getLatestValues() : state.lead.getLatestValues();
      prevViewportBox = state.lead.prevViewportBox;
      var dragControls = elementDragControls.get(state.lead);
      if (dragControls && dragControls.isDragging) {
        prevDragCursor = dragControls.cursorProgress;
      }
    },
    clearSnapshot: function() {
      prevDragCursor = prevViewportBox = void 0;
    },
    updateLeadAndFollow: function() {
      var _a2;
      prevState = __assign({}, state);
      var lead;
      var follow;
      var order3 = Array.from(stack);
      for (var i = order3.length; i--; i >= 0) {
        var element = order3[i];
        if (lead)
          follow !== null && follow !== void 0 ? follow : follow = element;
        lead !== null && lead !== void 0 ? lead : lead = element;
        if (lead && follow)
          break;
      }
      state.lead = lead;
      state.follow = follow;
      state.leadIsExiting = ((_a2 = state.lead) === null || _a2 === void 0 ? void 0 : _a2.presence) === Presence.Exiting;
      crossfader.setOptions({
        lead,
        follow,
        prevValues,
        crossfadeOpacity: (follow === null || follow === void 0 ? void 0 : follow.isPresenceRoot) || (lead === null || lead === void 0 ? void 0 : lead.isPresenceRoot)
      });
      if (state.lead !== prevState.follow && (prevState.lead !== state.lead || prevState.leadIsExiting !== state.leadIsExiting)) {
        needsCrossfadeAnimation = true;
      }
    },
    animate: function(child, shouldCrossfade) {
      var _a2;
      if (shouldCrossfade === void 0) {
        shouldCrossfade = false;
      }
      if (child === state.lead) {
        if (shouldCrossfade) {
          child.pointTo(state.lead);
        } else {
          child.setVisibility(true);
        }
        var config2 = {};
        var prevParent = (_a2 = state.follow) === null || _a2 === void 0 ? void 0 : _a2.getProjectionParent();
        if (prevParent) {
          config2.prevParent = prevParent;
        }
        if (child.presence === Presence.Entering) {
          config2.originBox = getFollowViewportBox();
        } else if (child.presence === Presence.Exiting) {
          config2.targetBox = getFollowLayout();
        }
        if (needsCrossfadeAnimation) {
          needsCrossfadeAnimation = false;
          var transition = child.getDefaultTransition();
          child.presence === Presence.Entering ? crossfader.toLead(transition) : crossfader.fromLead(transition);
        }
        child.notifyLayoutReady(config2);
      } else {
        if (shouldCrossfade) {
          state.lead && child.pointTo(state.lead);
        } else {
          child.setVisibility(false);
        }
      }
    }
  };
}
var init_stack = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/stack.js"() {
    init_modules();
    init_types2();
    init_VisualElementDragControls();
    init_crossfader();
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/rotate.js
function resetRotate(child) {
  var hasRotate = false;
  var resetValues = {};
  for (var i = 0; i < transformAxes.length; i++) {
    var axis = transformAxes[i];
    var key = "rotate" + axis;
    if (!child.hasValue(key) || child.getStaticValue(key) === 0)
      continue;
    hasRotate = true;
    resetValues[key] = child.getStaticValue(key);
    child.setStaticValue(key, 0);
  }
  if (!hasRotate)
    return;
  child.syncRender();
  for (var key in resetValues) {
    child.setStaticValue(key, resetValues[key]);
  }
  child.scheduleRender();
}
var init_rotate = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/rotate.js"() {
    init_transform();
  }
});

// ../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js
var React6, AnimateSharedLayout;
var init_AnimateSharedLayout = __esm({
  "../../node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js"() {
    init_modules();
    React6 = __toModule(require_react());
    init_types2();
    init_stack();
    init_SharedLayoutContext();
    init_MotionContext();
    init_rotate();
    init_batcher();
    init_utils6();
    AnimateSharedLayout = function(_super) {
      __extends(AnimateSharedLayout2, _super);
      function AnimateSharedLayout2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.children = new Set();
        _this.stacks = new Map();
        _this.hasMounted = false;
        _this.updateScheduled = false;
        _this.renderScheduled = false;
        _this.syncContext = __assign(__assign({}, createBatcher()), { syncUpdate: function(force) {
          return _this.scheduleUpdate(force);
        }, forceUpdate: function() {
          _this.syncContext = __assign({}, _this.syncContext);
          _this.scheduleUpdate(true);
        }, register: function(child) {
          return _this.addChild(child);
        }, remove: function(child) {
          return _this.removeChild(child);
        } });
        return _this;
      }
      AnimateSharedLayout2.prototype.componentDidMount = function() {
        this.hasMounted = true;
      };
      AnimateSharedLayout2.prototype.componentDidUpdate = function() {
        this.startLayoutAnimation();
      };
      AnimateSharedLayout2.prototype.shouldComponentUpdate = function() {
        this.renderScheduled = true;
        return true;
      };
      AnimateSharedLayout2.prototype.startLayoutAnimation = function() {
        var _this = this;
        this.renderScheduled = this.updateScheduled = false;
        var type = this.props.type;
        this.children.forEach(function(child) {
          if (!child.isPresent) {
            child.presence = Presence.Exiting;
          } else if (child.presence !== Presence.Entering) {
            child.presence = child.presence === Presence.Exiting ? Presence.Entering : Presence.Present;
          }
        });
        this.updateStacks();
        var handler = {
          layoutReady: function(child) {
            if (child.getLayoutId() !== void 0) {
              var stack = _this.getStack(child);
              stack.animate(child, type === "crossfade");
            } else {
              child.notifyLayoutReady();
            }
          },
          parent: this.context.visualElement
        };
        this.children.forEach(function(child) {
          return _this.syncContext.add(child);
        });
        this.syncContext.flush(handler);
        this.stacks.forEach(function(stack) {
          return stack.clearSnapshot();
        });
      };
      AnimateSharedLayout2.prototype.updateStacks = function() {
        this.stacks.forEach(function(stack) {
          return stack.updateLeadAndFollow();
        });
      };
      AnimateSharedLayout2.prototype.scheduleUpdate = function(force) {
        if (force === void 0) {
          force = false;
        }
        if (!(force || !this.updateScheduled))
          return;
        this.updateScheduled = true;
        this.children.forEach(function(child) {
          resetRotate(child);
          if (child.shouldResetTransform())
            child.resetTransform();
        });
        this.children.forEach(snapshotViewportBox);
        this.stacks.forEach(function(stack) {
          return stack.updateSnapshot();
        });
        if (force || !this.renderScheduled) {
          this.renderScheduled = true;
          this.forceUpdate();
        }
      };
      AnimateSharedLayout2.prototype.addChild = function(child) {
        this.children.add(child);
        this.addToStack(child);
        child.presence = this.hasMounted ? Presence.Entering : Presence.Present;
      };
      AnimateSharedLayout2.prototype.removeChild = function(child) {
        this.scheduleUpdate();
        this.children.delete(child);
        this.removeFromStack(child);
      };
      AnimateSharedLayout2.prototype.addToStack = function(child) {
        var stack = this.getStack(child);
        stack === null || stack === void 0 ? void 0 : stack.add(child);
      };
      AnimateSharedLayout2.prototype.removeFromStack = function(child) {
        var stack = this.getStack(child);
        stack === null || stack === void 0 ? void 0 : stack.remove(child);
      };
      AnimateSharedLayout2.prototype.getStack = function(child) {
        var id = child.getLayoutId();
        if (id === void 0)
          return;
        !this.stacks.has(id) && this.stacks.set(id, layoutStack());
        return this.stacks.get(id);
      };
      AnimateSharedLayout2.prototype.render = function() {
        return React6.createElement(SharedLayoutContext.Provider, { value: this.syncContext }, this.props.children);
      };
      AnimateSharedLayout2.contextType = MotionContext;
      return AnimateSharedLayout2;
    }(React6.Component);
  }
});

// ../../node_modules/framer-motion/dist/es/components/MotionConfig/index.js
function MotionConfig(_a2) {
  var children = _a2.children, config2 = __rest(_a2, ["children"]);
  config2 = __assign(__assign({}, (0, import_react29.useContext)(MotionConfigContext)), config2);
  config2.isStatic = useConstant(function() {
    return config2.isStatic;
  });
  var transitionDependency = typeof config2.transition === "object" ? config2.transition.toString() : "";
  var context = (0, import_react29.useMemo)(function() {
    return config2;
  }, [
    transitionDependency,
    config2.transformPagePoint
  ]);
  return React7.createElement(MotionConfigContext.Provider, { value: context }, children);
}
var React7, import_react29;
var init_MotionConfig = __esm({
  "../../node_modules/framer-motion/dist/es/components/MotionConfig/index.js"() {
    init_modules();
    React7 = __toModule(require_react());
    import_react29 = __toModule(require_react());
    init_MotionConfigContext();
    init_use_constant();
  }
});

// ../../node_modules/framer-motion/dist/es/components/LazyMotion/index.js
function LazyMotion(_a2) {
  var children = _a2.children, features = _a2.features, _b = _a2.strict, strict = _b === void 0 ? false : _b;
  var _c = __read((0, import_react30.useState)(!isLazyBundle(features)), 2), setIsLoaded = _c[1];
  var loadedRenderer = (0, import_react30.useRef)(void 0);
  if (!isLazyBundle(features)) {
    var renderer = features.renderer, loadedFeatures = __rest(features, ["renderer"]);
    loadedRenderer.current = renderer;
    loadFeatures(loadedFeatures);
  }
  (0, import_react30.useEffect)(function() {
    if (isLazyBundle(features)) {
      features().then(function(_a3) {
        var renderer2 = _a3.renderer, loadedFeatures2 = __rest(_a3, ["renderer"]);
        loadFeatures(loadedFeatures2);
        loadedRenderer.current = renderer2;
        setIsLoaded(true);
      });
    }
  }, []);
  return React8.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children);
}
function isLazyBundle(features) {
  return typeof features === "function";
}
var React8, import_react30;
var init_LazyMotion = __esm({
  "../../node_modules/framer-motion/dist/es/components/LazyMotion/index.js"() {
    init_modules();
    React8 = __toModule(require_react());
    import_react30 = __toModule(require_react());
    init_LazyContext();
    init_definitions();
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/features-animation.js
var domAnimation;
var init_features_animation = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/features-animation.js"() {
    init_modules();
    init_animations2();
    init_gestures();
    init_create_visual_element();
    domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);
  }
});

// ../../node_modules/framer-motion/dist/es/render/dom/features-max.js
var domMax;
var init_features_max = __esm({
  "../../node_modules/framer-motion/dist/es/render/dom/features-max.js"() {
    init_modules();
    init_drag();
    init_layout();
    init_features_animation();
    domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-motion-value.js
function useMotionValue(initial) {
  var value = useConstant(function() {
    return motionValue(initial);
  });
  var isStatic = (0, import_react31.useContext)(MotionConfigContext).isStatic;
  if (isStatic) {
    var _a2 = __read((0, import_react31.useState)(initial), 2), setLatest_1 = _a2[1];
    (0, import_react31.useEffect)(function() {
      return value.onChange(setLatest_1);
    }, []);
  }
  return value;
}
var import_react31;
var init_use_motion_value = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-motion-value.js"() {
    init_modules();
    import_react31 = __toModule(require_react());
    init_value();
    init_MotionConfigContext();
    init_use_constant();
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-on-change.js
function useOnChange(value, callback) {
  (0, import_react32.useEffect)(function() {
    if (isMotionValue(value))
      return value.onChange(callback);
  }, [callback]);
}
function useMultiOnChange(values3, handler) {
  (0, import_react32.useEffect)(function() {
    var subscriptions = values3.map(function(value) {
      return value.onChange(handler);
    });
    return function() {
      return subscriptions.forEach(function(unsubscribe) {
        return unsubscribe();
      });
    };
  });
}
var import_react32;
var init_use_on_change = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-on-change.js"() {
    import_react32 = __toModule(require_react());
    init_is_motion_value();
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-combine-values.js
function useCombineMotionValues(values3, combineValues) {
  var value = useMotionValue(combineValues());
  var updateValue = function() {
    return value.set(combineValues());
  };
  updateValue();
  useMultiOnChange(values3, function() {
    return es_default.update(updateValue, false, true);
  });
  return value;
}
var init_use_combine_values = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-combine-values.js"() {
    init_use_motion_value();
    init_use_on_change();
    init_es2();
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-motion-template.js
function useMotionTemplate(fragments) {
  var values3 = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values3[_i - 1] = arguments[_i];
  }
  var numFragments = fragments.length;
  function buildValue() {
    var output = "";
    for (var i = 0; i < numFragments; i++) {
      output += fragments[i];
      var value = values3[i];
      if (value)
        output += values3[i].get();
    }
    return output;
  }
  return useCombineMotionValues(values3, buildValue);
}
var init_use_motion_template = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-motion-template.js"() {
    init_use_combine_values();
  }
});

// ../../node_modules/framer-motion/dist/es/utils/transform.js
function transform() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var useImmediate = !Array.isArray(args[0]);
  var argOffset = useImmediate ? 0 : -1;
  var inputValue = args[0 + argOffset];
  var inputRange = args[1 + argOffset];
  var outputRange = args[2 + argOffset];
  var options = args[3 + argOffset];
  var interpolator = interpolate(inputRange, outputRange, __assign({ mixer: getMixer2(outputRange[0]) }, options));
  return useImmediate ? interpolator(inputValue) : interpolator;
}
var isCustomValueType, getMixer2;
var init_transform2 = __esm({
  "../../node_modules/framer-motion/dist/es/utils/transform.js"() {
    init_modules();
    init_es3();
    isCustomValueType = function(v) {
      return typeof v === "object" && v.mix;
    };
    getMixer2 = function(v) {
      return isCustomValueType(v) ? v.mix : void 0;
    };
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-transform.js
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
  var transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], function(_a2) {
    var _b = __read(_a2, 1), latest = _b[0];
    return transformer(latest);
  });
}
function useListTransform(values3, transformer) {
  var latest = useConstant(function() {
    return [];
  });
  return useCombineMotionValues(values3, function() {
    latest.length = 0;
    var numValues = values3.length;
    for (var i = 0; i < numValues; i++) {
      latest[i] = values3[i].get();
    }
    return transformer(latest);
  });
}
var init_use_transform = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-transform.js"() {
    init_modules();
    init_transform2();
    init_use_combine_values();
    init_use_constant();
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-spring.js
function useSpring(source, config2) {
  if (config2 === void 0) {
    config2 = {};
  }
  var isStatic = (0, import_react33.useContext)(MotionConfigContext).isStatic;
  var activeSpringAnimation = (0, import_react33.useRef)(null);
  var value = useMotionValue(isMotionValue(source) ? source.get() : source);
  (0, import_react33.useMemo)(function() {
    return value.attach(function(v, set) {
      if (isStatic)
        return set(v);
      if (activeSpringAnimation.current) {
        activeSpringAnimation.current.stop();
      }
      activeSpringAnimation.current = animate(__assign(__assign({ from: value.get(), to: v, velocity: value.getVelocity() }, config2), { onUpdate: set }));
      return value.get();
    });
  }, Object.values(config2));
  useOnChange(source, function(v) {
    return value.set(parseFloat(v));
  });
  return value;
}
var import_react33;
var init_use_spring = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-spring.js"() {
    init_modules();
    import_react33 = __toModule(require_react());
    init_es3();
    init_is_motion_value();
    init_use_motion_value();
    init_use_on_change();
    init_MotionConfigContext();
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-velocity.js
function useVelocity(value) {
  var velocity = useMotionValue(value.getVelocity());
  (0, import_react34.useEffect)(function() {
    return value.velocityUpdateSubscribers.add(function(newVelocity) {
      velocity.set(newVelocity);
    });
  }, [value]);
  return velocity;
}
var import_react34;
var init_use_velocity = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-velocity.js"() {
    import_react34 = __toModule(require_react());
    init_use_motion_value();
  }
});

// ../../node_modules/framer-motion/dist/es/value/scroll/utils.js
function createScrollMotionValues() {
  return {
    scrollX: motionValue(0),
    scrollY: motionValue(0),
    scrollXProgress: motionValue(0),
    scrollYProgress: motionValue(0)
  };
}
function setProgress(offset, maxOffset, value) {
  value.set(!offset || !maxOffset ? 0 : offset / maxOffset);
}
function createScrollUpdater(values3, getOffsets) {
  var update = function() {
    var _a2 = getOffsets(), xOffset = _a2.xOffset, yOffset = _a2.yOffset, xMaxOffset = _a2.xMaxOffset, yMaxOffset = _a2.yMaxOffset;
    values3.scrollX.set(xOffset);
    values3.scrollY.set(yOffset);
    setProgress(xOffset, xMaxOffset, values3.scrollXProgress);
    setProgress(yOffset, yMaxOffset, values3.scrollYProgress);
  };
  update();
  return update;
}
var init_utils8 = __esm({
  "../../node_modules/framer-motion/dist/es/value/scroll/utils.js"() {
    init_value();
  }
});

// ../../node_modules/framer-motion/dist/es/value/scroll/use-element-scroll.js
function useElementScroll(ref) {
  var values3 = useConstant(createScrollMotionValues);
  useIsomorphicLayoutEffect(function() {
    var element = ref.current;
    invariant(!!element, "ref provided to useScroll must be passed into a HTML element.");
    if (!element)
      return;
    var updateScrollValues = createScrollUpdater(values3, getElementScrollOffsets(element));
    var scrollListener = addDomEvent(element, "scroll", updateScrollValues, { passive: true });
    var resizeListener = addDomEvent(element, "resize", updateScrollValues);
    return function() {
      scrollListener && scrollListener();
      resizeListener && resizeListener();
    };
  }, []);
  return values3;
}
var getElementScrollOffsets;
var init_use_element_scroll = __esm({
  "../../node_modules/framer-motion/dist/es/value/scroll/use-element-scroll.js"() {
    init_use_constant();
    init_utils8();
    init_use_dom_event();
    init_use_isomorphic_effect();
    init_hey_listen_es();
    getElementScrollOffsets = function(element) {
      return function() {
        return {
          xOffset: element.scrollLeft,
          yOffset: element.scrollTop,
          xMaxOffset: element.scrollWidth - element.offsetWidth,
          yMaxOffset: element.scrollHeight - element.offsetHeight
        };
      };
    };
  }
});

// ../../node_modules/framer-motion/dist/es/value/scroll/use-viewport-scroll.js
function getViewportScrollOffsets() {
  return {
    xOffset: window.pageXOffset,
    yOffset: window.pageYOffset,
    xMaxOffset: document.body.clientWidth - window.innerWidth,
    yMaxOffset: document.body.clientHeight - window.innerHeight
  };
}
function addEventListeners() {
  hasListeners = true;
  if (typeof window === "undefined")
    return;
  var updateScrollValues = createScrollUpdater(viewportScrollValues, getViewportScrollOffsets);
  addDomEvent(window, "scroll", updateScrollValues, { passive: true });
  addDomEvent(window, "resize", updateScrollValues);
}
function useViewportScroll() {
  if (!viewportScrollValues) {
    viewportScrollValues = createScrollMotionValues();
  }
  useIsomorphicLayoutEffect(function() {
    !hasListeners && addEventListeners();
  }, []);
  return viewportScrollValues;
}
var viewportScrollValues, hasListeners;
var init_use_viewport_scroll = __esm({
  "../../node_modules/framer-motion/dist/es/value/scroll/use-viewport-scroll.js"() {
    init_utils8();
    init_use_dom_event();
    init_use_isomorphic_effect();
    hasListeners = false;
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-reduced-motion.js
function initPrefersReducedMotion() {
  prefersReducedMotion = motionValue(null);
  if (typeof window === "undefined")
    return;
  if (window.matchMedia) {
    var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
    var setReducedMotionPreferences = function() {
      return prefersReducedMotion.set(motionMediaQuery_1.matches);
    };
    motionMediaQuery_1.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.set(false);
  }
}
function useReducedMotion() {
  !prefersReducedMotion && initPrefersReducedMotion();
  var _a2 = __read((0, import_react35.useState)(prefersReducedMotion.get()), 2), shouldReduceMotion = _a2[0], setShouldReduceMotion = _a2[1];
  useOnChange(prefersReducedMotion, setShouldReduceMotion);
  return shouldReduceMotion;
}
var import_react35, prefersReducedMotion;
var init_use_reduced_motion = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-reduced-motion.js"() {
    init_modules();
    import_react35 = __toModule(require_react());
    init_value();
    init_use_on_change();
  }
});

// ../../node_modules/framer-motion/dist/es/animation/animation-controls.js
function animationControls() {
  var hasMounted = false;
  var pendingAnimations = [];
  var subscribers = new Set();
  var controls = {
    subscribe: function(visualElement2) {
      subscribers.add(visualElement2);
      return function() {
        return void subscribers.delete(visualElement2);
      };
    },
    start: function(definition, transitionOverride) {
      if (hasMounted) {
        var animations_1 = [];
        subscribers.forEach(function(visualElement2) {
          animations_1.push(animateVisualElement(visualElement2, definition, {
            transitionOverride
          }));
        });
        return Promise.all(animations_1);
      } else {
        return new Promise(function(resolve) {
          pendingAnimations.push({
            animation: [definition, transitionOverride],
            resolve
          });
        });
      }
    },
    set: function(definition) {
      invariant(hasMounted, "controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.");
      return subscribers.forEach(function(visualElement2) {
        setValues(visualElement2, definition);
      });
    },
    stop: function() {
      subscribers.forEach(function(visualElement2) {
        stopAnimation(visualElement2);
      });
    },
    mount: function() {
      hasMounted = true;
      pendingAnimations.forEach(function(_a2) {
        var animation = _a2.animation, resolve = _a2.resolve;
        controls.start.apply(controls, __spreadArray([], __read(animation))).then(resolve);
      });
      return function() {
        hasMounted = false;
        controls.stop();
      };
    }
  };
  return controls;
}
var init_animation_controls = __esm({
  "../../node_modules/framer-motion/dist/es/animation/animation-controls.js"() {
    init_modules();
    init_hey_listen_es();
    init_animation();
    init_setters();
  }
});

// ../../node_modules/framer-motion/dist/es/animation/use-animation.js
function useAnimation() {
  var controls = useConstant(animationControls);
  (0, import_react36.useEffect)(controls.mount, []);
  return controls;
}
var import_react36;
var init_use_animation = __esm({
  "../../node_modules/framer-motion/dist/es/animation/use-animation.js"() {
    init_animation_controls();
    import_react36 = __toModule(require_react());
    init_use_constant();
  }
});

// ../../node_modules/framer-motion/dist/es/utils/use-cycle.js
function useCycle() {
  var items = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    items[_i] = arguments[_i];
  }
  var index = (0, import_react37.useRef)(0);
  var _a2 = __read((0, import_react37.useState)(items[index.current]), 2), item = _a2[0], setItem = _a2[1];
  return [
    item,
    function(next2) {
      index.current = typeof next2 !== "number" ? wrap(0, items.length, index.current + 1) : next2;
      setItem(items[index.current]);
    }
  ];
}
var import_react37;
var init_use_cycle = __esm({
  "../../node_modules/framer-motion/dist/es/utils/use-cycle.js"() {
    init_modules();
    import_react37 = __toModule(require_react());
    init_es3();
  }
});

// ../../node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.js
function useDragControls() {
  return useConstant(createDragControls);
}
var DragControls, createDragControls;
var init_use_drag_controls = __esm({
  "../../node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.js"() {
    init_batch_layout();
    init_use_constant();
    DragControls = function() {
      function DragControls2() {
        this.componentControls = new Set();
      }
      DragControls2.prototype.subscribe = function(controls) {
        var _this = this;
        this.componentControls.add(controls);
        return function() {
          return _this.componentControls.delete(controls);
        };
      };
      DragControls2.prototype.start = function(event, options) {
        this.componentControls.forEach(function(controls) {
          controls.start(event.nativeEvent || event, options);
        });
      };
      DragControls2.prototype.updateConstraints = function(flush) {
        if (flush === void 0) {
          flush = true;
        }
        this.componentControls.forEach(function(controls) {
          controls.updateConstraints();
        });
        flush && flushLayout();
      };
      return DragControls2;
    }();
    createDragControls = function() {
      return new DragControls();
    };
  }
});

// ../../node_modules/framer-motion/dist/es/animation/use-animated-state.js
function useAnimatedState(initialState) {
  var _a2 = __read((0, import_react38.useState)(initialState), 2), animationState = _a2[0], setAnimationState = _a2[1];
  var visualState = useVisualState({}, false);
  var element = useConstant(function() {
    return stateVisualElement({ props: {}, visualState }, { initialState });
  });
  (0, import_react38.useEffect)(function() {
    element.mount({});
    return element.unmount();
  }, []);
  (0, import_react38.useEffect)(function() {
    element.setProps({
      onUpdate: function(v) {
        return setAnimationState(__assign({}, v));
      }
    });
  });
  var startAnimation2 = useConstant(function() {
    return function(animationDefinition) {
      return animateVisualElement(element, animationDefinition);
    };
  });
  return [animationState, startAnimation2];
}
var import_react38, createObject, stateVisualElement, useVisualState;
var init_use_animated_state = __esm({
  "../../node_modules/framer-motion/dist/es/animation/use-animated-state.js"() {
    init_modules();
    import_react38 = __toModule(require_react());
    init_use_constant();
    init_setters();
    init_render3();
    init_geometry();
    init_animation();
    init_use_visual_state();
    createObject = function() {
      return {};
    };
    stateVisualElement = visualElement({
      build: function() {
      },
      measureViewportBox: axisBox,
      resetTransform: function() {
      },
      restoreTransform: function() {
      },
      removeValueFromRenderState: function() {
      },
      render: function() {
      },
      scrapeMotionValuesFromProps: createObject,
      readValueFromInstance: function(_state, key, options) {
        return options.initialState[key] || 0;
      },
      makeTargetAnimatable: function(element, _a2) {
        var transition = _a2.transition, transitionEnd = _a2.transitionEnd, target = __rest(_a2, ["transition", "transitionEnd"]);
        var origin = getOrigin(target, transition || {}, element);
        checkTargetForNewValues(element, target, origin);
        return __assign({ transition, transitionEnd }, target);
      }
    });
    useVisualState = makeUseVisualState({
      scrapeMotionValuesFromProps: createObject,
      createRenderState: createObject
    });
  }
});

// ../../node_modules/framer-motion/dist/es/value/use-inverted-scale.js
function useInvertedScale(scale2) {
  var parentScaleX = useMotionValue(1);
  var parentScaleY = useMotionValue(1);
  var visualElement2 = useVisualElementContext();
  invariant(!!(scale2 || visualElement2), "If no scale values are provided, useInvertedScale must be used within a child of another motion component.");
  warning(hasWarned, "useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.");
  hasWarned = true;
  if (scale2) {
    parentScaleX = scale2.scaleX || parentScaleX;
    parentScaleY = scale2.scaleY || parentScaleY;
  } else if (visualElement2) {
    parentScaleX = visualElement2.getValue("scaleX", 1);
    parentScaleY = visualElement2.getValue("scaleY", 1);
  }
  var scaleX = useTransform(parentScaleX, invertScale);
  var scaleY = useTransform(parentScaleY, invertScale);
  return { scaleX, scaleY };
}
var maxScale, invertScale, hasWarned;
var init_use_inverted_scale = __esm({
  "../../node_modules/framer-motion/dist/es/value/use-inverted-scale.js"() {
    init_use_transform();
    init_hey_listen_es();
    init_use_motion_value();
    init_MotionContext();
    maxScale = 1e5;
    invertScale = function(scale2) {
      return scale2 > 1e-3 ? 1 / scale2 : maxScale;
    };
    hasWarned = false;
  }
});

// ../../node_modules/framer-motion/dist/es/index.js
var es_exports = {};
__export(es_exports, {
  AnimatePresence: () => AnimatePresence,
  AnimateSharedLayout: () => AnimateSharedLayout,
  DragControls: () => DragControls,
  FlatTree: () => FlatTree,
  FramerTreeLayoutContext: () => FramerTreeLayoutContext,
  LayoutGroupContext: () => LayoutGroupContext,
  LazyMotion: () => LazyMotion,
  MotionConfig: () => MotionConfig,
  MotionConfigContext: () => MotionConfigContext,
  MotionValue: () => MotionValue,
  PresenceContext: () => PresenceContext,
  SharedLayoutContext: () => SharedLayoutContext,
  VisibilityAction: () => VisibilityAction,
  addScaleCorrection: () => addScaleCorrection,
  animate: () => animate2,
  animateVisualElement: () => animateVisualElement,
  animationControls: () => animationControls,
  batchLayout: () => batchLayout,
  createBatcher: () => createBatcher,
  createCrossfader: () => createCrossfader,
  createDomMotionComponent: () => createDomMotionComponent,
  createMotionComponent: () => createMotionComponent,
  domAnimation: () => domAnimation,
  domMax: () => domMax,
  flushLayout: () => flushLayout,
  isValidMotionProp: () => isValidMotionProp,
  m: () => m,
  motion: () => motion,
  motionValue: () => motionValue,
  resolveMotionValue: () => resolveMotionValue,
  snapshotViewportBox: () => snapshotViewportBox,
  transform: () => transform,
  useAnimation: () => useAnimation,
  useCycle: () => useCycle,
  useDeprecatedAnimatedState: () => useAnimatedState,
  useDeprecatedInvertedScale: () => useInvertedScale,
  useDomEvent: () => useDomEvent,
  useDragControls: () => useDragControls,
  useElementScroll: () => useElementScroll,
  useIsPresent: () => useIsPresent,
  useMotionTemplate: () => useMotionTemplate,
  useMotionValue: () => useMotionValue,
  usePresence: () => usePresence,
  useReducedMotion: () => useReducedMotion,
  useSpring: () => useSpring,
  useTransform: () => useTransform,
  useVelocity: () => useVelocity,
  useViewportScroll: () => useViewportScroll,
  visualElement: () => visualElement
});
var init_es4 = __esm({
  "../../node_modules/framer-motion/dist/es/index.js"() {
    init_motion2();
    init_motion_minimal();
    init_AnimatePresence();
    init_AnimateSharedLayout();
    init_MotionConfig();
    init_LazyMotion();
    init_features_animation();
    init_features_max();
    init_use_motion_value();
    init_use_motion_template();
    init_value();
    init_resolve_motion_value();
    init_use_transform();
    init_use_spring();
    init_use_velocity();
    init_use_element_scroll();
    init_use_viewport_scroll();
    init_use_reduced_motion();
    init_animation_controls();
    init_use_animation();
    init_animate();
    init_animation();
    init_use_cycle();
    init_transform2();
    init_valid_prop();
    init_use_presence();
    init_use_drag_controls();
    init_use_dom_event();
    init_motion();
    init_scale_correction();
    init_utils6();
    init_crossfader();
    init_render3();
    init_batch_layout();
    init_MotionConfigContext();
    init_PresenceContext();
    init_LayoutGroupContext();
    init_types2();
    init_SharedLayoutContext();
    init_batcher();
    init_flat_tree();
    init_use_animated_state();
    init_use_inverted_scale();
  }
});

// ../../node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "../../node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports2.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          requestHostCallback = function(cb2) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb2);
            } else {
              _callback = cb2;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb2, ms) {
            _timeoutID = setTimeout(cb2, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          exports2.unstable_shouldYield = function() {
            return false;
          };
          requestPaint = exports2.unstable_forceFrameRate = function() {
          };
        } else {
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            exports2.unstable_shouldYield = function() {
              return exports2.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports2.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port2.postMessage(null);
                }
              } catch (error) {
                port2.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port2 = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port2.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node2) {
          var index = heap.length;
          heap.push(node2);
          siftUp(heap, node2, index);
        }
        function peek2(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last3 = heap.pop();
            if (last3 !== first) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node2, i) {
          var index = i;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node2) > 0) {
              heap[parentIndex] = node2;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node2, i) {
          var index = i;
          var length2 = heap.length;
          while (index < length2) {
            var leftIndex = (index + 1) * 2 - 1;
            var left2 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right2 = heap[rightIndex];
            if (left2 !== void 0 && compare(left2, node2) < 0) {
              if (right2 !== void 0 && compare(right2, left2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                heap[index] = left2;
                heap[leftIndex] = node2;
                index = leftIndex;
              }
            } else if (right2 !== void 0 && compare(right2, node2) < 0) {
              heap[index] = right2;
              heap[rightIndex] = node2;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek2(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek2(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek2(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek2(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports2.unstable_shouldYield())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek2(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek2(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }
          var timeout2;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout2 = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout2 = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout2 = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout2;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek2(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  }
});

// ../../node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "../../node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// ../../node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS({
  "../../node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports2.__interactionsRef = null;
        exports2.__subscriberRef = null;
        {
          exports2.__interactionsRef = {
            current: new Set()
          };
          exports2.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports2.__interactionsRef.current;
          exports2.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports2.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports2.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports2.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports2.__interactionsRef.current = interactions;
          var subscriber = exports2.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports2.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports2.__interactionsRef.current;
          var subscriber = exports2.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = wrappedInteractions;
            subscriber = exports2.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports2.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports2.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports2.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports2.unstable_clear = unstable_clear;
        exports2.unstable_getCurrent = unstable_getCurrent;
        exports2.unstable_getThreadID = unstable_getThreadID;
        exports2.unstable_subscribe = unstable_subscribe;
        exports2.unstable_trace = unstable_trace;
        exports2.unstable_unsubscribe = unstable_unsubscribe;
        exports2.unstable_wrap = unstable_wrap;
      })();
    }
  }
});

// ../../node_modules/scheduler/tracing.js
var require_tracing = __commonJS({
  "../../node_modules/scheduler/tracing.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_tracing_development();
    }
  }
});

// ../../node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "../../node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React50 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var ReactSharedInternals = React50.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format2) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format2, args);
          }
        }
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React50) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment8 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef2 = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var allNativeEvents = new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties2.hasOwnProperty(name) ? properties2[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties2 = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize2 = function(token2) {
          return token2[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node2, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node2[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node2.hasAttribute(attributeName)) {
                  var value = node2.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node2.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node2.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node2.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node2, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }
            if (!node2.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node2.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node2, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node2.removeAttribute(_attributeName);
              } else {
                node2.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node2[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node2[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node2.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node2.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c3 = controlLines.length - 1;
              while (s >= 1 && c3 >= 0 && sampleLines[s] !== controlLines[c3]) {
                c3--;
              }
              for (; s >= 1 && c3 >= 0; s--, c3--) {
                if (sampleLines[s] !== controlLines[c3]) {
                  if (s !== 1 || c3 !== 1) {
                    do {
                      s--;
                      c3--;
                      if (c3 < 0 || sampleLines[s] !== controlLines[c3]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c3 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef2:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node2 = workInProgress2;
            do {
              info += describeFiber(node2);
              node2 = node2.return;
            } while (node2);
            return info;
          } catch (x3) {
            return "\nError generating stack: " + x3.message + "\n" + x3.stack;
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node2) {
          return node2._valueTracker;
        }
        function detachTracker(node2) {
          node2._valueTracker = null;
        }
        function getValueFromNode(node2) {
          var value = "";
          if (!node2) {
            return value;
          }
          if (isCheckable(node2)) {
            value = node2.checked ? "true" : "false";
          } else {
            value = node2.value;
          }
          return value;
        }
        function trackValueOnNode(node2) {
          var valueField = isCheckable(node2) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
          var currentValue = "" + node2[valueField];
          if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node2, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node2, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node2);
              delete node2[valueField];
            }
          };
          return tracker;
        }
        function track(node2) {
          if (getTracker(node2)) {
            return;
          }
          node2._valueTracker = trackValueOnNode(node2);
        }
        function updateValueIfChanged(node2) {
          if (!node2) {
            return false;
          }
          var tracker = getTracker(node2);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node2);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node2 = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node2._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node2 = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node2._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node2 = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node2, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node2 = element;
          {
            var controlled = isControlled(props);
            if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node2.value === "" || node2.value != value) {
                node2.value = toString(value);
              }
            } else if (node2.value !== toString(value)) {
              node2.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node2.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node2, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node2.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node2 = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node2._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node2.value) {
                  node2.value = initialValue;
                }
              }
            }
            {
              node2.defaultValue = initialValue;
            }
          }
          var name = node2.name;
          if (name !== "") {
            node2.name = "";
          }
          {
            node2.defaultChecked = !node2.defaultChecked;
            node2.defaultChecked = !!node2._wrapperState.initialChecked;
          }
          if (name !== "") {
            node2.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node2 = element;
          updateWrapper(node2, props);
          updateNamedCousins(node2, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node2, type, value) {
          if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
            if (value == null) {
              node2.defaultValue = toString(node2._wrapperState.initialValue);
            } else if (node2.defaultValue !== toString(value)) {
              node2.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React50.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React50.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node2, multiple, propValue, setDefaultSelected) {
          var options2 = node2.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node2 = element;
          {
            checkSelectPropTypes(props);
          }
          node2._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node2 = element;
          node2.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node2 = element;
          var wasMultiple = node2._wrapperState.wasMultiple;
          node2._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node2 = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node2 = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node2._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node2 = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node2._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node2 = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node2.value) {
              node2.value = newValue;
            }
            if (props.defaultValue == null && node2.defaultValue !== newValue) {
              node2.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node2.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node2 = element;
          var textContent = node2.textContent;
          if (textContent === node2._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node2.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
          if (node2.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node2)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node2.firstChild) {
                node2.removeChild(node2.firstChild);
              }
              while (svgNode.firstChild) {
                node2.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node2.innerHTML = html2;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node2, text) {
          if (text) {
            var firstChild = node2.firstChild;
            if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node2.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key) {
          return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty3) {
          var isEmpty3 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty3) {
            return "";
          }
          if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_4, character2) {
              return character2.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles2) {
          {
            var serialized = "";
            var delimiter2 = "";
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles2[styleName];
              if (styleValue != null) {
                var isCustomProperty3 = styleName.indexOf("--") === 0;
                serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                delimiter2 = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node2, styles2) {
          var style4 = node2.style;
          for (var styleName in styles2) {
            if (!styles2.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty3 = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty3) {
                warnValidStyle$1(styleName, styles2[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty3);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty3) {
              style4.setProperty(styleName, styleValue);
            } else {
              style4[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles2) {
          var expanded = {};
          for (var key in styles2) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a2, b2, c3, d) {
          return fn(a2, b2, c3, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a2, b2) {
          if (isBatchingEventUpdates) {
            return fn(a2, b2);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a2, b2);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a2, b2, c3, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a2, b2, c3, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a2, b2, c3, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c3, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a2, b2, c3, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c3, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node2 = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node2;
            do {
              node2 = nextNode;
              if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node2.return;
              }
              nextNode = node2.return;
            } while (nextNode);
          } else {
            while (node2.return) {
              node2 = node2.return;
            }
          }
          if (node2.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a2.alternate === b2)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a2.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node2 = currentParent;
          while (true) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            } else if (node2.child) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === currentParent) {
              return null;
            }
            while (!node2.sibling) {
              if (!node2.return || node2.return === currentParent) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node2 = currentParent;
          while (true) {
            if (node2.tag === HostComponent || node2.tag === HostText || enableFundamentalAPI) {
              return node2;
            } else if (node2.child && node2.tag !== HostPortal) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === currentParent) {
              return null;
            }
            while (!node2.sibling) {
              if (!node2.return || node2.return === currentParent) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node2 = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node2 !== null) {
            if (node2 === parentFiber || node2 === parentFiberAlternate) {
              return true;
            }
            node2 = node2.return;
          }
          return false;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style3 = {};
        if (canUseDOM) {
          style3 = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [
          "cancel",
          "cancel",
          "click",
          "click",
          "close",
          "close",
          "contextmenu",
          "contextMenu",
          "copy",
          "copy",
          "cut",
          "cut",
          "auxclick",
          "auxClick",
          "dblclick",
          "doubleClick",
          "dragend",
          "dragEnd",
          "dragstart",
          "dragStart",
          "drop",
          "drop",
          "focusin",
          "focus",
          "focusout",
          "blur",
          "input",
          "input",
          "invalid",
          "invalid",
          "keydown",
          "keyDown",
          "keypress",
          "keyPress",
          "keyup",
          "keyUp",
          "mousedown",
          "mouseDown",
          "mouseup",
          "mouseUp",
          "paste",
          "paste",
          "pause",
          "pause",
          "play",
          "play",
          "pointercancel",
          "pointerCancel",
          "pointerdown",
          "pointerDown",
          "pointerup",
          "pointerUp",
          "ratechange",
          "rateChange",
          "reset",
          "reset",
          "seeked",
          "seeked",
          "submit",
          "submit",
          "touchcancel",
          "touchCancel",
          "touchend",
          "touchEnd",
          "touchstart",
          "touchStart",
          "volumechange",
          "volumeChange"
        ];
        var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
        var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
        var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i += 2) {
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i++) {
            eventPriorities.set(eventTypes[i], priority);
          }
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default: {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root2.expiredLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }
              return _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }
              return _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }
              return _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index2 = 31 - clz32(lanes);
          return index2 < 0 ? NoLanes : 1 << index2;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b2) {
          return (a2 & b2) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a2, b2) {
          return a2 | b2;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b2) {
          return a2 !== NoLane && a2 < b2 ? a2 : b2;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root2.suspendedLanes &= higherPriorityLanes;
          root2.pingedLanes &= higherPriorityLanes;
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root2) {
          root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root2, updateLane) {
          root2.mutableReadLanes |= updateLane & root2.pendingLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = 0;
          root2.pingedLanes = 0;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log2 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log2(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var allowReplay = true;
          {
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }
          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            return;
          }
          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
          return null;
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node2) {
          var state = node2._wrapperState;
          if (!state || !state.controlled || node2.type !== "number") {
            return;
          }
          {
            setDefaultValue(node2, "number", node2.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from2;
          var to2;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from2 = targetInst;
            to2 = _related ? getClosestInstanceFromNode(_related) : null;
            if (to2 !== null) {
              var nearestMounted = getNearestMountedFiber(to2);
              if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                to2 = null;
              }
            }
          } else {
            from2 = null;
            to2 = targetInst;
          }
          if (from2 === to2) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from2 == null ? win : getNodeFromInstance(from2);
          var toNode = to2 == null ? win : getNodeFromInstance(to2);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to2);
        }
        function is(x3, y) {
          return x3 === y && (x3 !== 0 || 1 / x3 === 1 / y) || x3 !== x3 && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node2) {
          while (node2 && node2.firstChild) {
            node2 = node2.firstChild;
          }
          return node2;
        }
        function getSiblingNode(node2) {
          while (node2) {
            if (node2.nextSibling) {
              return node2.nextSibling;
            }
            node2 = node2.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node2 = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node2) {
            if (node2.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node2.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node: node2,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node2 = getLeafNode(getSiblingNode(node2));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument2 = outerNode.ownerDocument;
          var win = ownerDocument2 && ownerDocument2.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length2 = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node2 = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node2, offsets) {
          var doc = node2.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length2 = node2.textContent.length;
          var start = Math.min(offsets.start, length2);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node2, start);
          var endMarker = getNodeForCharacterOffset(node2, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node2) {
          return node2 && node2.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node2) {
          return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node2) {
          if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
            return {
              start: node2.selectionStart,
              end: node2.selectionEnd
            };
          } else {
            var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              return;
            }
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
          var target = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          }
          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll") {
              return;
            }
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }
          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node2 = targetInst;
              mainLoop:
                while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
            }
          }
          batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common2) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common2) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to2) {
          var common2 = from2 && to2 ? getLowestCommonAncestor(from2, to2) : null;
          if (from2 !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
          }
          if (to2 !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common2, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names2 = [];
            attributeNames.forEach(function(name) {
              names2.push(name);
            });
            error("Extra attributes from the server: %s", names2);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html2) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html2;
            return testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop3() {
        }
        function trapClickOnNonInteractiveElement(node2) {
          node2.onclick = noop3;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement13(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument2.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument2.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument2.createElement(type);
              if (type === "select") {
                var node2 = domElement;
                if (props.multiple) {
                  node2.multiple = true;
                } else if (props.size) {
                  node2.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument2.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              nextProp.toString();
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement13(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style4 = instance.style;
          if (typeof style4.setProperty === "function") {
            style4.setProperty("display", "none", "important");
          } else {
            style4.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) {
              body.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node2) {
          for (; node2 != null; node2 = node2.nextSibling) {
            var nodeType = node2.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node2;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node2 = suspenseInstance.nextSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data = node2.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node2);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node2 = node2.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node2 = targetInstance.previousSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data = node2.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node2;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node2 = node2.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = "r:" + (clientId++).toString(36);
          return {
            toString: function() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function() {
              warnOnAccessInDEV();
              return id;
            }
          };
        }
        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node2) {
          node2[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node2) {
          node2[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node2) {
          node2[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node2) {
          return !!node2[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node2) {
          var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode(node2) {
          return node2[internalPropsKey] || null;
        }
        function updateFiberProps(node2, props) {
          node2[internalPropsKey] = props;
        }
        function getEventListenerSet(node2) {
          var elementListenerSet = node2[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node2[internalEventHandlersKey] = new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
          {
            var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor2, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor2.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor2, value, fiber) {
          index++;
          valueStack[index] = cursor2.current;
          {
            fiberStack[index] = fiber;
          }
          cursor2.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component3, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component3)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node2 = fiber;
            do {
              switch (node2.tag) {
                case HostRoot:
                  return node2.stateNode.context;
                case ClassComponent: {
                  var Component3 = node2.type;
                  if (isContextProvider(Component3)) {
                    return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node2 = node2.return;
            } while (node2 !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node2 = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node2);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                  for (; i < _queue.length; i++) {
                    var callback = _queue[i];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var ReactVersion = "17.0.2";
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node2 = fiber;
            while (node2 !== null) {
              if (node2.mode & StrictMode) {
                maybeStrictRoot = node2;
              }
              node2 = node2.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component3, baseProps) {
          if (Component3 && Component3.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps2 = Component3.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          var node2 = parent;
          while (node2 !== null) {
            var alternate = node2.alternate;
            if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
              node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node2 = node2.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React50.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last3 = returnFiber.lastEffect;
            if (last3 !== null) {
              last3.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment8) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment8: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject2 = typeof newChild === "object" && newChild !== null;
            if (isObject2) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject2) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case Block:
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  {
                    {
                      throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c3) {
          if (!(c3 !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c3;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node2 = row;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node2;
                }
              }
            } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node2.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node2;
              }
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === row) {
              return null;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === row) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component3, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component3(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component3(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init3) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init3 !== void 0) {
            initialState = init3(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init3) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init3) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root2 = getWorkInProgressRoot();
          if (!(root2 !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              }
              markRootEntangled(root2, root2.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              } catch (error2) {
                latestSetSnapshot(function() {
                  throw error2;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function() {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if (typeof jest !== "undefined") {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component3));
              }
            }
          }
          var render4 = Component3.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component3, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component3.type;
            if (isSimpleFunctionComponent(type) && Component3.compare === null && Component3.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component3.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component3.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component3.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component3, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  outerMemoType = init3(payload);
                } catch (x3) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component3));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component3, nextProps, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component3));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component3)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            constructClassInstance(workInProgress2, Component3, nextProps);
            mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component3, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component3, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component3.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component3, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i];
                  var version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node2 = child;
            while (node2) {
              node2.flags = node2.flags & ~Placement | Hydrating;
              node2 = node2.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init3 = lazyComponent._init;
          var Component3 = init3(payload);
          workInProgress2.type = Component3;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component3);
          var resolvedProps = resolveDefaultProps(Component3, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component3);
                workInProgress2.type = Component3 = resolveFunctionForHotReloading(Component3);
              }
              child = updateFunctionComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component3 = resolveClassForHotReloading(Component3);
              }
              child = updateClassComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef2: {
              {
                workInProgress2.type = Component3 = resolveForwardRefForHotReloading(Component3);
              }
              child = updateForwardRef(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component3.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component3));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component3, resolveDefaultProps(Component3.type, resolvedProps), updateLanes, renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component3 !== null && typeof Component3 === "object" && Component3.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component3 + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component3, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component3)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component3, nextProps);
          mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component3, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component3.prototype && typeof Component3.prototype.render === "function") {
              var componentName = getComponentName(Component3) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentName(Component3) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component3) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component3)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component3.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component3, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component3, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component3);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component3) {
          {
            if (Component3) {
              if (Component3.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component3.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component3) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component3.contextType === "object" && Component3.contextType !== null) {
              var _componentName4 = getComponentName(Component3) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node2 = firstChild;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node2, renderLanes2);
              }
            } else if (node2.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node2, renderLanes2);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render4 = newProps.children;
          {
            if (typeof render4 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render4(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last3 = returnFiber.lastEffect;
            if (last3 !== null) {
              last3.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component3 = workInProgress2.type;
                  if (isContextProvider(Component3)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                  var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    }
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  workInProgress2.lanes = NoLanes;
                  return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef2: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment8:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node2 = workInProgress2.child;
            while (node2 !== null) {
              if (node2.tag === HostComponent || node2.tag === HostText) {
                appendInitialChild(parent, node2.stateNode);
              } else if (node2.tag === HostPortal)
                ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef2:
            case Fragment8:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component3 = workInProgress2.type;
              if (isContextProvider(Component3)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else if (!fiberRoot.hydrate) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.flags |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next2 = renderState.tail;
                renderState.rendering = next2;
                renderState.tail = next2.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next2.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next2;
              }
              return null;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              if (current2 !== null) {
                var _nextState = workInProgress2.memoizedState;
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;
                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component3 = workInProgress2.type;
              if (isContextProvider(Component3)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root2, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.flags & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              return;
            }
            case HostRoot: {
              {
                if (finishedWork.flags & Snapshot) {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var _effect = effect, next2 = _effect.next, tag = _effect.tag;
              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }
              effect = next2;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node2 = finishedWork;
            while (true) {
              if (node2.tag === HostComponent) {
                var instance = node2.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node2.stateNode, node2.memoizedProps);
                }
              } else if (node2.tag === HostText) {
                var _instance3 = node2.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node2.memoizedProps);
                }
              } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === finishedWork) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                    if (destroy !== void 0) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current2, effect);
                      } else {
                        {
                          safelyCallDestroy(current2, destroy);
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node2 = root2;
          while (true) {
            commitUnmount(finishedRoot, node2);
            if (node2.child !== null && node2.tag !== HostPortal) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === root2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === root2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node2 = fiber;
          siblings:
            while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node2, before, parent) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node2 = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node2.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node2.tag === HostComponent || node2.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node2);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node2.stateNode);
              } else {
                removeChild(currentParent, node2.stateNode);
              }
            } else if (node2.tag === HostPortal) {
              if (node2.child !== null) {
                currentParent = node2.stateNode.containerInfo;
                currentParentIsContainer = true;
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node2);
              if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
            }
            if (node2 === current2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === current2) {
                return;
              }
              node2 = node2.return;
              if (node2.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor$1("selector.role");
          TEST_NAME_TYPE = symbolFor$1("selector.test_id");
          TEXT_TYPE = symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root2, lane, eventTime);
          if (root2 === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, lane);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Set([root2]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root2);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
          }
          mostRecentlyUpdatedRoot = root2;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node2 = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node2 = parent;
            parent = parent.return;
          }
          if (node2.tag === HostRoot) {
            var root2 = node2.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root2.callbackNode = null;
              root2.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root2, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root2, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              commitRoot(root2);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root2, lanes);
              exitStatus = renderRootSync(root2, lanes);
            }
          } else {
            lanes = getNextLanes(root2, NoLanes);
            exitStatus = renderRootSync(root2, lanes);
          }
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root2.hydrate) {
              root2.hydrate = false;
              clearContainer(root2.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root2);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root2, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root2) {
              markDiscreteUpdatesExpired(root2);
              ensureRootIsScheduled(root2, now());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a2, b2, c3, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a2, b2, c3, d));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync2(fn, a2) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn(a2);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a2));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next2;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next2 === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next2;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next2 = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next2 !== null) {
                workInProgress = next2;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
              rootsWithPendingDiscreteUpdates.delete(root2);
            }
          }
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect);
                break;
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect) {
          var create = effect.create;
          effect.destroy = create();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i = 0; i < unmountEffects.length; i += 2) {
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(fiber, error2);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect = root2.current.firstEffect;
          while (effect !== null) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }
            effect = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                  schedulePendingInteractions(root2, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error2, errorInfo);
                    } catch (errorToIgnore) {
                    }
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            if (isFlushingPassiveEffects)
              ;
            else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, lane) {
          return lane * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root2, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, lane) {
          scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, lanes) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedLanes) {
          var remainingLanesAfterCommit = root2.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedLanes);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority$1, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef2: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync2(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync2(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = new Set();
            var types2 = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types2.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node2 = fiber;
            while (true) {
              switch (node2.tag) {
                case HostComponent:
                  hostInstances.add(node2.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
              }
              if (node2.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node2 = node2.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node2 = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node2.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node2.stateNode);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === fiber) {
                return foundHostInstances;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === fiber) {
                  return foundHostInstances;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component3) {
          if (typeof Component3 === "function") {
            return shouldConstruct$1(Component3) ? ClassComponent : FunctionComponent;
          } else if (Component3 !== void 0 && Component3 !== null) {
            var $$typeof = Component3.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef2;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef2:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment8, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        function createPortal2(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component3 = fiber.type;
            if (isContextProvider(Component3)) {
              return processChildContext(fiber, Component3, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            if (typeof jest !== "undefined") {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMRoot(container, options2) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
        }
        function ReactDOMBlockingRoot(container, tag, options2) {
          this._internalRoot = createRootImpl(container, tag, options2);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options2) {
          var hydrate2 = options2 != null && options2.hydrate === true;
          var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
          var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          var containerNodeType = container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return root2;
        }
        function createLegacyRoot(container, options2) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
        }
        function isValidContainer(node2) {
          return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render3(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal2(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
          ]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports2.createPortal = createPortal$1;
        exports2.findDOMNode = findDOMNode;
        exports2.flushSync = flushSync2;
        exports2.hydrate = hydrate;
        exports2.render = render3;
        exports2.unmountComponentAtNode = unmountComponentAtNode;
        exports2.unstable_batchedUpdates = batchedUpdates$1;
        exports2.unstable_createPortal = unstable_createPortal;
        exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// ../../node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "../../node_modules/react-dom/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// ../../node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet;
var init_emotion_sheet_browser_esm = __esm({
  "../../node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js"() {
    StyleSheet = /* @__PURE__ */ function() {
      function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          if (_this.tags.length === 0) {
            before = _this.prepend ? _this.container.firstChild : _this.before;
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }
          _this.container.insertBefore(tag, before);
          _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce;
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };
      _proto.insert = function insert(rule) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        if (true) {
          var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
          if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
            console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
          }
          this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
        }
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
            if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
              console.error('There was a problem inserting the following rule: "' + rule + '"', e);
            }
          }
        } else {
          tag.appendChild(document.createTextNode(rule));
        }
        this.ctr++;
      };
      _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
          return tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        if (true) {
          this._alreadyInsertedOrderInsensitiveRule = false;
        }
      };
      return StyleSheet2;
    }();
  }
});

// ../../node_modules/stylis/src/Enum.js
var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES;
var init_Enum = __esm({
  "../../node_modules/stylis/src/Enum.js"() {
    MS = "-ms-";
    MOZ = "-moz-";
    WEBKIT = "-webkit-";
    COMMENT = "comm";
    RULESET = "rule";
    DECLARATION = "decl";
    IMPORT = "@import";
    KEYFRAMES = "@keyframes";
  }
});

// ../../node_modules/stylis/src/Utility.js
function hash(value, length2) {
  return (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var abs, from;
var init_Utility = __esm({
  "../../node_modules/stylis/src/Utility.js"() {
    abs = Math.abs;
    from = String.fromCharCode;
  }
});

// ../../node_modules/stylis/src/Tokenizer.js
function node(value, root, parent, type, props, children, length2) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy(value, root, type) {
  return node(value, root.root, root.parent, type, root.props, root.children, 0);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        return delimiter(type === 34 || type === 39 ? type : character);
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
}
var line, column, length, position, character, characters;
var init_Tokenizer = __esm({
  "../../node_modules/stylis/src/Tokenizer.js"() {
    init_Utility();
    line = 1;
    column = 1;
    length = 0;
    position = 0;
    character = 0;
    characters = "";
  }
});

// ../../node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse2("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse2(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 34:
      case 39:
      case 91:
      case 40:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse2(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule) {
                  case 100:
                  case 109:
                  case 115:
                    parse2(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse2(characters2, reference, reference, reference, [""], children, length2, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j3 = 0, k2 = 0; i < index; ++i)
    for (var x3 = 0, y = substr(value, post + 1, post = abs(j3 = points[i])), z = value; x3 < size; ++x3)
      if (z = trim(j3 > 0 ? rule[x3] + " " + y : replace(y, /&\f/g, rule[x3])))
        props[k2++] = z;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
var init_Parser = __esm({
  "../../node_modules/stylis/src/Parser.js"() {
    init_Enum();
    init_Utility();
    init_Tokenizer();
  }
});

// ../../node_modules/stylis/src/Prefixer.js
function prefix(value, length2) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var init_Prefixer = __esm({
  "../../node_modules/stylis/src/Prefixer.js"() {
    init_Enum();
    init_Utility();
  }
});

// ../../node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index, children, callback) {
  switch (element.type) {
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
var init_Serializer = __esm({
  "../../node_modules/stylis/src/Serializer.js"() {
    init_Enum();
    init_Utility();
  }
});

// ../../node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index, children, callback) || "";
    return output;
  };
}
function prefixer(element, index, children, callback) {
  if (!element.return)
    switch (element.type) {
      case DECLARATION:
        element.return = prefix(element.value, element.length);
        break;
      case KEYFRAMES:
        return serialize([copy(replace(element.value, "@", "@" + WEBKIT), element, "")], callback);
      case RULESET:
        if (element.length)
          return combine(element.props, function(value) {
            switch (match(value, /(::plac\w+|:read-\w+)/)) {
              case ":read-only":
              case ":read-write":
                return serialize([copy(replace(value, /:(read-\w+)/, ":" + MOZ + "$1"), element, "")], callback);
              case "::placeholder":
                return serialize([
                  copy(replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1"), element, ""),
                  copy(replace(value, /:(plac\w+)/, ":" + MOZ + "$1"), element, ""),
                  copy(replace(value, /:(plac\w+)/, MS + "input-$1"), element, "")
                ], callback);
            }
            return "";
          });
    }
}
var init_Middleware = __esm({
  "../../node_modules/stylis/src/Middleware.js"() {
    init_Enum();
    init_Utility();
    init_Tokenizer();
    init_Serializer();
    init_Prefixer();
  }
});

// ../../node_modules/stylis/index.js
var init_stylis = __esm({
  "../../node_modules/stylis/index.js"() {
    init_Enum();
    init_Utility();
    init_Parser();
    init_Prefixer();
    init_Tokenizer();
    init_Serializer();
    init_Middleware();
  }
});

// ../../node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js
var init_weak_memoize_browser_esm = __esm({
  "../../node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js"() {
  }
});

// ../../node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
function memoize(fn) {
  var cache = Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var emotion_memoize_browser_esm_default;
var init_emotion_memoize_browser_esm = __esm({
  "../../node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js"() {
    emotion_memoize_browser_esm_default = memoize;
  }
});

// ../../node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
var last, toRules, getRules, fixedElements, compat, removeLabel, ignoreFlag, isIgnoringComment, createUnsafeSelectorsAlarm, isImportRule, isPrependedWithRegularRules, nullifyElement, incorrectImportAlarm, defaultStylisPlugins, createCache, emotion_cache_browser_esm_default;
var init_emotion_cache_browser_esm = __esm({
  "../../node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
    init_emotion_sheet_browser_esm();
    init_stylis();
    init_weak_memoize_browser_esm();
    init_emotion_memoize_browser_esm();
    last = function last2(arr) {
      return arr.length ? arr[arr.length - 1] : null;
    };
    toRules = function toRules2(parsed, points) {
      var index = -1;
      var character2 = 44;
      do {
        switch (token(character2)) {
          case 0:
            if (character2 === 38 && peek() === 12) {
              points[index] = 1;
            }
            parsed[index] += identifier(position - 1);
            break;
          case 2:
            parsed[index] += delimit(character2);
            break;
          case 4:
            if (character2 === 44) {
              parsed[++index] = peek() === 58 ? "&\f" : "";
              points[index] = parsed[index].length;
              break;
            }
          default:
            parsed[index] += from(character2);
        }
      } while (character2 = next());
      return parsed;
    };
    getRules = function getRules2(value, points) {
      return dealloc(toRules(alloc(value), points));
    };
    fixedElements = /* @__PURE__ */ new WeakMap();
    compat = function compat2(element) {
      if (element.type !== "rule" || !element.parent || !element.length) {
        return;
      }
      var value = element.value, parent = element.parent;
      var isImplicitRule = element.column === parent.column && element.line === parent.line;
      while (parent.type !== "rule") {
        parent = parent.parent;
        if (!parent)
          return;
      }
      if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
        return;
      }
      if (isImplicitRule) {
        return;
      }
      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value, points);
      var parentRules = parent.props;
      for (var i = 0, k2 = 0; i < rules.length; i++) {
        for (var j3 = 0; j3 < parentRules.length; j3++, k2++) {
          element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j3]) : parentRules[j3] + " " + rules[i];
        }
      }
    };
    removeLabel = function removeLabel2(element) {
      if (element.type === "decl") {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
          element["return"] = "";
          element.value = "";
        }
      }
    };
    ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
    isIgnoringComment = function isIgnoringComment2(element) {
      return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
    };
    createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
      return function(element, index, children) {
        if (element.type !== "rule")
          return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses && cache.compat !== true) {
          var prevElement = index > 0 ? children[index - 1] : null;
          if (prevElement && isIgnoringComment(last(prevElement.children))) {
            return;
          }
          unsafePseudoClasses.forEach(function(unsafePseudoClass) {
            console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
          });
        }
      };
    };
    isImportRule = function isImportRule2(element) {
      return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
    };
    isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
      for (var i = index - 1; i >= 0; i--) {
        if (!isImportRule(children[i])) {
          return true;
        }
      }
      return false;
    };
    nullifyElement = function nullifyElement2(element) {
      element.type = "";
      element.value = "";
      element["return"] = "";
      element.children = "";
      element.props = "";
    };
    incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
      if (!isImportRule(element)) {
        return;
      }
      if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
      } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
      }
    };
    defaultStylisPlugins = [prefixer];
    createCache = function createCache2(options) {
      var key = options.key;
      if (!key) {
        throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
      }
      if (key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node2) {
          var dataEmotionAttribute = node2.getAttribute("data-emotion");
          if (dataEmotionAttribute.indexOf(" ") === -1) {
            return;
          }
          document.head.appendChild(node2);
          node2.setAttribute("data-s", "");
        });
      }
      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
      if (true) {
        if (/[^a-z-]/.test(key)) {
          throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
        }
      }
      var inserted = {};
      var container;
      var nodesToHydrate = [];
      {
        container = options.container || document.head;
        Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i = 1; i < attrib.length; i++) {
            inserted[attrib[i]] = true;
          }
          nodesToHydrate.push(node2);
        });
      }
      var _insert;
      var omnipresentPlugins = [compat, removeLabel];
      if (true) {
        omnipresentPlugins.push(createUnsafeSelectorsAlarm({
          get compat() {
            return cache.compat;
          }
        }), incorrectImportAlarm);
      }
      {
        var currentSheet;
        var finalizingPlugins = [stringify, true ? function(element) {
          if (!element.root) {
            if (element["return"]) {
              currentSheet.insert(element["return"]);
            } else if (element.value && element.type !== COMMENT) {
              currentSheet.insert(element.value + "{}");
            }
          }
        } : rulesheet(function(rule) {
          currentSheet.insert(rule);
        })];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis2(styles2) {
          return serialize(compile(styles2), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;
          if (serialized.map !== void 0) {
            currentSheet = {
              insert: function insert2(rule) {
                sheet.insert(rule + serialized.map);
              }
            };
          }
          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      }
      var cache = {
        key,
        sheet: new StyleSheet({
          key,
          container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend
        }),
        nonce: options.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };
    emotion_cache_browser_esm_default = createCache;
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var init_extends = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/extends.js"() {
  }
});

// ../../node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment8 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal3 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef2;
        exports2.Fragment = Fragment8;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo2;
        exports2.Portal = Portal3;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment2;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics;
  }
});

// ../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var isBrowser2, insertStyles;
var init_emotion_utils_browser_esm = __esm({
  "../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
    isBrowser2 = true;
    insertStyles = function insertStyles2(cache, serialized, isStringTag) {
      var className = cache.key + "-" + serialized.name;
      if ((isStringTag === false || isBrowser2 === false) && cache.registered[className] === void 0) {
        cache.registered[className] = serialized.styles;
      }
      if (cache.inserted[serialized.name] === void 0) {
        var current = serialized;
        do {
          var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
          current = current.next;
        } while (current !== void 0);
      }
    };
  }
});

// ../../node_modules/@emotion/hash/dist/hash.browser.esm.js
function murmur2(str) {
  var h2 = 0;
  var k2, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
    k2 ^= k2 >>> 24;
    h2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h2 ^= str.charCodeAt(i) & 255;
      h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  h2 ^= h2 >>> 13;
  h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
}
var hash_browser_esm_default;
var init_hash_browser_esm = __esm({
  "../../node_modules/@emotion/hash/dist/hash.browser.esm.js"() {
    hash_browser_esm_default = murmur2;
  }
});

// ../../node_modules/@emotion/unitless/dist/unitless.browser.esm.js
var unitlessKeys, unitless_browser_esm_default;
var init_unitless_browser_esm = __esm({
  "../../node_modules/@emotion/unitless/dist/unitless.browser.esm.js"() {
    unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    unitless_browser_esm_default = unitlessKeys;
  }
});

// ../../node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        if (interpolation.map !== void 0) {
          styles2 += interpolation.map;
        }
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else if (true) {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && true) {
          throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (_key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var ILLEGAL_ESCAPE_SEQUENCE_ERROR, UNDEFINED_AS_OBJECT_KEY_ERROR, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, contentValuePattern, contentValues, oldProcessStyleValue, msPattern, hyphenPattern, hyphenatedCache, labelPattern, sourceMapPattern, cursor, serializeStyles;
var init_emotion_serialize_browser_esm = __esm({
  "../../node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js"() {
    init_hash_browser_esm();
    init_unitless_browser_esm();
    init_emotion_memoize_browser_esm();
    ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
    UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
    hyphenateRegex = /[A-Z]|^ms/g;
    animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    isCustomProperty = function isCustomProperty2(property) {
      return property.charCodeAt(1) === 45;
    };
    isProcessableValue = function isProcessableValue2(value) {
      return value != null && typeof value !== "boolean";
    };
    processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    processStyleValue = function processStyleValue2(key, value) {
      switch (key) {
        case "animation":
        case "animationName": {
          if (typeof value === "string") {
            return value.replace(animationRegex, function(match2, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
      }
      if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
        return value + "px";
      }
      return value;
    };
    if (true) {
      contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
      contentValues = ["normal", "none", "initial", "inherit", "unset"];
      oldProcessStyleValue = processStyleValue;
      msPattern = /^-ms-/;
      hyphenPattern = /-(.)/g;
      hyphenatedCache = {};
      processStyleValue = function processStyleValue3(key, value) {
        if (key === "content") {
          if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
            throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
          }
        }
        var processed = oldProcessStyleValue(key, value);
        if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
          hyphenatedCache[key] = true;
          console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
          }) + "?");
        }
        return processed;
      };
    }
    labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    if (true) {
      sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
    }
    serializeStyles = function serializeStyles2(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
        return args[0];
      }
      var stringMode = true;
      var styles2 = "";
      cursor = void 0;
      var strings = args[0];
      if (strings == null || strings.raw === void 0) {
        stringMode = false;
        styles2 += handleInterpolation(mergedProps, registered, strings);
      } else {
        if (strings[0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles2 += strings[0];
      }
      for (var i = 1; i < args.length; i++) {
        styles2 += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
          if (strings[i] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles2 += strings[i];
        }
      }
      var sourceMap;
      if (true) {
        styles2 = styles2.replace(sourceMapPattern, function(match3) {
          sourceMap = match3;
          return "";
        });
      }
      labelPattern.lastIndex = 0;
      var identifierName = "";
      var match2;
      while ((match2 = labelPattern.exec(styles2)) !== null) {
        identifierName += "-" + match2[1];
      }
      var name = hash_browser_esm_default(styles2) + identifierName;
      if (true) {
        return {
          name,
          styles: styles2,
          map: sourceMap,
          next: cursor,
          toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
          }
        };
      }
      return {
        name,
        styles: styles2,
        next: cursor
      };
    };
  }
});

// ../../node_modules/@emotion/react/dist/emotion-element-99289b21.browser.esm.js
var import_react39, hasOwnProperty, EmotionCacheContext, CacheProvider, withEmotionCache, ThemeContext, sanitizeIdentifier, typePropName, labelPropName, createEmotionProps, Emotion;
var init_emotion_element_99289b21_browser_esm = __esm({
  "../../node_modules/@emotion/react/dist/emotion-element-99289b21.browser.esm.js"() {
    import_react39 = __toModule(require_react());
    init_emotion_cache_browser_esm();
    init_extends();
    init_weak_memoize_browser_esm();
    init_emotion_utils_browser_esm();
    init_emotion_serialize_browser_esm();
    hasOwnProperty = Object.prototype.hasOwnProperty;
    EmotionCacheContext = /* @__PURE__ */ (0, import_react39.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
      key: "css"
    }) : null);
    if (true) {
      EmotionCacheContext.displayName = "EmotionCacheContext";
    }
    CacheProvider = EmotionCacheContext.Provider;
    withEmotionCache = function withEmotionCache2(func) {
      return /* @__PURE__ */ (0, import_react39.forwardRef)(function(props, ref) {
        var cache = (0, import_react39.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };
    ThemeContext = /* @__PURE__ */ (0, import_react39.createContext)({});
    if (true) {
      ThemeContext.displayName = "EmotionThemeContext";
    }
    sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
      return identifier2.replace(/\$/g, "-");
    };
    typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
    labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
    createEmotionProps = function createEmotionProps2(type, props) {
      if (typeof props.css === "string" && props.css.indexOf(":") !== -1) {
        throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
      }
      var newProps = {};
      for (var key in props) {
        if (hasOwnProperty.call(props, key)) {
          newProps[key] = props[key];
        }
      }
      newProps[typePropName] = type;
      if (true) {
        var error = new Error();
        if (error.stack) {
          var match2 = error.stack.match(/at (?:Object\.|Module\.|)(?:jsx|createEmotionProps).*\n\s+at (?:Object\.|)([A-Z][A-Za-z0-9$]+) /);
          if (!match2) {
            match2 = error.stack.match(/.*\n([A-Z][A-Za-z0-9$]+)@/);
          }
          if (match2) {
            newProps[labelPropName] = sanitizeIdentifier(match2[1]);
          }
        }
      }
      return newProps;
    };
    Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
      var cssProp = props.css;
      if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
        cssProp = cache.registered[cssProp];
      }
      var type = props[typePropName];
      var registeredStyles = [cssProp];
      var className = "";
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(registeredStyles, void 0, (0, import_react39.useContext)(ThemeContext));
      if (serialized.name.indexOf("-") === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) {
          serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
        }
      }
      var rules = insertStyles(cache, serialized, typeof type === "string");
      className += cache.key + "-" + serialized.name;
      var newProps = {};
      for (var key in props) {
        if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
          newProps[key] = props[key];
        }
      }
      newProps.ref = ref;
      newProps.className = className;
      var ele = /* @__PURE__ */ (0, import_react39.createElement)(type, newProps);
      return ele;
    });
    if (true) {
      Emotion.displayName = "EmotionCssPropInternal";
    }
  }
});

// ../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
function merge(registered, css2, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css2(registeredStyles);
}
var import_react40, import_hoist_non_react_statics, pkg, jsx, warnedAboutCssPropForGlobal, Global, keyframes3, classnames, ClassNames, isBrowser3, isJest, globalContext, globalKey;
var init_emotion_react_browser_esm = __esm({
  "../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
    import_react40 = __toModule(require_react());
    init_emotion_cache_browser_esm();
    init_emotion_element_99289b21_browser_esm();
    init_emotion_element_99289b21_browser_esm();
    init_extends();
    init_weak_memoize_browser_esm();
    import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
    init_emotion_utils_browser_esm();
    init_emotion_serialize_browser_esm();
    init_emotion_sheet_browser_esm();
    pkg = {
      name: "@emotion/react",
      version: "11.4.1",
      main: "dist/emotion-react.cjs.js",
      module: "dist/emotion-react.esm.js",
      browser: {
        "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
      },
      types: "types/index.d.ts",
      files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "isolated-hoist-non-react-statics-do-not-use-this-in-your-code",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
      ],
      sideEffects: false,
      author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
      license: "MIT",
      scripts: {
        "test:typescript": "dtslint types"
      },
      dependencies: {
        "@babel/runtime": "^7.13.10",
        "@emotion/cache": "^11.4.0",
        "@emotion/serialize": "^1.0.2",
        "@emotion/sheet": "^1.0.2",
        "@emotion/utils": "^1.0.0",
        "@emotion/weak-memoize": "^0.2.5",
        "hoist-non-react-statics": "^3.3.1"
      },
      peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
      },
      peerDependenciesMeta: {
        "@babel/core": {
          optional: true
        },
        "@types/react": {
          optional: true
        }
      },
      devDependencies: {
        "@babel/core": "^7.13.10",
        "@emotion/css": "11.1.3",
        "@emotion/css-prettifier": "1.0.0",
        "@emotion/server": "11.4.0",
        "@emotion/styled": "11.3.0",
        "@types/react": "^16.9.11",
        dtslint: "^0.3.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1"
      },
      repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
      publishConfig: {
        access: "public"
      },
      "umd:main": "dist/emotion-react.umd.min.js",
      preconstruct: {
        entrypoints: [
          "./index.js",
          "./jsx-runtime.js",
          "./jsx-dev-runtime.js",
          "./isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js"
        ],
        umdName: "emotionReact"
      }
    };
    jsx = function jsx2(type, props) {
      var args = arguments;
      if (props == null || !hasOwnProperty.call(props, "css")) {
        return import_react40.createElement.apply(void 0, args);
      }
      var argsLength = args.length;
      var createElementArgArray = new Array(argsLength);
      createElementArgArray[0] = Emotion;
      createElementArgArray[1] = createEmotionProps(type, props);
      for (var i = 2; i < argsLength; i++) {
        createElementArgArray[i] = args[i];
      }
      return import_react40.createElement.apply(null, createElementArgArray);
    };
    warnedAboutCssPropForGlobal = false;
    Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
      }
      var styles2 = props.styles;
      var serialized = serializeStyles([styles2], void 0, (0, import_react40.useContext)(ThemeContext));
      var sheetRef = (0, import_react40.useRef)();
      (0, import_react40.useLayoutEffect)(function() {
        var key = cache.key + "-global";
        var sheet = new StyleSheet({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }
        if (node2 !== null) {
          rehydrating = true;
          node2.setAttribute("data-emotion", key);
          sheet.hydrate([node2]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function() {
          sheet.flush();
        };
      }, [cache]);
      (0, import_react40.useLayoutEffect)(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }
        if (serialized.next !== void 0) {
          insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });
    if (true) {
      Global.displayName = "EmotionGlobal";
    }
    keyframes3 = function keyframes4() {
      var insertable = css.apply(void 0, arguments);
      var name = "animation-" + insertable.name;
      return {
        name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };
    classnames = function classnames2(args) {
      var len = args.length;
      var i = 0;
      var cls = "";
      for (; i < len; i++) {
        var arg = args[i];
        if (arg == null)
          continue;
        var toAdd = void 0;
        switch (typeof arg) {
          case "boolean":
            break;
          case "object": {
            if (Array.isArray(arg)) {
              toAdd = classnames2(arg);
            } else {
              if (arg.styles !== void 0 && arg.name !== void 0) {
                console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
              }
              toAdd = "";
              for (var k2 in arg) {
                if (arg[k2] && k2) {
                  toAdd && (toAdd += " ");
                  toAdd += k2;
                }
              }
            }
            break;
          }
          default: {
            toAdd = arg;
          }
        }
        if (toAdd) {
          cls && (cls += " ");
          cls += toAdd;
        }
      }
      return cls;
    };
    ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      var hasRendered = false;
      var css2 = function css3() {
        if (hasRendered && true) {
          throw new Error("css can only be used during render");
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var serialized = serializeStyles(args, cache.registered);
        {
          insertStyles(cache, serialized, false);
        }
        return cache.key + "-" + serialized.name;
      };
      var cx = function cx2() {
        if (hasRendered && true) {
          throw new Error("cx can only be used during render");
        }
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return merge(cache.registered, css2, classnames(args));
      };
      var content = {
        css: css2,
        cx,
        theme: (0, import_react40.useContext)(ThemeContext)
      };
      var ele = props.children(content);
      hasRendered = true;
      return ele;
    });
    if (true) {
      ClassNames.displayName = "EmotionClassNames";
    }
    if (true) {
      isBrowser3 = true;
      isJest = typeof jest !== "undefined";
      if (isBrowser3 && !isJest) {
        globalContext = isBrowser3 ? window : global;
        globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
        if (globalContext[globalKey]) {
          console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
        }
        globalContext[globalKey] = true;
      }
    }
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var init_objectWithoutPropertiesLoose = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
  }
});

// ../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment8 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal3 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef2;
        exports2.Fragment = Fragment8;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo2;
        exports2.Portal = Portal3;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment2;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/prop-types/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "../../node_modules/prop-types/node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development2();
    }
  }
});

// ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values3, location2, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location2 + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// ../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
    "use strict";
    var ReactIs = require_react_is2();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var checkPropTypes = require_checkPropTypes();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement5, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x3, y) {
        if (x3 === y) {
          return x3 !== 0 || 1 / x3 === 1 / y;
        } else {
          return x3 !== x3 && y !== y;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement5(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement5(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/prop-types/index.js"(exports2, module2) {
    if (true) {
      ReactIs = require_react_is2();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/clsx/dist/clsx.m.js
function toVal(mix2) {
  var k2, y, str = "";
  if (typeof mix2 === "string" || typeof mix2 === "number") {
    str += mix2;
  } else if (typeof mix2 === "object") {
    if (Array.isArray(mix2)) {
      for (k2 = 0; k2 < mix2.length; k2++) {
        if (mix2[k2]) {
          if (y = toVal(mix2[k2])) {
            str && (str += " ");
            str += y;
          }
        }
      }
    } else {
      for (k2 in mix2) {
        if (mix2[k2]) {
          str && (str += " ");
          str += k2;
        }
      }
    }
  }
  return str;
}
function clsx_m_default() {
  var i = 0, tmp, x3, str = "";
  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x3 = toVal(tmp)) {
        str && (str += " ");
        str += x3;
      }
    }
  }
  return str;
}
var init_clsx_m = __esm({
  "../../node_modules/clsx/dist/clsx.m.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/chainPropTypes.js
function chainPropTypes(propType1, propType2) {
  if (false) {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}
var init_chainPropTypes = __esm({
  "../../node_modules/@mui/utils/esm/chainPropTypes.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/deepmerge.js
function isPlainObject(item) {
  return item !== null && typeof item === "object" && item.constructor === Object;
}
function deepmerge(target, source, options = {
  clone: true
}) {
  const output = options.clone ? _extends({}, target) : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach((key) => {
      if (key === "__proto__") {
        return;
      }
      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
        output[key] = deepmerge(target[key], source[key], options);
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}
var init_deepmerge = __esm({
  "../../node_modules/@mui/utils/esm/deepmerge.js"() {
    init_extends();
  }
});

// ../../node_modules/@mui/utils/esm/elementAcceptingRef.js
function isClassComponent(elementType) {
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location2, propFullName) {
  const element = props[propName];
  const safePropName = propFullName || propName;
  if (element == null || typeof window === "undefined") {
    return null;
  }
  let warningHint;
  const elementType = element.type;
  if (typeof elementType === "function" && !isClassComponent(elementType)) {
    warningHint = "Did you accidentally use a plain function component for an element instead?";
  }
  if (warningHint !== void 0) {
    return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
  }
  return null;
}
var import_prop_types, elementAcceptingRef, elementAcceptingRef_default;
var init_elementAcceptingRef = __esm({
  "../../node_modules/@mui/utils/esm/elementAcceptingRef.js"() {
    import_prop_types = __toModule(require_prop_types());
    init_chainPropTypes();
    elementAcceptingRef = chainPropTypes(import_prop_types.default.element, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes(import_prop_types.default.element.isRequired, acceptingRef);
    elementAcceptingRef_default = elementAcceptingRef;
  }
});

// ../../node_modules/@mui/utils/esm/elementTypeAcceptingRef.js
function isClassComponent2(elementType) {
  const {
    prototype = {}
  } = elementType;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location2, propFullName) {
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null || typeof window === "undefined") {
    return null;
  }
  let warningHint;
  if (typeof propValue === "function" && !isClassComponent2(propValue)) {
    warningHint = "Did you accidentally provide a plain function component instead?";
  }
  if (warningHint !== void 0) {
    return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
  }
  return null;
}
var import_prop_types2, elementTypeAcceptingRef_default;
var init_elementTypeAcceptingRef = __esm({
  "../../node_modules/@mui/utils/esm/elementTypeAcceptingRef.js"() {
    import_prop_types2 = __toModule(require_prop_types());
    init_chainPropTypes();
    elementTypeAcceptingRef_default = chainPropTypes(import_prop_types2.default.elementType, elementTypeAcceptingRef);
  }
});

// ../../node_modules/@mui/utils/esm/exactProp.js
function exactProp(propTypes) {
  if (false) {
    return propTypes;
  }
  return _extends({}, propTypes, {
    [specialProperty]: (props) => {
      const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
      }
      return null;
    }
  });
}
var specialProperty;
var init_exactProp = __esm({
  "../../node_modules/@mui/utils/esm/exactProp.js"() {
    init_extends();
    specialProperty = "exact-prop: \u200B";
  }
});

// ../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development3 = __commonJS({
  "../../node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment8 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal3 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef2;
        exports2.Fragment = Fragment8;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo2;
        exports2.Portal = Portal3;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment2;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/react-is/index.js
var require_react_is3 = __commonJS({
  "../../node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development3();
    }
  }
});

// ../../node_modules/@mui/utils/esm/getDisplayName.js
function getFunctionName(fn) {
  const match2 = `${fn}`.match(fnNameMatchRegex);
  const name = match2 && match2[1];
  return name || "";
}
function getFunctionComponentName(Component3, fallback = "") {
  return Component3.displayName || Component3.name || getFunctionName(Component3) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
}
function getDisplayName(Component3) {
  if (Component3 == null) {
    return void 0;
  }
  if (typeof Component3 === "string") {
    return Component3;
  }
  if (typeof Component3 === "function") {
    return getFunctionComponentName(Component3, "Component");
  }
  if (typeof Component3 === "object") {
    switch (Component3.$$typeof) {
      case import_react_is.ForwardRef:
        return getWrappedName(Component3, Component3.render, "ForwardRef");
      case import_react_is.Memo:
        return getWrappedName(Component3, Component3.type, "memo");
      default:
        return void 0;
    }
  }
  return void 0;
}
var import_react_is, fnNameMatchRegex;
var init_getDisplayName = __esm({
  "../../node_modules/@mui/utils/esm/getDisplayName.js"() {
    import_react_is = __toModule(require_react_is3());
    fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  }
});

// ../../node_modules/@mui/utils/esm/HTMLElementType.js
function HTMLElementType(props, propName, componentName, location2, propFullName) {
  if (false) {
    return null;
  }
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  if (propValue && propValue.nodeType !== 1) {
    return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
  }
  return null;
}
var init_HTMLElementType = __esm({
  "../../node_modules/@mui/utils/esm/HTMLElementType.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/refType.js
var import_prop_types3, refType, refType_default;
var init_refType = __esm({
  "../../node_modules/@mui/utils/esm/refType.js"() {
    import_prop_types3 = __toModule(require_prop_types());
    refType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]);
    refType_default = refType;
  }
});

// ../../node_modules/@mui/utils/esm/capitalize.js
function capitalize(string) {
  if (typeof string !== "string") {
    throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var init_capitalize = __esm({
  "../../node_modules/@mui/utils/esm/capitalize.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/createChainedFunction.js
function createChainedFunction(...funcs) {
  return funcs.reduce((acc, func) => {
    if (func == null) {
      return acc;
    }
    return function chainedFunction(...args) {
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, () => {
  });
}
var init_createChainedFunction = __esm({
  "../../node_modules/@mui/utils/esm/createChainedFunction.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/ownerDocument.js
function ownerDocument(node2) {
  return node2 && node2.ownerDocument || document;
}
var init_ownerDocument = __esm({
  "../../node_modules/@mui/utils/esm/ownerDocument.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/ownerWindow.js
function ownerWindow(node2) {
  const doc = ownerDocument(node2);
  return doc.defaultView || window;
}
var init_ownerWindow = __esm({
  "../../node_modules/@mui/utils/esm/ownerWindow.js"() {
    init_ownerDocument();
  }
});

// ../../node_modules/@mui/utils/esm/setRef.js
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
var init_setRef = __esm({
  "../../node_modules/@mui/utils/esm/setRef.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/useEnhancedEffect.js
var React9, useEnhancedEffect, useEnhancedEffect_default;
var init_useEnhancedEffect = __esm({
  "../../node_modules/@mui/utils/esm/useEnhancedEffect.js"() {
    React9 = __toModule(require_react());
    useEnhancedEffect = typeof window !== "undefined" ? React9.useLayoutEffect : React9.useEffect;
    useEnhancedEffect_default = useEnhancedEffect;
  }
});

// ../../node_modules/@mui/utils/esm/useControlled.js
function useControlled({
  controlled,
  default: defaultProp,
  name,
  state = "value"
}) {
  const {
    current: isControlled
  } = React10.useRef(controlled !== void 0);
  const [valueState, setValue] = React10.useState(defaultProp);
  const value = isControlled ? controlled : valueState;
  if (true) {
    React10.useEffect(() => {
      if (isControlled !== (controlled !== void 0)) {
        console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [state, name, controlled]);
    const {
      current: defaultValue
    } = React10.useRef(defaultProp);
    React10.useEffect(() => {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
      }
    }, [JSON.stringify(defaultProp)]);
  }
  const setValueIfUncontrolled = React10.useCallback((newValue) => {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}
var React10;
var init_useControlled = __esm({
  "../../node_modules/@mui/utils/esm/useControlled.js"() {
    React10 = __toModule(require_react());
  }
});

// ../../node_modules/@mui/utils/esm/useEventCallback.js
function useEventCallback(fn) {
  const ref = React11.useRef(fn);
  useEnhancedEffect_default(() => {
    ref.current = fn;
  });
  return React11.useCallback((...args) => (0, ref.current)(...args), []);
}
var React11;
var init_useEventCallback = __esm({
  "../../node_modules/@mui/utils/esm/useEventCallback.js"() {
    React11 = __toModule(require_react());
    init_useEnhancedEffect();
  }
});

// ../../node_modules/@mui/utils/esm/useForkRef.js
function useForkRef(refA, refB) {
  return React12.useMemo(() => {
    if (refA == null && refB == null) {
      return null;
    }
    return (refValue) => {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}
var React12;
var init_useForkRef = __esm({
  "../../node_modules/@mui/utils/esm/useForkRef.js"() {
    React12 = __toModule(require_react());
    init_setRef();
  }
});

// ../../node_modules/@mui/utils/esm/useIsFocusVisible.js
function focusTriggersKeyboardModality(node2) {
  const {
    type,
    tagName
  } = node2;
  if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
    return true;
  }
  if (tagName === "TEXTAREA" && !node2.readOnly) {
    return true;
  }
  if (node2.isContentEditable) {
    return true;
  }
  return false;
}
function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }
  hadKeyboardEvent = true;
}
function handlePointerDown() {
  hadKeyboardEvent = false;
}
function handleVisibilityChange() {
  if (this.visibilityState === "hidden") {
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}
function prepare(doc) {
  doc.addEventListener("keydown", handleKeyDown, true);
  doc.addEventListener("mousedown", handlePointerDown, true);
  doc.addEventListener("pointerdown", handlePointerDown, true);
  doc.addEventListener("touchstart", handlePointerDown, true);
  doc.addEventListener("visibilitychange", handleVisibilityChange, true);
}
function isFocusVisible(event) {
  const {
    target
  } = event;
  try {
    return target.matches(":focus-visible");
  } catch (error) {
  }
  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function useIsFocusVisible() {
  const ref = React13.useCallback((node2) => {
    if (node2 != null) {
      prepare(node2.ownerDocument);
    }
  }, []);
  const isFocusVisibleRef = React13.useRef(false);
  function handleBlurVisible() {
    if (isFocusVisibleRef.current) {
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
        hadFocusVisibleRecently = false;
      }, 100);
      isFocusVisibleRef.current = false;
      return true;
    }
    return false;
  }
  function handleFocusVisible(event) {
    if (isFocusVisible(event)) {
      isFocusVisibleRef.current = true;
      return true;
    }
    return false;
  }
  return {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref
  };
}
var React13, hadKeyboardEvent, hadFocusVisibleRecently, hadFocusVisibleRecentlyTimeout, inputTypesWhitelist;
var init_useIsFocusVisible = __esm({
  "../../node_modules/@mui/utils/esm/useIsFocusVisible.js"() {
    React13 = __toModule(require_react());
    hadKeyboardEvent = true;
    hadFocusVisibleRecently = false;
    hadFocusVisibleRecentlyTimeout = null;
    inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
  }
});

// ../../node_modules/@mui/utils/esm/getScrollbarSize.js
function getScrollbarSize(doc) {
  const documentWidth = doc.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}
var init_getScrollbarSize = __esm({
  "../../node_modules/@mui/utils/esm/getScrollbarSize.js"() {
  }
});

// ../../node_modules/@mui/utils/esm/usePreviousProps.js
var React14, usePreviousProps, usePreviousProps_default;
var init_usePreviousProps = __esm({
  "../../node_modules/@mui/utils/esm/usePreviousProps.js"() {
    React14 = __toModule(require_react());
    usePreviousProps = (value) => {
      const ref = React14.useRef({});
      React14.useEffect(() => {
        ref.current = value;
      });
      return ref.current;
    };
    usePreviousProps_default = usePreviousProps;
  }
});

// ../../node_modules/@mui/utils/esm/visuallyHidden.js
var visuallyHidden, visuallyHidden_default;
var init_visuallyHidden = __esm({
  "../../node_modules/@mui/utils/esm/visuallyHidden.js"() {
    visuallyHidden = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: -1,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    };
    visuallyHidden_default = visuallyHidden;
  }
});

// ../../node_modules/@mui/utils/esm/index.js
var init_esm = __esm({
  "../../node_modules/@mui/utils/esm/index.js"() {
    init_chainPropTypes();
    init_deepmerge();
    init_elementAcceptingRef();
    init_elementTypeAcceptingRef();
    init_exactProp();
    init_getDisplayName();
    init_HTMLElementType();
    init_refType();
    init_capitalize();
    init_createChainedFunction();
    init_ownerDocument();
    init_ownerWindow();
    init_setRef();
    init_useEnhancedEffect();
    init_useControlled();
    init_useEventCallback();
    init_useForkRef();
    init_useIsFocusVisible();
    init_getScrollbarSize();
    init_usePreviousProps();
    init_visuallyHidden();
  }
});

// ../../node_modules/@mui/core/AutocompleteUnstyled/index.js
var init_AutocompleteUnstyled = __esm({
  "../../node_modules/@mui/core/AutocompleteUnstyled/index.js"() {
  }
});

// ../../node_modules/@mui/core/composeClasses/composeClasses.js
function composeClasses(slots, getUtilityClass, classes) {
  const output = {};
  Object.keys(slots).forEach((slot) => {
    output[slot] = slots[slot].reduce((acc, key) => {
      if (key) {
        if (classes && classes[key]) {
          acc.push(classes[key]);
        }
        acc.push(getUtilityClass(key));
      }
      return acc;
    }, []).join(" ");
  });
  return output;
}
var init_composeClasses = __esm({
  "../../node_modules/@mui/core/composeClasses/composeClasses.js"() {
  }
});

// ../../node_modules/@mui/core/composeClasses/index.js
var init_composeClasses2 = __esm({
  "../../node_modules/@mui/core/composeClasses/index.js"() {
    init_composeClasses();
  }
});

// ../../node_modules/@mui/core/utils/isHostComponent.js
function isHostComponent(element) {
  return typeof element === "string";
}
var isHostComponent_default;
var init_isHostComponent = __esm({
  "../../node_modules/@mui/core/utils/isHostComponent.js"() {
    isHostComponent_default = isHostComponent;
  }
});

// ../../node_modules/@mui/core/generateUtilityClass/generateUtilityClass.js
function generateUtilityClass(componentName, slot) {
  const globalStateClass = globalStateClassesMapping[slot];
  return globalStateClass || `${componentName}-${slot}`;
}
var globalStateClassesMapping;
var init_generateUtilityClass = __esm({
  "../../node_modules/@mui/core/generateUtilityClass/generateUtilityClass.js"() {
    globalStateClassesMapping = {
      active: "Mui-active",
      checked: "Mui-checked",
      completed: "Mui-completed",
      disabled: "Mui-disabled",
      error: "Mui-error",
      expanded: "Mui-expanded",
      focused: "Mui-focused",
      focusVisible: "Mui-focusVisible",
      required: "Mui-required",
      selected: "Mui-selected"
    };
  }
});

// ../../node_modules/@mui/core/generateUtilityClass/index.js
var init_generateUtilityClass2 = __esm({
  "../../node_modules/@mui/core/generateUtilityClass/index.js"() {
    init_generateUtilityClass();
  }
});

// ../../node_modules/@mui/core/generateUtilityClasses/generateUtilityClasses.js
function generateUtilityClasses(componentName, slots) {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass(componentName, slot);
  });
  return result;
}
var init_generateUtilityClasses = __esm({
  "../../node_modules/@mui/core/generateUtilityClasses/generateUtilityClasses.js"() {
    init_generateUtilityClass2();
  }
});

// ../../node_modules/@mui/core/generateUtilityClasses/index.js
var init_generateUtilityClasses2 = __esm({
  "../../node_modules/@mui/core/generateUtilityClasses/index.js"() {
    init_generateUtilityClasses();
  }
});

// ../../node_modules/@mui/core/BackdropUnstyled/backdropUnstyledClasses.js
function getBackdropUtilityClass(slot) {
  return generateUtilityClass("MuiBackdrop", slot);
}
var backdropUnstyledClasses;
var init_backdropUnstyledClasses = __esm({
  "../../node_modules/@mui/core/BackdropUnstyled/backdropUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    init_generateUtilityClass2();
    backdropUnstyledClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
  }
});

// ../../node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "../../node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React50 = require_react();
        var _assign = require_object_assign();
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports2.Fragment = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports2.Fragment = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React50.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format2, args);
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports2.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports2.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c3 = controlLines.length - 1;
              while (s >= 1 && c3 >= 0 && sampleLines[s] !== controlLines[c3]) {
                c3--;
              }
              for (; s >= 1 && c3 >= 0; s--, c3--) {
                if (sampleLines[s] !== controlLines[c3]) {
                  if (s !== 1 || c3 !== 1) {
                    do {
                      s--;
                      c3--;
                      if (c3 < 0 || sampleLines[s] !== controlLines[c3]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c3 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config2, self2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config2, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              key = "" + maybeKey;
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            if (hasValidRef(config2)) {
              ref = config2.ref;
              warnIfStringRefCannotBeAutoConverted(config2, self2);
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement5(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentName(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          {
            if (typeof node2 !== "object") {
              return;
            }
            if (Array.isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === exports2.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx3 = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        exports2.jsx = jsx3;
        exports2.jsxs = jsxs;
      })();
    }
  }
});

// ../../node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "../../node_modules/react/jsx-runtime.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// ../../node_modules/@mui/core/BackdropUnstyled/BackdropUnstyled.js
var React15, import_prop_types4, import_jsx_runtime, _excluded, useUtilityClasses, BackdropUnstyled, BackdropUnstyled_default;
var init_BackdropUnstyled = __esm({
  "../../node_modules/@mui/core/BackdropUnstyled/BackdropUnstyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React15 = __toModule(require_react());
    import_prop_types4 = __toModule(require_prop_types());
    init_clsx_m();
    init_composeClasses2();
    init_isHostComponent();
    init_backdropUnstyledClasses();
    import_jsx_runtime = __toModule(require_jsx_runtime());
    _excluded = ["classes", "className", "invisible", "component", "components", "componentsProps", "theme"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ["root", invisible && "invisible"]
      };
      return composeClasses(slots, getBackdropUtilityClass, classes);
    };
    BackdropUnstyled = /* @__PURE__ */ React15.forwardRef(function BackdropUnstyled2(props, ref) {
      const {
        classes: classesProp,
        className,
        invisible = false,
        component = "div",
        components = {},
        componentsProps = {},
        theme
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        classes: classesProp,
        invisible
      });
      const classes = useUtilityClasses(ownerState);
      const Root = components.Root || component;
      const rootProps = componentsProps.root || {};
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Root, _extends({
        "aria-hidden": true
      }, rootProps, !isHostComponent_default(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState),
        theme
      }, {
        ref
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className)
      }));
    });
    true ? BackdropUnstyled.propTypes = {
      children: import_prop_types4.default.node,
      classes: import_prop_types4.default.object,
      className: import_prop_types4.default.string,
      component: import_prop_types4.default.elementType,
      components: import_prop_types4.default.shape({
        Root: import_prop_types4.default.elementType
      }),
      componentsProps: import_prop_types4.default.object,
      invisible: import_prop_types4.default.bool
    } : void 0;
    BackdropUnstyled_default = BackdropUnstyled;
  }
});

// ../../node_modules/@mui/core/BackdropUnstyled/index.js
var init_BackdropUnstyled2 = __esm({
  "../../node_modules/@mui/core/BackdropUnstyled/index.js"() {
    init_BackdropUnstyled();
  }
});

// ../../node_modules/@mui/core/BadgeUnstyled/badgeUnstyledClasses.js
function getBadgeUtilityClass(slot) {
  return generateUtilityClass("MuiBadge", slot);
}
var badgeUnstyledClasses, badgeUnstyledClasses_default;
var init_badgeUnstyledClasses = __esm({
  "../../node_modules/@mui/core/BadgeUnstyled/badgeUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    init_generateUtilityClass2();
    badgeUnstyledClasses = generateUtilityClasses("MuiBadge", ["root", "badge", "dot", "standard", "anchorOriginTopLeftCircular", "anchorOriginTopLeftRectangular", "anchorOriginTopRightCircular", "anchorOriginTopRightRectangular", "anchorOriginBottomLeftCircular", "anchorOriginBottomLeftRectangular", "anchorOriginBottomRightCircular", "anchorOriginBottomRightRectangular", "invisible"]);
    badgeUnstyledClasses_default = badgeUnstyledClasses;
  }
});

// ../../node_modules/@mui/core/BadgeUnstyled/BadgeUnstyled.js
var React16, import_prop_types5, import_jsx_runtime2, import_jsx_runtime3, _excluded2, useUtilityClasses2, BadgeUnstyled, BadgeUnstyled_default;
var init_BadgeUnstyled = __esm({
  "../../node_modules/@mui/core/BadgeUnstyled/BadgeUnstyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React16 = __toModule(require_react());
    import_prop_types5 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_isHostComponent();
    init_composeClasses2();
    init_badgeUnstyledClasses();
    import_jsx_runtime2 = __toModule(require_jsx_runtime());
    import_jsx_runtime3 = __toModule(require_jsx_runtime());
    _excluded2 = ["anchorOrigin", "classes", "badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "overlap", "showZero", "variant", "theme"];
    useUtilityClasses2 = (ownerState) => {
      const {
        variant,
        anchorOrigin,
        overlap,
        invisible,
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        badge: ["badge", variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, invisible && "invisible"]
      };
      return composeClasses(slots, getBadgeUtilityClass, classes);
    };
    BadgeUnstyled = /* @__PURE__ */ React16.forwardRef(function BadgeUnstyled2(props, ref) {
      const {
        anchorOrigin: anchorOriginProp = {
          vertical: "top",
          horizontal: "right"
        },
        classes: classesProp,
        badgeContent: badgeContentProp,
        component = "span",
        children,
        className,
        components = {},
        componentsProps = {},
        invisible: invisibleProp,
        max: maxProp = 99,
        overlap: overlapProp = "rectangular",
        showZero = false,
        variant: variantProp = "standard",
        theme
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
      const prevProps = usePreviousProps_default({
        anchorOrigin: anchorOriginProp,
        badgeContent: badgeContentProp,
        max: maxProp,
        overlap: overlapProp,
        variant: variantProp
      });
      let invisible = invisibleProp;
      if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== "dot")) {
        invisible = true;
      }
      const {
        anchorOrigin = anchorOriginProp,
        badgeContent,
        max = maxProp,
        overlap = overlapProp,
        variant = variantProp
      } = invisible ? prevProps : props;
      const ownerState = _extends({}, props, {
        anchorOrigin,
        badgeContent,
        classes: classesProp,
        invisible,
        max,
        overlap,
        variant
      });
      let displayValue = "";
      if (variant !== "dot") {
        displayValue = badgeContent > max ? `${max}+` : badgeContent;
      }
      const classes = useUtilityClasses2(ownerState);
      const Root = components.Root || component;
      const rootProps = componentsProps.root || {};
      const Badge3 = components.Badge || "span";
      const badgeProps = componentsProps.badge || {};
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState),
        theme
      }, {
        ref
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [children, /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Badge3, _extends({}, badgeProps, !isHostComponent_default(Badge3) && {
          ownerState: _extends({}, ownerState, badgeProps.ownerState),
          theme
        }, {
          className: clsx_m_default(classes.badge, badgeProps.className),
          children: displayValue
        }))]
      }));
    });
    true ? BadgeUnstyled.propTypes = {
      anchorOrigin: import_prop_types5.default.shape({
        horizontal: import_prop_types5.default.oneOf(["left", "right"]).isRequired,
        vertical: import_prop_types5.default.oneOf(["bottom", "top"]).isRequired
      }),
      badgeContent: import_prop_types5.default.node,
      children: import_prop_types5.default.node,
      classes: import_prop_types5.default.object,
      className: import_prop_types5.default.string,
      component: import_prop_types5.default.elementType,
      components: import_prop_types5.default.shape({
        Badge: import_prop_types5.default.elementType,
        Root: import_prop_types5.default.elementType
      }),
      componentsProps: import_prop_types5.default.object,
      invisible: import_prop_types5.default.bool,
      max: import_prop_types5.default.number,
      overlap: import_prop_types5.default.oneOf(["circular", "rectangular"]),
      showZero: import_prop_types5.default.bool,
      variant: import_prop_types5.default.string
    } : void 0;
    BadgeUnstyled_default = BadgeUnstyled;
  }
});

// ../../node_modules/@mui/core/BadgeUnstyled/index.js
var init_BadgeUnstyled2 = __esm({
  "../../node_modules/@mui/core/BadgeUnstyled/index.js"() {
    init_BadgeUnstyled();
    init_badgeUnstyledClasses();
  }
});

// ../../node_modules/@mui/core/utils/appendOwnerState.js
function appendOwnerState(elementType, existingProps, ownerState) {
  if (isHostComponent_default(elementType)) {
    return existingProps;
  }
  return _extends({}, existingProps, {
    ownerState: _extends({}, existingProps.ownerState, ownerState)
  });
}
var init_appendOwnerState = __esm({
  "../../node_modules/@mui/core/utils/appendOwnerState.js"() {
    init_extends();
    init_isHostComponent();
  }
});

// ../../node_modules/@mui/core/ButtonUnstyled/ButtonUnstyledProps.js
var init_ButtonUnstyledProps = __esm({
  "../../node_modules/@mui/core/ButtonUnstyled/ButtonUnstyledProps.js"() {
  }
});

// ../../node_modules/@mui/core/ButtonUnstyled/index.js
var init_ButtonUnstyled = __esm({
  "../../node_modules/@mui/core/ButtonUnstyled/index.js"() {
    init_ButtonUnstyledProps();
  }
});

// ../../node_modules/@mui/core/FormControlUnstyled/formControlUnstyledClasses.js
var formControlUnstyledClasses;
var init_formControlUnstyledClasses = __esm({
  "../../node_modules/@mui/core/FormControlUnstyled/formControlUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    formControlUnstyledClasses = generateUtilityClasses("MuiFormControl", ["root", "disabled"]);
  }
});

// ../../node_modules/@mui/core/FormControlUnstyled/index.js
var init_FormControlUnstyled = __esm({
  "../../node_modules/@mui/core/FormControlUnstyled/index.js"() {
    init_formControlUnstyledClasses();
  }
});

// ../../node_modules/@mui/core/Portal/Portal.js
function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
var React17, ReactDOM2, import_prop_types6, Portal, Portal_default;
var init_Portal = __esm({
  "../../node_modules/@mui/core/Portal/Portal.js"() {
    React17 = __toModule(require_react());
    ReactDOM2 = __toModule(require_react_dom());
    import_prop_types6 = __toModule(require_prop_types());
    init_esm();
    Portal = /* @__PURE__ */ React17.forwardRef(function Portal2(props, ref) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = React17.useState(null);
      const handleRef = useForkRef(/* @__PURE__ */ React17.isValidElement(children) ? children.ref : null, ref);
      useEnhancedEffect_default(() => {
        if (!disablePortal) {
          setMountNode(getContainer(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect_default(() => {
        if (mountNode && !disablePortal) {
          setRef(ref, mountNode);
          return () => {
            setRef(ref, null);
          };
        }
        return void 0;
      }, [ref, mountNode, disablePortal]);
      if (disablePortal) {
        if (/* @__PURE__ */ React17.isValidElement(children)) {
          return /* @__PURE__ */ React17.cloneElement(children, {
            ref: handleRef
          });
        }
        return children;
      }
      return mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode;
    });
    true ? Portal.propTypes = {
      children: import_prop_types6.default.node,
      container: import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.func]),
      disablePortal: import_prop_types6.default.bool
    } : void 0;
    if (true) {
      Portal["propTypes"] = exactProp(Portal.propTypes);
    }
    Portal_default = Portal;
  }
});

// ../../node_modules/@mui/core/Portal/index.js
var init_Portal2 = __esm({
  "../../node_modules/@mui/core/Portal/index.js"() {
    init_Portal();
  }
});

// ../../node_modules/@mui/core/ModalUnstyled/ModalManager.js
function isOverflowing(container) {
  const doc = ownerDocument(container);
  if (doc.body === container) {
    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
  }
  return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
  if (show) {
    element.setAttribute("aria-hidden", "true");
  } else {
    element.removeAttribute("aria-hidden");
  }
}
function getPaddingRight(element) {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
  const blacklist = [mountElement, currentElement, ...elementsToExclude];
  const blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
  [].forEach.call(container.children, (element) => {
    if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
      ariaHidden(element, show);
    }
  });
}
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index) => {
    if (callback(item)) {
      idx = index;
      return true;
    }
    return false;
  });
  return idx;
}
function handleContainer(containerInfo, props) {
  const restoreStyle = [];
  const container = containerInfo.container;
  if (!props.disableScrollLock) {
    if (isOverflowing(container)) {
      const scrollbarSize = getScrollbarSize(ownerDocument(container));
      restoreStyle.push({
        value: container.style.paddingRight,
        property: "padding-right",
        el: container
      });
      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
      const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
      [].forEach.call(fixedElements2, (element) => {
        restoreStyle.push({
          value: element.style.paddingRight,
          property: "padding-right",
          el: element
        });
        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
      });
    }
    const parent = container.parentElement;
    const containerWindow = ownerWindow(container);
    const scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
    restoreStyle.push({
      value: scrollContainer.style.overflow,
      property: "overflow",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowX,
      property: "overflow-x",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowY,
      property: "overflow-y",
      el: scrollContainer
    });
    scrollContainer.style.overflow = "hidden";
  }
  const restore2 = () => {
    restoreStyle.forEach(({
      value,
      el,
      property
    }) => {
      if (value) {
        el.style.setProperty(property, value);
      } else {
        el.style.removeProperty(property);
      }
    });
  };
  return restore2;
}
function getHiddenSiblings(container) {
  const hiddenSiblings = [];
  [].forEach.call(container.children, (element) => {
    if (element.getAttribute("aria-hidden") === "true") {
      hiddenSiblings.push(element);
    }
  });
  return hiddenSiblings;
}
var ModalManager;
var init_ModalManager = __esm({
  "../../node_modules/@mui/core/ModalUnstyled/ModalManager.js"() {
    init_esm();
    ModalManager = class {
      constructor() {
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, true);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    };
  }
});

// ../../node_modules/@mui/core/Unstable_TrapFocus/Unstable_TrapFocus.js
function getTabIndex(node2) {
  const tabindexAttr = parseInt(node2.getAttribute("tabindex"), 10);
  if (!Number.isNaN(tabindexAttr)) {
    return tabindexAttr;
  }
  if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
    return 0;
  }
  return node2.tabIndex;
}
function isNonTabbableRadio(node2) {
  if (node2.tagName !== "INPUT" || node2.type !== "radio") {
    return false;
  }
  if (!node2.name) {
    return false;
  }
  const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
  let roving = getRadio(`[name="${node2.name}"]:checked`);
  if (!roving) {
    roving = getRadio(`[name="${node2.name}"]`);
  }
  return roving !== node2;
}
function isNodeMatchingSelectorFocusable(node2) {
  if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
    return false;
  }
  return true;
}
function defaultGetTabbable(root) {
  const regularTabNodes = [];
  const orderedTabNodes = [];
  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
    const nodeTabIndex = getTabIndex(node2);
    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
      return;
    }
    if (nodeTabIndex === 0) {
      regularTabNodes.push(node2);
    } else {
      orderedTabNodes.push({
        documentOrder: i,
        tabIndex: nodeTabIndex,
        node: node2
      });
    }
  });
  return orderedTabNodes.sort((a2, b2) => a2.tabIndex === b2.tabIndex ? a2.documentOrder - b2.documentOrder : a2.tabIndex - b2.tabIndex).map((a2) => a2.node).concat(regularTabNodes);
}
function defaultIsEnabled() {
  return true;
}
function Unstable_TrapFocus(props) {
  const {
    children,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    getTabbable = defaultGetTabbable,
    isEnabled = defaultIsEnabled,
    open: open2
  } = props;
  const ignoreNextEnforceFocus = React18.useRef();
  const sentinelStart = React18.useRef(null);
  const sentinelEnd = React18.useRef(null);
  const nodeToRestore = React18.useRef(null);
  const reactFocusEventTarget = React18.useRef(null);
  const activated = React18.useRef(false);
  const rootRef = React18.useRef(null);
  const handleRef = useForkRef(children.ref, rootRef);
  const lastKeydown = React18.useRef(null);
  React18.useEffect(() => {
    if (!open2 || !rootRef.current) {
      return;
    }
    activated.current = !disableAutoFocus;
  }, [disableAutoFocus, open2]);
  React18.useEffect(() => {
    if (!open2 || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    if (!rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute("tabIndex")) {
        if (true) {
          console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
        }
        rootRef.current.setAttribute("tabIndex", -1);
      }
      if (activated.current) {
        rootRef.current.focus();
      }
    }
    return () => {
      if (!disableRestoreFocus) {
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          ignoreNextEnforceFocus.current = true;
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
  }, [open2]);
  React18.useEffect(() => {
    if (!open2 || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    const contain = (nativeEvent) => {
      const {
        current: rootElement
      } = rootRef;
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }
      if (!rootElement.contains(doc.activeElement)) {
        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (isShiftTab) {
            focusPrevious.focus();
          } else {
            focusNext.focus();
          }
        } else {
          rootElement.focus();
        }
      }
    };
    const loopFocus = (nativeEvent) => {
      lastKeydown.current = nativeEvent;
      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
        return;
      }
      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
        ignoreNextEnforceFocus.current = true;
        sentinelEnd.current.focus();
      }
    };
    doc.addEventListener("focusin", contain);
    doc.addEventListener("keydown", loopFocus, true);
    const interval = setInterval(() => {
      if (doc.activeElement.tagName === "BODY") {
        contain();
      }
    }, 50);
    return () => {
      clearInterval(interval);
      doc.removeEventListener("focusin", contain);
      doc.removeEventListener("keydown", loopFocus, true);
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open2, getTabbable]);
  const onFocus = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
    reactFocusEventTarget.current = event.target;
    const childrenPropsHandler = children.props.onFocus;
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const handleFocusSentinel = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(React18.Fragment, {
    children: [/* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", {
      tabIndex: 0,
      onFocus: handleFocusSentinel,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), /* @__PURE__ */ React18.cloneElement(children, {
      ref: handleRef,
      onFocus
    }), /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", {
      tabIndex: 0,
      onFocus: handleFocusSentinel,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    })]
  });
}
var React18, import_prop_types7, import_jsx_runtime4, import_jsx_runtime5, candidatesSelector, Unstable_TrapFocus_default;
var init_Unstable_TrapFocus = __esm({
  "../../node_modules/@mui/core/Unstable_TrapFocus/Unstable_TrapFocus.js"() {
    React18 = __toModule(require_react());
    import_prop_types7 = __toModule(require_prop_types());
    init_esm();
    import_jsx_runtime4 = __toModule(require_jsx_runtime());
    import_jsx_runtime5 = __toModule(require_jsx_runtime());
    candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
    true ? Unstable_TrapFocus.propTypes = {
      children: elementAcceptingRef_default,
      disableAutoFocus: import_prop_types7.default.bool,
      disableEnforceFocus: import_prop_types7.default.bool,
      disableRestoreFocus: import_prop_types7.default.bool,
      getTabbable: import_prop_types7.default.func,
      isEnabled: import_prop_types7.default.func,
      open: import_prop_types7.default.bool.isRequired
    } : void 0;
    if (true) {
      Unstable_TrapFocus["propTypes"] = exactProp(Unstable_TrapFocus.propTypes);
    }
    Unstable_TrapFocus_default = Unstable_TrapFocus;
  }
});

// ../../node_modules/@mui/core/Unstable_TrapFocus/index.js
var init_Unstable_TrapFocus2 = __esm({
  "../../node_modules/@mui/core/Unstable_TrapFocus/index.js"() {
    init_Unstable_TrapFocus();
  }
});

// ../../node_modules/@mui/core/ModalUnstyled/modalUnstyledClasses.js
function getModalUtilityClass(slot) {
  return generateUtilityClass("MuiModal", slot);
}
var modalUnstyledClasses;
var init_modalUnstyledClasses = __esm({
  "../../node_modules/@mui/core/ModalUnstyled/modalUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    init_generateUtilityClass2();
    modalUnstyledClasses = generateUtilityClasses("MuiModal", ["root", "hidden"]);
  }
});

// ../../node_modules/@mui/core/ModalUnstyled/ModalUnstyled.js
function getContainer2(container) {
  return typeof container === "function" ? container() : container;
}
function getHasTransition(props) {
  return props.children ? props.children.props.hasOwnProperty("in") : false;
}
var React19, import_prop_types8, import_jsx_runtime6, import_jsx_runtime7, _excluded3, useUtilityClasses3, defaultManager, ModalUnstyled, ModalUnstyled_default;
var init_ModalUnstyled = __esm({
  "../../node_modules/@mui/core/ModalUnstyled/ModalUnstyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React19 = __toModule(require_react());
    import_prop_types8 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_composeClasses2();
    init_isHostComponent();
    init_Portal2();
    init_ModalManager();
    init_Unstable_TrapFocus2();
    init_modalUnstyledClasses();
    import_jsx_runtime6 = __toModule(require_jsx_runtime());
    import_jsx_runtime7 = __toModule(require_jsx_runtime());
    _excluded3 = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];
    useUtilityClasses3 = (ownerState) => {
      const {
        open: open2,
        exited,
        classes
      } = ownerState;
      const slots = {
        root: ["root", !open2 && exited && "hidden"]
      };
      return composeClasses(slots, getModalUtilityClass, classes);
    };
    defaultManager = new ModalManager();
    ModalUnstyled = /* @__PURE__ */ React19.forwardRef(function ModalUnstyled2(props, ref) {
      const {
        BackdropComponent,
        BackdropProps,
        children,
        classes: classesProp,
        className,
        closeAfterTransition = false,
        component = "div",
        components = {},
        componentsProps = {},
        container,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        manager = defaultManager,
        onBackdropClick,
        onClose,
        onKeyDown,
        open: open2,
        theme,
        onTransitionEnter,
        onTransitionExited
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
      const [exited, setExited] = React19.useState(true);
      const modal = React19.useRef({});
      const mountNodeRef = React19.useRef(null);
      const modalRef = React19.useRef(null);
      const handleRef = useForkRef(modalRef, ref);
      const hasTransition = getHasTransition(props);
      const getDoc = () => ownerDocument(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });
        modalRef.current.scrollTop = 0;
      };
      const handleOpen = useEventCallback(() => {
        const resolvedContainer = getContainer2(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = React19.useCallback(() => manager.isTopModal(getModal()), [manager]);
      const handlePortalRef = useEventCallback((node2) => {
        mountNodeRef.current = node2;
        if (!node2) {
          return;
        }
        if (open2 && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, true);
        }
      });
      const handleClose = React19.useCallback(() => {
        manager.remove(getModal());
      }, [manager]);
      React19.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      React19.useEffect(() => {
        if (open2) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open2, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const ownerState = _extends({}, props, {
        classes: classesProp,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
      });
      const classes = useUtilityClasses3(ownerState);
      if (!keepMounted && !open2 && (!hasTransition || exited)) {
        return null;
      }
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      const handleBackdropClick = (event) => {
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const handleKeyDown2 = (event) => {
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.key !== "Escape" || !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          event.stopPropagation();
          if (onClose) {
            onClose(event, "escapeKeyDown");
          }
        }
      };
      const childProps = {};
      if (children.props.tabIndex === void 0) {
        childProps.tabIndex = "-1";
      }
      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }
      const Root = components.Root || component;
      const rootProps = componentsProps.root || {};
      return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Portal_default, {
        ref: handlePortalRef,
        container,
        disablePortal,
        children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Root, _extends({
          role: "presentation"
        }, rootProps, !isHostComponent_default(Root) && {
          as: component,
          ownerState: _extends({}, ownerState, rootProps.ownerState),
          theme
        }, other, {
          ref: handleRef,
          onKeyDown: handleKeyDown2,
          className: clsx_m_default(classes.root, rootProps.className, className),
          children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(BackdropComponent, _extends({
            open: open2,
            onClick: handleBackdropClick
          }, BackdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Unstable_TrapFocus_default, {
            disableEnforceFocus,
            disableAutoFocus,
            disableRestoreFocus,
            isEnabled: isTopModal,
            open: open2,
            children: /* @__PURE__ */ React19.cloneElement(children, childProps)
          })]
        }))
      });
    });
    true ? ModalUnstyled.propTypes = {
      BackdropComponent: import_prop_types8.default.elementType,
      BackdropProps: import_prop_types8.default.object,
      children: elementAcceptingRef_default.isRequired,
      classes: import_prop_types8.default.object,
      className: import_prop_types8.default.string,
      closeAfterTransition: import_prop_types8.default.bool,
      component: import_prop_types8.default.elementType,
      components: import_prop_types8.default.shape({
        Root: import_prop_types8.default.elementType
      }),
      componentsProps: import_prop_types8.default.object,
      container: import_prop_types8.default.oneOfType([HTMLElementType, import_prop_types8.default.func]),
      disableAutoFocus: import_prop_types8.default.bool,
      disableEnforceFocus: import_prop_types8.default.bool,
      disableEscapeKeyDown: import_prop_types8.default.bool,
      disablePortal: import_prop_types8.default.bool,
      disableRestoreFocus: import_prop_types8.default.bool,
      disableScrollLock: import_prop_types8.default.bool,
      hideBackdrop: import_prop_types8.default.bool,
      keepMounted: import_prop_types8.default.bool,
      onBackdropClick: import_prop_types8.default.func,
      onClose: import_prop_types8.default.func,
      onKeyDown: import_prop_types8.default.func,
      open: import_prop_types8.default.bool.isRequired
    } : void 0;
    ModalUnstyled_default = ModalUnstyled;
  }
});

// ../../node_modules/@mui/core/ModalUnstyled/index.js
var init_ModalUnstyled2 = __esm({
  "../../node_modules/@mui/core/ModalUnstyled/index.js"() {
    init_ModalUnstyled();
  }
});

// ../../node_modules/@mui/core/SliderUnstyled/sliderUnstyledClasses.js
function getSliderUtilityClass(slot) {
  return generateUtilityClass("MuiSlider", slot);
}
var sliderUnstyledClasses, sliderUnstyledClasses_default;
var init_sliderUnstyledClasses = __esm({
  "../../node_modules/@mui/core/SliderUnstyled/sliderUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    init_generateUtilityClass2();
    sliderUnstyledClasses = generateUtilityClasses("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel"]);
    sliderUnstyledClasses_default = sliderUnstyledClasses;
  }
});

// ../../node_modules/@mui/core/SliderUnstyled/SliderValueLabelUnstyled.js
function SliderValueLabelUnstyled(props) {
  const {
    children,
    className,
    value,
    theme
  } = props;
  const classes = useValueLabelClasses(props);
  return /* @__PURE__ */ React20.cloneElement(children, {
    className: clsx_m_default(children.props.className)
  }, /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(React20.Fragment, {
    children: [children.props.children, /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", {
      className: clsx_m_default(classes.offset, className),
      theme,
      "aria-hidden": true,
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", {
        className: classes.circle,
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", {
          className: classes.label,
          children: value
        })
      })
    })]
  }));
}
var React20, import_prop_types9, import_jsx_runtime8, import_jsx_runtime9, useValueLabelClasses, SliderValueLabelUnstyled_default;
var init_SliderValueLabelUnstyled = __esm({
  "../../node_modules/@mui/core/SliderUnstyled/SliderValueLabelUnstyled.js"() {
    React20 = __toModule(require_react());
    import_prop_types9 = __toModule(require_prop_types());
    init_clsx_m();
    init_sliderUnstyledClasses();
    import_jsx_runtime8 = __toModule(require_jsx_runtime());
    import_jsx_runtime9 = __toModule(require_jsx_runtime());
    useValueLabelClasses = (props) => {
      const {
        open: open2
      } = props;
      const utilityClasses = {
        offset: clsx_m_default(open2 && sliderUnstyledClasses_default.valueLabelOpen),
        circle: sliderUnstyledClasses_default.valueLabelCircle,
        label: sliderUnstyledClasses_default.valueLabelLabel
      };
      return utilityClasses;
    };
    true ? SliderValueLabelUnstyled.propTypes = {
      children: import_prop_types9.default.element.isRequired,
      className: import_prop_types9.default.string,
      theme: import_prop_types9.default.any,
      value: import_prop_types9.default.node
    } : void 0;
    SliderValueLabelUnstyled_default = SliderValueLabelUnstyled;
  }
});

// ../../node_modules/@mui/core/SliderUnstyled/SliderUnstyled.js
function asc(a2, b2) {
  return a2 - b2;
}
function clamp3(value, min, max) {
  if (value == null) {
    return min;
  }
  return Math.min(Math.max(min, value), max);
}
function findClosest(values3, currentValue) {
  const {
    index: closestIndex
  } = values3.reduce((acc, value, index) => {
    const distance2 = Math.abs(currentValue - value);
    if (acc === null || distance2 < acc.distance || distance2 === acc.distance) {
      return {
        distance: distance2,
        index
      };
    }
    return acc;
  }, null);
  return closestIndex;
}
function trackFinger(event, touchId) {
  if (touchId.current !== void 0 && event.changedTouches) {
    for (let i = 0; i < event.changedTouches.length; i += 1) {
      const touch = event.changedTouches[i];
      if (touch.identifier === touchId.current) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue(percent2, min, max) {
  return (max - min) * percent2 + min;
}
function getDecimalPrecision(num) {
  if (Math.abs(num) < 1) {
    const parts = num.toExponential().split("e-");
    const matissaDecimalPart = parts[0].split(".")[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
  }
  const decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
  const nearest = Math.round((value - min) / step) * step + min;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({
  values: values3,
  newValue,
  index
}) {
  const output = values3.slice();
  output[index] = newValue;
  return output.sort(asc);
}
function focusThumb({
  sliderRef,
  activeIndex,
  setActive
}) {
  const doc = ownerDocument(sliderRef.current);
  if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute("data-index")) !== activeIndex) {
    sliderRef.current.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}
function doesSupportTouchActionNone() {
  if (cachedSupportsTouchActionNone === void 0) {
    if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
      cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
    } else {
      cachedSupportsTouchActionNone = true;
    }
  }
  return cachedSupportsTouchActionNone;
}
var React21, import_prop_types10, import_jsx_runtime10, import_jsx_runtime11, _excluded4, INTENTIONAL_DRAG_COUNT_THRESHOLD, axisProps, Identity, cachedSupportsTouchActionNone, useUtilityClasses4, Forward, SliderUnstyled, SliderUnstyled_default;
var init_SliderUnstyled = __esm({
  "../../node_modules/@mui/core/SliderUnstyled/SliderUnstyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React21 = __toModule(require_react());
    import_prop_types10 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_isHostComponent();
    init_composeClasses2();
    init_sliderUnstyledClasses();
    init_SliderValueLabelUnstyled();
    import_jsx_runtime10 = __toModule(require_jsx_runtime());
    import_jsx_runtime11 = __toModule(require_jsx_runtime());
    _excluded4 = ["aria-label", "aria-labelledby", "aria-valuetext", "className", "component", "classes", "defaultValue", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];
    INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
    axisProps = {
      horizontal: {
        offset: (percent2) => ({
          left: `${percent2}%`
        }),
        leap: (percent2) => ({
          width: `${percent2}%`
        })
      },
      "horizontal-reverse": {
        offset: (percent2) => ({
          right: `${percent2}%`
        }),
        leap: (percent2) => ({
          width: `${percent2}%`
        })
      },
      vertical: {
        offset: (percent2) => ({
          bottom: `${percent2}%`
        }),
        leap: (percent2) => ({
          height: `${percent2}%`
        })
      }
    };
    Identity = (x3) => x3;
    useUtilityClasses4 = (ownerState) => {
      const {
        disabled,
        dragging,
        marked,
        orientation,
        track,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
        rail: ["rail"],
        track: ["track"],
        mark: ["mark"],
        markActive: ["markActive"],
        markLabel: ["markLabel"],
        markLabelActive: ["markLabelActive"],
        valueLabel: ["valueLabel"],
        thumb: ["thumb", disabled && "disabled"],
        active: ["active"],
        disabled: ["disabled"],
        focusVisible: ["focusVisible"]
      };
      return composeClasses(slots, getSliderUtilityClass, classes);
    };
    Forward = ({
      children
    }) => children;
    SliderUnstyled = /* @__PURE__ */ React21.forwardRef(function SliderUnstyled2(props, ref) {
      const {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        "aria-valuetext": ariaValuetext,
        className,
        component = "span",
        classes: classesProp,
        defaultValue,
        disableSwap = false,
        disabled = false,
        getAriaLabel,
        getAriaValueText,
        marks: marksProp = false,
        max = 100,
        min = 0,
        name,
        onChange,
        onChangeCommitted,
        onMouseDown,
        orientation = "horizontal",
        scale: scale2 = Identity,
        step = 1,
        tabIndex,
        track = "normal",
        value: valueProp,
        valueLabelDisplay = "off",
        valueLabelFormat = Identity,
        isRtl = false,
        components = {},
        componentsProps = {}
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
      const touchId = React21.useRef();
      const [active, setActive] = React21.useState(-1);
      const [open2, setOpen] = React21.useState(-1);
      const [dragging, setDragging] = React21.useState(false);
      const moveCount = React21.useRef(0);
      const [valueDerived, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue != null ? defaultValue : min,
        name: "Slider"
      });
      const handleChange = onChange && ((event, value, thumbIndex) => {
        const nativeEvent = event.nativeEvent || event;
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onChange(clonedEvent, value, thumbIndex);
      });
      const range = Array.isArray(valueDerived);
      let values3 = range ? valueDerived.slice().sort(asc) : [valueDerived];
      values3 = values3.map((value) => clamp3(value, min, max));
      const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_4, index) => ({
        value: min + step * index
      })) : marksProp || [];
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusVisible, setFocusVisible] = React21.useState(-1);
      const sliderRef = React21.useRef();
      const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
      const handleRef = useForkRef(ref, handleFocusRef);
      const handleFocus = useEventCallback((event) => {
        const index = Number(event.currentTarget.getAttribute("data-index"));
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(index);
        }
        setOpen(index);
      });
      const handleBlur = useEventCallback((event) => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(-1);
        }
        setOpen(-1);
      });
      const handleMouseOver = useEventCallback((event) => {
        const index = Number(event.currentTarget.getAttribute("data-index"));
        setOpen(index);
      });
      const handleMouseLeave = useEventCallback(() => {
        setOpen(-1);
      });
      useEnhancedEffect_default(() => {
        if (disabled && sliderRef.current.contains(document.activeElement)) {
          document.activeElement.blur();
        }
      }, [disabled]);
      if (disabled && active !== -1) {
        setActive(-1);
      }
      if (disabled && focusVisible !== -1) {
        setFocusVisible(-1);
      }
      const handleHiddenInputChange = useEventCallback((event) => {
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value = values3[index];
        const marksValues = marks.map((mark) => mark.value);
        const marksIndex = marksValues.indexOf(value);
        let newValue = event.target.valueAsNumber;
        if (marks && step == null) {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
        newValue = clamp3(newValue, min, max);
        if (marks && step == null) {
          const markValues = marks.map((mark) => mark.value);
          const currentMarkIndex = markValues.indexOf(values3[index]);
          newValue = newValue < values3[index] ? markValues[currentMarkIndex - 1] : markValues[currentMarkIndex + 1];
        }
        if (range) {
          if (disableSwap) {
            newValue = clamp3(newValue, values3[index - 1] || -Infinity, values3[index + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values3,
            newValue,
            index
          });
          let activeIndex = index;
          if (!disableSwap) {
            activeIndex = newValue.indexOf(previousValue);
          }
          focusThumb({
            sliderRef,
            activeIndex
          });
        }
        setValueState(newValue);
        setFocusVisible(index);
        if (handleChange) {
          handleChange(event, newValue, index);
        }
        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }
      });
      const previousIndex = React21.useRef();
      let axis = orientation;
      if (isRtl && orientation !== "vertical") {
        axis += "-reverse";
      }
      const getFingerNewValue = ({
        finger,
        move = false,
        values: values22
      }) => {
        const {
          current: slider
        } = sliderRef;
        const {
          width: width2,
          height: height2,
          bottom: bottom2,
          left: left2
        } = slider.getBoundingClientRect();
        let percent2;
        if (axis.indexOf("vertical") === 0) {
          percent2 = (bottom2 - finger.y) / height2;
        } else {
          percent2 = (finger.x - left2) / width2;
        }
        if (axis.indexOf("-reverse") !== -1) {
          percent2 = 1 - percent2;
        }
        let newValue;
        newValue = percentToValue(percent2, min, max);
        if (step) {
          newValue = roundValueToStep(newValue, step, min);
        } else {
          const marksValues = marks.map((mark) => mark.value);
          const closestIndex = findClosest(marksValues, newValue);
          newValue = marksValues[closestIndex];
        }
        newValue = clamp3(newValue, min, max);
        let activeIndex = 0;
        if (range) {
          if (!move) {
            activeIndex = findClosest(values22, newValue);
          } else {
            activeIndex = previousIndex.current;
          }
          if (disableSwap) {
            newValue = clamp3(newValue, values22[activeIndex - 1] || -Infinity, values22[activeIndex + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values22,
            newValue,
            index: activeIndex
          });
          if (!(disableSwap && move)) {
            activeIndex = newValue.indexOf(previousValue);
            previousIndex.current = activeIndex;
          }
        }
        return {
          newValue,
          activeIndex
        };
      };
      const handleTouchMove = useEventCallback((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) {
          return;
        }
        moveCount.current += 1;
        if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
          handleTouchEnd(nativeEvent);
          return;
        }
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          move: true,
          values: values3
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
          setDragging(true);
        }
        if (handleChange) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      });
      const handleTouchEnd = useEventCallback((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) {
          return;
        }
        const {
          newValue
        } = getFingerNewValue({
          finger,
          values: values3
        });
        setActive(-1);
        if (nativeEvent.type === "touchend") {
          setOpen(-1);
        }
        if (onChangeCommitted) {
          onChangeCommitted(nativeEvent, newValue);
        }
        touchId.current = void 0;
        stopListening();
      });
      const handleTouchStart = useEventCallback((nativeEvent) => {
        if (!doesSupportTouchActionNone()) {
          nativeEvent.preventDefault();
        }
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) {
          touchId.current = touch.identifier;
        }
        const finger = trackFinger(nativeEvent, touchId);
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          values: values3
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("touchmove", handleTouchMove);
        doc.addEventListener("touchend", handleTouchEnd);
      });
      const stopListening = React21.useCallback(() => {
        const doc = ownerDocument(sliderRef.current);
        doc.removeEventListener("mousemove", handleTouchMove);
        doc.removeEventListener("mouseup", handleTouchEnd);
        doc.removeEventListener("touchmove", handleTouchMove);
        doc.removeEventListener("touchend", handleTouchEnd);
      }, [handleTouchEnd, handleTouchMove]);
      React21.useEffect(() => {
        const {
          current: slider
        } = sliderRef;
        slider.addEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        return () => {
          slider.removeEventListener("touchstart", handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          stopListening();
        };
      }, [stopListening, handleTouchStart]);
      React21.useEffect(() => {
        if (disabled) {
          stopListening();
        }
      }, [disabled, stopListening]);
      const handleMouseDown = useEventCallback((event) => {
        if (onMouseDown) {
          onMouseDown(event);
        }
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        const finger = trackFinger(event, touchId);
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          values: values3
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange) {
          handleChange(event, newValue, activeIndex);
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("mousemove", handleTouchMove);
        doc.addEventListener("mouseup", handleTouchEnd);
      });
      const trackOffset = valueToPercent(range ? values3[0] : min, min, max);
      const trackLeap = valueToPercent(values3[values3.length - 1], min, max) - trackOffset;
      const trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
      const Root = components.Root || component;
      const rootProps = componentsProps.root || {};
      const Rail = components.Rail || "span";
      const railProps = componentsProps.rail || {};
      const Track = components.Track || "span";
      const trackProps = componentsProps.track || {};
      const Thumb = components.Thumb || "span";
      const thumbProps = componentsProps.thumb || {};
      const ValueLabel = components.ValueLabel || SliderValueLabelUnstyled_default;
      const valueLabelProps = componentsProps.valueLabel || {};
      const Mark = components.Mark || "span";
      const markProps = componentsProps.mark || {};
      const MarkLabel = components.MarkLabel || "span";
      const markLabelProps = componentsProps.markLabel || {};
      const ownerState = _extends({}, props, {
        classes: classesProp,
        disabled,
        dragging,
        isRtl,
        marked: marks.length > 0 && marks.some((mark) => mark.label),
        max,
        min,
        orientation,
        scale: scale2,
        step,
        track,
        valueLabelDisplay,
        valueLabelFormat
      });
      const classes = useUtilityClasses4(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Root, _extends({
        ref: handleRef,
        onMouseDown: handleMouseDown
      }, rootProps, !isHostComponent_default(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [/* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Rail, _extends({}, railProps, !isHostComponent_default(Rail) && {
          ownerState: _extends({}, ownerState, railProps.ownerState)
        }, {
          className: clsx_m_default(classes.rail, railProps.className)
        })), /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Track, _extends({}, trackProps, !isHostComponent_default(Track) && {
          ownerState: _extends({}, ownerState, trackProps.ownerState)
        }, {
          className: clsx_m_default(classes.track, trackProps.className),
          style: _extends({}, trackStyle, trackProps.style)
        })), marks.map((mark, index) => {
          const percent2 = valueToPercent(mark.value, min, max);
          const style3 = axisProps[axis].offset(percent2);
          let markActive;
          if (track === false) {
            markActive = values3.indexOf(mark.value) !== -1;
          } else {
            markActive = track === "normal" && (range ? mark.value >= values3[0] && mark.value <= values3[values3.length - 1] : mark.value <= values3[0]) || track === "inverted" && (range ? mark.value <= values3[0] || mark.value >= values3[values3.length - 1] : mark.value >= values3[0]);
          }
          return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(React21.Fragment, {
            children: [/* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Mark, _extends({
              "data-index": index
            }, markProps, !isHostComponent_default(Mark) && {
              ownerState: _extends({}, ownerState, markProps.ownerState)
            }, {
              markActive,
              style: _extends({}, style3, markProps.style),
              className: clsx_m_default(classes.mark, markProps.className, markActive && classes.markActive)
            })), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(MarkLabel, _extends({
              "aria-hidden": true,
              "data-index": index
            }, markLabelProps, !isHostComponent_default(MarkLabel) && {
              ownerState: _extends({}, ownerState, markLabelProps.ownerState)
            }, {
              markLabelActive: markActive,
              style: _extends({}, style3, markLabelProps.style),
              className: clsx_m_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
              children: mark.label
            })) : null]
          }, mark.value);
        }), values3.map((value, index) => {
          const percent2 = valueToPercent(value, min, max);
          const style3 = axisProps[axis].offset(percent2);
          const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabel;
          return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(React21.Fragment, {
            children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ValueLabelComponent, _extends({
              valueLabelFormat,
              valueLabelDisplay,
              value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale2(value), index) : valueLabelFormat,
              index,
              open: open2 === index || active === index || valueLabelDisplay === "on",
              disabled
            }, valueLabelProps, {
              className: clsx_m_default(classes.valueLabel, valueLabelProps.className)
            }, !isHostComponent_default(ValueLabel) && {
              ownerState: _extends({}, ownerState, valueLabelProps.ownerState)
            }, {
              children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Thumb, _extends({
                "data-index": index,
                onMouseOver: handleMouseOver,
                onMouseLeave: handleMouseLeave
              }, thumbProps, {
                className: clsx_m_default(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)
              }, !isHostComponent_default(Thumb) && {
                ownerState: _extends({}, ownerState, thumbProps.ownerState)
              }, {
                style: _extends({}, style3, {
                  pointerEvents: disableSwap && active !== index ? "none" : void 0
                }, thumbProps.style),
                children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("input", {
                  tabIndex,
                  "data-index": index,
                  "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                  "aria-labelledby": ariaLabelledby,
                  "aria-orientation": orientation,
                  "aria-valuemax": scale2(max),
                  "aria-valuemin": scale2(min),
                  "aria-valuenow": scale2(value),
                  "aria-valuetext": getAriaValueText ? getAriaValueText(scale2(value), index) : ariaValuetext,
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  name,
                  type: "range",
                  min: props.min,
                  max: props.max,
                  step: props.step,
                  disabled,
                  value: values3[index],
                  onChange: handleHiddenInputChange,
                  style: _extends({}, visuallyHidden_default, {
                    direction: isRtl ? "rtl" : "ltr",
                    width: "100%",
                    height: "100%"
                  })
                })
              }))
            }))
          }, index);
        })]
      }));
    });
    true ? SliderUnstyled.propTypes = {
      "aria-label": chainPropTypes(import_prop_types10.default.string, (props) => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props["aria-label"] != null) {
          return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
        }
        return null;
      }),
      "aria-labelledby": import_prop_types10.default.string,
      "aria-valuetext": chainPropTypes(import_prop_types10.default.string, (props) => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props["aria-valuetext"] != null) {
          return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
        }
        return null;
      }),
      children: import_prop_types10.default.node,
      classes: import_prop_types10.default.object,
      className: import_prop_types10.default.string,
      component: import_prop_types10.default.elementType,
      components: import_prop_types10.default.shape({
        Mark: import_prop_types10.default.elementType,
        MarkLabel: import_prop_types10.default.elementType,
        Rail: import_prop_types10.default.elementType,
        Root: import_prop_types10.default.elementType,
        Thumb: import_prop_types10.default.elementType,
        Track: import_prop_types10.default.elementType,
        ValueLabel: import_prop_types10.default.elementType
      }),
      componentsProps: import_prop_types10.default.object,
      defaultValue: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.number), import_prop_types10.default.number]),
      disabled: import_prop_types10.default.bool,
      disableSwap: import_prop_types10.default.bool,
      getAriaLabel: import_prop_types10.default.func,
      getAriaValueText: import_prop_types10.default.func,
      isRtl: import_prop_types10.default.bool,
      marks: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
        label: import_prop_types10.default.node,
        value: import_prop_types10.default.number.isRequired
      })), import_prop_types10.default.bool]),
      max: import_prop_types10.default.number,
      min: import_prop_types10.default.number,
      name: import_prop_types10.default.string,
      onChange: import_prop_types10.default.func,
      onChangeCommitted: import_prop_types10.default.func,
      onMouseDown: import_prop_types10.default.func,
      orientation: import_prop_types10.default.oneOf(["horizontal", "vertical"]),
      scale: import_prop_types10.default.func,
      step: import_prop_types10.default.number,
      tabIndex: import_prop_types10.default.number,
      track: import_prop_types10.default.oneOf(["inverted", "normal", false]),
      value: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.number), import_prop_types10.default.number]),
      valueLabelDisplay: import_prop_types10.default.oneOf(["auto", "off", "on"]),
      valueLabelFormat: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.string])
    } : void 0;
    SliderUnstyled_default = SliderUnstyled;
  }
});

// ../../node_modules/@mui/core/SliderUnstyled/index.js
var init_SliderUnstyled2 = __esm({
  "../../node_modules/@mui/core/SliderUnstyled/index.js"() {
    init_SliderUnstyled();
    init_SliderValueLabelUnstyled();
    init_sliderUnstyledClasses();
    init_sliderUnstyledClasses();
  }
});

// ../../node_modules/@mui/core/SwitchUnstyled/useSwitch.js
function useSwitch(props) {
  const {
    checked: checkedProp,
    defaultChecked,
    disabled,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required
  } = props;
  const [checked, setCheckedState] = useControlled({
    controlled: checkedProp,
    default: Boolean(defaultChecked),
    name: "Switch",
    state: "checked"
  });
  const handleInputChange = useEventCallback((event, otherHandler) => {
    if (event.nativeEvent.defaultPrevented) {
      return;
    }
    setCheckedState(event.target.checked);
    onChange == null ? void 0 : onChange(event);
    otherHandler == null ? void 0 : otherHandler(event);
  });
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React22.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React22.useEffect(() => {
    isFocusVisibleRef.current = focusVisible;
  }, [focusVisible, isFocusVisibleRef]);
  const inputRef = React22.useRef(null);
  const handleFocus = useEventCallback((event, otherHandler) => {
    if (!inputRef.current) {
      inputRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
      onFocusVisible == null ? void 0 : onFocusVisible(event);
    }
    onFocus == null ? void 0 : onFocus(event);
    otherHandler == null ? void 0 : otherHandler(event);
  });
  const handleBlur = useEventCallback((event, otherHandler) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    onBlur == null ? void 0 : onBlur(event);
    otherHandler == null ? void 0 : otherHandler(event);
  });
  const handleRefChange = useForkRef(focusVisibleRef, inputRef);
  const getInputProps = (otherProps = {}) => _extends({
    checked: checkedProp,
    defaultChecked,
    disabled,
    readOnly,
    required,
    type: "checkbox"
  }, otherProps, {
    onChange: (event) => handleInputChange(event, otherProps.onChange),
    onFocus: (event) => handleFocus(event, otherProps.onFocus),
    onBlur: (event) => handleBlur(event, otherProps.onBlur),
    ref: handleRefChange
  });
  return {
    checked,
    disabled: Boolean(disabled),
    focusVisible,
    getInputProps,
    readOnly: Boolean(readOnly)
  };
}
var React22;
var init_useSwitch = __esm({
  "../../node_modules/@mui/core/SwitchUnstyled/useSwitch.js"() {
    init_extends();
    React22 = __toModule(require_react());
    init_esm();
  }
});

// ../../node_modules/@mui/core/SwitchUnstyled/switchUnstyledClasses.js
var switchUnstyledClasses, switchUnstyledClasses_default;
var init_switchUnstyledClasses = __esm({
  "../../node_modules/@mui/core/SwitchUnstyled/switchUnstyledClasses.js"() {
    init_generateUtilityClasses2();
    switchUnstyledClasses = generateUtilityClasses("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
    switchUnstyledClasses_default = switchUnstyledClasses;
  }
});

// ../../node_modules/@mui/core/SwitchUnstyled/SwitchUnstyled.js
var React23, import_prop_types11, import_jsx_runtime12, import_jsx_runtime13, _excluded5, SwitchUnstyled;
var init_SwitchUnstyled = __esm({
  "../../node_modules/@mui/core/SwitchUnstyled/SwitchUnstyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React23 = __toModule(require_react());
    import_prop_types11 = __toModule(require_prop_types());
    init_clsx_m();
    init_useSwitch();
    init_switchUnstyledClasses();
    init_appendOwnerState();
    import_jsx_runtime12 = __toModule(require_jsx_runtime());
    import_jsx_runtime13 = __toModule(require_jsx_runtime());
    _excluded5 = ["checked", "className", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];
    SwitchUnstyled = /* @__PURE__ */ React23.forwardRef(function SwitchUnstyled2(props, ref) {
      var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;
      const {
        checked: checkedProp,
        className,
        component,
        components = {},
        componentsProps = {},
        defaultChecked,
        disabled: disabledProp,
        onBlur,
        onChange,
        onFocus,
        onFocusVisible,
        readOnly: readOnlyProp
      } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded5);
      const useSwitchProps = {
        checked: checkedProp,
        defaultChecked,
        disabled: disabledProp,
        onBlur,
        onChange,
        onFocus,
        onFocusVisible,
        readOnly: readOnlyProp
      };
      const {
        getInputProps,
        checked,
        disabled,
        focusVisible,
        readOnly
      } = useSwitch(useSwitchProps);
      const ownerState = _extends({}, props, {
        checked,
        disabled,
        focusVisible,
        readOnly
      });
      const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "span";
      const rootProps = appendOwnerState(Root, _extends({}, otherProps, componentsProps.root), ownerState);
      const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : "span";
      const thumbProps = appendOwnerState(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
      const Input = (_components$Input = components.Input) != null ? _components$Input : "input";
      const inputProps = appendOwnerState(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
      const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : "span";
      const trackProps = appendOwnerState(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
      const stateClasses = clsx_m_default(checked && switchUnstyledClasses_default.checked, disabled && switchUnstyledClasses_default.disabled, focusVisible && switchUnstyledClasses_default.focusVisible, readOnly && switchUnstyledClasses_default.readOnly);
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(Root, _extends({
        ref
      }, rootProps, {
        className: clsx_m_default(switchUnstyledClasses_default.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
        children: [/* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Track, _extends({}, trackProps, {
          className: clsx_m_default(switchUnstyledClasses_default.track, trackProps == null ? void 0 : trackProps.className)
        })), /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Thumb, _extends({}, thumbProps, {
          className: clsx_m_default(switchUnstyledClasses_default.thumb, thumbProps == null ? void 0 : thumbProps.className)
        })), /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Input, _extends({}, getInputProps(inputProps), {
          className: clsx_m_default(switchUnstyledClasses_default.input, inputProps == null ? void 0 : inputProps.className)
        }))]
      }));
    });
    true ? SwitchUnstyled.propTypes = {
      checked: import_prop_types11.default.bool,
      className: import_prop_types11.default.string,
      component: import_prop_types11.default.elementType,
      components: import_prop_types11.default.shape({
        Input: import_prop_types11.default.elementType,
        Root: import_prop_types11.default.elementType,
        Thumb: import_prop_types11.default.elementType,
        Track: import_prop_types11.default.oneOfType([import_prop_types11.default.elementType, import_prop_types11.default.oneOf([null])])
      }),
      componentsProps: import_prop_types11.default.object,
      defaultChecked: import_prop_types11.default.bool,
      disabled: import_prop_types11.default.bool,
      onBlur: import_prop_types11.default.func,
      onChange: import_prop_types11.default.func,
      onFocus: import_prop_types11.default.func,
      onFocusVisible: import_prop_types11.default.func,
      readOnly: import_prop_types11.default.bool,
      required: import_prop_types11.default.bool
    } : void 0;
  }
});

// ../../node_modules/@mui/core/SwitchUnstyled/index.js
var init_SwitchUnstyled2 = __esm({
  "../../node_modules/@mui/core/SwitchUnstyled/index.js"() {
    init_SwitchUnstyled();
    init_useSwitch();
    init_switchUnstyledClasses();
  }
});

// ../../node_modules/@mui/core/utils/index.js
var init_utils9 = __esm({
  "../../node_modules/@mui/core/utils/index.js"() {
    init_isHostComponent();
  }
});

// ../../node_modules/@mui/core/index.js
var init_core = __esm({
  "../../node_modules/@mui/core/index.js"() {
    init_AutocompleteUnstyled();
    init_BackdropUnstyled2();
    init_BadgeUnstyled2();
    init_ButtonUnstyled();
    init_composeClasses2();
    init_generateUtilityClass2();
    init_generateUtilityClasses2();
    init_FormControlUnstyled();
    init_ModalUnstyled2();
    init_SliderUnstyled2();
    init_SwitchUnstyled2();
    init_utils9();
  }
});

// ../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js
var reactPropsRegex, isPropValid, emotion_is_prop_valid_browser_esm_default;
var init_emotion_is_prop_valid_browser_esm = __esm({
  "../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js"() {
    init_emotion_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    isPropValid = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    emotion_is_prop_valid_browser_esm_default = isPropValid;
  }
});

// ../../node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
var import_react41, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, ILLEGAL_ESCAPE_SEQUENCE_ERROR2, createStyled, emotion_styled_base_browser_esm_default;
var init_emotion_styled_base_browser_esm = __esm({
  "../../node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
    init_extends();
    import_react41 = __toModule(require_react());
    init_emotion_is_prop_valid_browser_esm();
    init_emotion_react_browser_esm();
    init_emotion_utils_browser_esm();
    init_emotion_serialize_browser_esm();
    testOmitPropsOnStringTag = emotion_is_prop_valid_browser_esm_default;
    testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
      return key !== "theme";
    };
    getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
      return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
      var shouldForwardProp2;
      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }
      if (typeof shouldForwardProp2 !== "function" && isReal) {
        shouldForwardProp2 = tag.__emotion_forwardProp;
      }
      return shouldForwardProp2;
    };
    ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
    createStyled = function createStyled2(tag, options) {
      if (true) {
        if (tag === void 0) {
          throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
        }
      }
      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;
      if (options !== void 0) {
        identifierName = options.label;
        targetClassName = options.target;
      }
      var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp("as");
      return function() {
        var args = arguments;
        var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== void 0) {
          styles2.push("label:" + identifierName + ";");
        }
        if (args[0] == null || args[0].raw === void 0) {
          styles2.push.apply(styles2, args);
        } else {
          if (args[0][0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles2.push(args[0][0]);
          var len = args.length;
          var i = 1;
          for (; i < len; i++) {
            if (args[0][i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
            }
            styles2.push(args[i], args[0][i]);
          }
        }
        var Styled = withEmotionCache(function(props, cache, ref) {
          var finalTag = shouldUseAs && props.as || baseTag;
          var className = "";
          var classInterpolations = [];
          var mergedProps = props;
          if (props.theme == null) {
            mergedProps = {};
            for (var key in props) {
              mergedProps[key] = props[key];
            }
            mergedProps.theme = (0, import_react41.useContext)(ThemeContext);
          }
          if (typeof props.className === "string") {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }
          var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
          var rules = insertStyles(cache, serialized, typeof finalTag === "string");
          className += cache.key + "-" + serialized.name;
          if (targetClassName !== void 0) {
            className += " " + targetClassName;
          }
          var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
          var newProps = {};
          for (var _key in props) {
            if (shouldUseAs && _key === "as")
              continue;
            if (finalShouldForwardProp(_key)) {
              newProps[_key] = props[_key];
            }
          }
          newProps.className = className;
          newProps.ref = ref;
          var ele = /* @__PURE__ */ (0, import_react41.createElement)(finalTag, newProps);
          return ele;
        });
        Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles2;
        Styled.__emotion_forwardProp = shouldForwardProp2;
        Object.defineProperty(Styled, "toString", {
          value: function value() {
            if (targetClassName === void 0 && true) {
              return "NO_COMPONENT_SELECTOR";
            }
            return "." + targetClassName;
          }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
          return createStyled2(nextTag, _extends({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          })).apply(void 0, styles2);
        };
        return Styled;
      };
    };
    emotion_styled_base_browser_esm_default = createStyled;
  }
});

// ../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
var import_react43, tags, newStyled, emotion_styled_browser_esm_default;
var init_emotion_styled_browser_esm = __esm({
  "../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
    init_extends();
    import_react43 = __toModule(require_react());
    init_emotion_is_prop_valid_browser_esm();
    init_emotion_styled_base_browser_esm();
    init_emotion_utils_browser_esm();
    init_emotion_serialize_browser_esm();
    tags = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "foreignObject",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    newStyled = emotion_styled_base_browser_esm_default.bind();
    tags.forEach(function(tagName) {
      newStyled[tagName] = newStyled(tagName);
    });
    emotion_styled_browser_esm_default = newStyled;
  }
});

// ../../node_modules/@mui/styled-engine/index.js
function styled(tag, options) {
  const stylesFactory = emotion_styled_browser_esm_default(tag, options);
  if (true) {
    return (...styles2) => {
      const component = typeof tag === "string" ? `"${tag}"` : "component";
      if (styles2.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
      } else if (styles2.some((style3) => style3 === void 0)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles2);
    };
  }
  return stylesFactory;
}
var init_styled_engine = __esm({
  "../../node_modules/@mui/styled-engine/index.js"() {
    init_emotion_styled_browser_esm();
    init_emotion_react_browser_esm();
  }
});

// ../../node_modules/@mui/system/esm/responsivePropType.js
var import_prop_types12, responsivePropType, responsivePropType_default;
var init_responsivePropType = __esm({
  "../../node_modules/@mui/system/esm/responsivePropType.js"() {
    import_prop_types12 = __toModule(require_prop_types());
    responsivePropType = true ? import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string, import_prop_types12.default.object, import_prop_types12.default.array]) : {};
    responsivePropType_default = responsivePropType;
  }
});

// ../../node_modules/@mui/system/esm/merge.js
function merge2(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge(acc, item, {
    clone: false
  });
}
var merge_default;
var init_merge = __esm({
  "../../node_modules/@mui/system/esm/merge.js"() {
    init_esm();
    merge_default = merge2;
  }
});

// ../../node_modules/@mui/system/esm/breakpoints.js
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === "object") {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _breakpointsInput$key;
  const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style3) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style3);
}
var import_prop_types13, values, defaultBreakpoints;
var init_breakpoints = __esm({
  "../../node_modules/@mui/system/esm/breakpoints.js"() {
    init_extends();
    import_prop_types13 = __toModule(require_prop_types());
    values = {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536
    };
    defaultBreakpoints = {
      keys: ["xs", "sm", "md", "lg", "xl"],
      up: (key) => `@media (min-width:${values[key]}px)`
    };
  }
});

// ../../node_modules/@mui/system/esm/style.js
function getPath(obj, path) {
  if (!path || typeof path !== "string") {
    return null;
  }
  return path.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
}
function getValue(themeMapping, transform4, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === "function") {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform4) {
    value = transform4(value);
  }
  return value;
}
function style(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform: transform4
  } = options;
  const fn = (props) => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = (propValueFinal) => {
      let value = getValue(themeMapping, transform4, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === "string") {
        value = getValue(themeMapping, transform4, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = true ? {
    [prop]: responsivePropType_default
  } : {};
  fn.filterProps = [prop];
  return fn;
}
var style_default;
var init_style = __esm({
  "../../node_modules/@mui/system/esm/style.js"() {
    init_esm();
    init_responsivePropType();
    init_breakpoints();
    style_default = style;
  }
});

// ../../node_modules/@mui/system/esm/compose.js
function compose(...styles2) {
  const handlers = styles2.reduce((acc, style3) => {
    style3.filterProps.forEach((prop) => {
      acc[prop] = style3;
    });
    return acc;
  }, {});
  const fn = (props) => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge_default(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = true ? styles2.reduce((acc, style3) => Object.assign(acc, style3.propTypes), {}) : {};
  fn.filterProps = styles2.reduce((acc, style3) => acc.concat(style3.filterProps), []);
  return fn;
}
var compose_default;
var init_compose = __esm({
  "../../node_modules/@mui/system/esm/compose.js"() {
    init_merge();
    compose_default = compose;
  }
});

// ../../node_modules/@mui/system/esm/memoize.js
function memoize2(fn) {
  const cache = {};
  return (arg) => {
    if (cache[arg] === void 0) {
      cache[arg] = fn(arg);
    }
    return cache[arg];
  };
}
var init_memoize = __esm({
  "../../node_modules/@mui/system/esm/memoize.js"() {
  }
});

// ../../node_modules/@mui/system/esm/spacing.js
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  const themeSpacing = getPath(theme, themeKey) || defaultValue;
  if (typeof themeSpacing === "number") {
    return (abs2) => {
      if (typeof abs2 === "string") {
        return abs2;
      }
      if (true) {
        if (typeof abs2 !== "number") {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
        }
      }
      return themeSpacing * abs2;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return (abs2) => {
      if (typeof abs2 === "string") {
        return abs2;
      }
      if (true) {
        if (!Number.isInteger(abs2)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
        } else if (abs2 > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
        }
      }
      return themeSpacing[abs2];
    };
  }
  if (typeof themeSpacing === "function") {
    return themeSpacing;
  }
  if (true) {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
  }
  return () => void 0;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, "spacing", 8, "spacing");
}
function getValue2(transformer, propValue) {
  if (typeof propValue === "string" || propValue == null) {
    return propValue;
  }
  const abs2 = Math.abs(propValue);
  const transformed = transformer(abs2);
  if (propValue >= 0) {
    return transformed;
  }
  if (typeof transformed === "number") {
    return -transformed;
  }
  return `-${transformed}`;
}
function getStyleFromPropValue(cssProperties, transformer) {
  return (propValue) => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue2(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
  if (keys.indexOf(prop) === -1) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style2(props, keys) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
}
function margin(props) {
  return style2(props, marginKeys);
}
function padding(props) {
  return style2(props, paddingKeys);
}
function spacing(props) {
  return style2(props, spacingKeys);
}
var properties, directions, aliases, getCssProperties, marginKeys, paddingKeys, spacingKeys, spacing_default;
var init_spacing = __esm({
  "../../node_modules/@mui/system/esm/spacing.js"() {
    init_responsivePropType();
    init_breakpoints();
    init_style();
    init_merge();
    init_memoize();
    properties = {
      m: "margin",
      p: "padding"
    };
    directions = {
      t: "Top",
      r: "Right",
      b: "Bottom",
      l: "Left",
      x: ["Left", "Right"],
      y: ["Top", "Bottom"]
    };
    aliases = {
      marginX: "mx",
      marginY: "my",
      paddingX: "px",
      paddingY: "py"
    };
    getCssProperties = memoize2((prop) => {
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }
      const [a2, b2] = prop.split("");
      const property = properties[a2];
      const direction = directions[b2] || "";
      return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
    });
    marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY"];
    paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY"];
    spacingKeys = [...marginKeys, ...paddingKeys];
    margin.propTypes = true ? marginKeys.reduce((obj, key) => {
      obj[key] = responsivePropType_default;
      return obj;
    }, {}) : {};
    margin.filterProps = marginKeys;
    padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType_default;
      return obj;
    }, {}) : {};
    padding.filterProps = paddingKeys;
    spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType_default;
      return obj;
    }, {}) : {};
    spacing.filterProps = spacingKeys;
    spacing_default = spacing;
  }
});

// ../../node_modules/@mui/system/esm/borders.js
function getBorder(value) {
  if (typeof value !== "number") {
    return value;
  }
  return `${value}px solid`;
}
var border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, borders2, borders_default;
var init_borders = __esm({
  "../../node_modules/@mui/system/esm/borders.js"() {
    init_responsivePropType();
    init_style();
    init_compose();
    init_spacing();
    init_breakpoints();
    border = style_default({
      prop: "border",
      themeKey: "borders",
      transform: getBorder
    });
    borderTop = style_default({
      prop: "borderTop",
      themeKey: "borders",
      transform: getBorder
    });
    borderRight = style_default({
      prop: "borderRight",
      themeKey: "borders",
      transform: getBorder
    });
    borderBottom = style_default({
      prop: "borderBottom",
      themeKey: "borders",
      transform: getBorder
    });
    borderLeft = style_default({
      prop: "borderLeft",
      themeKey: "borders",
      transform: getBorder
    });
    borderColor = style_default({
      prop: "borderColor",
      themeKey: "palette"
    });
    borderTopColor = style_default({
      prop: "borderTopColor",
      themeKey: "palette"
    });
    borderRightColor = style_default({
      prop: "borderRightColor",
      themeKey: "palette"
    });
    borderBottomColor = style_default({
      prop: "borderBottomColor",
      themeKey: "palette"
    });
    borderLeftColor = style_default({
      prop: "borderLeftColor",
      themeKey: "palette"
    });
    borderRadius = (props) => {
      if (props.borderRadius !== void 0 && props.borderRadius !== null) {
        const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
        const styleFromPropValue = (propValue) => ({
          borderRadius: getValue2(transformer, propValue)
        });
        return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    borderRadius.propTypes = true ? {
      borderRadius: responsivePropType_default
    } : {};
    borderRadius.filterProps = ["borderRadius"];
    borders2 = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
    borders_default = borders2;
  }
});

// ../../node_modules/@mui/system/esm/display.js
var displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace, display_default;
var init_display = __esm({
  "../../node_modules/@mui/system/esm/display.js"() {
    init_style();
    init_compose();
    displayPrint = style_default({
      prop: "displayPrint",
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    });
    displayRaw = style_default({
      prop: "display"
    });
    overflow = style_default({
      prop: "overflow"
    });
    textOverflow = style_default({
      prop: "textOverflow"
    });
    visibility = style_default({
      prop: "visibility"
    });
    whiteSpace = style_default({
      prop: "whiteSpace"
    });
    display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
  }
});

// ../../node_modules/@mui/system/esm/flexbox.js
var flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order2, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf, flexbox, flexbox_default;
var init_flexbox = __esm({
  "../../node_modules/@mui/system/esm/flexbox.js"() {
    init_style();
    init_compose();
    flexBasis = style_default({
      prop: "flexBasis"
    });
    flexDirection = style_default({
      prop: "flexDirection"
    });
    flexWrap = style_default({
      prop: "flexWrap"
    });
    justifyContent = style_default({
      prop: "justifyContent"
    });
    alignItems = style_default({
      prop: "alignItems"
    });
    alignContent = style_default({
      prop: "alignContent"
    });
    order2 = style_default({
      prop: "order"
    });
    flex = style_default({
      prop: "flex"
    });
    flexGrow = style_default({
      prop: "flexGrow"
    });
    flexShrink = style_default({
      prop: "flexShrink"
    });
    alignSelf = style_default({
      prop: "alignSelf"
    });
    justifyItems = style_default({
      prop: "justifyItems"
    });
    justifySelf = style_default({
      prop: "justifySelf"
    });
    flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order2, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
    flexbox_default = flexbox;
  }
});

// ../../node_modules/@mui/system/esm/grid.js
var gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea, grid, grid_default;
var init_grid = __esm({
  "../../node_modules/@mui/system/esm/grid.js"() {
    init_style();
    init_compose();
    init_spacing();
    init_breakpoints();
    init_responsivePropType();
    gap = (props) => {
      if (props.gap !== void 0 && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
        const styleFromPropValue = (propValue) => ({
          gap: getValue2(transformer, propValue)
        });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    gap.propTypes = true ? {
      gap: responsivePropType_default
    } : {};
    gap.filterProps = ["gap"];
    columnGap = (props) => {
      if (props.columnGap !== void 0 && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
        const styleFromPropValue = (propValue) => ({
          columnGap: getValue2(transformer, propValue)
        });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    columnGap.propTypes = true ? {
      columnGap: responsivePropType_default
    } : {};
    columnGap.filterProps = ["columnGap"];
    rowGap = (props) => {
      if (props.rowGap !== void 0 && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
        const styleFromPropValue = (propValue) => ({
          rowGap: getValue2(transformer, propValue)
        });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    rowGap.propTypes = true ? {
      rowGap: responsivePropType_default
    } : {};
    rowGap.filterProps = ["rowGap"];
    gridColumn = style_default({
      prop: "gridColumn"
    });
    gridRow = style_default({
      prop: "gridRow"
    });
    gridAutoFlow = style_default({
      prop: "gridAutoFlow"
    });
    gridAutoColumns = style_default({
      prop: "gridAutoColumns"
    });
    gridAutoRows = style_default({
      prop: "gridAutoRows"
    });
    gridTemplateColumns = style_default({
      prop: "gridTemplateColumns"
    });
    gridTemplateRows = style_default({
      prop: "gridTemplateRows"
    });
    gridTemplateAreas = style_default({
      prop: "gridTemplateAreas"
    });
    gridArea = style_default({
      prop: "gridArea"
    });
    grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    grid_default = grid;
  }
});

// ../../node_modules/@mui/system/esm/palette.js
var color2, bgcolor, backgroundColor, palette, palette_default;
var init_palette = __esm({
  "../../node_modules/@mui/system/esm/palette.js"() {
    init_style();
    init_compose();
    color2 = style_default({
      prop: "color",
      themeKey: "palette"
    });
    bgcolor = style_default({
      prop: "bgcolor",
      cssProperty: "backgroundColor",
      themeKey: "palette"
    });
    backgroundColor = style_default({
      prop: "backgroundColor",
      themeKey: "palette"
    });
    palette = compose_default(color2, bgcolor, backgroundColor);
    palette_default = palette;
  }
});

// ../../node_modules/@mui/system/esm/positions.js
var position2, zIndex, top, right, bottom, left, positions_default;
var init_positions = __esm({
  "../../node_modules/@mui/system/esm/positions.js"() {
    init_style();
    init_compose();
    position2 = style_default({
      prop: "position"
    });
    zIndex = style_default({
      prop: "zIndex",
      themeKey: "zIndex"
    });
    top = style_default({
      prop: "top"
    });
    right = style_default({
      prop: "right"
    });
    bottom = style_default({
      prop: "bottom"
    });
    left = style_default({
      prop: "left"
    });
    positions_default = compose_default(position2, zIndex, top, right, bottom, left);
  }
});

// ../../node_modules/@mui/system/esm/shadows.js
var boxShadow, shadows_default;
var init_shadows = __esm({
  "../../node_modules/@mui/system/esm/shadows.js"() {
    init_style();
    boxShadow = style_default({
      prop: "boxShadow",
      themeKey: "shadows"
    });
    shadows_default = boxShadow;
  }
});

// ../../node_modules/@mui/system/esm/sizing.js
function transform2(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
var width, maxWidth, minWidth, height, maxHeight, minHeight, sizeWidth, sizeHeight, boxSizing, sizing, sizing_default;
var init_sizing = __esm({
  "../../node_modules/@mui/system/esm/sizing.js"() {
    init_style();
    init_compose();
    init_breakpoints();
    width = style_default({
      prop: "width",
      transform: transform2
    });
    maxWidth = (props) => {
      if (props.maxWidth !== void 0 && props.maxWidth !== null) {
        const styleFromPropValue = (propValue) => {
          var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
          const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values[propValue];
          return {
            maxWidth: breakpoint || transform2(propValue)
          };
        };
        return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    maxWidth.filterProps = ["maxWidth"];
    minWidth = style_default({
      prop: "minWidth",
      transform: transform2
    });
    height = style_default({
      prop: "height",
      transform: transform2
    });
    maxHeight = style_default({
      prop: "maxHeight",
      transform: transform2
    });
    minHeight = style_default({
      prop: "minHeight",
      transform: transform2
    });
    sizeWidth = style_default({
      prop: "size",
      cssProperty: "width",
      transform: transform2
    });
    sizeHeight = style_default({
      prop: "size",
      cssProperty: "height",
      transform: transform2
    });
    boxSizing = style_default({
      prop: "boxSizing"
    });
    sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    sizing_default = sizing;
  }
});

// ../../node_modules/@mui/system/esm/typography.js
var fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, typographyVariant, typography, typography_default;
var init_typography = __esm({
  "../../node_modules/@mui/system/esm/typography.js"() {
    init_style();
    init_compose();
    fontFamily = style_default({
      prop: "fontFamily",
      themeKey: "typography"
    });
    fontSize = style_default({
      prop: "fontSize",
      themeKey: "typography"
    });
    fontStyle = style_default({
      prop: "fontStyle",
      themeKey: "typography"
    });
    fontWeight = style_default({
      prop: "fontWeight",
      themeKey: "typography"
    });
    letterSpacing = style_default({
      prop: "letterSpacing"
    });
    lineHeight = style_default({
      prop: "lineHeight"
    });
    textAlign = style_default({
      prop: "textAlign"
    });
    typographyVariant = style_default({
      prop: "typography",
      cssProperty: false,
      themeKey: "typography"
    });
    typography = compose_default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
    typography_default = typography;
  }
});

// ../../node_modules/@mui/system/esm/getThemeValue.js
function getThemeValue(prop, value, theme) {
  const inputProps = {
    [prop]: value,
    theme
  };
  const styleFunction = propToStyleFunction[prop];
  return styleFunction ? styleFunction(inputProps) : {
    [prop]: value
  };
}
var filterPropsMapping, styleFunctionMapping, propToStyleFunction, getThemeValue_default;
var init_getThemeValue = __esm({
  "../../node_modules/@mui/system/esm/getThemeValue.js"() {
    init_borders();
    init_display();
    init_flexbox();
    init_grid();
    init_positions();
    init_palette();
    init_shadows();
    init_sizing();
    init_spacing();
    init_typography();
    filterPropsMapping = {
      borders: borders_default.filterProps,
      display: display_default.filterProps,
      flexbox: flexbox_default.filterProps,
      grid: grid_default.filterProps,
      positions: positions_default.filterProps,
      palette: palette_default.filterProps,
      shadows: shadows_default.filterProps,
      sizing: sizing_default.filterProps,
      spacing: spacing_default.filterProps,
      typography: typography_default.filterProps
    };
    styleFunctionMapping = {
      borders: borders_default,
      display: display_default,
      flexbox: flexbox_default,
      grid: grid_default,
      positions: positions_default,
      palette: palette_default,
      shadows: shadows_default,
      sizing: sizing_default,
      spacing: spacing_default,
      typography: typography_default
    };
    propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
      filterPropsMapping[styleFnName].forEach((propName) => {
        acc[propName] = styleFunctionMapping[styleFnName];
      });
      return acc;
    }, {});
    getThemeValue_default = getThemeValue;
  }
});

// ../../node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every((object) => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
}
function styleFunctionSx(props) {
  const {
    sx: styles2,
    theme = {}
  } = props || {};
  if (!styles2) {
    return null;
  }
  if (typeof styles2 === "function") {
    return styles2(theme);
  }
  if (typeof styles2 !== "object") {
    return styles2;
  }
  const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
  const breakpointsKeys = Object.keys(emptyBreakpoints);
  let css2 = emptyBreakpoints;
  Object.keys(styles2).forEach((styleKey) => {
    const value = callIfFn(styles2[styleKey], theme);
    if (typeof value === "object") {
      if (propToStyleFunction[styleKey]) {
        css2 = merge_default(css2, getThemeValue_default(styleKey, value, theme));
      } else {
        const breakpointsValues = handleBreakpoints({
          theme
        }, value, (x3) => ({
          [styleKey]: x3
        }));
        if (objectsHaveSameKeys(breakpointsValues, value)) {
          css2[styleKey] = styleFunctionSx({
            sx: value,
            theme
          });
        } else {
          css2 = merge_default(css2, breakpointsValues);
        }
      }
    } else {
      css2 = merge_default(css2, getThemeValue_default(styleKey, value, theme));
    }
  });
  return removeUnusedBreakpoints(breakpointsKeys, css2);
}
var styleFunctionSx_default;
var init_styleFunctionSx = __esm({
  "../../node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"() {
    init_merge();
    init_getThemeValue();
    init_breakpoints();
    styleFunctionSx.filterProps = ["sx"];
    styleFunctionSx_default = styleFunctionSx;
  }
});

// ../../node_modules/@mui/system/esm/styleFunctionSx/index.js
var init_styleFunctionSx2 = __esm({
  "../../node_modules/@mui/system/esm/styleFunctionSx/index.js"() {
    init_styleFunctionSx();
  }
});

// ../../node_modules/@mui/system/esm/createTheme/createBreakpoints.js
function createBreakpoints(breakpoints) {
  const {
    values: values3 = {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536
    },
    unit = "px",
    step = 5
  } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded6);
  const keys = Object.keys(values3);
  function up(key) {
    const value = typeof values3[key] === "number" ? values3[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values3[key] === "number" ? values3[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys.indexOf(end);
    return `@media (min-width:${typeof values3[start] === "number" ? values3[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  }
  return _extends({
    keys,
    values: values3,
    up,
    down,
    between,
    only,
    unit
  }, other);
}
var _excluded6;
var init_createBreakpoints = __esm({
  "../../node_modules/@mui/system/esm/createTheme/createBreakpoints.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    _excluded6 = ["values", "unit", "step"];
  }
});

// ../../node_modules/@mui/system/esm/createTheme/shape.js
var shape, shape_default;
var init_shape = __esm({
  "../../node_modules/@mui/system/esm/createTheme/shape.js"() {
    shape = {
      borderRadius: 4
    };
    shape_default = shape;
  }
});

// ../../node_modules/@mui/system/esm/createTheme/createSpacing.js
function createSpacing(spacingInput = 8) {
  if (spacingInput.mui) {
    return spacingInput;
  }
  const transform4 = createUnarySpacing({
    spacing: spacingInput
  });
  const spacing2 = (...argsInput) => {
    if (true) {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map((argument) => {
      const output = transform4(argument);
      return typeof output === "number" ? `${output}px` : output;
    }).join(" ");
  };
  spacing2.mui = true;
  return spacing2;
}
var init_createSpacing = __esm({
  "../../node_modules/@mui/system/esm/createTheme/createSpacing.js"() {
    init_spacing();
  }
});

// ../../node_modules/@mui/system/esm/createTheme/createTheme.js
function createTheme(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput = {},
    palette: paletteInput = {},
    spacing: spacingInput,
    shape: shapeInput = {}
  } = options, other = _objectWithoutPropertiesLoose(options, _excluded7);
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing2 = createSpacing(spacingInput);
  let muiTheme = deepmerge({
    breakpoints,
    direction: "ltr",
    components: {},
    palette: _extends({
      mode: "light"
    }, paletteInput),
    spacing: spacing2,
    shape: _extends({}, shape_default, shapeInput)
  }, other);
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  return muiTheme;
}
var _excluded7, createTheme_default;
var init_createTheme = __esm({
  "../../node_modules/@mui/system/esm/createTheme/createTheme.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_esm();
    init_createBreakpoints();
    init_shape();
    init_createSpacing();
    _excluded7 = ["breakpoints", "palette", "spacing", "shape"];
    createTheme_default = createTheme;
  }
});

// ../../node_modules/@mui/system/esm/createTheme/index.js
var init_createTheme2 = __esm({
  "../../node_modules/@mui/system/esm/createTheme/index.js"() {
    init_createTheme();
  }
});

// ../../node_modules/@mui/private-theming/useTheme/ThemeContext.js
var React24, ThemeContext2, ThemeContext_default;
var init_ThemeContext = __esm({
  "../../node_modules/@mui/private-theming/useTheme/ThemeContext.js"() {
    React24 = __toModule(require_react());
    ThemeContext2 = /* @__PURE__ */ React24.createContext(null);
    if (true) {
      ThemeContext2.displayName = "ThemeContext";
    }
    ThemeContext_default = ThemeContext2;
  }
});

// ../../node_modules/@mui/private-theming/useTheme/useTheme.js
function useTheme2() {
  const theme = React25.useContext(ThemeContext_default);
  if (true) {
    React25.useDebugValue(theme);
  }
  return theme;
}
var React25;
var init_useTheme = __esm({
  "../../node_modules/@mui/private-theming/useTheme/useTheme.js"() {
    React25 = __toModule(require_react());
    init_ThemeContext();
  }
});

// ../../node_modules/@mui/private-theming/useTheme/index.js
var init_useTheme2 = __esm({
  "../../node_modules/@mui/private-theming/useTheme/index.js"() {
    init_useTheme();
  }
});

// ../../node_modules/@mui/private-theming/ThemeProvider/index.js
var init_ThemeProvider = __esm({
  "../../node_modules/@mui/private-theming/ThemeProvider/index.js"() {
  }
});

// ../../node_modules/@mui/private-theming/index.js
var init_private_theming = __esm({
  "../../node_modules/@mui/private-theming/index.js"() {
    init_ThemeProvider();
    init_useTheme2();
  }
});

// ../../node_modules/@mui/system/esm/useThemeWithoutDefault.js
function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function useTheme3(defaultTheme2 = null) {
  const contextTheme = useTheme2();
  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
}
var useThemeWithoutDefault_default;
var init_useThemeWithoutDefault = __esm({
  "../../node_modules/@mui/system/esm/useThemeWithoutDefault.js"() {
    init_private_theming();
    useThemeWithoutDefault_default = useTheme3;
  }
});

// ../../node_modules/@mui/system/esm/useTheme.js
function useTheme4(defaultTheme2 = systemDefaultTheme) {
  return useThemeWithoutDefault_default(defaultTheme2);
}
var systemDefaultTheme, useTheme_default;
var init_useTheme3 = __esm({
  "../../node_modules/@mui/system/esm/useTheme.js"() {
    init_createTheme2();
    init_useThemeWithoutDefault();
    systemDefaultTheme = createTheme_default();
    useTheme_default = useTheme4;
  }
});

// ../../node_modules/@mui/system/esm/propsToClassKey.js
function isEmpty(string) {
  return string.length === 0;
}
function propsToClassKey(props) {
  const {
    variant
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  let classKey = variant || "";
  Object.keys(other).sort().forEach((key) => {
    if (key === "color") {
      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);
    } else {
      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
    }
  });
  return classKey;
}
var _excluded8;
var init_propsToClassKey = __esm({
  "../../node_modules/@mui/system/esm/propsToClassKey.js"() {
    init_objectWithoutPropertiesLoose();
    init_esm();
    _excluded8 = ["variant"];
  }
});

// ../../node_modules/@mui/system/esm/createStyled.js
function isEmpty2(obj) {
  return Object.keys(obj).length === 0;
}
function shouldForwardProp(prop) {
  return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
}
function createStyled3(input = {}) {
  const {
    defaultTheme: defaultTheme2 = systemDefaultTheme2,
    rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
    slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
  } = input;
  return (tag, inputOptions = {}) => {
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      overridesResolver
    } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded9);
    const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
    const skipSx = inputSkipSx || false;
    let label;
    if (true) {
      if (componentName) {
        label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
      }
    }
    let shouldForwardPropOption = shouldForwardProp;
    if (componentSlot === "Root") {
      shouldForwardPropOption = rootShouldForwardProp2;
    } else if (componentSlot) {
      shouldForwardPropOption = slotShouldForwardProp2;
    }
    const defaultStyledResolver = styled(tag, _extends({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const muiStyledResolver = (styleArg, ...expressions) => {
      const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
        return typeof stylesArg === "function" ? (_ref) => {
          let {
            theme: themeInput
          } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded22);
          return stylesArg(_extends({
            theme: isEmpty2(themeInput) ? defaultTheme2 : themeInput
          }, other));
        } : stylesArg;
      }) : [];
      let transformedStyleArg = styleArg;
      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push((props) => {
          const theme = isEmpty2(props.theme) ? defaultTheme2 : props.theme;
          const styleOverrides = getStyleOverrides(componentName, theme);
          if (styleOverrides) {
            return overridesResolver(props, styleOverrides);
          }
          return null;
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push((props) => {
          const theme = isEmpty2(props.theme) ? defaultTheme2 : props.theme;
          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push((props) => {
          const theme = isEmpty2(props.theme) ? defaultTheme2 : props.theme;
          return styleFunctionSx_default(_extends({}, props, {
            theme
          }));
        });
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill("");
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      } else if (typeof styleArg === "function") {
        transformedStyleArg = (_ref2) => {
          let {
            theme: themeInput
          } = _ref2, other = _objectWithoutPropertiesLoose(_ref2, _excluded32);
          return styleArg(_extends({
            theme: isEmpty2(themeInput) ? defaultTheme2 : themeInput
          }, other));
        };
      }
      const Component3 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (true) {
        let displayName;
        if (componentName) {
          displayName = `${componentName}${componentSlot || ""}`;
        }
        if (displayName === void 0) {
          displayName = `Styled(${getDisplayName(tag)})`;
        }
        Component3.displayName = displayName;
      }
      return Component3;
    };
    return muiStyledResolver;
  };
}
var _excluded9, _excluded22, _excluded32, getStyleOverrides, getVariantStyles, variantsResolver, systemDefaultTheme2, lowercaseFirstLetter;
var init_createStyled = __esm({
  "../../node_modules/@mui/system/esm/createStyled.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_styled_engine();
    init_esm();
    init_createTheme2();
    init_styleFunctionSx2();
    init_propsToClassKey();
    _excluded9 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
    _excluded22 = ["theme"];
    _excluded32 = ["theme"];
    getStyleOverrides = (name, theme) => {
      if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
        return theme.components[name].styleOverrides;
      }
      return null;
    };
    getVariantStyles = (name, theme) => {
      let variants = [];
      if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
        variants = theme.components[name].variants;
      }
      const variantsStyles = {};
      variants.forEach((definition) => {
        const key = propsToClassKey(definition.props);
        variantsStyles[key] = definition.style;
      });
      return variantsStyles;
    };
    variantsResolver = (props, styles2, theme, name) => {
      var _theme$components, _theme$components$nam;
      const {
        ownerState = {}
      } = props;
      const variantsStyles = [];
      const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
      if (themeVariants) {
        themeVariants.forEach((themeVariant) => {
          let isMatch = true;
          Object.keys(themeVariant.props).forEach((key) => {
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
              isMatch = false;
            }
          });
          if (isMatch) {
            variantsStyles.push(styles2[propsToClassKey(themeVariant.props)]);
          }
        });
      }
      return variantsStyles;
    };
    systemDefaultTheme2 = createTheme_default();
    lowercaseFirstLetter = (string) => {
      return string.charAt(0).toLowerCase() + string.slice(1);
    };
  }
});

// ../../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
    return props;
  }
  const output = _extends({}, props);
  const defaultProps2 = theme.components[name].defaultProps;
  let propName;
  for (propName in defaultProps2) {
    if (output[propName] === void 0) {
      output[propName] = defaultProps2[propName];
    }
  }
  return output;
}
var init_getThemeProps = __esm({
  "../../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js"() {
    init_extends();
  }
});

// ../../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
function useThemeProps({
  props,
  name,
  defaultTheme: defaultTheme2
}) {
  const theme = useTheme_default(defaultTheme2);
  const mergedProps = getThemeProps({
    theme,
    name,
    props
  });
  return mergedProps;
}
var init_useThemeProps = __esm({
  "../../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js"() {
    init_getThemeProps();
    init_useTheme3();
  }
});

// ../../node_modules/@mui/system/esm/useThemeProps/index.js
var init_useThemeProps2 = __esm({
  "../../node_modules/@mui/system/esm/useThemeProps/index.js"() {
    init_useThemeProps();
  }
});

// ../../node_modules/@mui/system/esm/colorManipulator.js
function clamp4(value, min = 0, max = 1) {
  if (true) {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return Math.min(Math.max(min, value), max);
}
function hexToRgb(color3) {
  color3 = color3.substr(1);
  const re2 = new RegExp(`.{1,${color3.length >= 6 ? 2 : 1}}`, "g");
  let colors = color3.match(re2);
  if (colors && colors[0].length === 1) {
    colors = colors.map((n) => n + n);
  }
  return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
  }).join(", ")})` : "";
}
function decomposeColor(color3) {
  if (color3.type) {
    return color3;
  }
  if (color3.charAt(0) === "#") {
    return decomposeColor(hexToRgb(color3));
  }
  const marker = color3.indexOf("(");
  const type = color3.substring(0, marker);
  if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
    throw new Error(true ? `MUI: Unsupported \`${color3}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color3));
  }
  let values3 = color3.substring(marker + 1, color3.length - 1);
  let colorSpace;
  if (type === "color") {
    values3 = values3.split(" ");
    colorSpace = values3.shift();
    if (values3.length === 4 && values3[3].charAt(0) === "/") {
      values3[3] = values3[3].substr(1);
    }
    if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
      throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
    }
  } else {
    values3 = values3.split(",");
  }
  values3 = values3.map((value) => parseFloat(value));
  return {
    type,
    values: values3,
    colorSpace
  };
}
function recomposeColor(color3) {
  const {
    type,
    colorSpace
  } = color3;
  let {
    values: values3
  } = color3;
  if (type.indexOf("rgb") !== -1) {
    values3 = values3.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.indexOf("hsl") !== -1) {
    values3[1] = `${values3[1]}%`;
    values3[2] = `${values3[2]}%`;
  }
  if (type.indexOf("color") !== -1) {
    values3 = `${colorSpace} ${values3.join(" ")}`;
  } else {
    values3 = `${values3.join(", ")}`;
  }
  return `${type}(${values3})`;
}
function hslToRgb(color3) {
  color3 = decomposeColor(color3);
  const {
    values: values3
  } = color3;
  const h2 = values3[0];
  const s = values3[1] / 100;
  const l = values3[2] / 100;
  const a2 = s * Math.min(l, 1 - l);
  const f = (n, k2 = (n + h2 / 30) % 12) => l - a2 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  let type = "rgb";
  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  if (color3.type === "hsla") {
    type += "a";
    rgb.push(values3[3]);
  }
  return recomposeColor({
    type,
    values: rgb
  });
}
function getLuminance(color3) {
  color3 = decomposeColor(color3);
  let rgb = color3.type === "hsl" ? decomposeColor(hslToRgb(color3)).values : color3.values;
  rgb = rgb.map((val) => {
    if (color3.type !== "color") {
      val /= 255;
    }
    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
  });
  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function alpha2(color3, value) {
  color3 = decomposeColor(color3);
  value = clamp4(value);
  if (color3.type === "rgb" || color3.type === "hsl") {
    color3.type += "a";
  }
  if (color3.type === "color") {
    color3.values[3] = `/${value}`;
  } else {
    color3.values[3] = value;
  }
  return recomposeColor(color3);
}
function darken(color3, coefficient) {
  color3 = decomposeColor(color3);
  coefficient = clamp4(coefficient);
  if (color3.type.indexOf("hsl") !== -1) {
    color3.values[2] *= 1 - coefficient;
  } else if (color3.type.indexOf("rgb") !== -1 || color3.type.indexOf("color") !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color3.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color3);
}
function lighten(color3, coefficient) {
  color3 = decomposeColor(color3);
  coefficient = clamp4(coefficient);
  if (color3.type.indexOf("hsl") !== -1) {
    color3.values[2] += (100 - color3.values[2]) * coefficient;
  } else if (color3.type.indexOf("rgb") !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color3.values[i] += (255 - color3.values[i]) * coefficient;
    }
  } else if (color3.type.indexOf("color") !== -1) {
    for (let i = 0; i < 3; i += 1) {
      color3.values[i] += (1 - color3.values[i]) * coefficient;
    }
  }
  return recomposeColor(color3);
}
var init_colorManipulator = __esm({
  "../../node_modules/@mui/system/esm/colorManipulator.js"() {
  }
});

// ../../node_modules/@mui/system/esm/index.js
var init_esm2 = __esm({
  "../../node_modules/@mui/system/esm/index.js"() {
    init_styled_engine();
    init_borders();
    init_flexbox();
    init_grid();
    init_palette();
    init_positions();
    init_sizing();
    init_spacing();
    init_typography();
    init_createStyled();
    init_createStyled();
    init_createTheme2();
    init_useThemeProps2();
    init_useTheme3();
    init_colorManipulator();
  }
});

// ../../node_modules/@mui/material/styles/createMixins.js
function createMixins(breakpoints, spacing2, mixins) {
  return _extends({
    toolbar: {
      minHeight: 56,
      [`${breakpoints.up("xs")} and (orientation: landscape)`]: {
        minHeight: 48
      },
      [breakpoints.up("sm")]: {
        minHeight: 64
      }
    }
  }, mixins);
}
var init_createMixins = __esm({
  "../../node_modules/@mui/material/styles/createMixins.js"() {
    init_extends();
  }
});

// ../../node_modules/@mui/material/colors/common.js
var common, common_default;
var init_common = __esm({
  "../../node_modules/@mui/material/colors/common.js"() {
    common = {
      black: "#000",
      white: "#fff"
    };
    common_default = common;
  }
});

// ../../node_modules/@mui/material/colors/grey.js
var grey, grey_default;
var init_grey = __esm({
  "../../node_modules/@mui/material/colors/grey.js"() {
    grey = {
      50: "#fafafa",
      100: "#f5f5f5",
      200: "#eeeeee",
      300: "#e0e0e0",
      400: "#bdbdbd",
      500: "#9e9e9e",
      600: "#757575",
      700: "#616161",
      800: "#424242",
      900: "#212121",
      A100: "#f5f5f5",
      A200: "#eeeeee",
      A400: "#bdbdbd",
      A700: "#616161"
    };
    grey_default = grey;
  }
});

// ../../node_modules/@mui/material/colors/purple.js
var purple, purple_default;
var init_purple = __esm({
  "../../node_modules/@mui/material/colors/purple.js"() {
    purple = {
      50: "#f3e5f5",
      100: "#e1bee7",
      200: "#ce93d8",
      300: "#ba68c8",
      400: "#ab47bc",
      500: "#9c27b0",
      600: "#8e24aa",
      700: "#7b1fa2",
      800: "#6a1b9a",
      900: "#4a148c",
      A100: "#ea80fc",
      A200: "#e040fb",
      A400: "#d500f9",
      A700: "#aa00ff"
    };
    purple_default = purple;
  }
});

// ../../node_modules/@mui/material/colors/red.js
var red, red_default;
var init_red = __esm({
  "../../node_modules/@mui/material/colors/red.js"() {
    red = {
      50: "#ffebee",
      100: "#ffcdd2",
      200: "#ef9a9a",
      300: "#e57373",
      400: "#ef5350",
      500: "#f44336",
      600: "#e53935",
      700: "#d32f2f",
      800: "#c62828",
      900: "#b71c1c",
      A100: "#ff8a80",
      A200: "#ff5252",
      A400: "#ff1744",
      A700: "#d50000"
    };
    red_default = red;
  }
});

// ../../node_modules/@mui/material/colors/orange.js
var orange, orange_default;
var init_orange = __esm({
  "../../node_modules/@mui/material/colors/orange.js"() {
    orange = {
      50: "#fff3e0",
      100: "#ffe0b2",
      200: "#ffcc80",
      300: "#ffb74d",
      400: "#ffa726",
      500: "#ff9800",
      600: "#fb8c00",
      700: "#f57c00",
      800: "#ef6c00",
      900: "#e65100",
      A100: "#ffd180",
      A200: "#ffab40",
      A400: "#ff9100",
      A700: "#ff6d00"
    };
    orange_default = orange;
  }
});

// ../../node_modules/@mui/material/colors/blue.js
var blue, blue_default;
var init_blue = __esm({
  "../../node_modules/@mui/material/colors/blue.js"() {
    blue = {
      50: "#e3f2fd",
      100: "#bbdefb",
      200: "#90caf9",
      300: "#64b5f6",
      400: "#42a5f5",
      500: "#2196f3",
      600: "#1e88e5",
      700: "#1976d2",
      800: "#1565c0",
      900: "#0d47a1",
      A100: "#82b1ff",
      A200: "#448aff",
      A400: "#2979ff",
      A700: "#2962ff"
    };
    blue_default = blue;
  }
});

// ../../node_modules/@mui/material/colors/lightBlue.js
var lightBlue, lightBlue_default;
var init_lightBlue = __esm({
  "../../node_modules/@mui/material/colors/lightBlue.js"() {
    lightBlue = {
      50: "#e1f5fe",
      100: "#b3e5fc",
      200: "#81d4fa",
      300: "#4fc3f7",
      400: "#29b6f6",
      500: "#03a9f4",
      600: "#039be5",
      700: "#0288d1",
      800: "#0277bd",
      900: "#01579b",
      A100: "#80d8ff",
      A200: "#40c4ff",
      A400: "#00b0ff",
      A700: "#0091ea"
    };
    lightBlue_default = lightBlue;
  }
});

// ../../node_modules/@mui/material/colors/green.js
var green, green_default;
var init_green = __esm({
  "../../node_modules/@mui/material/colors/green.js"() {
    green = {
      50: "#e8f5e9",
      100: "#c8e6c9",
      200: "#a5d6a7",
      300: "#81c784",
      400: "#66bb6a",
      500: "#4caf50",
      600: "#43a047",
      700: "#388e3c",
      800: "#2e7d32",
      900: "#1b5e20",
      A100: "#b9f6ca",
      A200: "#69f0ae",
      A400: "#00e676",
      A700: "#00c853"
    };
    green_default = green;
  }
});

// ../../node_modules/@mui/material/styles/createPalette.js
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === "light") {
      intent.light = lighten(intent.main, tonalOffsetLight);
    } else if (direction === "dark") {
      intent.dark = darken(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode = "light") {
  if (mode === "dark") {
    return {
      main: blue_default[200],
      light: blue_default[50],
      dark: blue_default[400]
    };
  }
  return {
    main: blue_default[700],
    light: blue_default[400],
    dark: blue_default[800]
  };
}
function getDefaultSecondary(mode = "light") {
  if (mode === "dark") {
    return {
      main: purple_default[200],
      light: purple_default[50],
      dark: purple_default[400]
    };
  }
  return {
    main: purple_default[500],
    light: purple_default[300],
    dark: purple_default[700]
  };
}
function getDefaultError(mode = "light") {
  if (mode === "dark") {
    return {
      main: red_default[500],
      light: red_default[300],
      dark: red_default[700]
    };
  }
  return {
    main: red_default[700],
    light: red_default[400],
    dark: red_default[800]
  };
}
function getDefaultInfo(mode = "light") {
  if (mode === "dark") {
    return {
      main: lightBlue_default[400],
      light: lightBlue_default[300],
      dark: lightBlue_default[700]
    };
  }
  return {
    main: lightBlue_default[700],
    light: lightBlue_default[500],
    dark: lightBlue_default[900]
  };
}
function getDefaultSuccess(mode = "light") {
  if (mode === "dark") {
    return {
      main: green_default[400],
      light: green_default[300],
      dark: green_default[700]
    };
  }
  return {
    main: green_default[800],
    light: green_default[500],
    dark: green_default[900]
  };
}
function getDefaultWarning(mode = "light") {
  if (mode === "dark") {
    return {
      main: orange_default[400],
      light: orange_default[300],
      dark: orange_default[700]
    };
  }
  return {
    main: "#ED6C02",
    light: orange_default[500],
    dark: orange_default[900]
  };
}
function createPalette(palette2) {
  const {
    mode = "light",
    contrastThreshold = 3,
    tonalOffset = 0.2
  } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded10);
  const primary = palette2.primary || getDefaultPrimary(mode);
  const secondary = palette2.secondary || getDefaultSecondary(mode);
  const error = palette2.error || getDefaultError(mode);
  const info = palette2.info || getDefaultInfo(mode);
  const success = palette2.success || getDefaultSuccess(mode);
  const warning2 = palette2.warning || getDefaultWarning(mode);
  function getContrastText(background) {
    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    if (true) {
      const contrast = getContrastRatio(background, contrastText);
      if (contrast < 3) {
        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
      }
    }
    return contrastText;
  }
  const augmentColor = ({
    color: color3,
    name,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color3 = _extends({}, color3);
    if (!color3.main && color3[mainShade]) {
      color3.main = color3[mainShade];
    }
    if (!color3.hasOwnProperty("main")) {
      throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
    }
    if (typeof color3.main !== "string") {
      throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color3.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color3.main)));
    }
    addLightOrDark(color3, "light", lightShade, tonalOffset);
    addLightOrDark(color3, "dark", darkShade, tonalOffset);
    if (!color3.contrastText) {
      color3.contrastText = getContrastText(color3.main);
    }
    return color3;
  };
  const modes = {
    dark,
    light
  };
  if (true) {
    if (!modes[mode]) {
      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    }
  }
  const paletteOutput = deepmerge(_extends({
    common: common_default,
    mode,
    primary: augmentColor({
      color: primary,
      name: "primary"
    }),
    secondary: augmentColor({
      color: secondary,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    error: augmentColor({
      color: error,
      name: "error"
    }),
    warning: augmentColor({
      color: warning2,
      name: "warning"
    }),
    info: augmentColor({
      color: info,
      name: "info"
    }),
    success: augmentColor({
      color: success,
      name: "success"
    }),
    grey: grey_default,
    contrastThreshold,
    getContrastText,
    augmentColor,
    tonalOffset
  }, modes[mode]), other);
  return paletteOutput;
}
var _excluded10, light, dark;
var init_createPalette = __esm({
  "../../node_modules/@mui/material/styles/createPalette.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_esm();
    init_esm2();
    init_common();
    init_grey();
    init_purple();
    init_red();
    init_orange();
    init_blue();
    init_lightBlue();
    init_green();
    _excluded10 = ["mode", "contrastThreshold", "tonalOffset"];
    light = {
      text: {
        primary: "rgba(0, 0, 0, 0.87)",
        secondary: "rgba(0, 0, 0, 0.6)",
        disabled: "rgba(0, 0, 0, 0.38)"
      },
      divider: "rgba(0, 0, 0, 0.12)",
      background: {
        paper: common_default.white,
        default: common_default.white
      },
      action: {
        active: "rgba(0, 0, 0, 0.54)",
        hover: "rgba(0, 0, 0, 0.04)",
        hoverOpacity: 0.04,
        selected: "rgba(0, 0, 0, 0.08)",
        selectedOpacity: 0.08,
        disabled: "rgba(0, 0, 0, 0.26)",
        disabledBackground: "rgba(0, 0, 0, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(0, 0, 0, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    dark = {
      text: {
        primary: common_default.white,
        secondary: "rgba(255, 255, 255, 0.7)",
        disabled: "rgba(255, 255, 255, 0.5)",
        icon: "rgba(255, 255, 255, 0.5)"
      },
      divider: "rgba(255, 255, 255, 0.12)",
      background: {
        paper: "#121212",
        default: "#121212"
      },
      action: {
        active: common_default.white,
        hover: "rgba(255, 255, 255, 0.08)",
        hoverOpacity: 0.08,
        selected: "rgba(255, 255, 255, 0.16)",
        selectedOpacity: 0.16,
        disabled: "rgba(255, 255, 255, 0.3)",
        disabledBackground: "rgba(255, 255, 255, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(255, 255, 255, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
  }
});

// ../../node_modules/@mui/material/styles/createTypography.js
function round(value) {
  return Math.round(value * 1e5) / 1e5;
}
function createTypography(palette2, typography2) {
  const _ref = typeof typography2 === "function" ? typography2(palette2) : typography2, {
    fontFamily: fontFamily2 = defaultFontFamily,
    fontSize: fontSize2 = 14,
    fontWeightLight = 300,
    fontWeightRegular = 400,
    fontWeightMedium = 500,
    fontWeightBold = 700,
    htmlFontSize = 16,
    allVariants,
    pxToRem: pxToRem2
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded11);
  if (true) {
    if (typeof fontSize2 !== "number") {
      console.error("MUI: `fontSize` is required to be a number.");
    }
    if (typeof htmlFontSize !== "number") {
      console.error("MUI: `htmlFontSize` is required to be a number.");
    }
  }
  const coef = fontSize2 / 14;
  const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
  const buildVariant = (fontWeight2, size, lineHeight2, letterSpacing2, casing) => _extends({
    fontFamily: fontFamily2,
    fontWeight: fontWeight2,
    fontSize: pxToRem(size),
    lineHeight: lineHeight2
  }, fontFamily2 === defaultFontFamily ? {
    letterSpacing: `${round(letterSpacing2 / size)}em`
  } : {}, casing, allVariants);
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
  };
  return deepmerge(_extends({
    htmlFontSize,
    pxToRem,
    fontFamily: fontFamily2,
    fontSize: fontSize2,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold
  }, variants), other, {
    clone: false
  });
}
var _excluded11, caseAllCaps, defaultFontFamily;
var init_createTypography = __esm({
  "../../node_modules/@mui/material/styles/createTypography.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_esm();
    _excluded11 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
    caseAllCaps = {
      textTransform: "uppercase"
    };
    defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  }
});

// ../../node_modules/@mui/material/styles/shadows.js
function createShadow(...px2) {
  return [`${px2[0]}px ${px2[1]}px ${px2[2]}px ${px2[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px2[4]}px ${px2[5]}px ${px2[6]}px ${px2[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px2[8]}px ${px2[9]}px ${px2[10]}px ${px2[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
}
var shadowKeyUmbraOpacity, shadowKeyPenumbraOpacity, shadowAmbientShadowOpacity, shadows, shadows_default2;
var init_shadows2 = __esm({
  "../../node_modules/@mui/material/styles/shadows.js"() {
    shadowKeyUmbraOpacity = 0.2;
    shadowKeyPenumbraOpacity = 0.14;
    shadowAmbientShadowOpacity = 0.12;
    shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    shadows_default2 = shadows;
  }
});

// ../../node_modules/@mui/material/styles/createTransitions.js
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height2) {
  if (!height2) {
    return 0;
  }
  const constant = height2 / 36;
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
  const mergedEasing = _extends({}, easing, inputTransitions.easing);
  const mergedDuration = _extends({}, duration, inputTransitions.duration);
  const create = (props = ["all"], options = {}) => {
    const {
      duration: durationOption = mergedDuration.standard,
      easing: easingOption = mergedEasing.easeInOut,
      delay = 0
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded12);
    if (true) {
      const isString2 = (value) => typeof value === "string";
      const isNumber = (value) => !isNaN(parseFloat(value));
      if (!isString2(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString2(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString2(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString2(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
  };
  return _extends({
    getAutoHeightDuration,
    create
  }, inputTransitions, {
    easing: mergedEasing,
    duration: mergedDuration
  });
}
var _excluded12, easing, duration;
var init_createTransitions = __esm({
  "../../node_modules/@mui/material/styles/createTransitions.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    _excluded12 = ["duration", "easing", "delay"];
    easing = {
      easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
      easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
      easeIn: "cubic-bezier(0.4, 0, 1, 1)",
      sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
    };
    duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      standard: 300,
      complex: 375,
      enteringScreen: 225,
      leavingScreen: 195
    };
  }
});

// ../../node_modules/@mui/material/styles/zIndex.js
var zIndex2, zIndex_default;
var init_zIndex = __esm({
  "../../node_modules/@mui/material/styles/zIndex.js"() {
    zIndex2 = {
      mobileStepper: 1e3,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    zIndex_default = zIndex2;
  }
});

// ../../node_modules/@mui/material/styles/createTheme.js
function createTheme2(options = {}, ...args) {
  const {
    mixins: mixinsInput = {},
    palette: paletteInput = {},
    transitions: transitionsInput = {},
    typography: typographyInput = {}
  } = options, other = _objectWithoutPropertiesLoose(options, _excluded13);
  const palette2 = createPalette(paletteInput);
  const systemTheme = createTheme_default(options);
  let muiTheme = deepmerge(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
    palette: palette2,
    shadows: shadows_default2.slice(),
    typography: createTypography(palette2, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: _extends({}, zIndex_default)
  });
  muiTheme = deepmerge(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  if (true) {
    const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
    const traverse = (node2, component) => {
      let key;
      for (key in node2) {
        const child = node2[key];
        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
          if (true) {
            const stateClass = generateUtilityClass("", key);
            console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
              root: {
                [`&.${stateClass}`]: child
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
          }
          node2[key] = {};
        }
      }
    };
    Object.keys(muiTheme.components).forEach((component) => {
      const styleOverrides = muiTheme.components[component].styleOverrides;
      if (styleOverrides && component.indexOf("Mui") === 0) {
        traverse(styleOverrides, component);
      }
    });
  }
  return muiTheme;
}
var _excluded13, createTheme_default2;
var init_createTheme3 = __esm({
  "../../node_modules/@mui/material/styles/createTheme.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_esm();
    init_core();
    init_esm2();
    init_createMixins();
    init_createPalette();
    init_createTypography();
    init_shadows2();
    init_createTransitions();
    init_zIndex();
    _excluded13 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
    createTheme_default2 = createTheme2;
  }
});

// ../../node_modules/@mui/material/styles/defaultTheme.js
var defaultTheme, defaultTheme_default;
var init_defaultTheme = __esm({
  "../../node_modules/@mui/material/styles/defaultTheme.js"() {
    init_createTheme3();
    defaultTheme = createTheme_default2();
    defaultTheme_default = defaultTheme;
  }
});

// ../../node_modules/@mui/material/styles/styled.js
var rootShouldForwardProp, slotShouldForwardProp, styled2, styled_default;
var init_styled = __esm({
  "../../node_modules/@mui/material/styles/styled.js"() {
    init_esm2();
    init_defaultTheme();
    rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
    slotShouldForwardProp = shouldForwardProp;
    styled2 = createStyled3({
      defaultTheme: defaultTheme_default,
      rootShouldForwardProp
    });
    styled_default = styled2;
  }
});

// ../../node_modules/@mui/material/styles/useThemeProps.js
function useThemeProps2({
  props,
  name
}) {
  return useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme_default
  });
}
var init_useThemeProps3 = __esm({
  "../../node_modules/@mui/material/styles/useThemeProps.js"() {
    init_esm2();
    init_defaultTheme();
  }
});

// ../../node_modules/@mui/material/utils/useForkRef.js
var useForkRef_default;
var init_useForkRef2 = __esm({
  "../../node_modules/@mui/material/utils/useForkRef.js"() {
    init_esm();
    useForkRef_default = useForkRef;
  }
});

// ../../node_modules/@mui/material/utils/useEventCallback.js
var useEventCallback_default;
var init_useEventCallback2 = __esm({
  "../../node_modules/@mui/material/utils/useEventCallback.js"() {
    init_esm();
    useEventCallback_default = useEventCallback;
  }
});

// ../../node_modules/@mui/material/utils/useIsFocusVisible.js
var useIsFocusVisible_default;
var init_useIsFocusVisible2 = __esm({
  "../../node_modules/@mui/material/utils/useIsFocusVisible.js"() {
    init_esm();
    useIsFocusVisible_default = useIsFocusVisible;
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf(o2, p);
}
var init_setPrototypeOf = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"() {
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
var init_inheritsLoose = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"() {
    init_setPrototypeOf();
  }
});

// ../../node_modules/react-transition-group/esm/config.js
var config_default;
var init_config = __esm({
  "../../node_modules/react-transition-group/esm/config.js"() {
    config_default = {
      disabled: false
    };
  }
});

// ../../node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types14, timeoutsShape, classNamesShape;
var init_PropTypes = __esm({
  "../../node_modules/react-transition-group/esm/utils/PropTypes.js"() {
    import_prop_types14 = __toModule(require_prop_types());
    timeoutsShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.shape({
      enter: import_prop_types14.default.number,
      exit: import_prop_types14.default.number,
      appear: import_prop_types14.default.number
    }).isRequired]) : null;
    classNamesShape = true ? import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.shape({
      enter: import_prop_types14.default.string,
      exit: import_prop_types14.default.string,
      active: import_prop_types14.default.string
    }), import_prop_types14.default.shape({
      enter: import_prop_types14.default.string,
      enterDone: import_prop_types14.default.string,
      enterActive: import_prop_types14.default.string,
      exit: import_prop_types14.default.string,
      exitDone: import_prop_types14.default.string,
      exitActive: import_prop_types14.default.string
    })]) : null;
  }
});

// ../../node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react45, TransitionGroupContext_default;
var init_TransitionGroupContext = __esm({
  "../../node_modules/react-transition-group/esm/TransitionGroupContext.js"() {
    import_react45 = __toModule(require_react());
    TransitionGroupContext_default = import_react45.default.createContext(null);
  }
});

// ../../node_modules/react-transition-group/esm/Transition.js
function noop2() {
}
var import_prop_types15, import_react46, import_react_dom, UNMOUNTED, EXITED, ENTERING, ENTERED, EXITING, Transition, Transition_default;
var init_Transition = __esm({
  "../../node_modules/react-transition-group/esm/Transition.js"() {
    init_objectWithoutPropertiesLoose();
    init_inheritsLoose();
    import_prop_types15 = __toModule(require_prop_types());
    import_react46 = __toModule(require_react());
    import_react_dom = __toModule(require_react_dom());
    init_config();
    init_PropTypes();
    init_TransitionGroupContext();
    UNMOUNTED = "unmounted";
    EXITED = "exited";
    ENTERING = "entering";
    ENTERED = "entered";
    EXITING = "exiting";
    Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Transition2, _React$Component);
      function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
      Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
        return null;
      };
      var _proto = Transition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
        this.updateStatus(false, nextStatus);
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
      _proto.getTimeouts = function getTimeouts() {
        var timeout2 = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout2;
        if (timeout2 != null && typeof timeout2 !== "number") {
          exit = timeout2.exit;
          enter = timeout2.enter;
          appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
        }
        return {
          exit,
          enter,
          appear
        };
      };
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
        if (nextStatus !== null) {
          this.cancelNextCallback();
          if (nextStatus === ENTERING) {
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || config_default.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(maybeNode, maybeAppearing);
          _this2.onTransitionEnd(enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };
      _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
        if (!exit || config_default.disabled) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
          return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(maybeNode);
          _this3.onTransitionEnd(timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
        this.nextCallback.cancel = function() {
          active = false;
        };
        return this.nextCallback;
      };
      _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
        this.setNextCallback(handler);
        var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
        if (!node2 || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
          this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout2 != null) {
          setTimeout(this.nextCallback, timeout2);
        }
      };
      _proto.render = function render3() {
        var status = this.state.status;
        if (status === UNMOUNTED) {
          return null;
        }
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
        return /* @__PURE__ */ import_react46.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react46.default.cloneElement(import_react46.default.Children.only(children), childProps));
      };
      return Transition2;
    }(import_react46.default.Component);
    Transition.contextType = TransitionGroupContext_default;
    Transition.propTypes = true ? {
      nodeRef: import_prop_types15.default.shape({
        current: typeof Element === "undefined" ? import_prop_types15.default.any : function(propValue, key, componentName, location2, propFullName, secret) {
          var value = propValue[key];
          return import_prop_types15.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
        }
      }),
      children: import_prop_types15.default.oneOfType([import_prop_types15.default.func.isRequired, import_prop_types15.default.element.isRequired]).isRequired,
      in: import_prop_types15.default.bool,
      mountOnEnter: import_prop_types15.default.bool,
      unmountOnExit: import_prop_types15.default.bool,
      appear: import_prop_types15.default.bool,
      enter: import_prop_types15.default.bool,
      exit: import_prop_types15.default.bool,
      timeout: function timeout(props) {
        var pt2 = timeoutsShape;
        if (!props.addEndListener)
          pt2 = pt2.isRequired;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return pt2.apply(void 0, [props].concat(args));
      },
      addEndListener: import_prop_types15.default.func,
      onEnter: import_prop_types15.default.func,
      onEntering: import_prop_types15.default.func,
      onEntered: import_prop_types15.default.func,
      onExit: import_prop_types15.default.func,
      onExiting: import_prop_types15.default.func,
      onExited: import_prop_types15.default.func
    } : {};
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop2,
      onEntering: noop2,
      onEntered: noop2,
      onExit: noop2,
      onExiting: noop2,
      onExited: noop2
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    Transition_default = Transition;
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var init_assertThisInitialized = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"() {
  }
});

// ../../node_modules/react-transition-group/esm/utils/ChildMapping.js
function getChildMapping(children, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react47.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = Object.create(null);
  if (children)
    import_react47.Children.map(children, function(c3) {
      return c3;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
  return result;
}
function mergeChildMappings(prev2, next2) {
  prev2 = prev2 || {};
  next2 = next2 || {};
  function getValueForKey(key) {
    return key in next2 ? next2[key] : prev2[key];
  }
  var nextKeysPending = Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev2) {
    if (prevKey in next2) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next2) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react47.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function(key) {
    var child = children[key];
    if (!(0, import_react47.isValidElement)(child))
      return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react47.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children[key] = (0, import_react47.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children[key] = (0, import_react47.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react47.isValidElement)(prevChild)) {
      children[key] = (0, import_react47.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children;
}
var import_react47;
var init_ChildMapping = __esm({
  "../../node_modules/react-transition-group/esm/utils/ChildMapping.js"() {
    import_react47 = __toModule(require_react());
  }
});

// ../../node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types16, import_react48, values2, defaultProps, TransitionGroup, TransitionGroup_default;
var init_TransitionGroup = __esm({
  "../../node_modules/react-transition-group/esm/TransitionGroup.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_assertThisInitialized();
    init_inheritsLoose();
    import_prop_types16 = __toModule(require_prop_types());
    import_react48 = __toModule(require_react());
    init_TransitionGroupContext();
    init_ChildMapping();
    values2 = Object.values || function(obj) {
      return Object.keys(obj).map(function(k2) {
        return obj[k2];
      });
    };
    defaultProps = {
      component: "div",
      childFactory: function childFactory(child) {
        return child;
      }
    };
    TransitionGroup = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        };
        return _this;
      }
      var _proto = TransitionGroup2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
      _proto.handleExited = function handleExited(child, node2) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping)
          return;
        if (child.props.onExited) {
          child.props.onExited(node2);
        }
        if (this.mounted) {
          this.setState(function(state) {
            var children = _extends({}, state.children);
            delete children[child.key];
            return {
              children
            };
          });
        }
      };
      _proto.render = function render3() {
        var _this$props = this.props, Component3 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
        var contextValue = this.state.contextValue;
        var children = values2(this.state.children).map(childFactory2);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component3 === null) {
          return /* @__PURE__ */ import_react48.default.createElement(TransitionGroupContext_default.Provider, {
            value: contextValue
          }, children);
        }
        return /* @__PURE__ */ import_react48.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, /* @__PURE__ */ import_react48.default.createElement(Component3, props, children));
      };
      return TransitionGroup2;
    }(import_react48.default.Component);
    TransitionGroup.propTypes = true ? {
      component: import_prop_types16.default.any,
      children: import_prop_types16.default.node,
      appear: import_prop_types16.default.bool,
      enter: import_prop_types16.default.bool,
      exit: import_prop_types16.default.bool,
      childFactory: import_prop_types16.default.func
    } : {};
    TransitionGroup.defaultProps = defaultProps;
    TransitionGroup_default = TransitionGroup;
  }
});

// ../../node_modules/react-transition-group/esm/index.js
var init_esm3 = __esm({
  "../../node_modules/react-transition-group/esm/index.js"() {
    init_TransitionGroup();
    init_Transition();
  }
});

// ../../node_modules/@mui/material/ButtonBase/Ripple.js
function Ripple(props) {
  const {
    className,
    classes,
    pulsate = false,
    rippleX,
    rippleY,
    rippleSize,
    in: inProp,
    onExited,
    timeout: timeout2
  } = props;
  const [leaving, setLeaving] = React29.useState(false);
  const rippleClassName = clsx_m_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
  const rippleStyles = {
    width: rippleSize,
    height: rippleSize,
    top: -(rippleSize / 2) + rippleY,
    left: -(rippleSize / 2) + rippleX
  };
  const childClassName = clsx_m_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
  if (!inProp && !leaving) {
    setLeaving(true);
  }
  React29.useEffect(() => {
    if (!inProp && onExited != null) {
      const timeoutId = setTimeout(onExited, timeout2);
      return () => {
        clearTimeout(timeoutId);
      };
    }
    return void 0;
  }, [onExited, inProp, timeout2]);
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
    className: rippleClassName,
    style: rippleStyles,
    children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
      className: childClassName
    })
  });
}
var React29, import_prop_types17, import_jsx_runtime14, Ripple_default;
var init_Ripple = __esm({
  "../../node_modules/@mui/material/ButtonBase/Ripple.js"() {
    React29 = __toModule(require_react());
    import_prop_types17 = __toModule(require_prop_types());
    init_clsx_m();
    import_jsx_runtime14 = __toModule(require_jsx_runtime());
    true ? Ripple.propTypes = {
      classes: import_prop_types17.default.object.isRequired,
      className: import_prop_types17.default.string,
      in: import_prop_types17.default.bool,
      onExited: import_prop_types17.default.func,
      pulsate: import_prop_types17.default.bool,
      rippleSize: import_prop_types17.default.number,
      rippleX: import_prop_types17.default.number,
      rippleY: import_prop_types17.default.number,
      timeout: import_prop_types17.default.number.isRequired
    } : void 0;
    Ripple_default = Ripple;
  }
});

// ../../node_modules/@mui/material/ButtonBase/touchRippleClasses.js
var touchRippleClasses, touchRippleClasses_default;
var init_touchRippleClasses = __esm({
  "../../node_modules/@mui/material/ButtonBase/touchRippleClasses.js"() {
    init_core();
    touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
    touchRippleClasses_default = touchRippleClasses;
  }
});

// ../../node_modules/@mui/material/ButtonBase/TouchRipple.js
var React30, import_prop_types18, import_jsx_runtime15, _excluded14, _, _t, _t2, _t3, _t4, DURATION, DELAY_RIPPLE, enterKeyframe, exitKeyframe, pulsateKeyframe, TouchRippleRoot, TouchRippleRipple, TouchRipple, TouchRipple_default;
var init_TouchRipple = __esm({
  "../../node_modules/@mui/material/ButtonBase/TouchRipple.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React30 = __toModule(require_react());
    import_prop_types18 = __toModule(require_prop_types());
    init_esm3();
    init_clsx_m();
    init_esm2();
    init_styled();
    init_useThemeProps3();
    init_Ripple();
    init_touchRippleClasses();
    import_jsx_runtime15 = __toModule(require_jsx_runtime());
    _excluded14 = ["center", "classes", "className"];
    _ = (t) => t;
    DURATION = 550;
    DELAY_RIPPLE = 80;
    enterKeyframe = keyframes3(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
    exitKeyframe = keyframes3(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
    pulsateKeyframe = keyframes3(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
    TouchRippleRoot = styled_default("span", {
      name: "MuiTouchRipple",
      slot: "Root",
      skipSx: true
    })({
      overflow: "hidden",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: "inherit"
    });
    TouchRippleRipple = styled_default(Ripple_default, {
      name: "MuiTouchRipple",
      slot: "Ripple"
    })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
      theme
    }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
      theme
    }) => theme.transitions.easing.easeInOut);
    TouchRipple = /* @__PURE__ */ React30.forwardRef(function TouchRipple2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiTouchRipple"
      });
      const {
        center: centerProp = false,
        classes = {},
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
      const [ripples, setRipples] = React30.useState([]);
      const nextKey = React30.useRef(0);
      const rippleCallback = React30.useRef(null);
      React30.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);
      const ignoringMouseDown = React30.useRef(false);
      const startTimer = React30.useRef(null);
      const startTimerCommit = React30.useRef(null);
      const container = React30.useRef(null);
      React30.useEffect(() => {
        return () => {
          clearTimeout(startTimer.current);
        };
      }, []);
      const startCommit = React30.useCallback((params) => {
        const {
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb: cb2
        } = params;
        setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TouchRippleRipple, {
          classes: {
            ripple: clsx_m_default(classes.ripple, touchRippleClasses_default.ripple),
            rippleVisible: clsx_m_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
            ripplePulsate: clsx_m_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
            child: clsx_m_default(classes.child, touchRippleClasses_default.child),
            childLeaving: clsx_m_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
            childPulsate: clsx_m_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb2;
      }, [classes]);
      const start = React30.useCallback((event = {}, options = {}, cb2) => {
        const {
          pulsate: pulsate2 = false,
          center = centerProp || options.pulsate,
          fakeElement = false
        } = options;
        if (event.type === "mousedown" && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if (event.type === "touchstart") {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }
        if (event.touches) {
          if (startTimerCommit.current === null) {
            startTimerCommit.current = () => {
              startCommit({
                pulsate: pulsate2,
                rippleX,
                rippleY,
                rippleSize,
                cb: cb2
              });
            };
            startTimer.current = setTimeout(() => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE);
          }
        } else {
          startCommit({
            pulsate: pulsate2,
            rippleX,
            rippleY,
            rippleSize,
            cb: cb2
          });
        }
      }, [centerProp, startCommit]);
      const pulsate = React30.useCallback(() => {
        start({}, {
          pulsate: true
        });
      }, [start]);
      const stop = React30.useCallback((event, cb2) => {
        clearTimeout(startTimer.current);
        if (event.type === "touchend" && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(() => {
            stop(event, cb2);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples) => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb2;
      }, []);
      React30.useImperativeHandle(ref, () => ({
        pulsate,
        start,
        stop
      }), [pulsate, start, stop]);
      return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TouchRippleRoot, _extends({
        className: clsx_m_default(classes.root, touchRippleClasses_default.root, className),
        ref: container
      }, other, {
        children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TransitionGroup_default, {
          component: null,
          exit: true,
          children: ripples
        })
      }));
    });
    true ? TouchRipple.propTypes = {
      center: import_prop_types18.default.bool,
      classes: import_prop_types18.default.object,
      className: import_prop_types18.default.string
    } : void 0;
    TouchRipple_default = TouchRipple;
  }
});

// ../../node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
function getButtonBaseUtilityClass(slot) {
  return generateUtilityClass("MuiButtonBase", slot);
}
var buttonBaseClasses, buttonBaseClasses_default;
var init_buttonBaseClasses = __esm({
  "../../node_modules/@mui/material/ButtonBase/buttonBaseClasses.js"() {
    init_core();
    buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
    buttonBaseClasses_default = buttonBaseClasses;
  }
});

// ../../node_modules/@mui/material/ButtonBase/ButtonBase.js
var React31, import_prop_types19, import_jsx_runtime16, import_jsx_runtime17, _excluded15, useUtilityClasses5, ButtonBaseRoot, ButtonBase, ButtonBase_default;
var init_ButtonBase = __esm({
  "../../node_modules/@mui/material/ButtonBase/ButtonBase.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React31 = __toModule(require_react());
    import_prop_types19 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_composeClasses2();
    init_styled();
    init_useThemeProps3();
    init_useForkRef2();
    init_useEventCallback2();
    init_useIsFocusVisible2();
    init_TouchRipple();
    init_buttonBaseClasses();
    import_jsx_runtime16 = __toModule(require_jsx_runtime());
    import_jsx_runtime17 = __toModule(require_jsx_runtime());
    _excluded15 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "type"];
    useUtilityClasses5 = (ownerState) => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
      };
      const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    ButtonBaseRoot = styled_default("button", {
      name: "MuiButtonBase",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      boxSizing: "border-box",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      WebkitAppearance: "none",
      textDecoration: "none",
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      [`&.${buttonBaseClasses_default.disabled}`]: {
        pointerEvents: "none",
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    });
    ButtonBase = /* @__PURE__ */ React31.forwardRef(function ButtonBase2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiButtonBase"
      });
      const {
        action,
        centerRipple = false,
        children,
        className,
        component = "button",
        disabled = false,
        disableRipple = false,
        disableTouchRipple = false,
        focusRipple = false,
        LinkComponent = "a",
        onBlur,
        onClick,
        onContextMenu,
        onDragLeave,
        onFocus,
        onFocusVisible,
        onKeyDown,
        onKeyUp,
        onMouseDown,
        onMouseLeave,
        onMouseUp,
        onTouchEnd,
        onTouchMove,
        onTouchStart,
        tabIndex = 0,
        TouchRippleProps,
        type
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
      const buttonRef = React31.useRef(null);
      const rippleRef = React31.useRef(null);
      const {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible_default();
      const [focusVisible, setFocusVisible] = React31.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      React31.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      React31.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible]);
      function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return useEventCallback_default((event) => {
          if (eventCallback) {
            eventCallback(event);
          }
          const ignore = skipRippleAction;
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
          return true;
        });
      }
      const handleMouseDown = useRippleHandler("start", onMouseDown);
      const handleContextMenu = useRippleHandler("stop", onContextMenu);
      const handleDragLeave = useRippleHandler("stop", onDragLeave);
      const handleMouseUp = useRippleHandler("stop", onMouseUp);
      const handleMouseLeave = useRippleHandler("stop", (event) => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      const handleTouchStart = useRippleHandler("start", onTouchStart);
      const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
      const handleTouchMove = useRippleHandler("stop", onTouchMove);
      const handleBlur = useRippleHandler("stop", (event) => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = useEventCallback_default((event) => {
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== "button" && !(button.tagName === "A" && button.href);
      };
      const keydownRef = React31.useRef(false);
      const handleKeyDown2 = useEventCallback_default((event) => {
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
          keydownRef.current = true;
          rippleRef.current.stop(event, () => {
            rippleRef.current.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = useEventCallback_default((event) => {
        if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          rippleRef.current.stop(event, () => {
            rippleRef.current.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === "button" && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === "button") {
        buttonProps.type = type === void 0 ? "button" : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = "button";
        }
        if (disabled) {
          buttonProps["aria-disabled"] = disabled;
        }
      }
      const handleOwnRef = useForkRef_default(focusVisibleRef, buttonRef);
      const handleRef = useForkRef_default(ref, handleOwnRef);
      const [mountedState, setMountedState] = React31.useState(false);
      React31.useEffect(() => {
        setMountedState(true);
      }, []);
      const enableTouchRipple = mountedState && !disableRipple && !disabled;
      if (true) {
        React31.useEffect(() => {
          if (enableTouchRipple && !rippleRef.current) {
            console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
          }
        }, [enableTouchRipple]);
      }
      const ownerState = _extends({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      });
      const classes = useUtilityClasses5(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(ButtonBaseRoot, _extends({
        as: ComponentProp,
        className: clsx_m_default(classes.root, className),
        ownerState,
        onBlur: handleBlur,
        onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown2,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type
      }, buttonProps, other, {
        children: [children, enableTouchRipple ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(TouchRipple_default, _extends({
          ref: rippleRef,
          center: centerRipple
        }, TouchRippleProps)) : null]
      }));
    });
    true ? ButtonBase.propTypes = {
      action: refType_default,
      centerRipple: import_prop_types19.default.bool,
      children: import_prop_types19.default.node,
      classes: import_prop_types19.default.object,
      className: import_prop_types19.default.string,
      component: elementTypeAcceptingRef_default,
      disabled: import_prop_types19.default.bool,
      disableRipple: import_prop_types19.default.bool,
      disableTouchRipple: import_prop_types19.default.bool,
      focusRipple: import_prop_types19.default.bool,
      focusVisibleClassName: import_prop_types19.default.string,
      href: import_prop_types19.default.any,
      LinkComponent: import_prop_types19.default.elementType,
      onBlur: import_prop_types19.default.func,
      onClick: import_prop_types19.default.func,
      onContextMenu: import_prop_types19.default.func,
      onDragLeave: import_prop_types19.default.func,
      onFocus: import_prop_types19.default.func,
      onFocusVisible: import_prop_types19.default.func,
      onKeyDown: import_prop_types19.default.func,
      onKeyUp: import_prop_types19.default.func,
      onMouseDown: import_prop_types19.default.func,
      onMouseLeave: import_prop_types19.default.func,
      onMouseUp: import_prop_types19.default.func,
      onTouchEnd: import_prop_types19.default.func,
      onTouchMove: import_prop_types19.default.func,
      onTouchStart: import_prop_types19.default.func,
      sx: import_prop_types19.default.object,
      tabIndex: import_prop_types19.default.number,
      TouchRippleProps: import_prop_types19.default.object,
      type: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["button", "reset", "submit"]), import_prop_types19.default.string])
    } : void 0;
    ButtonBase_default = ButtonBase;
  }
});

// ../../node_modules/@mui/material/ButtonBase/index.js
var init_ButtonBase2 = __esm({
  "../../node_modules/@mui/material/ButtonBase/index.js"() {
    init_ButtonBase();
    init_buttonBaseClasses();
    init_touchRippleClasses();
  }
});

// ../../node_modules/@mui/material/utils/capitalize.js
var capitalize_default;
var init_capitalize2 = __esm({
  "../../node_modules/@mui/material/utils/capitalize.js"() {
    init_esm();
    capitalize_default = capitalize;
  }
});

// ../../node_modules/@mui/material/Fab/fabClasses.js
function getFabUtilityClass(slot) {
  return generateUtilityClass("MuiFab", slot);
}
var fabClasses, fabClasses_default;
var init_fabClasses = __esm({
  "../../node_modules/@mui/material/Fab/fabClasses.js"() {
    init_core();
    fabClasses = generateUtilityClasses("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge"]);
    fabClasses_default = fabClasses;
  }
});

// ../../node_modules/@mui/material/Fab/Fab.js
var React32, import_prop_types20, import_jsx_runtime18, _excluded16, useUtilityClasses6, FabRoot, Fab, Fab_default;
var init_Fab = __esm({
  "../../node_modules/@mui/material/Fab/Fab.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React32 = __toModule(require_react());
    import_prop_types20 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_ButtonBase2();
    init_capitalize2();
    init_useThemeProps3();
    init_fabClasses();
    init_styled();
    import_jsx_runtime18 = __toModule(require_jsx_runtime());
    _excluded16 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
    useUtilityClasses6 = (ownerState) => {
      const {
        color: color3,
        variant,
        classes,
        size
      } = ownerState;
      const slots = {
        root: ["root", variant, `size${capitalize_default(size)}`, color3 === "inherit" && "colorInherit", color3 === "primary" && "primary", color3 === "secondary" && "secondary"]
      };
      return composeClasses(slots, getFabUtilityClass, classes);
    };
    FabRoot = styled_default(ButtonBase_default, {
      name: "MuiFab",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.color === "primary" && styles2.primary, ownerState.color === "secondary" && styles2.secondary];
      }
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.button, {
      minHeight: 36,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color"], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: "50%",
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      "&:active": {
        boxShadow: theme.shadows[12]
      },
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      "&:hover": {
        backgroundColor: theme.palette.grey.A100,
        "@media (hover: none)": {
          backgroundColor: theme.palette.grey[300]
        },
        textDecoration: "none"
      },
      [`&.${fabClasses_default.focusVisible}`]: {
        boxShadow: theme.shadows[6]
      },
      [`&.${fabClasses_default.disabled}`]: {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground
      }
    }, ownerState.size === "small" && {
      width: 40,
      height: 40
    }, ownerState.size === "medium" && {
      width: 48,
      height: 48
    }, ownerState.variant === "extended" && {
      borderRadius: 48 / 2,
      padding: "0 16px",
      width: "auto",
      minHeight: "auto",
      minWidth: 48,
      height: 48
    }, ownerState.variant === "extended" && ownerState.size === "small" && {
      width: "auto",
      padding: "0 8px",
      borderRadius: 34 / 2,
      minWidth: 34,
      height: 34
    }, ownerState.variant === "extended" && ownerState.size === "medium" && {
      width: "auto",
      padding: "0 16px",
      borderRadius: 40 / 2,
      minWidth: 40,
      height: 40
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.color === "primary" && {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      "&:hover": {
        backgroundColor: theme.palette.primary.dark,
        "@media (hover: none)": {
          backgroundColor: theme.palette.primary.main
        }
      }
    }, ownerState.color === "secondary" && {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      "&:hover": {
        backgroundColor: theme.palette.secondary.dark,
        "@media (hover: none)": {
          backgroundColor: theme.palette.secondary.main
        }
      }
    }));
    Fab = /* @__PURE__ */ React32.forwardRef(function Fab2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiFab"
      });
      const {
        children,
        className,
        color: color3 = "default",
        component = "button",
        disabled = false,
        disableFocusRipple = false,
        focusVisibleClassName,
        size = "large",
        variant = "circular"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
      const ownerState = _extends({}, props, {
        color: color3,
        component,
        disabled,
        disableFocusRipple,
        size,
        variant
      });
      const classes = useUtilityClasses6(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FabRoot, _extends({
        className: clsx_m_default(classes.root, className),
        component,
        disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
        ownerState,
        ref
      }, other, {
        children
      }));
    });
    true ? Fab.propTypes = {
      children: import_prop_types20.default.node,
      classes: import_prop_types20.default.object,
      className: import_prop_types20.default.string,
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["default", "inherit", "primary", "secondary"]), import_prop_types20.default.string]),
      component: import_prop_types20.default.elementType,
      disabled: import_prop_types20.default.bool,
      disableFocusRipple: import_prop_types20.default.bool,
      disableRipple: import_prop_types20.default.bool,
      focusVisibleClassName: import_prop_types20.default.string,
      href: import_prop_types20.default.string,
      size: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["small", "medium", "large"]), import_prop_types20.default.string]),
      sx: import_prop_types20.default.object,
      variant: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["circular", "extended"]), import_prop_types20.default.string])
    } : void 0;
    Fab_default = Fab;
  }
});

// ../../node_modules/@mui/material/Fab/index.js
var init_Fab2 = __esm({
  "../../node_modules/@mui/material/Fab/index.js"() {
    init_Fab();
    init_fabClasses();
  }
});

// ../../node_modules/@mui/material/Button/buttonClasses.js
function getButtonUtilityClass(slot) {
  return generateUtilityClass("MuiButton", slot);
}
var buttonClasses, buttonClasses_default;
var init_buttonClasses = __esm({
  "../../node_modules/@mui/material/Button/buttonClasses.js"() {
    init_core();
    buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "contained", "containedInherit", "containedPrimary", "containedSecondary", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
    buttonClasses_default = buttonClasses;
  }
});

// ../../node_modules/@mui/material/Button/Button.js
var React33, import_prop_types21, import_jsx_runtime19, import_jsx_runtime20, _excluded17, useUtilityClasses7, commonIconStyles, ButtonRoot, ButtonStartIcon, ButtonEndIcon, Button, Button_default;
var init_Button = __esm({
  "../../node_modules/@mui/material/Button/Button.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React33 = __toModule(require_react());
    import_prop_types21 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_esm2();
    init_styled();
    init_useThemeProps3();
    init_ButtonBase2();
    init_capitalize2();
    init_buttonClasses();
    import_jsx_runtime19 = __toModule(require_jsx_runtime());
    import_jsx_runtime20 = __toModule(require_jsx_runtime());
    _excluded17 = ["children", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
    useUtilityClasses7 = (ownerState) => {
      const {
        color: color3,
        disableElevation,
        fullWidth,
        size,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, `${variant}${capitalize_default(color3)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, color3 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
        label: ["label"],
        startIcon: ["startIcon", `iconSize${capitalize_default(size)}`],
        endIcon: ["endIcon", `iconSize${capitalize_default(size)}`]
      };
      const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
      return _extends({}, classes, composedClasses);
    };
    commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
      "& > *:nth-of-type(1)": {
        fontSize: 18
      }
    }, ownerState.size === "medium" && {
      "& > *:nth-of-type(1)": {
        fontSize: 20
      }
    }, ownerState.size === "large" && {
      "& > *:nth-of-type(1)": {
        fontSize: 22
      }
    });
    ButtonRoot = styled_default(ButtonBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles2[`size${capitalize_default(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
      }
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: theme.shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: alpha2(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: alpha2(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${theme.palette[ownerState.color].main}`,
        backgroundColor: alpha2(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.palette.grey.A100,
        boxShadow: theme.shadows[4],
        "@media (hover: none)": {
          boxShadow: theme.shadows[2],
          backgroundColor: theme.palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: theme.palette[ownerState.color].dark,
        "@media (hover: none)": {
          backgroundColor: theme.palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: theme.shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: theme.shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: theme.palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${theme.palette.action.disabledBackground}`
      }, ownerState.variant === "outlined" && ownerState.color === "secondary" && {
        border: `1px solid ${theme.palette.action.disabled}`
      }, ownerState.variant === "contained" && {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: theme.palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: theme.palette[ownerState.color].main,
      border: `1px solid ${alpha2(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      boxShadow: theme.shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: theme.palette[ownerState.color].contrastText,
      backgroundColor: theme.palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    }), ({
      ownerState
    }) => ownerState.disableElevation && {
      boxShadow: "none",
      "&:hover": {
        boxShadow: "none"
      },
      [`&.${buttonClasses_default.focusVisible}`]: {
        boxShadow: "none"
      },
      "&:active": {
        boxShadow: "none"
      },
      [`&.${buttonClasses_default.disabled}`]: {
        boxShadow: "none"
      }
    });
    ButtonStartIcon = styled_default("span", {
      name: "MuiButton",
      slot: "StartIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.startIcon, styles2[`iconSize${capitalize_default(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: "inherit",
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === "small" && {
      marginLeft: -2
    }, commonIconStyles(ownerState)));
    ButtonEndIcon = styled_default("span", {
      name: "MuiButton",
      slot: "EndIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.endIcon, styles2[`iconSize${capitalize_default(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      display: "inherit",
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === "small" && {
      marginRight: -2
    }, commonIconStyles(ownerState)));
    Button = /* @__PURE__ */ React33.forwardRef(function Button2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiButton"
      });
      const {
        children,
        color: color3 = "primary",
        component = "button",
        disabled = false,
        disableElevation = false,
        disableFocusRipple = false,
        endIcon: endIconProp,
        focusVisibleClassName,
        fullWidth = false,
        size = "medium",
        startIcon: startIconProp,
        type,
        variant = "text"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
      const ownerState = _extends({}, props, {
        color: color3,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
      });
      const classes = useUtilityClasses7(ownerState);
      const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState,
        children: startIconProp
      });
      const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState,
        children: endIconProp
      });
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(ButtonRoot, _extends({
        ownerState,
        component,
        disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
        ref,
        type
      }, other, {
        classes,
        children: [startIcon, children, endIcon]
      }));
    });
    true ? Button.propTypes = {
      children: import_prop_types21.default.node,
      classes: import_prop_types21.default.object,
      color: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types21.default.string]),
      component: import_prop_types21.default.elementType,
      disabled: import_prop_types21.default.bool,
      disableElevation: import_prop_types21.default.bool,
      disableFocusRipple: import_prop_types21.default.bool,
      disableRipple: import_prop_types21.default.bool,
      endIcon: import_prop_types21.default.node,
      focusVisibleClassName: import_prop_types21.default.string,
      fullWidth: import_prop_types21.default.bool,
      href: import_prop_types21.default.string,
      size: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["small", "medium", "large"]), import_prop_types21.default.string]),
      startIcon: import_prop_types21.default.node,
      sx: import_prop_types21.default.object,
      type: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["button", "reset", "submit"]), import_prop_types21.default.string]),
      variant: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["contained", "outlined", "text"]), import_prop_types21.default.string])
    } : void 0;
    Button_default = Button;
  }
});

// ../../node_modules/@mui/material/Button/index.js
var init_Button2 = __esm({
  "../../node_modules/@mui/material/Button/index.js"() {
    init_Button();
    init_buttonClasses();
  }
});

// ../../node_modules/@mui/material/styles/useTheme.js
function useTheme5() {
  const theme = useTheme_default(defaultTheme_default);
  if (true) {
    React34.useDebugValue(theme);
  }
  return theme;
}
var React34;
var init_useTheme4 = __esm({
  "../../node_modules/@mui/material/styles/useTheme.js"() {
    React34 = __toModule(require_react());
    init_esm2();
    init_defaultTheme();
  }
});

// ../../node_modules/@mui/material/styles/index.js
var init_styles = __esm({
  "../../node_modules/@mui/material/styles/index.js"() {
    init_esm2();
  }
});

// ../../node_modules/@mui/material/ToggleButton/toggleButtonClasses.js
function getToggleButtonUtilityClass(slot) {
  return generateUtilityClass("MuiToggleButton", slot);
}
var toggleButtonClasses, toggleButtonClasses_default;
var init_toggleButtonClasses = __esm({
  "../../node_modules/@mui/material/ToggleButton/toggleButtonClasses.js"() {
    init_core();
    toggleButtonClasses = generateUtilityClasses("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge"]);
    toggleButtonClasses_default = toggleButtonClasses;
  }
});

// ../../node_modules/@mui/material/ToggleButton/ToggleButton.js
var React35, import_prop_types22, import_jsx_runtime21, _excluded18, useUtilityClasses8, ToggleButtonRoot, ToggleButton, ToggleButton_default;
var init_ToggleButton = __esm({
  "../../node_modules/@mui/material/ToggleButton/ToggleButton.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React35 = __toModule(require_react());
    import_prop_types22 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_styles();
    init_ButtonBase2();
    init_capitalize2();
    init_useThemeProps3();
    init_styled();
    init_toggleButtonClasses();
    import_jsx_runtime21 = __toModule(require_jsx_runtime());
    _excluded18 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];
    useUtilityClasses8 = (ownerState) => {
      const {
        classes,
        fullWidth,
        selected,
        disabled,
        size,
        color: color3
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", disabled && "disabled", fullWidth && "fullWidth", `size${capitalize_default(size)}`, color3]
      };
      return composeClasses(slots, getToggleButtonUtilityClass, classes);
    };
    ToggleButtonRoot = styled_default(ButtonBase_default, {
      name: "MuiToggleButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`size${capitalize_default(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const selectedColor = ownerState.color === "standard" ? theme.palette.text.primary : theme.palette[ownerState.color].main;
      return _extends({}, theme.typography.button, {
        borderRadius: theme.shape.borderRadius,
        padding: 11,
        border: `1px solid ${theme.palette.divider}`,
        color: theme.palette.action.active
      }, ownerState.fullWidth && {
        width: "100%"
      }, {
        [`&.${toggleButtonClasses_default.disabled}`]: {
          color: theme.palette.action.disabled,
          border: `1px solid ${theme.palette.action.disabledBackground}`
        },
        "&:hover": {
          textDecoration: "none",
          backgroundColor: alpha2(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        [`&.${toggleButtonClasses_default.selected}`]: {
          color: selectedColor,
          backgroundColor: alpha2(selectedColor, theme.palette.action.selectedOpacity),
          "&:hover": {
            backgroundColor: alpha2(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: alpha2(selectedColor, theme.palette.action.selectedOpacity)
            }
          }
        }
      }, ownerState.size === "small" && {
        padding: 7,
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && {
        padding: 15,
        fontSize: theme.typography.pxToRem(15)
      });
    });
    ToggleButton = /* @__PURE__ */ React35.forwardRef(function ToggleButton2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiToggleButton"
      });
      const {
        children,
        className,
        color: color3 = "standard",
        disabled = false,
        disableFocusRipple = false,
        fullWidth = false,
        onChange,
        onClick,
        selected,
        size = "medium",
        value
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
      const ownerState = _extends({}, props, {
        color: color3,
        disabled,
        disableFocusRipple,
        fullWidth,
        size
      });
      const classes = useUtilityClasses8(ownerState);
      const handleChange = (event) => {
        if (onClick) {
          onClick(event, value);
          if (event.defaultPrevented) {
            return;
          }
        }
        if (onChange) {
          onChange(event, value);
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ToggleButtonRoot, _extends({
        className: clsx_m_default(classes.root, className),
        disabled,
        focusRipple: !disableFocusRipple,
        ref,
        onClick: handleChange,
        onChange,
        value,
        ownerState,
        "aria-pressed": selected
      }, other, {
        children
      }));
    });
    true ? ToggleButton.propTypes = {
      children: import_prop_types22.default.node,
      classes: import_prop_types22.default.object,
      className: import_prop_types22.default.string,
      color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types22.default.string]),
      disabled: import_prop_types22.default.bool,
      disableFocusRipple: import_prop_types22.default.bool,
      disableRipple: import_prop_types22.default.bool,
      fullWidth: import_prop_types22.default.bool,
      onChange: import_prop_types22.default.func,
      onClick: import_prop_types22.default.func,
      selected: import_prop_types22.default.bool,
      size: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["small", "medium", "large"]), import_prop_types22.default.string]),
      sx: import_prop_types22.default.object,
      value: import_prop_types22.default.any.isRequired
    } : void 0;
    ToggleButton_default = ToggleButton;
  }
});

// ../../node_modules/@mui/material/ToggleButton/index.js
var init_ToggleButton2 = __esm({
  "../../node_modules/@mui/material/ToggleButton/index.js"() {
    init_ToggleButton();
    init_toggleButtonClasses();
  }
});

// ../../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js
function isValueSelected(value, candidate) {
  if (candidate === void 0 || value === void 0) {
    return false;
  }
  if (Array.isArray(candidate)) {
    return candidate.indexOf(value) >= 0;
  }
  return value === candidate;
}
var init_isValueSelected = __esm({
  "../../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js"() {
  }
});

// ../../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js
function getToggleButtonGroupUtilityClass(slot) {
  return generateUtilityClass("MuiToggleButtonGroup", slot);
}
var toggleButtonGroupClasses, toggleButtonGroupClasses_default;
var init_toggleButtonGroupClasses = __esm({
  "../../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js"() {
    init_core();
    toggleButtonGroupClasses = generateUtilityClasses("MuiToggleButtonGroup", ["root", "selected", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical"]);
    toggleButtonGroupClasses_default = toggleButtonGroupClasses;
  }
});

// ../../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
var React36, import_react_is2, import_prop_types23, import_jsx_runtime22, _excluded19, useUtilityClasses9, ToggleButtonGroupRoot, ToggleButtonGroup, ToggleButtonGroup_default;
var init_ToggleButtonGroup = __esm({
  "../../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React36 = __toModule(require_react());
    import_react_is2 = __toModule(require_react_is3());
    import_prop_types23 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_styled();
    init_useThemeProps3();
    init_capitalize2();
    init_isValueSelected();
    init_toggleButtonGroupClasses();
    import_jsx_runtime22 = __toModule(require_jsx_runtime());
    _excluded19 = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];
    useUtilityClasses9 = (ownerState) => {
      const {
        classes,
        orientation,
        fullWidth,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", orientation === "vertical" && "vertical", fullWidth && "fullWidth"],
        grouped: ["grouped", `grouped${capitalize_default(orientation)}`, disabled && "disabled"]
      };
      return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);
    };
    ToggleButtonGroupRoot = styled_default("div", {
      name: "MuiToggleButtonGroup",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${toggleButtonGroupClasses_default.grouped}`]: styles2.grouped
        }, {
          [`& .${toggleButtonGroupClasses_default.grouped}`]: styles2[`grouped${capitalize_default(ownerState.orientation)}`]
        }, styles2.root, ownerState.orientation === "vertical" && styles2.vertical, ownerState.fullWidth && styles2.fullWidth];
      }
    })(({
      ownerState,
      theme
    }) => _extends({
      display: "inline-flex",
      borderRadius: theme.shape.borderRadius
    }, ownerState.orientation === "vertical" && {
      flexDirection: "column"
    }, ownerState.fullWidth && {
      width: "100%"
    }, {
      [`& .${toggleButtonGroupClasses_default.grouped}`]: _extends({}, ownerState.orientation === "horizontal" ? {
        "&:not(:first-of-type)": {
          marginLeft: -1,
          borderLeft: "1px solid transparent",
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        },
        "&:not(:last-of-type)": {
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0
        },
        [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
          borderLeft: 0,
          marginLeft: 0
        }
      } : {
        "&:not(:first-of-type)": {
          marginTop: -1,
          borderTop: "1px solid transparent",
          borderTopLeftRadius: 0,
          borderTopRightRadius: 0
        },
        "&:not(:last-of-type)": {
          borderBottomLeftRadius: 0,
          borderBottomRightRadius: 0
        },
        [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
          borderTop: 0,
          marginTop: 0
        }
      })
    }));
    ToggleButtonGroup = /* @__PURE__ */ React36.forwardRef(function ToggleButtonGroup2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiToggleButtonGroup"
      });
      const {
        children,
        className,
        color: color3 = "standard",
        disabled = false,
        exclusive = false,
        fullWidth = false,
        onChange,
        orientation = "horizontal",
        size = "medium",
        value
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
      const ownerState = _extends({}, props, {
        disabled,
        fullWidth,
        orientation,
        size
      });
      const classes = useUtilityClasses9(ownerState);
      const handleChange = (event, buttonValue) => {
        if (!onChange) {
          return;
        }
        const index = value && value.indexOf(buttonValue);
        let newValue;
        if (value && index >= 0) {
          newValue = value.slice();
          newValue.splice(index, 1);
        } else {
          newValue = value ? value.concat(buttonValue) : [buttonValue];
        }
        onChange(event, newValue);
      };
      const handleExclusiveChange = (event, buttonValue) => {
        if (!onChange) {
          return;
        }
        onChange(event, value === buttonValue ? null : buttonValue);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ToggleButtonGroupRoot, _extends({
        role: "group",
        className: clsx_m_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: React36.Children.map(children, (child) => {
          if (!/* @__PURE__ */ React36.isValidElement(child)) {
            return null;
          }
          if (true) {
            if ((0, import_react_is2.isFragment)(child)) {
              console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
            }
          }
          return /* @__PURE__ */ React36.cloneElement(child, {
            className: clsx_m_default(classes.grouped, child.props.className),
            onChange: exclusive ? handleExclusiveChange : handleChange,
            selected: child.props.selected === void 0 ? isValueSelected(child.props.value, value) : child.props.selected,
            size: child.props.size || size,
            fullWidth,
            color: child.props.color || color3,
            disabled: child.props.disabled || disabled
          });
        })
      }));
    });
    true ? ToggleButtonGroup.propTypes = {
      children: import_prop_types23.default.node,
      classes: import_prop_types23.default.object,
      className: import_prop_types23.default.string,
      color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types23.default.string]),
      disabled: import_prop_types23.default.bool,
      exclusive: import_prop_types23.default.bool,
      fullWidth: import_prop_types23.default.bool,
      onChange: import_prop_types23.default.func,
      orientation: import_prop_types23.default.oneOf(["horizontal", "vertical"]),
      size: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["small", "medium", "large"]), import_prop_types23.default.string]),
      sx: import_prop_types23.default.object,
      value: import_prop_types23.default.any
    } : void 0;
    ToggleButtonGroup_default = ToggleButtonGroup;
  }
});

// ../../node_modules/@mui/material/ToggleButtonGroup/index.js
var init_ToggleButtonGroup2 = __esm({
  "../../node_modules/@mui/material/ToggleButtonGroup/index.js"() {
    init_ToggleButtonGroup();
    init_toggleButtonGroupClasses();
  }
});

// ../../node_modules/@mui/material/SvgIcon/svgIconClasses.js
function getSvgIconUtilityClass(slot) {
  return generateUtilityClass("MuiSvgIcon", slot);
}
var svgIconClasses;
var init_svgIconClasses = __esm({
  "../../node_modules/@mui/material/SvgIcon/svgIconClasses.js"() {
    init_core();
    svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  }
});

// ../../node_modules/@mui/material/SvgIcon/SvgIcon.js
var React37, import_prop_types24, import_jsx_runtime23, import_jsx_runtime24, _excluded20, useUtilityClasses10, SvgIconRoot, SvgIcon, SvgIcon_default;
var init_SvgIcon = __esm({
  "../../node_modules/@mui/material/SvgIcon/SvgIcon.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React37 = __toModule(require_react());
    import_prop_types24 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_capitalize2();
    init_useThemeProps3();
    init_styled();
    init_svgIconClasses();
    import_jsx_runtime23 = __toModule(require_jsx_runtime());
    import_jsx_runtime24 = __toModule(require_jsx_runtime());
    _excluded20 = ["children", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"];
    useUtilityClasses10 = (ownerState) => {
      const {
        color: color3,
        fontSize: fontSize2,
        classes
      } = ownerState;
      const slots = {
        root: ["root", color3 !== "inherit" && `color${capitalize_default(color3)}`, `fontSize${capitalize_default(fontSize2)}`]
      };
      return composeClasses(slots, getSvgIconUtilityClass, classes);
    };
    SvgIconRoot = styled_default("svg", {
      name: "MuiSvgIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize_default(ownerState.color)}`], styles2[`fontSize${capitalize_default(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$palette$ownerS, _theme$palette$ownerS2;
      return {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        transition: theme.transitions.create("fill", {
          duration: theme.transitions.duration.shorter
        }),
        fontSize: {
          inherit: "inherit",
          small: theme.typography.pxToRem(20),
          medium: theme.typography.pxToRem(24),
          large: theme.typography.pxToRem(35)
        }[ownerState.fontSize],
        color: (_theme$palette$ownerS = (_theme$palette$ownerS2 = theme.palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
          action: theme.palette.action.active,
          disabled: theme.palette.action.disabled,
          inherit: void 0
        }[ownerState.color]
      };
    });
    SvgIcon = /* @__PURE__ */ React37.forwardRef(function SvgIcon2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiSvgIcon"
      });
      const {
        children,
        className,
        color: color3 = "inherit",
        component = "svg",
        fontSize: fontSize2 = "medium",
        htmlColor,
        titleAccess,
        viewBox = "0 0 24 24"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
      const ownerState = _extends({}, props, {
        color: color3,
        component,
        fontSize: fontSize2,
        viewBox
      });
      const classes = useUtilityClasses10(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(SvgIconRoot, _extends({
        as: component,
        className: clsx_m_default(classes.root, className),
        ownerState,
        focusable: "false",
        viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? void 0 : true,
        role: titleAccess ? "img" : void 0,
        ref
      }, other, {
        children: [children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("title", {
          children: titleAccess
        }) : null]
      }));
    });
    true ? SvgIcon.propTypes = {
      children: import_prop_types24.default.node,
      classes: import_prop_types24.default.object,
      className: import_prop_types24.default.string,
      color: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types24.default.string]),
      component: import_prop_types24.default.elementType,
      fontSize: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types24.default.string]),
      htmlColor: import_prop_types24.default.string,
      shapeRendering: import_prop_types24.default.string,
      sx: import_prop_types24.default.object,
      titleAccess: import_prop_types24.default.string,
      viewBox: import_prop_types24.default.string
    } : void 0;
    SvgIcon.muiName = "SvgIcon";
    SvgIcon_default = SvgIcon;
  }
});

// ../../node_modules/@mui/material/SvgIcon/index.js
var init_SvgIcon2 = __esm({
  "../../node_modules/@mui/material/SvgIcon/index.js"() {
    init_SvgIcon();
    init_svgIconClasses();
  }
});

// ../../node_modules/@mui/material/utils/createSvgIcon.js
function createSvgIcon(path, displayName) {
  const Component3 = (props, ref) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(SvgIcon_default, _extends({
    "data-testid": `${displayName}Icon`,
    ref
  }, props, {
    children: path
  }));
  if (true) {
    Component3.displayName = `${displayName}Icon`;
  }
  Component3.muiName = SvgIcon_default.muiName;
  return /* @__PURE__ */ React38.memo(/* @__PURE__ */ React38.forwardRef(Component3));
}
var React38, import_jsx_runtime25;
var init_createSvgIcon = __esm({
  "../../node_modules/@mui/material/utils/createSvgIcon.js"() {
    init_extends();
    React38 = __toModule(require_react());
    init_SvgIcon2();
    import_jsx_runtime25 = __toModule(require_jsx_runtime());
  }
});

// ../../node_modules/@mui/material/utils/ownerDocument.js
var ownerDocument_default;
var init_ownerDocument2 = __esm({
  "../../node_modules/@mui/material/utils/ownerDocument.js"() {
    init_esm();
    ownerDocument_default = ownerDocument;
  }
});

// ../../node_modules/@mui/material/utils/index.js
var init_utils10 = __esm({
  "../../node_modules/@mui/material/utils/index.js"() {
    init_createSvgIcon();
  }
});

// ../../node_modules/@mui/material/transitions/utils.js
function getTransitionProps(props, options) {
  var _style$transitionDura, _style$transitionTimi;
  const {
    timeout: timeout2,
    easing: easing2,
    style: style3 = {}
  } = props;
  return {
    duration: (_style$transitionDura = style3.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
    easing: (_style$transitionTimi = style3.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
    delay: style3.transitionDelay
  };
}
var reflow;
var init_utils11 = __esm({
  "../../node_modules/@mui/material/transitions/utils.js"() {
    reflow = (node2) => node2.scrollTop;
  }
});

// ../../node_modules/@mui/material/Collapse/collapseClasses.js
var collapseClasses;
var init_collapseClasses = __esm({
  "../../node_modules/@mui/material/Collapse/collapseClasses.js"() {
    init_core();
    collapseClasses = generateUtilityClasses("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);
  }
});

// ../../node_modules/@mui/material/Collapse/index.js
var init_Collapse = __esm({
  "../../node_modules/@mui/material/Collapse/index.js"() {
    init_collapseClasses();
  }
});

// ../../node_modules/@mui/material/Paper/paperClasses.js
var paperClasses;
var init_paperClasses = __esm({
  "../../node_modules/@mui/material/Paper/paperClasses.js"() {
    init_core();
    paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  }
});

// ../../node_modules/@mui/material/Paper/index.js
var init_Paper = __esm({
  "../../node_modules/@mui/material/Paper/index.js"() {
    init_paperClasses();
  }
});

// ../../node_modules/@mui/material/Accordion/accordionClasses.js
var accordionClasses;
var init_accordionClasses = __esm({
  "../../node_modules/@mui/material/Accordion/accordionClasses.js"() {
    init_core();
    accordionClasses = generateUtilityClasses("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]);
  }
});

// ../../node_modules/@mui/material/Accordion/index.js
var init_Accordion = __esm({
  "../../node_modules/@mui/material/Accordion/index.js"() {
    init_accordionClasses();
  }
});

// ../../node_modules/@mui/material/AccordionActions/accordionActionsClasses.js
var accordionActionsClasses;
var init_accordionActionsClasses = __esm({
  "../../node_modules/@mui/material/AccordionActions/accordionActionsClasses.js"() {
    init_core();
    accordionActionsClasses = generateUtilityClasses("MuiAccordionActions", ["root", "spacing"]);
  }
});

// ../../node_modules/@mui/material/AccordionActions/index.js
var init_AccordionActions = __esm({
  "../../node_modules/@mui/material/AccordionActions/index.js"() {
    init_accordionActionsClasses();
  }
});

// ../../node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.js
var accordionDetailsClasses;
var init_accordionDetailsClasses = __esm({
  "../../node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.js"() {
    init_core();
    accordionDetailsClasses = generateUtilityClasses("MuiAccordionDetails", ["root"]);
  }
});

// ../../node_modules/@mui/material/AccordionDetails/index.js
var init_AccordionDetails = __esm({
  "../../node_modules/@mui/material/AccordionDetails/index.js"() {
    init_accordionDetailsClasses();
  }
});

// ../../node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.js
var accordionSummaryClasses;
var init_accordionSummaryClasses = __esm({
  "../../node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.js"() {
    init_core();
    accordionSummaryClasses = generateUtilityClasses("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]);
  }
});

// ../../node_modules/@mui/material/AccordionSummary/index.js
var init_AccordionSummary = __esm({
  "../../node_modules/@mui/material/AccordionSummary/index.js"() {
    init_accordionSummaryClasses();
  }
});

// ../../node_modules/@mui/material/Alert/alertClasses.js
var alertClasses;
var init_alertClasses = __esm({
  "../../node_modules/@mui/material/Alert/alertClasses.js"() {
    init_core();
    alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  }
});

// ../../node_modules/@mui/material/IconButton/iconButtonClasses.js
var iconButtonClasses;
var init_iconButtonClasses = __esm({
  "../../node_modules/@mui/material/IconButton/iconButtonClasses.js"() {
    init_core();
    iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  }
});

// ../../node_modules/@mui/material/IconButton/index.js
var init_IconButton = __esm({
  "../../node_modules/@mui/material/IconButton/index.js"() {
    init_iconButtonClasses();
  }
});

// ../../node_modules/@mui/material/Alert/index.js
var init_Alert = __esm({
  "../../node_modules/@mui/material/Alert/index.js"() {
    init_alertClasses();
  }
});

// ../../node_modules/@mui/material/Typography/typographyClasses.js
var typographyClasses;
var init_typographyClasses = __esm({
  "../../node_modules/@mui/material/Typography/typographyClasses.js"() {
    init_core();
    typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  }
});

// ../../node_modules/@mui/material/Typography/index.js
var init_Typography = __esm({
  "../../node_modules/@mui/material/Typography/index.js"() {
    init_typographyClasses();
  }
});

// ../../node_modules/@mui/material/AlertTitle/alertTitleClasses.js
var alertTitleClasses;
var init_alertTitleClasses = __esm({
  "../../node_modules/@mui/material/AlertTitle/alertTitleClasses.js"() {
    init_core();
    alertTitleClasses = generateUtilityClasses("MuiAlertTitle", ["root"]);
  }
});

// ../../node_modules/@mui/material/AlertTitle/index.js
var init_AlertTitle = __esm({
  "../../node_modules/@mui/material/AlertTitle/index.js"() {
    init_alertTitleClasses();
  }
});

// ../../node_modules/@mui/material/AppBar/appBarClasses.js
var appBarClasses;
var init_appBarClasses = __esm({
  "../../node_modules/@mui/material/AppBar/appBarClasses.js"() {
    init_core();
    appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent"]);
  }
});

// ../../node_modules/@mui/material/AppBar/index.js
var init_AppBar = __esm({
  "../../node_modules/@mui/material/AppBar/index.js"() {
    init_appBarClasses();
  }
});

// ../../node_modules/@mui/material/Popper/index.js
var init_Popper = __esm({
  "../../node_modules/@mui/material/Popper/index.js"() {
  }
});

// ../../node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
var listSubheaderClasses;
var init_listSubheaderClasses = __esm({
  "../../node_modules/@mui/material/ListSubheader/listSubheaderClasses.js"() {
    init_core();
    listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
  }
});

// ../../node_modules/@mui/material/ListSubheader/index.js
var init_ListSubheader = __esm({
  "../../node_modules/@mui/material/ListSubheader/index.js"() {
    init_listSubheaderClasses();
  }
});

// ../../node_modules/@mui/material/Chip/chipClasses.js
var chipClasses;
var init_chipClasses = __esm({
  "../../node_modules/@mui/material/Chip/chipClasses.js"() {
    init_core();
    chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorPrimary", "colorSecondary", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "focusVisible"]);
  }
});

// ../../node_modules/@mui/material/Chip/index.js
var init_Chip = __esm({
  "../../node_modules/@mui/material/Chip/index.js"() {
    init_chipClasses();
  }
});

// ../../node_modules/@mui/material/Autocomplete/autocompleteClasses.js
var autocompleteClasses;
var init_autocompleteClasses = __esm({
  "../../node_modules/@mui/material/Autocomplete/autocompleteClasses.js"() {
    init_core();
    autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  }
});

// ../../node_modules/@mui/material/Autocomplete/index.js
var init_Autocomplete = __esm({
  "../../node_modules/@mui/material/Autocomplete/index.js"() {
    init_autocompleteClasses();
  }
});

// ../../node_modules/@mui/material/Avatar/avatarClasses.js
var avatarClasses;
var init_avatarClasses = __esm({
  "../../node_modules/@mui/material/Avatar/avatarClasses.js"() {
    init_core();
    avatarClasses = generateUtilityClasses("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]);
  }
});

// ../../node_modules/@mui/material/Avatar/index.js
var init_Avatar = __esm({
  "../../node_modules/@mui/material/Avatar/index.js"() {
    init_avatarClasses();
  }
});

// ../../node_modules/@mui/material/AvatarGroup/avatarGroupClasses.js
var avatarGroupClasses;
var init_avatarGroupClasses = __esm({
  "../../node_modules/@mui/material/AvatarGroup/avatarGroupClasses.js"() {
    init_core();
    avatarGroupClasses = generateUtilityClasses("MuiAvatarGroup", ["root", "avatar"]);
  }
});

// ../../node_modules/@mui/material/AvatarGroup/index.js
var init_AvatarGroup = __esm({
  "../../node_modules/@mui/material/AvatarGroup/index.js"() {
    init_avatarGroupClasses();
  }
});

// ../../node_modules/@mui/material/Fade/Fade.js
var React39, import_prop_types25, import_jsx_runtime26, _excluded21, styles, defaultTimeout, Fade, Fade_default;
var init_Fade = __esm({
  "../../node_modules/@mui/material/Fade/Fade.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React39 = __toModule(require_react());
    import_prop_types25 = __toModule(require_prop_types());
    init_esm3();
    init_esm();
    init_createTransitions();
    init_useTheme4();
    init_utils11();
    init_useForkRef2();
    import_jsx_runtime26 = __toModule(require_jsx_runtime());
    _excluded21 = ["appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    styles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    defaultTimeout = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    Fade = /* @__PURE__ */ React39.forwardRef(function Fade2(props, ref) {
      const {
        appear = true,
        children,
        easing: easing2,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style: style3,
        timeout: timeout2 = defaultTimeout,
        TransitionComponent = Transition_default
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
      const theme = useTheme5();
      const enableStrictModeCompat = true;
      const nodeRef = React39.useRef(null);
      const foreignRef = useForkRef_default(children.ref, ref);
      const handleRef = useForkRef_default(nodeRef, foreignRef);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        reflow(node2);
        const transitionProps = getTransitionProps({
          style: style3,
          timeout: timeout2,
          easing: easing2
        }, {
          mode: "enter"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const transitionProps = getTransitionProps({
          style: style3,
          timeout: timeout2,
          easing: easing2
        }, {
          mode: "exit"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TransitionComponent, _extends({
        appear,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : void 0,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        timeout: timeout2
      }, other, {
        children: (state, childProps) => {
          return /* @__PURE__ */ React39.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles[state], style3, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    true ? Fade.propTypes = {
      appear: import_prop_types25.default.bool,
      children: elementAcceptingRef_default,
      easing: import_prop_types25.default.oneOfType([import_prop_types25.default.shape({
        enter: import_prop_types25.default.string,
        exit: import_prop_types25.default.string
      }), import_prop_types25.default.string]),
      in: import_prop_types25.default.bool,
      onEnter: import_prop_types25.default.func,
      onEntered: import_prop_types25.default.func,
      onEntering: import_prop_types25.default.func,
      onExit: import_prop_types25.default.func,
      onExited: import_prop_types25.default.func,
      onExiting: import_prop_types25.default.func,
      style: import_prop_types25.default.object,
      timeout: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.shape({
        appear: import_prop_types25.default.number,
        enter: import_prop_types25.default.number,
        exit: import_prop_types25.default.number
      })])
    } : void 0;
    Fade_default = Fade;
  }
});

// ../../node_modules/@mui/material/Fade/index.js
var init_Fade2 = __esm({
  "../../node_modules/@mui/material/Fade/index.js"() {
    init_Fade();
  }
});

// ../../node_modules/@mui/material/Backdrop/Backdrop.js
var React40, import_prop_types26, import_jsx_runtime27, _excluded23, extendUtilityClasses, BackdropRoot, Backdrop, Backdrop_default;
var init_Backdrop = __esm({
  "../../node_modules/@mui/material/Backdrop/Backdrop.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React40 = __toModule(require_react());
    import_prop_types26 = __toModule(require_prop_types());
    init_core();
    init_BackdropUnstyled2();
    init_styled();
    init_useThemeProps3();
    init_Fade2();
    import_jsx_runtime27 = __toModule(require_jsx_runtime());
    _excluded23 = ["children", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];
    extendUtilityClasses = (ownerState) => {
      const {
        classes
      } = ownerState;
      return classes;
    };
    BackdropRoot = styled_default("div", {
      name: "MuiBackdrop",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.invisible && styles2.invisible];
      }
    })(({
      ownerState
    }) => _extends({
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    }, ownerState.invisible && {
      backgroundColor: "transparent"
    }));
    Backdrop = /* @__PURE__ */ React40.forwardRef(function Backdrop2(inProps, ref) {
      var _componentsProps$root;
      const props = useThemeProps2({
        props: inProps,
        name: "MuiBackdrop"
      });
      const {
        children,
        components = {},
        componentsProps = {},
        className,
        invisible = false,
        open: open2,
        transitionDuration,
        TransitionComponent = Fade_default
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
      const ownerState = _extends({}, props, {
        invisible
      });
      const classes = extendUtilityClasses(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TransitionComponent, _extends({
        in: open2,
        timeout: transitionDuration
      }, other, {
        children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BackdropUnstyled_default, {
          className,
          invisible,
          components: _extends({
            Root: BackdropRoot
          }, components),
          componentsProps: {
            root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
              ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
            })
          },
          classes,
          ref,
          children
        })
      }));
    });
    true ? Backdrop.propTypes = {
      children: import_prop_types26.default.node,
      classes: import_prop_types26.default.object,
      className: import_prop_types26.default.string,
      components: import_prop_types26.default.shape({
        Root: import_prop_types26.default.elementType
      }),
      componentsProps: import_prop_types26.default.object,
      invisible: import_prop_types26.default.bool,
      open: import_prop_types26.default.bool.isRequired,
      sx: import_prop_types26.default.object,
      transitionDuration: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.shape({
        appear: import_prop_types26.default.number,
        enter: import_prop_types26.default.number,
        exit: import_prop_types26.default.number
      })])
    } : void 0;
    Backdrop_default = Backdrop;
  }
});

// ../../node_modules/@mui/material/Backdrop/index.js
var init_Backdrop2 = __esm({
  "../../node_modules/@mui/material/Backdrop/index.js"() {
    init_Backdrop();
    init_Backdrop();
  }
});

// ../../node_modules/@mui/material/Badge/Badge.js
var React41, import_prop_types27, import_jsx_runtime28, _excluded24, badgeClasses, RADIUS_STANDARD, RADIUS_DOT, extendUtilityClasses2, BadgeRoot, BadgeBadge, Badge;
var init_Badge = __esm({
  "../../node_modules/@mui/material/Badge/Badge.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React41 = __toModule(require_react());
    import_prop_types27 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_core();
    init_BadgeUnstyled2();
    init_styled();
    init_useThemeProps3();
    init_capitalize2();
    import_jsx_runtime28 = __toModule(require_jsx_runtime());
    _excluded24 = ["components", "componentsProps", "color", "invisible", "badgeContent", "showZero", "variant"];
    badgeClasses = _extends({}, badgeUnstyledClasses_default, generateUtilityClasses("MuiBadge", ["colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning"]));
    RADIUS_STANDARD = 10;
    RADIUS_DOT = 4;
    extendUtilityClasses2 = (ownerState) => {
      const {
        color: color3,
        classes = {}
      } = ownerState;
      return _extends({}, classes, {
        badge: clsx_m_default(classes.badge, color3 !== "default" && [getBadgeUtilityClass(`color${capitalize_default(color3)}`), classes[`color${capitalize_default(color3)}`]])
      });
    };
    BadgeRoot = styled_default("span", {
      name: "MuiBadge",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      position: "relative",
      display: "inline-flex",
      verticalAlign: "middle",
      flexShrink: 0
    });
    BadgeBadge = styled_default("span", {
      name: "MuiBadge",
      slot: "Badge",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.badge, styles2[ownerState.variant], styles2[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles2[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles2.invisible];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      position: "absolute",
      boxSizing: "border-box",
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(12),
      minWidth: RADIUS_STANDARD * 2,
      lineHeight: 1,
      padding: "0 6px",
      height: RADIUS_STANDARD * 2,
      borderRadius: RADIUS_STANDARD,
      zIndex: 1,
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen
      })
    }, ownerState.color !== "default" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.variant === "dot" && {
      borderRadius: RADIUS_DOT,
      height: RADIUS_DOT * 2,
      minWidth: RADIUS_DOT * 2,
      padding: 0
    }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
      top: 0,
      right: 0,
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(50%, -50%)"
      }
    }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
      bottom: 0,
      right: 0,
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(50%, 50%)"
      }
    }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
      top: 0,
      left: 0,
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(-50%, -50%)"
      }
    }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
      bottom: 0,
      left: 0,
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(-50%, 50%)"
      }
    }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
      top: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(50%, -50%)"
      }
    }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
      bottom: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(50%, 50%)"
      }
    }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
      top: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(-50%, -50%)"
      }
    }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
      bottom: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      [`&.${badgeClasses.invisible}`]: {
        transform: "scale(0) translate(-50%, 50%)"
      }
    }, ownerState.invisible && {
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.leavingScreen
      })
    }));
    Badge = /* @__PURE__ */ React41.forwardRef(function Badge2(inProps, ref) {
      var _componentsProps$root, _componentsProps$badg;
      const props = useThemeProps2({
        props: inProps,
        name: "MuiBadge"
      });
      const {
        components = {},
        componentsProps = {},
        color: colorProp = "default",
        invisible: invisibleProp,
        badgeContent: badgeContentProp,
        showZero = false,
        variant: variantProp = "standard"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
      const prevProps = usePreviousProps_default({
        color: colorProp
      });
      let invisible = invisibleProp;
      if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== "dot")) {
        invisible = true;
      }
      const {
        color: color3 = colorProp
      } = invisible ? prevProps : props;
      const ownerState = _extends({}, props, {
        invisible,
        color: color3
      });
      const classes = extendUtilityClasses2(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(BadgeUnstyled_default, _extends({
        invisible: invisibleProp,
        badgeContent: badgeContentProp,
        showZero,
        variant: variantProp
      }, other, {
        components: _extends({
          Root: BadgeRoot,
          Badge: BadgeBadge
        }, components),
        componentsProps: {
          root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
            ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
              color: color3
            })
          }),
          badge: _extends({}, componentsProps.badge, (!components.Thumb || !isHostComponent_default(components.Thumb)) && {
            ownerState: _extends({}, (_componentsProps$badg = componentsProps.badge) == null ? void 0 : _componentsProps$badg.ownerState, {
              color: color3
            })
          })
        },
        classes,
        ref
      }));
    });
    true ? Badge.propTypes = {
      anchorOrigin: import_prop_types27.default.shape({
        horizontal: import_prop_types27.default.oneOf(["left", "right"]).isRequired,
        vertical: import_prop_types27.default.oneOf(["bottom", "top"]).isRequired
      }),
      badgeContent: import_prop_types27.default.node,
      children: import_prop_types27.default.node,
      classes: import_prop_types27.default.object,
      color: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types27.default.string]),
      components: import_prop_types27.default.shape({
        Badge: import_prop_types27.default.elementType,
        Root: import_prop_types27.default.elementType
      }),
      componentsProps: import_prop_types27.default.object,
      invisible: import_prop_types27.default.bool,
      max: import_prop_types27.default.number,
      overlap: import_prop_types27.default.oneOf(["circular", "rectangular"]),
      showZero: import_prop_types27.default.bool,
      sx: import_prop_types27.default.object,
      variant: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["dot", "standard"]), import_prop_types27.default.string])
    } : void 0;
  }
});

// ../../node_modules/@mui/material/Badge/index.js
var init_Badge2 = __esm({
  "../../node_modules/@mui/material/Badge/index.js"() {
    init_Badge();
  }
});

// ../../node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.js
var bottomNavigationClasses;
var init_bottomNavigationClasses = __esm({
  "../../node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.js"() {
    init_core();
    bottomNavigationClasses = generateUtilityClasses("MuiBottomNavigation", ["root"]);
  }
});

// ../../node_modules/@mui/material/BottomNavigation/index.js
var init_BottomNavigation = __esm({
  "../../node_modules/@mui/material/BottomNavigation/index.js"() {
    init_bottomNavigationClasses();
  }
});

// ../../node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.js
var bottomNavigationActionClasses;
var init_bottomNavigationActionClasses = __esm({
  "../../node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.js"() {
    init_core();
    bottomNavigationActionClasses = generateUtilityClasses("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]);
  }
});

// ../../node_modules/@mui/material/BottomNavigationAction/index.js
var init_BottomNavigationAction = __esm({
  "../../node_modules/@mui/material/BottomNavigationAction/index.js"() {
    init_bottomNavigationActionClasses();
  }
});

// ../../node_modules/@mui/material/Box/index.js
var init_Box = __esm({
  "../../node_modules/@mui/material/Box/index.js"() {
  }
});

// ../../node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.js
var breadcrumbsClasses;
var init_breadcrumbsClasses = __esm({
  "../../node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.js"() {
    init_core();
    breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator"]);
  }
});

// ../../node_modules/@mui/material/Breadcrumbs/index.js
var init_Breadcrumbs = __esm({
  "../../node_modules/@mui/material/Breadcrumbs/index.js"() {
    init_breadcrumbsClasses();
  }
});

// ../../node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js
var buttonGroupClasses;
var init_buttonGroupClasses = __esm({
  "../../node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js"() {
    init_core();
    buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary"]);
  }
});

// ../../node_modules/@mui/material/ButtonGroup/index.js
var init_ButtonGroup = __esm({
  "../../node_modules/@mui/material/ButtonGroup/index.js"() {
    init_buttonGroupClasses();
  }
});

// ../../node_modules/@mui/material/Card/cardClasses.js
var cardClasses;
var init_cardClasses = __esm({
  "../../node_modules/@mui/material/Card/cardClasses.js"() {
    init_core();
    cardClasses = generateUtilityClasses("MuiCard", ["root"]);
  }
});

// ../../node_modules/@mui/material/Card/index.js
var init_Card = __esm({
  "../../node_modules/@mui/material/Card/index.js"() {
    init_cardClasses();
  }
});

// ../../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js
var cardActionAreaClasses;
var init_cardActionAreaClasses = __esm({
  "../../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js"() {
    init_core();
    cardActionAreaClasses = generateUtilityClasses("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]);
  }
});

// ../../node_modules/@mui/material/CardActionArea/index.js
var init_CardActionArea = __esm({
  "../../node_modules/@mui/material/CardActionArea/index.js"() {
    init_cardActionAreaClasses();
  }
});

// ../../node_modules/@mui/material/CardActions/cardActionsClasses.js
var cardActionsClasses;
var init_cardActionsClasses = __esm({
  "../../node_modules/@mui/material/CardActions/cardActionsClasses.js"() {
    init_core();
    cardActionsClasses = generateUtilityClasses("MuiCardActions", ["root", "spacing"]);
  }
});

// ../../node_modules/@mui/material/CardActions/index.js
var init_CardActions = __esm({
  "../../node_modules/@mui/material/CardActions/index.js"() {
    init_cardActionsClasses();
  }
});

// ../../node_modules/@mui/material/CardContent/cardContentClasses.js
var cardContentClasses;
var init_cardContentClasses = __esm({
  "../../node_modules/@mui/material/CardContent/cardContentClasses.js"() {
    init_core();
    cardContentClasses = generateUtilityClasses("MuiCardContent", ["root"]);
  }
});

// ../../node_modules/@mui/material/CardContent/index.js
var init_CardContent = __esm({
  "../../node_modules/@mui/material/CardContent/index.js"() {
    init_cardContentClasses();
  }
});

// ../../node_modules/@mui/material/CardHeader/cardHeaderClasses.js
var cardHeaderClasses;
var init_cardHeaderClasses = __esm({
  "../../node_modules/@mui/material/CardHeader/cardHeaderClasses.js"() {
    init_core();
    cardHeaderClasses = generateUtilityClasses("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]);
  }
});

// ../../node_modules/@mui/material/CardHeader/index.js
var init_CardHeader = __esm({
  "../../node_modules/@mui/material/CardHeader/index.js"() {
    init_cardHeaderClasses();
  }
});

// ../../node_modules/@mui/material/CardMedia/cardMediaClasses.js
var cardMediaClasses;
var init_cardMediaClasses = __esm({
  "../../node_modules/@mui/material/CardMedia/cardMediaClasses.js"() {
    init_core();
    cardMediaClasses = generateUtilityClasses("MuiCardMedia", ["root", "media", "img"]);
  }
});

// ../../node_modules/@mui/material/CardMedia/index.js
var init_CardMedia = __esm({
  "../../node_modules/@mui/material/CardMedia/index.js"() {
    init_cardMediaClasses();
  }
});

// ../../node_modules/@mui/material/FormControl/FormControlContext.js
var React42, FormControlContext, FormControlContext_default;
var init_FormControlContext = __esm({
  "../../node_modules/@mui/material/FormControl/FormControlContext.js"() {
    React42 = __toModule(require_react());
    FormControlContext = /* @__PURE__ */ React42.createContext();
    if (true) {
      FormControlContext.displayName = "FormControlContext";
    }
    FormControlContext_default = FormControlContext;
  }
});

// ../../node_modules/@mui/material/FormControl/useFormControl.js
function useFormControl() {
  return React43.useContext(FormControlContext_default);
}
var React43;
var init_useFormControl = __esm({
  "../../node_modules/@mui/material/FormControl/useFormControl.js"() {
    React43 = __toModule(require_react());
    init_FormControlContext();
  }
});

// ../../node_modules/@mui/material/Checkbox/checkboxClasses.js
var checkboxClasses;
var init_checkboxClasses = __esm({
  "../../node_modules/@mui/material/Checkbox/checkboxClasses.js"() {
    init_core();
    checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
  }
});

// ../../node_modules/@mui/material/Checkbox/index.js
var init_Checkbox = __esm({
  "../../node_modules/@mui/material/Checkbox/index.js"() {
    init_checkboxClasses();
  }
});

// ../../node_modules/@mui/material/CircularProgress/circularProgressClasses.js
var circularProgressClasses;
var init_circularProgressClasses = __esm({
  "../../node_modules/@mui/material/CircularProgress/circularProgressClasses.js"() {
    init_core();
    circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
  }
});

// ../../node_modules/@mui/material/CircularProgress/index.js
var init_CircularProgress = __esm({
  "../../node_modules/@mui/material/CircularProgress/index.js"() {
    init_circularProgressClasses();
  }
});

// ../../node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function ClickAwayListener(props) {
  const {
    children,
    disableReactTree = false,
    mouseEvent = "onClick",
    onClickAway,
    touchEvent = "onTouchEnd"
  } = props;
  const movedRef = React44.useRef(false);
  const nodeRef = React44.useRef(null);
  const activatedRef = React44.useRef(false);
  const syntheticEventRef = React44.useRef(false);
  React44.useEffect(() => {
    setTimeout(() => {
      activatedRef.current = true;
    }, 0);
    return () => {
      activatedRef.current = false;
    };
  }, []);
  const handleRef = useForkRef_default(children.ref, nodeRef);
  const handleClickAway = useEventCallback_default((event) => {
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument_default(nodeRef.current);
    if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  const createHandleSynthetic = (handlerName) => (event) => {
    syntheticEventRef.current = true;
    const childrenPropsHandler = children.props[handlerName];
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  React44.useEffect(() => {
    if (touchEvent !== false) {
      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
      const doc = ownerDocument_default(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  React44.useEffect(() => {
    if (mouseEvent !== false) {
      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      const doc = ownerDocument_default(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return () => {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return void 0;
  }, [handleClickAway, mouseEvent]);
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(React44.Fragment, {
    children: /* @__PURE__ */ React44.cloneElement(children, childrenProps)
  });
}
var React44, import_prop_types28, import_jsx_runtime29;
var init_ClickAwayListener = __esm({
  "../../node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js"() {
    React44 = __toModule(require_react());
    import_prop_types28 = __toModule(require_prop_types());
    init_esm();
    init_ownerDocument2();
    init_useForkRef2();
    init_useEventCallback2();
    import_jsx_runtime29 = __toModule(require_jsx_runtime());
    true ? ClickAwayListener.propTypes = {
      children: elementAcceptingRef_default.isRequired,
      disableReactTree: import_prop_types28.default.bool,
      mouseEvent: import_prop_types28.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
      onClickAway: import_prop_types28.default.func.isRequired,
      touchEvent: import_prop_types28.default.oneOf(["onTouchEnd", "onTouchStart", false])
    } : void 0;
    if (true) {
      ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
    }
  }
});

// ../../node_modules/@mui/material/ClickAwayListener/index.js
var init_ClickAwayListener2 = __esm({
  "../../node_modules/@mui/material/ClickAwayListener/index.js"() {
    init_ClickAwayListener();
  }
});

// ../../node_modules/@mui/material/Container/containerClasses.js
var containerClasses;
var init_containerClasses = __esm({
  "../../node_modules/@mui/material/Container/containerClasses.js"() {
    init_core();
    containerClasses = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  }
});

// ../../node_modules/@mui/material/Container/index.js
var init_Container = __esm({
  "../../node_modules/@mui/material/Container/index.js"() {
    init_containerClasses();
  }
});

// ../../node_modules/@mui/material/GlobalStyles/index.js
var init_GlobalStyles = __esm({
  "../../node_modules/@mui/material/GlobalStyles/index.js"() {
  }
});

// ../../node_modules/@mui/material/CssBaseline/index.js
var init_CssBaseline = __esm({
  "../../node_modules/@mui/material/CssBaseline/index.js"() {
  }
});

// ../../node_modules/@mui/material/darkScrollbar/index.js
var init_darkScrollbar = __esm({
  "../../node_modules/@mui/material/darkScrollbar/index.js"() {
  }
});

// ../../node_modules/@mui/material/Modal/Modal.js
var React45, import_prop_types29, import_jsx_runtime30, _excluded25, extendUtilityClasses3, ModalRoot, ModalBackdrop, Modal;
var init_Modal = __esm({
  "../../node_modules/@mui/material/Modal/Modal.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React45 = __toModule(require_react());
    import_prop_types29 = __toModule(require_prop_types());
    init_core();
    init_esm();
    init_ModalUnstyled2();
    init_styled();
    init_useThemeProps3();
    init_Backdrop2();
    import_jsx_runtime30 = __toModule(require_jsx_runtime());
    _excluded25 = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];
    extendUtilityClasses3 = (ownerState) => {
      return ownerState.classes;
    };
    ModalRoot = styled_default("div", {
      name: "MuiModal",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: "fixed",
      zIndex: theme.zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: "hidden"
    }));
    ModalBackdrop = styled_default(Backdrop_default, {
      name: "MuiModal",
      slot: "Backdrop",
      overridesResolver: (props, styles2) => {
        return styles2.backdrop;
      }
    })({
      zIndex: -1
    });
    Modal = /* @__PURE__ */ React45.forwardRef(function Modal2(inProps, ref) {
      var _componentsProps$root;
      const props = useThemeProps2({
        name: "MuiModal",
        props: inProps
      });
      const {
        BackdropComponent = ModalBackdrop,
        closeAfterTransition = false,
        children,
        components = {},
        componentsProps = {},
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
      const [exited, setExited] = React45.useState(true);
      const commonProps = {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
      };
      const ownerState = _extends({}, props, commonProps, {
        exited
      });
      const classes = extendUtilityClasses3(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ModalUnstyled_default, _extends({
        components: _extends({
          Root: ModalRoot
        }, components),
        componentsProps: {
          root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
            ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
          })
        },
        BackdropComponent,
        onTransitionEnter: () => setExited(false),
        onTransitionExited: () => setExited(true),
        ref
      }, other, {
        classes
      }, commonProps, {
        children
      }));
    });
    true ? Modal.propTypes = {
      BackdropComponent: import_prop_types29.default.elementType,
      BackdropProps: import_prop_types29.default.object,
      children: elementAcceptingRef_default.isRequired,
      classes: import_prop_types29.default.object,
      closeAfterTransition: import_prop_types29.default.bool,
      components: import_prop_types29.default.shape({
        Root: import_prop_types29.default.elementType
      }),
      componentsProps: import_prop_types29.default.object,
      container: import_prop_types29.default.oneOfType([HTMLElementType, import_prop_types29.default.func]),
      disableAutoFocus: import_prop_types29.default.bool,
      disableEnforceFocus: import_prop_types29.default.bool,
      disableEscapeKeyDown: import_prop_types29.default.bool,
      disablePortal: import_prop_types29.default.bool,
      disableRestoreFocus: import_prop_types29.default.bool,
      disableScrollLock: import_prop_types29.default.bool,
      hideBackdrop: import_prop_types29.default.bool,
      keepMounted: import_prop_types29.default.bool,
      onBackdropClick: import_prop_types29.default.func,
      onClose: import_prop_types29.default.func,
      open: import_prop_types29.default.bool.isRequired,
      sx: import_prop_types29.default.object
    } : void 0;
  }
});

// ../../node_modules/@mui/material/Modal/index.js
var init_Modal2 = __esm({
  "../../node_modules/@mui/material/Modal/index.js"() {
    init_ModalUnstyled2();
    init_Modal();
  }
});

// ../../node_modules/@mui/material/Dialog/dialogClasses.js
var dialogClasses;
var init_dialogClasses = __esm({
  "../../node_modules/@mui/material/Dialog/dialogClasses.js"() {
    init_core();
    dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  }
});

// ../../node_modules/@mui/material/Dialog/index.js
var init_Dialog = __esm({
  "../../node_modules/@mui/material/Dialog/index.js"() {
    init_dialogClasses();
  }
});

// ../../node_modules/@mui/material/DialogActions/dialogActionsClasses.js
var dialogActionsClasses;
var init_dialogActionsClasses = __esm({
  "../../node_modules/@mui/material/DialogActions/dialogActionsClasses.js"() {
    init_core();
    dialogActionsClasses = generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);
  }
});

// ../../node_modules/@mui/material/DialogActions/index.js
var init_DialogActions = __esm({
  "../../node_modules/@mui/material/DialogActions/index.js"() {
    init_dialogActionsClasses();
  }
});

// ../../node_modules/@mui/material/DialogContent/dialogContentClasses.js
var dialogContentClasses;
var init_dialogContentClasses = __esm({
  "../../node_modules/@mui/material/DialogContent/dialogContentClasses.js"() {
    init_core();
    dialogContentClasses = generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);
  }
});

// ../../node_modules/@mui/material/DialogContent/index.js
var init_DialogContent = __esm({
  "../../node_modules/@mui/material/DialogContent/index.js"() {
    init_dialogContentClasses();
  }
});

// ../../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js
var dialogContentTextClasses;
var init_dialogContentTextClasses = __esm({
  "../../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js"() {
    init_core();
    dialogContentTextClasses = generateUtilityClasses("MuiDialogContentText", ["root"]);
  }
});

// ../../node_modules/@mui/material/DialogContentText/index.js
var init_DialogContentText = __esm({
  "../../node_modules/@mui/material/DialogContentText/index.js"() {
    init_dialogContentTextClasses();
  }
});

// ../../node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
var dialogTitleClasses;
var init_dialogTitleClasses = __esm({
  "../../node_modules/@mui/material/DialogTitle/dialogTitleClasses.js"() {
    init_core();
    dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
  }
});

// ../../node_modules/@mui/material/DialogTitle/index.js
var init_DialogTitle = __esm({
  "../../node_modules/@mui/material/DialogTitle/index.js"() {
    init_dialogTitleClasses();
  }
});

// ../../node_modules/@mui/material/Divider/dividerClasses.js
var dividerClasses;
var init_dividerClasses = __esm({
  "../../node_modules/@mui/material/Divider/dividerClasses.js"() {
    init_core();
    dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  }
});

// ../../node_modules/@mui/material/Divider/index.js
var init_Divider = __esm({
  "../../node_modules/@mui/material/Divider/index.js"() {
    init_dividerClasses();
  }
});

// ../../node_modules/@mui/material/Slide/index.js
var init_Slide = __esm({
  "../../node_modules/@mui/material/Slide/index.js"() {
  }
});

// ../../node_modules/@mui/material/Drawer/drawerClasses.js
var drawerClasses;
var init_drawerClasses = __esm({
  "../../node_modules/@mui/material/Drawer/drawerClasses.js"() {
    init_core();
    drawerClasses = generateUtilityClasses("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
  }
});

// ../../node_modules/@mui/material/Drawer/index.js
var init_Drawer = __esm({
  "../../node_modules/@mui/material/Drawer/index.js"() {
    init_drawerClasses();
  }
});

// ../../node_modules/@mui/material/FormControl/formControlState.js
function formControlState({
  props,
  states,
  muiFormControl
}) {
  return states.reduce((acc, state) => {
    acc[state] = props[state];
    if (muiFormControl) {
      if (typeof props[state] === "undefined") {
        acc[state] = muiFormControl[state];
      }
    }
    return acc;
  }, {});
}
var init_formControlState = __esm({
  "../../node_modules/@mui/material/FormControl/formControlState.js"() {
  }
});

// ../../node_modules/@mui/material/TextareaAutosize/index.js
var init_TextareaAutosize = __esm({
  "../../node_modules/@mui/material/TextareaAutosize/index.js"() {
  }
});

// ../../node_modules/@mui/material/InputBase/inputBaseClasses.js
var inputBaseClasses;
var init_inputBaseClasses = __esm({
  "../../node_modules/@mui/material/InputBase/inputBaseClasses.js"() {
    init_core();
    inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  }
});

// ../../node_modules/@mui/material/InputBase/index.js
var init_InputBase = __esm({
  "../../node_modules/@mui/material/InputBase/index.js"() {
    init_inputBaseClasses();
  }
});

// ../../node_modules/@mui/material/FilledInput/filledInputClasses.js
var filledInputClasses;
var init_filledInputClasses = __esm({
  "../../node_modules/@mui/material/FilledInput/filledInputClasses.js"() {
    init_core();
    filledInputClasses = generateUtilityClasses("MuiFilledInput", ["root", "colorSecondary", "underline", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "hiddenLabel", "input", "inputSizeSmall", "inputHiddenLabel", "inputMultiline", "inputAdornedStart", "inputAdornedEnd"]);
  }
});

// ../../node_modules/@mui/material/FilledInput/index.js
var init_FilledInput = __esm({
  "../../node_modules/@mui/material/FilledInput/index.js"() {
    init_filledInputClasses();
  }
});

// ../../node_modules/@mui/material/FormControl/formControlClasses.js
var formControlClasses;
var init_formControlClasses = __esm({
  "../../node_modules/@mui/material/FormControl/formControlClasses.js"() {
    init_core();
    formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
  }
});

// ../../node_modules/@mui/material/FormControl/index.js
var init_FormControl = __esm({
  "../../node_modules/@mui/material/FormControl/index.js"() {
    init_formControlClasses();
  }
});

// ../../node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
var formControlLabelClasses;
var init_formControlLabelClasses = __esm({
  "../../node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js"() {
    init_core();
    formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label"]);
  }
});

// ../../node_modules/@mui/material/FormControlLabel/index.js
var init_FormControlLabel = __esm({
  "../../node_modules/@mui/material/FormControlLabel/index.js"() {
    init_formControlLabelClasses();
  }
});

// ../../node_modules/@mui/material/FormGroup/formGroupClasses.js
var formGroupClasses;
var init_formGroupClasses = __esm({
  "../../node_modules/@mui/material/FormGroup/formGroupClasses.js"() {
    init_core();
    formGroupClasses = generateUtilityClasses("MuiFormGroup", ["root", "row"]);
  }
});

// ../../node_modules/@mui/material/FormGroup/index.js
var init_FormGroup = __esm({
  "../../node_modules/@mui/material/FormGroup/index.js"() {
    init_formGroupClasses();
  }
});

// ../../node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
var formHelperTextClasses;
var init_formHelperTextClasses = __esm({
  "../../node_modules/@mui/material/FormHelperText/formHelperTextClasses.js"() {
    init_core();
    formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  }
});

// ../../node_modules/@mui/material/FormHelperText/index.js
var init_FormHelperText = __esm({
  "../../node_modules/@mui/material/FormHelperText/index.js"() {
    init_formHelperTextClasses();
  }
});

// ../../node_modules/@mui/material/FormLabel/formLabelClasses.js
function getFormLabelUtilityClasses(slot) {
  return generateUtilityClass("MuiFormLabel", slot);
}
var formLabelClasses, formLabelClasses_default;
var init_formLabelClasses = __esm({
  "../../node_modules/@mui/material/FormLabel/formLabelClasses.js"() {
    init_core();
    formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
    formLabelClasses_default = formLabelClasses;
  }
});

// ../../node_modules/@mui/material/FormLabel/FormLabel.js
var React46, import_prop_types30, import_jsx_runtime31, _excluded26, useUtilityClasses11, FormLabelRoot, AsteriskComponent, FormLabel;
var init_FormLabel = __esm({
  "../../node_modules/@mui/material/FormLabel/FormLabel.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React46 = __toModule(require_react());
    import_prop_types30 = __toModule(require_prop_types());
    init_clsx_m();
    init_core();
    init_formControlState();
    init_useFormControl();
    init_capitalize2();
    init_useThemeProps3();
    init_styled();
    init_formLabelClasses();
    import_jsx_runtime31 = __toModule(require_jsx_runtime());
    _excluded26 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
    useUtilityClasses11 = (ownerState) => {
      const {
        classes,
        color: color3,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize_default(color3)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormLabelUtilityClasses, classes);
    };
    FormLabelRoot = styled_default("label", {
      name: "MuiFormLabel",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles2) => {
        return _extends({}, styles2.root, ownerState.color === "secondary" && styles2.colorSecondary, ownerState.filled && styles2.filled);
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: theme.palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: "1.4375em",
      padding: 0,
      position: "relative",
      [`&.${formLabelClasses_default.focused}`]: {
        color: theme.palette[ownerState.color].main
      },
      [`&.${formLabelClasses_default.disabled}`]: {
        color: theme.palette.text.disabled
      },
      [`&.${formLabelClasses_default.error}`]: {
        color: theme.palette.error.main
      }
    }));
    AsteriskComponent = styled_default("span", {
      name: "MuiFormLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles2) => styles2.asterisk
    })(({
      theme
    }) => ({
      [`&.${formLabelClasses_default.error}`]: {
        color: theme.palette.error.main
      }
    }));
    FormLabel = /* @__PURE__ */ React46.forwardRef(function FormLabel2(inProps, ref) {
      const props = useThemeProps2({
        props: inProps,
        name: "MuiFormLabel"
      });
      const {
        children,
        className,
        component = "label"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "required", "focused", "disabled", "error", "filled"]
      });
      const ownerState = _extends({}, props, {
        color: fcs.color || "primary",
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses11(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(FormLabelRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className),
        ref
      }, other, {
        children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }));
    });
    true ? FormLabel.propTypes = {
      children: import_prop_types30.default.node,
      classes: import_prop_types30.default.object,
      className: import_prop_types30.default.string,
      color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types30.default.string]),
      component: import_prop_types30.default.elementType,
      disabled: import_prop_types30.default.bool,
      error: import_prop_types30.default.bool,
      filled: import_prop_types30.default.bool,
      focused: import_prop_types30.default.bool,
      required: import_prop_types30.default.bool,
      sx: import_prop_types30.default.object
    } : void 0;
  }
});

// ../../node_modules/@mui/material/FormLabel/index.js
var init_FormLabel2 = __esm({
  "../../node_modules/@mui/material/FormLabel/index.js"() {
    init_FormLabel();
    init_formLabelClasses();
  }
});

// ../../node_modules/@mui/material/Grid/gridClasses.js
var SPACINGS, DIRECTIONS, WRAPS, GRID_SIZES, gridClasses;
var init_gridClasses = __esm({
  "../../node_modules/@mui/material/Grid/gridClasses.js"() {
    init_core();
    SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    gridClasses = generateUtilityClasses("MuiGrid", [
      "root",
      "container",
      "item",
      "zeroMinWidth",
      ...SPACINGS.map((spacing2) => `spacing-xs-${spacing2}`),
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      ...WRAPS.map((wrap3) => `wrap-xs-${wrap3}`),
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
  }
});

// ../../node_modules/@mui/material/Grid/index.js
var init_Grid = __esm({
  "../../node_modules/@mui/material/Grid/index.js"() {
    init_gridClasses();
  }
});

// ../../node_modules/@mui/material/Grow/index.js
var init_Grow = __esm({
  "../../node_modules/@mui/material/Grow/index.js"() {
  }
});

// ../../node_modules/@mui/material/useMediaQuery/index.js
var init_useMediaQuery = __esm({
  "../../node_modules/@mui/material/useMediaQuery/index.js"() {
  }
});

// ../../node_modules/@mui/material/Hidden/index.js
var init_Hidden = __esm({
  "../../node_modules/@mui/material/Hidden/index.js"() {
  }
});

// ../../node_modules/@mui/material/Icon/iconClasses.js
var iconClasses;
var init_iconClasses = __esm({
  "../../node_modules/@mui/material/Icon/iconClasses.js"() {
    init_core();
    iconClasses = generateUtilityClasses("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  }
});

// ../../node_modules/@mui/material/Icon/index.js
var init_Icon = __esm({
  "../../node_modules/@mui/material/Icon/index.js"() {
    init_iconClasses();
  }
});

// ../../node_modules/@mui/material/ImageList/imageListClasses.js
var imageListClasses;
var init_imageListClasses = __esm({
  "../../node_modules/@mui/material/ImageList/imageListClasses.js"() {
    init_core();
    imageListClasses = generateUtilityClasses("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]);
  }
});

// ../../node_modules/@mui/material/ImageList/index.js
var init_ImageList = __esm({
  "../../node_modules/@mui/material/ImageList/index.js"() {
    init_imageListClasses();
  }
});

// ../../node_modules/@mui/material/ImageListItem/imageListItemClasses.js
var imageListItemClasses;
var init_imageListItemClasses = __esm({
  "../../node_modules/@mui/material/ImageListItem/imageListItemClasses.js"() {
    init_core();
    imageListItemClasses = generateUtilityClasses("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]);
  }
});

// ../../node_modules/@mui/material/ImageListItem/index.js
var init_ImageListItem = __esm({
  "../../node_modules/@mui/material/ImageListItem/index.js"() {
    init_imageListItemClasses();
  }
});

// ../../node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.js
var imageListItemBarClasses;
var init_imageListItemBarClasses = __esm({
  "../../node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.js"() {
    init_core();
    imageListItemBarClasses = generateUtilityClasses("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]);
  }
});

// ../../node_modules/@mui/material/ImageListItemBar/index.js
var init_ImageListItemBar = __esm({
  "../../node_modules/@mui/material/ImageListItemBar/index.js"() {
    init_imageListItemBarClasses();
  }
});

// ../../node_modules/@mui/material/Input/inputClasses.js
var inputClasses;
var init_inputClasses = __esm({
  "../../node_modules/@mui/material/Input/inputClasses.js"() {
    init_core();
    inputClasses = generateUtilityClasses("MuiInput", ["root", "formControl", "focused", "disabled", "colorSecondary", "underline", "error", "sizeSmall", "multiline", "fullWidth", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch"]);
  }
});

// ../../node_modules/@mui/material/Input/index.js
var init_Input = __esm({
  "../../node_modules/@mui/material/Input/index.js"() {
    init_inputClasses();
  }
});

// ../../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
var inputAdornmentClasses;
var init_inputAdornmentClasses = __esm({
  "../../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js"() {
    init_core();
    inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  }
});

// ../../node_modules/@mui/material/InputAdornment/index.js
var init_InputAdornment = __esm({
  "../../node_modules/@mui/material/InputAdornment/index.js"() {
    init_inputAdornmentClasses();
  }
});

// ../../node_modules/@mui/material/InputLabel/inputLabelClasses.js
var inputLabelClasses;
var init_inputLabelClasses = __esm({
  "../../node_modules/@mui/material/InputLabel/inputLabelClasses.js"() {
    init_core();
    inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
  }
});

// ../../node_modules/@mui/material/InputLabel/index.js
var init_InputLabel = __esm({
  "../../node_modules/@mui/material/InputLabel/index.js"() {
    init_inputLabelClasses();
  }
});

// ../../node_modules/@mui/material/LinearProgress/linearProgressClasses.js
var linearProgressClasses;
var init_linearProgressClasses = __esm({
  "../../node_modules/@mui/material/LinearProgress/linearProgressClasses.js"() {
    init_core();
    linearProgressClasses = generateUtilityClasses("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);
  }
});

// ../../node_modules/@mui/material/LinearProgress/index.js
var init_LinearProgress = __esm({
  "../../node_modules/@mui/material/LinearProgress/index.js"() {
    init_linearProgressClasses();
  }
});

// ../../node_modules/@mui/material/Link/linkClasses.js
var linkClasses;
var init_linkClasses = __esm({
  "../../node_modules/@mui/material/Link/linkClasses.js"() {
    init_core();
    linkClasses = generateUtilityClasses("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
  }
});

// ../../node_modules/@mui/material/Link/index.js
var init_Link = __esm({
  "../../node_modules/@mui/material/Link/index.js"() {
    init_linkClasses();
  }
});

// ../../node_modules/@mui/material/List/listClasses.js
var listClasses;
var init_listClasses = __esm({
  "../../node_modules/@mui/material/List/listClasses.js"() {
    init_core();
    listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);
  }
});

// ../../node_modules/@mui/material/List/index.js
var init_List = __esm({
  "../../node_modules/@mui/material/List/index.js"() {
    init_listClasses();
  }
});

// ../../node_modules/@mui/material/ListItem/listItemClasses.js
var listItemClasses;
var init_listItemClasses = __esm({
  "../../node_modules/@mui/material/ListItem/listItemClasses.js"() {
    init_core();
    listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
  }
});

// ../../node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
var listItemButtonClasses;
var init_listItemButtonClasses = __esm({
  "../../node_modules/@mui/material/ListItemButton/listItemButtonClasses.js"() {
    init_core();
    listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  }
});

// ../../node_modules/@mui/material/ListItemButton/index.js
var init_ListItemButton = __esm({
  "../../node_modules/@mui/material/ListItemButton/index.js"() {
    init_listItemButtonClasses();
  }
});

// ../../node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
var listItemSecondaryActionClasses;
var init_listItemSecondaryActionClasses = __esm({
  "../../node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js"() {
    init_core();
    listItemSecondaryActionClasses = generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);
  }
});

// ../../node_modules/@mui/material/ListItemSecondaryAction/index.js
var init_ListItemSecondaryAction = __esm({
  "../../node_modules/@mui/material/ListItemSecondaryAction/index.js"() {
    init_listItemSecondaryActionClasses();
  }
});

// ../../node_modules/@mui/material/ListItem/index.js
var init_ListItem = __esm({
  "../../node_modules/@mui/material/ListItem/index.js"() {
    init_listItemClasses();
  }
});

// ../../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js
var listItemAvatarClasses;
var init_listItemAvatarClasses = __esm({
  "../../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js"() {
    init_core();
    listItemAvatarClasses = generateUtilityClasses("MuiListItemAvatar", ["root", "alignItemsFlexStart"]);
  }
});

// ../../node_modules/@mui/material/ListItemAvatar/index.js
var init_ListItemAvatar = __esm({
  "../../node_modules/@mui/material/ListItemAvatar/index.js"() {
    init_listItemAvatarClasses();
  }
});

// ../../node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
var listItemIconClasses;
var init_listItemIconClasses = __esm({
  "../../node_modules/@mui/material/ListItemIcon/listItemIconClasses.js"() {
    init_core();
    listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  }
});

// ../../node_modules/@mui/material/ListItemIcon/index.js
var init_ListItemIcon = __esm({
  "../../node_modules/@mui/material/ListItemIcon/index.js"() {
    init_listItemIconClasses();
  }
});

// ../../node_modules/@mui/material/ListItemText/listItemTextClasses.js
var listItemTextClasses;
var init_listItemTextClasses = __esm({
  "../../node_modules/@mui/material/ListItemText/listItemTextClasses.js"() {
    init_core();
    listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  }
});

// ../../node_modules/@mui/material/ListItemText/index.js
var init_ListItemText = __esm({
  "../../node_modules/@mui/material/ListItemText/index.js"() {
    init_listItemTextClasses();
  }
});

// ../../node_modules/@mui/material/MenuList/index.js
var init_MenuList = __esm({
  "../../node_modules/@mui/material/MenuList/index.js"() {
  }
});

// ../../node_modules/@mui/material/Popover/popoverClasses.js
var popoverClasses;
var init_popoverClasses = __esm({
  "../../node_modules/@mui/material/Popover/popoverClasses.js"() {
    init_core();
    popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);
  }
});

// ../../node_modules/@mui/material/Popover/index.js
var init_Popover = __esm({
  "../../node_modules/@mui/material/Popover/index.js"() {
    init_popoverClasses();
  }
});

// ../../node_modules/@mui/material/Menu/menuClasses.js
var menuClasses;
var init_menuClasses = __esm({
  "../../node_modules/@mui/material/Menu/menuClasses.js"() {
    init_core();
    menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);
  }
});

// ../../node_modules/@mui/material/Menu/index.js
var init_Menu = __esm({
  "../../node_modules/@mui/material/Menu/index.js"() {
    init_menuClasses();
  }
});

// ../../node_modules/@mui/material/MenuItem/menuItemClasses.js
var menuItemClasses;
var init_menuItemClasses = __esm({
  "../../node_modules/@mui/material/MenuItem/menuItemClasses.js"() {
    init_core();
    menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  }
});

// ../../node_modules/@mui/material/MenuItem/index.js
var init_MenuItem = __esm({
  "../../node_modules/@mui/material/MenuItem/index.js"() {
    init_menuItemClasses();
  }
});

// ../../node_modules/@mui/material/MobileStepper/mobileStepperClasses.js
var mobileStepperClasses;
var init_mobileStepperClasses = __esm({
  "../../node_modules/@mui/material/MobileStepper/mobileStepperClasses.js"() {
    init_core();
    mobileStepperClasses = generateUtilityClasses("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]);
  }
});

// ../../node_modules/@mui/material/MobileStepper/index.js
var init_MobileStepper = __esm({
  "../../node_modules/@mui/material/MobileStepper/index.js"() {
    init_mobileStepperClasses();
  }
});

// ../../node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
var nativeSelectClasses;
var init_nativeSelectClasses = __esm({
  "../../node_modules/@mui/material/NativeSelect/nativeSelectClasses.js"() {
    init_core();
    nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  }
});

// ../../node_modules/@mui/material/NativeSelect/index.js
var init_NativeSelect = __esm({
  "../../node_modules/@mui/material/NativeSelect/index.js"() {
    init_nativeSelectClasses();
  }
});

// ../../node_modules/@mui/material/NoSsr/index.js
var init_NoSsr = __esm({
  "../../node_modules/@mui/material/NoSsr/index.js"() {
  }
});

// ../../node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
var outlinedInputClasses;
var init_outlinedInputClasses = __esm({
  "../../node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js"() {
    init_core();
    outlinedInputClasses = generateUtilityClasses("MuiOutlinedInput", ["root", "colorSecondary", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "notchedOutline", "input", "inputSizeSmall", "inputMultiline", "inputAdornedStart", "inputAdornedEnd"]);
  }
});

// ../../node_modules/@mui/material/OutlinedInput/index.js
var init_OutlinedInput = __esm({
  "../../node_modules/@mui/material/OutlinedInput/index.js"() {
    init_outlinedInputClasses();
  }
});

// ../../node_modules/@mui/material/Pagination/paginationClasses.js
var paginationClasses;
var init_paginationClasses = __esm({
  "../../node_modules/@mui/material/Pagination/paginationClasses.js"() {
    init_core();
    paginationClasses = generateUtilityClasses("MuiPagination", ["root", "ul", "outlined", "text"]);
  }
});

// ../../node_modules/@mui/material/usePagination/index.js
var init_usePagination = __esm({
  "../../node_modules/@mui/material/usePagination/index.js"() {
  }
});

// ../../node_modules/@mui/material/PaginationItem/paginationItemClasses.js
var paginationItemClasses;
var init_paginationItemClasses = __esm({
  "../../node_modules/@mui/material/PaginationItem/paginationItemClasses.js"() {
    init_core();
    paginationItemClasses = generateUtilityClasses("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon"]);
  }
});

// ../../node_modules/@mui/material/PaginationItem/index.js
var init_PaginationItem = __esm({
  "../../node_modules/@mui/material/PaginationItem/index.js"() {
    init_paginationItemClasses();
  }
});

// ../../node_modules/@mui/material/Pagination/index.js
var init_Pagination = __esm({
  "../../node_modules/@mui/material/Pagination/index.js"() {
    init_paginationClasses();
  }
});

// ../../node_modules/@mui/material/Radio/radioClasses.js
var radioClasses;
var init_radioClasses = __esm({
  "../../node_modules/@mui/material/Radio/radioClasses.js"() {
    init_core();
    radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary"]);
  }
});

// ../../node_modules/@mui/material/Radio/index.js
var init_Radio = __esm({
  "../../node_modules/@mui/material/Radio/index.js"() {
    init_radioClasses();
  }
});

// ../../node_modules/@mui/material/RadioGroup/index.js
var init_RadioGroup = __esm({
  "../../node_modules/@mui/material/RadioGroup/index.js"() {
  }
});

// ../../node_modules/@mui/material/Rating/ratingClasses.js
var ratingClasses;
var init_ratingClasses = __esm({
  "../../node_modules/@mui/material/Rating/ratingClasses.js"() {
    init_core();
    ratingClasses = generateUtilityClasses("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
  }
});

// ../../node_modules/@mui/material/Rating/index.js
var init_Rating = __esm({
  "../../node_modules/@mui/material/Rating/index.js"() {
    init_ratingClasses();
  }
});

// ../../node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js
var scopedCssBaselineClasses;
var init_scopedCssBaselineClasses = __esm({
  "../../node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js"() {
    init_core();
    scopedCssBaselineClasses = generateUtilityClasses("MuiScopedCssBaseline", ["root"]);
  }
});

// ../../node_modules/@mui/material/ScopedCssBaseline/index.js
var init_ScopedCssBaseline = __esm({
  "../../node_modules/@mui/material/ScopedCssBaseline/index.js"() {
    init_scopedCssBaselineClasses();
  }
});

// ../../node_modules/@mui/material/Select/selectClasses.js
var selectClasses;
var init_selectClasses = __esm({
  "../../node_modules/@mui/material/Select/selectClasses.js"() {
    init_core();
    selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  }
});

// ../../node_modules/@mui/material/Select/index.js
var init_Select = __esm({
  "../../node_modules/@mui/material/Select/index.js"() {
    init_selectClasses();
  }
});

// ../../node_modules/@mui/material/Skeleton/skeletonClasses.js
var skeletonClasses;
var init_skeletonClasses = __esm({
  "../../node_modules/@mui/material/Skeleton/skeletonClasses.js"() {
    init_core();
    skeletonClasses = generateUtilityClasses("MuiSkeleton", ["root", "text", "rectangular", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);
  }
});

// ../../node_modules/@mui/material/Skeleton/index.js
var init_Skeleton = __esm({
  "../../node_modules/@mui/material/Skeleton/index.js"() {
    init_skeletonClasses();
  }
});

// ../../node_modules/@mui/material/Slider/Slider.js
var React47, import_prop_types31, import_jsx_runtime32, _excluded27, sliderClasses, SliderRoot, SliderRail, SliderTrack, SliderThumb, SliderValueLabel, SliderMark, SliderMarkLabel, extendUtilityClasses4, shouldSpreadOwnerState, Slider;
var init_Slider = __esm({
  "../../node_modules/@mui/material/Slider/Slider.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React47 = __toModule(require_react());
    import_prop_types31 = __toModule(require_prop_types());
    init_clsx_m();
    init_esm();
    init_core();
    init_SliderUnstyled2();
    init_esm2();
    init_useThemeProps3();
    init_styled();
    init_useTheme4();
    init_capitalize2();
    import_jsx_runtime32 = __toModule(require_jsx_runtime());
    _excluded27 = ["components", "componentsProps", "color", "size"];
    sliderClasses = _extends({}, sliderUnstyledClasses_default, generateUtilityClasses("MuiSlider", ["colorPrimary", "colorSecondary", "thumbColorPrimary", "thumbColorSecondary", "sizeSmall", "thumbSizeSmall"]));
    SliderRoot = styled_default("span", {
      name: "MuiSlider",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const marks = ownerState.marksProp === true && ownerState.step !== null ? [...Array(Math.floor((ownerState.max - ownerState.min) / ownerState.step) + 1)].map((_4, index) => ({
          value: ownerState.min + ownerState.step * index
        })) : ownerState.marksProp || [];
        const marked = marks.length > 0 && marks.some((mark) => mark.label);
        return [styles2.root, styles2[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles2[`size${capitalize_default(ownerState.size)}`], marked && styles2.marked, ownerState.orientation === "vertical" && styles2.vertical, ownerState.track === "inverted" && styles2.trackInverted, ownerState.track === false && styles2.trackFalse];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      borderRadius: 12,
      boxSizing: "content-box",
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      touchAction: "none",
      color: theme.palette[ownerState.color].main,
      WebkitTapHighlightColor: "transparent"
    }, ownerState.orientation === "horizontal" && _extends({
      height: 4,
      width: "100%",
      padding: "13px 0",
      "@media (pointer: coarse)": {
        padding: "20px 0"
      }
    }, ownerState.size === "small" && {
      height: 2
    }, ownerState.marked && {
      marginBottom: 20
    }), ownerState.orientation === "vertical" && _extends({
      height: "100%",
      width: 4,
      padding: "0 13px",
      "@media (pointer: coarse)": {
        padding: "0 20px"
      }
    }, ownerState.size === "small" && {
      width: 2
    }, ownerState.marked && {
      marginRight: 44
    }), {
      "@media print": {
        colorAdjust: "exact"
      },
      [`&.${sliderClasses.disabled}`]: {
        pointerEvents: "none",
        cursor: "default",
        color: theme.palette.grey[400]
      },
      [`&.${sliderClasses.dragging}`]: {
        [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
          transition: "none"
        }
      }
    }));
    SliderRail = styled_default("span", {
      name: "MuiSlider",
      slot: "Rail",
      overridesResolver: (props, styles2) => styles2.rail
    })(({
      ownerState
    }) => _extends({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      backgroundColor: "currentColor",
      opacity: 0.38
    }, ownerState.orientation === "horizontal" && {
      width: "100%",
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      height: "100%",
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === "inverted" && {
      opacity: 1
    }));
    SliderTrack = styled_default("span", {
      name: "MuiSlider",
      slot: "Track",
      overridesResolver: (props, styles2) => styles2.track
    })(({
      theme,
      ownerState
    }) => {
      const color3 = theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
      return _extends({
        display: "block",
        position: "absolute",
        borderRadius: "inherit",
        border: "1px solid currentColor",
        backgroundColor: "currentColor",
        transition: theme.transitions.create(["left", "width", "bottom", "height"], {
          duration: theme.transitions.duration.shortest
        })
      }, ownerState.size === "small" && {
        border: "none"
      }, ownerState.orientation === "horizontal" && {
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }, ownerState.orientation === "vertical" && {
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }, ownerState.track === false && {
        display: "none"
      }, ownerState.track === "inverted" && {
        backgroundColor: color3,
        borderColor: color3
      });
    });
    SliderThumb = styled_default("span", {
      name: "MuiSlider",
      slot: "Thumb",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.thumb, styles2[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles2[`thumbSize${capitalize_default(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      position: "absolute",
      width: 20,
      height: 20,
      boxSizing: "border-box",
      borderRadius: "50%",
      outline: 0,
      backgroundColor: "currentColor",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      width: 12,
      height: 12
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-50%, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 50%)"
    }, {
      "&:before": _extends({
        position: "absolute",
        content: '""',
        borderRadius: "inherit",
        width: "100%",
        height: "100%",
        boxShadow: theme.shadows[2]
      }, ownerState.size === "small" && {
        boxShadow: "none"
      }),
      "&::after": {
        position: "absolute",
        content: '""',
        borderRadius: "50%",
        width: 42,
        height: 42,
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      },
      [`&:hover, &.${sliderClasses.focusVisible}`]: {
        boxShadow: `0px 0px 0px 8px ${alpha2(theme.palette[ownerState.color].main, 0.16)}`,
        "@media (hover: none)": {
          boxShadow: "none"
        }
      },
      [`&.${sliderClasses.active}`]: {
        boxShadow: `0px 0px 0px 14px ${alpha2(theme.palette[ownerState.color].main, 0.16)}`
      },
      [`&.${sliderClasses.disabled}`]: {
        "&:hover": {
          boxShadow: "none"
        }
      }
    }));
    SliderValueLabel = styled_default(SliderValueLabelUnstyled_default, {
      name: "MuiSlider",
      slot: "ValueLabel",
      overridesResolver: (props, styles2) => styles2.valueLabel
    })(({
      theme,
      ownerState
    }) => _extends({
      [`&.${sliderClasses.valueLabelOpen}`]: {
        transform: "translateY(-100%) scale(1)"
      },
      zIndex: 1,
      whiteSpace: "nowrap"
    }, theme.typography.body2, {
      fontWeight: 500,
      transition: theme.transitions.create(["transform"], {
        duration: theme.transitions.duration.shortest
      }),
      top: -10,
      transformOrigin: "bottom center",
      transform: "translateY(-100%) scale(0)",
      position: "absolute",
      backgroundColor: theme.palette.grey[600],
      borderRadius: 2,
      color: theme.palette.common.white,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "0.25rem 0.75rem"
    }, ownerState.size === "small" && {
      fontSize: theme.typography.pxToRem(12),
      padding: "0.25rem 0.5rem"
    }, {
      "&:before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        bottom: 0,
        left: "50%",
        transform: "translate(-50%, 50%) rotate(45deg)",
        backgroundColor: "inherit"
      }
    }));
    SliderMark = styled_default("span", {
      name: "MuiSlider",
      slot: "Mark",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
      overridesResolver: (props, styles2) => styles2.mark
    })(({
      theme,
      ownerState,
      markActive
    }) => _extends({
      position: "absolute",
      width: 2,
      height: 2,
      borderRadius: 1,
      backgroundColor: "currentColor"
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-1px, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 1px)"
    }, markActive && {
      backgroundColor: theme.palette.background.paper,
      opacity: 0.8
    }));
    SliderMarkLabel = styled_default("span", {
      name: "MuiSlider",
      slot: "MarkLabel",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
      overridesResolver: (props, styles2) => styles2.markLabel
    })(({
      theme,
      ownerState,
      markLabelActive
    }) => _extends({}, theme.typography.body2, {
      color: theme.palette.text.secondary,
      position: "absolute",
      whiteSpace: "nowrap"
    }, ownerState.orientation === "horizontal" && {
      top: 30,
      transform: "translateX(-50%)",
      "@media (pointer: coarse)": {
        top: 40
      }
    }, ownerState.orientation === "vertical" && {
      left: 36,
      transform: "translateY(50%)",
      "@media (pointer: coarse)": {
        left: 44
      }
    }, markLabelActive && {
      color: theme.palette.text.primary
    }));
    SliderRoot.propTypes = {
      children: import_prop_types31.default.node,
      ownerState: import_prop_types31.default.shape({
        "aria-label": import_prop_types31.default.string,
        "aria-labelledby": import_prop_types31.default.string,
        "aria-valuetext": import_prop_types31.default.string,
        classes: import_prop_types31.default.object,
        color: import_prop_types31.default.oneOf(["primary", "secondary"]),
        defaultValue: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.number), import_prop_types31.default.number]),
        disabled: import_prop_types31.default.bool,
        getAriaLabel: import_prop_types31.default.func,
        getAriaValueText: import_prop_types31.default.func,
        isRtl: import_prop_types31.default.bool,
        marks: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.shape({
          label: import_prop_types31.default.node,
          value: import_prop_types31.default.number.isRequired
        })), import_prop_types31.default.bool]),
        max: import_prop_types31.default.number,
        min: import_prop_types31.default.number,
        name: import_prop_types31.default.string,
        onChange: import_prop_types31.default.func,
        onChangeCommitted: import_prop_types31.default.func,
        orientation: import_prop_types31.default.oneOf(["horizontal", "vertical"]),
        scale: import_prop_types31.default.func,
        step: import_prop_types31.default.number,
        track: import_prop_types31.default.oneOf(["inverted", "normal", false]),
        value: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.number), import_prop_types31.default.number]),
        valueLabelDisplay: import_prop_types31.default.oneOf(["auto", "off", "on"]),
        valueLabelFormat: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.string])
      })
    };
    extendUtilityClasses4 = (ownerState) => {
      const {
        color: color3,
        size,
        classes = {}
      } = ownerState;
      return _extends({}, classes, {
        root: clsx_m_default(classes.root, getSliderUtilityClass(`color${capitalize_default(color3)}`), classes[`color${capitalize_default(color3)}`], size && [getSliderUtilityClass(`size${capitalize_default(size)}`), classes[`size${capitalize_default(size)}`]]),
        thumb: clsx_m_default(classes.thumb, getSliderUtilityClass(`thumbColor${capitalize_default(color3)}`), classes[`thumbColor${capitalize_default(color3)}`], size && [getSliderUtilityClass(`thumbSize${capitalize_default(size)}`), classes[`thumbSize${capitalize_default(size)}`]])
      });
    };
    shouldSpreadOwnerState = (Component3) => {
      return !Component3 || !isHostComponent_default(Component3);
    };
    Slider = /* @__PURE__ */ React47.forwardRef(function Slider2(inputProps, ref) {
      var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;
      const props = useThemeProps2({
        props: inputProps,
        name: "MuiSlider"
      });
      const theme = useTheme5();
      const isRtl = theme.direction === "rtl";
      const {
        components = {},
        componentsProps = {},
        color: color3 = "primary",
        size = "medium"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
      const ownerState = _extends({}, props, {
        color: color3,
        size
      });
      const classes = extendUtilityClasses4(ownerState);
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SliderUnstyled_default, _extends({}, other, {
        isRtl,
        components: _extends({
          Root: SliderRoot,
          Rail: SliderRail,
          Track: SliderTrack,
          Thumb: SliderThumb,
          ValueLabel: SliderValueLabel,
          Mark: SliderMark,
          MarkLabel: SliderMarkLabel
        }, components),
        componentsProps: _extends({}, componentsProps, {
          root: _extends({}, componentsProps.root, shouldSpreadOwnerState(components.Root) && {
            ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
              color: color3,
              size
            })
          }),
          thumb: _extends({}, componentsProps.thumb, shouldSpreadOwnerState(components.Thumb) && {
            ownerState: _extends({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
              color: color3,
              size
            })
          }),
          track: _extends({}, componentsProps.track, shouldSpreadOwnerState(components.Track) && {
            ownerState: _extends({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
              color: color3,
              size
            })
          }),
          valueLabel: _extends({}, componentsProps.valueLabel, shouldSpreadOwnerState(components.ValueLabel) && {
            ownerState: _extends({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
              color: color3,
              size
            })
          })
        }),
        classes,
        ref
      }));
    });
    true ? Slider.propTypes = {
      "aria-label": chainPropTypes(import_prop_types31.default.string, (props) => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props["aria-label"] != null) {
          return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
        }
        return null;
      }),
      "aria-labelledby": import_prop_types31.default.string,
      "aria-valuetext": chainPropTypes(import_prop_types31.default.string, (props) => {
        const range = Array.isArray(props.value || props.defaultValue);
        if (range && props["aria-valuetext"] != null) {
          return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
        }
        return null;
      }),
      children: import_prop_types31.default.node,
      classes: import_prop_types31.default.object,
      color: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["primary", "secondary"]), import_prop_types31.default.string]),
      components: import_prop_types31.default.shape({
        Mark: import_prop_types31.default.elementType,
        MarkLabel: import_prop_types31.default.elementType,
        Rail: import_prop_types31.default.elementType,
        Root: import_prop_types31.default.elementType,
        Thumb: import_prop_types31.default.elementType,
        Track: import_prop_types31.default.elementType,
        ValueLabel: import_prop_types31.default.elementType
      }),
      componentsProps: import_prop_types31.default.object,
      defaultValue: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.number), import_prop_types31.default.number]),
      disabled: import_prop_types31.default.bool,
      disableSwap: import_prop_types31.default.bool,
      getAriaLabel: import_prop_types31.default.func,
      getAriaValueText: import_prop_types31.default.func,
      isRtl: import_prop_types31.default.bool,
      marks: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.shape({
        label: import_prop_types31.default.node,
        value: import_prop_types31.default.number.isRequired
      })), import_prop_types31.default.bool]),
      max: import_prop_types31.default.number,
      min: import_prop_types31.default.number,
      name: import_prop_types31.default.string,
      onChange: import_prop_types31.default.func,
      onChangeCommitted: import_prop_types31.default.func,
      orientation: import_prop_types31.default.oneOf(["horizontal", "vertical"]),
      scale: import_prop_types31.default.func,
      size: import_prop_types31.default.oneOf(["small", "medium"]),
      step: import_prop_types31.default.number,
      sx: import_prop_types31.default.object,
      tabIndex: import_prop_types31.default.number,
      track: import_prop_types31.default.oneOf(["inverted", "normal", false]),
      value: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.number), import_prop_types31.default.number]),
      valueLabelDisplay: import_prop_types31.default.oneOf(["auto", "off", "on"]),
      valueLabelFormat: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.string])
    } : void 0;
  }
});

// ../../node_modules/@mui/material/Slider/index.js
var init_Slider2 = __esm({
  "../../node_modules/@mui/material/Slider/index.js"() {
    init_Slider();
  }
});

// ../../node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
var snackbarContentClasses;
var init_snackbarContentClasses = __esm({
  "../../node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js"() {
    init_core();
    snackbarContentClasses = generateUtilityClasses("MuiSnackbarContent", ["root", "message", "action"]);
  }
});

// ../../node_modules/@mui/material/SnackbarContent/index.js
var init_SnackbarContent = __esm({
  "../../node_modules/@mui/material/SnackbarContent/index.js"() {
    init_snackbarContentClasses();
  }
});

// ../../node_modules/@mui/material/Snackbar/snackbarClasses.js
var snackbarClasses;
var init_snackbarClasses = __esm({
  "../../node_modules/@mui/material/Snackbar/snackbarClasses.js"() {
    init_core();
    snackbarClasses = generateUtilityClasses("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);
  }
});

// ../../node_modules/@mui/material/Snackbar/index.js
var init_Snackbar = __esm({
  "../../node_modules/@mui/material/Snackbar/index.js"() {
    init_snackbarClasses();
  }
});

// ../../node_modules/@mui/material/Zoom/index.js
var init_Zoom = __esm({
  "../../node_modules/@mui/material/Zoom/index.js"() {
  }
});

// ../../node_modules/@mui/material/SpeedDial/speedDialClasses.js
var speedDialClasses;
var init_speedDialClasses = __esm({
  "../../node_modules/@mui/material/SpeedDial/speedDialClasses.js"() {
    init_core();
    speedDialClasses = generateUtilityClasses("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]);
  }
});

// ../../node_modules/@mui/material/SpeedDial/index.js
var init_SpeedDial = __esm({
  "../../node_modules/@mui/material/SpeedDial/index.js"() {
    init_speedDialClasses();
  }
});

// ../../node_modules/@mui/material/Tooltip/tooltipClasses.js
var tooltipClasses;
var init_tooltipClasses = __esm({
  "../../node_modules/@mui/material/Tooltip/tooltipClasses.js"() {
    init_core();
    tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  }
});

// ../../node_modules/@mui/material/Tooltip/index.js
var init_Tooltip = __esm({
  "../../node_modules/@mui/material/Tooltip/index.js"() {
    init_tooltipClasses();
  }
});

// ../../node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.js
var speedDialActionClasses;
var init_speedDialActionClasses = __esm({
  "../../node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.js"() {
    init_core();
    speedDialActionClasses = generateUtilityClasses("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]);
  }
});

// ../../node_modules/@mui/material/SpeedDialAction/index.js
var init_SpeedDialAction = __esm({
  "../../node_modules/@mui/material/SpeedDialAction/index.js"() {
    init_speedDialActionClasses();
  }
});

// ../../node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.js
var speedDialIconClasses;
var init_speedDialIconClasses = __esm({
  "../../node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.js"() {
    init_core();
    speedDialIconClasses = generateUtilityClasses("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]);
  }
});

// ../../node_modules/@mui/material/SpeedDialIcon/index.js
var init_SpeedDialIcon = __esm({
  "../../node_modules/@mui/material/SpeedDialIcon/index.js"() {
    init_speedDialIconClasses();
  }
});

// ../../node_modules/@mui/material/Stack/index.js
var init_Stack = __esm({
  "../../node_modules/@mui/material/Stack/index.js"() {
  }
});

// ../../node_modules/@mui/material/Step/stepClasses.js
var stepClasses;
var init_stepClasses = __esm({
  "../../node_modules/@mui/material/Step/stepClasses.js"() {
    init_core();
    stepClasses = generateUtilityClasses("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]);
  }
});

// ../../node_modules/@mui/material/Step/index.js
var init_Step = __esm({
  "../../node_modules/@mui/material/Step/index.js"() {
    init_stepClasses();
  }
});

// ../../node_modules/@mui/material/StepIcon/stepIconClasses.js
var stepIconClasses;
var init_stepIconClasses = __esm({
  "../../node_modules/@mui/material/StepIcon/stepIconClasses.js"() {
    init_core();
    stepIconClasses = generateUtilityClasses("MuiStepIcon", ["root", "active", "completed", "error", "text"]);
  }
});

// ../../node_modules/@mui/material/StepIcon/index.js
var init_StepIcon = __esm({
  "../../node_modules/@mui/material/StepIcon/index.js"() {
    init_stepIconClasses();
  }
});

// ../../node_modules/@mui/material/StepLabel/stepLabelClasses.js
var stepLabelClasses;
var init_stepLabelClasses = __esm({
  "../../node_modules/@mui/material/StepLabel/stepLabelClasses.js"() {
    init_core();
    stepLabelClasses = generateUtilityClasses("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]);
  }
});

// ../../node_modules/@mui/material/StepLabel/index.js
var init_StepLabel = __esm({
  "../../node_modules/@mui/material/StepLabel/index.js"() {
    init_stepLabelClasses();
  }
});

// ../../node_modules/@mui/material/StepButton/stepButtonClasses.js
var stepButtonClasses;
var init_stepButtonClasses = __esm({
  "../../node_modules/@mui/material/StepButton/stepButtonClasses.js"() {
    init_core();
    stepButtonClasses = generateUtilityClasses("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]);
  }
});

// ../../node_modules/@mui/material/StepButton/index.js
var init_StepButton = __esm({
  "../../node_modules/@mui/material/StepButton/index.js"() {
    init_stepButtonClasses();
  }
});

// ../../node_modules/@mui/material/StepConnector/stepConnectorClasses.js
var stepConnectorClasses;
var init_stepConnectorClasses = __esm({
  "../../node_modules/@mui/material/StepConnector/stepConnectorClasses.js"() {
    init_core();
    stepConnectorClasses = generateUtilityClasses("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]);
  }
});

// ../../node_modules/@mui/material/StepConnector/index.js
var init_StepConnector = __esm({
  "../../node_modules/@mui/material/StepConnector/index.js"() {
    init_stepConnectorClasses();
  }
});

// ../../node_modules/@mui/material/StepContent/stepContentClasses.js
var stepContentClasses;
var init_stepContentClasses = __esm({
  "../../node_modules/@mui/material/StepContent/stepContentClasses.js"() {
    init_core();
    stepContentClasses = generateUtilityClasses("MuiStepContent", ["root", "last", "transition"]);
  }
});

// ../../node_modules/@mui/material/StepContent/index.js
var init_StepContent = __esm({
  "../../node_modules/@mui/material/StepContent/index.js"() {
    init_stepContentClasses();
  }
});

// ../../node_modules/@mui/material/Stepper/stepperClasses.js
var stepperClasses;
var init_stepperClasses = __esm({
  "../../node_modules/@mui/material/Stepper/stepperClasses.js"() {
    init_core();
    stepperClasses = generateUtilityClasses("MuiStepper", ["root", "horizontal", "vertical", "alternativeLabel"]);
  }
});

// ../../node_modules/@mui/material/Stepper/index.js
var init_Stepper = __esm({
  "../../node_modules/@mui/material/Stepper/index.js"() {
    init_stepperClasses();
  }
});

// ../../node_modules/@mui/material/SwipeableDrawer/index.js
var init_SwipeableDrawer = __esm({
  "../../node_modules/@mui/material/SwipeableDrawer/index.js"() {
  }
});

// ../../node_modules/@mui/material/Switch/switchClasses.js
var switchClasses;
var init_switchClasses = __esm({
  "../../node_modules/@mui/material/Switch/switchClasses.js"() {
    init_core();
    switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  }
});

// ../../node_modules/@mui/material/Switch/index.js
var init_Switch = __esm({
  "../../node_modules/@mui/material/Switch/index.js"() {
    init_switchClasses();
  }
});

// ../../node_modules/@mui/material/Tab/tabClasses.js
var tabClasses;
var init_tabClasses = __esm({
  "../../node_modules/@mui/material/Tab/tabClasses.js"() {
    init_core();
    tabClasses = generateUtilityClasses("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped"]);
  }
});

// ../../node_modules/@mui/material/Tab/index.js
var init_Tab = __esm({
  "../../node_modules/@mui/material/Tab/index.js"() {
    init_tabClasses();
  }
});

// ../../node_modules/@mui/material/Table/tableClasses.js
var tableClasses;
var init_tableClasses = __esm({
  "../../node_modules/@mui/material/Table/tableClasses.js"() {
    init_core();
    tableClasses = generateUtilityClasses("MuiTable", ["root", "stickyHeader"]);
  }
});

// ../../node_modules/@mui/material/Table/index.js
var init_Table = __esm({
  "../../node_modules/@mui/material/Table/index.js"() {
    init_tableClasses();
  }
});

// ../../node_modules/@mui/material/TableBody/tableBodyClasses.js
var tableBodyClasses;
var init_tableBodyClasses = __esm({
  "../../node_modules/@mui/material/TableBody/tableBodyClasses.js"() {
    init_core();
    tableBodyClasses = generateUtilityClasses("MuiTableBody", ["root"]);
  }
});

// ../../node_modules/@mui/material/TableBody/index.js
var init_TableBody = __esm({
  "../../node_modules/@mui/material/TableBody/index.js"() {
    init_tableBodyClasses();
  }
});

// ../../node_modules/@mui/material/TableCell/tableCellClasses.js
var tableCellClasses;
var init_tableCellClasses = __esm({
  "../../node_modules/@mui/material/TableCell/tableCellClasses.js"() {
    init_core();
    tableCellClasses = generateUtilityClasses("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  }
});

// ../../node_modules/@mui/material/TableCell/index.js
var init_TableCell = __esm({
  "../../node_modules/@mui/material/TableCell/index.js"() {
    init_tableCellClasses();
  }
});

// ../../node_modules/@mui/material/TableContainer/tableContainerClasses.js
var tableContainerClasses;
var init_tableContainerClasses = __esm({
  "../../node_modules/@mui/material/TableContainer/tableContainerClasses.js"() {
    init_core();
    tableContainerClasses = generateUtilityClasses("MuiTableContainer", ["root"]);
  }
});

// ../../node_modules/@mui/material/TableContainer/index.js
var init_TableContainer = __esm({
  "../../node_modules/@mui/material/TableContainer/index.js"() {
    init_tableContainerClasses();
  }
});

// ../../node_modules/@mui/material/TableFooter/tableFooterClasses.js
var tableFooterClasses;
var init_tableFooterClasses = __esm({
  "../../node_modules/@mui/material/TableFooter/tableFooterClasses.js"() {
    init_core();
    tableFooterClasses = generateUtilityClasses("MuiTableFooter", ["root"]);
  }
});

// ../../node_modules/@mui/material/TableFooter/index.js
var init_TableFooter = __esm({
  "../../node_modules/@mui/material/TableFooter/index.js"() {
    init_tableFooterClasses();
  }
});

// ../../node_modules/@mui/material/TableHead/tableHeadClasses.js
var tableHeadClasses;
var init_tableHeadClasses = __esm({
  "../../node_modules/@mui/material/TableHead/tableHeadClasses.js"() {
    init_core();
    tableHeadClasses = generateUtilityClasses("MuiTableHead", ["root"]);
  }
});

// ../../node_modules/@mui/material/TableHead/index.js
var init_TableHead = __esm({
  "../../node_modules/@mui/material/TableHead/index.js"() {
    init_tableHeadClasses();
  }
});

// ../../node_modules/@mui/material/Toolbar/toolbarClasses.js
var toolbarClasses;
var init_toolbarClasses = __esm({
  "../../node_modules/@mui/material/Toolbar/toolbarClasses.js"() {
    init_core();
    toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);
  }
});

// ../../node_modules/@mui/material/Toolbar/index.js
var init_Toolbar = __esm({
  "../../node_modules/@mui/material/Toolbar/index.js"() {
    init_toolbarClasses();
  }
});

// ../../node_modules/@mui/material/TablePagination/tablePaginationClasses.js
var tablePaginationClasses;
var init_tablePaginationClasses = __esm({
  "../../node_modules/@mui/material/TablePagination/tablePaginationClasses.js"() {
    init_core();
    tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  }
});

// ../../node_modules/@mui/material/TablePagination/index.js
var init_TablePagination = __esm({
  "../../node_modules/@mui/material/TablePagination/index.js"() {
    init_tablePaginationClasses();
  }
});

// ../../node_modules/@mui/material/TableRow/tableRowClasses.js
var tableRowClasses;
var init_tableRowClasses = __esm({
  "../../node_modules/@mui/material/TableRow/tableRowClasses.js"() {
    init_core();
    tableRowClasses = generateUtilityClasses("MuiTableRow", ["root", "selected", "hover", "head", "footer"]);
  }
});

// ../../node_modules/@mui/material/TableRow/index.js
var init_TableRow = __esm({
  "../../node_modules/@mui/material/TableRow/index.js"() {
    init_tableRowClasses();
  }
});

// ../../node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js
var tableSortLabelClasses;
var init_tableSortLabelClasses = __esm({
  "../../node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js"() {
    init_core();
    tableSortLabelClasses = generateUtilityClasses("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc"]);
  }
});

// ../../node_modules/@mui/material/TableSortLabel/index.js
var init_TableSortLabel = __esm({
  "../../node_modules/@mui/material/TableSortLabel/index.js"() {
    init_tableSortLabelClasses();
  }
});

// ../../node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js
var tabScrollButtonClasses;
var init_tabScrollButtonClasses = __esm({
  "../../node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js"() {
    init_core();
    tabScrollButtonClasses = generateUtilityClasses("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
  }
});

// ../../node_modules/@mui/material/TabScrollButton/index.js
var init_TabScrollButton = __esm({
  "../../node_modules/@mui/material/TabScrollButton/index.js"() {
    init_tabScrollButtonClasses();
  }
});

// ../../node_modules/@mui/material/Tabs/tabsClasses.js
var tabsClasses;
var init_tabsClasses = __esm({
  "../../node_modules/@mui/material/Tabs/tabsClasses.js"() {
    init_core();
    tabsClasses = generateUtilityClasses("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
  }
});

// ../../node_modules/@mui/material/Tabs/index.js
var init_Tabs = __esm({
  "../../node_modules/@mui/material/Tabs/index.js"() {
    init_tabsClasses();
  }
});

// ../../node_modules/@mui/material/TextField/textFieldClasses.js
var textFieldClasses;
var init_textFieldClasses = __esm({
  "../../node_modules/@mui/material/TextField/textFieldClasses.js"() {
    init_core();
    textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);
  }
});

// ../../node_modules/@mui/material/TextField/index.js
var init_TextField = __esm({
  "../../node_modules/@mui/material/TextField/index.js"() {
    init_textFieldClasses();
  }
});

// ../../node_modules/@mui/material/useScrollTrigger/index.js
var init_useScrollTrigger = __esm({
  "../../node_modules/@mui/material/useScrollTrigger/index.js"() {
  }
});

// ../../node_modules/@mui/material/index.js
var init_material = __esm({
  "../../node_modules/@mui/material/index.js"() {
    init_styles();
    init_utils10();
    init_core();
    init_Accordion();
    init_AccordionActions();
    init_AccordionDetails();
    init_AccordionSummary();
    init_Alert();
    init_AlertTitle();
    init_AppBar();
    init_Autocomplete();
    init_Avatar();
    init_AvatarGroup();
    init_Backdrop2();
    init_Badge2();
    init_BottomNavigation();
    init_BottomNavigationAction();
    init_Box();
    init_Breadcrumbs();
    init_Button2();
    init_ButtonBase2();
    init_ButtonGroup();
    init_Card();
    init_CardActionArea();
    init_CardActions();
    init_CardContent();
    init_CardHeader();
    init_CardMedia();
    init_Checkbox();
    init_Chip();
    init_CircularProgress();
    init_ClickAwayListener2();
    init_Collapse();
    init_Container();
    init_CssBaseline();
    init_darkScrollbar();
    init_Dialog();
    init_DialogActions();
    init_DialogContent();
    init_DialogContentText();
    init_DialogTitle();
    init_Divider();
    init_Drawer();
    init_Fab2();
    init_Fade2();
    init_FilledInput();
    init_FormControl();
    init_FormControlLabel();
    init_FormGroup();
    init_FormHelperText();
    init_FormLabel2();
    init_Grid();
    init_Grow();
    init_Hidden();
    init_Icon();
    init_IconButton();
    init_ImageList();
    init_ImageListItem();
    init_ImageListItemBar();
    init_Input();
    init_InputAdornment();
    init_InputBase();
    init_InputLabel();
    init_LinearProgress();
    init_Link();
    init_List();
    init_ListItem();
    init_ListItemAvatar();
    init_ListItemButton();
    init_ListItemIcon();
    init_ListItemSecondaryAction();
    init_ListItemText();
    init_ListSubheader();
    init_Menu();
    init_MenuItem();
    init_MenuList();
    init_MobileStepper();
    init_Modal2();
    init_NativeSelect();
    init_NoSsr();
    init_OutlinedInput();
    init_Pagination();
    init_PaginationItem();
    init_Paper();
    init_Popover();
    init_Popper();
    init_Radio();
    init_RadioGroup();
    init_Rating();
    init_ScopedCssBaseline();
    init_Select();
    init_Skeleton();
    init_Slide();
    init_Slider2();
    init_Snackbar();
    init_SnackbarContent();
    init_SpeedDial();
    init_SpeedDialAction();
    init_SpeedDialIcon();
    init_Stack();
    init_Step();
    init_StepButton();
    init_StepConnector();
    init_StepContent();
    init_StepIcon();
    init_StepLabel();
    init_Stepper();
    init_SvgIcon2();
    init_SwipeableDrawer();
    init_Switch();
    init_Tab();
    init_Table();
    init_TableBody();
    init_TableCell();
    init_TableContainer();
    init_TableFooter();
    init_TableHead();
    init_TablePagination();
    init_TableRow();
    init_TableSortLabel();
    init_Tabs();
    init_TabScrollButton();
    init_TextField();
    init_TextareaAutosize();
    init_ToggleButton2();
    init_ToggleButtonGroup2();
    init_Toolbar();
    init_Tooltip();
    init_Typography();
    init_useMediaQuery();
    init_usePagination();
    init_useScrollTrigger();
    init_Zoom();
    init_GlobalStyles();
  }
});

// ../renderer/dist/icons/Share.mjs
var Share_default;
var init_Share = __esm({
  "../renderer/dist/icons/Share.mjs"() {
    init_renderer();
    init_material();
    Share_default = createSvgIcon(/* @__PURE__ */ import_react49.default.createElement("path", {
      key: "12",
      d: "M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"
    }), "Share");
  }
});

// ../renderer/dist/icons/TabletAndroid.mjs
var TabletAndroid_default;
var init_TabletAndroid = __esm({
  "../renderer/dist/icons/TabletAndroid.mjs"() {
    init_renderer();
    init_material();
    TabletAndroid_default = createSvgIcon(/* @__PURE__ */ import_react49.default.createElement("path", {
      key: "12",
      d: "M18 0H6C4.34 0 3 1.34 3 3v18c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V3c0-1.66-1.34-3-3-3zm-4 22h-4v-1h4v1zm5.25-3H4.75V3h14.5v16z"
    }), "TabletAndroid");
  }
});

// ../renderer/dist/icons/Tv.mjs
var Tv_default;
var init_Tv = __esm({
  "../renderer/dist/icons/Tv.mjs"() {
    init_renderer();
    init_material();
    Tv_default = createSvgIcon(/* @__PURE__ */ import_react49.default.createElement("path", {
      key: "12",
      d: "M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12z"
    }), "Tv");
  }
});

// ../renderer/dist/icons/PhoneAndroid.mjs
var PhoneAndroid_default;
var init_PhoneAndroid = __esm({
  "../renderer/dist/icons/PhoneAndroid.mjs"() {
    init_renderer();
    init_material();
    PhoneAndroid_default = createSvgIcon(/* @__PURE__ */ import_react49.default.createElement("path", {
      key: "12",
      d: "M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"
    }), "PhoneAndroid");
  }
});

// ../renderer/dist/icons/QrCode.mjs
var QrCode_default;
var init_QrCode = __esm({
  "../renderer/dist/icons/QrCode.mjs"() {
    init_renderer();
    init_material();
    QrCode_default = createSvgIcon(/* @__PURE__ */ import_react49.default.createElement("path", {
      key: "12",
      d: "M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zm8-12v8h8V3h-8zm6 6h-4V5h4v4zm0 10h2v2h-2zm-6-6h2v2h-2zm2 2h2v2h-2zm-2 2h2v2h-2zm2 2h2v2h-2zm2-2h2v2h-2zm0-4h2v2h-2zm2 2h2v2h-2z"
    }), "QrCode");
  }
});

// ../qrious/dist/QRious.mjs
var QRious_exports = {};
__export(QRious_exports, {
  QRious: () => export_QRious
});
var de, w, _e, be, me, pe, ke, o, ge, N, S, C, u, M, j, I, V, G, K, X, H, J, O, $, ie, se, ne, oe, ue, ve, he, n0, le, export_QRious;
var init_QRious = __esm({
  "../qrious/dist/QRious.mjs"() {
    de = Object.create;
    w = Object.defineProperty;
    _e = Object.getOwnPropertyDescriptor;
    be = Object.getOwnPropertyNames;
    me = Object.getPrototypeOf;
    pe = Object.prototype.hasOwnProperty;
    ke = (i) => w(i, "__esModule", { value: true });
    o = (i, e) => () => (e || i((e = { exports: {} }).exports, e), e.exports);
    ge = (i, e, t) => {
      if (e && typeof e == "object" || typeof e == "function")
        for (let r of be(e))
          !pe.call(i, r) && r !== "default" && w(i, r, { get: () => e[r], enumerable: !(t = _e(e, r)) || t.enumerable });
      return i;
    };
    N = (i) => ge(ke(w(i != null ? de(me(i)) : {}, "default", i && i.__esModule && "default" in i ? { get: () => i.default, enumerable: true } : { value: i, enumerable: true })), i);
    S = o((o0, A2) => {
      "use strict";
      var B2 = function() {
      }, we = Object.prototype.hasOwnProperty, Be2 = Array.prototype.slice;
      function Me(i, e) {
        var t;
        return typeof Object.create == "function" ? t = Object.create(i) : (B2.prototype = i, t = new B2(), B2.prototype = null), e && E3(true, t, e), t;
      }
      function Oe(i, e, t, r) {
        var x3 = this;
        return typeof i != "string" && (r = t, t = e, e = i, i = null), typeof e != "function" && (r = t, t = e, e = function() {
          return x3.apply(this, arguments);
        }), E3(false, e, x3, r), e.prototype = Me(x3.prototype, t), e.prototype.constructor = e, e.class_ = i || x3.class_, e.super_ = x3, e;
      }
      function E3(i, e, t) {
        t = Be2.call(arguments, 2);
        for (var r, x3, s = 0, a2 = t.length; s < a2; s++) {
          x3 = t[s];
          for (r in x3)
            (!i || we.call(x3, r)) && (e[r] = x3[r]);
        }
      }
      A2.exports = Oe;
    });
    C = o((c0, y) => {
      "use strict";
      var qe2 = S();
      function p() {
      }
      p.class_ = "Nevis";
      p.super_ = Object;
      p.extend = qe2;
      y.exports = p;
    });
    u = o((u0, R2) => {
      "use strict";
      R2.exports = C();
    });
    M = o((h0, L2) => {
      "use strict";
      var Ne2 = u(), Ee2 = Ne2.extend(function(i, e, t) {
        this.qrious = i, this.element = e, this.element.qrious = i, this.enabled = Boolean(t);
      }, { draw: function(i) {
      }, getElement: function() {
        return this.enabled || (this.enabled = true, this.render()), this.element;
      }, getModuleSize: function(i) {
        var e = this.qrious, t = e.padding || 0, r = Math.floor((e.size - t * 2) / i.width);
        return Math.max(1, r);
      }, getOffset: function(i) {
        var e = this.qrious, t = e.padding;
        if (t != null)
          return t;
        var r = this.getModuleSize(i), x3 = Math.floor((e.size - r * i.width) / 2);
        return Math.max(0, x3);
      }, render: function(i) {
        this.enabled && (this.resize(), this.reset(), this.draw(i));
      }, reset: function() {
      }, resize: function() {
      } });
      L2.exports = Ee2;
    });
    j = o((l0, T2) => {
      "use strict";
      var Ae2 = M(), Se2 = Ae2.extend({ draw: function(i) {
        var e, t, r = this.qrious, x3 = this.getModuleSize(i), s = this.getOffset(i), a2 = this.element.getContext("2d");
        for (a2.fillStyle = r.foreground, a2.globalAlpha = r.foregroundAlpha, e = 0; e < i.width; e++)
          for (t = 0; t < i.width; t++)
            i.buffer[t * i.width + e] && a2.fillRect(x3 * e + s, x3 * t + s, x3, x3);
      }, reset: function() {
        var i = this.qrious, e = this.element.getContext("2d"), t = i.size;
        e.lineWidth = 1, e.clearRect(0, 0, t, t), e.fillStyle = i.background, e.globalAlpha = i.backgroundAlpha, e.fillRect(0, 0, t, t);
      }, resize: function() {
        var i = this.element;
        i.width = i.height = this.qrious.size;
      } });
      T2.exports = Se2;
    });
    I = o((v0, z) => {
      "use strict";
      var ye2 = u(), Ce = ye2.extend(null, { BLOCK: [0, 11, 15, 19, 23, 27, 31, 16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24, 26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28] });
      z.exports = Ce;
    });
    V = o((d0, P2) => {
      "use strict";
      var Re2 = u(), Le = Re2.extend(null, { BLOCKS: [1, 0, 19, 7, 1, 0, 16, 10, 1, 0, 13, 13, 1, 0, 9, 17, 1, 0, 34, 10, 1, 0, 28, 16, 1, 0, 22, 22, 1, 0, 16, 28, 1, 0, 55, 15, 1, 0, 44, 26, 2, 0, 17, 18, 2, 0, 13, 22, 1, 0, 80, 20, 2, 0, 32, 18, 2, 0, 24, 26, 4, 0, 9, 16, 1, 0, 108, 26, 2, 0, 43, 24, 2, 2, 15, 18, 2, 2, 11, 22, 2, 0, 68, 18, 4, 0, 27, 16, 4, 0, 19, 24, 4, 0, 15, 28, 2, 0, 78, 20, 4, 0, 31, 18, 2, 4, 14, 18, 4, 1, 13, 26, 2, 0, 97, 24, 2, 2, 38, 22, 4, 2, 18, 22, 4, 2, 14, 26, 2, 0, 116, 30, 3, 2, 36, 22, 4, 4, 16, 20, 4, 4, 12, 24, 2, 2, 68, 18, 4, 1, 43, 26, 6, 2, 19, 24, 6, 2, 15, 28, 4, 0, 81, 20, 1, 4, 50, 30, 4, 4, 22, 28, 3, 8, 12, 24, 2, 2, 92, 24, 6, 2, 36, 22, 4, 6, 20, 26, 7, 4, 14, 28, 4, 0, 107, 26, 8, 1, 37, 22, 8, 4, 20, 24, 12, 4, 11, 22, 3, 1, 115, 30, 4, 5, 40, 24, 11, 5, 16, 20, 11, 5, 12, 24, 5, 1, 87, 22, 5, 5, 41, 24, 5, 7, 24, 30, 11, 7, 12, 24, 5, 1, 98, 24, 7, 3, 45, 28, 15, 2, 19, 24, 3, 13, 15, 30, 1, 5, 107, 28, 10, 1, 46, 28, 1, 15, 22, 28, 2, 17, 14, 28, 5, 1, 120, 30, 9, 4, 43, 26, 17, 1, 22, 28, 2, 19, 14, 28, 3, 4, 113, 28, 3, 11, 44, 26, 17, 4, 21, 26, 9, 16, 13, 26, 3, 5, 107, 28, 3, 13, 41, 26, 15, 5, 24, 30, 15, 10, 15, 28, 4, 4, 116, 28, 17, 0, 42, 26, 17, 6, 22, 28, 19, 6, 16, 30, 2, 7, 111, 28, 17, 0, 46, 28, 7, 16, 24, 30, 34, 0, 13, 24, 4, 5, 121, 30, 4, 14, 47, 28, 11, 14, 24, 30, 16, 14, 15, 30, 6, 4, 117, 30, 6, 14, 45, 28, 11, 16, 24, 30, 30, 2, 16, 30, 8, 4, 106, 26, 8, 13, 47, 28, 7, 22, 24, 30, 22, 13, 15, 30, 10, 2, 114, 28, 19, 4, 46, 28, 28, 6, 22, 28, 33, 4, 16, 30, 8, 4, 122, 30, 22, 3, 45, 28, 8, 26, 23, 30, 12, 28, 15, 30, 3, 10, 117, 30, 3, 23, 45, 28, 4, 31, 24, 30, 11, 31, 15, 30, 7, 7, 116, 30, 21, 7, 45, 28, 1, 37, 23, 30, 19, 26, 15, 30, 5, 10, 115, 30, 19, 10, 47, 28, 15, 25, 24, 30, 23, 25, 15, 30, 13, 3, 115, 30, 2, 29, 46, 28, 42, 1, 24, 30, 23, 28, 15, 30, 17, 0, 115, 30, 10, 23, 46, 28, 10, 35, 24, 30, 19, 35, 15, 30, 17, 1, 115, 30, 14, 21, 46, 28, 29, 19, 24, 30, 11, 46, 15, 30, 13, 6, 115, 30, 14, 23, 46, 28, 44, 7, 24, 30, 59, 1, 16, 30, 12, 7, 121, 30, 12, 26, 47, 28, 39, 14, 24, 30, 22, 41, 15, 30, 6, 14, 121, 30, 6, 34, 47, 28, 46, 10, 24, 30, 2, 64, 15, 30, 17, 4, 122, 30, 29, 14, 46, 28, 49, 10, 24, 30, 24, 46, 15, 30, 4, 18, 122, 30, 13, 32, 46, 28, 48, 14, 24, 30, 42, 32, 15, 30, 20, 4, 117, 30, 40, 7, 47, 28, 43, 22, 24, 30, 10, 67, 15, 30, 19, 6, 118, 30, 18, 31, 47, 28, 34, 34, 24, 30, 20, 61, 15, 30], FINAL_FORMAT: [30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107], LEVELS: { L: 1, M: 2, Q: 3, H: 4 } });
      P2.exports = Le;
    });
    G = o((_0, U2) => {
      "use strict";
      var Te = u(), je2 = Te.extend(null, { EXPONENT: [1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 0], LOG: [255, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175] });
      U2.exports = je2;
    });
    K = o((b0, F3) => {
      "use strict";
      var ze = u(), Ie2 = ze.extend(null, { BLOCK: [3220, 1468, 2713, 1235, 3062, 1890, 2119, 1549, 2344, 2936, 1117, 2583, 1330, 2470, 1667, 2249, 2028, 3780, 481, 4011, 142, 3098, 831, 3445, 592, 2517, 1776, 2234, 1951, 2827, 1070, 2660, 1345, 3177] });
      F3.exports = Ie2;
    });
    X = o((m0, D2) => {
      "use strict";
      var Pe2 = u(), Ve2 = I(), _4 = V(), v = G(), Ue2 = K(), c3 = Pe2.extend(function(i) {
        var e, t, r, x3, s, a2 = i.value.length;
        for (this._badness = [], this._level = _4.LEVELS[i.level], this._polynomial = [], this._value = i.value, this._version = 0, this._stringBuffer = []; this._version < 40 && (this._version++, r = (this._level - 1) * 4 + (this._version - 1) * 16, x3 = _4.BLOCKS[r++], s = _4.BLOCKS[r++], e = _4.BLOCKS[r++], t = _4.BLOCKS[r], r = e * (x3 + s) + s - 3 + (this._version <= 9), !(a2 <= r)); )
          ;
        this._dataBlock = e, this._eccBlock = t, this._neccBlock1 = x3, this._neccBlock2 = s;
        var n = this.width = 17 + 4 * this._version;
        this.buffer = c3._createArray(n * n), this._ecc = c3._createArray(e + (e + t) * (x3 + s) + s), this._mask = c3._createArray((n * (n + 1) + 1) / 2), this._insertFinders(), this._insertAlignments(), this.buffer[8 + n * (n - 8)] = 1, this._insertTimingGap(), this._reverseMask(), this._insertTimingRowAndColumn(), this._insertVersion(), this._syncMask(), this._convertBitStream(a2), this._calculatePolynomial(), this._appendEccToData(), this._interleaveBlocks(), this._pack(), this._finish();
      }, { _addAlignment: function(i, e) {
        var t, r = this.buffer, x3 = this.width;
        for (r[i + x3 * e] = 1, t = -2; t < 2; t++)
          r[i + t + x3 * (e - 2)] = 1, r[i - 2 + x3 * (e + t + 1)] = 1, r[i + 2 + x3 * (e + t)] = 1, r[i + t + 1 + x3 * (e + 2)] = 1;
        for (t = 0; t < 2; t++)
          this._setMask(i - 1, e + t), this._setMask(i + 1, e - t), this._setMask(i - t, e - 1), this._setMask(i + t, e + 1);
      }, _appendData: function(i, e, t, r) {
        var x3, s, a2, n = this._polynomial, f = this._stringBuffer;
        for (s = 0; s < r; s++)
          f[t + s] = 0;
        for (s = 0; s < e; s++) {
          if (x3 = v.LOG[f[i + s] ^ f[t]], x3 !== 255)
            for (a2 = 1; a2 < r; a2++)
              f[t + a2 - 1] = f[t + a2] ^ v.EXPONENT[c3._modN(x3 + n[r - a2])];
          else
            for (a2 = t; a2 < t + r; a2++)
              f[a2] = f[a2 + 1];
          f[t + r - 1] = x3 === 255 ? 0 : v.EXPONENT[c3._modN(x3 + n[0])];
        }
      }, _appendEccToData: function() {
        var i, e = 0, t = this._dataBlock, r = this._calculateMaxLength(), x3 = this._eccBlock;
        for (i = 0; i < this._neccBlock1; i++)
          this._appendData(e, t, r, x3), e += t, r += x3;
        for (i = 0; i < this._neccBlock2; i++)
          this._appendData(e, t + 1, r, x3), e += t + 1, r += x3;
      }, _applyMask: function(i) {
        var e, t, r, x3, s = this.buffer, a2 = this.width;
        switch (i) {
          case 0:
            for (x3 = 0; x3 < a2; x3++)
              for (r = 0; r < a2; r++)
                !(r + x3 & 1) && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 1:
            for (x3 = 0; x3 < a2; x3++)
              for (r = 0; r < a2; r++)
                !(x3 & 1) && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 2:
            for (x3 = 0; x3 < a2; x3++)
              for (e = 0, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0), !e && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 3:
            for (t = 0, x3 = 0; x3 < a2; x3++, t++)
              for (t === 3 && (t = 0), e = t, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0), !e && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 4:
            for (x3 = 0; x3 < a2; x3++)
              for (e = 0, t = x3 >> 1 & 1, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0, t = !t), !t && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 5:
            for (t = 0, x3 = 0; x3 < a2; x3++, t++)
              for (t === 3 && (t = 0), e = 0, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0), !((r & x3 & 1) + !(!e | !t)) && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 6:
            for (t = 0, x3 = 0; x3 < a2; x3++, t++)
              for (t === 3 && (t = 0), e = 0, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0), !((r & x3 & 1) + (e && e === t) & 1) && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
          case 7:
            for (t = 0, x3 = 0; x3 < a2; x3++, t++)
              for (t === 3 && (t = 0), e = 0, r = 0; r < a2; r++, e++)
                e === 3 && (e = 0), !((e && e === t) + (r + x3 & 1) & 1) && !this._isMasked(r, x3) && (s[r + x3 * a2] ^= 1);
            break;
        }
      }, _calculateMaxLength: function() {
        return this._dataBlock * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
      }, _calculatePolynomial: function() {
        var i, e, t = this._eccBlock, r = this._polynomial;
        for (r[0] = 1, i = 0; i < t; i++) {
          for (r[i + 1] = 1, e = i; e > 0; e--)
            r[e] = r[e] ? r[e - 1] ^ v.EXPONENT[c3._modN(v.LOG[r[e]] + i)] : r[e - 1];
          r[0] = v.EXPONENT[c3._modN(v.LOG[r[0]] + i)];
        }
        for (i = 0; i <= t; i++)
          r[i] = v.LOG[r[i]];
      }, _checkBadness: function() {
        var i, e, t, r, x3, s = 0, a2 = this._badness, n = this.buffer, f = this.width;
        for (x3 = 0; x3 < f - 1; x3++)
          for (r = 0; r < f - 1; r++)
            (n[r + f * x3] && n[r + 1 + f * x3] && n[r + f * (x3 + 1)] && n[r + 1 + f * (x3 + 1)] || !(n[r + f * x3] || n[r + 1 + f * x3] || n[r + f * (x3 + 1)] || n[r + 1 + f * (x3 + 1)])) && (s += c3.N2);
        var h2 = 0;
        for (x3 = 0; x3 < f; x3++) {
          for (t = 0, a2[0] = 0, i = 0, r = 0; r < f; r++)
            e = n[r + f * x3], i === e ? a2[t]++ : a2[++t] = 1, i = e, h2 += i ? 1 : -1;
          s += this._getBadness(t);
        }
        h2 < 0 && (h2 = -h2);
        var q2 = 0, b2 = h2;
        for (b2 += b2 << 2, b2 <<= 1; b2 > f * f; )
          b2 -= f * f, q2++;
        for (s += q2 * c3.N4, r = 0; r < f; r++) {
          for (t = 0, a2[0] = 0, i = 0, x3 = 0; x3 < f; x3++)
            e = n[r + f * x3], i === e ? a2[t]++ : a2[++t] = 1, i = e;
          s += this._getBadness(t);
        }
        return s;
      }, _convertBitStream: function(i) {
        var e, t, r = this._ecc, x3 = this._version;
        for (t = 0; t < i; t++)
          r[t] = this._value.charCodeAt(t);
        var s = this._stringBuffer = r.slice(), a2 = this._calculateMaxLength();
        i >= a2 - 2 && (i = a2 - 2, x3 > 9 && i--);
        var n = i;
        if (x3 > 9) {
          for (s[n + 2] = 0, s[n + 3] = 0; n--; )
            e = s[n], s[n + 3] |= 255 & e << 4, s[n + 2] = e >> 4;
          s[2] |= 255 & i << 4, s[1] = i >> 4, s[0] = 64 | i >> 12;
        } else {
          for (s[n + 1] = 0, s[n + 2] = 0; n--; )
            e = s[n], s[n + 2] |= 255 & e << 4, s[n + 1] = e >> 4;
          s[1] |= 255 & i << 4, s[0] = 64 | i >> 4;
        }
        for (n = i + 3 - (x3 < 10); n < a2; )
          s[n++] = 236, s[n++] = 17;
      }, _getBadness: function(i) {
        var e, t = 0, r = this._badness;
        for (e = 0; e <= i; e++)
          r[e] >= 5 && (t += c3.N1 + r[e] - 5);
        for (e = 3; e < i - 1; e += 2)
          r[e - 2] === r[e + 2] && r[e + 2] === r[e - 1] && r[e - 1] === r[e + 1] && r[e - 1] * 3 === r[e] && (r[e - 3] === 0 || e + 3 > i || r[e - 3] * 3 >= r[e] * 4 || r[e + 3] * 3 >= r[e] * 4) && (t += c3.N3);
        return t;
      }, _finish: function() {
        this._stringBuffer = this.buffer.slice();
        var i, e, t = 0, r = 3e4;
        for (e = 0; e < 8 && (this._applyMask(e), i = this._checkBadness(), i < r && (r = i, t = e), t !== 7); e++)
          this.buffer = this._stringBuffer.slice();
        t !== e && this._applyMask(t), r = _4.FINAL_FORMAT[t + (this._level - 1 << 3)];
        var x3 = this.buffer, s = this.width;
        for (e = 0; e < 8; e++, r >>= 1)
          r & 1 && (x3[s - 1 - e + s * 8] = 1, e < 6 ? x3[8 + s * e] = 1 : x3[8 + s * (e + 1)] = 1);
        for (e = 0; e < 7; e++, r >>= 1)
          r & 1 && (x3[8 + s * (s - 7 + e)] = 1, e ? x3[6 - e + s * 8] = 1 : x3[7 + s * 8] = 1);
      }, _interleaveBlocks: function() {
        var i, e, t = this._dataBlock, r = this._ecc, x3 = this._eccBlock, s = 0, a2 = this._calculateMaxLength(), n = this._neccBlock1, f = this._neccBlock2, h2 = this._stringBuffer;
        for (i = 0; i < t; i++) {
          for (e = 0; e < n; e++)
            r[s++] = h2[i + e * t];
          for (e = 0; e < f; e++)
            r[s++] = h2[n * t + i + e * (t + 1)];
        }
        for (e = 0; e < f; e++)
          r[s++] = h2[n * t + i + e * (t + 1)];
        for (i = 0; i < x3; i++)
          for (e = 0; e < n + f; e++)
            r[s++] = h2[a2 + i + e * x3];
        this._stringBuffer = r;
      }, _insertAlignments: function() {
        var i, e, t, r = this._version, x3 = this.width;
        if (r > 1)
          for (i = Ve2.BLOCK[r], t = x3 - 7; ; ) {
            for (e = x3 - 7; e > i - 3 && (this._addAlignment(e, t), !(e < i)); )
              e -= i;
            if (t <= i + 9)
              break;
            t -= i, this._addAlignment(6, t), this._addAlignment(t, 6);
          }
      }, _insertFinders: function() {
        var i, e, t, r, x3 = this.buffer, s = this.width;
        for (i = 0; i < 3; i++) {
          for (e = 0, r = 0, i === 1 && (e = s - 7), i === 2 && (r = s - 7), x3[r + 3 + s * (e + 3)] = 1, t = 0; t < 6; t++)
            x3[r + t + s * e] = 1, x3[r + s * (e + t + 1)] = 1, x3[r + 6 + s * (e + t)] = 1, x3[r + t + 1 + s * (e + 6)] = 1;
          for (t = 1; t < 5; t++)
            this._setMask(r + t, e + 1), this._setMask(r + 1, e + t + 1), this._setMask(r + 5, e + t), this._setMask(r + t + 1, e + 5);
          for (t = 2; t < 4; t++)
            x3[r + t + s * (e + 2)] = 1, x3[r + 2 + s * (e + t + 1)] = 1, x3[r + 4 + s * (e + t)] = 1, x3[r + t + 1 + s * (e + 4)] = 1;
        }
      }, _insertTimingGap: function() {
        var i, e, t = this.width;
        for (e = 0; e < 7; e++)
          this._setMask(7, e), this._setMask(t - 8, e), this._setMask(7, e + t - 7);
        for (i = 0; i < 8; i++)
          this._setMask(i, 7), this._setMask(i + t - 8, 7), this._setMask(i, t - 8);
      }, _insertTimingRowAndColumn: function() {
        var i, e = this.buffer, t = this.width;
        for (i = 0; i < t - 14; i++)
          i & 1 ? (this._setMask(8 + i, 6), this._setMask(6, 8 + i)) : (e[8 + i + t * 6] = 1, e[6 + t * (8 + i)] = 1);
      }, _insertVersion: function() {
        var i, e, t, r, x3 = this.buffer, s = this._version, a2 = this.width;
        if (s > 6)
          for (i = Ue2.BLOCK[s - 7], e = 17, t = 0; t < 6; t++)
            for (r = 0; r < 3; r++, e--)
              1 & (e > 11 ? s >> e - 12 : i >> e) ? (x3[5 - t + a2 * (2 - r + a2 - 11)] = 1, x3[2 - r + a2 - 11 + a2 * (5 - t)] = 1) : (this._setMask(5 - t, 2 - r + a2 - 11), this._setMask(2 - r + a2 - 11, 5 - t));
      }, _isMasked: function(i, e) {
        var t = c3._getMaskBit(i, e);
        return this._mask[t] === 1;
      }, _pack: function() {
        var i, e, t, r = 1, x3 = 1, s = this.width, a2 = s - 1, n = s - 1, f = (this._dataBlock + this._eccBlock) * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
        for (e = 0; e < f; e++)
          for (i = this._stringBuffer[e], t = 0; t < 8; t++, i <<= 1) {
            128 & i && (this.buffer[a2 + s * n] = 1);
            do
              x3 ? a2-- : (a2++, r ? n !== 0 ? n-- : (a2 -= 2, r = !r, a2 === 6 && (a2--, n = 9)) : n !== s - 1 ? n++ : (a2 -= 2, r = !r, a2 === 6 && (a2--, n -= 8))), x3 = !x3;
            while (this._isMasked(a2, n));
          }
      }, _reverseMask: function() {
        var i, e, t = this.width;
        for (i = 0; i < 9; i++)
          this._setMask(i, 8);
        for (i = 0; i < 8; i++)
          this._setMask(i + t - 8, 8), this._setMask(8, i);
        for (e = 0; e < 7; e++)
          this._setMask(8, e + t - 7);
      }, _setMask: function(i, e) {
        var t = c3._getMaskBit(i, e);
        this._mask[t] = 1;
      }, _syncMask: function() {
        var i, e, t = this.width;
        for (e = 0; e < t; e++)
          for (i = 0; i <= e; i++)
            this.buffer[i + t * e] && this._setMask(i, e);
      } }, { _createArray: function(i) {
        var e, t = [];
        for (e = 0; e < i; e++)
          t[e] = 0;
        return t;
      }, _getMaskBit: function(i, e) {
        var t;
        return i > e && (t = i, i = e, e = t), t = e, t += e * e, t >>= 1, t += i, t;
      }, _modN: function(i) {
        for (; i >= 255; )
          i -= 255, i = (i >> 8) + (i & 255);
        return i;
      }, N1: 3, N2: 3, N3: 40, N4: 10 });
      D2.exports = c3;
    });
    H = o((p0, Q3) => {
      "use strict";
      var Ge = M(), Fe2 = Ge.extend({ draw: function() {
        this.element.src = this.qrious.toDataURL();
      }, reset: function() {
        this.element.src = "";
      }, resize: function() {
        var i = this.element;
        i.width = i.height = this.qrious.size;
      } });
      Q3.exports = Fe2;
    });
    J = o((k0, W3) => {
      "use strict";
      var Ke2 = u(), De2 = Ke2.extend(function(i, e, t, r) {
        this.name = i, this.modifiable = Boolean(e), this.defaultValue = t, this._valueTransformer = r;
      }, { transform: function(i) {
        var e = this._valueTransformer;
        return typeof e == "function" ? e(i, this) : i;
      } });
      W3.exports = De2;
    });
    O = o((g0, Y3) => {
      "use strict";
      var Xe = u(), Qe = Xe.extend(null, { abs: function(i) {
        return i != null ? Math.abs(i) : null;
      }, hasOwn: function(i, e) {
        return Object.prototype.hasOwnProperty.call(i, e);
      }, noop: function() {
      }, toUpperCase: function(i) {
        return i != null ? i.toUpperCase() : null;
      } });
      Y3.exports = Qe;
    });
    $ = o((w0, Z2) => {
      "use strict";
      var He3 = u(), k2 = O(), d = He3.extend(function(i) {
        this.options = {}, i.forEach(function(e) {
          this.options[e.name] = e;
        }, this);
      }, { exists: function(i) {
        return this.options[i] != null;
      }, get: function(i, e) {
        return d._get(this.options[i], e);
      }, getAll: function(i) {
        var e, t = this.options, r = {};
        for (e in t)
          k2.hasOwn(t, e) && (r[e] = d._get(t[e], i));
        return r;
      }, init: function(i, e, t) {
        typeof t != "function" && (t = k2.noop);
        var r, x3;
        for (r in this.options)
          k2.hasOwn(this.options, r) && (x3 = this.options[r], d._set(x3, x3.defaultValue, e), d._createAccessor(x3, e, t));
        this._setAll(i, e, true);
      }, set: function(i, e, t) {
        return this._set(i, e, t);
      }, setAll: function(i, e) {
        return this._setAll(i, e);
      }, _set: function(i, e, t, r) {
        var x3 = this.options[i];
        if (!x3)
          throw new Error("Invalid option: " + i);
        if (!x3.modifiable && !r)
          throw new Error("Option cannot be modified: " + i);
        return d._set(x3, e, t);
      }, _setAll: function(i, e, t) {
        if (!i)
          return false;
        var r, x3 = false;
        for (r in i)
          k2.hasOwn(i, r) && this._set(r, i[r], e, t) && (x3 = true);
        return x3;
      } }, { _createAccessor: function(i, e, t) {
        var r = { get: function() {
          return d._get(i, e);
        } };
        i.modifiable && (r.set = function(x3) {
          d._set(i, x3, e) && t(x3, i);
        }), Object.defineProperty(e, i.name, r);
      }, _get: function(i, e) {
        return e["_" + i.name];
      }, _set: function(i, e, t) {
        var r = "_" + i.name, x3 = t[r], s = i.transform(e != null ? e : i.defaultValue);
        return t[r] = s, s !== x3;
      } });
      Z2.exports = d;
    });
    ie = o((B0, ee3) => {
      "use strict";
      var We = u(), Je2 = We.extend(function() {
        this._services = {};
      }, { getService: function(i) {
        var e = this._services[i];
        if (!e)
          throw new Error("Service is not being managed with name: " + i);
        return e;
      }, setService: function(i, e) {
        if (this._services[i])
          throw new Error("Service is already managed with name: " + i);
        e && (this._services[i] = e);
      } });
      ee3.exports = Je2;
    });
    se = o((M0, xe2) => {
      "use strict";
      var Ye2 = u(), Ze2 = j(), $e2 = X(), e0 = H(), l = J(), i0 = $(), t0 = ie(), m3 = O(), g = new i0([new l("background", true, "white"), new l("backgroundAlpha", true, 1, m3.abs), new l("element"), new l("foreground", true, "black"), new l("foregroundAlpha", true, 1, m3.abs), new l("level", true, "L", m3.toUpperCase), new l("mime", true, "image/png"), new l("padding", true, null, m3.abs), new l("size", true, 100, m3.abs), new l("value", true, "")]), te3 = new t0(), re2 = Ye2.extend(function(i) {
        g.init(i, this, this.update.bind(this));
        var e = g.get("element", this), t = te3.getService("element"), r = e && t.isCanvas(e) ? e : t.createCanvas(), x3 = e && t.isImage(e) ? e : t.createImage();
        this._canvasRenderer = new Ze2(this, r, true), this._imageRenderer = new e0(this, x3, x3 === e), this.update();
      }, { get: function() {
        return g.getAll(this);
      }, set: function(i) {
        g.setAll(i, this) && this.update();
      }, toDataURL: function(i) {
        return this.canvas.toDataURL(i || this.mime);
      }, update: function() {
        var i = new $e2({ level: this.level, value: this.value });
        this._canvasRenderer.render(i), this._imageRenderer.render(i);
      } }, { use: function(i) {
        te3.setService(i.getName(), i);
      } });
      Object.defineProperties(re2.prototype, { canvas: { get: function() {
        return this._canvasRenderer.getElement();
      } }, image: { get: function() {
        return this._imageRenderer.getElement();
      } } });
      xe2.exports = re2;
    });
    ne = o((O0, ae2) => {
      "use strict";
      ae2.exports = se();
    });
    oe = o((q0, fe3) => {
      "use strict";
      var r0 = u(), x0 = r0.extend({ getName: function() {
      } });
      fe3.exports = x0;
    });
    ue = o((N0, ce3) => {
      "use strict";
      var s0 = oe(), a0 = s0.extend({ createCanvas: function() {
      }, createImage: function() {
      }, getName: function() {
        return "element";
      }, isCanvas: function(i) {
      }, isImage: function(i) {
      } });
      ce3.exports = a0;
    });
    ve = N(ne());
    he = N(ue());
    n0 = he.default.extend({ createCanvas: function() {
      return document.createElement("canvas");
    }, createImage: function() {
      return document.createElement("img");
    }, isCanvas: function(i) {
      return i instanceof HTMLCanvasElement;
    }, isImage: function(i) {
      return i instanceof HTMLImageElement;
    } });
    le = n0;
    ve.default.use(new le());
    export_QRious = ve.default;
  }
});

// ../renderer/dist/Qr.mjs
var QR, QRButton;
var init_Qr = __esm({
  "../renderer/dist/Qr.mjs"() {
    init_renderer();
    init_Fab2();
    init_QrCode();
    QR = ({ url }) => {
      const canvasRef = import_react49.default.useRef(null);
      import_react49.default.useEffect(() => {
        const load = async () => {
          const { QRious } = await Promise.resolve().then(() => (init_QRious(), QRious_exports));
          const options = {
            size: 200,
            element: canvasRef.current,
            foregroundAlpha: 0.9,
            foreground: "white",
            backgroundAlpha: 1,
            padding: 16,
            background: "#1e1e1e",
            value: url
          };
          const qr2 = new QRious(options);
        };
        load();
      }, [url]);
      return /* @__PURE__ */ jsx("canvas", {
        css: css`
        border-radius: 16px;
        margin-bottom: 8px;
  `,
        ref: canvasRef
      });
    };
    QRButton = ({ url }) => {
      const [showQR, setQR] = import_react49.default.useState(false);
      return /* @__PURE__ */ jsx(motion2.div, {
        animate: {
          width: showQR ? 200 : 56,
          height: showQR ? 220 : 48
        },
        onClick: (e) => {
          setQR(!showQR);
        },
        css: css`
                margin-bottom: 12px;
              `
      }, showQR ? /* @__PURE__ */ jsx(QR, {
        key: url,
        url: url + "/edit/"
      }) : /* @__PURE__ */ jsx(Fab_default, {
        variant: "extended",
        color: "secondary",
        onClick: () => {
          setQR(!showQR);
        }
      }, /* @__PURE__ */ jsx(QrCode_default, null)));
    };
  }
});

// ../renderer/dist/DraggableWindow.mjs
function createMarkup(__html) {
  return { __html };
}
var breakPoints, sizes, DraggableWindow;
var init_DraggableWindow = __esm({
  "../renderer/dist/DraggableWindow.mjs"() {
    init_Fab2();
    init_Button2();
    init_ToggleButton2();
    init_ToggleButtonGroup2();
    init_Share();
    init_TabletAndroid();
    init_Tv();
    init_PhoneAndroid();
    init_Qr();
    init_renderer();
    breakPoints = [640, 1024, 1920];
    sizes = [10, 25, 50, 75, 100];
    DraggableWindow = ({ onShare, onRestore, position: position3, session }) => {
      const [isStable, setIsStable] = import_react49.default.useState(false);
      const [scaleRange, changeScaleRange] = import_react49.default.useState(75);
      const [height2, changeHeight] = import_react49.default.useState(innerHeight);
      const [childArray, setChild] = import_react49.default.useState([session.children]);
      session.setChild = setChild;
      const [qrUrl, setQRUrl] = import_react49.default.useState(session.url);
      const [errorText, setErrorText] = import_react49.default.useState(" ");
      const [width2, setWidth] = import_react49.default.useState(breakPoints[1]);
      const ref = import_react49.default.useRef(null);
      const zbody = import_react49.default.useRef(null);
      const child = childArray[childArray.length - 1];
      import_react49.default.useEffect(() => {
        window.addEventListener("resize", () => changeHeight(innerHeight));
      });
      import_react49.default.useEffect(() => {
        const handler = setInterval(() => {
          if (errorText !== session.errorText) {
            const newErr = session.errorText;
            setErrorText(newErr);
            setIsStable(false);
            setTimeout(() => {
              if (session.errorText === newErr) {
                setIsStable(true);
              }
            }, 2e3);
          }
          if (qrUrl !== session.url)
            setQRUrl(session.url);
        }, 200);
        return () => clearInterval(handler);
      }, [setErrorText, setQRUrl, errorText, qrUrl]);
      const scale2 = scaleRange / 100;
      return /* @__PURE__ */ jsx(motion2.div, {
        ref,
        css: css`
            right: 20px;
            background-color:rgba(92 ,92, 152, 0.8);
            backdrop-filter: blur(10px);
            top: 20px;
            padding: 0px 0px 0px 16px;
            border-radius: 16px;
            white-space: normal;
            position: ${position3 ? position3 : "fixed"};
          `,
        dragElastic: 0.5,
        dragConstraints: {
          left: 0,
          right: 300,
          top: -height2 / 4,
          bottom: height2 / 2
        },
        dragMomentum: false,
        drag: true
      }, /* @__PURE__ */ jsx("div", {
        css: css` 
              display: flex;
                `
      }, /* @__PURE__ */ jsx("div", {
        css: css`
            display: flex;
            flex-direction: column;
            align-items: center;
          `
      }, /* @__PURE__ */ jsx(ToggleButtonGroup_default, {
        value: scaleRange,
        size: "small",
        exclusive: true,
        onChange: (_e3, newScale) => newScale && changeScaleRange(newScale)
      }, sizes.map((size) => /* @__PURE__ */ jsx(ToggleButton_default, {
        key: size,
        value: size
      }, /* @__PURE__ */ jsx("span", {
        css: css`
                       color: ${size === scaleRange ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                       `
      }, size, "%")))), /* @__PURE__ */ jsx(motion2.div, {
        animate: {
          width: width2 * scale2 / devicePixelRatio,
          height: height2 * scale2
        },
        css: css`
              display: block;
              overflow: hidden;
              border-radius: 8px;
              opacity: 0.9;
           `
      }, errorText.trim() !== "" && /* @__PURE__ */ jsx("pre", {
        css: css`
                    position: absolute;
                    z-index:3;
                    color: rgb(255, 240, 240);
                    padding: 24px;
                    font-size: 14pt;
                    background-color: rgb(255, 0, 0);
                    flex: 0 0 auto;
                    overflow: auto;
                    margin: 0;
                    font-family: monospace;
                    white-space: pre-wrap;
                `
      }, isStable && errorText.trim(), isStable && errorText.trim() !== "" && /* @__PURE__ */ jsx("div", {
        css: css`
                          text-align: right;
                        `
      }, /* @__PURE__ */ jsx(Button_default, {
        variant: "contained",
        onClick: () => {
          onRestore();
          setErrorText("");
        },
        color: "primary"
      }, "Restore"))), /* @__PURE__ */ jsx(motion2.div, {
        animate: {
          transformOrigin: "0px 0px",
          width: width2 / devicePixelRatio,
          height: height2,
          scale: scale2
        },
        css: css`
                  overflow:overlay;
                  >div{
                    width:100%;
                    height:100%;
                    overflow: overlay;
                    background: white;
                  }
              `
      }, errorText ? /* @__PURE__ */ jsx("div", {
        dangerouslySetInnerHTML: createMarkup(session.html)
      }) : /* @__PURE__ */ jsx(import_react49.default.Suspense, {
        fallback: /* @__PURE__ */ jsx("div", null, "Error fallback")
      }, /* @__PURE__ */ jsx("div", {
        id: "zbody",
        key: session.i,
        ref: zbody
      }, child)))), /* @__PURE__ */ jsx(ToggleButtonGroup_default, {
        value: width2,
        size: "small",
        exclusive: true,
        onChange: (_e3, newSize) => newSize && setWidth(newSize)
      }, breakPoints.map((size) => /* @__PURE__ */ jsx(ToggleButton_default, {
        key: size,
        value: size
      }, size === 640 ? /* @__PURE__ */ jsx(PhoneAndroid_default, {
        css: css`
                        color: ${width2 === 640 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                        `
      }) : size === 1024 ? /* @__PURE__ */ jsx(TabletAndroid_default, {
        css: css`
                        color: ${width2 === 1024 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                        `
      }) : /* @__PURE__ */ jsx(Tv_default, {
        css: css`
                        color: ${width2 === 1920 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                      `
      }))))), /* @__PURE__ */ jsx("div", {
        css: css`
              display: flex;
              align-items: center;          
              flex-direction: column;
              padding: 16px;
              `
      }, /* @__PURE__ */ jsx(QRButton, {
        url: qrUrl
      }), /* @__PURE__ */ jsx(Fab_default, {
        variant: "extended",
        color: "primary",
        onClick: () => {
          onShare();
        }
      }, /* @__PURE__ */ jsx(Share_default, null)))));
    };
  }
});

// ../renderer/dist/renderer.mjs
var renderer_exports = {};
__export(renderer_exports, {
  DraggableWindow: () => DraggableWindow,
  Fragment: () => import_react49.Fragment,
  Global: () => Global,
  Motion: () => es_exports,
  React: () => import_react49.default,
  css: () => css,
  default: () => renderer_default,
  jsx: () => jsx,
  motion: () => motion2,
  render: () => render2
});
var import_react49, ReactDOM4, motion2, render2, renderer_default;
var init_renderer = __esm({
  "../renderer/dist/renderer.mjs"() {
    init_es4();
    import_react49 = __toModule(require_react());
    ReactDOM4 = __toModule(require_react_dom());
    init_emotion_react_browser_esm();
    init_DraggableWindow();
    ({ motion: motion2 } = es_exports);
    render2 = (el, container) => {
      const root = ReactDOM4.render(jsx(import_react49.Fragment, { children: el }), container);
    };
    renderer_default = import_react49.default;
  }
});

// ../shadb/dist/shaDB.mjs
function _2() {
  return W || (W = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
}
function ee() {
  return j2 || (j2 = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
}
function ne2(n) {
  let e = new Promise((t, r) => {
    let i = () => {
      n.removeEventListener("success", s), n.removeEventListener("error", o2);
    }, s = () => {
      t(c2(n.result)), i();
    }, o2 = () => {
      r(n.error), i();
    };
    n.addEventListener("success", s), n.addEventListener("error", o2);
  });
  return e.then((t) => {
    t instanceof IDBCursor && C2.set(t, n);
  }).catch(() => {
  }), N2.set(e, n), e;
}
function te(n) {
  if (D.has(n))
    return;
  let e = new Promise((t, r) => {
    let i = () => {
      n.removeEventListener("complete", s), n.removeEventListener("error", o2), n.removeEventListener("abort", o2);
    }, s = () => {
      t(), i();
    }, o2 = () => {
      r(n.error || new DOMException("AbortError", "AbortError")), i();
    };
    n.addEventListener("complete", s), n.addEventListener("error", o2), n.addEventListener("abort", o2);
  });
  D.set(n, e);
}
function J2(n) {
  H2 = n(H2);
}
function re(n) {
  return n === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(e, ...t) {
    let r = n.call(S2(this), e, ...t);
    return V2.set(r, e.sort ? e.sort() : [e]), c2(r);
  } : ee().includes(n) ? function(...e) {
    return n.apply(S2(this), e), c2(C2.get(this));
  } : function(...e) {
    return c2(n.apply(S2(this), e));
  };
}
function ie2(n) {
  return typeof n == "function" ? re(n) : (n instanceof IDBTransaction && te(n), k(n, _2()) ? new Proxy(n, H2) : n);
}
function c2(n) {
  if (n instanceof IDBRequest)
    return ne2(n);
  if (E.has(n))
    return E.get(n);
  let e = ie2(n);
  return e !== n && (E.set(n, e), N2.set(e, n)), e;
}
function R(n, e, { blocked: t, upgrade: r, blocking: i, terminated: s } = {}) {
  let o2 = indexedDB.open(n, e), f = c2(o2);
  return r && o2.addEventListener("upgradeneeded", (a2) => {
    r(c2(o2.result), a2.oldVersion, a2.newVersion, c2(o2.transaction));
  }), t && o2.addEventListener("blocked", () => t()), f.then((a2) => {
    s && a2.addEventListener("close", () => s()), i && a2.addEventListener("versionchange", () => i());
  }).catch(() => {
  }), f;
}
function $2(n, e) {
  if (!(n instanceof IDBDatabase && !(e in n) && typeof e == "string"))
    return;
  if (O2.get(e))
    return O2.get(e);
  let t = e.replace(/FromIndex$/, ""), r = e !== t, i = oe2.includes(t);
  if (!(t in (r ? IDBIndex : IDBObjectStore).prototype) || !(i || se2.includes(t)))
    return;
  let s = async function(o2, ...f) {
    let a2 = this.transaction(o2, i ? "readwrite" : "readonly"), l = a2.store;
    return r && (l = l.index(f.shift())), (await Promise.all([l[t](...f), i && a2.done]))[0];
  };
  return O2.set(e, s), s;
}
function w2() {
}
function ae(n, e, t, r, i) {
  for (var s = 0, o2 = e.length, f = 0, a2 = 0; s < o2; s++) {
    var l = e[s];
    if (l.removed) {
      if (l.value = n.join(r.slice(a2, a2 + l.count)), a2 += l.count, s && e[s - 1].added) {
        var d = e[s - 1];
        e[s - 1] = e[s], e[s] = d;
      }
    } else {
      if (!l.added && i) {
        var p = t.slice(f, f + l.count);
        p = p.map(function(g, b2) {
          var u3 = r[a2 + b2];
          return u3.length > g.length ? u3 : g;
        }), l.value = n.join(p);
      } else
        l.value = n.join(t.slice(f, f + l.count));
      f += l.count, l.added || (a2 += l.count);
    }
  }
  var v = e[o2 - 1];
  return o2 > 1 && typeof v.value == "string" && (v.added || v.removed) && n.equals("", v.value) && (e[o2 - 2].value += v.value, e.pop()), e;
}
function fe(n) {
  return { newPos: n.newPos, components: n.components.slice(0) };
}
function q(n, e, t) {
  return le2.diff(n, e, t);
}
function F(n) {
  return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? F = function(e) {
    return typeof e;
  } : F = function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, F(n);
}
function A(n, e, t, r, i) {
  e = e || [], t = t || [], r && (n = r(i, n));
  var s;
  for (s = 0; s < e.length; s += 1)
    if (e[s] === n)
      return t[s];
  var o2;
  if (ce.call(n) === "[object Array]") {
    for (e.push(n), o2 = new Array(n.length), t.push(o2), s = 0; s < n.length; s += 1)
      o2[s] = A(n[s], e, t, r, i);
    return e.pop(), t.pop(), o2;
  }
  if (n && n.toJSON && (n = n.toJSON()), F(n) === "object" && n !== null) {
    e.push(n), o2 = {}, t.push(o2);
    var f = [], a2;
    for (a2 in n)
      n.hasOwnProperty(a2) && f.push(a2);
    for (f.sort(), s = 0; s < f.length; s += 1)
      a2 = f[s], o2[a2] = A(n[a2], e, t, r, a2);
    e.pop(), t.pop();
  } else
    o2 = n;
  return o2;
}
function Y(n = "defaultStore") {
  return async () => {
    let e = R("zed-vision-alpha", 1, { upgrade(r) {
      r.createObjectStore(n);
    }, blocked() {
    }, blocking() {
    }, terminated() {
    } });
    return Q({ async get(r) {
      return (await e).get(n, r);
    }, async put(r, i) {
      return (await e).put(n, i, r);
    }, async delete(r) {
      return (await e).delete(n, r);
    }, async clear() {
      return (await e).clear(n);
    }, async keys() {
      return (await e).getAllKeys(n);
    } });
  };
}
var k, W, j2, C2, D, V2, E, N2, H2, S2, se2, oe2, O2, le2, P, K2, U, X2, ue2, de2, ce, L, T, x, B, Z, G2, Q, He;
var init_shaDB = __esm({
  "../shadb/dist/shaDB.mjs"() {
    k = (n, e) => e.some((t) => n instanceof t);
    C2 = new WeakMap();
    D = new WeakMap();
    V2 = new WeakMap();
    E = new WeakMap();
    N2 = new WeakMap();
    H2 = { get(n, e, t) {
      if (n instanceof IDBTransaction) {
        if (e === "done")
          return D.get(n);
        if (e === "objectStoreNames")
          return n.objectStoreNames || V2.get(n);
        if (e === "store")
          return t.objectStoreNames[1] ? void 0 : t.objectStore(t.objectStoreNames[0]);
      }
      return c2(n[e]);
    }, set(n, e, t) {
      return n[e] = t, true;
    }, has(n, e) {
      return n instanceof IDBTransaction && (e === "done" || e === "store") ? true : e in n;
    } };
    S2 = (n) => N2.get(n);
    se2 = ["get", "getKey", "getAll", "getAllKeys", "count"];
    oe2 = ["put", "add", "delete", "clear"];
    O2 = new Map();
    J2((n) => ({ ...n, get: (e, t, r) => $2(e, t) || n.get(e, t, r), has: (e, t) => !!$2(e, t) || n.has(e, t) }));
    w2.prototype = { diff: function(e, t) {
      var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = r.callback;
      typeof r == "function" && (i = r, r = {}), this.options = r;
      var s = this;
      function o2(u3) {
        return i ? (setTimeout(function() {
          i(void 0, u3);
        }, 0), true) : u3;
      }
      e = this.castInput(e), t = this.castInput(t), e = this.removeEmpty(this.tokenize(e)), t = this.removeEmpty(this.tokenize(t));
      var f = t.length, a2 = e.length, l = 1, p = f + a2, d = [{ newPos: -1, components: [] }], v = this.extractCommon(d[0], t, e, 0);
      if (d[0].newPos + 1 >= f && v + 1 >= a2)
        return o2([{ value: this.join(t), count: t.length }]);
      function g() {
        for (var u3 = -1 * l; u3 <= l; u3 += 2) {
          var h2 = void 0, y = d[u3 - 1], m3 = d[u3 + 1], I2 = (m3 ? m3.newPos : 0) - u3;
          y && (d[u3 - 1] = void 0);
          var M3 = y && y.newPos + 1 < f, z = m3 && 0 <= I2 && I2 < a2;
          if (!M3 && !z) {
            d[u3] = void 0;
            continue;
          }
          if (!M3 || z && y.newPos < m3.newPos ? (h2 = fe(m3), s.pushComponent(h2.components, void 0, true)) : (h2 = y, h2.newPos++, s.pushComponent(h2.components, true, void 0)), I2 = s.extractCommon(h2, t, e, u3), h2.newPos + 1 >= f && I2 + 1 >= a2)
            return o2(ae(s, h2.components, t, e, s.useLongestToken));
          d[u3] = h2;
        }
        l++;
      }
      if (i)
        (function u3() {
          setTimeout(function() {
            if (l > p)
              return i();
            g() || u3();
          }, 0);
        })();
      else
        for (; l <= p; ) {
          var b2 = g();
          if (b2)
            return b2;
        }
    }, pushComponent: function(e, t, r) {
      var i = e[e.length - 1];
      i && i.added === t && i.removed === r ? e[e.length - 1] = { count: i.count + 1, added: t, removed: r } : e.push({ count: 1, added: t, removed: r });
    }, extractCommon: function(e, t, r, i) {
      for (var s = t.length, o2 = r.length, f = e.newPos, a2 = f - i, l = 0; f + 1 < s && a2 + 1 < o2 && this.equals(t[f + 1], r[a2 + 1]); )
        f++, a2++, l++;
      return l && e.components.push({ count: l }), e.newPos = f, a2;
    }, equals: function(e, t) {
      return this.options.comparator ? this.options.comparator(e, t) : e === t || this.options.ignoreCase && e.toLowerCase() === t.toLowerCase();
    }, removeEmpty: function(e) {
      for (var t = [], r = 0; r < e.length; r++)
        e[r] && t.push(e[r]);
      return t;
    }, castInput: function(e) {
      return e;
    }, tokenize: function(e) {
      return e.split("");
    }, join: function(e) {
      return e.join("");
    } };
    le2 = new w2();
    P = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
    K2 = /\S/;
    U = new w2();
    U.equals = function(n, e) {
      return this.options.ignoreCase && (n = n.toLowerCase(), e = e.toLowerCase()), n === e || this.options.ignoreWhitespace && !K2.test(n) && !K2.test(e);
    };
    U.tokenize = function(n) {
      for (var e = n.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/), t = 0; t < e.length - 1; t++)
        !e[t + 1] && e[t + 2] && P.test(e[t]) && P.test(e[t + 2]) && (e[t] += e[t + 2], e.splice(t + 1, 2), t--);
      return e;
    };
    X2 = new w2();
    X2.tokenize = function(n) {
      var e = [], t = n.split(/(\n|\r\n)/);
      t[t.length - 1] || t.pop();
      for (var r = 0; r < t.length; r++) {
        var i = t[r];
        r % 2 && !this.options.newlineIsToken ? e[e.length - 1] += i : (this.options.ignoreWhitespace && (i = i.trim()), e.push(i));
      }
      return e;
    };
    ue2 = new w2();
    ue2.tokenize = function(n) {
      return n.split(/(\S.+?[.!?])(?=\s+|$)/);
    };
    de2 = new w2();
    de2.tokenize = function(n) {
      return n.split(/([{}:;,]|\s+)/);
    };
    ce = Object.prototype.toString;
    L = new w2();
    L.useLongestToken = true;
    L.tokenize = X2.tokenize;
    L.castInput = function(n) {
      var e = this.options, t = e.undefinedReplacement, r = e.stringifyReplacer, i = r === void 0 ? function(s, o2) {
        return typeof o2 == "undefined" ? t : o2;
      } : r;
      return typeof n == "string" ? n : JSON.stringify(A(n, null, null, i), i, "  ");
    };
    L.equals = function(n, e) {
      return w2.prototype.equals.call(L, n.replace(/,([\r\n])/g, "$1"), e.replace(/,([\r\n])/g, "$1"));
    };
    T = new w2();
    T.tokenize = function(n) {
      return n.slice();
    };
    T.join = T.removeEmpty = function(n) {
      return n;
    };
    x = async (n) => Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256", typeof n == "string" ? new TextEncoder().encode(n) : n)).slice(0, 4)).map((e) => ("00" + e.toString(16)).slice(-2)).join("");
    B = async (n, e) => {
      let t = x(n), r = q(n, e);
      return { b: await t, c: r.map((i) => i.added ? i.value : i.removed ? -i.count : i.count) };
    };
    Z = (n) => {
      if (n.length < 10)
        return false;
      let e = [...n.slice(0, 8)].filter((r) => r < "0" || r > "f").length === 0, t = n.slice(8);
      if (e && t[0] === "[" && t[t.length - 1] === "]")
        try {
          return JSON.parse(t).length > 1;
        } catch (e3) {
          return false;
        }
      return false;
    };
    G2 = (n, e) => {
      let t = JSON.parse(e), r = n.slice(), i = "";
      return t.forEach((s) => {
        if (Number(s) === s) {
          let o2 = Math.abs(s), f = r.slice(0, o2);
          r = r.slice(o2), s > 0 && (i += String(f));
        } else
          i += String(s);
      }), i;
    };
    Q = (n) => {
      let e = { async get(t, r = "string") {
        let i;
        try {
          if (i = await n.get(t), !i)
            return null;
        } catch (o2) {
          return null;
        }
        if (r === "json")
          try {
            return JSON.parse(i);
          } catch (e3) {
            return i;
          }
        let s = await i;
        if (r === "string") {
          if (typeof s == "string" && r === "string") {
            let o2 = s;
            if (Z(o2)) {
              let f = o2.slice(0, 8), a2 = o2.slice(8), l = await e.get(f);
              return G2(l, a2);
            }
            return s;
          }
          return new TextDecoder().decode(s);
        }
        return i;
      }, async put(t, r) {
        let i;
        try {
          let o2 = await e.get(t);
          if (typeof o2 == "string" && typeof r == "string" && o2.length === 8 && o2 !== r) {
            let f = await e.get(r), a2 = await e.get(o2);
            if (typeof a2 == "string") {
              let l = await x(a2);
              if (l === o2) {
                let p = await B(f, a2), d = p.b + JSON.stringify(p.c);
                await e.put(l, d);
              }
            }
          }
        } catch (e3) {
          i = "";
        }
        if (i !== "" && r === i)
          return r;
        let s;
        return typeof r != "string" ? s = new TextDecoder().decode(r) : s = r, await n.put(t, s);
      }, async delete(t) {
        return await n.delete(t);
      }, async clear() {
        return await n.clear();
      }, async keys() {
        return await n.getAllKeys();
      } };
      return e;
    };
    He = { get: async (n, e) => (await (await Y("shaDB"))()).get(n, e), put: async (n, e) => (await (await Y("shaDB"))()).put(n, e) };
  }
});

// js/workers/getWorker.mjs
var getWorker;
var init_getWorker = __esm({
  "js/workers/getWorker.mjs"() {
    getWorker = (file) => {
      let workerSrc4;
      let forceNormalWorker4 = false;
      const { pathname } = window.location;
      if (pathname.indexOf("/ipfs/") !== -1) {
        const cid = pathname.slice(6, 52);
        forceNormalWorker4 = true;
        workerSrc4 = `/ipfs/${cid}/js/workers/${file}`;
      } else if (location.origin !== "https://spike.land") {
        forceNormalWorker4 = true;
        workerSrc4 = window.URL.createObjectURL(new Blob([
          `self.importScripts("https://spike.land/js/workers/${file}");`
        ]));
      } else {
        workerSrc4 = `https://spike.land/js/workers/${file}`;
      }
      return {
        workerSrc: workerSrc4,
        forceNormalWorker: forceNormalWorker4
      };
    };
  }
});

// ../ipfs/dist/ipfs.client.mjs
function Ar(r, e, t) {
  e = e || [], t = t || 0;
  for (var n = t; r >= Rs; )
    e[t++] = r & 255 | Er, r /= 128;
  for (; r & qs; )
    e[t++] = r & 255 | Er, r >>>= 7;
  return e[t] = r | 0, Ar.bytes = t - n + 1, e;
}
function kt(r, e) {
  var t = 0, e = e || 0, n = 0, i = e, s, o2 = r.length;
  do {
    if (i >= o2)
      throw kt.bytes = 0, new RangeError("Could not decode varint");
    s = r[i++], t += n < 28 ? (s & Dr) << n : (s & Dr) * Math.pow(2, n), n += 7;
  } while (s >= Vs);
  return kt.bytes = i - e, t;
}
function ro(r, e) {
  if (r.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), n = 0; n < t.length; n++)
    t[n] = 255;
  for (var i = 0; i < r.length; i++) {
    var s = r.charAt(i), o2 = s.charCodeAt(0);
    if (t[o2] !== 255)
      throw new TypeError(s + " is ambiguous");
    t[o2] = i;
  }
  var b2 = r.length, a2 = r.charAt(0), c3 = Math.log(b2) / Math.log(256), l = Math.log(256) / Math.log(b2);
  function w3(d) {
    if (d instanceof Uint8Array || (ArrayBuffer.isView(d) ? d = new Uint8Array(d.buffer, d.byteOffset, d.byteLength) : Array.isArray(d) && (d = Uint8Array.from(d))), !(d instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (d.length === 0)
      return "";
    for (var v = 0, C3 = 0, S3 = 0, A2 = d.length; S3 !== A2 && d[S3] === 0; )
      S3++, v++;
    for (var y = (A2 - S3) * l + 1 >>> 0, g = new Uint8Array(y); S3 !== A2; ) {
      for (var z = d[S3], T2 = 0, D2 = y - 1; (z !== 0 || T2 < C3) && D2 !== -1; D2--, T2++)
        z += 256 * g[D2] >>> 0, g[D2] = z % b2 >>> 0, z = z / b2 >>> 0;
      if (z !== 0)
        throw new Error("Non-zero carry");
      C3 = T2, S3++;
    }
    for (var L2 = y - C3; L2 !== y && g[L2] === 0; )
      L2++;
    for (var Me = a2.repeat(v); L2 < y; ++L2)
      Me += r.charAt(g[L2]);
    return Me;
  }
  function I2(d) {
    if (typeof d != "string")
      throw new TypeError("Expected String");
    if (d.length === 0)
      return new Uint8Array();
    var v = 0;
    if (d[v] !== " ") {
      for (var C3 = 0, S3 = 0; d[v] === a2; )
        C3++, v++;
      for (var A2 = (d.length - v) * c3 + 1 >>> 0, y = new Uint8Array(A2); d[v]; ) {
        var g = t[d.charCodeAt(v)];
        if (g === 255)
          return;
        for (var z = 0, T2 = A2 - 1; (g !== 0 || z < S3) && T2 !== -1; T2--, z++)
          g += b2 * y[T2] >>> 0, y[T2] = g % 256 >>> 0, g = g / 256 >>> 0;
        if (g !== 0)
          throw new Error("Non-zero carry");
        S3 = z, v++;
      }
      if (d[v] !== " ") {
        for (var D2 = A2 - S3; D2 !== A2 && y[D2] === 0; )
          D2++;
        for (var L2 = new Uint8Array(C3 + (A2 - D2)), Me = C3; D2 !== A2; )
          L2[Me++] = y[D2++];
        return L2;
      }
    }
  }
  function k2(d) {
    var v = I2(d);
    if (v)
      return v;
    throw new Error(`Non-${e} character`);
  }
  return { encode: w3, decodeUnsafe: I2, decode: k2 };
}
function Pi(r, e, t, n) {
  return { name: r, prefix: e, encoder: { name: r, prefix: e, encode: t }, decoder: { decode: n } };
}
function ir(r, e = "utf8") {
  let t = rt[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return t.encoder.encode(r).substring(1);
}
function sr(r, e = "utf8") {
  let t = rt[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return t.decoder.decode(`${t.prefix}${r}`);
}
function ar(r, e) {
  e || (e = r.reduce((i, s) => i + s.length, 0));
  let t = new Uint8Array(e), n = 0;
  for (let i of r)
    t.set(i, n), n += i.length;
  return t;
}
function Es(r, e) {
  if (r === e)
    return true;
  if (r.byteLength !== e.byteLength)
    return false;
  for (let t = 0; t < r.byteLength; t++)
    if (r[t] !== e[t])
      return false;
  return true;
}
function Xn(r) {
  if (r != null)
    return typeof r == "number" ? r & 4095 : (r = r.toString(), r.substring(0, 1) === "0" ? parseInt(r, 8) & 4095 : parseInt(r, 10) & 4095);
}
function Kn(r) {
  if (r == null)
    return;
  let e;
  if (r.secs != null && (e = { secs: r.secs, nsecs: r.nsecs }), r.Seconds != null && (e = { secs: r.Seconds, nsecs: r.FractionalNanoseconds }), Array.isArray(r) && (e = { secs: r[0], nsecs: r[1] }), r instanceof Date) {
    let t = r.getTime(), n = Math.floor(t / 1e3);
    e = { secs: n, nsecs: (t - n * 1e3) * 1e3 };
  }
  if (!!Object.prototype.hasOwnProperty.call(e, "secs")) {
    if (e != null && e.nsecs != null && (e.nsecs < 0 || e.nsecs > 999999999))
      throw (0, Qn.default)(new Error("mtime-nsecs must be within the range [0,999999999]"), "ERR_INVALID_MTIME_NSECS");
    return e;
  }
}
function qc(r) {
  let e = 0;
  return new Promise((t, n) => r.forEach((i) => i.then(t).catch(() => {
    ++e === r.length && n();
  })));
}
var zs, Ue, Ns, Os, Bs, _s, gr, x2, h, _3, Is, Se, vr, Us, Er, Fs, qs, Rs, Ps, Vs, Dr, $s, Js, Hs, Ws, Gs, Qs, Xs, Ks, Zs, Ys, eo, to, Ee, jr, Ae, ue3, he2, Fe, n02, Cr, X3, zr, Nr, ee2, qe, Br, _r, De, Re, no, io, Lr, Mr, Ur, Fr, Pe, qr, Ve, te2, so, oo, E2, $3, mt, J3, ao, yt, gt, de3, co, bo, lo, fo, uo, ho, po, xo, wt, m2, ko, mo, yo, je, go, Rr, Pr, $e, Je, wo, vo, So, pe2, Wr, Xr, Zr, rn, sn, un, hn, pn, kn, yn, ne3, Ot, Tn, It, Mn, Fn, Rn, Vn, Hn, Gn, ei, Ye, ii, oi, li, $t, xi, yi, wi, Si, Ai, Ht, za, Di, Wt, Na, ji, Gt, Oa, Ti, Qt, Ba, Ci, Xt, _a, Ia, zi, Kt, La, Ma, Ni, Zt, Ua, Fa, qa, Ra, Oi, Be, Bi, tt, Yt, Ii, Pa, Va, Li, er, $a, Mi, Ui, H22, W2, Fi, qi, tr, K22, Ri, Vi, rr, Wa, rt, nr, nt, _e2, or, it, st, Ie, br, Zi, ts, ns, ur, hr, bs, fs, ws, Ss, As, mr, Cs, Rc, Sr, fe2, Ms, ut, ht, dt, Y2, pt, xt, Q2, F2, M2, Vr, se3, Eo, $r, Jr, vt, xe, Ao, He2, H3, Do, St, Ke, Qn, K3, me2, Mt, u2, O3, Uo, e2, t2, i2, s2, ce2, Zn, Fo, qo, Ro, Po, ye, Ut, Ft, Vo, qt, Rt, Pt, Vt, Ze, $o, Jo, Ne, Pc, Fc, Cb, export_CID, export_all;
var init_ipfs_client = __esm({
  "../ipfs/dist/ipfs.client.mjs"() {
    zs = Object.create;
    Ue = Object.defineProperty;
    Ns = Object.getOwnPropertyDescriptor;
    Os = Object.getOwnPropertyNames;
    Bs = Object.getPrototypeOf;
    _s = Object.prototype.hasOwnProperty;
    gr = (r) => Ue(r, "__esModule", { value: true });
    x2 = (r, e) => () => (r && (e = r(r = 0)), e);
    h = (r, e) => () => (e || r((e = { exports: {} }).exports, e), e.exports);
    _3 = (r, e) => {
      gr(r);
      for (var t in e)
        Ue(r, t, { get: e[t], enumerable: true });
    };
    Is = (r, e, t) => {
      if (e && typeof e == "object" || typeof e == "function")
        for (let n of Os(e))
          !_s.call(r, n) && n !== "default" && Ue(r, n, { get: () => e[n], enumerable: !(t = Ns(e, n)) || t.enumerable });
      return r;
    };
    Se = (r) => Is(gr(Ue(r != null ? zs(Bs(r)) : {}, "default", r && r.__esModule && "default" in r ? { get: () => r.default, enumerable: true } : { value: r, enumerable: true })), r);
    vr = h(($c, wr) => {
      "use strict";
      var Ls = async (r) => {
        let e = [];
        for await (let t of r)
          e.push(t);
        return e;
      };
      wr.exports = Ls;
    });
    jr = x2(() => {
      Us = Ar, Er = 128, Fs = 127, qs = ~Fs, Rs = Math.pow(2, 31);
      Ps = kt, Vs = 128, Dr = 127;
      $s = Math.pow(2, 7), Js = Math.pow(2, 14), Hs = Math.pow(2, 21), Ws = Math.pow(2, 28), Gs = Math.pow(2, 35), Qs = Math.pow(2, 42), Xs = Math.pow(2, 49), Ks = Math.pow(2, 56), Zs = Math.pow(2, 63), Ys = function(r) {
        return r < $s ? 1 : r < Js ? 2 : r < Hs ? 3 : r < Ws ? 4 : r < Gs ? 5 : r < Qs ? 6 : r < Xs ? 7 : r < Ks ? 8 : r < Zs ? 9 : 10;
      }, eo = { encode: Us, decode: Ps, encodingLength: Ys }, to = eo, Ee = to;
    });
    Fe = x2(() => {
      jr();
      Ae = (r) => [Ee.decode(r), Ee.decode.bytes], ue3 = (r, e, t = 0) => (Ee.encode(r, e, t), e), he2 = (r) => Ee.encodingLength(r);
    });
    ee2 = x2(() => {
      n02 = new Uint8Array(0), Cr = (r, e) => {
        if (r === e)
          return true;
        if (r.byteLength !== e.byteLength)
          return false;
        for (let t = 0; t < r.byteLength; t++)
          if (r[t] !== e[t])
            return false;
        return true;
      }, X3 = (r) => {
        if (r instanceof Uint8Array && r.constructor.name === "Uint8Array")
          return r;
        if (r instanceof ArrayBuffer)
          return new Uint8Array(r);
        if (ArrayBuffer.isView(r))
          return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
        throw new Error("Unknown type, must be binary type");
      }, zr = (r) => new TextEncoder().encode(r), Nr = (r) => new TextDecoder().decode(r);
    });
    Re = x2(() => {
      ee2();
      Fe();
      qe = (r, e) => {
        let t = e.byteLength, n = he2(r), i = n + he2(t), s = new Uint8Array(i + t);
        return ue3(r, s, 0), ue3(t, s, n), s.set(e, i), new De(r, t, e, s);
      }, Br = (r) => {
        let e = X3(r), [t, n] = Ae(e), [i, s] = Ae(e.subarray(n)), o2 = e.subarray(n + s);
        if (o2.byteLength !== i)
          throw new Error("Incorrect length");
        return new De(t, i, o2, e);
      }, _r = (r, e) => r === e ? true : r.code === e.code && r.size === e.size && Cr(r.bytes, e.bytes), De = class {
        constructor(e, t, n, i) {
          this.code = e, this.size = t, this.digest = n, this.bytes = i;
        }
      };
    });
    Mr = x2(() => {
      no = ro, io = no, Lr = io;
    });
    $3 = x2(() => {
      Mr();
      ee2();
      Ur = class {
        constructor(e, t, n) {
          this.name = e, this.prefix = t, this.baseEncode = n;
        }
        encode(e) {
          if (e instanceof Uint8Array)
            return `${this.prefix}${this.baseEncode(e)}`;
          throw Error("Unknown type, must be binary type");
        }
      }, Fr = class {
        constructor(e, t, n) {
          this.name = e, this.prefix = t, this.baseDecode = n;
        }
        decode(e) {
          if (typeof e == "string")
            switch (e[0]) {
              case this.prefix:
                return this.baseDecode(e.slice(1));
              default:
                throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
          else
            throw Error("Can only multibase decode strings");
        }
        or(e) {
          let t = { [this.prefix]: this, ...e.decoders || { [e.prefix]: e } };
          return new Pe(t);
        }
      }, Pe = class {
        constructor(e) {
          this.decoders = e;
        }
        or(e) {
          let t = e.decoders || { [e.prefix]: e };
          return new Pe({ ...this.decoders, ...t });
        }
        decode(e) {
          let t = e[0], n = this.decoders[t];
          if (n)
            return n.decode(e);
          throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
      }, qr = class {
        constructor(e, t, n, i) {
          this.name = e, this.prefix = t, this.baseEncode = n, this.baseDecode = i, this.encoder = new Ur(e, t, n), this.decoder = new Fr(e, t, i);
        }
        encode(e) {
          return this.encoder.encode(e);
        }
        decode(e) {
          return this.decoder.decode(e);
        }
      }, Ve = ({ name: r, prefix: e, encode: t, decode: n }) => new qr(r, e, t, n), te2 = ({ prefix: r, name: e, alphabet: t }) => {
        let { encode: n, decode: i } = Lr(t, e);
        return Ve({ prefix: r, name: e, encode: n, decode: (s) => X3(i(s)) });
      }, so = (r, e, t, n) => {
        let i = {};
        for (let l = 0; l < e.length; ++l)
          i[e[l]] = l;
        let s = r.length;
        for (; r[s - 1] === "="; )
          --s;
        let o2 = new Uint8Array(s * t / 8 | 0), b2 = 0, a2 = 0, c3 = 0;
        for (let l = 0; l < s; ++l) {
          let w3 = i[r[l]];
          if (w3 === void 0)
            throw new SyntaxError(`Non-${n} character`);
          a2 = a2 << t | w3, b2 += t, b2 >= 8 && (b2 -= 8, o2[c3++] = 255 & a2 >> b2);
        }
        if (b2 >= t || 255 & a2 << 8 - b2)
          throw new SyntaxError("Unexpected end of data");
        return o2;
      }, oo = (r, e, t) => {
        let n = e[e.length - 1] === "=", i = (1 << t) - 1, s = "", o2 = 0, b2 = 0;
        for (let a2 = 0; a2 < r.length; ++a2)
          for (b2 = b2 << 8 | r[a2], o2 += 8; o2 > t; )
            o2 -= t, s += e[i & b2 >> o2];
        if (o2 && (s += e[i & b2 << t - o2]), n)
          for (; s.length * t & 7; )
            s += "=";
        return s;
      }, E2 = ({ name: r, prefix: e, bitsPerChar: t, alphabet: n }) => Ve({ prefix: e, name: r, encode(i) {
        return oo(i, n, t);
      }, decode(i) {
        return so(i, n, t, r);
      } });
    });
    mt = {};
    _3(mt, { base58btc: () => J3, base58flickr: () => ao });
    yt = x2(() => {
      $3();
      J3 = te2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" }), ao = te2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
    });
    gt = {};
    _3(gt, { base32: () => de3, base32hex: () => fo, base32hexpad: () => ho, base32hexpadupper: () => po, base32hexupper: () => uo, base32pad: () => bo, base32padupper: () => lo, base32upper: () => co, base32z: () => xo });
    wt = x2(() => {
      $3();
      de3 = E2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 }), co = E2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 }), bo = E2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 }), lo = E2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 }), fo = E2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 }), uo = E2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 }), ho = E2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 }), po = E2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 }), xo = E2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
    });
    pe2 = x2(() => {
      Fe();
      Re();
      yt();
      wt();
      ee2();
      m2 = class {
        constructor(e, t, n, i) {
          this.code = t, this.version = e, this.multihash = n, this.bytes = i, this.byteOffset = i.byteOffset, this.byteLength = i.byteLength, this.asCID = this, this._baseCache = new Map(), Object.defineProperties(this, { byteOffset: Je, byteLength: Je, code: $e, version: $e, multihash: $e, bytes: $e, _baseCache: Je, asCID: Je });
        }
        toV0() {
          switch (this.version) {
            case 0:
              return this;
            default: {
              let { code: e, multihash: t } = this;
              if (e !== je)
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              if (t.code !== go)
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              return m2.createV0(t);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              let { code: e, digest: t } = this.multihash, n = qe(e, t);
              return m2.createV1(this.code, n);
            }
            case 1:
              return this;
            default:
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
          }
        }
        equals(e) {
          return e && this.code === e.code && this.version === e.version && _r(this.multihash, e.multihash);
        }
        toString(e) {
          let { bytes: t, version: n, _baseCache: i } = this;
          switch (n) {
            case 0:
              return mo(t, i, e || J3.encoder);
            default:
              return yo(t, i, e || de3.encoder);
          }
        }
        toJSON() {
          return { code: this.code, version: this.version, hash: this.multihash.bytes };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(e) {
          return vo(/^0\.0/, So), !!(e && (e[Pr] || e.asCID === e));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(e) {
          if (e instanceof m2)
            return e;
          if (e != null && e.asCID === e) {
            let { version: t, code: n, multihash: i, bytes: s } = e;
            return new m2(t, n, i, s || Rr(t, n, i.bytes));
          } else if (e != null && e[Pr] === true) {
            let { version: t, multihash: n, code: i } = e, s = Br(n);
            return m2.create(t, i, s);
          } else
            return null;
        }
        static create(e, t, n) {
          if (typeof t != "number")
            throw new Error("String codecs are no longer supported");
          switch (e) {
            case 0: {
              if (t !== je)
                throw new Error(`Version 0 CID must use dag-pb (code: ${je}) block encoding`);
              return new m2(e, t, n, n.bytes);
            }
            case 1: {
              let i = Rr(e, t, n.bytes);
              return new m2(e, t, n, i);
            }
            default:
              throw new Error("Invalid version");
          }
        }
        static createV0(e) {
          return m2.create(0, je, e);
        }
        static createV1(e, t) {
          return m2.create(1, e, t);
        }
        static decode(e) {
          let [t, n] = m2.decodeFirst(e);
          if (n.length)
            throw new Error("Incorrect length");
          return t;
        }
        static decodeFirst(e) {
          let t = m2.inspectBytes(e), n = t.size - t.multihashSize, i = X3(e.subarray(n, n + t.multihashSize));
          if (i.byteLength !== t.multihashSize)
            throw new Error("Incorrect length");
          let s = i.subarray(t.multihashSize - t.digestSize), o2 = new De(t.multihashCode, t.digestSize, s, i);
          return [t.version === 0 ? m2.createV0(o2) : m2.createV1(t.codec, o2), e.subarray(t.size)];
        }
        static inspectBytes(e) {
          let t = 0, n = () => {
            let [w3, I2] = Ae(e.subarray(t));
            return t += I2, w3;
          }, i = n(), s = je;
          if (i === 18 ? (i = 0, t = 0) : i === 1 && (s = n()), i !== 0 && i !== 1)
            throw new RangeError(`Invalid CID version ${i}`);
          let o2 = t, b2 = n(), a2 = n(), c3 = t + a2, l = c3 - o2;
          return { version: i, codec: s, multihashCode: b2, digestSize: a2, multihashSize: l, size: c3 };
        }
        static parse(e, t) {
          let [n, i] = ko(e, t), s = m2.decode(i);
          return s._baseCache.set(n, e), s;
        }
      }, ko = (r, e) => {
        switch (r[0]) {
          case "Q": {
            let t = e || J3;
            return [J3.prefix, t.decode(`${J3.prefix}${r}`)];
          }
          case J3.prefix: {
            let t = e || J3;
            return [J3.prefix, t.decode(r)];
          }
          case de3.prefix: {
            let t = e || de3;
            return [de3.prefix, t.decode(r)];
          }
          default: {
            if (e == null)
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            return [r[0], e.decode(r)];
          }
        }
      }, mo = (r, e, t) => {
        let { prefix: n } = t;
        if (n !== J3.prefix)
          throw Error(`Cannot string encode V0 in ${t.name} encoding`);
        let i = e.get(n);
        if (i == null) {
          let s = t.encode(r).slice(1);
          return e.set(n, s), s;
        } else
          return i;
      }, yo = (r, e, t) => {
        let { prefix: n } = t, i = e.get(n);
        if (i == null) {
          let s = t.encode(r);
          return e.set(n, s), s;
        } else
          return i;
      }, je = 112, go = 18, Rr = (r, e, t) => {
        let n = he2(r), i = n + he2(e), s = new Uint8Array(i + t.byteLength);
        return ue3(r, s, 0), ue3(e, s, n), s.set(t, i), s;
      }, Pr = Symbol.for("@ipld/js-cid/CID"), $e = { writable: false, configurable: false, enumerable: true }, Je = { writable: false, enumerable: false, configurable: false }, wo = "0.0.0-dev", vo = (r, e) => {
        if (r.test(wo))
          console.warn(e);
        else
          throw new Error(e);
      }, So = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    });
    Wr = h((I0, Hr) => {
      "use strict";
      async function* jo(r, e = {}) {
        let t = r.getReader();
        try {
          for (; ; ) {
            let n = await t.read();
            if (n.done)
              return;
            yield n.value;
          }
        } finally {
          e.preventCancel !== true && t.cancel(), t.releaseLock();
        }
      }
      Hr.exports = jo;
    });
    Xr = h((L0, Qr) => {
      "use strict";
      function Gr(r, e) {
        for (let t in e)
          Object.defineProperty(r, t, { value: e[t], enumerable: true, configurable: true });
        return r;
      }
      function To(r, e, t) {
        if (!r || typeof r == "string")
          throw new TypeError("Please pass an Error to err-code");
        t || (t = {}), typeof e == "object" && (t = e, e = ""), e && (t.code = e);
        try {
          return Gr(r, t);
        } catch (n) {
          t.message = r.message, t.stack = r.stack;
          let i = function() {
          };
          return i.prototype = Object.create(Object.getPrototypeOf(r)), Gr(new i(), t);
        }
      }
      Qr.exports = To;
    });
    Zr = h((M0, Kr) => {
      "use strict";
      Kr.exports = Co;
      function Co(r, e) {
        for (var t = new Array(arguments.length - 1), n = 0, i = 2, s = true; i < arguments.length; )
          t[n++] = arguments[i++];
        return new Promise(function(b2, a2) {
          t[n] = function(l) {
            if (s)
              if (s = false, l)
                a2(l);
              else {
                for (var w3 = new Array(arguments.length - 1), I2 = 0; I2 < w3.length; )
                  w3[I2++] = arguments[I2];
                b2.apply(null, w3);
              }
          };
          try {
            r.apply(e || null, t);
          } catch (c3) {
            s && (s = false, a2(c3));
          }
        });
      }
    });
    rn = h((tn) => {
      "use strict";
      var We = tn;
      We.length = function(e) {
        var t = e.length;
        if (!t)
          return 0;
        for (var n = 0; --t % 4 > 1 && e.charAt(t) === "="; )
          ++n;
        return Math.ceil(e.length * 3) / 4 - n;
      };
      var ke2 = new Array(64), Yr = new Array(123);
      for (R2 = 0; R2 < 64; )
        Yr[ke2[R2] = R2 < 26 ? R2 + 65 : R2 < 52 ? R2 + 71 : R2 < 62 ? R2 - 4 : R2 - 59 | 43] = R2++;
      var R2;
      We.encode = function(e, t, n) {
        for (var i = null, s = [], o2 = 0, b2 = 0, a2; t < n; ) {
          var c3 = e[t++];
          switch (b2) {
            case 0:
              s[o2++] = ke2[c3 >> 2], a2 = (c3 & 3) << 4, b2 = 1;
              break;
            case 1:
              s[o2++] = ke2[a2 | c3 >> 4], a2 = (c3 & 15) << 2, b2 = 2;
              break;
            case 2:
              s[o2++] = ke2[a2 | c3 >> 6], s[o2++] = ke2[c3 & 63], b2 = 0;
              break;
          }
          o2 > 8191 && ((i || (i = [])).push(String.fromCharCode.apply(String, s)), o2 = 0);
        }
        return b2 && (s[o2++] = ke2[a2], s[o2++] = 61, b2 === 1 && (s[o2++] = 61)), i ? (o2 && i.push(String.fromCharCode.apply(String, s.slice(0, o2))), i.join("")) : String.fromCharCode.apply(String, s.slice(0, o2));
      };
      var en = "invalid encoding";
      We.decode = function(e, t, n) {
        for (var i = n, s = 0, o2, b2 = 0; b2 < e.length; ) {
          var a2 = e.charCodeAt(b2++);
          if (a2 === 61 && s > 1)
            break;
          if ((a2 = Yr[a2]) === void 0)
            throw Error(en);
          switch (s) {
            case 0:
              o2 = a2, s = 1;
              break;
            case 1:
              t[n++] = o2 << 2 | (a2 & 48) >> 4, o2 = a2, s = 2;
              break;
            case 2:
              t[n++] = (o2 & 15) << 4 | (a2 & 60) >> 2, o2 = a2, s = 3;
              break;
            case 3:
              t[n++] = (o2 & 3) << 6 | a2, s = 0;
              break;
          }
        }
        if (s === 1)
          throw Error(en);
        return n - i;
      };
      We.test = function(e) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);
      };
    });
    sn = h((F0, nn) => {
      "use strict";
      nn.exports = Ge;
      function Ge() {
        this._listeners = {};
      }
      Ge.prototype.on = function(e, t, n) {
        return (this._listeners[e] || (this._listeners[e] = [])).push({ fn: t, ctx: n || this }), this;
      };
      Ge.prototype.off = function(e, t) {
        if (e === void 0)
          this._listeners = {};
        else if (t === void 0)
          this._listeners[e] = [];
        else
          for (var n = this._listeners[e], i = 0; i < n.length; )
            n[i].fn === t ? n.splice(i, 1) : ++i;
        return this;
      };
      Ge.prototype.emit = function(e) {
        var t = this._listeners[e];
        if (t) {
          for (var n = [], i = 1; i < arguments.length; )
            n.push(arguments[i++]);
          for (i = 0; i < t.length; )
            t[i].fn.apply(t[i++].ctx, n);
        }
        return this;
      };
    });
    un = h((q0, fn) => {
      "use strict";
      fn.exports = on(on);
      function on(r) {
        return typeof Float32Array != "undefined" ? function() {
          var e = new Float32Array([-0]), t = new Uint8Array(e.buffer), n = t[3] === 128;
          function i(a2, c3, l) {
            e[0] = a2, c3[l] = t[0], c3[l + 1] = t[1], c3[l + 2] = t[2], c3[l + 3] = t[3];
          }
          function s(a2, c3, l) {
            e[0] = a2, c3[l] = t[3], c3[l + 1] = t[2], c3[l + 2] = t[1], c3[l + 3] = t[0];
          }
          r.writeFloatLE = n ? i : s, r.writeFloatBE = n ? s : i;
          function o2(a2, c3) {
            return t[0] = a2[c3], t[1] = a2[c3 + 1], t[2] = a2[c3 + 2], t[3] = a2[c3 + 3], e[0];
          }
          function b2(a2, c3) {
            return t[3] = a2[c3], t[2] = a2[c3 + 1], t[1] = a2[c3 + 2], t[0] = a2[c3 + 3], e[0];
          }
          r.readFloatLE = n ? o2 : b2, r.readFloatBE = n ? b2 : o2;
        }() : function() {
          function e(n, i, s, o2) {
            var b2 = i < 0 ? 1 : 0;
            if (b2 && (i = -i), i === 0)
              n(1 / i > 0 ? 0 : 2147483648, s, o2);
            else if (isNaN(i))
              n(2143289344, s, o2);
            else if (i > 34028234663852886e22)
              n((b2 << 31 | 2139095040) >>> 0, s, o2);
            else if (i < 11754943508222875e-54)
              n((b2 << 31 | Math.round(i / 1401298464324817e-60)) >>> 0, s, o2);
            else {
              var a2 = Math.floor(Math.log(i) / Math.LN2), c3 = Math.round(i * Math.pow(2, -a2) * 8388608) & 8388607;
              n((b2 << 31 | a2 + 127 << 23 | c3) >>> 0, s, o2);
            }
          }
          r.writeFloatLE = e.bind(null, an), r.writeFloatBE = e.bind(null, cn);
          function t(n, i, s) {
            var o2 = n(i, s), b2 = (o2 >> 31) * 2 + 1, a2 = o2 >>> 23 & 255, c3 = o2 & 8388607;
            return a2 === 255 ? c3 ? NaN : b2 * (1 / 0) : a2 === 0 ? b2 * 1401298464324817e-60 * c3 : b2 * Math.pow(2, a2 - 150) * (c3 + 8388608);
          }
          r.readFloatLE = t.bind(null, bn), r.readFloatBE = t.bind(null, ln);
        }(), typeof Float64Array != "undefined" ? function() {
          var e = new Float64Array([-0]), t = new Uint8Array(e.buffer), n = t[7] === 128;
          function i(a2, c3, l) {
            e[0] = a2, c3[l] = t[0], c3[l + 1] = t[1], c3[l + 2] = t[2], c3[l + 3] = t[3], c3[l + 4] = t[4], c3[l + 5] = t[5], c3[l + 6] = t[6], c3[l + 7] = t[7];
          }
          function s(a2, c3, l) {
            e[0] = a2, c3[l] = t[7], c3[l + 1] = t[6], c3[l + 2] = t[5], c3[l + 3] = t[4], c3[l + 4] = t[3], c3[l + 5] = t[2], c3[l + 6] = t[1], c3[l + 7] = t[0];
          }
          r.writeDoubleLE = n ? i : s, r.writeDoubleBE = n ? s : i;
          function o2(a2, c3) {
            return t[0] = a2[c3], t[1] = a2[c3 + 1], t[2] = a2[c3 + 2], t[3] = a2[c3 + 3], t[4] = a2[c3 + 4], t[5] = a2[c3 + 5], t[6] = a2[c3 + 6], t[7] = a2[c3 + 7], e[0];
          }
          function b2(a2, c3) {
            return t[7] = a2[c3], t[6] = a2[c3 + 1], t[5] = a2[c3 + 2], t[4] = a2[c3 + 3], t[3] = a2[c3 + 4], t[2] = a2[c3 + 5], t[1] = a2[c3 + 6], t[0] = a2[c3 + 7], e[0];
          }
          r.readDoubleLE = n ? o2 : b2, r.readDoubleBE = n ? b2 : o2;
        }() : function() {
          function e(n, i, s, o2, b2, a2) {
            var c3 = o2 < 0 ? 1 : 0;
            if (c3 && (o2 = -o2), o2 === 0)
              n(0, b2, a2 + i), n(1 / o2 > 0 ? 0 : 2147483648, b2, a2 + s);
            else if (isNaN(o2))
              n(0, b2, a2 + i), n(2146959360, b2, a2 + s);
            else if (o2 > 17976931348623157e292)
              n(0, b2, a2 + i), n((c3 << 31 | 2146435072) >>> 0, b2, a2 + s);
            else {
              var l;
              if (o2 < 22250738585072014e-324)
                l = o2 / 5e-324, n(l >>> 0, b2, a2 + i), n((c3 << 31 | l / 4294967296) >>> 0, b2, a2 + s);
              else {
                var w3 = Math.floor(Math.log(o2) / Math.LN2);
                w3 === 1024 && (w3 = 1023), l = o2 * Math.pow(2, -w3), n(l * 4503599627370496 >>> 0, b2, a2 + i), n((c3 << 31 | w3 + 1023 << 20 | l * 1048576 & 1048575) >>> 0, b2, a2 + s);
              }
            }
          }
          r.writeDoubleLE = e.bind(null, an, 0, 4), r.writeDoubleBE = e.bind(null, cn, 4, 0);
          function t(n, i, s, o2, b2) {
            var a2 = n(o2, b2 + i), c3 = n(o2, b2 + s), l = (c3 >> 31) * 2 + 1, w3 = c3 >>> 20 & 2047, I2 = 4294967296 * (c3 & 1048575) + a2;
            return w3 === 2047 ? I2 ? NaN : l * (1 / 0) : w3 === 0 ? l * 5e-324 * I2 : l * Math.pow(2, w3 - 1075) * (I2 + 4503599627370496);
          }
          r.readDoubleLE = t.bind(null, bn, 0, 4), r.readDoubleBE = t.bind(null, ln, 4, 0);
        }(), r;
      }
      function an(r, e, t) {
        e[t] = r & 255, e[t + 1] = r >>> 8 & 255, e[t + 2] = r >>> 16 & 255, e[t + 3] = r >>> 24;
      }
      function cn(r, e, t) {
        e[t] = r >>> 24, e[t + 1] = r >>> 16 & 255, e[t + 2] = r >>> 8 & 255, e[t + 3] = r & 255;
      }
      function bn(r, e) {
        return (r[e] | r[e + 1] << 8 | r[e + 2] << 16 | r[e + 3] << 24) >>> 0;
      }
      function ln(r, e) {
        return (r[e] << 24 | r[e + 1] << 16 | r[e + 2] << 8 | r[e + 3]) >>> 0;
      }
    });
    hn = h((exports, module) => {
      "use strict";
      module.exports = inquire;
      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName);
          if (mod && (mod.length || Object.keys(mod).length))
            return mod;
        } catch (r) {
        }
        return null;
      }
    });
    pn = h((dn) => {
      "use strict";
      var Et = dn;
      Et.length = function(e) {
        for (var t = 0, n = 0, i = 0; i < e.length; ++i)
          n = e.charCodeAt(i), n < 128 ? t += 1 : n < 2048 ? t += 2 : (n & 64512) == 55296 && (e.charCodeAt(i + 1) & 64512) == 56320 ? (++i, t += 4) : t += 3;
        return t;
      };
      Et.read = function(e, t, n) {
        var i = n - t;
        if (i < 1)
          return "";
        for (var s = null, o2 = [], b2 = 0, a2; t < n; )
          a2 = e[t++], a2 < 128 ? o2[b2++] = a2 : a2 > 191 && a2 < 224 ? o2[b2++] = (a2 & 31) << 6 | e[t++] & 63 : a2 > 239 && a2 < 365 ? (a2 = ((a2 & 7) << 18 | (e[t++] & 63) << 12 | (e[t++] & 63) << 6 | e[t++] & 63) - 65536, o2[b2++] = 55296 + (a2 >> 10), o2[b2++] = 56320 + (a2 & 1023)) : o2[b2++] = (a2 & 15) << 12 | (e[t++] & 63) << 6 | e[t++] & 63, b2 > 8191 && ((s || (s = [])).push(String.fromCharCode.apply(String, o2)), b2 = 0);
        return s ? (b2 && s.push(String.fromCharCode.apply(String, o2.slice(0, b2))), s.join("")) : String.fromCharCode.apply(String, o2.slice(0, b2));
      };
      Et.write = function(e, t, n) {
        for (var i = n, s, o2, b2 = 0; b2 < e.length; ++b2)
          s = e.charCodeAt(b2), s < 128 ? t[n++] = s : s < 2048 ? (t[n++] = s >> 6 | 192, t[n++] = s & 63 | 128) : (s & 64512) == 55296 && ((o2 = e.charCodeAt(b2 + 1)) & 64512) == 56320 ? (s = 65536 + ((s & 1023) << 10) + (o2 & 1023), ++b2, t[n++] = s >> 18 | 240, t[n++] = s >> 12 & 63 | 128, t[n++] = s >> 6 & 63 | 128, t[n++] = s & 63 | 128) : (t[n++] = s >> 12 | 224, t[n++] = s >> 6 & 63 | 128, t[n++] = s & 63 | 128);
        return n - i;
      };
    });
    kn = h((P0, xn) => {
      "use strict";
      xn.exports = zo;
      function zo(r, e, t) {
        var n = t || 8192, i = n >>> 1, s = null, o2 = n;
        return function(a2) {
          if (a2 < 1 || a2 > i)
            return r(a2);
          o2 + a2 > n && (s = r(n), o2 = 0);
          var c3 = e.call(s, o2, o2 += a2);
          return o2 & 7 && (o2 = (o2 | 7) + 1), c3;
        };
      }
    });
    yn = h((V0, mn) => {
      "use strict";
      mn.exports = N3;
      var Te = ne3();
      function N3(r, e) {
        this.lo = r >>> 0, this.hi = e >>> 0;
      }
      var oe3 = N3.zero = new N3(0, 0);
      oe3.toNumber = function() {
        return 0;
      };
      oe3.zzEncode = oe3.zzDecode = function() {
        return this;
      };
      oe3.length = function() {
        return 1;
      };
      var No = N3.zeroHash = "\0\0\0\0\0\0\0\0";
      N3.fromNumber = function(e) {
        if (e === 0)
          return oe3;
        var t = e < 0;
        t && (e = -e);
        var n = e >>> 0, i = (e - n) / 4294967296 >>> 0;
        return t && (i = ~i >>> 0, n = ~n >>> 0, ++n > 4294967295 && (n = 0, ++i > 4294967295 && (i = 0))), new N3(n, i);
      };
      N3.from = function(e) {
        if (typeof e == "number")
          return N3.fromNumber(e);
        if (Te.isString(e))
          if (Te.Long)
            e = Te.Long.fromString(e);
          else
            return N3.fromNumber(parseInt(e, 10));
        return e.low || e.high ? new N3(e.low >>> 0, e.high >>> 0) : oe3;
      };
      N3.prototype.toNumber = function(e) {
        if (!e && this.hi >>> 31) {
          var t = ~this.lo + 1 >>> 0, n = ~this.hi >>> 0;
          return t || (n = n + 1 >>> 0), -(t + n * 4294967296);
        }
        return this.lo + this.hi * 4294967296;
      };
      N3.prototype.toLong = function(e) {
        return Te.Long ? new Te.Long(this.lo | 0, this.hi | 0, Boolean(e)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(e) };
      };
      var re2 = String.prototype.charCodeAt;
      N3.fromHash = function(e) {
        return e === No ? oe3 : new N3((re2.call(e, 0) | re2.call(e, 1) << 8 | re2.call(e, 2) << 16 | re2.call(e, 3) << 24) >>> 0, (re2.call(e, 4) | re2.call(e, 5) << 8 | re2.call(e, 6) << 16 | re2.call(e, 7) << 24) >>> 0);
      };
      N3.prototype.toHash = function() {
        return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
      };
      N3.prototype.zzEncode = function() {
        var e = this.hi >> 31;
        return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
      };
      N3.prototype.zzDecode = function() {
        var e = -(this.lo & 1);
        return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
      };
      N3.prototype.length = function() {
        var e = this.lo, t = (this.lo >>> 28 | this.hi << 4) >>> 0, n = this.hi >>> 24;
        return n === 0 ? t === 0 ? e < 16384 ? e < 128 ? 1 : 2 : e < 2097152 ? 3 : 4 : t < 16384 ? t < 128 ? 5 : 6 : t < 2097152 ? 7 : 8 : n < 128 ? 9 : 10;
      };
    });
    ne3 = h((At) => {
      "use strict";
      var f = At;
      f.asPromise = Zr();
      f.base64 = rn();
      f.EventEmitter = sn();
      f.float = un();
      f.inquire = hn();
      f.utf8 = pn();
      f.pool = kn();
      f.LongBits = yn();
      f.isNode = Boolean(typeof global != "undefined" && global && global.process && global.process.versions && global.process.versions.node);
      f.global = f.isNode && global || typeof window != "undefined" && window || typeof self != "undefined" && self || At;
      f.emptyArray = Object.freeze ? Object.freeze([]) : [];
      f.emptyObject = Object.freeze ? Object.freeze({}) : {};
      f.isInteger = Number.isInteger || function(e) {
        return typeof e == "number" && isFinite(e) && Math.floor(e) === e;
      };
      f.isString = function(e) {
        return typeof e == "string" || e instanceof String;
      };
      f.isObject = function(e) {
        return e && typeof e == "object";
      };
      f.isset = f.isSet = function(e, t) {
        var n = e[t];
        return n != null && e.hasOwnProperty(t) ? typeof n != "object" || (Array.isArray(n) ? n.length : Object.keys(n).length) > 0 : false;
      };
      f.Buffer = function() {
        try {
          var r = f.inquire("buffer").Buffer;
          return r.prototype.utf8Write ? r : null;
        } catch (e) {
          return null;
        }
      }();
      f._Buffer_from = null;
      f._Buffer_allocUnsafe = null;
      f.newBuffer = function(e) {
        return typeof e == "number" ? f.Buffer ? f._Buffer_allocUnsafe(e) : new f.Array(e) : f.Buffer ? f._Buffer_from(e) : typeof Uint8Array == "undefined" ? e : new Uint8Array(e);
      };
      f.Array = typeof Uint8Array != "undefined" ? Uint8Array : Array;
      f.Long = f.global.dcodeIO && f.global.dcodeIO.Long || f.global.Long || f.inquire("long");
      f.key2Re = /^true|false|0|1$/;
      f.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      f.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      f.longToHash = function(e) {
        return e ? f.LongBits.from(e).toHash() : f.LongBits.zeroHash;
      };
      f.longFromHash = function(e, t) {
        var n = f.LongBits.fromHash(e);
        return f.Long ? f.Long.fromBits(n.lo, n.hi, t) : n.toNumber(Boolean(t));
      };
      function gn(r, e, t) {
        for (var n = Object.keys(e), i = 0; i < n.length; ++i)
          (r[n[i]] === void 0 || !t) && (r[n[i]] = e[n[i]]);
        return r;
      }
      f.merge = gn;
      f.lcFirst = function(e) {
        return e.charAt(0).toLowerCase() + e.substring(1);
      };
      function wn(r) {
        function e(t, n) {
          if (!(this instanceof e))
            return new e(t, n);
          Object.defineProperty(this, "message", { get: function() {
            return t;
          } }), Error.captureStackTrace ? Error.captureStackTrace(this, e) : Object.defineProperty(this, "stack", { value: new Error().stack || "" }), n && gn(this, n);
        }
        return (e.prototype = Object.create(Error.prototype)).constructor = e, Object.defineProperty(e.prototype, "name", { get: function() {
          return r;
        } }), e.prototype.toString = function() {
          return this.name + ": " + this.message;
        }, e;
      }
      f.newError = wn;
      f.ProtocolError = wn("ProtocolError");
      f.oneOfGetter = function(e) {
        for (var t = {}, n = 0; n < e.length; ++n)
          t[e[n]] = 1;
        return function() {
          for (var i = Object.keys(this), s = i.length - 1; s > -1; --s)
            if (t[i[s]] === 1 && this[i[s]] !== void 0 && this[i[s]] !== null)
              return i[s];
        };
      };
      f.oneOfSetter = function(e) {
        return function(t) {
          for (var n = 0; n < e.length; ++n)
            e[n] !== t && delete this[e[n]];
        };
      };
      f.toJSONOptions = { longs: String, enums: String, bytes: String, json: true };
      f._configure = function() {
        var r = f.Buffer;
        if (!r) {
          f._Buffer_from = f._Buffer_allocUnsafe = null;
          return;
        }
        f._Buffer_from = r.from !== Uint8Array.from && r.from || function(t, n) {
          return new r(t, n);
        }, f._Buffer_allocUnsafe = r.allocUnsafe || function(t) {
          return new r(t);
        };
      };
    });
    Ot = h((J0, An) => {
      "use strict";
      An.exports = p;
      var q2 = ne3(), Dt, Qe = q2.LongBits, vn = q2.base64, Sn = q2.utf8;
      function Ce(r, e, t) {
        this.fn = r, this.len = e, this.next = void 0, this.val = t;
      }
      function jt() {
      }
      function Oo(r) {
        this.head = r.head, this.tail = r.tail, this.len = r.len, this.next = r.states;
      }
      function p() {
        this.len = 0, this.head = new Ce(jt, 0, 0), this.tail = this.head, this.states = null;
      }
      var En = function() {
        return q2.Buffer ? function() {
          return (p.create = function() {
            return new Dt();
          })();
        } : function() {
          return new p();
        };
      };
      p.create = En();
      p.alloc = function(e) {
        return new q2.Array(e);
      };
      q2.Array !== Array && (p.alloc = q2.pool(p.alloc, q2.Array.prototype.subarray));
      p.prototype._push = function(e, t, n) {
        return this.tail = this.tail.next = new Ce(e, t, n), this.len += t, this;
      };
      function Tt(r, e, t) {
        e[t] = r & 255;
      }
      function Bo(r, e, t) {
        for (; r > 127; )
          e[t++] = r & 127 | 128, r >>>= 7;
        e[t] = r;
      }
      function Ct(r, e) {
        this.len = r, this.next = void 0, this.val = e;
      }
      Ct.prototype = Object.create(Ce.prototype);
      Ct.prototype.fn = Bo;
      p.prototype.uint32 = function(e) {
        return this.len += (this.tail = this.tail.next = new Ct((e = e >>> 0) < 128 ? 1 : e < 16384 ? 2 : e < 2097152 ? 3 : e < 268435456 ? 4 : 5, e)).len, this;
      };
      p.prototype.int32 = function(e) {
        return e < 0 ? this._push(zt, 10, Qe.fromNumber(e)) : this.uint32(e);
      };
      p.prototype.sint32 = function(e) {
        return this.uint32((e << 1 ^ e >> 31) >>> 0);
      };
      function zt(r, e, t) {
        for (; r.hi; )
          e[t++] = r.lo & 127 | 128, r.lo = (r.lo >>> 7 | r.hi << 25) >>> 0, r.hi >>>= 7;
        for (; r.lo > 127; )
          e[t++] = r.lo & 127 | 128, r.lo = r.lo >>> 7;
        e[t++] = r.lo;
      }
      p.prototype.uint64 = function(e) {
        var t = Qe.from(e);
        return this._push(zt, t.length(), t);
      };
      p.prototype.int64 = p.prototype.uint64;
      p.prototype.sint64 = function(e) {
        var t = Qe.from(e).zzEncode();
        return this._push(zt, t.length(), t);
      };
      p.prototype.bool = function(e) {
        return this._push(Tt, 1, e ? 1 : 0);
      };
      function Nt(r, e, t) {
        e[t] = r & 255, e[t + 1] = r >>> 8 & 255, e[t + 2] = r >>> 16 & 255, e[t + 3] = r >>> 24;
      }
      p.prototype.fixed32 = function(e) {
        return this._push(Nt, 4, e >>> 0);
      };
      p.prototype.sfixed32 = p.prototype.fixed32;
      p.prototype.fixed64 = function(e) {
        var t = Qe.from(e);
        return this._push(Nt, 4, t.lo)._push(Nt, 4, t.hi);
      };
      p.prototype.sfixed64 = p.prototype.fixed64;
      p.prototype.float = function(e) {
        return this._push(q2.float.writeFloatLE, 4, e);
      };
      p.prototype.double = function(e) {
        return this._push(q2.float.writeDoubleLE, 8, e);
      };
      var _o = q2.Array.prototype.set ? function(e, t, n) {
        t.set(e, n);
      } : function(e, t, n) {
        for (var i = 0; i < e.length; ++i)
          t[n + i] = e[i];
      };
      p.prototype.bytes = function(e) {
        var t = e.length >>> 0;
        if (!t)
          return this._push(Tt, 1, 0);
        if (q2.isString(e)) {
          var n = p.alloc(t = vn.length(e));
          vn.decode(e, n, 0), e = n;
        }
        return this.uint32(t)._push(_o, t, e);
      };
      p.prototype.string = function(e) {
        var t = Sn.length(e);
        return t ? this.uint32(t)._push(Sn.write, t, e) : this._push(Tt, 1, 0);
      };
      p.prototype.fork = function() {
        return this.states = new Oo(this), this.head = this.tail = new Ce(jt, 0, 0), this.len = 0, this;
      };
      p.prototype.reset = function() {
        return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new Ce(jt, 0, 0), this.len = 0), this;
      };
      p.prototype.ldelim = function() {
        var e = this.head, t = this.tail, n = this.len;
        return this.reset().uint32(n), n && (this.tail.next = e.next, this.tail = t, this.len += n), this;
      };
      p.prototype.finish = function() {
        for (var e = this.head.next, t = this.constructor.alloc(this.len), n = 0; e; )
          e.fn(e.val, t, n), n += e.len, e = e.next;
        return t;
      };
      p._configure = function(r) {
        Dt = r, p.create = En(), Dt._configure();
      };
    });
    Tn = h((H0, jn) => {
      "use strict";
      jn.exports = W3;
      var Dn = Ot();
      (W3.prototype = Object.create(Dn.prototype)).constructor = W3;
      var ie3 = ne3();
      function W3() {
        Dn.call(this);
      }
      W3._configure = function() {
        W3.alloc = ie3._Buffer_allocUnsafe, W3.writeBytesBuffer = ie3.Buffer && ie3.Buffer.prototype instanceof Uint8Array && ie3.Buffer.prototype.set.name === "set" ? function(e, t, n) {
          t.set(e, n);
        } : function(e, t, n) {
          if (e.copy)
            e.copy(t, n, 0, e.length);
          else
            for (var i = 0; i < e.length; )
              t[n++] = e[i++];
        };
      };
      W3.prototype.bytes = function(e) {
        ie3.isString(e) && (e = ie3._Buffer_from(e, "base64"));
        var t = e.length >>> 0;
        return this.uint32(t), t && this._push(W3.writeBytesBuffer, t, e), this;
      };
      function Io(r, e, t) {
        r.length < 40 ? ie3.utf8.write(r, e, t) : e.utf8Write ? e.utf8Write(r, t) : e.write(r, t);
      }
      W3.prototype.string = function(e) {
        var t = ie3.Buffer.byteLength(e);
        return this.uint32(t), t && this._push(Io, t, e), this;
      };
      W3._configure();
    });
    It = h((W0, Bn) => {
      "use strict";
      Bn.exports = j3;
      var G3 = ne3(), Bt, Cn = G3.LongBits, Lo = G3.utf8;
      function P2(r, e) {
        return RangeError("index out of range: " + r.pos + " + " + (e || 1) + " > " + r.len);
      }
      function j3(r) {
        this.buf = r, this.pos = 0, this.len = r.length;
      }
      var zn = typeof Uint8Array != "undefined" ? function(e) {
        if (e instanceof Uint8Array || Array.isArray(e))
          return new j3(e);
        throw Error("illegal buffer");
      } : function(e) {
        if (Array.isArray(e))
          return new j3(e);
        throw Error("illegal buffer");
      }, Nn = function() {
        return G3.Buffer ? function(t) {
          return (j3.create = function(i) {
            return G3.Buffer.isBuffer(i) ? new Bt(i) : zn(i);
          })(t);
        } : zn;
      };
      j3.create = Nn();
      j3.prototype._slice = G3.Array.prototype.subarray || G3.Array.prototype.slice;
      j3.prototype.uint32 = function() {
        var e = 4294967295;
        return function() {
          if (e = (this.buf[this.pos] & 127) >>> 0, this.buf[this.pos++] < 128 || (e = (e | (this.buf[this.pos] & 127) << 7) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 127) << 14) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 127) << 21) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 15) << 28) >>> 0, this.buf[this.pos++] < 128))
            return e;
          if ((this.pos += 5) > this.len)
            throw this.pos = this.len, P2(this, 10);
          return e;
        };
      }();
      j3.prototype.int32 = function() {
        return this.uint32() | 0;
      };
      j3.prototype.sint32 = function() {
        var e = this.uint32();
        return e >>> 1 ^ -(e & 1) | 0;
      };
      function _t5() {
        var r = new Cn(0, 0), e = 0;
        if (this.len - this.pos > 4) {
          for (; e < 4; ++e)
            if (r.lo = (r.lo | (this.buf[this.pos] & 127) << e * 7) >>> 0, this.buf[this.pos++] < 128)
              return r;
          if (r.lo = (r.lo | (this.buf[this.pos] & 127) << 28) >>> 0, r.hi = (r.hi | (this.buf[this.pos] & 127) >> 4) >>> 0, this.buf[this.pos++] < 128)
            return r;
          e = 0;
        } else {
          for (; e < 3; ++e) {
            if (this.pos >= this.len)
              throw P2(this);
            if (r.lo = (r.lo | (this.buf[this.pos] & 127) << e * 7) >>> 0, this.buf[this.pos++] < 128)
              return r;
          }
          return r.lo = (r.lo | (this.buf[this.pos++] & 127) << e * 7) >>> 0, r;
        }
        if (this.len - this.pos > 4) {
          for (; e < 5; ++e)
            if (r.hi = (r.hi | (this.buf[this.pos] & 127) << e * 7 + 3) >>> 0, this.buf[this.pos++] < 128)
              return r;
        } else
          for (; e < 5; ++e) {
            if (this.pos >= this.len)
              throw P2(this);
            if (r.hi = (r.hi | (this.buf[this.pos] & 127) << e * 7 + 3) >>> 0, this.buf[this.pos++] < 128)
              return r;
          }
        throw Error("invalid varint encoding");
      }
      j3.prototype.bool = function() {
        return this.uint32() !== 0;
      };
      function Xe(r, e) {
        return (r[e - 4] | r[e - 3] << 8 | r[e - 2] << 16 | r[e - 1] << 24) >>> 0;
      }
      j3.prototype.fixed32 = function() {
        if (this.pos + 4 > this.len)
          throw P2(this, 4);
        return Xe(this.buf, this.pos += 4);
      };
      j3.prototype.sfixed32 = function() {
        if (this.pos + 4 > this.len)
          throw P2(this, 4);
        return Xe(this.buf, this.pos += 4) | 0;
      };
      function On() {
        if (this.pos + 8 > this.len)
          throw P2(this, 8);
        return new Cn(Xe(this.buf, this.pos += 4), Xe(this.buf, this.pos += 4));
      }
      j3.prototype.float = function() {
        if (this.pos + 4 > this.len)
          throw P2(this, 4);
        var e = G3.float.readFloatLE(this.buf, this.pos);
        return this.pos += 4, e;
      };
      j3.prototype.double = function() {
        if (this.pos + 8 > this.len)
          throw P2(this, 4);
        var e = G3.float.readDoubleLE(this.buf, this.pos);
        return this.pos += 8, e;
      };
      j3.prototype.bytes = function() {
        var e = this.uint32(), t = this.pos, n = this.pos + e;
        if (n > this.len)
          throw P2(this, e);
        return this.pos += e, Array.isArray(this.buf) ? this.buf.slice(t, n) : t === n ? new this.buf.constructor(0) : this._slice.call(this.buf, t, n);
      };
      j3.prototype.string = function() {
        var e = this.bytes();
        return Lo.read(e, 0, e.length);
      };
      j3.prototype.skip = function(e) {
        if (typeof e == "number") {
          if (this.pos + e > this.len)
            throw P2(this, e);
          this.pos += e;
        } else
          do
            if (this.pos >= this.len)
              throw P2(this);
          while (this.buf[this.pos++] & 128);
        return this;
      };
      j3.prototype.skipType = function(r) {
        switch (r) {
          case 0:
            this.skip();
            break;
          case 1:
            this.skip(8);
            break;
          case 2:
            this.skip(this.uint32());
            break;
          case 3:
            for (; (r = this.uint32() & 7) != 4; )
              this.skipType(r);
            break;
          case 5:
            this.skip(4);
            break;
          default:
            throw Error("invalid wire type " + r + " at offset " + this.pos);
        }
        return this;
      };
      j3._configure = function(r) {
        Bt = r, j3.create = Nn(), Bt._configure();
        var e = G3.Long ? "toLong" : "toNumber";
        G3.merge(j3.prototype, { int64: function() {
          return _t5.call(this)[e](false);
        }, uint64: function() {
          return _t5.call(this)[e](true);
        }, sint64: function() {
          return _t5.call(this).zzDecode()[e](false);
        }, fixed64: function() {
          return On.call(this)[e](true);
        }, sfixed64: function() {
          return On.call(this)[e](false);
        } });
      };
    });
    Mn = h((G0, Ln) => {
      "use strict";
      Ln.exports = ae2;
      var _n = It();
      (ae2.prototype = Object.create(_n.prototype)).constructor = ae2;
      var In = ne3();
      function ae2(r) {
        _n.call(this, r);
      }
      ae2._configure = function() {
        In.Buffer && (ae2.prototype._slice = In.Buffer.prototype.slice);
      };
      ae2.prototype.string = function() {
        var e = this.uint32();
        return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + e, this.len));
      };
      ae2._configure();
    });
    Fn = h((Q0, Un) => {
      "use strict";
      Un.exports = ze;
      var Lt = ne3();
      (ze.prototype = Object.create(Lt.EventEmitter.prototype)).constructor = ze;
      function ze(r, e, t) {
        if (typeof r != "function")
          throw TypeError("rpcImpl must be a function");
        Lt.EventEmitter.call(this), this.rpcImpl = r, this.requestDelimited = Boolean(e), this.responseDelimited = Boolean(t);
      }
      ze.prototype.rpcCall = function r(e, t, n, i, s) {
        if (!i)
          throw TypeError("request must be specified");
        var o2 = this;
        if (!s)
          return Lt.asPromise(r, o2, e, t, n, i);
        if (!o2.rpcImpl) {
          setTimeout(function() {
            s(Error("already ended"));
          }, 0);
          return;
        }
        try {
          return o2.rpcImpl(e, t[o2.requestDelimited ? "encodeDelimited" : "encode"](i).finish(), function(a2, c3) {
            if (a2)
              return o2.emit("error", a2, e), s(a2);
            if (c3 === null) {
              o2.end(true);
              return;
            }
            if (!(c3 instanceof n))
              try {
                c3 = n[o2.responseDelimited ? "decodeDelimited" : "decode"](c3);
              } catch (l) {
                return o2.emit("error", l, e), s(l);
              }
            return o2.emit("data", c3, e), s(null, c3);
          });
        } catch (b2) {
          o2.emit("error", b2, e), setTimeout(function() {
            s(b2);
          }, 0);
          return;
        }
      };
      ze.prototype.end = function(e) {
        return this.rpcImpl && (e || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
      };
    });
    Rn = h((qn) => {
      "use strict";
      var Mo = qn;
      Mo.Service = Fn();
    });
    Vn = h((K0, Pn) => {
      "use strict";
      Pn.exports = {};
    });
    Hn = h((Jn) => {
      "use strict";
      var U2 = Jn;
      U2.build = "minimal";
      U2.Writer = Ot();
      U2.BufferWriter = Tn();
      U2.Reader = It();
      U2.BufferReader = Mn();
      U2.util = ne3();
      U2.rpc = Rn();
      U2.roots = Vn();
      U2.configure = $n;
      function $n() {
        U2.util._configure(), U2.Writer._configure(U2.BufferWriter), U2.Reader._configure(U2.BufferReader);
      }
      $n();
    });
    Gn = h((Y0, Wn) => {
      "use strict";
      Wn.exports = Hn();
    });
    ei = h((S22, Yn) => {
      "use strict";
      function Ho(r) {
        if (r.length >= 255)
          throw new TypeError("Alphabet too long");
        for (var e = new Uint8Array(256), t = 0; t < e.length; t++)
          e[t] = 255;
        for (var n = 0; n < r.length; n++) {
          var i = r.charAt(n), s = i.charCodeAt(0);
          if (e[s] !== 255)
            throw new TypeError(i + " is ambiguous");
          e[s] = n;
        }
        var o2 = r.length, b2 = r.charAt(0), a2 = Math.log(o2) / Math.log(256), c3 = Math.log(256) / Math.log(o2);
        function l(k2) {
          if (k2 instanceof Uint8Array || (ArrayBuffer.isView(k2) ? k2 = new Uint8Array(k2.buffer, k2.byteOffset, k2.byteLength) : Array.isArray(k2) && (k2 = Uint8Array.from(k2))), !(k2 instanceof Uint8Array))
            throw new TypeError("Expected Uint8Array");
          if (k2.length === 0)
            return "";
          for (var d = 0, v = 0, C3 = 0, S3 = k2.length; C3 !== S3 && k2[C3] === 0; )
            C3++, d++;
          for (var A2 = (S3 - C3) * c3 + 1 >>> 0, y = new Uint8Array(A2); C3 !== S3; ) {
            for (var g = k2[C3], z = 0, T2 = A2 - 1; (g !== 0 || z < v) && T2 !== -1; T2--, z++)
              g += 256 * y[T2] >>> 0, y[T2] = g % o2 >>> 0, g = g / o2 >>> 0;
            if (g !== 0)
              throw new Error("Non-zero carry");
            v = z, C3++;
          }
          for (var D2 = A2 - v; D2 !== A2 && y[D2] === 0; )
            D2++;
          for (var L2 = b2.repeat(d); D2 < A2; ++D2)
            L2 += r.charAt(y[D2]);
          return L2;
        }
        function w3(k2) {
          if (typeof k2 != "string")
            throw new TypeError("Expected String");
          if (k2.length === 0)
            return new Uint8Array();
          var d = 0;
          if (k2[d] !== " ") {
            for (var v = 0, C3 = 0; k2[d] === b2; )
              v++, d++;
            for (var S3 = (k2.length - d) * a2 + 1 >>> 0, A2 = new Uint8Array(S3); k2[d]; ) {
              var y = e[k2.charCodeAt(d)];
              if (y === 255)
                return;
              for (var g = 0, z = S3 - 1; (y !== 0 || g < C3) && z !== -1; z--, g++)
                y += o2 * A2[z] >>> 0, A2[z] = y % 256 >>> 0, y = y / 256 >>> 0;
              if (y !== 0)
                throw new Error("Non-zero carry");
              C3 = g, d++;
            }
            if (k2[d] !== " ") {
              for (var T2 = S3 - C3; T2 !== S3 && A2[T2] === 0; )
                T2++;
              for (var D2 = new Uint8Array(v + (S3 - T2)), L2 = v; T2 !== S3; )
                D2[L2++] = A2[T2++];
              return D2;
            }
          }
        }
        function I2(k2) {
          var d = w3(k2);
          if (d)
            return d;
          throw new Error("Non-base" + o2 + " character");
        }
        return { encode: l, decodeUnsafe: w3, decode: I2 };
      }
      Yn.exports = Ho;
    });
    Ye = h((E22, ti) => {
      "use strict";
      var Wo = new TextDecoder(), Go = (r) => Wo.decode(r), Qo = new TextEncoder(), Xo = (r) => Qo.encode(r);
      function Ko(r, e) {
        let t = new Uint8Array(e), n = 0;
        for (let i of r)
          t.set(i, n), n += i.length;
        return t;
      }
      ti.exports = { decodeText: Go, encodeText: Xo, concat: Ko };
    });
    ii = h((A2, ni) => {
      "use strict";
      var { encodeText: Zo } = Ye(), ri = class {
        constructor(e, t, n, i) {
          this.name = e, this.code = t, this.codeBuf = Zo(this.code), this.alphabet = i, this.codec = n(i);
        }
        encode(e) {
          return this.codec.encode(e);
        }
        decode(e) {
          for (let t of e)
            if (this.alphabet && this.alphabet.indexOf(t) < 0)
              throw new Error(`invalid character '${t}' in '${e}'`);
          return this.codec.decode(e);
        }
      };
      ni.exports = ri;
    });
    oi = h((D2, si) => {
      "use strict";
      var Yo = (r, e, t) => {
        let n = {};
        for (let c3 = 0; c3 < e.length; ++c3)
          n[e[c3]] = c3;
        let i = r.length;
        for (; r[i - 1] === "="; )
          --i;
        let s = new Uint8Array(i * t / 8 | 0), o2 = 0, b2 = 0, a2 = 0;
        for (let c3 = 0; c3 < i; ++c3) {
          let l = n[r[c3]];
          if (l === void 0)
            throw new SyntaxError("Invalid character " + r[c3]);
          b2 = b2 << t | l, o2 += t, o2 >= 8 && (o2 -= 8, s[a2++] = 255 & b2 >> o2);
        }
        if (o2 >= t || 255 & b2 << 8 - o2)
          throw new SyntaxError("Unexpected end of data");
        return s;
      }, ea = (r, e, t) => {
        let n = e[e.length - 1] === "=", i = (1 << t) - 1, s = "", o2 = 0, b2 = 0;
        for (let a2 = 0; a2 < r.length; ++a2)
          for (b2 = b2 << 8 | r[a2], o2 += 8; o2 > t; )
            o2 -= t, s += e[i & b2 >> o2];
        if (o2 && (s += e[i & b2 << t - o2]), n)
          for (; s.length * t & 7; )
            s += "=";
        return s;
      }, ta = (r) => (e) => ({ encode(t) {
        return ea(t, e, r);
      }, decode(t) {
        return Yo(t, e, r);
      } });
      si.exports = { rfc4648: ta };
    });
    li = h((j22, bi) => {
      "use strict";
      var Oe = ei(), ra = ii(), { rfc4648: B2 } = oi(), { decodeText: na, encodeText: ia } = Ye(), sa = () => ({ encode: na, decode: ia }), ai = [["identity", "\0", sa, ""], ["base2", "0", B2(1), "01"], ["base8", "7", B2(3), "01234567"], ["base10", "9", Oe, "0123456789"], ["base16", "f", B2(4), "0123456789abcdef"], ["base16upper", "F", B2(4), "0123456789ABCDEF"], ["base32hex", "v", B2(5), "0123456789abcdefghijklmnopqrstuv"], ["base32hexupper", "V", B2(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV"], ["base32hexpad", "t", B2(5), "0123456789abcdefghijklmnopqrstuv="], ["base32hexpadupper", "T", B2(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV="], ["base32", "b", B2(5), "abcdefghijklmnopqrstuvwxyz234567"], ["base32upper", "B", B2(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"], ["base32pad", "c", B2(5), "abcdefghijklmnopqrstuvwxyz234567="], ["base32padupper", "C", B2(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567="], ["base32z", "h", B2(5), "ybndrfg8ejkmcpqxot1uwisza345h769"], ["base36", "k", Oe, "0123456789abcdefghijklmnopqrstuvwxyz"], ["base36upper", "K", Oe, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"], ["base58btc", "z", Oe, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"], ["base58flickr", "Z", Oe, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"], ["base64", "m", B2(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"], ["base64pad", "M", B2(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="], ["base64url", "u", B2(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"], ["base64urlpad", "U", B2(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]], ci = ai.reduce((r, e) => (r[e[0]] = new ra(e[0], e[1], e[2], e[3]), r), {}), oa = ai.reduce((r, e) => (r[e[1]] = ci[e[0]], r), {});
      bi.exports = { names: ci, codes: oa };
    });
    $t = h((Z2, ui) => {
      "use strict";
      var ge2 = li(), { encodeText: aa, decodeText: et, concat: fi } = Ye();
      function ca2(r, e) {
        if (!e)
          throw new Error("requires an encoded Uint8Array");
        let { name: t, codeBuf: n } = be2(r);
        return ua(t, e), fi([n, e], n.length + e.length);
      }
      function ba(r, e) {
        let t = be2(r), n = aa(t.encode(e));
        return fi([t.codeBuf, n], t.codeBuf.length + n.length);
      }
      function la(r) {
        r instanceof Uint8Array && (r = et(r));
        let e = r[0];
        return ["f", "F", "v", "V", "t", "T", "b", "B", "c", "C", "h", "k", "K"].includes(e) && (r = r.toLowerCase()), be2(r[0]).decode(r.substring(1));
      }
      function fa(r) {
        if (r instanceof Uint8Array && (r = et(r)), Object.prototype.toString.call(r) !== "[object String]")
          return false;
        try {
          return be2(r[0]).name;
        } catch (e) {
          return false;
        }
      }
      function ua(r, e) {
        be2(r).decode(et(e));
      }
      function be2(r) {
        if (Object.prototype.hasOwnProperty.call(ge2.names, r))
          return ge2.names[r];
        if (Object.prototype.hasOwnProperty.call(ge2.codes, r))
          return ge2.codes[r];
        throw new Error(`Unsupported encoding: ${r}`);
      }
      function ha(r) {
        return r instanceof Uint8Array && (r = et(r)), be2(r[0]);
      }
      Z2 = ui.exports = ca2;
      Z2.encode = ba;
      Z2.decode = la;
      Z2.isEncoded = fa;
      Z2.encoding = be2;
      Z2.encodingFromData = ha;
      var da = Object.freeze(ge2.names), pa = Object.freeze(ge2.codes);
      Z2.names = da;
      Z2.codes = pa;
    });
    xi = h((T2, pi) => {
      pi.exports = di;
      var hi = 128, xa = 127, ka = ~xa, ma = Math.pow(2, 31);
      function di(r, e, t) {
        e = e || [], t = t || 0;
        for (var n = t; r >= ma; )
          e[t++] = r & 255 | hi, r /= 128;
        for (; r & ka; )
          e[t++] = r & 255 | hi, r >>>= 7;
        return e[t] = r | 0, di.bytes = t - n + 1, e;
      }
    });
    yi = h((C22, mi) => {
      mi.exports = Jt;
      var ya = 128, ki = 127;
      function Jt(r, e) {
        var t = 0, e = e || 0, n = 0, i = e, s, o2 = r.length;
        do {
          if (i >= o2)
            throw Jt.bytes = 0, new RangeError("Could not decode varint");
          s = r[i++], t += n < 28 ? (s & ki) << n : (s & ki) * Math.pow(2, n), n += 7;
        } while (s >= ya);
        return Jt.bytes = i - e, t;
      }
    });
    wi = h((z2, gi) => {
      var ga = Math.pow(2, 7), wa = Math.pow(2, 14), va = Math.pow(2, 21), Sa = Math.pow(2, 28), Ea = Math.pow(2, 35), Aa = Math.pow(2, 42), Da = Math.pow(2, 49), ja = Math.pow(2, 56), Ta = Math.pow(2, 63);
      gi.exports = function(r) {
        return r < ga ? 1 : r < wa ? 2 : r < va ? 3 : r < Sa ? 4 : r < Ea ? 5 : r < Aa ? 6 : r < Da ? 7 : r < ja ? 8 : r < Ta ? 9 : 10;
      };
    });
    Si = h((N22, vi) => {
      vi.exports = { encode: xi(), decode: yi(), encodingLength: wi() };
    });
    Ai = h((O22, Ei) => {
      "use strict";
      var Ca = Object.freeze({ identity: 0, sha1: 17, "sha2-256": 18, "sha2-512": 19, "sha3-512": 20, "sha3-384": 21, "sha3-256": 22, "sha3-224": 23, "shake-128": 24, "shake-256": 25, "keccak-224": 26, "keccak-256": 27, "keccak-384": 28, "keccak-512": 29, blake3: 30, "murmur3-128": 34, "murmur3-32": 35, "dbl-sha2-256": 86, md4: 212, md5: 213, bmt: 214, "sha2-256-trunc254-padded": 4114, "ripemd-128": 4178, "ripemd-160": 4179, "ripemd-256": 4180, "ripemd-320": 4181, x11: 4352, kangarootwelve: 7425, "sm3-256": 21325, "blake2b-8": 45569, "blake2b-16": 45570, "blake2b-24": 45571, "blake2b-32": 45572, "blake2b-40": 45573, "blake2b-48": 45574, "blake2b-56": 45575, "blake2b-64": 45576, "blake2b-72": 45577, "blake2b-80": 45578, "blake2b-88": 45579, "blake2b-96": 45580, "blake2b-104": 45581, "blake2b-112": 45582, "blake2b-120": 45583, "blake2b-128": 45584, "blake2b-136": 45585, "blake2b-144": 45586, "blake2b-152": 45587, "blake2b-160": 45588, "blake2b-168": 45589, "blake2b-176": 45590, "blake2b-184": 45591, "blake2b-192": 45592, "blake2b-200": 45593, "blake2b-208": 45594, "blake2b-216": 45595, "blake2b-224": 45596, "blake2b-232": 45597, "blake2b-240": 45598, "blake2b-248": 45599, "blake2b-256": 45600, "blake2b-264": 45601, "blake2b-272": 45602, "blake2b-280": 45603, "blake2b-288": 45604, "blake2b-296": 45605, "blake2b-304": 45606, "blake2b-312": 45607, "blake2b-320": 45608, "blake2b-328": 45609, "blake2b-336": 45610, "blake2b-344": 45611, "blake2b-352": 45612, "blake2b-360": 45613, "blake2b-368": 45614, "blake2b-376": 45615, "blake2b-384": 45616, "blake2b-392": 45617, "blake2b-400": 45618, "blake2b-408": 45619, "blake2b-416": 45620, "blake2b-424": 45621, "blake2b-432": 45622, "blake2b-440": 45623, "blake2b-448": 45624, "blake2b-456": 45625, "blake2b-464": 45626, "blake2b-472": 45627, "blake2b-480": 45628, "blake2b-488": 45629, "blake2b-496": 45630, "blake2b-504": 45631, "blake2b-512": 45632, "blake2s-8": 45633, "blake2s-16": 45634, "blake2s-24": 45635, "blake2s-32": 45636, "blake2s-40": 45637, "blake2s-48": 45638, "blake2s-56": 45639, "blake2s-64": 45640, "blake2s-72": 45641, "blake2s-80": 45642, "blake2s-88": 45643, "blake2s-96": 45644, "blake2s-104": 45645, "blake2s-112": 45646, "blake2s-120": 45647, "blake2s-128": 45648, "blake2s-136": 45649, "blake2s-144": 45650, "blake2s-152": 45651, "blake2s-160": 45652, "blake2s-168": 45653, "blake2s-176": 45654, "blake2s-184": 45655, "blake2s-192": 45656, "blake2s-200": 45657, "blake2s-208": 45658, "blake2s-216": 45659, "blake2s-224": 45660, "blake2s-232": 45661, "blake2s-240": 45662, "blake2s-248": 45663, "blake2s-256": 45664, "skein256-8": 45825, "skein256-16": 45826, "skein256-24": 45827, "skein256-32": 45828, "skein256-40": 45829, "skein256-48": 45830, "skein256-56": 45831, "skein256-64": 45832, "skein256-72": 45833, "skein256-80": 45834, "skein256-88": 45835, "skein256-96": 45836, "skein256-104": 45837, "skein256-112": 45838, "skein256-120": 45839, "skein256-128": 45840, "skein256-136": 45841, "skein256-144": 45842, "skein256-152": 45843, "skein256-160": 45844, "skein256-168": 45845, "skein256-176": 45846, "skein256-184": 45847, "skein256-192": 45848, "skein256-200": 45849, "skein256-208": 45850, "skein256-216": 45851, "skein256-224": 45852, "skein256-232": 45853, "skein256-240": 45854, "skein256-248": 45855, "skein256-256": 45856, "skein512-8": 45857, "skein512-16": 45858, "skein512-24": 45859, "skein512-32": 45860, "skein512-40": 45861, "skein512-48": 45862, "skein512-56": 45863, "skein512-64": 45864, "skein512-72": 45865, "skein512-80": 45866, "skein512-88": 45867, "skein512-96": 45868, "skein512-104": 45869, "skein512-112": 45870, "skein512-120": 45871, "skein512-128": 45872, "skein512-136": 45873, "skein512-144": 45874, "skein512-152": 45875, "skein512-160": 45876, "skein512-168": 45877, "skein512-176": 45878, "skein512-184": 45879, "skein512-192": 45880, "skein512-200": 45881, "skein512-208": 45882, "skein512-216": 45883, "skein512-224": 45884, "skein512-232": 45885, "skein512-240": 45886, "skein512-248": 45887, "skein512-256": 45888, "skein512-264": 45889, "skein512-272": 45890, "skein512-280": 45891, "skein512-288": 45892, "skein512-296": 45893, "skein512-304": 45894, "skein512-312": 45895, "skein512-320": 45896, "skein512-328": 45897, "skein512-336": 45898, "skein512-344": 45899, "skein512-352": 45900, "skein512-360": 45901, "skein512-368": 45902, "skein512-376": 45903, "skein512-384": 45904, "skein512-392": 45905, "skein512-400": 45906, "skein512-408": 45907, "skein512-416": 45908, "skein512-424": 45909, "skein512-432": 45910, "skein512-440": 45911, "skein512-448": 45912, "skein512-456": 45913, "skein512-464": 45914, "skein512-472": 45915, "skein512-480": 45916, "skein512-488": 45917, "skein512-496": 45918, "skein512-504": 45919, "skein512-512": 45920, "skein1024-8": 45921, "skein1024-16": 45922, "skein1024-24": 45923, "skein1024-32": 45924, "skein1024-40": 45925, "skein1024-48": 45926, "skein1024-56": 45927, "skein1024-64": 45928, "skein1024-72": 45929, "skein1024-80": 45930, "skein1024-88": 45931, "skein1024-96": 45932, "skein1024-104": 45933, "skein1024-112": 45934, "skein1024-120": 45935, "skein1024-128": 45936, "skein1024-136": 45937, "skein1024-144": 45938, "skein1024-152": 45939, "skein1024-160": 45940, "skein1024-168": 45941, "skein1024-176": 45942, "skein1024-184": 45943, "skein1024-192": 45944, "skein1024-200": 45945, "skein1024-208": 45946, "skein1024-216": 45947, "skein1024-224": 45948, "skein1024-232": 45949, "skein1024-240": 45950, "skein1024-248": 45951, "skein1024-256": 45952, "skein1024-264": 45953, "skein1024-272": 45954, "skein1024-280": 45955, "skein1024-288": 45956, "skein1024-296": 45957, "skein1024-304": 45958, "skein1024-312": 45959, "skein1024-320": 45960, "skein1024-328": 45961, "skein1024-336": 45962, "skein1024-344": 45963, "skein1024-352": 45964, "skein1024-360": 45965, "skein1024-368": 45966, "skein1024-376": 45967, "skein1024-384": 45968, "skein1024-392": 45969, "skein1024-400": 45970, "skein1024-408": 45971, "skein1024-416": 45972, "skein1024-424": 45973, "skein1024-432": 45974, "skein1024-440": 45975, "skein1024-448": 45976, "skein1024-456": 45977, "skein1024-464": 45978, "skein1024-472": 45979, "skein1024-480": 45980, "skein1024-488": 45981, "skein1024-496": 45982, "skein1024-504": 45983, "skein1024-512": 45984, "skein1024-520": 45985, "skein1024-528": 45986, "skein1024-536": 45987, "skein1024-544": 45988, "skein1024-552": 45989, "skein1024-560": 45990, "skein1024-568": 45991, "skein1024-576": 45992, "skein1024-584": 45993, "skein1024-592": 45994, "skein1024-600": 45995, "skein1024-608": 45996, "skein1024-616": 45997, "skein1024-624": 45998, "skein1024-632": 45999, "skein1024-640": 46e3, "skein1024-648": 46001, "skein1024-656": 46002, "skein1024-664": 46003, "skein1024-672": 46004, "skein1024-680": 46005, "skein1024-688": 46006, "skein1024-696": 46007, "skein1024-704": 46008, "skein1024-712": 46009, "skein1024-720": 46010, "skein1024-728": 46011, "skein1024-736": 46012, "skein1024-744": 46013, "skein1024-752": 46014, "skein1024-760": 46015, "skein1024-768": 46016, "skein1024-776": 46017, "skein1024-784": 46018, "skein1024-792": 46019, "skein1024-800": 46020, "skein1024-808": 46021, "skein1024-816": 46022, "skein1024-824": 46023, "skein1024-832": 46024, "skein1024-840": 46025, "skein1024-848": 46026, "skein1024-856": 46027, "skein1024-864": 46028, "skein1024-872": 46029, "skein1024-880": 46030, "skein1024-888": 46031, "skein1024-896": 46032, "skein1024-904": 46033, "skein1024-912": 46034, "skein1024-920": 46035, "skein1024-928": 46036, "skein1024-936": 46037, "skein1024-944": 46038, "skein1024-952": 46039, "skein1024-960": 46040, "skein1024-968": 46041, "skein1024-976": 46042, "skein1024-984": 46043, "skein1024-992": 46044, "skein1024-1000": 46045, "skein1024-1008": 46046, "skein1024-1016": 46047, "skein1024-1024": 46048, "poseidon-bls12_381-a2-fc1": 46081, "poseidon-bls12_381-a2-fc1-sc": 46082 });
      Ei.exports = { names: Ca };
    });
    Ht = {};
    _3(Ht, { identity: () => za });
    Di = x2(() => {
      $3();
      ee2();
      za = Ve({ prefix: "\0", name: "identity", encode: (r) => Nr(r), decode: (r) => zr(r) });
    });
    Wt = {};
    _3(Wt, { base2: () => Na });
    ji = x2(() => {
      $3();
      Na = E2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
    });
    Gt = {};
    _3(Gt, { base8: () => Oa });
    Ti = x2(() => {
      $3();
      Oa = E2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
    });
    Qt = {};
    _3(Qt, { base10: () => Ba });
    Ci = x2(() => {
      $3();
      Ba = te2({ prefix: "9", name: "base10", alphabet: "0123456789" });
    });
    Xt = {};
    _3(Xt, { base16: () => _a, base16upper: () => Ia });
    zi = x2(() => {
      $3();
      _a = E2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 }), Ia = E2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
    });
    Kt = {};
    _3(Kt, { base36: () => La, base36upper: () => Ma });
    Ni = x2(() => {
      $3();
      La = te2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" }), Ma = te2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
    });
    Zt = {};
    _3(Zt, { base64: () => Ua, base64pad: () => Fa, base64url: () => qa, base64urlpad: () => Ra });
    Oi = x2(() => {
      $3();
      Ua = E2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 }), Fa = E2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 }), qa = E2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 }), Ra = E2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
    });
    tt = x2(() => {
      Re();
      Be = ({ name: r, code: e, encode: t }) => new Bi(r, e, t), Bi = class {
        constructor(e, t, n) {
          this.name = e, this.code = t, this.encode = n;
        }
        async digest(e) {
          if (e instanceof Uint8Array) {
            let t = await this.encode(e);
            return qe(this.code, t);
          } else
            throw Error("Unknown type, must be binary type");
        }
      };
    });
    Yt = {};
    _3(Yt, { sha256: () => Pa, sha512: () => Va });
    Li = x2(() => {
      tt();
      Ii = (r) => async (e) => new Uint8Array(await crypto.subtle.digest(r, e)), Pa = Be({ name: "sha2-256", code: 18, encode: Ii("SHA-256") }), Va = Be({ name: "sha2-512", code: 19, encode: Ii("SHA-512") });
    });
    er = {};
    _3(er, { identity: () => $a });
    Mi = x2(() => {
      tt();
      ee2();
      $a = Be({ name: "identity", code: 0, encode: (r) => X3(r) });
    });
    Ui = x2(() => {
      ee2();
    });
    Fi = x2(() => {
      H22 = new TextEncoder(), W2 = new TextDecoder();
    });
    qi = x2(() => {
      pe2();
      Fe();
      ee2();
      tt();
      Re();
    });
    Ri = x2(() => {
      Di();
      ji();
      Ti();
      Ci();
      zi();
      wt();
      Ni();
      yt();
      Oi();
      Li();
      Mi();
      Ui();
      Fi();
      qi();
      tr = { ...Ht, ...Wt, ...Gt, ...Qt, ...Xt, ...gt, ...Kt, ...mt, ...Zt }, K22 = { ...Yt, ...er };
    });
    nr = x2(() => {
      Ri();
      Vi = Pi("utf8", "u", (r) => {
        let e = new TextDecoder("utf8");
        return "u" + e.decode(r);
      }, (r) => new TextEncoder().encode(r.substring(1))), rr = Pi("ascii", "a", (r) => {
        let e = "a";
        for (let t = 0; t < r.length; t++)
          e += String.fromCharCode(r[t]);
        return e;
      }, (r) => {
        r = r.substring(1);
        let e = new Uint8Array(r.length);
        for (let t = 0; t < r.length; t++)
          e[t] = r.charCodeAt(t);
        return e;
      }), Wa = { utf8: Vi, "utf-8": Vi, hex: tr.base16, latin1: rr, ascii: rr, binary: rr, ...tr }, rt = Wa;
    });
    nt = {};
    _3(nt, { toString: () => ir });
    _e2 = x2(() => {
      nr();
    });
    or = {};
    _3(or, { fromString: () => sr });
    it = x2(() => {
      nr();
    });
    st = {};
    _3(st, { concat: () => ar });
    Ie = x2(() => {
    });
    br = h((nb, Qi) => {
      "use strict";
      var $i = $t(), we = Si(), { names: Le } = Ai(), { toString: ot } = (_e2(), nt), { fromString: Ga } = (it(), or), { concat: Qa } = (Ie(), st), ve2 = {};
      for (let r in Le) {
        let e = r;
        ve2[Le[e]] = e;
      }
      Object.freeze(ve2);
      function Xa(r) {
        if (!(r instanceof Uint8Array))
          throw new Error("must be passed a Uint8Array");
        return ot(r, "base16");
      }
      function Ka(r) {
        return Ga(r, "base16");
      }
      function Za(r) {
        if (!(r instanceof Uint8Array))
          throw new Error("must be passed a Uint8Array");
        return ot($i.encode("base58btc", r)).slice(1);
      }
      function Ya(r) {
        let e = r instanceof Uint8Array ? ot(r) : r;
        return $i.decode("z" + e);
      }
      function Ji(r) {
        if (!(r instanceof Uint8Array))
          throw new Error("multihash must be a Uint8Array");
        if (r.length < 2)
          throw new Error("multihash too short. must be > 2 bytes.");
        let e = we.decode(r);
        if (!Wi(e))
          throw new Error(`multihash unknown function code: 0x${e.toString(16)}`);
        r = r.slice(we.decode.bytes);
        let t = we.decode(r);
        if (t < 0)
          throw new Error(`multihash invalid length: ${t}`);
        if (r = r.slice(we.decode.bytes), r.length !== t)
          throw new Error(`multihash length inconsistent: 0x${ot(r, "base16")}`);
        return { code: e, name: ve2[e], length: t, digest: r };
      }
      function ec(r, e, t) {
        if (!r || e === void 0)
          throw new Error("multihash encode requires at least two args: digest, code");
        let n = Hi(e);
        if (!(r instanceof Uint8Array))
          throw new Error("digest should be a Uint8Array");
        if (t == null && (t = r.length), t && r.length !== t)
          throw new Error("digest length should be equal to specified length.");
        let i = we.encode(n), s = we.encode(t);
        return Qa([i, s, r], i.length + s.length + r.length);
      }
      function Hi(r) {
        let e = r;
        if (typeof r == "string") {
          if (Le[r] === void 0)
            throw new Error(`Unrecognized hash function named: ${r}`);
          e = Le[r];
        }
        if (typeof e != "number")
          throw new Error(`Hash function code should be a number. Got: ${e}`);
        if (ve2[e] === void 0 && !cr(e))
          throw new Error(`Unrecognized function code: ${e}`);
        return e;
      }
      function cr(r) {
        return r > 0 && r < 16;
      }
      function Wi(r) {
        return !!(cr(r) || ve2[r]);
      }
      function Gi(r) {
        Ji(r);
      }
      function tc(r) {
        return Gi(r), r.subarray(0, 2);
      }
      Qi.exports = { names: Le, codes: ve2, toHexString: Xa, fromHexString: Ka, toB58String: Za, fromB58String: Ya, decode: Ji, encode: ec, coerceCode: Hi, isAppCode: cr, validate: Gi, prefix: tc, isValidCode: Wi };
    });
    Zi = h((ib, Ki) => {
      Ki.exports = lr;
      var Xi = 128, rc = 127, nc = ~rc, ic = Math.pow(2, 31);
      function lr(r, e, t) {
        if (Number.MAX_SAFE_INTEGER && r > Number.MAX_SAFE_INTEGER)
          throw lr.bytes = 0, new RangeError("Could not encode varint");
        e = e || [], t = t || 0;
        for (var n = t; r >= ic; )
          e[t++] = r & 255 | Xi, r /= 128;
        for (; r & nc; )
          e[t++] = r & 255 | Xi, r >>>= 7;
        return e[t] = r | 0, lr.bytes = t - n + 1, e;
      }
    });
    ts = h((sb, es) => {
      es.exports = fr;
      var sc = 128, Yi = 127;
      function fr(r, e) {
        var t = 0, e = e || 0, n = 0, i = e, s, o2 = r.length;
        do {
          if (i >= o2 || n > 49)
            throw fr.bytes = 0, new RangeError("Could not decode varint");
          s = r[i++], t += n < 28 ? (s & Yi) << n : (s & Yi) * Math.pow(2, n), n += 7;
        } while (s >= sc);
        return fr.bytes = i - e, t;
      }
    });
    ns = h((ob, rs) => {
      var oc = Math.pow(2, 7), ac = Math.pow(2, 14), cc2 = Math.pow(2, 21), bc = Math.pow(2, 28), lc = Math.pow(2, 35), fc = Math.pow(2, 42), uc = Math.pow(2, 49), hc = Math.pow(2, 56), dc = Math.pow(2, 63);
      rs.exports = function(r) {
        return r < oc ? 1 : r < ac ? 2 : r < cc2 ? 3 : r < bc ? 4 : r < lc ? 5 : r < fc ? 6 : r < uc ? 7 : r < hc ? 8 : r < dc ? 9 : 10;
      };
    });
    ur = h((ab, is) => {
      is.exports = { encode: Zi(), decode: ts(), encodingLength: ns() };
    });
    hr = h((cb2, as) => {
      "use strict";
      var ss = ur(), { toString: pc } = (_e2(), nt), { fromString: xc } = (it(), or);
      as.exports = { numberToUint8Array: kc, uint8ArrayToNumber: os, varintUint8ArrayEncode: mc, varintEncode: yc };
      function os(r) {
        return parseInt(pc(r, "base16"), 16);
      }
      function kc(r) {
        let e = r.toString(16);
        return e.length % 2 == 1 && (e = "0" + e), xc(e, "base16");
      }
      function mc(r) {
        return Uint8Array.from(ss.encode(os(r)));
      }
      function yc(r) {
        return Uint8Array.from(ss.encode(r));
      }
    });
    bs = h((bb, cs) => {
      "use strict";
      var gc = Object.freeze({ identity: 0, cidv1: 1, cidv2: 2, cidv3: 3, ip4: 4, tcp: 6, sha1: 17, "sha2-256": 18, "sha2-512": 19, "sha3-512": 20, "sha3-384": 21, "sha3-256": 22, "sha3-224": 23, "shake-128": 24, "shake-256": 25, "keccak-224": 26, "keccak-256": 27, "keccak-384": 28, "keccak-512": 29, blake3: 30, dccp: 33, "murmur3-128": 34, "murmur3-32": 35, ip6: 41, ip6zone: 42, path: 47, multicodec: 48, multihash: 49, multiaddr: 50, multibase: 51, dns: 53, dns4: 54, dns6: 55, dnsaddr: 56, protobuf: 80, cbor: 81, raw: 85, "dbl-sha2-256": 86, rlp: 96, bencode: 99, "dag-pb": 112, "dag-cbor": 113, "libp2p-key": 114, "git-raw": 120, "torrent-info": 123, "torrent-file": 124, "leofcoin-block": 129, "leofcoin-tx": 130, "leofcoin-pr": 131, sctp: 132, "dag-jose": 133, "dag-cose": 134, "eth-block": 144, "eth-block-list": 145, "eth-tx-trie": 146, "eth-tx": 147, "eth-tx-receipt-trie": 148, "eth-tx-receipt": 149, "eth-state-trie": 150, "eth-account-snapshot": 151, "eth-storage-trie": 152, "eth-receipt-log-trie": 153, "eth-reciept-log": 154, "bitcoin-block": 176, "bitcoin-tx": 177, "bitcoin-witness-commitment": 178, "zcash-block": 192, "zcash-tx": 193, "caip-50": 202, streamid: 206, "stellar-block": 208, "stellar-tx": 209, md4: 212, md5: 213, bmt: 214, "decred-block": 224, "decred-tx": 225, "ipld-ns": 226, "ipfs-ns": 227, "swarm-ns": 228, "ipns-ns": 229, zeronet: 230, "secp256k1-pub": 231, "bls12_381-g1-pub": 234, "bls12_381-g2-pub": 235, "x25519-pub": 236, "ed25519-pub": 237, "bls12_381-g1g2-pub": 238, "dash-block": 240, "dash-tx": 241, "swarm-manifest": 250, "swarm-feed": 251, udp: 273, "p2p-webrtc-star": 275, "p2p-webrtc-direct": 276, "p2p-stardust": 277, "p2p-circuit": 290, "dag-json": 297, udt: 301, utp: 302, unix: 400, thread: 406, p2p: 421, ipfs: 421, https: 443, onion: 444, onion3: 445, garlic64: 446, garlic32: 447, tls: 448, noise: 454, quic: 460, ws: 477, wss: 478, "p2p-websocket-star": 479, http: 480, "swhid-1-snp": 496, json: 512, messagepack: 513, "libp2p-peer-record": 769, "libp2p-relay-rsvp": 770, "car-index-sorted": 1024, "sha2-256-trunc254-padded": 4114, "ripemd-128": 4178, "ripemd-160": 4179, "ripemd-256": 4180, "ripemd-320": 4181, x11: 4352, "p256-pub": 4608, "p384-pub": 4609, "p521-pub": 4610, "ed448-pub": 4611, "x448-pub": 4612, "ed25519-priv": 4864, "secp256k1-priv": 4865, "x25519-priv": 4866, kangarootwelve: 7425, "sm3-256": 21325, "blake2b-8": 45569, "blake2b-16": 45570, "blake2b-24": 45571, "blake2b-32": 45572, "blake2b-40": 45573, "blake2b-48": 45574, "blake2b-56": 45575, "blake2b-64": 45576, "blake2b-72": 45577, "blake2b-80": 45578, "blake2b-88": 45579, "blake2b-96": 45580, "blake2b-104": 45581, "blake2b-112": 45582, "blake2b-120": 45583, "blake2b-128": 45584, "blake2b-136": 45585, "blake2b-144": 45586, "blake2b-152": 45587, "blake2b-160": 45588, "blake2b-168": 45589, "blake2b-176": 45590, "blake2b-184": 45591, "blake2b-192": 45592, "blake2b-200": 45593, "blake2b-208": 45594, "blake2b-216": 45595, "blake2b-224": 45596, "blake2b-232": 45597, "blake2b-240": 45598, "blake2b-248": 45599, "blake2b-256": 45600, "blake2b-264": 45601, "blake2b-272": 45602, "blake2b-280": 45603, "blake2b-288": 45604, "blake2b-296": 45605, "blake2b-304": 45606, "blake2b-312": 45607, "blake2b-320": 45608, "blake2b-328": 45609, "blake2b-336": 45610, "blake2b-344": 45611, "blake2b-352": 45612, "blake2b-360": 45613, "blake2b-368": 45614, "blake2b-376": 45615, "blake2b-384": 45616, "blake2b-392": 45617, "blake2b-400": 45618, "blake2b-408": 45619, "blake2b-416": 45620, "blake2b-424": 45621, "blake2b-432": 45622, "blake2b-440": 45623, "blake2b-448": 45624, "blake2b-456": 45625, "blake2b-464": 45626, "blake2b-472": 45627, "blake2b-480": 45628, "blake2b-488": 45629, "blake2b-496": 45630, "blake2b-504": 45631, "blake2b-512": 45632, "blake2s-8": 45633, "blake2s-16": 45634, "blake2s-24": 45635, "blake2s-32": 45636, "blake2s-40": 45637, "blake2s-48": 45638, "blake2s-56": 45639, "blake2s-64": 45640, "blake2s-72": 45641, "blake2s-80": 45642, "blake2s-88": 45643, "blake2s-96": 45644, "blake2s-104": 45645, "blake2s-112": 45646, "blake2s-120": 45647, "blake2s-128": 45648, "blake2s-136": 45649, "blake2s-144": 45650, "blake2s-152": 45651, "blake2s-160": 45652, "blake2s-168": 45653, "blake2s-176": 45654, "blake2s-184": 45655, "blake2s-192": 45656, "blake2s-200": 45657, "blake2s-208": 45658, "blake2s-216": 45659, "blake2s-224": 45660, "blake2s-232": 45661, "blake2s-240": 45662, "blake2s-248": 45663, "blake2s-256": 45664, "skein256-8": 45825, "skein256-16": 45826, "skein256-24": 45827, "skein256-32": 45828, "skein256-40": 45829, "skein256-48": 45830, "skein256-56": 45831, "skein256-64": 45832, "skein256-72": 45833, "skein256-80": 45834, "skein256-88": 45835, "skein256-96": 45836, "skein256-104": 45837, "skein256-112": 45838, "skein256-120": 45839, "skein256-128": 45840, "skein256-136": 45841, "skein256-144": 45842, "skein256-152": 45843, "skein256-160": 45844, "skein256-168": 45845, "skein256-176": 45846, "skein256-184": 45847, "skein256-192": 45848, "skein256-200": 45849, "skein256-208": 45850, "skein256-216": 45851, "skein256-224": 45852, "skein256-232": 45853, "skein256-240": 45854, "skein256-248": 45855, "skein256-256": 45856, "skein512-8": 45857, "skein512-16": 45858, "skein512-24": 45859, "skein512-32": 45860, "skein512-40": 45861, "skein512-48": 45862, "skein512-56": 45863, "skein512-64": 45864, "skein512-72": 45865, "skein512-80": 45866, "skein512-88": 45867, "skein512-96": 45868, "skein512-104": 45869, "skein512-112": 45870, "skein512-120": 45871, "skein512-128": 45872, "skein512-136": 45873, "skein512-144": 45874, "skein512-152": 45875, "skein512-160": 45876, "skein512-168": 45877, "skein512-176": 45878, "skein512-184": 45879, "skein512-192": 45880, "skein512-200": 45881, "skein512-208": 45882, "skein512-216": 45883, "skein512-224": 45884, "skein512-232": 45885, "skein512-240": 45886, "skein512-248": 45887, "skein512-256": 45888, "skein512-264": 45889, "skein512-272": 45890, "skein512-280": 45891, "skein512-288": 45892, "skein512-296": 45893, "skein512-304": 45894, "skein512-312": 45895, "skein512-320": 45896, "skein512-328": 45897, "skein512-336": 45898, "skein512-344": 45899, "skein512-352": 45900, "skein512-360": 45901, "skein512-368": 45902, "skein512-376": 45903, "skein512-384": 45904, "skein512-392": 45905, "skein512-400": 45906, "skein512-408": 45907, "skein512-416": 45908, "skein512-424": 45909, "skein512-432": 45910, "skein512-440": 45911, "skein512-448": 45912, "skein512-456": 45913, "skein512-464": 45914, "skein512-472": 45915, "skein512-480": 45916, "skein512-488": 45917, "skein512-496": 45918, "skein512-504": 45919, "skein512-512": 45920, "skein1024-8": 45921, "skein1024-16": 45922, "skein1024-24": 45923, "skein1024-32": 45924, "skein1024-40": 45925, "skein1024-48": 45926, "skein1024-56": 45927, "skein1024-64": 45928, "skein1024-72": 45929, "skein1024-80": 45930, "skein1024-88": 45931, "skein1024-96": 45932, "skein1024-104": 45933, "skein1024-112": 45934, "skein1024-120": 45935, "skein1024-128": 45936, "skein1024-136": 45937, "skein1024-144": 45938, "skein1024-152": 45939, "skein1024-160": 45940, "skein1024-168": 45941, "skein1024-176": 45942, "skein1024-184": 45943, "skein1024-192": 45944, "skein1024-200": 45945, "skein1024-208": 45946, "skein1024-216": 45947, "skein1024-224": 45948, "skein1024-232": 45949, "skein1024-240": 45950, "skein1024-248": 45951, "skein1024-256": 45952, "skein1024-264": 45953, "skein1024-272": 45954, "skein1024-280": 45955, "skein1024-288": 45956, "skein1024-296": 45957, "skein1024-304": 45958, "skein1024-312": 45959, "skein1024-320": 45960, "skein1024-328": 45961, "skein1024-336": 45962, "skein1024-344": 45963, "skein1024-352": 45964, "skein1024-360": 45965, "skein1024-368": 45966, "skein1024-376": 45967, "skein1024-384": 45968, "skein1024-392": 45969, "skein1024-400": 45970, "skein1024-408": 45971, "skein1024-416": 45972, "skein1024-424": 45973, "skein1024-432": 45974, "skein1024-440": 45975, "skein1024-448": 45976, "skein1024-456": 45977, "skein1024-464": 45978, "skein1024-472": 45979, "skein1024-480": 45980, "skein1024-488": 45981, "skein1024-496": 45982, "skein1024-504": 45983, "skein1024-512": 45984, "skein1024-520": 45985, "skein1024-528": 45986, "skein1024-536": 45987, "skein1024-544": 45988, "skein1024-552": 45989, "skein1024-560": 45990, "skein1024-568": 45991, "skein1024-576": 45992, "skein1024-584": 45993, "skein1024-592": 45994, "skein1024-600": 45995, "skein1024-608": 45996, "skein1024-616": 45997, "skein1024-624": 45998, "skein1024-632": 45999, "skein1024-640": 46e3, "skein1024-648": 46001, "skein1024-656": 46002, "skein1024-664": 46003, "skein1024-672": 46004, "skein1024-680": 46005, "skein1024-688": 46006, "skein1024-696": 46007, "skein1024-704": 46008, "skein1024-712": 46009, "skein1024-720": 46010, "skein1024-728": 46011, "skein1024-736": 46012, "skein1024-744": 46013, "skein1024-752": 46014, "skein1024-760": 46015, "skein1024-768": 46016, "skein1024-776": 46017, "skein1024-784": 46018, "skein1024-792": 46019, "skein1024-800": 46020, "skein1024-808": 46021, "skein1024-816": 46022, "skein1024-824": 46023, "skein1024-832": 46024, "skein1024-840": 46025, "skein1024-848": 46026, "skein1024-856": 46027, "skein1024-864": 46028, "skein1024-872": 46029, "skein1024-880": 46030, "skein1024-888": 46031, "skein1024-896": 46032, "skein1024-904": 46033, "skein1024-912": 46034, "skein1024-920": 46035, "skein1024-928": 46036, "skein1024-936": 46037, "skein1024-944": 46038, "skein1024-952": 46039, "skein1024-960": 46040, "skein1024-968": 46041, "skein1024-976": 46042, "skein1024-984": 46043, "skein1024-992": 46044, "skein1024-1000": 46045, "skein1024-1008": 46046, "skein1024-1016": 46047, "skein1024-1024": 46048, "poseidon-bls12_381-a2-fc1": 46081, "poseidon-bls12_381-a2-fc1-sc": 46082, "zeroxcert-imprint-256": 52753, "fil-commitment-unsealed": 61697, "fil-commitment-sealed": 61698, "holochain-adr-v0": 8417572, "holochain-adr-v1": 8483108, "holochain-key-v0": 9728292, "holochain-key-v1": 9793828, "holochain-sig-v0": 10645796, "holochain-sig-v1": 10711332, "skynet-ns": 11639056, "arweave-ns": 11704592 });
      cs.exports = { baseTable: gc };
    });
    fs = h((lb, ls) => {
      "use strict";
      var { baseTable: dr } = bs(), wc = hr().varintEncode, pr = {}, xr = {}, at = {};
      for (let r in dr) {
        let e = r, t = dr[e];
        pr[e] = wc(t);
        let n = e.toUpperCase().replace(/-/g, "_");
        xr[n] = t, at[t] || (at[t] = e);
      }
      Object.freeze(pr);
      Object.freeze(xr);
      Object.freeze(at);
      var vc = Object.freeze(dr);
      ls.exports = { nameToVarint: pr, constantToCode: xr, nameToCode: vc, codeToName: at };
    });
    ws = h((fb, gs) => {
      "use strict";
      var ct = ur(), { concat: Sc } = (Ie(), st), us = hr(), { nameToVarint: bt, constantToCode: Ec, nameToCode: hs, codeToName: kr } = fs();
      function Ac(r, e) {
        let t;
        if (r instanceof Uint8Array)
          t = us.varintUint8ArrayEncode(r);
        else if (bt[r])
          t = bt[r];
        else
          throw new Error("multicodec not recognized");
        return Sc([t, e], t.length + e.length);
      }
      function Dc(r) {
        return ct.decode(r), r.slice(ct.decode.bytes);
      }
      function ds(r) {
        let e = ct.decode(r), t = kr[e];
        if (t === void 0)
          throw new Error(`Code "${e}" not found`);
        return t;
      }
      function ps(r) {
        return kr[r];
      }
      function xs(r) {
        let e = hs[r];
        if (e === void 0)
          throw new Error(`Codec "${r}" not found`);
        return e;
      }
      function ks(r) {
        return ct.decode(r);
      }
      function ms(r) {
        let e = bt[r];
        if (e === void 0)
          throw new Error(`Codec "${r}" not found`);
        return e;
      }
      function ys(r) {
        return us.varintEncode(r);
      }
      function jc(r) {
        return ds(r);
      }
      function Tc(r) {
        return ps(r);
      }
      function Cc(r) {
        return xs(r);
      }
      function zc(r) {
        return ks(r);
      }
      function Nc(r) {
        return ms(r);
      }
      function Oc(r) {
        return Array.from(ys(r));
      }
      gs.exports = { addPrefix: Ac, rmPrefix: Dc, getNameFromData: ds, getNameFromCode: ps, getCodeFromName: xs, getCodeFromData: ks, getVarintFromName: ms, getVarintFromCode: ys, getCodec: jc, getName: Tc, getNumber: Cc, getCode: zc, getCodeVarint: Nc, getVarint: Oc, ...Ec, nameToVarint: bt, nameToCode: hs, codeToName: kr };
    });
    Ss = h((ub, vs) => {
      "use strict";
      var Bc = br(), _c = { checkCIDComponents: function(r) {
        if (r == null)
          return "null values are not valid CIDs";
        if (!(r.version === 0 || r.version === 1))
          return "Invalid version, must be a number equal to 1 or 0";
        if (typeof r.codec != "string")
          return "codec must be string";
        if (r.version === 0) {
          if (r.codec !== "dag-pb")
            return "codec must be 'dag-pb' for CIDv0";
          if (r.multibaseName !== "base58btc")
            return "multibaseName must be 'base58btc' for CIDv0";
        }
        if (!(r.multihash instanceof Uint8Array))
          return "multihash must be a Uint8Array";
        try {
          Bc.validate(r.multihash);
        } catch (e) {
          let t = e.message;
          return t || (t = "Multihash validation failed"), t;
        }
      } };
      vs.exports = _c;
    });
    As = {};
    _3(As, { equals: () => Es });
    mr = x2(() => {
    });
    Cs = h((hb, Ts) => {
      "use strict";
      var lt = br(), yr = $t(), le3 = ws(), Ic = Ss(), { concat: Ds } = (Ie(), st), { toString: Lc } = (_e2(), nt), { equals: Mc } = (mr(), As), ft = le3.nameToCode, Uc = Object.keys(ft).reduce((r, e) => (r[ft[e]] = e, r), {}), js = Symbol.for("@ipld/js-cid/CID"), V3 = class {
        constructor(e, t, n, i) {
          if (this.version, this.codec, this.multihash, Object.defineProperty(this, js, { value: true }), V3.isCID(e)) {
            let s = e;
            this.version = s.version, this.codec = s.codec, this.multihash = s.multihash, this.multibaseName = s.multibaseName || (s.version === 0 ? "base58btc" : "base32");
            return;
          }
          if (typeof e == "string") {
            let s = yr.isEncoded(e);
            if (s) {
              let o2 = yr.decode(e);
              this.version = parseInt(o2[0].toString(), 16), this.codec = le3.getCodec(o2.slice(1)), this.multihash = le3.rmPrefix(o2.slice(1)), this.multibaseName = s;
            } else
              this.version = 0, this.codec = "dag-pb", this.multihash = lt.fromB58String(e), this.multibaseName = "base58btc";
            V3.validateCID(this), Object.defineProperty(this, "string", { value: e });
            return;
          }
          if (e instanceof Uint8Array) {
            let s = parseInt(e[0].toString(), 16);
            if (s === 1) {
              let o2 = e;
              this.version = s, this.codec = le3.getCodec(o2.slice(1)), this.multihash = le3.rmPrefix(o2.slice(1)), this.multibaseName = "base32";
            } else
              this.version = 0, this.codec = "dag-pb", this.multihash = e, this.multibaseName = "base58btc";
            V3.validateCID(this);
            return;
          }
          this.version = e, typeof t == "number" && (t = Uc[t]), this.codec = t, this.multihash = n, this.multibaseName = i || (e === 0 ? "base58btc" : "base32"), V3.validateCID(this);
        }
        get bytes() {
          let e = this._bytes;
          if (!e) {
            if (this.version === 0)
              e = this.multihash;
            else if (this.version === 1) {
              let t = le3.getCodeVarint(this.codec);
              e = Ds([[1], t, this.multihash], 1 + t.byteLength + this.multihash.byteLength);
            } else
              throw new Error("unsupported version");
            Object.defineProperty(this, "_bytes", { value: e });
          }
          return e;
        }
        get prefix() {
          let e = le3.getCodeVarint(this.codec), t = lt.prefix(this.multihash);
          return Ds([[this.version], e, t], 1 + e.byteLength + t.byteLength);
        }
        get code() {
          return ft[this.codec];
        }
        toV0() {
          if (this.codec !== "dag-pb")
            throw new Error("Cannot convert a non dag-pb CID to CIDv0");
          let { name: e, length: t } = lt.decode(this.multihash);
          if (e !== "sha2-256")
            throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
          if (t !== 32)
            throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");
          return new V3(0, this.codec, this.multihash);
        }
        toV1() {
          return new V3(1, this.codec, this.multihash, this.multibaseName);
        }
        toBaseEncodedString(e = this.multibaseName) {
          if (this.string && this.string.length !== 0 && e === this.multibaseName)
            return this.string;
          let t;
          if (this.version === 0) {
            if (e !== "base58btc")
              throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");
            t = lt.toB58String(this.multihash);
          } else if (this.version === 1)
            t = Lc(yr.encode(e, this.bytes));
          else
            throw new Error("unsupported version");
          return e === this.multibaseName && Object.defineProperty(this, "string", { value: t }), t;
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        toString(e) {
          return this.toBaseEncodedString(e);
        }
        toJSON() {
          return { codec: this.codec, version: this.version, hash: this.multihash };
        }
        equals(e) {
          return this.codec === e.codec && this.version === e.version && Mc(this.multihash, e.multihash);
        }
        static validateCID(e) {
          let t = Ic.checkCIDComponents(e);
          if (t)
            throw new Error(t);
        }
        static isCID(e) {
          return e instanceof V3 || Boolean(e && e[js]);
        }
      };
      V3.codecs = ft;
      Ts.exports = V3;
    });
    Rc = Se(vr());
    Sr = (r) => {
      let { name: e, message: t, stack: n, code: i, detail: s } = r;
      return { name: e, message: t, stack: n, code: i, detail: s };
    };
    fe2 = (r) => {
      if (r instanceof Error)
        return r;
      {
        let { name: e, message: t, stack: n, code: i } = r;
        return Object.assign(Ms(e, t), { name: e, stack: n, code: i });
      }
    };
    Ms = (r, e) => {
      switch (r) {
        case "RangeError":
          return new RangeError(e);
        case "ReferenceError":
          return ReferenceError(e);
        case "SyntaxError":
          return new SyntaxError(e);
        case "TypeError":
          return new TypeError(e);
        case "URIError":
          return new URIError(e);
        default:
          return new Error(e);
      }
    };
    ut = class extends Error {
      get name() {
        return this.constructor.name;
      }
    };
    ht = class extends Error {
      get name() {
        return this.constructor.name;
      }
    };
    dt = class extends Error {
      get name() {
        return this.constructor.name;
      }
    };
    Y2 = class {
      constructor(e) {
        this.port = null, this.id = Math.random().toString(32).slice(2), this.nextID = 0, this.queries = Object.create(null), e && this.connect(e);
      }
      execute(e) {
        let t = `${this.id}@${this.nextID++}`;
        return this.queries[t] = e, e.timeout > 0 && e.timeout < 1 / 0 && (e.timerID = setTimeout(Y2.timeout, e.timeout, this, t)), e.signal && e.signal.addEventListener("abort", () => this.abort(t), { once: true }), this.port && Y2.postQuery(this.port, t, e), e.result;
      }
      connect(e) {
        if (this.port)
          throw new Error("Transport is already open");
        this.port = e, this.port.addEventListener("message", this), this.port.start();
        for (let [t, n] of Object.entries(this.queries))
          Y2.postQuery(e, t, n);
      }
      disconnect() {
        let e = new dt();
        for (let [t, n] of Object.entries(this.queries))
          n.fail(e), this.abort(t);
        this.port && (this.port.removeEventListener("message", this), this.port.close());
      }
      static timeout(e, t) {
        let { queries: n } = e, i = n[t];
        i && (delete n[t], i.fail(new ut("request timed out")), e.port && e.port.postMessage({ type: "abort", id: t }));
      }
      abort(e) {
        let { queries: t } = this, n = t[e];
        n && (delete t[e], n.fail(new ht()), this.port && this.port.postMessage({ type: "abort", id: e }), n.timerID != null && clearTimeout(n.timerID));
      }
      static postQuery(e, t, n) {
        e.postMessage({ type: "query", namespace: n.namespace, method: n.method, id: t, input: n.toJSON() }, [...new Set(n.transfer() || [])]);
      }
      handleEvent(e) {
        let { id: t, result: n } = e.data, i = this.queries[t];
        i && (delete this.queries[t], n.ok ? i.succeed(n.value) : i.fail(fe2(n.error)), i.timerID != null && clearTimeout(i.timerID));
      }
    };
    pt = class {
      constructor(e, t, n) {
        this.result = new Promise((i, s) => {
          this.succeed = i, this.fail = s, this.signal = n.signal, this.input = n, this.namespace = e, this.method = t, this.timeout = n.timeout == null ? 1 / 0 : n.timeout, this.timerID = null;
        });
      }
      toJSON() {
        return this.input;
      }
      transfer() {
        return this.input.transfer;
      }
    };
    xt = class {
      constructor(e, t, n) {
        this.transport = n;
        let i = this;
        for (let s of t)
          i[s] = (o2) => this.transport.execute(new pt(e, s.toString(), o2));
      }
    };
    Q2 = class {
      constructor(e, t, n) {
        this.remote = new xt(e, t, n);
      }
    };
    pe2();
    F2 = (r, e) => (e && e.push(r.multihash.bytes.buffer), r);
    M2 = (r) => {
      let e = r;
      return e._baseCache || Object.defineProperty(e, "_baseCache", { value: new Map() }), e.asCID || Object.defineProperty(e, "asCID", { get: () => e }), Object.setPrototypeOf(e.multihash.digest, Uint8Array.prototype), Object.setPrototypeOf(e.multihash.bytes, Uint8Array.prototype), Object.setPrototypeOf(e.bytes, Uint8Array.prototype), Object.setPrototypeOf(e, m2.prototype), Object.defineProperty(e, Symbol.for("@ipld/js-cid/CID"), { value: true }), e;
    };
    Vr = (r, e) => (e && e.push(r.buffer), r);
    se3 = class extends Q2 {
      constructor(e) {
        super("block", ["put", "get", "rm", "stat"], e);
      }
    };
    se3.prototype.get = async function(e, t = {}) {
      let { transfer: n } = t, { block: i } = await this.remote.get({ ...t, cid: F2(e, n) });
      return i;
    };
    se3.prototype.put = async function(e, t = {}) {
      let { transfer: n } = t;
      delete t.progress;
      let i = await this.remote.put({ ...t, block: e instanceof Uint8Array ? e : Vr(e, n) });
      return M2(i.cid);
    };
    se3.prototype.rm = async function* (e, t = {}) {
      let { transfer: n } = t;
      yield* (await this.remote.rm({ ...t, cids: Array.isArray(e) ? e.map((s) => F2(s, n)) : [F2(e, n)] })).map(Eo);
    };
    se3.prototype.stat = async function(e, t = {}) {
      let { transfer: n } = t, i = await this.remote.stat({ ...t, cid: F2(e, n) });
      return { ...i, cid: M2(i.cid) };
    };
    Eo = (r) => {
      let e = M2(r.cid);
      return r.error ? { cid: e, error: fe2(r.error) } : { cid: e };
    };
    pe2();
    $r = ({ dagNode: r, cids: e }) => {
      for (let t of e)
        M2(t);
      return r;
    };
    Jr = (r, e) => {
      let t = [];
      return vt(r, t, e), { dagNode: r, cids: t };
    };
    vt = (r, e, t) => {
      if (r != null && typeof r == "object") {
        let n = m2.asCID(r);
        if (n)
          e.push(n), F2(n, t);
        else if (r instanceof ArrayBuffer)
          t && t.push(r);
        else if (ArrayBuffer.isView(r))
          t && t.push(r.buffer);
        else if (Array.isArray(r))
          for (let i of r)
            vt(i, e, t);
        else
          for (let i of Object.values(r))
            vt(i, e, t);
      }
    };
    xe = class extends Q2 {
      constructor(e) {
        super("dag", ["put", "get", "resolve"], e);
      }
    };
    xe.prototype.put = async function(e, t = {}) {
      let n = await this.remote.put({ ...t, dagNode: Jr(e, t.transfer) });
      return M2(n);
    };
    xe.prototype.get = async function(e, t = {}) {
      let { value: n, remainderPath: i } = await this.remote.get({ ...t, cid: F2(e, t.transfer) });
      return { value: $r(n), remainderPath: i };
    };
    xe.prototype.resolve = async function(e, t = {}) {
      let { cid: n, remainderPath: i } = await this.remote.resolve({ ...t, cid: Ao(e, t.transfer) });
      return { cid: M2(n), remainderPath: i };
    };
    Ao = (r, e) => typeof r == "string" ? r : F2(r, e);
    pe2();
    He2 = async function* ({ port: r }, e) {
      let t = (o2) => {
      }, n = () => new Promise((o2) => t = o2), i = () => (r.postMessage({ method: "next" }), n());
      r.onmessage = (o2) => t(o2.data);
      let s = false;
      try {
        for (; !s; ) {
          let { done: o2, value: b2, error: a2 } = await i();
          if (s = o2, a2 != null)
            throw fe2(a2);
          b2 != null && (yield e(b2));
        }
      } finally {
        s || r.postMessage({ method: "return" }), r.close();
      }
    };
    H3 = (r, e, t) => {
      let { port1: n, port2: i } = new MessageChannel(), s = [], o2 = Do(r);
      return n.onmessage = async ({ data: { method: b2 } }) => {
        switch (b2) {
          case "next": {
            try {
              let { done: a2, value: c3 } = await o2.next();
              a2 ? (n.postMessage({ type: "next", done: true }), n.close()) : (s.length = 0, n.postMessage({ type: "next", done: false, value: e(c3, s) }, s));
            } catch (a2) {
              n.postMessage({ type: "throw", error: Sr(a2) }), n.close();
            }
            break;
          }
          case "return": {
            n.close(), o2.return && o2.return();
            break;
          }
          default:
            break;
        }
      }, n.start(), t.push(i), { type: "RemoteIterable", port: i };
    };
    Do = (r) => {
      if (r != null) {
        if (typeof r[Symbol.asyncIterator] == "function")
          return r[Symbol.asyncIterator]();
        if (typeof r[Symbol.iterator] == "function")
          return r[Symbol.iterator]();
      }
      throw TypeError("Value must be async or sync iterable");
    };
    St = (r, e) => {
      let { port1: t, port2: n } = new MessageChannel();
      return t.onmessage = ({ data: i }) => r.apply(null, i), e.push(n), { type: "RemoteCallback", port: n };
    };
    Ke = Se(Wr());
    Qn = Se(Xr());
    K3 = Se(Gn());
    me2 = K3.default.Reader;
    Mt = K3.default.Writer;
    u2 = K3.default.util;
    O3 = K3.default.roots["ipfs-unixfs"] || (K3.default.roots["ipfs-unixfs"] = {});
    Uo = O3.Data = (() => {
      function r(e) {
        if (this.blocksizes = [], e)
          for (var t = Object.keys(e), n = 0; n < t.length; ++n)
            e[t[n]] != null && (this[t[n]] = e[t[n]]);
      }
      return r.prototype.Type = 0, r.prototype.Data = u2.newBuffer([]), r.prototype.filesize = u2.Long ? u2.Long.fromBits(0, 0, true) : 0, r.prototype.blocksizes = u2.emptyArray, r.prototype.hashType = u2.Long ? u2.Long.fromBits(0, 0, true) : 0, r.prototype.fanout = u2.Long ? u2.Long.fromBits(0, 0, true) : 0, r.prototype.mode = 0, r.prototype.mtime = null, r.encode = function(t, n) {
        if (n || (n = Mt.create()), n.uint32(8).int32(t.Type), t.Data != null && Object.hasOwnProperty.call(t, "Data") && n.uint32(18).bytes(t.Data), t.filesize != null && Object.hasOwnProperty.call(t, "filesize") && n.uint32(24).uint64(t.filesize), t.blocksizes != null && t.blocksizes.length)
          for (var i = 0; i < t.blocksizes.length; ++i)
            n.uint32(32).uint64(t.blocksizes[i]);
        return t.hashType != null && Object.hasOwnProperty.call(t, "hashType") && n.uint32(40).uint64(t.hashType), t.fanout != null && Object.hasOwnProperty.call(t, "fanout") && n.uint32(48).uint64(t.fanout), t.mode != null && Object.hasOwnProperty.call(t, "mode") && n.uint32(56).uint32(t.mode), t.mtime != null && Object.hasOwnProperty.call(t, "mtime") && O3.UnixTime.encode(t.mtime, n.uint32(66).fork()).ldelim(), n;
      }, r.decode = function(t, n) {
        t instanceof me2 || (t = me2.create(t));
        for (var i = n === void 0 ? t.len : t.pos + n, s = new O3.Data(); t.pos < i; ) {
          var o2 = t.uint32();
          switch (o2 >>> 3) {
            case 1:
              s.Type = t.int32();
              break;
            case 2:
              s.Data = t.bytes();
              break;
            case 3:
              s.filesize = t.uint64();
              break;
            case 4:
              if (s.blocksizes && s.blocksizes.length || (s.blocksizes = []), (o2 & 7) == 2)
                for (var b2 = t.uint32() + t.pos; t.pos < b2; )
                  s.blocksizes.push(t.uint64());
              else
                s.blocksizes.push(t.uint64());
              break;
            case 5:
              s.hashType = t.uint64();
              break;
            case 6:
              s.fanout = t.uint64();
              break;
            case 7:
              s.mode = t.uint32();
              break;
            case 8:
              s.mtime = O3.UnixTime.decode(t, t.uint32());
              break;
            default:
              t.skipType(o2 & 7);
              break;
          }
        }
        if (!s.hasOwnProperty("Type"))
          throw u2.ProtocolError("missing required 'Type'", { instance: s });
        return s;
      }, r.fromObject = function(t) {
        if (t instanceof O3.Data)
          return t;
        var n = new O3.Data();
        switch (t.Type) {
          case "Raw":
          case 0:
            n.Type = 0;
            break;
          case "Directory":
          case 1:
            n.Type = 1;
            break;
          case "File":
          case 2:
            n.Type = 2;
            break;
          case "Metadata":
          case 3:
            n.Type = 3;
            break;
          case "Symlink":
          case 4:
            n.Type = 4;
            break;
          case "HAMTShard":
          case 5:
            n.Type = 5;
            break;
        }
        if (t.Data != null && (typeof t.Data == "string" ? u2.base64.decode(t.Data, n.Data = u2.newBuffer(u2.base64.length(t.Data)), 0) : t.Data.length && (n.Data = t.Data)), t.filesize != null && (u2.Long ? (n.filesize = u2.Long.fromValue(t.filesize)).unsigned = true : typeof t.filesize == "string" ? n.filesize = parseInt(t.filesize, 10) : typeof t.filesize == "number" ? n.filesize = t.filesize : typeof t.filesize == "object" && (n.filesize = new u2.LongBits(t.filesize.low >>> 0, t.filesize.high >>> 0).toNumber(true))), t.blocksizes) {
          if (!Array.isArray(t.blocksizes))
            throw TypeError(".Data.blocksizes: array expected");
          n.blocksizes = [];
          for (var i = 0; i < t.blocksizes.length; ++i)
            u2.Long ? (n.blocksizes[i] = u2.Long.fromValue(t.blocksizes[i])).unsigned = true : typeof t.blocksizes[i] == "string" ? n.blocksizes[i] = parseInt(t.blocksizes[i], 10) : typeof t.blocksizes[i] == "number" ? n.blocksizes[i] = t.blocksizes[i] : typeof t.blocksizes[i] == "object" && (n.blocksizes[i] = new u2.LongBits(t.blocksizes[i].low >>> 0, t.blocksizes[i].high >>> 0).toNumber(true));
        }
        if (t.hashType != null && (u2.Long ? (n.hashType = u2.Long.fromValue(t.hashType)).unsigned = true : typeof t.hashType == "string" ? n.hashType = parseInt(t.hashType, 10) : typeof t.hashType == "number" ? n.hashType = t.hashType : typeof t.hashType == "object" && (n.hashType = new u2.LongBits(t.hashType.low >>> 0, t.hashType.high >>> 0).toNumber(true))), t.fanout != null && (u2.Long ? (n.fanout = u2.Long.fromValue(t.fanout)).unsigned = true : typeof t.fanout == "string" ? n.fanout = parseInt(t.fanout, 10) : typeof t.fanout == "number" ? n.fanout = t.fanout : typeof t.fanout == "object" && (n.fanout = new u2.LongBits(t.fanout.low >>> 0, t.fanout.high >>> 0).toNumber(true))), t.mode != null && (n.mode = t.mode >>> 0), t.mtime != null) {
          if (typeof t.mtime != "object")
            throw TypeError(".Data.mtime: object expected");
          n.mtime = O3.UnixTime.fromObject(t.mtime);
        }
        return n;
      }, r.toObject = function(t, n) {
        n || (n = {});
        var i = {};
        if ((n.arrays || n.defaults) && (i.blocksizes = []), n.defaults) {
          if (i.Type = n.enums === String ? "Raw" : 0, n.bytes === String ? i.Data = "" : (i.Data = [], n.bytes !== Array && (i.Data = u2.newBuffer(i.Data))), u2.Long) {
            var s = new u2.Long(0, 0, true);
            i.filesize = n.longs === String ? s.toString() : n.longs === Number ? s.toNumber() : s;
          } else
            i.filesize = n.longs === String ? "0" : 0;
          if (u2.Long) {
            var s = new u2.Long(0, 0, true);
            i.hashType = n.longs === String ? s.toString() : n.longs === Number ? s.toNumber() : s;
          } else
            i.hashType = n.longs === String ? "0" : 0;
          if (u2.Long) {
            var s = new u2.Long(0, 0, true);
            i.fanout = n.longs === String ? s.toString() : n.longs === Number ? s.toNumber() : s;
          } else
            i.fanout = n.longs === String ? "0" : 0;
          i.mode = 0, i.mtime = null;
        }
        if (t.Type != null && t.hasOwnProperty("Type") && (i.Type = n.enums === String ? O3.Data.DataType[t.Type] : t.Type), t.Data != null && t.hasOwnProperty("Data") && (i.Data = n.bytes === String ? u2.base64.encode(t.Data, 0, t.Data.length) : n.bytes === Array ? Array.prototype.slice.call(t.Data) : t.Data), t.filesize != null && t.hasOwnProperty("filesize") && (typeof t.filesize == "number" ? i.filesize = n.longs === String ? String(t.filesize) : t.filesize : i.filesize = n.longs === String ? u2.Long.prototype.toString.call(t.filesize) : n.longs === Number ? new u2.LongBits(t.filesize.low >>> 0, t.filesize.high >>> 0).toNumber(true) : t.filesize), t.blocksizes && t.blocksizes.length) {
          i.blocksizes = [];
          for (var o2 = 0; o2 < t.blocksizes.length; ++o2)
            typeof t.blocksizes[o2] == "number" ? i.blocksizes[o2] = n.longs === String ? String(t.blocksizes[o2]) : t.blocksizes[o2] : i.blocksizes[o2] = n.longs === String ? u2.Long.prototype.toString.call(t.blocksizes[o2]) : n.longs === Number ? new u2.LongBits(t.blocksizes[o2].low >>> 0, t.blocksizes[o2].high >>> 0).toNumber(true) : t.blocksizes[o2];
        }
        return t.hashType != null && t.hasOwnProperty("hashType") && (typeof t.hashType == "number" ? i.hashType = n.longs === String ? String(t.hashType) : t.hashType : i.hashType = n.longs === String ? u2.Long.prototype.toString.call(t.hashType) : n.longs === Number ? new u2.LongBits(t.hashType.low >>> 0, t.hashType.high >>> 0).toNumber(true) : t.hashType), t.fanout != null && t.hasOwnProperty("fanout") && (typeof t.fanout == "number" ? i.fanout = n.longs === String ? String(t.fanout) : t.fanout : i.fanout = n.longs === String ? u2.Long.prototype.toString.call(t.fanout) : n.longs === Number ? new u2.LongBits(t.fanout.low >>> 0, t.fanout.high >>> 0).toNumber(true) : t.fanout), t.mode != null && t.hasOwnProperty("mode") && (i.mode = t.mode), t.mtime != null && t.hasOwnProperty("mtime") && (i.mtime = O3.UnixTime.toObject(t.mtime, n)), i;
      }, r.prototype.toJSON = function() {
        return this.constructor.toObject(this, K3.default.util.toJSONOptions);
      }, r.DataType = function() {
        let e = {}, t = Object.create(e);
        return t[e[0] = "Raw"] = 0, t[e[1] = "Directory"] = 1, t[e[2] = "File"] = 2, t[e[3] = "Metadata"] = 3, t[e[4] = "Symlink"] = 4, t[e[5] = "HAMTShard"] = 5, t;
      }(), r;
    })();
    e2 = O3.UnixTime = (() => {
      function r(e) {
        if (e)
          for (var t = Object.keys(e), n = 0; n < t.length; ++n)
            e[t[n]] != null && (this[t[n]] = e[t[n]]);
      }
      return r.prototype.Seconds = u2.Long ? u2.Long.fromBits(0, 0, false) : 0, r.prototype.FractionalNanoseconds = 0, r.encode = function(t, n) {
        return n || (n = Mt.create()), n.uint32(8).int64(t.Seconds), t.FractionalNanoseconds != null && Object.hasOwnProperty.call(t, "FractionalNanoseconds") && n.uint32(21).fixed32(t.FractionalNanoseconds), n;
      }, r.decode = function(t, n) {
        t instanceof me2 || (t = me2.create(t));
        for (var i = n === void 0 ? t.len : t.pos + n, s = new O3.UnixTime(); t.pos < i; ) {
          var o2 = t.uint32();
          switch (o2 >>> 3) {
            case 1:
              s.Seconds = t.int64();
              break;
            case 2:
              s.FractionalNanoseconds = t.fixed32();
              break;
            default:
              t.skipType(o2 & 7);
              break;
          }
        }
        if (!s.hasOwnProperty("Seconds"))
          throw u2.ProtocolError("missing required 'Seconds'", { instance: s });
        return s;
      }, r.fromObject = function(t) {
        if (t instanceof O3.UnixTime)
          return t;
        var n = new O3.UnixTime();
        return t.Seconds != null && (u2.Long ? (n.Seconds = u2.Long.fromValue(t.Seconds)).unsigned = false : typeof t.Seconds == "string" ? n.Seconds = parseInt(t.Seconds, 10) : typeof t.Seconds == "number" ? n.Seconds = t.Seconds : typeof t.Seconds == "object" && (n.Seconds = new u2.LongBits(t.Seconds.low >>> 0, t.Seconds.high >>> 0).toNumber())), t.FractionalNanoseconds != null && (n.FractionalNanoseconds = t.FractionalNanoseconds >>> 0), n;
      }, r.toObject = function(t, n) {
        n || (n = {});
        var i = {};
        if (n.defaults) {
          if (u2.Long) {
            var s = new u2.Long(0, 0, false);
            i.Seconds = n.longs === String ? s.toString() : n.longs === Number ? s.toNumber() : s;
          } else
            i.Seconds = n.longs === String ? "0" : 0;
          i.FractionalNanoseconds = 0;
        }
        return t.Seconds != null && t.hasOwnProperty("Seconds") && (typeof t.Seconds == "number" ? i.Seconds = n.longs === String ? String(t.Seconds) : t.Seconds : i.Seconds = n.longs === String ? u2.Long.prototype.toString.call(t.Seconds) : n.longs === Number ? new u2.LongBits(t.Seconds.low >>> 0, t.Seconds.high >>> 0).toNumber() : t.Seconds), t.FractionalNanoseconds != null && t.hasOwnProperty("FractionalNanoseconds") && (i.FractionalNanoseconds = t.FractionalNanoseconds), i;
      }, r.prototype.toJSON = function() {
        return this.constructor.toObject(this, K3.default.util.toJSONOptions);
      }, r;
    })();
    t2 = O3.Metadata = (() => {
      function r(e) {
        if (e)
          for (var t = Object.keys(e), n = 0; n < t.length; ++n)
            e[t[n]] != null && (this[t[n]] = e[t[n]]);
      }
      return r.prototype.MimeType = "", r.encode = function(t, n) {
        return n || (n = Mt.create()), t.MimeType != null && Object.hasOwnProperty.call(t, "MimeType") && n.uint32(10).string(t.MimeType), n;
      }, r.decode = function(t, n) {
        t instanceof me2 || (t = me2.create(t));
        for (var i = n === void 0 ? t.len : t.pos + n, s = new O3.Metadata(); t.pos < i; ) {
          var o2 = t.uint32();
          switch (o2 >>> 3) {
            case 1:
              s.MimeType = t.string();
              break;
            default:
              t.skipType(o2 & 7);
              break;
          }
        }
        return s;
      }, r.fromObject = function(t) {
        if (t instanceof O3.Metadata)
          return t;
        var n = new O3.Metadata();
        return t.MimeType != null && (n.MimeType = String(t.MimeType)), n;
      }, r.toObject = function(t, n) {
        n || (n = {});
        var i = {};
        return n.defaults && (i.MimeType = ""), t.MimeType != null && t.hasOwnProperty("MimeType") && (i.MimeType = t.MimeType), i;
      }, r.prototype.toJSON = function() {
        return this.constructor.toObject(this, K3.default.util.toJSONOptions);
      }, r;
    })();
    i2 = parseInt("0644", 8);
    s2 = parseInt("0755", 8);
    ce2 = class extends Q2 {
      constructor(e) {
        super("core", ["add", "addAll", "cat", "ls"], e);
      }
    };
    ce2.prototype.addAll = async function* (e, t = {}) {
      let { timeout: n, signal: i } = t, s = [...t.transfer || []], o2 = t.progress ? St(t.progress, s) : void 0, b2 = await this.remote.addAll({ ...t, input: Po(e, s), progress: void 0, progressCallback: o2, transfer: s, timeout: n, signal: i });
      yield* He2(b2.data, Zn);
    };
    ce2.prototype.add = async function(e, t = {}) {
      let { timeout: n, signal: i } = t, s = [...t.transfer || []], o2 = t.progress ? St(t.progress, s) : void 0, b2 = await this.remote.add({ ...t, input: Ro(e, s), progress: void 0, progressCallback: o2, transfer: s, timeout: n, signal: i });
      return Zn(b2.data);
    };
    ce2.prototype.cat = async function* (e, t = {}) {
      let n = m2.asCID(e), i = n ? F2(n) : e, s = await this.remote.cat({ ...t, path: i });
      yield* He2(s.data, qo);
    };
    ce2.prototype.ls = async function* (e, t = {}) {
      let n = m2.asCID(e), i = n ? F2(n) : e, s = await this.remote.ls({ ...t, path: i });
      yield* He2(s.data, Fo);
    };
    Zn = ({ path: r, cid: e, mode: t, mtime: n, size: i }) => ({ path: r, cid: M2(e), mode: t, mtime: n, size: i });
    Fo = ({ name: r, path: e, size: t, cid: n, type: i, mode: s, mtime: o2 }) => ({ cid: M2(n), type: i, name: r, path: e, mode: s, mtime: o2, size: t });
    qo = (r) => r;
    Ro = (r, e) => {
      if (r instanceof Blob)
        return r;
      if (typeof r == "string")
        return r;
      if (r instanceof ArrayBuffer)
        return r;
      if (ArrayBuffer.isView(r))
        return r;
      {
        let t = qt(r);
        if (t)
          return H3(t, Ut, e);
        let n = Rt(r);
        if (n)
          return H3(n, ye, e);
        let i = Pt(r);
        if (i)
          return H3((0, Ke.default)(i), ye, e);
        let s = Vt(r);
        if (s)
          return Ft(s, e);
        throw TypeError("Unexpected input: " + typeof r);
      }
    };
    Po = (r, e) => {
      let t = qt(r);
      if (t)
        return H3(t, Ut, e);
      let n = Rt(r);
      if (n)
        return H3(n, ye, e);
      let i = Pt(r);
      if (i)
        return H3((0, Ke.default)(i), ye, e);
      throw TypeError("Unexpected input: " + typeof r);
    };
    ye = (r, e) => {
      if (r instanceof ArrayBuffer)
        return r;
      if (ArrayBuffer.isView(r))
        return r;
      if (r instanceof Blob)
        return { path: "", content: r };
      if (typeof r == "string")
        return { path: "", content: r };
      {
        let t = Vt(r);
        if (t)
          return Ft(t, e);
        throw TypeError("Unexpected input: " + typeof r);
      }
    };
    Ut = (r, e) => {
      if (typeof r == "number")
        throw TypeError("Iterable of numbers is not supported");
      if (r instanceof ArrayBuffer)
        return r;
      if (ArrayBuffer.isView(r))
        return r;
      if (r instanceof Blob)
        return { path: "", content: r };
      if (typeof r == "string")
        return { path: "", content: r };
      {
        let t = Vt(r);
        if (t)
          return Ft(t, e);
        throw TypeError("Unexpected input: " + typeof r);
      }
    };
    Ft = ({ path: r, mode: e, mtime: t, content: n }, i) => {
      let s = { path: r, mode: Xn(e), mtime: Kn(t) };
      return n && (s.content = Vo(n, i)), s;
    };
    Vo = (r, e) => {
      if (r == null)
        return "";
      if (r instanceof ArrayBuffer || ArrayBuffer.isView(r))
        return r;
      if (r instanceof Blob)
        return r;
      if (typeof r == "string")
        return r;
      {
        let t = qt(r);
        if (t)
          return H3(t, Ut, e);
        let n = Rt(r);
        if (n)
          return H3(n, ye, e);
        let i = Pt(r);
        if (i)
          return H3((0, Ke.default)(i), ye, e);
        throw TypeError("Unexpected input: " + typeof r);
      }
    };
    qt = (r) => {
      let e = r;
      return e && typeof e[Symbol.iterator] == "function" ? e : null;
    };
    Rt = (r) => {
      let e = r;
      return e && typeof e[Symbol.asyncIterator] == "function" ? e : null;
    };
    Pt = (r) => r && typeof r.getReader == "function" ? r : null;
    Vt = (r) => typeof r == "object" && (r.path || r.content) ? r : null;
    pe2();
    Ze = class extends Q2 {
      constructor(e) {
        super("files", ["stat"], e);
      }
    };
    Ze.prototype.stat = async function(e, t = {}) {
      let { size: n, hash: i, withLocal: s, timeout: o2, signal: b2 } = t, { stat: a2 } = await this.remote.stat({ path: $o(e), size: n, hash: i, withLocal: s, timeout: o2, signal: b2 });
      return Jo(a2);
    };
    $o = (r) => m2.asCID(r) ? `/ipfs/${r.toString()}` : r.toString();
    Jo = (r) => ({ ...r, cid: M2(r.cid) });
    Ne = class extends ce2 {
      constructor(e) {
        super(e);
        this.transport = e, this.dag = new xe(this.transport), this.files = new Ze(this.transport), this.block = new se3(this.transport);
      }
      static attach(e, t) {
        e.transport.connect(t);
      }
      static detached() {
        return new Ne(new Y2(void 0));
      }
      static from(e) {
        return new Ne(new Y2(e));
      }
    };
    Pc = Se(Cs());
    Fc = ["https://ipfs.io/ipfs/:hash", "https://cf-ipfs.com/ipfs/:hash"];
    Ie();
    mr();
    it();
    _e2();
    Cb = (r) => new Uint8Array((r.match(/.{1,2}/g) || []).map((e) => parseInt(e, 16)));
    export_CID = Pc.default;
    export_all = Rc.default;
  }
});

// js/ipfsClient.mjs
var workerSrc, forceNormalWorker, port, ipfsClient, ipfsCat;
var init_ipfsClient = __esm({
  "js/ipfsClient.mjs"() {
    init_getWorker();
    init_ipfs_client();
    ({ workerSrc, forceNormalWorker } = getWorker("ipfsWorker.js"));
    if (typeof SharedWorker !== "undefined" && !forceNormalWorker) {
      const ipfsWorker = new SharedWorker(workerSrc);
      port = ipfsWorker.port;
    } else {
      const worker = new Worker(workerSrc);
      const { port1, port2 } = new MessageChannel();
      const msg = {
        clientInit: true,
        port: port1
      };
      worker.postMessage(msg, [port1]);
      port = port2;
    }
    ipfsClient = Ne.from(port);
    ipfsCat = async (cid, opts) => {
      const options = opts || {};
      const res = ipfsClient.cat(cid, options);
      const result = ar(await export_all(res));
      const resultStr = ir(result);
      return resultStr;
    };
    globalThis.ipfsCat = ipfsCat;
  }
});

// js/importmap.json
var imports, importmap_default;
var init_importmap = __esm({
  "js/importmap.json"() {
    imports = {
      "@babel/runtime/helpers/jsx": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/jsx.js",
      "@babel/runtime/helpers/esm/jsx": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/jsx.js",
      "@babel/runtime/helpers/objectSpread2": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectSpread2.js",
      "@babel/runtime/helpers/esm/objectSpread2": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectSpread2.js",
      "@babel/runtime/helpers/typeof": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/typeof.js",
      "@babel/runtime/helpers/esm/typeof": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/typeof.js",
      "@babel/runtime/helpers/wrapRegExp": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapRegExp.js",
      "@babel/runtime/helpers/esm/wrapRegExp": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapRegExp.js",
      "@babel/runtime/helpers/asyncIterator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncIterator.js",
      "@babel/runtime/helpers/esm/asyncIterator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncIterator.js",
      "@babel/runtime/helpers/AwaitValue": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/AwaitValue.js",
      "@babel/runtime/helpers/esm/AwaitValue": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/AwaitValue.js",
      "@babel/runtime/helpers/AsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/AsyncGenerator.js",
      "@babel/runtime/helpers/esm/AsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/AsyncGenerator.js",
      "@babel/runtime/helpers/wrapAsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapAsyncGenerator.js",
      "@babel/runtime/helpers/esm/wrapAsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapAsyncGenerator.js",
      "@babel/runtime/helpers/awaitAsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/awaitAsyncGenerator.js",
      "@babel/runtime/helpers/esm/awaitAsyncGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/awaitAsyncGenerator.js",
      "@babel/runtime/helpers/asyncGeneratorDelegate": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncGeneratorDelegate.js",
      "@babel/runtime/helpers/esm/asyncGeneratorDelegate": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncGeneratorDelegate.js",
      "@babel/runtime/helpers/asyncToGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncToGenerator.js",
      "@babel/runtime/helpers/esm/asyncToGenerator": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/asyncToGenerator.js",
      "@babel/runtime/helpers/classCallCheck": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCallCheck.js",
      "@babel/runtime/helpers/esm/classCallCheck": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCallCheck.js",
      "@babel/runtime/helpers/createClass": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createClass.js",
      "@babel/runtime/helpers/esm/createClass": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createClass.js",
      "@babel/runtime/helpers/defineEnumerableProperties": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defineEnumerableProperties.js",
      "@babel/runtime/helpers/esm/defineEnumerableProperties": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defineEnumerableProperties.js",
      "@babel/runtime/helpers/defaults": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defaults.js",
      "@babel/runtime/helpers/esm/defaults": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defaults.js",
      "@babel/runtime/helpers/defineProperty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defineProperty.js",
      "@babel/runtime/helpers/esm/defineProperty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/defineProperty.js",
      "@babel/runtime/helpers/extends": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/extends.js",
      "@babel/runtime/helpers/esm/extends": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/extends.js",
      "@babel/runtime/helpers/objectSpread": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectSpread.js",
      "@babel/runtime/helpers/esm/objectSpread": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectSpread.js",
      "@babel/runtime/helpers/inherits": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/inherits.js",
      "@babel/runtime/helpers/esm/inherits": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/inherits.js",
      "@babel/runtime/helpers/inheritsLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/inheritsLoose.js",
      "@babel/runtime/helpers/esm/inheritsLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/inheritsLoose.js",
      "@babel/runtime/helpers/getPrototypeOf": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/getPrototypeOf.js",
      "@babel/runtime/helpers/esm/getPrototypeOf": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/getPrototypeOf.js",
      "@babel/runtime/helpers/setPrototypeOf": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/setPrototypeOf.js",
      "@babel/runtime/helpers/esm/setPrototypeOf": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/setPrototypeOf.js",
      "@babel/runtime/helpers/isNativeReflectConstruct": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/isNativeReflectConstruct.js",
      "@babel/runtime/helpers/esm/isNativeReflectConstruct": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/isNativeReflectConstruct.js",
      "@babel/runtime/helpers/construct": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/construct.js",
      "@babel/runtime/helpers/esm/construct": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/construct.js",
      "@babel/runtime/helpers/isNativeFunction": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/isNativeFunction.js",
      "@babel/runtime/helpers/esm/isNativeFunction": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/isNativeFunction.js",
      "@babel/runtime/helpers/wrapNativeSuper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapNativeSuper.js",
      "@babel/runtime/helpers/esm/wrapNativeSuper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/wrapNativeSuper.js",
      "@babel/runtime/helpers/instanceof": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/instanceof.js",
      "@babel/runtime/helpers/esm/instanceof": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/instanceof.js",
      "@babel/runtime/helpers/interopRequireDefault": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/interopRequireDefault.js",
      "@babel/runtime/helpers/esm/interopRequireDefault": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/interopRequireDefault.js",
      "@babel/runtime/helpers/interopRequireWildcard": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/interopRequireWildcard.js",
      "@babel/runtime/helpers/esm/interopRequireWildcard": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/interopRequireWildcard.js",
      "@babel/runtime/helpers/newArrowCheck": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/newArrowCheck.js",
      "@babel/runtime/helpers/esm/newArrowCheck": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/newArrowCheck.js",
      "@babel/runtime/helpers/objectDestructuringEmpty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectDestructuringEmpty.js",
      "@babel/runtime/helpers/esm/objectDestructuringEmpty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectDestructuringEmpty.js",
      "@babel/runtime/helpers/objectWithoutPropertiesLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectWithoutPropertiesLoose.js",
      "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectWithoutPropertiesLoose.js",
      "@babel/runtime/helpers/objectWithoutProperties": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectWithoutProperties.js",
      "@babel/runtime/helpers/esm/objectWithoutProperties": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/objectWithoutProperties.js",
      "@babel/runtime/helpers/assertThisInitialized": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/assertThisInitialized.js",
      "@babel/runtime/helpers/esm/assertThisInitialized": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/assertThisInitialized.js",
      "@babel/runtime/helpers/possibleConstructorReturn": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/possibleConstructorReturn.js",
      "@babel/runtime/helpers/esm/possibleConstructorReturn": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/possibleConstructorReturn.js",
      "@babel/runtime/helpers/createSuper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createSuper.js",
      "@babel/runtime/helpers/esm/createSuper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createSuper.js",
      "@babel/runtime/helpers/superPropBase": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/superPropBase.js",
      "@babel/runtime/helpers/esm/superPropBase": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/superPropBase.js",
      "@babel/runtime/helpers/get": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/get.js",
      "@babel/runtime/helpers/esm/get": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/get.js",
      "@babel/runtime/helpers/set": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/set.js",
      "@babel/runtime/helpers/esm/set": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/set.js",
      "@babel/runtime/helpers/taggedTemplateLiteral": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/taggedTemplateLiteral.js",
      "@babel/runtime/helpers/esm/taggedTemplateLiteral": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/taggedTemplateLiteral.js",
      "@babel/runtime/helpers/taggedTemplateLiteralLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/taggedTemplateLiteralLoose.js",
      "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/taggedTemplateLiteralLoose.js",
      "@babel/runtime/helpers/readOnlyError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/readOnlyError.js",
      "@babel/runtime/helpers/esm/readOnlyError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/readOnlyError.js",
      "@babel/runtime/helpers/writeOnlyError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/writeOnlyError.js",
      "@babel/runtime/helpers/esm/writeOnlyError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/writeOnlyError.js",
      "@babel/runtime/helpers/classNameTDZError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classNameTDZError.js",
      "@babel/runtime/helpers/esm/classNameTDZError": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classNameTDZError.js",
      "@babel/runtime/helpers/temporalUndefined": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/temporalUndefined.js",
      "@babel/runtime/helpers/esm/temporalUndefined": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/temporalUndefined.js",
      "@babel/runtime/helpers/tdz": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/tdz.js",
      "@babel/runtime/helpers/esm/tdz": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/tdz.js",
      "@babel/runtime/helpers/temporalRef": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/temporalRef.js",
      "@babel/runtime/helpers/esm/temporalRef": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/temporalRef.js",
      "@babel/runtime/helpers/slicedToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/slicedToArray.js",
      "@babel/runtime/helpers/esm/slicedToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/slicedToArray.js",
      "@babel/runtime/helpers/slicedToArrayLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/slicedToArrayLoose.js",
      "@babel/runtime/helpers/esm/slicedToArrayLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/slicedToArrayLoose.js",
      "@babel/runtime/helpers/toArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toArray.js",
      "@babel/runtime/helpers/esm/toArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toArray.js",
      "@babel/runtime/helpers/toConsumableArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toConsumableArray.js",
      "@babel/runtime/helpers/esm/toConsumableArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toConsumableArray.js",
      "@babel/runtime/helpers/arrayWithoutHoles": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayWithoutHoles.js",
      "@babel/runtime/helpers/esm/arrayWithoutHoles": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayWithoutHoles.js",
      "@babel/runtime/helpers/arrayWithHoles": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayWithHoles.js",
      "@babel/runtime/helpers/esm/arrayWithHoles": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayWithHoles.js",
      "@babel/runtime/helpers/maybeArrayLike": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/maybeArrayLike.js",
      "@babel/runtime/helpers/esm/maybeArrayLike": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/maybeArrayLike.js",
      "@babel/runtime/helpers/iterableToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArray.js",
      "@babel/runtime/helpers/esm/iterableToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArray.js",
      "@babel/runtime/helpers/iterableToArrayLimit": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArrayLimit.js",
      "@babel/runtime/helpers/esm/iterableToArrayLimit": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArrayLimit.js",
      "@babel/runtime/helpers/iterableToArrayLimitLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArrayLimitLoose.js",
      "@babel/runtime/helpers/esm/iterableToArrayLimitLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/iterableToArrayLimitLoose.js",
      "@babel/runtime/helpers/unsupportedIterableToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/unsupportedIterableToArray.js",
      "@babel/runtime/helpers/esm/unsupportedIterableToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/unsupportedIterableToArray.js",
      "@babel/runtime/helpers/arrayLikeToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayLikeToArray.js",
      "@babel/runtime/helpers/esm/arrayLikeToArray": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/arrayLikeToArray.js",
      "@babel/runtime/helpers/nonIterableSpread": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/nonIterableSpread.js",
      "@babel/runtime/helpers/esm/nonIterableSpread": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/nonIterableSpread.js",
      "@babel/runtime/helpers/nonIterableRest": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/nonIterableRest.js",
      "@babel/runtime/helpers/esm/nonIterableRest": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/nonIterableRest.js",
      "@babel/runtime/helpers/createForOfIteratorHelper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createForOfIteratorHelper.js",
      "@babel/runtime/helpers/esm/createForOfIteratorHelper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createForOfIteratorHelper.js",
      "@babel/runtime/helpers/createForOfIteratorHelperLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createForOfIteratorHelperLoose.js",
      "@babel/runtime/helpers/esm/createForOfIteratorHelperLoose": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/createForOfIteratorHelperLoose.js",
      "@babel/runtime/helpers/skipFirstGeneratorNext": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/skipFirstGeneratorNext.js",
      "@babel/runtime/helpers/esm/skipFirstGeneratorNext": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/skipFirstGeneratorNext.js",
      "@babel/runtime/helpers/toPrimitive": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toPrimitive.js",
      "@babel/runtime/helpers/esm/toPrimitive": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toPrimitive.js",
      "@babel/runtime/helpers/toPropertyKey": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toPropertyKey.js",
      "@babel/runtime/helpers/esm/toPropertyKey": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/toPropertyKey.js",
      "@babel/runtime/helpers/initializerWarningHelper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/initializerWarningHelper.js",
      "@babel/runtime/helpers/esm/initializerWarningHelper": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/initializerWarningHelper.js",
      "@babel/runtime/helpers/initializerDefineProperty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/initializerDefineProperty.js",
      "@babel/runtime/helpers/esm/initializerDefineProperty": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/initializerDefineProperty.js",
      "@babel/runtime/helpers/applyDecoratedDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/applyDecoratedDescriptor.js",
      "@babel/runtime/helpers/esm/applyDecoratedDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/applyDecoratedDescriptor.js",
      "@babel/runtime/helpers/classPrivateFieldLooseKey": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldLooseKey.js",
      "@babel/runtime/helpers/esm/classPrivateFieldLooseKey": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldLooseKey.js",
      "@babel/runtime/helpers/classPrivateFieldLooseBase": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldLooseBase.js",
      "@babel/runtime/helpers/esm/classPrivateFieldLooseBase": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldLooseBase.js",
      "@babel/runtime/helpers/classPrivateFieldGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldGet.js",
      "@babel/runtime/helpers/esm/classPrivateFieldGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldGet.js",
      "@babel/runtime/helpers/classPrivateFieldSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldSet.js",
      "@babel/runtime/helpers/esm/classPrivateFieldSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldSet.js",
      "@babel/runtime/helpers/classPrivateFieldDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldDestructureSet.js",
      "@babel/runtime/helpers/esm/classPrivateFieldDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldDestructureSet.js",
      "@babel/runtime/helpers/classExtractFieldDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classExtractFieldDescriptor.js",
      "@babel/runtime/helpers/esm/classExtractFieldDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classExtractFieldDescriptor.js",
      "@babel/runtime/helpers/classStaticPrivateFieldSpecGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldSpecGet.js",
      "@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldSpecGet.js",
      "@babel/runtime/helpers/classStaticPrivateFieldSpecSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldSpecSet.js",
      "@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldSpecSet.js",
      "@babel/runtime/helpers/classStaticPrivateMethodGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateMethodGet.js",
      "@babel/runtime/helpers/esm/classStaticPrivateMethodGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateMethodGet.js",
      "@babel/runtime/helpers/classStaticPrivateMethodSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateMethodSet.js",
      "@babel/runtime/helpers/esm/classStaticPrivateMethodSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateMethodSet.js",
      "@babel/runtime/helpers/classApplyDescriptorGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorGet.js",
      "@babel/runtime/helpers/esm/classApplyDescriptorGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorGet.js",
      "@babel/runtime/helpers/classApplyDescriptorSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorSet.js",
      "@babel/runtime/helpers/esm/classApplyDescriptorSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorSet.js",
      "@babel/runtime/helpers/classApplyDescriptorDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorDestructureSet.js",
      "@babel/runtime/helpers/esm/classApplyDescriptorDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classApplyDescriptorDestructureSet.js",
      "@babel/runtime/helpers/classStaticPrivateFieldDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldDestructureSet.js",
      "@babel/runtime/helpers/esm/classStaticPrivateFieldDestructureSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classStaticPrivateFieldDestructureSet.js",
      "@babel/runtime/helpers/classCheckPrivateStaticAccess": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCheckPrivateStaticAccess.js",
      "@babel/runtime/helpers/esm/classCheckPrivateStaticAccess": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCheckPrivateStaticAccess.js",
      "@babel/runtime/helpers/classCheckPrivateStaticFieldDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCheckPrivateStaticFieldDescriptor.js",
      "@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classCheckPrivateStaticFieldDescriptor.js",
      "@babel/runtime/helpers/decorate": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/decorate.js",
      "@babel/runtime/helpers/esm/decorate": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/decorate.js",
      "@babel/runtime/helpers/classPrivateMethodGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodGet.js",
      "@babel/runtime/helpers/esm/classPrivateMethodGet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodGet.js",
      "@babel/runtime/helpers/checkPrivateRedeclaration": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/checkPrivateRedeclaration.js",
      "@babel/runtime/helpers/esm/checkPrivateRedeclaration": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/checkPrivateRedeclaration.js",
      "@babel/runtime/helpers/classPrivateFieldInitSpec": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldInitSpec.js",
      "@babel/runtime/helpers/esm/classPrivateFieldInitSpec": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateFieldInitSpec.js",
      "@babel/runtime/helpers/classPrivateMethodInitSpec": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodInitSpec.js",
      "@babel/runtime/helpers/esm/classPrivateMethodInitSpec": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodInitSpec.js",
      "@babel/runtime/helpers/classPrivateMethodSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodSet.js",
      "@babel/runtime/helpers/esm/classPrivateMethodSet": "https://unpkg.com/@babel/runtime@7.15.4/helpers/esm/classPrivateMethodSet.js",
      "@emotion/cache": "https://unpkg.com/@emotion/cache@11.4.0/dist/emotion-cache.browser.esm.js",
      "@emotion/hash": "https://unpkg.com/@emotion/hash@0.8.0/dist/hash.browser.esm.js",
      "@emotion/is-prop-valid": "https://unpkg.com/@emotion/is-prop-valid@1.1.0/dist/emotion-is-prop-valid.browser.esm.js",
      "@emotion/memoize": "https://unpkg.com/@emotion/memoize@0.7.5/dist/emotion-memoize.browser.esm.js",
      "@emotion/react": "https://unpkg.com/@emotion/react@11.4.1/dist/emotion-react.browser.esm.js",
      "@emotion/serialize": "https://unpkg.com/@emotion/serialize@1.0.2/dist/emotion-serialize.browser.esm.js",
      "@emotion/sheet": "https://unpkg.com/@emotion/sheet@1.0.2/dist/emotion-sheet.browser.esm.js",
      "@emotion/styled": "https://unpkg.com/@emotion/styled@11.3.0/dist/emotion-styled.browser.esm.js",
      "@emotion/utils": "https://unpkg.com/@emotion/utils@1.0.0/dist/emotion-utils.browser.esm.js",
      "@emotion/unitless": "https://unpkg.com/@emotion/unitless@0.7.5/dist/unitless.browser.esm.js",
      "@emotion/weak-memoize": "https://unpkg.com/@emotion/weak-memoize@0.2.5/dist/weak-memoize.browser.esm.js",
      "@mui/material": "https://unpkg.com/@mui/material@5.0.2/index.js",
      "framer-motion": "https://unpkg.com/framer-motion@4.1.17/dist/es/index.js",
      framesync: "https://unpkg.com/framesync@6.0.0/dist/es/index.mjs",
      "hey-listen": "https://unpkg.com/hey-listen@1.0.8/dist/hey-listen.es.js",
      "hoist-non-react-statics": "https://esm.sh/hoist-non-react-statics",
      popmotion: "https://unpkg.com/popmotion@10.0.1/dist/es/index.mjs",
      react: "https://unpkg.com/@zedvision/esm@14.5.4/dist/react.mjs",
      "react-dom": "https://unpkg.com/@zedvision/esm@14.5.4/dist/react-dom.mjs",
      "react-is": "https://unpkg.com/@zedvision/esm@14.5.4/dist/react-is.mjs",
      "react-transition-group": "https://unpkg.com/react-transition-group@4.4.2/esm/index.js",
      "react/jsx-runtime": "https://esm.sh/react/jsx-runtime",
      "@zedvision/renderer": "https://unpkg.com/@zedvision/renderer@14.5.6/dist/renderer.mjs",
      "style-value-types": "https://unpkg.com/style-value-types@5.0.0/dist/es/index.mjs",
      stylis: "https://unpkg.com/stylis@4.0.10/dist/stylis.mjs",
      "@zedvision/qrious": "https://unpkg.com/@zedvision/qrious@14.5.6/dist/QRious.mjs",
      tslib: "https://unpkg.com/tslib@2.3.1/tslib.es6.js",
      "@zedvision/smart-monaco-editor": "https://unpkg.com/@zedvision/smart-monaco-editor@14.5.6/dist/editor.mjs",
      "simple-window-manager": "https://unpkg.com/simple-window-manager@2.1.2/public/simple-window-manager.min.js",
      "uuid/": "https://unpkg.com/uuid@8.3.2/dist/esm-browser/",
      "@zedvision/shadb": "https://unpkg.com/@zedvision/shadb@14.5.6/dist/shaDB.mjs",
      comlink: "https://unpkg.com/comlink@4.3.1/dist/esm/comlink.mjs",
      "@zedvision/ipfs": "https://unpkg.com/@zedvision/ipfs@14.5.6/dist/ipfs.client.mjs",
      "workbox-window": "https://unpkg.com/workbox-window@6.3.0/build/workbox-window.prod.es5.mjs"
    };
    importmap_default = {
      imports
    };
  }
});

// js/templates.mjs
var templates_exports = {};
__export(templates_exports, {
  getEditorHTML: () => getEditorHTML,
  getHtml: () => getHtml
});
function getHtml({ html: html2, css: css2 }) {
  const titleStart = html2.indexOf("<title>");
  const titleEnd = html2.indexOf("</title>");
  const hasTitle = titleStart < titleEnd && titleStart >= -1;
  const title = hasTitle ? html2.slice(titleStart, titleEnd) : "(code).spike.land :)";
  return `<!DOCTYPE html>
<html lang="en"> 
<head profile="http://www.w3.org/2005/10/profile">
<title>${title}</title>
<link rel="modulepreload" href="./app.js">  
<link rel="modulepreload" href="https://spike.land/js/codeLoader.mjs">
<link rel="icon" type="image/png" href="https://spike.land/zed-icon-big.png" />
<link rel="stylesheet" href="https://unpkg.com/modern-css-reset/dist/reset.min.css" />
<script async src="https://unpkg.com/es-module-shims@1.1.0/dist/es-module-shims.js"><\/script>
<script crossorigin src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"><\/script>
<script crossorigin src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"><\/script>
<script crossorigin src="https://unpkg.com/react-is@17.0.2/umd/react-is.production.min.js"><\/script>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="Description" content="Generated with spike.land">
<style>
.skip-link {
  position: absolute;
  top: -40px;
  left: 0;
  background: #000000;
  color: white;
  padding: 8px;
  z-index: 100;
}
.skip-link:focus {
  top: 0;
}
${css2}</style>
</head>
<body>
<a class="skip-link" href="#zbody">Jump to the page</a>
<main id="zbody">
  ${html2}
</main>
<script>window.process = {env: {NODE_ENV:"production" }}<\/script>
<script type="importmap-shim">
${JSON.stringify(importmap_default)}
<\/script>
<script type="module-shim">
  import App from './app.js';
  import {jsx} from "@emotion/react"        
  ReactDOM.render(jsx(App),document.getElementById('zbody'));
<\/script>
</body>
</html>
`;
}
var getEditorHTML;
var init_templates = __esm({
  "js/templates.mjs"() {
    init_importmap();
    getEditorHTML = () => `<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="icon" type="image/png" href="https://spike.land/zed-icon-big.png" />
  <script async src="https://unpkg.com/es-module-shims@1.1.0/dist/es-module-shims.js"><\/script>
  <script crossorigin src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"><\/script>
  <script crossorigin src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"><\/script>
  <script crossorigin src="https://unpkg.com/react-is@17.0.2/umd/react-is.production.min.js"><\/script>
<title>Instant React Editor</title>
</head>
<body>
<script>window.process = {env: {NODE_ENV:"production" }}<\/script>
<script async src="https://unpkg.com/es-module-shims@1.1.0/dist/es-module-shims.js"><\/script>
<script type="importmap-shim">
${JSON.stringify(importmap_default)}
<\/script>
<script type="module-shim">
import {edit} from "https://spike.land/js/data.mjs"
try{
  edit(location.pathname.slice(42, 52));
}catch(error){
  fetch("https://spike.land/error", {method: "POST",  body: JSON.stringify({error})})
}
<\/script>
</body>
</html>`;
  }
});

// js/share.mjs
var share_exports = {};
__export(share_exports, {
  shareItAsHtml: () => shareItAsHtml
});
async function addAll(files) {
  try {
    const res = await export_all(ipfsClient.addAll(files));
    return res.map((r) => {
      const CID = r.cid.toString();
      return { path: r.path, CID };
    });
  } catch (e) {
    console.error({ error: e });
  }
}
var shareItAsHtml;
var init_share = __esm({
  "js/share.mjs"() {
    init_shaDB();
    init_ipfsClient();
    shareItAsHtml = async ({ transpiled, code, html: html2 }) => {
      var _a2;
      const bodyClass = String((_a2 = window.document.getElementById("zbody")) == null ? void 0 : _a2.getAttribute("class"));
      let css2 = "";
      const cssRules = window.document.querySelector("head > style[data-emotion=css]");
      if (cssRules) {
        try {
          css2 = Array.from(window.document.querySelector("head > style[data-emotion=css]").sheet.cssRules).map((x3) => x3.cssText).filter((cssRule) => {
            const selector = cssRule.substring(5, 10);
            const isSelectorBody = bodyClass.indexOf(selector) !== -1;
            const isInGeneratedHtml = html2.indexOf(selector) !== -1;
            const shouldInclude = isSelectorBody || isInGeneratedHtml;
            return shouldInclude;
          }).join("\n  ").replace(`#zbody`, "body");
        } catch (e) {
          console.error({ e });
        }
      }
      const globalCssRules = window.document.querySelector("head > style[data-emotion=css-global]");
      if (globalCssRules) {
        try {
          css2 += Array.from(window.document.querySelector("head > style[data-emotion=css-global]").sheet.cssRules).map((x3) => x3.cssText).join("\n  ").replace(`#zbody`, "body");
        } catch (e) {
          console.error({ e });
        }
      }
      const { getHtml: getHtml2, getEditorHTML: getEditorHTML2 } = await Promise.resolve().then(() => (init_templates(), templates_exports));
      const allContent = [
        { path: "/app/index.html", content: getHtml2({ html: html2, css: css2 }) },
        { path: "/app/app.js", content: transpiled },
        { path: "/app/app.tsx", content: code },
        { path: "/app/edit/index.html", content: getEditorHTML2() }
      ];
      const sha = await x(JSON.stringify(allContent));
      let rootUrl = await He.get(sha, "string");
      if (rootUrl === null) {
        const res = await addAll(allContent);
        const appDir = res.find((x3) => x3.path === "app");
        if (typeof appDir === "undefined")
          return null;
        rootUrl = `https://spike.land/ipfs/${appDir.CID}`;
        const { pathname } = new URL(window.location.href);
        if (pathname.endsWith("/edit/") || pathname.endsWith("/edit")) {
          history.pushState({}, "", `/ipfs/${appDir.CID}/edit/`);
        }
        await He.put(sha, rootUrl);
      }
      const preLoad = async (retry = 3) => {
        try {
          await Promise.all([
            fetch(`${rootUrl}/app.js`).then((x3) => x3.text()),
            fetch(`${rootUrl}/edit/index.html`).then((x3) => x3.text()),
            fetch(rootUrl).then((x3) => x3.text())
          ]);
        } catch (e) {
          if (retry > 0)
            return preLoad(retry - 1);
        }
      };
      preLoad(3);
      return rootUrl;
    };
  }
});

// ../../node_modules/simple-window-manager/src/html.js
function html(options = {}) {
  const element = document.createElement(options.type || "div");
  if (options.styles) {
    Object.assign(element.style, options.styles);
  }
  if (options.className) {
    element.className = options.className;
  }
  if (options.html) {
    element.innerHTML = options.html;
  }
  if (options.parent) {
    options.parent.appendChild(element);
  }
  return element;
}
var init_html = __esm({
  "../../node_modules/simple-window-manager/src/html.js"() {
  }
});

// ../../node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "../../node_modules/eventemitter3/index.js"(exports2, module2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix2 = "~";
    function Events2() {
    }
    if (Object.create) {
      Events2.prototype = Object.create(null);
      if (!new Events2().__proto__)
        prefix2 = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events2();
      else
        delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events2();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names2 = [], events, name;
      if (this._eventsCount === 0)
        return names2;
      for (name in events = this._events) {
        if (has.call(events, name))
          names2.push(prefix2 ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names2.concat(Object.getOwnPropertySymbols(events));
      }
      return names2;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee3 = new Array(l); i < l; i++) {
        ee3[i] = handlers[i].fn;
      }
      return ee3;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length2 = listeners.length, j3;
        for (i = 0; i < length2; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j3 = 1, args = new Array(len - 1); j3 < len; j3++) {
                  args[j3 - 1] = arguments[j3];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length2 = listeners.length; i < length2; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix2 ? prefix2 + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events2();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix2;
    EventEmitter.EventEmitter = EventEmitter;
    if (typeof module2 !== "undefined") {
      module2.exports = EventEmitter;
    }
  }
});

// ../../node_modules/clicked/clicked.js
function clicked(element, callback, options) {
  return new Clicked(element, callback, options);
}
var defaultOptions, Clicked;
var init_clicked = __esm({
  "../../node_modules/clicked/clicked.js"() {
    defaultOptions = {
      threshold: 10,
      clicked: true,
      doubleClicked: false,
      doubleClickedTime: 300,
      longClicked: false,
      longClickedTime: 500,
      capture: false,
      clickDown: false
    };
    Clicked = class {
      constructor(element, callback, options) {
        if (typeof element === "string") {
          element = document.querySelector(element);
          if (!element) {
            console.warn(`Unknown element: document.querySelector(${element}) in clicked()`);
            return;
          }
        }
        this.options = Object.assign({}, defaultOptions, options);
        this.events = {
          mousedown: (e) => this.mousedown(e),
          mouseup: (e) => this.mouseup(e),
          mousemove: (e) => this.mousemove(e),
          touchstart: (e) => this.touchstart(e),
          touchmove: (e) => this.touchmove(e),
          touchcancel: (e) => this.cancel(e),
          touchend: (e) => this.touchend(e)
        };
        element.addEventListener("mousedown", this.events.mousedown, { capture: this.options.capture });
        element.addEventListener("mouseup", this.events.mouseup, { capture: this.options.capture });
        element.addEventListener("mousemove", this.events.mousemove, { capture: this.options.capture });
        element.addEventListener("touchstart", this.events.touchstart, { passive: true, capture: this.options.capture });
        element.addEventListener("touchmove", this.events.touchmove, { passive: true, capture: this.options.capture });
        element.addEventListener("touchcancel", this.events.touchcancel, { capture: this.options.capture });
        element.addEventListener("touchend", this.events.touchend, { capture: this.options.capture });
        this.element = element;
        this.callback = callback;
      }
      destroy() {
        this.element.removeEventListener("mousedown", this.events.mousedown);
        this.element.removeEventListener("mouseup", this.events.mouseup);
        this.element.removeEventListener("mousemove", this.events.mousemove);
        this.element.removeEventListener("touchstart", this.events.touchstart, { passive: true });
        this.element.removeEventListener("touchmove", this.events.touchmove, { passive: true });
        this.element.removeEventListener("touchcancel", this.events.touchcancel);
        this.element.removeEventListener("touchend", this.events.touchend);
      }
      touchstart(e) {
        if (this.down === true) {
          this.cancel();
        } else {
          if (e.touches.length === 1) {
            this.handleDown(e.changedTouches[0].screenX, e.changedTouches[0].screenY);
          }
        }
      }
      pastThreshold(x3, y) {
        return Math.abs(this.lastX - x3) > this.options.threshold || Math.abs(this.lastY - y) > this.options.threshold;
      }
      touchmove(e) {
        if (this.down) {
          if (e.touches.length !== 1) {
            this.cancel();
          } else {
            const x3 = e.changedTouches[0].screenX;
            const y = e.changedTouches[0].screenY;
            if (this.pastThreshold(x3, y)) {
              this.cancel();
            }
          }
        }
      }
      cancel() {
        this.down = false;
        if (this.doubleClickedTimeout) {
          clearTimeout(this.doubleClickedTimeout);
          this.doubleClickedTimeout = null;
        }
        if (this.longClickedTimeout) {
          clearTimeout(this.longClickedTimeout);
          this.longClickedTimeout = null;
        }
      }
      touchend(e) {
        if (this.down) {
          e.preventDefault();
          this.handleClicks(e, e.pointerId);
        }
      }
      handleClicks(e) {
        if (this.options.doubleClicked) {
          this.doubleClickedTimeout = setTimeout(() => this.doubleClickedCancel(e), this.options.doubleClickedTime);
        } else if (this.options.clicked) {
          this.callback({ event: e, type: "clicked" });
        }
        if (this.longClickedTimeout) {
          clearTimeout(this.longClickedTimeout);
          this.longClickedTimeout = null;
        }
        this.down = false;
      }
      handleDown(e, x3, y) {
        if (this.doubleClickedTimeout) {
          if (this.pastThreshold(x3, y)) {
            if (this.options.clicked) {
              this.callback({ event: e, type: "clicked" });
            }
            this.cancel();
          } else {
            this.callback({ event: e, type: "double-clicked" });
            this.cancel();
          }
        } else {
          this.lastX = x3;
          this.lastY = y;
          this.down = true;
          if (this.options.longClicked) {
            this.longClickedTimeout = setTimeout(() => this.longClicked(e), this.options.longClickedTime);
          }
          if (this.options.clickDown) {
            this.callback({ event: e, type: "click-down" });
          }
        }
      }
      longClicked(e) {
        this.longClikedTimeout = null;
        this.down = false;
        this.callback({ event: e, type: "long-clicked" });
      }
      doubleClickedCancel(e) {
        this.doubleClickedTimeout = null;
        if (this.options.clicked) {
          this.callback({ event: e, type: "double-clicked" });
        }
      }
      mousedown(e) {
        if (this.down === true) {
          this.down = false;
        } else {
          this.handleDown(e, e.screenX, e.screenY);
        }
      }
      mousemove(e) {
        if (this.down) {
          const x3 = e.screenX;
          const y = e.screenY;
          if (this.pastThreshold(x3, y)) {
            this.cancel();
          }
        }
      }
      mouseup(e) {
        if (this.down) {
          e.preventDefault();
          this.handleClicks(e);
        }
      }
    };
  }
});

// ../../node_modules/simple-window-manager/src/events.js
var init_events = __esm({
  "../../node_modules/simple-window-manager/src/events.js"() {
  }
});

// ../../node_modules/simple-window-manager/src/Menu/config.js
var config;
var init_config2 = __esm({
  "../../node_modules/simple-window-manager/src/Menu/config.js"() {
    config = {
      ApplicationContainerStyle: {
        "z-index": 999999,
        "position": "absolute",
        "top": 0,
        "left": 0,
        "user-select": "none",
        "font-size": "0.85em"
      },
      ApplicationMenuStyle: {
        "display": "flex",
        "position": "relative",
        "flex-direction": "row",
        "color": "black",
        "backgroundColor": "rgb(230,230,230)",
        "width": "100vw",
        "border": "none",
        "box-shadow": "unset",
        "outline": "none"
      },
      ApplicationMenuRowStyle: {
        "padding": "0.25em 0.5em",
        "margin": 0,
        "line-height": "1em"
      },
      MenuStyle: {
        "flex-direction": "column",
        "position": "absolute",
        "user-select": "none",
        "color": "black",
        "z-index": 999999,
        "backgroundColor": "white",
        "border": "1px solid rgba(0,0,0,0.5)",
        "boxShadow": "1px 3px 3px rgba(0,0,0,0.25)"
      },
      RowStyle: {
        "display": "flex",
        "padding": "0.25em 1.5em 0.25em",
        "line-height": "1.5em"
      },
      AcceleratorStyle: {
        "opacity": 0.5
      },
      SeparatorStyle: {
        "border-bottom": "1px solid rgba(0,0,0,0.1)",
        "margin": "0.5em 0"
      },
      AcceleratorKeyStyle: {
        "text-decoration": "underline",
        "text-decoration-color": "rgba(0,0,0,0.5)"
      },
      MinimumColumnWidth: 20,
      SelectedBackgroundStyle: "rgba(0,0,0,0.1)",
      Overlap: 5,
      SubmenuOpenDelay: 500
    };
  }
});

// ../../node_modules/simple-window-manager/src/accelerator.js
var Accelerator, accelerator;
var init_accelerator = __esm({
  "../../node_modules/simple-window-manager/src/accelerator.js"() {
    Accelerator = class {
      init() {
        if (!this.initialized) {
          this.menuKeys = {};
          this.keys = {};
          document.body.addEventListener("keydown", (e) => this._keydown(e));
          document.body.addEventListener("keyup", (e) => this._keyup(e));
          this.initialized = true;
        }
      }
      clearMenuKeys() {
        this.menuKeys = {};
      }
      clearKeys() {
        this.keys = {};
      }
      registerMenuShortcut(letter, menuItem) {
        if (letter) {
          const keyCode = (menuItem.menu.applicationMenu ? "alt+" : "") + letter;
          this.menuKeys[this._prepareKey(keyCode)] = (e) => {
            menuItem.handleClick(e);
            e.stopPropagation();
            e.preventDefault();
          };
        }
      }
      registerMenuSpecial(menu) {
        this.menuKeys["escape"] = () => menu.closeAll();
        this.menuKeys["enter"] = (e) => menu.enter(e);
        this.menuKeys["space"] = (e) => menu.enter(e);
        this.menuKeys["arrowright"] = (e) => menu.move(e, "right");
        this.menuKeys["arrowleft"] = (e) => menu.move(e, "left");
        this.menuKeys["arrowup"] = (e) => menu.move(e, "up");
        this.menuKeys["arrowdown"] = (e) => menu.move(e, "down");
      }
      registerAlt(pressed, released) {
        this.alt = { pressed, released };
      }
      unregisterMenuShortcuts() {
        this.menuKeys = {};
      }
      _prepareKey(keyCode) {
        const keys = [];
        let split;
        keyCode += "";
        if (keyCode.length > 1 && keyCode.indexOf("|") !== -1) {
          split = keyCode.split("|");
        } else {
          split = [keyCode];
        }
        for (let code of split) {
          let key = "";
          let modifiers = [];
          code = code.toLowerCase().replace(" ", "");
          if (code.indexOf("+") !== -1) {
            const split2 = code.split("+");
            for (let i = 0; i < split2.length - 1; i++) {
              let modifier = split2[i];
              modifier = modifier.replace("commandorcontrol", "ctrl");
              modifier = modifier.replace("command", "ctrl");
              modifier = modifier.replace("control", "ctrl");
              modifiers.push(modifier);
            }
            modifiers = modifiers.sort((a2, b2) => {
              return a2[0] > b2[0] ? 1 : a2[0] < b2[0] ? -1 : 0;
            });
            for (let part of modifiers) {
              key += part + "+";
            }
            key += split2[split2.length - 1];
          } else {
            key = code;
          }
          keys.push(key);
        }
        return keys;
      }
      prettifyKey(keyCode) {
        let key = "";
        const codes = this._prepareKey(keyCode);
        for (let i = 0; i < codes.length; i++) {
          const keyCode2 = codes[i];
          if (keyCode2.indexOf("+") !== -1) {
            const split = keyCode2.toLowerCase().split("+");
            for (let i3 = 0; i3 < split.length - 1; i3++) {
              let modifier = split[i3];
              key += modifier[0].toUpperCase() + modifier.substr(1) + "+";
            }
            key += split[split.length - 1].toUpperCase();
          } else {
            key = keyCode2.toUpperCase();
          }
          if (i !== codes.length - 1) {
            key += " or ";
          }
        }
        return key;
      }
      register(keyCode, callback) {
        const keys = this._prepareKey(keyCode);
        for (let key of keys) {
          this.keys[key] = (e) => {
            callback(e);
            e.preventDefault();
            e.stopPropagation();
          };
        }
      }
      _keyup(e) {
        if (this.alt && (e.code === "AltLeft" || e.code === "AltRight")) {
          this.alt.released();
          this.alt.isPressed = false;
        }
      }
      _keydown(e) {
        if (this.alt && !this.alt.isPressed && (e.code === "AltLeft" || e.code === "AltRight")) {
          this.alt.pressed();
          this.alt.isPressed = true;
          e.preventDefault();
        }
        const modifiers = [];
        if (e.altKey) {
          modifiers.push("alt");
        }
        if (e.ctrlKey) {
          modifiers.push("ctrl");
        }
        if (e.metaKey) {
          modifiers.push("meta");
        }
        if (e.shiftKey) {
          modifiers.push("shift");
        }
        let keyCode = "";
        for (let modifier of modifiers) {
          keyCode += modifier + "+";
        }
        let translate = e.code.toLowerCase();
        translate = translate.replace("digit", "");
        translate = translate.replace("key", "");
        keyCode += translate;
        if (this.menuKeys[keyCode]) {
          this.menuKeys[keyCode](e);
        } else if (this.keys[keyCode]) {
          this.keys[keyCode](e);
        }
      }
    };
    accelerator = new Accelerator();
  }
});

// ../../node_modules/simple-window-manager/src/Menu/MenuItem.js
var MenuItem;
var init_MenuItem2 = __esm({
  "../../node_modules/simple-window-manager/src/Menu/MenuItem.js"() {
    init_html();
    init_config2();
    init_accelerator();
    MenuItem = class {
      constructor(options) {
        options = options || {};
        this.styles = options.styles;
        this.div = html();
        this.type = options.type;
        this.click = options.click;
        if (this.type === "separator") {
          this.applyConfig(config.SeparatorStyle);
        } else {
          this._checked = options.checked;
          this.createChecked(options.checked);
          this.text = options.label || "&nbsp;&nbsp;&nbsp;";
          this.createShortcut();
          this.createAccelerator(options.accelerator);
          this.createSubmenu(options.submenu);
          if (options.submenu) {
            this.submenu = options.submenu;
            this.submenu.applyConfig(config.MenuStyle);
          }
          this.applyConfig(config.RowStyle);
          this.div.addEventListener("mousedown", (e) => this.handleClick(e));
          this.div.addEventListener("touchstart", (e) => this.handleClick(e));
          this.div.addEventListener("mouseenter", () => this.mouseenter());
          this.div.addEventListener("mouseleave", () => this.mouseleave());
        }
      }
      mouseenter() {
        if (!this.submenu || this.menu.showing !== this) {
          this.div.style.backgroundColor = config.SelectedBackgroundStyle;
          if (this.submenu && (!this.menu.applicationMenu || this.menu.showing)) {
            this.submenuTimeout = setTimeout(() => {
              this.submenuTimeout = null;
              this.submenu.show(this);
            }, this.menu.applicationMenu ? 0 : config.SubmenuOpenDelay);
          }
        }
      }
      mouseleave() {
        if (!this.submenu || this.menu.showing !== this) {
          if (this.submenuTimeout) {
            clearTimeout(this.submenuTimeout);
            this.submenuTimeout = null;
          }
          this.div.style.backgroundColor = "transparent";
        }
      }
      applyConfig(base) {
        const styles2 = {};
        for (let style3 in base) {
          styles2[style3] = base[style3];
        }
        if (this.styles) {
          for (let style3 in this.styles) {
            styles2[style3] = this.styles[style3];
          }
        }
        for (let style3 in styles2) {
          this.div.style[style3] = styles2[style3];
        }
      }
      createChecked(checked) {
        this.check = html({ parent: this.div, html: checked ? "&#10004;" : "" });
      }
      createShortcut() {
        if (this.type !== "separator") {
          const text = this.text;
          this.label = html({ parent: this.div });
          let current = html({ parent: this.label, type: "span" });
          if (text.indexOf("&") !== -1) {
            let i = 0;
            do {
              const letter = text[i];
              if (letter === "&") {
                i++;
                this.shortcutSpan = html({ parent: this.label, type: "span", html: text[i], styles: config.AcceleratorKeyStyle });
                current = html({ parent: this.label, type: "span" });
              } else {
                current.innerHTML += letter;
              }
              i++;
            } while (i < text.length);
          } else {
            this.label.innerHTML = text;
          }
        }
      }
      showShortcut() {
        if (this.shortcutSpan) {
          this.shortcutSpan.style.textDecoration = "underline";
        }
      }
      hideShortcut() {
        if (this.shortcutSpan) {
          this.shortcutSpan.style.textDecoration = "none";
        }
      }
      createAccelerator(acceleratorKey) {
        this.accelerator = html({ parent: this.div, html: acceleratorKey ? accelerator.prettifyKey(acceleratorKey) : "", styles: config.AcceleratorStyle });
        if (accelerator) {
          accelerator.register(acceleratorKey, (e) => this.click(e));
        }
      }
      createSubmenu(submenu) {
        this.arrow = html({ parent: this.div, html: submenu ? "&#9658;" : "" });
      }
      closeAll() {
        let menu = this.menu;
        accelerator.unregisterMenuShortcuts();
        while (menu && !menu.applicationMenu) {
          if (menu.showing) {
            menu.showing.div.style.backgroundColor = "transparent";
            menu.showing = null;
          }
          menu.div.remove();
          menu = menu.menu;
        }
        if (menu.showing) {
          menu.showing.div.style.background = "transparent";
          menu.showing = null;
          menu.hideAccelerators();
        }
      }
      handleClick(e) {
        if (this.submenu) {
          if (this.submenuTimeout) {
            clearTimeout(this.submenuTimeout);
            this.submenuTimeout = null;
          }
          this.submenu.show(this);
          this.div.style.backgroundColor = config.SelectedBackgroundStyle;
          if (typeof e !== "undefined" && this.menu.applicationMenu && document.activeElement !== this.menu.div) {
            this.menu.div.focus();
          }
          if (e) {
            e.preventDefault();
          }
        } else if (this.type === "checkbox") {
          this.checked = !this.checked;
          this.closeAll();
        } else {
          this.closeAll();
        }
        if (this.click) {
          this.click(e, this);
        }
      }
      get checked() {
        return this._checked;
      }
      set checked(value) {
        this._checked = value;
        this.check.innerHTML = this._checked ? "&#10004;" : "";
      }
    };
  }
});

// ../../node_modules/simple-window-manager/src/Menu/Menu.js
var Menu;
var init_Menu2 = __esm({
  "../../node_modules/simple-window-manager/src/Menu/Menu.js"() {
    init_config2();
    init_MenuItem2();
    init_accelerator();
    init_html();
    Menu = class {
      constructor(options) {
        accelerator.init();
        options = options || {};
        this.div = document.createElement("div");
        this.styles = options.styles;
        this.children = [];
        this.applyConfig(config.MenuStyle);
        this.div.tabIndex = -1;
      }
      append(menuItem) {
        if (menuItem.submenu) {
          menuItem.submenu.menu = this;
        }
        menuItem.menu = this;
        this.div.appendChild(menuItem.div);
        if (menuItem.type !== "separator") {
          this.children.push(menuItem);
        }
      }
      insert(pos, menuItem) {
        if (pos >= this.div.childNodes.length) {
          this.append(menuItem);
        } else {
          if (menuItem.submenu) {
            menuItem.submenu.menu = this;
          }
          menuItem.menu = this;
          this.div.insertBefore(menuItem.div, this.div.childNodes[pos]);
          if (menuItem.type !== "separator") {
            this.children.splice(pos, 0, menuItem);
          }
        }
      }
      hide() {
        let current = this.menu.showing;
        while (current && current.submenu) {
          current.div.style.backgroundColor = "transparent";
          current.submenu.div.remove();
          let next2 = current.submenu.showing;
          if (next2) {
            current.submenu.showing.div.style.backgroundColor = "transparent";
            current.submenu.showing = null;
          }
          current = next2;
        }
      }
      show(menuItem) {
        accelerator.unregisterMenuShortcuts();
        if (this.menu && this.menu.showing === menuItem) {
          this.hide();
          this.menu.showing = null;
          this.div.remove();
          this.menu.showAccelerators();
        } else {
          if (this.menu) {
            if (this.menu.showing && this.menu.children.indexOf(menuItem) !== -1) {
              this.hide();
            }
            this.menu.showing = menuItem;
            this.menu.hideAccelerators();
          }
          const div = menuItem.div;
          const parent = this.menu.div;
          if (this.menu.applicationMenu) {
            this.div.style.left = div.offsetLeft + "px";
            this.div.style.top = div.offsetTop + div.offsetHeight + "px";
          } else {
            this.div.style.left = parent.offsetLeft + parent.offsetWidth - config.Overlap + "px";
            this.div.style.top = parent.offsetTop + div.offsetTop - config.Overlap + "px";
          }
          this.attached = menuItem;
          this.showAccelerators();
          Menu.application.appendChild(this.div);
          let label = 0, accelerator2 = 0, arrow = 0, checked = 0;
          for (let child of this.children) {
            child.check.style.width = "auto";
            child.label.style.width = "auto";
            child.accelerator.style.width = "auto";
            child.arrow.style.width = "auto";
            if (child.type === "checkbox") {
              checked = config.MinimumColumnWidth;
            }
            if (child.submenu) {
              arrow = config.MinimumColumnWidth;
            }
          }
          for (let child of this.children) {
            const childLabel = child.label.offsetWidth * 2;
            label = childLabel > label ? childLabel : label;
            const childAccelerator = child.accelerator.offsetWidth;
            accelerator2 = childAccelerator > accelerator2 ? childAccelerator : accelerator2;
            if (child.submenu) {
              arrow = child.arrow.offsetWidth;
            }
          }
          for (let child of this.children) {
            child.check.style.width = checked + "px";
            child.label.style.width = label + "px";
            child.accelerator.style.width = accelerator2 + "px";
            child.arrow.style.width = arrow + "px";
          }
          if (this.div.offsetLeft + this.div.offsetWidth > window.innerWidth) {
            this.div.style.left = window.innerWidth - this.div.offsetWidth + "px";
          }
          if (this.div.offsetTop + this.div.offsetHeight > window.innerHeight) {
            this.div.style.top = window.innerHeight - this.div.offsetHeight + "px";
          }
          Menu.application.menu.div.focus();
        }
      }
      applyConfig(base) {
        const styles2 = {};
        for (let style3 in base) {
          styles2[style3] = base[style3];
        }
        if (this.styles) {
          for (let style3 in this.styles) {
            styles2[style3] = this.styles[style3];
          }
        }
        for (let style3 in styles2) {
          this.div.style[style3] = styles2[style3];
        }
      }
      showAccelerators() {
        for (let child of this.children) {
          child.showShortcut();
          if (child.type !== "separator") {
            const index = child.text.indexOf("&");
            if (index !== -1) {
              accelerator.registerMenuShortcut(child.text[index + 1], child);
            }
          }
        }
        if (!this.applicationMenu) {
          accelerator.registerMenuSpecial(this);
        }
      }
      hideAccelerators() {
        for (let child of this.children) {
          child.hideShortcut();
        }
      }
      closeAll() {
        accelerator.unregisterMenuShortcuts();
        let application = Menu.application.menu;
        if (application.showing) {
          let menu = application;
          while (menu.showing) {
            menu = menu.showing.submenu;
          }
          while (menu && !menu.applicationMenu) {
            if (menu.showing) {
              menu.showing.div.style.backgroundColor = "transparent";
              menu.showing = null;
            }
            menu.div.remove();
            menu = menu.menu;
          }
          if (menu) {
            menu.showing.div.style.background = "transparent";
            menu.showing = null;
            menu.hideAccelerators();
          }
        }
      }
      moveChild(direction) {
        let index;
        if (direction === "left") {
          const parent = this.selector.menu.menu;
          index = parent.children.indexOf(parent.showing);
          index--;
          index = index < 0 ? parent.children.length - 1 : index;
          parent.children[index].handleClick();
        } else {
          let parent = this.selector.menu.menu;
          let selector = parent.showing;
          while (!parent.applicationMenu) {
            selector.handleClick();
            selector.div.style.backgroundColor = "transparent";
            parent = parent.menu;
            selector = parent.showing;
          }
          index = parent.children.indexOf(selector);
          index++;
          index = index === parent.children.length ? 0 : index;
          parent.children[index].handleClick();
        }
        this.selector = null;
      }
      horizontalSelector(e, direction) {
        if (direction === "right") {
          if (this.selector.submenu) {
            this.selector.handleClick(e);
            this.selector.submenu.selector = this.selector.submenu.children[0];
            this.selector.submenu.selector.div.style.backgroundColor = config.SelectedBackgroundStyle;
            this.selector = null;
          } else {
            this.moveChild(direction);
          }
        } else if (direction === "left") {
          if (!this.selector.menu.menu.applicationMenu) {
            this.selector.menu.attached.handleClick(e);
            this.selector.menu.menu.selector = this.selector.menu.attached;
            this.selector = null;
          } else {
            this.moveChild(direction);
          }
        }
        e.stopPropagation();
        e.preventDefault();
      }
      move(e, direction) {
        if (this.selector) {
          this.selector.div.style.backgroundColor = "transparent";
          let index = this.children.indexOf(this.selector);
          if (direction === "down") {
            index++;
            index = index === this.children.length ? 0 : index;
          } else if (direction === "up") {
            index--;
            index = index < 0 ? this.children.length - 1 : index;
          } else {
            return this.horizontalSelector(e, direction);
          }
          this.selector = this.children[index];
        } else {
          if (direction === "up") {
            this.selector = this.children[this.children.length - 1];
          } else {
            this.selector = this.children[0];
          }
        }
        if (this.selector) {
          this.selector.div.style.backgroundColor = config.SelectedBackgroundStyle;
        }
        e.preventDefault();
        e.stopPropagation();
      }
      enter(e) {
        if (this.selector) {
          this.selector.handleClick(e);
          e.preventDefault();
          e.stopPropagation();
        }
      }
      get items() {
        return this.children;
      }
      showApplicationAccelerators() {
        this.hideAccelerators();
        accelerator.registerAlt(() => {
          if (!this.showing) {
            this.showAccelerators();
          }
        }, () => {
          this.hideAccelerators();
        });
      }
      static get config() {
        return config;
      }
      static getApplicationHeight() {
        return Menu.application ? Menu.application.offsetHeight : 0;
      }
      static setApplicationMenu(menu, parent = document.body) {
        accelerator.clearMenuKeys();
        if (Menu.application) {
          Menu.application.remove();
        }
        Menu.application = html({ parent, styles: config.ApplicationContainerStyle });
        Menu.application.menu = menu;
        menu.applyConfig(config.ApplicationMenuStyle);
        for (let child of menu.children) {
          child.applyConfig(config.ApplicationMenuRowStyle);
          if (child.arrow) {
            child.arrow.style.display = "none";
          }
          menu.div.appendChild(child.div);
        }
        Menu.application.appendChild(menu.div);
        menu.applicationMenu = true;
        menu.div.tabIndex = -1;
        menu.div.addEventListener("focus", () => {
          if (!menu.showing) {
            menu.div.blur();
          }
        });
        menu.div.addEventListener("blur", () => {
          if (menu.showing) {
            menu.closeAll();
          }
        });
        menu.showApplicationAccelerators();
      }
    };
  }
});

// ../../node_modules/simple-window-manager/src/Window.js
var import_eventemitter3, Window;
var init_Window = __esm({
  "../../node_modules/simple-window-manager/src/Window.js"() {
    import_eventemitter3 = __toModule(require_eventemitter3());
    init_clicked();
    init_events();
    init_html();
    init_Menu2();
    Window = class extends import_eventemitter3.default {
      constructor(wm, options = {}) {
        super();
        this.wm = wm;
        this.options = options;
        this.id = typeof this.options.id === "undefined" ? Window.id++ : this.options.id;
        this._createWin();
        this._createWinBox();
        this._createTitlebar();
        this._createContent();
        if (this.options.resizable) {
          this._createResize();
        }
        this._createOverlay();
        this._buildTransform();
        this._listeners();
        this.active = false;
        this.maximized = false;
        this._closed = true;
        this._restore = null;
        this._moving = null;
        this._resizing = null;
        this._attachedToScreen = { vertical: "", horziontal: "" };
      }
      open(noFocus) {
        if (this._closed) {
          this.win.style.display = "block";
          this._closed = false;
          this.emit("open", this);
          if (!noFocus) {
            this.focus();
          }
        }
      }
      focus() {
        this.active = true;
        if (this.options.titlebar) {
          this.winTitlebar.style.backgroundColor = this.options.backgroundTitlebarActive;
        }
        this.emit("focus", this);
      }
      blur() {
        this.active = false;
        if (this.options.titlebar) {
          this.winTitlebar.style.backgroundColor = this.options.backgroundTitlebarInactive;
        }
        this.emit("blur", this);
      }
      close() {
        if (!this._closed) {
          this._closed = true;
          this.win.style.display = "none";
          this.emit("close", this);
        }
      }
      get closed() {
        return this._closed;
      }
      get x() {
        return this.options.x;
      }
      set x(value) {
        if (value !== this.options.x) {
          this.options.x = value;
          this.emit("move-x", this);
          this._buildTransform();
        }
      }
      _buildTransform() {
        this.win.style.transform = `translate(${this.options.x}px,${this.options.y}px)`;
      }
      get y() {
        return this.options.y;
      }
      set y(value) {
        if (value !== this.options.y) {
          this.options.y = value;
          this._buildTransform();
          this.emit("move-y", this);
        }
      }
      get width() {
        return this.options.width || this.win.offsetWidth;
      }
      set width(value) {
        if (value !== this.options.width) {
          if (value) {
            this.win.style.width = `${value}px`;
            this.options.width = this.win.offsetWidth;
          } else {
            this.win.style.width = "auto";
            this.options.width = "";
          }
          this.emit("resize-width", this);
        }
      }
      get height() {
        return this.options.height || this.win.offsetHeight;
      }
      set height(value) {
        if (value !== this.options.height) {
          if (value) {
            this.win.style.height = `${value}px`;
            this.options.height = this.win.offsetHeight;
          } else {
            this.win.style.height = "auto";
            this.options.height = "";
          }
          this.emit("resize-height", this);
        }
      }
      resize(width2, height2) {
        this.width = width2;
        this.height = height2;
      }
      move(x3, y) {
        const keepInside = this.keepInside;
        if (keepInside) {
          if (keepInside === true || keepInside === "horizontal") {
            const width2 = this.wm.win.offsetWidth;
            x3 = x3 + this.width > width2 ? width2 - this.width : x3;
            x3 = x3 < 0 ? 0 : x3;
          }
          if (keepInside === true || keepInside === "vertical") {
            const height2 = this.wm.win.offsetHeight;
            y = y + this.height > height2 ? height2 - this.height : y;
            const top2 = Menu.getApplicationHeight();
            y = y < top2 ? top2 : y;
          }
        }
        if (x3 !== this.options.x) {
          this.options.x = x3;
          this.emit("move-x", this);
        }
        if (y !== this.options.y) {
          this.options.y = y;
          this.emit("move-y", this);
        }
        this._buildTransform();
      }
      maximize() {
        if (this.options.maximizable) {
          if (this.maximized) {
            this.x = this.maximized.x;
            this.y = this.maximized.y;
            this.width = this.maximized.width;
            this.height = this.maximized.height;
            this.maximized = null;
            this.emit("restore", this);
            this.buttons.maximize.innerHTML = this.options.maximizeButton;
          } else {
            const x3 = this.x, y = this.y, width2 = this.win.offsetWidth, height2 = this.win.offsetHeight;
            this.maximized = { x: x3, y, width: width2, height: height2 };
            this.x = 0;
            this.y = 0;
            this.width = this.wm.wallpaper.offsetWidth;
            this.height = this.wm.wallpaper.offsetHeight;
            this.emit("maximize", this);
            this.buttons.maximize.innerHTML = this.options.restoreButton;
          }
        }
      }
      sendToBack() {
        this.wm.sendToBack(this);
      }
      sendToFront() {
        this.wm.sendToFront(this);
      }
      save() {
        const data = {};
        const maximized = this.maximized;
        if (maximized) {
          data.maximized = { left: maximized.left, top: maximized.top, width: maximized.width, height: maximized.height };
        }
        data.x = this.x;
        data.y = this.y;
        if (typeof this.options.width !== "undefined") {
          data.width = this.options.width;
        }
        if (typeof this.options.height !== "undefined") {
          data.height = this.options.height;
        }
        data.closed = this._closed;
        return data;
      }
      load(data) {
        if (data.maximized) {
          if (!this.maximized) {
            this.maximize(true);
          }
        } else if (this.maximized) {
          this.maximize(true);
        }
        if (typeof data.width !== "undefined") {
          this.width = data.width;
        } else {
          this.win.style.width = "auto";
        }
        if (typeof data.height !== "undefined") {
          this.height = data.height;
        } else {
          this.win.style.height = "auto";
        }
        this.move(data.x, data.y);
        if (data.closed) {
          this.close(true);
        } else if (this.closed) {
          this.open(true, true);
        }
        this.emit("loaded");
      }
      get title() {
        return this._title;
      }
      set title(value) {
        this.winTitle.innerText = value;
        this.emit("title-change", this);
      }
      get right() {
        return this.x + this.width;
      }
      set right(value) {
        this.x = value - this.width;
      }
      get bottom() {
        return this.y + this.height;
      }
      set bottom(value) {
        this.y = value - this.height;
      }
      center(win) {
        if (win) {
          this.move(win.x + win.width / 2 - this.width / 2, win.y + win.height / 2 - this.height / 2);
        } else {
          this.move(window.innerWidth / 2 - this.width / 2, window.innerHeight / 2 - this.height / 2);
        }
      }
      _createWin() {
        this.win = html({
          parent: this.wm.win,
          styles: {
            "display": "none",
            "border-radius": this.options.borderRadius,
            "user-select": "none",
            "overflow": "hidden",
            "position": "absolute",
            "min-width": this.options.minWidth,
            "min-height": this.options.minHeight,
            "background-color": this.options.backgroundWindow,
            "width": isNaN(this.options.width) ? this.options.width : this.options.width + "px",
            "height": isNaN(this.options.height) ? this.options.height : this.options.height + "px",
            ...this.options.styles
          }
        });
      }
      _createWinBox() {
        this.winBox = html({
          parent: this.win,
          styles: {
            "display": "flex",
            "flex-direction": "column",
            "width": "100%",
            "height": "100%",
            "min-height": this.options.minHeight
          }
        });
      }
      _createContent() {
        this.content = html({
          parent: this.winBox,
          type: "section",
          styles: {
            "display": "block",
            "flex": 1,
            "min-height": this.options.minHeight,
            "overflow-x": "hidden",
            "overflow-y": "auto"
          }
        });
      }
      _createOverlay() {
        this.overlay = html({
          parent: this.win,
          styles: {
            "display": "none",
            "position": "absolute",
            "left": 0,
            "top": 0,
            "width": "100%",
            "height": "100%"
          }
        });
        this.overlay.addEventListener("mousedown", (e) => {
          this._downTitlebar(e);
          e.stopPropagation();
        });
        this.overlay.addEventListener("touchstart", (e) => {
          this._downTitlebar(e);
          e.stopPropagation();
        });
      }
      _downTitlebar(e) {
        const event = this._convertMoveEvent(e);
        this._moving = {
          x: event.pageX - this.x,
          y: event.pageY - this.y
        };
        this.emit("move-start", this);
        this._moved = false;
      }
      _createTitlebar() {
        if (this.options.titlebar) {
          this.winTitlebar = html({
            parent: this.winBox,
            type: "header",
            styles: {
              "user-select": "none",
              "display": "flex",
              "flex-direction": "row",
              "align-items": "center",
              "justify-content": "center",
              "height": this.options.titlebarHeight,
              "min-height": this.options.titlebarHeight,
              "border": 0,
              "padding": "0 8px",
              "overflow": "hidden"
            }
          });
          const winTitleStyles = {
            "user-select": "none",
            "flex": 1,
            "display": "flex",
            "flex-direction": "row",
            "align-items": "center",
            "user-select": "none",
            "cursor": "default",
            "padding": 0,
            "margin": 0,
            "font-size": "16px",
            "font-weight": 400,
            "color": this.options.foregroundTitle
          };
          if (this.options.titleCenter) {
            winTitleStyles["justify-content"] = "center";
          } else {
            winTitleStyles["padding-left"] = "8px";
          }
          this.winTitle = html({ parent: this.winTitlebar, type: "span", html: this.options.title, styles: winTitleStyles });
          this._createButtons();
          if (this.options.movable) {
            this.winTitlebar.addEventListener("mousedown", (e) => this._downTitlebar(e));
            this.winTitlebar.addEventListener("touchstart", (e) => this._downTitlebar(e));
          }
          if (this.options.maximizable) {
            clicked(this.winTitlebar, () => this.maximize(), { doubleClicked: true, clicked: false });
          }
        }
      }
      _createButtons() {
        this.winButtonGroup = html({
          parent: this.winTitlebar,
          styles: {
            "display": "flex",
            "flex-direction": "row",
            "align-items": "center",
            "padding-left": "10px"
          }
        });
        const button = {
          "display": "inline-block",
          "border": 0,
          "margin": 0,
          "margin-left": "15px",
          "padding": 0,
          "width": "12px",
          "height": "12px",
          "background-color": "transparent",
          "background-size": "cover",
          "background-repeat": "no-repeat",
          "opacity": 0.7,
          "color": this.options.foregroundButton,
          "outline": 0
        };
        this.buttons = {};
        if (this.options.maximizable) {
          this.buttons.maximize = html({ parent: this.winButtonGroup, html: this.options.maximizeButton, type: "button", styles: button });
          clicked(this.buttons.maximize, () => this.maximize());
        }
        if (this.options.closable) {
          this.buttons.close = html({ parent: this.winButtonGroup, html: this.options.closeButton, type: "button", styles: button });
          clicked(this.buttons.close, () => this.close());
        }
        for (let key in this.buttons) {
          const button2 = this.buttons[key];
          button2.addEventListener("mousemove", () => {
            button2.style.opacity = 1;
          });
          button2.addEventListener("mouseout", () => {
            button2.style.opacity = 0.7;
          });
        }
      }
      _createResize() {
        this.resizeEdge = html({
          parent: this.winBox,
          type: "button",
          html: this.options.backgroundResize,
          styles: {
            "position": "absolute",
            "bottom": 0,
            "right": "4px",
            "border": 0,
            "margin": 0,
            "padding": 0,
            "cursor": "se-resize",
            "user-select": "none",
            "height": "15px",
            "width": "10px",
            "background": "none"
          }
        });
        const down = (e) => {
          const event = this._convertMoveEvent(e);
          const width2 = this.width || this.win.offsetWidth;
          const height2 = this.height || this.win.offsetHeight;
          this._resizing = {
            width: width2 - event.pageX,
            height: height2 - event.pageY
          };
          this.emit("resize-start");
          e.preventDefault();
        };
        this.resizeEdge.addEventListener("mousedown", down);
        this.resizeEdge.addEventListener("touchstart", down);
      }
      _move(e) {
        const event = this._convertMoveEvent(e);
        if (!this._isTouchEvent(e) && e.which !== 1) {
          this._moving && this._stopMove();
          this._resizing && this._stopResize();
        }
        if (this._moving) {
          this.move(event.pageX - this._moving.x, event.pageY - this._moving.y);
          this.emit("move", this);
          e.preventDefault();
        }
        if (this._resizing) {
          this.resize(event.pageX + this._resizing.width, event.pageY + this._resizing.height);
          this.maximized = null;
          this.emit("resize", this);
          e.preventDefault();
        }
      }
      _up() {
        if (this._moving) {
          this._stopMove();
        }
        this._resizing && this._stopResize();
      }
      _listeners() {
        this.win.addEventListener("mousedown", () => this.focus());
        this.win.addEventListener("touchstart", () => this.focus());
      }
      _stopMove() {
        this._moving = null;
        this.emit("move-end", this);
      }
      _stopResize() {
        this._restore = this._resizing = null;
        this.emit("resize-end", this);
      }
      _isTouchEvent(e) {
        return !!window.TouchEvent && e instanceof window.TouchEvent;
      }
      _convertMoveEvent(e) {
        return this._isTouchEvent(e) ? e.changedTouches[0] : e;
      }
      attachToScreen(direction, location2) {
        this._attachedToScreen[direction] = location2;
      }
      reposition(bounds, keepInside) {
        this.bounds = bounds;
        this.keepInside = keepInside;
        let x3 = this.x;
        let y = this.y;
        x3 = this._attachedToScreen.horziontal === "right" ? bounds.right - this.width : x3;
        x3 = this._attachedToScreen.horizontal === "left" ? bounds.left : x3;
        y = this._attachedToScreen.vertical === "bottom" ? bounds.bottom - this.height : y;
        y = this._attachedToScreen.vertical === "top" ? bounds.top : y;
        this.move(x3, y);
      }
      isModal(ignoreClosed) {
        return (ignoreClosed || !this._closed) && this.options.modal;
      }
      isClosed() {
        return this._closed;
      }
      get z() {
        return parseInt(this.win.style.zIndex);
      }
      set z(value) {
        this.win.style.zIndex = value;
      }
    };
    Window.id = 0;
  }
});

// ../../node_modules/simple-window-manager/src/images.js
var close, maximize, resize, restore;
var init_images = __esm({
  "../../node_modules/simple-window-manager/src/images.js"() {
    close = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg width="100%" height="100%" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"><rect id="close" x="0" y="0" width="20" height="20" style="fill:none;"/><g><path d="M3.5,3.5l13,13" style="fill:none;stroke:#fff;stroke-width:3px;"/><path d="M16.5,3.5l-13,13" style="fill:none;stroke:#fff;stroke-width:3px;"/></g></svg>';
    maximize = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg width="100%" height="100%" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"><rect id="maximize" x="0" y="0" width="20" height="20" style="fill:none;"/><rect x="2" y="2" width="16" height="16" style="fill:none;stroke:#fff;stroke-width:2px;"/><rect x="2" y="2" width="16" height="3.2" style="fill:#fff;"/></svg>';
    resize = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg width="100%" height="100%" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;"><rect id="resize" x="0" y="0" width="20" height="20" style="fill:none;"/><clipPath id="_clip1"><rect x="0" y="0" width="20" height="20"/></clipPath><g clip-path="url(#_clip1)"><rect x="0" y="16.8" width="20" height="3.2" style="fill:#fff;"/><path d="M17.737,3.595l-14.142,14.142l2.263,2.263l14.142,-14.142l-2.263,-2.263Z" style="fill:#fff;"/><path d="M16.8,0l0,20l3.2,0l0,-20l-3.2,0Z" style="fill:#fff;"/><path d="M7.099,18.4l11.301,-11.123l0,11.123l-11.301,0Z" style="fill:#fff;"/></g></svg>';
    restore = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg width="100%" height="100%" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"><rect id="restore" x="0" y="0" width="20" height="20" style="fill:none;"/><g><rect x="7" y="2.5" width="10" height="10" style="fill:none;stroke:#fff;stroke-width:1.5px;"/><rect x="7" y="2.5" width="10" height="2" style="fill:#fff;"/></g><g><rect x="3" y="7.5" width="10" height="10" style="fill:none;stroke:#fff;stroke-width:1.5px;"/><g><rect x="3" y="7.5" width="10" height="2" style="fill:#fff;"/></g></g></svg>';
  }
});

// ../../node_modules/simple-window-manager/src/defaults.js
var defaultWindowOptions, defaultWindowManagerOptions;
var init_defaults2 = __esm({
  "../../node_modules/simple-window-manager/src/defaults.js"() {
    init_images();
    defaultWindowOptions = {
      x: 0,
      y: 0,
      width: void 0,
      height: void 0,
      modal: false,
      openOnCreate: true,
      id: null,
      minWidth: "200px",
      minHeight: "60px",
      borderRadius: 0,
      styles: {},
      movable: true,
      resizable: true,
      maximizable: true,
      closable: true,
      noSnap: false,
      noMenu: false,
      titlebar: true,
      titlebarHeight: "2rem",
      backgroundWindow: "#fefefe",
      backgroundTitlebarActive: "#365d98",
      backgroundTitlebarInactive: "#888888",
      foregroundButton: "#ffffff",
      foregroundTitle: "#ffffff",
      closeButton: close,
      maximizeButton: maximize,
      restoreButton: restore,
      backgroundResize: resize
    };
    defaultWindowManagerOptions = {
      quiet: false,
      keepInside: true,
      snap: true,
      noAccelerator: false,
      menu: false,
      styles: {},
      backgroundModal: "rgba(0, 0, 0, 0.6)"
    };
  }
});

// ../../node_modules/simple-window-manager/src/Snap.js
var DEFAULT_COLOR, DEFAULT_SIZE, SnapOptionsDefault, Snap;
var init_Snap = __esm({
  "../../node_modules/simple-window-manager/src/Snap.js"() {
    init_html();
    init_Menu2();
    DEFAULT_COLOR = "#a8f0f4";
    DEFAULT_SIZE = 10;
    SnapOptionsDefault = {
      screen: true,
      windows: true,
      snap: 20,
      color: DEFAULT_COLOR,
      spacing: 0,
      indicator: DEFAULT_SIZE
    };
    Snap = class {
      constructor(wm, options = {}) {
        this.wm = wm;
        this.options = { ...SnapOptionsDefault, ...options };
        this.highlights = html({ parent: this.wm.wallpaper, styles: { position: "absolute" } });
        this.horizontal = html({
          parent: this.highlights,
          styles: {
            display: "none",
            position: "absolute",
            height: `${this.options.indicator}px`,
            borderRadius: `${this.options.indicator}px`,
            backgroundColor: this.options.color
          }
        });
        this.vertical = html({
          parent: this.highlights,
          styles: {
            display: "none",
            position: "absolute",
            width: `${this.options.indicator}px`,
            borderRadius: `${this.options.indicator}px`,
            backgroundColor: this.options.color
          }
        });
        this.horizontal;
        this.showing = [];
      }
      stop() {
        this.highlights.remove();
        this.stopped = true;
      }
      addWindow(win) {
        win.on("move", () => this.move(win));
        win.on("move-end", () => this.moveEnd(win));
      }
      screenMove(rect, horizontal, vertical) {
        const top2 = Menu.getApplicationHeight();
        const width2 = this.wm.win.clientWidth;
        const height2 = this.wm.win.clientHeight;
        if (rect.left - this.options.snap <= width2 && rect.right + this.options.snap >= 0) {
          if (Math.abs(rect.top - top2) <= this.options.snap) {
            horizontal.push({ distance: Math.abs(rect.top - top2), left: 0, width: width2, top: top2, side: "top", screen: true });
          } else if (Math.abs(rect.bottom - height2) <= this.options.snap) {
            horizontal.push({ distance: Math.abs(rect.bottom - height2), left: 0, width: width2, top: height2, side: "bottom", screen: true });
          }
        }
        if (rect.top - this.options.snap <= height2 && rect.bottom + this.options.snap >= 0) {
          if (Math.abs(rect.left - 0) <= this.options.snap) {
            vertical.push({ distance: Math.abs(rect.left - 0), top: 0, height: height2, left: 0, side: "left", screen: true });
          } else if (Math.abs(rect.right - width2) <= this.options.snap) {
            vertical.push({ distance: Math.abs(rect.right - width2), top: 0, height: height2, left: width2, side: "right", screen: true });
          }
        }
      }
      windowsMove(original, rect, horizontal, vertical) {
        for (let win of this.wm.windows) {
          if (!win.options.noSnap && win !== original) {
            const rect2 = win.win.getBoundingClientRect();
            if (rect.left - this.options.snap <= rect2.right && rect.right + this.options.snap >= rect2.left) {
              if (Math.abs(rect.top - rect2.bottom) <= this.options.snap) {
                horizontal.push({ distance: Math.abs(rect.top - rect2.bottom), left: rect2.left, width: rect2.width, top: rect2.bottom, side: "top" });
                if (Math.abs(rect.left - rect2.left) <= this.options.snap) {
                  vertical.push({ distance: Math.abs(rect.left - rect2.left), top: rect2.top, height: rect2.height, left: rect2.left, side: "left", noSpacing: true });
                } else if (Math.abs(rect.right - rect2.right) <= this.options.snap) {
                  vertical.push({ distance: Math.abs(rect.right - rect2.right), top: rect2.top, height: rect2.height, left: rect2.right, side: "right", noSpacing: true });
                }
              } else if (Math.abs(rect.bottom - rect2.top) <= this.options.snap) {
                horizontal.push({ distance: Math.abs(rect.bottom - rect2.top), left: rect2.left, width: rect2.width, top: rect2.top, side: "bottom" });
                if (Math.abs(rect.left - rect2.left) <= this.options.snap) {
                  vertical.push({ distance: Math.abs(rect.left - rect2.left), top: rect2.top, height: rect2.height, left: rect2.left, side: "left", noSpacing: true });
                } else if (Math.abs(rect.right - rect2.right) <= this.options.snap) {
                  vertical.push({ distance: Math.abs(rect.right - rect2.right), top: rect2.top, height: rect2.height, left: rect2.right, side: "right", noSpacing: true });
                }
              }
            }
            if (rect.top - this.options.snap <= rect2.bottom && rect.bottom + this.options.snap >= rect2.top) {
              if (Math.abs(rect.left - rect2.right) <= this.options.snap) {
                vertical.push({ distance: Math.abs(rect.left - rect2.right), top: rect2.top, height: rect2.height, left: rect2.right, side: "left" });
                if (Math.abs(rect.top - rect2.top) <= this.options.snap) {
                  horizontal.push({ distance: Math.abs(rect.top - rect2.top), left: rect2.left, width: rect2.width, top: rect2.top, side: "top", noSpacing: true });
                } else if (Math.abs(rect.bottom - rect2.bottom) <= this.options.snap) {
                  horizontal.push({ distance: Math.abs(rect.bottom - rect2.bottom), left: rect2.left, width: rect2.width, top: rect2.bottom, side: "bottom", noSpacing: true });
                }
              } else if (Math.abs(rect.right - rect2.left) <= this.options.snap) {
                vertical.push({ distance: Math.abs(rect.right - rect2.left), top: rect2.top, height: rect2.height, left: rect2.left, side: "right" });
                if (Math.abs(rect.top - rect2.top) <= this.options.snap) {
                  horizontal.push({ distance: Math.abs(rect.top - rect2.top), left: rect2.left, width: rect2.width, top: rect2.top, side: "top", noSpacing: true });
                } else if (Math.abs(rect.bottom - rect2.bottom) <= this.options.snap) {
                  horizontal.push({ distance: Math.abs(rect.bottom - rect2.bottom), left: rect2.left, width: rect2.width, top: rect2.bottom, side: "bottom", noSpacing: true });
                }
              }
            }
          }
        }
      }
      move(win) {
        if (this.stopped || win.options.noSnap || win.isModal()) {
          return;
        }
        this.horizontal.style.display = "none";
        this.vertical.style.display = "none";
        const horizontal = [];
        const vertical = [];
        const rect = win.win.getBoundingClientRect();
        if (this.options.screen) {
          this.screenMove(rect, horizontal, vertical);
        }
        if (this.options.windows) {
          this.windowsMove(win, rect, horizontal, vertical);
        }
        if (horizontal.length) {
          horizontal.sort((a2, b2) => {
            return a2.distance - b2.distance;
          });
          const find = horizontal[0];
          this.horizontal.style.display = "block";
          this.horizontal.style.width = find.width + "px";
          this.horizontal.y = find.top - this.options.indicator / 2;
          this.horizontal.yPosition = find.top;
          this.horizontal.style.transform = `translate(${find.left}px,${this.horizontal.y}px)`;
          this.horizontal.side = find.side;
          this.horizontal.noSpacing = find.noSpacing;
          this.horizontal.screen = find.screen;
        }
        if (vertical.length) {
          vertical.sort((a2, b2) => {
            return a2.distance - b2.distance;
          });
          const find = vertical[0];
          this.vertical.style.display = "block";
          this.vertical.style.height = find.height + "px";
          this.vertical.x = find.left - this.options.indicator / 2;
          this.vertical.xPosition = find.left;
          this.vertical.style.transform = `translate(${this.vertical.x}px,${find.top}px)`;
          this.vertical.side = find.side;
          this.vertical.noSpacing = find.noSpacing;
          this.vertical.screen = find.screen;
        }
      }
      moveEnd(win) {
        if (this.stopped) {
          return;
        }
        const bounds = this.wm.bounds;
        const top2 = Menu.getApplicationHeight();
        if (this.horizontal.style.display === "block") {
          const spacing2 = this.horizontal.noSpacing ? 0 : this.options.spacing;
          switch (this.horizontal.side) {
            case "top":
              win.y = this.horizontal.yPosition + spacing2 - bounds.top + top2;
              break;
            case "bottom":
              win.bottom = Math.floor(this.horizontal.yPosition - spacing2 - bounds.top + top2);
              break;
          }
          win.attachToScreen("vertical", this.horizontal.screen ? this.horizontal.side : "");
        }
        if (this.vertical.style.display === "block") {
          const spacing2 = this.vertical.noSpacing ? 0 : this.options.spacing;
          switch (this.vertical.side) {
            case "left":
              win.x = this.vertical.xPosition + spacing2 - bounds.left;
              break;
            case "right":
              win.right = Math.floor(this.vertical.xPosition - spacing2 - bounds.left);
              break;
          }
          win.attachToScreen("horziontal", this.vertical.screen ? this.vertical.side : "");
        }
        this.horizontal.style.display = this.vertical.style.display = "none";
      }
    };
  }
});

// ../../node_modules/simple-window-manager/src/WindowManager.js
var WindowManager;
var init_WindowManager = __esm({
  "../../node_modules/simple-window-manager/src/WindowManager.js"() {
    init_html();
    init_Window();
    init_defaults2();
    init_Snap();
    init_accelerator();
    init_Menu2();
    WindowManager = class {
      constructor(options = {}, windowOptions = {}) {
        this.options = { ...defaultWindowManagerOptions, ...options };
        this.options.parent = this.options.parent || document.body;
        if (!this.options.quiet) {
          console.log("%c \u2615 simple-window-manager initialized \u2615", "color: #ff00ff");
        }
        this.windows = [];
        this.active = null;
        this._setupWin();
        this._setupWallpaper();
        this._setupModal();
        if (this.options.snap) {
          this.snap(this.options.snap === true ? {} : this.options.snap);
        }
        this.windowOptions = { ...defaultWindowOptions, ...windowOptions };
        window.addEventListener("resize", () => this.resize());
        if (!this.options.noAccelerator) {
          accelerator.init();
        }
      }
      createWindow(options = {}) {
        const win = new Window(this, { ...this.windowOptions, ...options });
        win.on("open", () => this._open(win));
        win.on("focus", () => this._focus(win));
        win.on("blur", () => this._blur(win));
        win.on("close", () => this._close(win));
        win.win.addEventListener("mousemove", (e) => this._move(e));
        win.win.addEventListener("touchmove", (e) => this._move(e));
        win.win.addEventListener("mouseup", (e) => this._up(e));
        win.win.addEventListener("touchend", (e) => this._up(e));
        if (this._snap && !options.noSnap) {
          this._snap.addWindow(win);
        }
        win.reposition(this.bounds, this.options.keepInside);
        if (win.options.openOnCreate) {
          win.open();
        }
        return win;
      }
      snap(options) {
        this._snap = new Snap(this, options);
        for (const win of this.windows) {
          if (!win.options.noSnap) {
            this._snap.addWindow(win);
          }
        }
      }
      sendToFront(win) {
        const index = this.windows.indexOf(win);
        console.assert(index !== -1, "sendToFront should find window in this.windows");
        if (index !== this.windows.length - 1) {
          this.windows.splice(index, 1);
          this.windows.push(win);
          this._reorder();
        }
      }
      sendToBack(win) {
        const index = this.windows.indexOf(win);
        console.assert(index !== -1, "sendToFront should find window in this.windows");
        if (index !== 0) {
          this.windows.splice(index, 1);
          this.windows.unshift(win);
          this._reorder();
        }
      }
      save() {
        const data = {};
        for (let i = 0; i < this.windows.length; i++) {
          const win = this.windows[i];
          data[win.id] = win.save();
          data[win.id].order = i;
        }
        return data;
      }
      load(data) {
        for (const id in data) {
          const win = this.getWindowById(id);
          if (win) {
            win.load(data[id]);
          }
        }
      }
      closeAll() {
        for (let win of this.windows) {
          win.close();
        }
        this.windows = [];
        this.active = null;
      }
      _reorder() {
        let i = 0;
        for (const win of this.windows) {
          if (!win.isClosed()) {
            win.z = i++;
          }
        }
      }
      _setupWin() {
        this.win = html({
          parent: this.options.parent,
          styles: {
            ...{
              "user-select": "none",
              "width": "100%",
              "height": "100%",
              "overflow": "hidden",
              "z-index": -1,
              "cursor": "default"
            },
            ...this.options.styles
          }
        });
      }
      _setupWallpaper() {
        this.wallpaper = html({
          parent: this.win,
          styles: {
            ...{
              "user-select": "none",
              "position": "absolute",
              "top": 0,
              "left": 0,
              "width": "100%",
              "height": "100%",
              "overflow": "hidden"
            }
          }
        });
        this.wallpaper.addEventListener("mousemove", (e) => this._move(e));
        this.wallpaper.addEventListener("touchmove", (e) => this._move(e));
        this.wallpaper.addEventListener("mouseup", (e) => this._up(e));
        this.wallpaper.addEventListener("touchend", (e) => this._up(e));
      }
      _setupModal() {
        this.modalOverlay = html({
          parent: this.win,
          styles: {
            "display": "none",
            "user-select": "none",
            "position": "absolute",
            "top": 0,
            "left": 0,
            "width": "100%",
            "height": "100%",
            "overflow": "hidden",
            "background": this.options.backgroundModal
          }
        });
        this.modalOverlay.addEventListener("mousemove", (e) => {
          this._move(e);
          e.preventDefault();
          e.stopPropagation();
        });
        this.modalOverlay.addEventListener("touchmove", (e) => {
          this._move(e);
          e.preventDefault();
          e.stopPropagation();
        });
        this.modalOverlay.addEventListener("mouseup", (e) => {
          this._up(e);
          e.preventDefault();
          e.stopPropagation();
        });
        this.modalOverlay.addEventListener("touchend", (e) => {
          this._up(e);
          e.preventDefault();
          e.stopPropagation();
        });
        this.modalOverlay.addEventListener("mousedown", (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
        this.modalOverlay.addEventListener("touchstart", (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
      }
      _open(win) {
        this.windows.push(win);
        this._reorder();
        if (win.options.modal) {
          this.modalOverlay.style.display = "block";
          this.modalOverlay.style.zIndex = win.z;
        } else {
          this.modalOverlay.style.display = "none";
        }
      }
      _focus(win) {
        if (this.active === win) {
          return;
        }
        if (this.active) {
          this.active.blur();
        }
        const index = this.windows.indexOf(win);
        console.assert(index !== -1, "WindowManager._focus should find window in this.windows");
        if (index !== this.windows.length - 1) {
          this.windows.splice(index, 1);
          this.windows.push(win);
        }
        this._reorder();
        this.active = this.windows[this.windows.length - 1];
      }
      _blur(win) {
        if (this.active === win) {
          this.active = null;
        }
      }
      _close(win) {
        if (win.isModal(true)) {
          const next2 = this.windows[this.windows.length - 1];
          if (next2 && next2.isModal()) {
            this.modalOverlay.style.zIndex = next2.z;
          } else {
            this.modalOverlay.style.display = "none";
          }
        }
      }
      _move(e) {
        for (const key in this.windows) {
          this.windows[key]._move(e);
        }
      }
      _up(e) {
        for (const key in this.windows) {
          this.windows[key]._up(e);
        }
      }
      checkModal(win) {
        return !this.modal || this.modal === win;
      }
      get bounds() {
        const top2 = Menu.getApplicationHeight();
        return {
          top: this.win.offsetTop + top2,
          bottom: this.win.offsetTop + this.win.offsetHeight,
          left: this.win.offsetLeft,
          right: this.win.offsetLeft + this.win.offsetWidth
        };
      }
      resize() {
        const bounds = this.bounds;
        for (const key in this.windows) {
          this.windows[key].reposition(bounds, this.options.keepInside);
        }
      }
      getWindowById(id) {
        return this.windows.find((win) => win.id === id);
      }
    };
  }
});

// ../../node_modules/simple-window-manager/src/index.js
var src_exports = {};
__export(src_exports, {
  Menu: () => Menu,
  MenuItem: () => MenuItem,
  Window: () => Window,
  WindowManager: () => WindowManager,
  accelerator: () => accelerator
});
var init_src = __esm({
  "../../node_modules/simple-window-manager/src/index.js"() {
    init_WindowManager();
    init_Window();
    init_Menu2();
    init_MenuItem2();
    init_accelerator();
  }
});

// ../../node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "../../node_modules/uuid/lib/rng-browser.js"(exports2, module2) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module2.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module2.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// ../../node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "../../node_modules/uuid/lib/bytesToUuid.js"(exports2, module2) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i3 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]]
      ].join("");
    }
    module2.exports = bytesToUuid;
  }
});

// ../../node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "../../node_modules/uuid/v4.js"(exports2, module2) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v42(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii2 = 0; ii2 < 16; ++ii2) {
          buf[i + ii2] = rnds[ii2];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module2.exports = v42;
  }
});

// js/data.mjs
async function getUserId() {
  if (uuid)
    return uuid;
  const newID = await He.get("uuid", "string");
  if (!newID) {
    const resp = await fetch("https://spike.land/register");
    const data = await resp.json();
    if (uuid)
      return uuid;
    uuid = data.uuid;
    await He.put("uuid", data.uuid);
    return data.uuid;
  }
  return newID;
}
async function getActiveProject() {
  if (activeProject)
    return activeProject;
  const projects = await getProjects();
  if (projects.rootUrl)
    return projects;
  activeProject = projects[0];
  return activeProject;
}
async function getIPFSCodeToLoad(_rootUrl) {
  const rootUrl = _rootUrl || (window.location.href.endsWith("/edit/") ? window.location.href.slice(0, -5) : window.location.href.slice(0, -4));
  const codeReq = await fetch(rootUrl + "app.tsx");
  const code = await codeReq.text();
  const ret = {
    code,
    url: rootUrl,
    transpiled: "",
    html: ""
  };
  console.log({ ret });
  return ret;
}
async function getCodeToLoad() {
  const projectName = await getActiveProject();
  if (projectName.rootUrl) {
    return getIPFSCodeToLoad(projectName.rootUrl);
  }
  const keyToLoad = await He.get(projectName, "string");
  let projectDesc;
  try {
    projectDesc = await He.get(keyToLoad, "json");
  } catch (e) {
    const data2 = {
      code: projectDesc,
      transpiled: null,
      html: null
    };
    return data2;
  }
  if (projectDesc !== null && projectDesc !== void 0) {
    const data2 = {
      code: await He.get(projectDesc.code, "string") || await getStarter(),
      transpiled: await He.get(projectDesc.transpiled, "string") || "",
      html: await He.get(projectDesc.html, "string") || ""
    };
    return data2;
  }
  const data = {
    code: await He.get(projectDesc, "string") || await getStarter(),
    transpiled: null,
    html: null
  };
  return data;
}
function getStarter() {
  return fetch(`./js/examples/rca.tsx`).then((res) => res.text());
}
var import_v4, uuid, getProjects, activeProject, saved, toSave, saveCode;
var init_data = __esm({
  "js/data.mjs"() {
    init_shaDB();
    import_v4 = __toModule(require_v4());
    init_ipfsClient();
    getProjects = async () => {
      uuid = await getUserId();
      const userData = await He.get(uuid, "json");
      let appHash = null;
      if (userData && userData.signal) {
        return userData.signal;
        He;
      }
      if (typeof userData === "string" || userData === null || !userData.list) {
        const projectId = (0, import_v4.default)();
        await He.put(uuid, JSON.stringify({
          ...userData,
          list: [projectId],
          [projectId]: {
            lastOpen: Date.now()
          }
        }));
        if (appHash !== null)
          await He.put(projectId, appHash);
        return [projectId];
      }
      if (appHash !== null)
        await He.put(userData.list[0], appHash);
      return userData.list;
    };
    saved = {
      code: "",
      html: null,
      transpiled: null,
      url: null
    };
    toSave = {
      code: "",
      html: null,
      transpiled: null
    };
    saveCode = async (opts, counter2) => {
      const { code, html: html2, transpiled } = opts;
      toSave.code = code || await getStarter();
      if (opts.i > counter2)
        return;
      if (opts.code !== toSave.code) {
        return null;
      }
      if (toSave.code === saved.code && saved.url !== null) {
        return saved.url;
      }
      toSave.code = opts.code;
      const saveCode2 = async () => {
        const res = await ipfsClient.add(code, { onlyHash: true });
        const CID = res.cid.toString();
        const UID = await getUserId();
        const url2 = `/save/${CID}`;
        fetch(`https://spike.land${url2}`, {
          method: "POST",
          headers: {
            UID
          },
          body: code
        });
      };
      saveCode2();
      const { shareItAsHtml: shareItAsHtml2 } = await Promise.resolve().then(() => (init_share(), share_exports));
      const sharePromise = shareItAsHtml2({ code, html: html2, transpiled });
      if (opts.i > counter2)
        return;
      const url = await sharePromise;
      const projectName = await getActiveProject();
      if (opts.i > counter2)
        return;
      opts.url = url;
      const desc = {
        url: await x(url),
        code: await x(code),
        html: await x(html2),
        transpiled: await x(transpiled)
      };
      const hash2 = await x(JSON.stringify(desc));
      await He.put(hash2, JSON.stringify(desc));
      if (code) {
        await He.put(desc.code, code);
      }
      if (html2) {
        await He.put(desc.html, html2);
      }
      if (transpiled) {
        await He.put(desc.transpiled, transpiled);
      }
      await He.put(projectName, hash2);
      Object.assign(saved, { html: html2, code, transpiled, url });
      return saved;
    };
  }
});

// js/hash.mjs
var hash_exports = {};
__export(hash_exports, {
  CID: () => export_CID,
  fetchSignal: () => fetchSignal,
  sendSignal: () => sendSignal,
  sha256ToCid: () => sha256ToCid
});
function sha256ToCid(hash2) {
  return new export_CID(0, 112, Cb("1220" + hash2)).toString();
}
async function sendSignal(signal, data) {
  log(`sending signal: ${signal}`);
  if (data) {
    log(`sending data as well....`);
    let toSave2 = data;
    if (typeof data !== "string")
      toSave2 = JSON.stringify(data);
    log(toSave2);
    const dataCid = (await ipfsClient.add(toSave2)).cid.toString();
    const { pathname } = new URL(signal);
    await fetch(`https://spike.land/signal/?cid=${dataCid}&signal=${pathname.slice(1)}`);
    fetch(`https://spike.land/ipfs/${dataCid}`);
  }
  const { path } = await ipfsClient.add(signal);
  log(`signal sent --- ${path}`);
  return { success: true };
}
async function fetchSignal(signal, _retry) {
  if (typeof window === "undefined")
    return;
  const retry = typeof _retry === "number" ? _retry : 999;
  try {
    if (retry === 0) {
      throw new Error("No more retry");
    }
    const res = await ipfsClient.add(signal, { onlyHash: true });
    const resCID = res.cid.toString();
    await ipfsCat(resCID, { timeout: 1500 });
    const smallSignal = signal.slice(-8);
    const cid = await fetch(`https://spike.land/signal?signal=${smallSignal}&securityrandomparam=${Math.random() * 1e4}`).then((x3) => x3.text());
    const resData = await fetch(`https://spike.land/ipfs/${cid}`).then((x3) => x3.text());
    return () => parse3(resData);
  } catch (e) {
    if (retry > 1)
      return fetchSignal(signal, retry - 1);
  }
}
function parse3(d) {
  try {
    if (typeof d !== "string")
      return d;
    const ret = JSON.parse(d);
    return ret;
  } catch (e) {
    return d;
  }
}
var log;
var init_hash = __esm({
  "js/hash.mjs"() {
    init_ipfsClient();
    log = (msg) => {
      if (typeof mgs === "string")
        console.log(msg);
      else if (typeof msg === "object")
        console.table({ msg });
      else
        console.log(msg);
    };
  }
});

// js/sendSignalToQrCode.mjs
var sendSignalToQrCode_exports = {};
__export(sendSignalToQrCode_exports, {
  getZkey: () => getZkey,
  sendSignalToQrCode: () => sendSignalToQrCode
});
async function sendSignalToQrCode(session) {
  const { searchParams } = new URL(window.location.href);
  const maybeRoute = searchParams.get("signalToQr") || "";
  const isKey = maybeRoute.length === 8 && [...maybeRoute].filter((x3) => x3 < "0" || x3 > "f").length === 0;
  if (!isKey)
    return;
  await saveCode(session);
  const { sendSignal: sendSignal2 } = await Promise.resolve().then(() => (init_hash(), hash_exports));
  const signal = `https://spike.land/${maybeRoute}`;
  await sendSignal2(signal, {
    rootUrl: `${session.url}edit/`,
    signals: {
      onChange: "url",
      onLogout: "url"
    }
  });
}
async function getZkey(hash2) {
  const uuid2 = await getUserId();
  const uKey = await x(uuid2);
  const gKey = await x(hash2 + uKey);
  const vKey = await x(hash2 + uuid2);
  return `${hash2}${uKey}${gKey}${vKey}`;
}
var init_sendSignalToQrCode = __esm({
  "js/sendSignalToQrCode.mjs"() {
    init_data();
    init_shaDB();
  }
});

// js/renderPreviewWindow.mjs
async function renderPreviewWindow(session) {
  const {
    DraggableWindow: DraggableWindow2,
    jsx: jsx3,
    render: render3
  } = await Promise.resolve().then(() => (init_renderer(), renderer_exports));
  const onShare = async () => {
    const { shareItAsHtml: shareItAsHtml2 } = await Promise.resolve().then(() => (init_share(), share_exports));
    const link = await shareItAsHtml2({
      code: session.code,
      transpiled: session.transpiled,
      html: session.html
    });
    open(link + "/");
  };
  let preview = window.document.getElementById("preview");
  if (!preview) {
    const element = window.document.createElement("div");
    window.document.body.appendChild(element);
    preview = element;
  }
  render3(jsx3(DraggableWindow2, {
    onShare,
    session,
    onRestore: () => {
      const { monaco } = window;
      const modelUri = monaco.Uri.parse(`file:///main.tsx`);
      const model = monaco.editor.getModel(modelUri);
      model.setValue(session.code);
    },
    position: session.mode === "window" ? "fixed" : "absolute"
  }), preview);
}

// js/openWindows.mjs
async function openWindows() {
  const WM = await Promise.resolve().then(() => (init_src(), src_exports));
  const WindowManager2 = WM.WindowManager ? WM.WindowManager : window.WindowManager;
  const wm = new WindowManager2({ backgroundWindow: "green" });
  wm.snap(false);
  const win = wm.createWindow({
    titlebarHeight: "42px",
    width: 720,
    closable: false,
    borderRadius: "0px",
    overflow: "hidden",
    backgroundWindow: "#1e1e1e",
    height: "100vh",
    title: "app.tsx"
  });
  win.content.innerHTML = `<div style="min-height: 20px;  min-width: 600px; height: ${isMobile() ? "2000px" : "calc(100%)"}; width:100%; display: block; overflow: hidden;" id="editor"></div>`;
  if (!isMobile()) {
    try {
      const element = window.document.querySelector("body > div:nth-child(2) > div:nth-child(3) > div:nth-child(1) > section");
      if (element !== null) {
        element.style.overflow = "";
      }
    } catch (e) {
      console.error({ e });
    }
  }
  (function(global2) {
    if (typeof global2 === "undefined") {
      throw new Error("window is undefined");
    }
    var _hash = "!";
    var noBackPlease = function() {
      global2.location.href += "#";
      global2.setTimeout(function() {
        global2.location.href += "!";
      }, 50);
    };
    global2.onhashchange = function() {
      if (global2.location.hash !== _hash) {
        global2.location.hash = _hash;
      }
    };
    global2.onload = function() {
      noBackPlease();
      document.body.onkeydown = function(e) {
        var elm = e.target.nodeName.toLowerCase();
        if (e.which === 8 && (elm !== "input" && elm !== "textarea")) {
          e.preventDefault();
        }
        e.stopPropagation();
      };
    };
  })(window);
}
function isMobile() {
  if (typeof window === "undefined") {
    return false;
  }
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent);
}

// js/codeLoader.mjs
init_data();

// ../../node_modules/comlink/dist/esm/comlink.mjs
var proxyMarker = Symbol("Comlink.proxy");
var createEndpoint = Symbol("Comlink.endpoint");
var releaseProxy = Symbol("Comlink.releaseProxy");
var throwMarker = Symbol("Comlink.thrown");
var isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";
var proxyTransferHandler = {
  canHandle: (val) => isObject(val) && val[proxyMarker],
  serialize(obj) {
    const { port1, port2 } = new MessageChannel();
    expose(obj, port1);
    return [port2, [port2]];
  },
  deserialize(port2) {
    port2.start();
    return wrap2(port2);
  }
};
var throwTransferHandler = {
  canHandle: (value) => isObject(value) && throwMarker in value,
  serialize({ value }) {
    let serialized;
    if (value instanceof Error) {
      serialized = {
        isError: true,
        value: {
          message: value.message,
          name: value.name,
          stack: value.stack
        }
      };
    } else {
      serialized = { isError: false, value };
    }
    return [serialized, []];
  },
  deserialize(serialized) {
    if (serialized.isError) {
      throw Object.assign(new Error(serialized.value.message), serialized.value);
    }
    throw serialized.value;
  }
};
var transferHandlers = new Map([
  ["proxy", proxyTransferHandler],
  ["throw", throwTransferHandler]
]);
function expose(obj, ep = self) {
  ep.addEventListener("message", function callback(ev) {
    if (!ev || !ev.data) {
      return;
    }
    const { id, type, path } = Object.assign({ path: [] }, ev.data);
    const argumentList = (ev.data.argumentList || []).map(fromWireValue);
    let returnValue;
    try {
      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);
      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);
      switch (type) {
        case "GET":
          {
            returnValue = rawValue;
          }
          break;
        case "SET":
          {
            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
            returnValue = true;
          }
          break;
        case "APPLY":
          {
            returnValue = rawValue.apply(parent, argumentList);
          }
          break;
        case "CONSTRUCT":
          {
            const value = new rawValue(...argumentList);
            returnValue = proxy(value);
          }
          break;
        case "ENDPOINT":
          {
            const { port1, port2 } = new MessageChannel();
            expose(obj, port2);
            returnValue = transfer(port1, [port1]);
          }
          break;
        case "RELEASE":
          {
            returnValue = void 0;
          }
          break;
        default:
          return;
      }
    } catch (value) {
      returnValue = { value, [throwMarker]: 0 };
    }
    Promise.resolve(returnValue).catch((value) => {
      return { value, [throwMarker]: 0 };
    }).then((returnValue2) => {
      const [wireValue, transferables] = toWireValue(returnValue2);
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
      if (type === "RELEASE") {
        ep.removeEventListener("message", callback);
        closeEndPoint(ep);
      }
    });
  });
  if (ep.start) {
    ep.start();
  }
}
function isMessagePort(endpoint) {
  return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
  if (isMessagePort(endpoint))
    endpoint.close();
}
function wrap2(ep, target) {
  return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
  if (isReleased) {
    throw new Error("Proxy has been released and is not useable");
  }
}
function createProxy(ep, path = [], target = function() {
}) {
  let isProxyReleased = false;
  const proxy2 = new Proxy(target, {
    get(_target, prop) {
      throwIfProxyReleased(isProxyReleased);
      if (prop === releaseProxy) {
        return () => {
          return requestResponseMessage(ep, {
            type: "RELEASE",
            path: path.map((p) => p.toString())
          }).then(() => {
            closeEndPoint(ep);
            isProxyReleased = true;
          });
        };
      }
      if (prop === "then") {
        if (path.length === 0) {
          return { then: () => proxy2 };
        }
        const r = requestResponseMessage(ep, {
          type: "GET",
          path: path.map((p) => p.toString())
        }).then(fromWireValue);
        return r.then.bind(r);
      }
      return createProxy(ep, [...path, prop]);
    },
    set(_target, prop, rawValue) {
      throwIfProxyReleased(isProxyReleased);
      const [value, transferables] = toWireValue(rawValue);
      return requestResponseMessage(ep, {
        type: "SET",
        path: [...path, prop].map((p) => p.toString()),
        value
      }, transferables).then(fromWireValue);
    },
    apply(_target, _thisArg, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const last3 = path[path.length - 1];
      if (last3 === createEndpoint) {
        return requestResponseMessage(ep, {
          type: "ENDPOINT"
        }).then(fromWireValue);
      }
      if (last3 === "bind") {
        return createProxy(ep, path.slice(0, -1));
      }
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "APPLY",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    },
    construct(_target, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "CONSTRUCT",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    }
  });
  return proxy2;
}
function myFlat(arr) {
  return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
  const processed = argumentList.map(toWireValue);
  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
var transferCache = new WeakMap();
function transfer(obj, transfers) {
  transferCache.set(obj, transfers);
  return obj;
}
function proxy(obj) {
  return Object.assign(obj, { [proxyMarker]: true });
}
function toWireValue(value) {
  for (const [name, handler] of transferHandlers) {
    if (handler.canHandle(value)) {
      const [serializedValue, transferables] = handler.serialize(value);
      return [
        {
          type: "HANDLER",
          name,
          value: serializedValue
        },
        transferables
      ];
    }
  }
  return [
    {
      type: "RAW",
      value
    },
    transferCache.get(value) || []
  ];
}
function fromWireValue(value) {
  switch (value.type) {
    case "HANDLER":
      return transferHandlers.get(value.name).deserialize(value.value);
    case "RAW":
      return value.value;
  }
}
function requestResponseMessage(ep, msg, transfers) {
  return new Promise((resolve) => {
    const id = generateUUID();
    ep.addEventListener("message", function l(ev) {
      if (!ev.data || !ev.data.id || ev.data.id !== id) {
        return;
      }
      ep.removeEventListener("message", l);
      resolve(ev.data);
    });
    if (ep.start) {
      ep.start();
    }
    ep.postMessage(Object.assign({ id }, msg), transfers);
  });
}
function generateUUID() {
  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");
}

// js/transpile.mjs
init_getWorker();
var { workerSrc: workerSrc2, forceNormalWorker: forceNormalWorker2 } = getWorker("transpile.worker.js");
var transform3 = null;
async function transpileCode(code) {
  if (transform3 === null) {
    await init();
    return transpileCode(code);
  }
  const transformed = await transform3(code);
  return transformed;
}
async function init() {
  if (forceNormalWorker2 || typeof SharedWorker === "undefined") {
    const worker2 = new Worker(workerSrc2);
    const { port1, port2 } = new MessageChannel();
    const msg = {
      comlinkInit: true,
      port: port1
    };
    worker2.postMessage(msg, [port1]);
    transform3 = await wrap2(port2);
    return transform3;
  }
  const worker = new SharedWorker(workerSrc2);
  worker.port.start();
  transform3 = await wrap2(worker.port);
  return transform3;
}

// js/formatter.mjs
init_getWorker();
var { workerSrc: workerSrc3, forceNormalWorker: forceNormalWorker3 } = getWorker("prettierWorker.js");
var format = null;
async function formatter(code) {
  if (format === null) {
    await init2();
    return formatter(code);
  }
  const formatted = await format(code);
  return formatted;
}
async function init2() {
  if (format) {
    console.log("INIT INIT");
  }
  if (forceNormalWorker3 || typeof SharedWorker === "undefined") {
    const worker2 = new Worker(workerSrc3);
    const { port1, port2 } = new MessageChannel();
    const msg = {
      comlinkInit: true,
      port: port1
    };
    worker2.postMessage(msg, [port1]);
    format = await wrap2(port2);
    return format;
  }
  const worker = new SharedWorker(workerSrc3);
  worker.port.start();
  format = await wrap2(worker.port);
  return format;
}

// js/codeLoader.mjs
var import_react51 = __toModule(require_react());

// ../smart-monaco-editor/dist/editor.mjs
var getMonaco = async () => {
  const importScript = (src, res = []) => {
    if (typeof window === "undefined")
      return {};
    return window.document.head.querySelector(`script[src="${src}"]`) && window || new Promise(function(resolve, reject) {
      const s = window.document.createElement("script");
      s.src = src;
      s.async = "async";
      s.type = "application/javascript";
      s.onload = () => {
        if (res.length === 0) {
          resolve(window);
        }
        const ret = {};
        res.forEach((x3) => Object.assign(ret, window[x3]));
        resolve(ret);
      };
      s.onerror = reject;
      window.document.head.appendChild(s);
    });
  };
  const vsPath = `https://unpkg.com/monaco-editor@0.28.1/min/vs`;
  const { require: require2 } = await importScript(`${vsPath}/loader.js`);
  require2.config({ paths: { "vs": vsPath } });
  const monaco = await new Promise((resolve) => require2(["vs/editor/editor.main"], (_m) => resolve(_m)));
  return monaco;
};
var editor_default = async ({ onChange, code, language, container, options }) => {
  const monaco = await getMonaco();
  const modelUri = monaco.Uri.parse(language === "typescript" ? "file:///main.tsx" : "file:///main.html");
  const createModel = () => monaco.editor.createModel(code, language, modelUri);
  const getModel = () => {
    try {
      let model2 = monaco.editor.getModel();
      if (model2)
        return model2;
      return createModel();
    } catch (e) {
      return createModel();
    }
  };
  const model = getModel();
  if (!container)
    return;
  const modules = {
    monaco,
    editor: monaco.editor.create(container, {
      formatOnType: false,
      scrollbar: {
        horizontal: "hidden",
        verticalHasArrows: true,
        verticalScrollbarSize: 20
      },
      minimap: {
        enabled: true,
        side: "right",
        size: "fit",
        showSlider: "always"
      },
      folding: true,
      glyphMargin: false,
      wordWrap: "off",
      mouseWheelZoom: false,
      wordWrapColumn: 80,
      useTabStops: false,
      dragAndDrop: true,
      disableLayerHinting: true,
      formatOnPaste: false,
      showUnused: true,
      automaticLayout: true,
      scrollBeyondLastLine: false,
      autoIndent: "full",
      accessibilitySupport: "off",
      autoClosingQuotes: "beforeWhitespace",
      padding: {
        bottom: 300
      },
      lineNumbers: "on",
      autoClosingBrackets: "beforeWhitespace",
      autoClosingOvertype: "auto",
      suggest: {},
      codeLens: true,
      autoSurround: "languageDefined",
      trimAutoWhitespace: false,
      codeActionsOnSaveTimeout: 100,
      model,
      value: code,
      language,
      theme: "vs-dark",
      ...options
    })
  };
  modules.editor.onDidChangeModelContent(() => onChange(modules.editor.getValue()));
  modules.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
    noSuggestionDiagnostics: true,
    noSemanticValidation: true,
    noSyntaxValidation: true
  });
  if (language === "typescript") {
    const importHelper = [
      {
        name: "react",
        url: "https://unpkg.com/@types/react@17.0.26/index.d.ts",
        depend: ["global", "csstype", "react-dom", "prop-types"]
      },
      {
        name: "react/jsx-dev-runtime",
        url: "https://unpkg.com/@types/react@17.0.26/jsx-dev-runtime.d.ts",
        depend: ["global", "csstype", "react-dom", "prop-types"]
      },
      {
        name: "react-exp  ",
        url: "https://unpkg.com/@types/react@17.0.26/experimental.d.ts",
        depend: []
      },
      {
        name: "global",
        url: "https://unpkg.com/@types/react@17.0.26/global.d.ts",
        depend: []
      },
      {
        name: "prop-types",
        url: "https://unpkg.com/@types/prop-types@15.7.3/index.d.ts",
        depend: []
      },
      {
        name: "react-dom",
        url: "https://unpkg.com/@types/react-dom@17.0.9/index.d.ts",
        depend: []
      },
      {
        name: "csstype",
        url: "https://unpkg.com/csstype@3.0.9/index.d.ts",
        depend: []
      },
      {
        name: "@emotion/styled/base.d.ts",
        url: "https://unpkg.com/@emotion/styled@11.3.0/types/base.d.ts",
        depend: [
          "@emotion/react",
          "@emotion/serialize",
          "react"
        ]
      },
      {
        name: "@emotion/styled/index.d.ts",
        url: "https://unpkg.com/@emotion/styled@11.3.0/types/index.d.ts",
        depend: [
          "@emotion/react",
          "@emotion/serialize",
          "react"
        ]
      },
      {
        name: "@emotion/cache/index.d.ts",
        url: "https://unpkg.com/@emotion/cache@11.4.0/types/index.d.ts",
        depend: ["@emotion/utils"]
      },
      {
        name: "@emotion/react/index.d.ts",
        url: "https://unpkg.com/@emotion/react@11.4.1/types/index.d.ts",
        depend: ["@emotion/cache"]
      },
      {
        name: "@emotion/react/jsx-namespace.d.ts",
        url: "https://unpkg.com/@emotion/react@11.4.1/types/jsx-namespace.d.ts",
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/react/css-prop.d.ts",
        url: "https://unpkg.com/@emotion/react@11.4.1/types/css-prop.d.ts",
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/react/helper.d.ts",
        url: "https://unpkg.com/@emotion/react@11.4.1/types/helper.d.ts",
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/react/theming.d.ts",
        url: "https://unpkg.com/@emotion/react@11.4.1/types/theming.d.ts",
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/serialize/index.d.ts",
        url: "https://unpkg.com/@emotion/serialize@1.0.2/types/index.d.ts",
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/utils/index.d.ts",
        url: "https://unpkg.com/@emotion/utils@1.0.0/types/index.d.ts",
        depend: []
      },
      {
        name: "framer-motion",
        url: "https://unpkg.com/framer-motion@5.0.0-beta.35/dist/framer-motion.d.ts",
        depend: ["popmotion"]
      },
      {
        name: "popmotion",
        url: "https://unpkg.com/popmotion@9.4.1/lib/index.d.ts"
      }
    ];
    const dts = importHelper.map(({ name, url }) => (async () => modules.monaco.languages.typescript.typescriptDefaults.addExtraLib(await (await fetch(url)).text(), name.includes("@") ? `file:///node_modules/${name}` : `file:///node_modules/@types/${name}/index.d.ts`))());
    modules.monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
      target: 99,
      allowNonTsExtensions: true,
      allowUmdGlobalAccess: true,
      strict: true,
      allowJs: true,
      noEmitOnError: true,
      allowSyntheticDefaultImports: true,
      moduleResolution: 2,
      module: 99,
      noEmit: true,
      typeRoots: ["node_modules/@types"],
      jsx: 5,
      esModuleInterop: true
    });
    await Promise.all(dts);
    modules.monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
      noSuggestionDiagnostics: false,
      noSemanticValidation: false,
      noSyntaxValidation: false
    });
    return modules;
  }
};

// js/codeLoader.mjs
init_emotion_react_browser_esm();
init_ipfsClient();
init_data();
function getSession() {
  const session = {
    i: 0,
    unmount: () => {
    },
    errorText: "",
    lastErrors: 0,
    children: import_react51.default.Fragment,
    setChild: () => {
    },
    div: document.createElement("div"),
    html: "",
    url: "",
    transpiled: "",
    code: ""
  };
  return session;
}
async function run(mode = "window", code = "") {
  const session = getSession();
  let monaco;
  try {
    console.log("Runner!");
    const { pathname } = new URL(window.location.href);
    if (mode === "window") {
      await openWindows();
    }
    session.mode = mode;
    if (code) {
      session.code = await formatter(code);
      session.transpiled = await transpileCode(session.code);
    }
    if (!code) {
      try {
        const { code: code2, transpiled, html: html2 } = pathname.endsWith("/edit/") || pathname.endsWith("/edit") ? await getIPFSCodeToLoad(void 0) : await getCodeToLoad();
        session.code = await formatter(code2);
        session.transpiled = await transpileCode(session.code) || transpiled;
        session.div.innerHTML = html2;
      } catch (e) {
        console.error({ e, message: "couldn't start" });
        return;
      }
    }
    const container = window.document.getElementById("editor");
    if (container === null)
      return "No editor window";
    const editorPromise = editor_default({
      language: "typescript",
      container,
      code: session.code,
      onChange: (code2) => runner(code2)
    });
    try {
      await renderPreviewWindow(session);
    } catch (e) {
      throw e;
    }
    await restartCode(session.transpiled, session.i);
    await editorPromise;
    monaco = window.monaco;
    monaco.editor.createModel("define module './hash.js';", "typescript", monaco.Uri.parse("file:///refs.d.ts"));
    if (!session.url) {
      await saveCode(session, session.i);
    }
    const { sendSignalToQrCode: sendSignalToQrCode2 } = await Promise.resolve().then(() => (init_sendSignalToQrCode(), sendSignalToQrCode_exports));
    await sendSignalToQrCode2(session);
  } catch (e) {
    throw e;
  }
  async function runner(c3) {
    session.errorText = "";
    session.i++;
    const counter2 = session.i;
    try {
      const cd = await formatter(c3);
      const transpiled = await transpileCode(cd);
      let restartError = false;
      if (transpiled.length && session.lastErrors < 2) {
        if (counter2 < session.i)
          return;
        restartError = await restartCode(transpiled, counter2);
      }
      if (session.i > counter2)
        return;
      const err = await getErrors(cd);
      if (session.i > counter2)
        return;
      if (restartError) {
        err.push({ messageText: "Error while starting the app. Check the console!" });
      }
      if (err.length)
        console.log({ err });
      if (session.lastErrors && err.length === 0) {
        restartCode(transpiled, counter2);
      }
      session.lastErrors = err.length;
      if (err.length === 0 && transpiled.length) {
        if (session.i > counter2)
          return;
        session.code = cd;
        saveCode(session, counter2);
      } else {
        console.log({ code: c3, transpiled });
        if (session.i > counter2)
          return;
        if (cd.length < 1e3 && session.code.length < 1e3) {
          const { diff } = await import("../modules/diff.js");
          const slices = await diff(session.code, cd);
          if (slices.c.length <= 3) {
            session.lastErrors = 0;
            return;
          }
          if (slices.c.length == 4) {
            session.lastErrors = 0;
            monaco.editor.setTheme("hc-black");
            return;
          }
        }
        if (err && err[0] && err[0].messageText) {
          console.error(err[0].messageText.toString());
        }
        return;
      }
      monaco.editor.setTheme("vs-dark");
    } catch (err) {
      if (err.message) {
        session.errorText = err.message;
        const saveErrorCode = async () => {
          const res = await ipfsClient.add(c3, { onlyHash: true });
          const CID = res.cid.toString();
          const UID = await getUserId();
          const url = `/error/${CID}`;
          fetch(`https://spike.land${url}`, {
            method: "POST",
            headers: {
              UID
            },
            body: c3
          });
        };
        saveErrorCode();
        return;
      }
      monaco.editor.setTheme("vs-light");
      setTimeout(() => {
        monaco.editor.setTheme("hc-black");
      }, 50);
      console.error(err);
    }
  }
  async function getErrors() {
    if (!monaco) {
      return [{ messageText: "Error with the error checking. Try to reload!" }];
    }
    const filename = `file:///main.tsx`;
    const uri = monaco.Uri.parse(filename);
    const model = monaco.editor.getModel(uri);
    const worker = await monaco.languages.typescript.getTypeScriptWorker();
    const client = await worker(model.uri);
    const diag = client.getSemanticDiagnostics(filename);
    const comp = client.getCompilerOptionsDiagnostics(filename);
    const syntax = client.getSyntacticDiagnostics(filename);
    const fastError = await Promise.race([diag, comp, syntax]);
    return [
      ...fastError
    ];
  }
  async function getReactChild(transpiled) {
    const codeToHydrate = mode === "window" ? transpiled.replace("body{", "#zbody{") : transpiled;
    const objUrl = createJsBlob(codeToHydrate);
    const mod2 = await import(objUrl);
    URL.revokeObjectURL(objUrl);
    return jsx(mod2.default);
  }
  async function restartCode(transpiled, counter2) {
    if (session.i > counter2)
      return false;
    session.html = "";
    session.transpiled = "";
    let hadError = false;
    if (typeof transpiled !== "string" || transpiled === "") {
      hadError = true;
      return hadError;
    }
    let children;
    try {
      children = await getReactChild(transpiled);
    } catch (error) {
      console.error({ error, message: "error in rendering" });
      return false;
    }
    const zbody = document.createElement("div");
    ReactDOM.render(children, zbody);
    session.div = zbody;
    if (!!zbody.innerHTML) {
      session.transpiled = transpiled;
      session.html = zbody.innerHTML;
      session.children = children;
      session.setChild((c3) => [...c3, session.children]);
    }
    return !zbody.innerHTML;
  }
}
function createJsBlob(code) {
  const blob = new Blob([code], { type: "application/javascript" });
  return URL.createObjectURL(blob);
}
export {
  run
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license MUI v5.0.0-alpha.49
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.0.1
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.0.2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
