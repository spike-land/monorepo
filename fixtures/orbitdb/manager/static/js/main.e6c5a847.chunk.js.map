{"version":3,"sources":["database/index.js","state/index.js","config/index.js","components/Systems.js","components/Header.js","components/LogStoreControls.js","components/FeedStoreControls.js","components/KeyValueStoreControls.js","components/DocumentStoreControls.js","components/CounterStoreControls.js","views/Database.js","components/DatabaseList.js","components/CreateDialog.js","components/AddDialog.js","views/Databases.js","views/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["orbitdb","programs","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actions","DB","OPEN_CREATEDB_DIALOG","CLOSE_CREATEDB_DIALOG","OPEN_ADDDB_DIALOG","CLOSE_ADDDB_DIALOG","SET_DB","SYSTEMS","SET_IPFS","SET_ORBITDB","PROGRAMS","SET_PROGRAMS","SET_PROGRAMS_LOADING","SET_PROGRAM","SET_PROGRAM_LOADING","loadingState","config","ipfs","preload","enabled","Addresses","Swarm","initIPFS","a","async","IPFS","create","Config","initOrbitDB","OrbitDB","createInstance","getAllDatabases","feed","accessController","write","identity","id","load","iterator","limit","collect","getDB","address","open","db","addDatabase","add","name","dbname","type","added","Date","now","createDatabase","permissions","toString","removeDatabase","hash","remove","Systems","appState","dispatch","React","useEffect","loading","then","ipfsStatus","databases","orbitdbStatus","reverse","Pane","background","elevation","display","flexDirection","alignItems","paddingX","majorScale","paddingY","Link","href","textDecoration","Text","fontWeight","marginRight","minorScale","marginX","Icon","size","icon","color","paddingLeft","Header","history","useHistory","className","borderBottom","flex","src","width","Heading","fontFamily","justifyContent","SearchInput","placeholder","height","onKeyUp","event","keyCode","push","target","LogStoreControls","useState","setValue","addToDB","Error","entries","marginBottom","TextInput","onChange","Button","iconBefore","appearance","marginLeft","onClick","preventDefault","length","FeedStoreControls","KeyValueStoreControls","key","setKey","set","Object","keys","all","map","e","payload","get","DocumentStoreControls","put","_id","query","fullOp","val","parseInt","inc","defaultValue","colors","eventlog","keyvalue","docstore","counter","ProgramView","useParams","programName","dbName","index","setIndex","setLoading","handleSelect","idx","fetchDB","program","find","p","marginTop","IconButton","close","goBack","textTransform","overflow","padding","access","_oplog","intent","getValuesTitle","Spinner","delay","marginY","userSelect","cursor","JSON","stringify","Pre","maxWidth","backgroundColor","renderProgram","CounterStoreControls","renderDatabaseControls","ProgramList","onRemove","Table","Head","TextHeaderCell","textAlign","Body","Row","Cell","margin","TextCell","textProps","formatDistanceToNow","CreateDialog","onCreate","setName","setType","setPermissions","handleSubmit","console","log","Dialog","isShown","createDBDialogOpen","title","onCloseComplete","cancelLabel","confirmLabel","onConfirm","onSubmit","FormField","label","Select","AddDialog","onAdd","setAddress","addDBDialogOpen","DatabasesView","fetchDatabases","args","data","SearchResultsView","URLSearchParams","useLocation","search","to","filter","includes","App","user","loginDialogOpen","state","action","path","SearchResults","Database","Databases","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6c5a847.chunk.js","sourcesContent":["import IPFS from 'ipfs'\nimport OrbitDB from 'orbit-db'\nimport Config from '../config'\n\n// OrbitDB instance\nlet orbitdb\n\n// Databases\nlet programs\n\n// Start IPFS\nexport const initIPFS = async () => {\n  return await IPFS.create(Config.ipfs)\n}\n\n// Start OrbitDB\nexport const initOrbitDB = async (ipfs) => {\n  orbitdb = await OrbitDB.createInstance(ipfs)\n  return orbitdb\n}\n\nexport const getAllDatabases = async () => {\n  if (!programs && orbitdb) {\n    // Load programs database\n    programs = await orbitdb.feed('network.programs', {\n      accessController: { write: [orbitdb.identity.id] },\n      create: true\n    })\n    await programs.load()\n  }\n\n  return programs\n    ? programs.iterator({ limit: -1 }).collect()\n    : []\n}\n\nexport const getDB = async (address) => {\n  let db\n  if (orbitdb) {\n    db = await orbitdb.open(address)\n    await db.load()\n  }\n  return db\n}\n\nexport const addDatabase = async (address) => {\n  const db = await orbitdb.open(address)\n  return programs.add({\n    name: db.dbname,\n    type: db.type,\n    address: address,\n    added: Date.now()\n  })\n}\n\nexport const createDatabase = async (name, type, permissions) => {\n  let accessController\n\n  switch (permissions) {\n    case 'public':\n      accessController = { write: ['*'] }\n      break\n    default:\n      accessController = { write: [orbitdb.identity.id] }\n      break\n  }\n\n  const db = await orbitdb.create(name, type, { accessController })\n\n  return programs.add({\n    name,\n    type,\n    address: db.address.toString(),\n    added: Date.now()\n  })\n}\n\nexport const removeDatabase = async (hash) => {\n  return programs.remove(hash)\n}\n","import React, { createContext, useReducer, useContext } from 'react'\n\nexport const StateContext = createContext()\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n)\n\nexport const useStateValue = () => useContext(StateContext)\n\nexport const actions = {\n  DB: {\n    OPEN_CREATEDB_DIALOG: 'OPEN_CREATEDB_DIALOG',\n    CLOSE_CREATEDB_DIALOG: 'CLOSE_CREATEDB_DIALOG',\n    OPEN_ADDDB_DIALOG: 'OPEN_ADDDB_DIALOG',\n    CLOSE_ADDDB_DIALOG: 'CLOSE_ADDDB_DIALOG',\n    SET_DB: 'SET_DB'\n  },\n  SYSTEMS: {\n    SET_IPFS: 'SET_IPFS',\n    SET_ORBITDB: 'SET_ORBITDB'\n  },\n  PROGRAMS: {\n    SET_PROGRAMS: 'SET_PROGRAMS',\n    SET_PROGRAMS_LOADING: 'SET_PROGRAMS_LOADING',\n    SET_PROGRAM: 'SET_PROGRAM',\n    SET_PROGRAM_LOADING: 'SET_PROGRAM_LOADING'\n  }\n}\n\nexport const loadingState = 'loading'\n","const config = {\n  ipfs: {\n    preload: {\n      enabled: false\n    },\n    config: {\n      Addresses: {\n        Swarm: [\n          '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/',\n          '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/',\n          '/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/'\n        ]\n      }\n    }\n  }\n}\n\nexport default config\n","import React from 'react'\nimport {\n  majorScale,\n  minorScale,\n  Icon,\n  Link,\n  Pane,\n  Text\n} from 'evergreen-ui'\n\nimport { initIPFS, initOrbitDB, getAllDatabases } from '../database'\nimport { actions, useStateValue } from '../state'\n\nfunction Systems () {\n  const [appState, dispatch] = useStateValue()\n\n\n  React.useEffect(() => {\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: true })\n\n    initIPFS().then(async (ipfs) => {\n      dispatch({ type: actions.SYSTEMS.SET_IPFS, ipfsStatus: 'Started'})\n  \n      initOrbitDB(ipfs).then(async (databases) => {\n        dispatch({ type: actions.SYSTEMS.SET_ORBITDB, orbitdbStatus: 'Started' })\n\n        const programs = await getAllDatabases()\n        dispatch({ type: actions.PROGRAMS.SET_PROGRAMS, programs: programs.reverse() })\n        dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: false })\n      })\n    })\n  }, [dispatch])\n\n  const statusIconSize = 6\n\n  return (\n    <Pane background='white' elevation={1}>\n      <Pane \n        display='flex'\n        flexDirection='column'\n        alignItems='left'\n        paddingX={majorScale(6)}\n        paddingY={majorScale(1)}\n      >\n        <Link href='#/' textDecoration='none' display='flex' flexDirection='row'>\n          <Text fontWeight='600' marginRight={minorScale(1)}>Systems:</Text>\n          <Pane\n            display='flex'\n            alignItems='center'\n            marginX={minorScale(1)}\n          >\n            {appState.ipfsStatus === 'Started'\n              ? <Icon size={statusIconSize} icon='full-circle' color='success'/>\n              : <Icon size={statusIconSize} icon='full-circle' color='warning'/>\n            }\n            <Text paddingLeft={minorScale(2)}>IPFS</Text>\n          </Pane>\n          <Pane\n            display='flex'\n            alignItems='center'\n            marginX={majorScale(1)}\n          >\n            {appState.orbitdbStatus === 'Started'\n              ? <Icon size={statusIconSize} icon='full-circle' color='success'/>\n              : <Icon size={statusIconSize} icon='full-circle' color='warning'/>\n            }\n            <Text paddingLeft={minorScale(2)}>OrbitDB</Text>\n          </Pane>\n        </Link>\n      </Pane>\n    </Pane>\n  )\n}\n\nexport default Systems\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {\n  majorScale,\n  Heading,\n  Link,\n  Pane,\n  SearchInput\n} from 'evergreen-ui'\n\nfunction Header () {\n  const history = useHistory()\n\n  function handleKeyUp (event) {\n    // TODO: Do not use \"ENTER\" key as the trigger, maybe onSubmit of a form\n    if (event.keyCode === 13) history.push(`/search?q=${event.target.value}`)\n  }\n\n  return (\n    <Pane background='white' elevation={1}>\n      <Pane \n        className='row-wrap'\n        display='flex'\n        borderBottom='default'\n      >\n        <Pane\n          className='align title'\n          display='flex'\n          flex='1 1 60%'\n        >\n          <Link \n            href='#/' \n            textDecoration='none' \n            display='flex' \n            flexDirection='row' \n            alignItems='center'\n          >\n            <img src='Orbit_round-02.png' width={majorScale(5)}/>\n            <Heading size={800} fontFamily='Titillium Web' marginX={majorScale(2)}>\n            CONTROL CENTER\n            </Heading>\n          </Link>\n        </Pane>\n        <Pane\n          className='align search'\n          display='flex'\n          alignItems='center'\n          justifyContent='center'\n        >\n          <SearchInput\n            width='100%'\n            flex='1 1 100%'\n            placeholder='Search...'\n            height={24}\n            onKeyUp={handleKeyUp}\n          />\n        </Pane>\n      </Pane>\n    </Pane>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n  majorScale,\n  Button,\n  Heading,\n  Pane,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction LogStoreControls () {\n  const [appState, dispatch] = useStateValue()\n  const [value, setValue] = React.useState('')\n\n  function handleValueChange (event) {\n    setValue(event.target.value)\n  }\n\n  function handleAdd (event) {\n    if (event) event.preventDefault()\n    if (value.length === 0) return\n    addToDB()\n  }\n\n  const addToDB = async () => {\n    const db = appState.db\n\n    if (db.type !== 'eventlog') {\n      throw new Error('This component can only handle Log databases')\n    }\n\n    await db.add(value)\n\n    const entries = await db.iterator({ limit: 10 }).collect().reverse()\n    dispatch({ type: actions.DB.SET_DB, db, entries })\n  }\n\n  return (\n    <Pane\n      flex='1'\n    >\n      <Heading marginBottom={majorScale(1)}>Add an event to the log</Heading>\n      <TextInput\n        onChange={handleValueChange}\n        name='value'\n        placeholder='Value'\n        height={24}\n        width='30%'\n      ></TextInput>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={majorScale(1)}\n        onClick={handleAdd}\n      >\n        Add\n      </Button>\n    </Pane>\n  )\n}\n\nexport default LogStoreControls\n","import React from 'react'\nimport {\n  majorScale,\n  Button,\n  Heading,\n  Pane,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction FeedStoreControls () {\n  const [appState, dispatch] = useStateValue()\n  const [value, setValue] = React.useState('')\n\n  function handleValueChange (event) {\n    setValue(event.target.value)\n  }\n\n  function handleAdd (event) {\n    if (event) event.preventDefault()\n    if (value.length === 0) return\n    addToDB()\n  }\n\n  const addToDB = async () => {\n    const db = appState.db\n\n    if (db.type !== 'feed') {\n      throw new Error('This component can only handle Feed databases')\n    }\n\n    await db.add(value)\n\n    const entries = await db.iterator({ limit: 10 }).collect().reverse()\n    dispatch({ type: actions.DB.SET_DB, db, entries })\n  }\n\n  return (\n    <Pane\n      flex='1'\n    >\n      <Heading marginBottom={majorScale(1)}>Add an entry to the feed</Heading>\n      <TextInput\n        onChange={handleValueChange}\n        name='value'\n        placeholder='Data'\n        height={24}\n        width='30%'\n      ></TextInput>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={majorScale(1)}\n        onClick={handleAdd}\n      >\n        Add\n      </Button>\n    </Pane>\n  )\n}\n\nexport default FeedStoreControls\n","import React, { useState } from 'react'\nimport {\n  majorScale,\n  Button,\n  Heading,\n  Pane,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction KeyValueStoreControls () {\n  const [appState, dispatch] = useStateValue()\n  const [key, setKey] = useState('')\n  const [value, setValue] = useState('')\n\n  function handleValueChange (event) {\n    setValue(event.target.value)\n  }\n\n  function handleKeyChange (event) {\n    setKey(event.target.value)\n  }\n\n  function handleAdd (event) {\n    if (event) event.preventDefault()\n    if (value.length === 0) return\n    if (key.length === 0) return\n    addToDB()\n  }\n\n  const addToDB = async () => {\n    const db = appState.db\n\n    if (db.type !== 'keyvalue') {\n      throw new Error('This component can only handle Key-Value databases')\n    }\n\n    await db.set(key, value)\n\n    const entries = Object.keys(db.all).map(e => ({ payload: { value: {key: e, value: db.get(e)} } }))\n    dispatch({ type: actions.DB.SET_DB, db, entries })\n  }\n\n  return (\n    <Pane\n      flex='1'\n    >\n      <Heading marginBottom={majorScale(1)}>Set a value for a key</Heading>\n      <TextInput\n        onChange={handleKeyChange}\n        name='key'\n        placeholder='key'\n        height={24}\n        width='20%'\n      ></TextInput>\n      <TextInput\n        onChange={handleValueChange}\n        name='value'\n        placeholder='value'\n        height={24}\n        width='20%'\n        marginLeft={majorScale(1)}\n      ></TextInput>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={majorScale(1)}\n        onClick={handleAdd}\n      >\n        Set\n      </Button>\n    </Pane>\n  )\n}\n\nexport default KeyValueStoreControls\n","import React, { useState } from 'react'\nimport {\n  majorScale,\n  Button,\n  Heading,\n  Pane,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction DocumentStoreControls () {\n  const [appState, dispatch] = useStateValue()\n  const [key, setKey] = useState('')\n  const [value, setValue] = useState('')\n\n  function handleValueChange (event) {\n    setValue(event.target.value)\n  }\n\n  function handleKeyChange (event) {\n    setKey(event.target.value)\n  }\n\n  function handleAdd (event) {\n    if (event) event.preventDefault()\n    if (value.length === 0) return\n    if (key.length === 0) return\n    addToDB()\n  }\n\n  const addToDB = async () => {\n    const db = appState.db\n\n    if (db.type !== 'docstore') {\n      throw new Error('This component can only handle Document databases')\n    }\n\n    await db.put({_id: key, value})\n\n    const entries = db.query(e => e !== null, {fullOp: true}).reverse()\n    dispatch({ type: actions.DB.SET_DB, db, entries })\n  }\n\n  return (\n    <Pane\n      flex='1'\n    >\n      <Heading marginBottom={majorScale(1)}>Add a document to the database</Heading>\n      <TextInput\n        onChange={handleKeyChange}\n        name='key'\n        placeholder='_id'\n        height={24}\n        width='20%'\n      ></TextInput>\n      <TextInput\n        onChange={handleValueChange}\n        name='value'\n        placeholder='document'\n        height={24}\n        width='20%'\n        marginLeft={majorScale(1)}\n      ></TextInput>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={majorScale(1)}\n        onClick={handleAdd}\n      >\n        Put\n      </Button>\n    </Pane>\n  )\n}\n\nexport default DocumentStoreControls\n","import React, { useState } from 'react'\nimport {\n  majorScale,\n  Button,\n  Heading,\n  Pane,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction KeyValueStoreControls () {\n  const [appState, dispatch] = useStateValue()\n  const [value, setValue] = useState(1)\n\n  function handleValueChange (event) {\n    setValue(event.target.value)\n  }\n\n  function handleAdd (event) {\n    if (event) event.preventDefault()\n    if (value.length === 0) return\n    addToDB()\n  }\n\n  const addToDB = async () => {\n    const db = appState.db\n\n    if (db.type !== 'counter') {\n      throw new Error('This component can only handle Counter databases')\n    }\n\n    const val = parseInt(value) || 0\n\n    if (val > 0) {\n      await db.inc(val)\n    }\n\n    const entries = [{ payload: { value: db.value } }]\n    dispatch({ type: actions.DB.SET_DB, db, entries })\n  }\n\n  return (\n    <Pane\n      flex='1'\n    >\n      <Heading marginBottom={majorScale(1)}>Increment the value of the counter</Heading>\n      <TextInput\n        onChange={handleValueChange}\n        name='value'\n        defaultValue={1}\n        placeholder='amount'\n        height={24}\n        width='10%'\n      ></TextInput>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={majorScale(1)}\n        onClick={handleAdd}\n      >\n        Increment\n      </Button>\n    </Pane>\n  )\n}\n\nexport default KeyValueStoreControls\n","import React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport {\n  majorScale,\n  Heading,\n  IconButton,\n  Pane,\n  Pre,\n  Spinner,\n  Text\n} from 'evergreen-ui'\n\nimport LogStoreControls from '../components/LogStoreControls'\nimport FeedStoreControls from '../components/FeedStoreControls'\nimport KeyValueStoreControls from '../components/KeyValueStoreControls'\nimport DocumentStoreControls from '../components/DocumentStoreControls'\nimport CounterStoreControls from '../components/CounterStoreControls'\n\nimport { getDB } from '../database'\nimport { useStateValue, actions } from '../state'\n\nconst colors = {\n   eventlog: '#47B881',\n   feed: '#14B5D0',\n   keyvalue: '#1070CA',\n   docstore: '#D9822B',\n   counter: '#735DD0',\n}\n\nfunction ProgramView () {\n  const { programName, dbName } = useParams()\n  const [appState, dispatch] = useStateValue()\n  const history = useHistory()\n  const [index, setIndex] = React.useState(null)\n  const [loading, setLoading] = React.useState(false)\n  const [address] = React.useState(`/orbitdb/${programName}/${dbName}`)\n\n  const handleSelect = (idx) => {\n    setIndex(idx !== index ? idx : null)\n  }\n\n  const handleBack = () => {\n    if (appState.db) {\n      appState.db.close().then(() => {\n        dispatch({ type: actions.PROGRAMS.SET_PROGRAM, program: null })\n        dispatch({ type: actions.DB.SET_DB, db: null, entries: [] })\n        history.goBack()\n      })\n    }\n  }\n\n  const fetchDB = async (address) => {\n    setLoading(true)\n    const db = await getDB(address)\n\n    if (db) {\n      let entries\n      if (db.type === 'eventlog' || db.type === 'feed')\n        entries = await db.iterator({ limit: 10 }).collect().reverse()\n      else if (db.type === 'counter')\n        entries = [{ payload: { value: db.value } }]\n      else if (db.type === 'keyvalue')\n        entries = Object.keys(db.all).map(e => ({ payload: { value: {key: e, value: db.get(e)} } }))\n      else if (db.type === 'docstore')\n        entries = db.query(e => e !== null, {fullOp: true}).reverse()\n      else\n        entries = [{ payload: { value: \"TODO\" } }]\n\n      dispatch({ type: actions.DB.SET_DB, db, entries })\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchDB(address)\n    const program = appState.programs.find(p => p.payload.value.address === address)\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAM, program })\n  }, [dispatch, address, appState.programs])\n\n  function getValuesTitle() {\n    const db = appState.program ? appState.program.payload.value : null\n    if (!db) return\n\n    if (db.type === 'eventlog')\n      return \"Latest 10 events\"\n    else if (db.type === 'feed')\n      return \"Latest 10 entries\"\n    else if (db.type === 'docstore')\n      return \"All Documents\"\n    else if (db.type === 'keyvalue')\n      return \"Keys and Values\"\n    else if (db.type === 'counter')\n      return \"Count\"\n    else\n      return <Text intent='danger'>No input controls found for '{db.type}'</Text>\n  }\n\n  function renderProgram () {\n    const program = appState.program ? appState.program.payload.value : null\n    return (\n      <Pane marginTop={majorScale(2)}>\n        <Pane flex='1' >\n          <Text>Name: {program ? program.name : '-'}</Text>\n        </Pane>\n        <Pane flex='1' >\n          <Text>Type: </Text>\n          {program\n            ? <Text color={colors[program.type]}>{program.type}</Text>\n            : <Text>-</Text>\n          }\n        </Pane>\n        <Pane flex='1'>\n          <Text>Permissions:</Text>\n          {appState.db\n            ? <pre>{appState.db.access.write}</pre>\n            : <Text>-</Text>\n          }\n        </Pane>\n        <Pane flex='1' flexDirection='row'>\n          <Text>Entries: </Text>\n          {appState.db\n            ? <Text>{appState.db._oplog.length}</Text>\n            : <Text>-</Text>\n          }\n        </Pane>\n        <Pane\n          flex='1'\n          marginBottom={majorScale(2)}\n        >\n          <Heading size={500}\n            marginTop={majorScale(2)}\n            marginBottom={majorScale(1)}\n          >\n            {getValuesTitle()}\n          </Heading>\n          {loading\n            ? <Spinner\n                size={majorScale(2)}\n                delay={100}\n                marginY={majorScale(2)}\n              />\n            : appState.entries.map((e, idx) => {\n                idx += 1\n                return (\n                  <div key={idx}>\n                    <Pane>\n                      <Text userSelect='none' cursor='pointer' onClick={() => handleSelect(idx)}>{JSON.stringify(e.payload.value, null, 2)}</Text>\n                    </Pane>\n                    <Pane>\n                      {index && idx === index\n                        ? <Pre\n                            maxWidth={majorScale(96)}\n                            overflow='auto'\n                            fontFamily='Source Code Pro'\n                            marginY={majorScale(1)}\n                            paddingY={majorScale(1)}\n                            backgroundColor='#FEF8E7'\n                          >{JSON.stringify(e, null, 2)}</Pre>\n                        : ''}\n                    </Pane>\n                  </div>\n                )\n              })\n          }\n        </Pane>\n      </Pane>\n    )\n  }\n\n  function renderDatabaseControls() {\n    const db = appState.db\n    if (!db) return\n\n    if (db.type === 'eventlog')\n      return <LogStoreControls />\n    else if (db.type === 'feed')\n      return <FeedStoreControls />\n    else if (db.type === 'docstore')\n      return <DocumentStoreControls />\n    else if (db.type === 'keyvalue')\n      return <KeyValueStoreControls />\n    else if (db.type === 'counter')\n      return <CounterStoreControls />\n    else\n      return <Text intent='danger'>No input controls found for '{db.type}'</Text>\n  }\n\n  return (\n    <>\n    <Pane\n      marginTop={majorScale(3)}\n      marginBottom={majorScale(2)}\n      marginX={majorScale(1)}\n      display='flex'\n      flexDirection='row'\n      alignItems='baseline'\n    >\n      <IconButton\n        icon='arrow-left'\n        appearance='minimal'\n        onClick={handleBack}\n      />\n      <Heading\n        marginLeft={majorScale(1)}\n        display='flex'\n        fontFamily='Titillium Web'\n        color='#425A70'\n        size={700}\n        textTransform='uppercase'\n      >\n        DATABASE\n      </Heading>\n    </Pane>\n    <Pane display='flex' justifyContent='center'>\n      <Pane\n        flex='1'\n        overflow='auto'\n        elevation={1}\n        background='white'\n        marginX={majorScale(6)}\n        padding={majorScale(4)}\n      >\n        <Pane borderBottom='default'>\n          <Heading size={500} marginBottom={majorScale(1)} borderBottom='default' overflow='auto'>\n            /orbitdb/{programName}/{dbName}\n          </Heading>\n        </Pane>\n        <Pane>\n          {renderProgram()}\n        </Pane>\n        <Pane>\n          {appState.program ? (renderDatabaseControls()) : ''}\n        </Pane>\n      </Pane>\n    </Pane>\n  </>\n  )\n}\n\nexport default ProgramView\n","import React from 'react'\n\nimport {\n  majorScale,\n  minorScale,\n  Icon,\n  IconButton,\n  Table\n} from 'evergreen-ui'\n\nimport { useHistory } from 'react-router-dom'\nimport { formatDistanceToNow } from 'date-fns'\n\nconst colors = {\n   eventlog: '#47B881',\n   feed: '#14B5D0',\n   keyvalue: '#1070CA',\n   docstore: '#D9822B',\n   counter: '#735DD0'\n}\n\nfunction ProgramList ({ programs, onRemove }) {\n  const history = useHistory()\n\n  function handleSelect (program) {\n    history.push(program.address)\n  }\n\n  return (\n    <Table>\n      <Table.Head padding='0'>\n        <Table.TextHeaderCell\n          flex='1 1 2%'\n          textAlign='center'\n          padding={minorScale(2)}\n          alignItems='baseline'\n        >\n          <Icon size={majorScale(2)} icon='eye-open'/>\n        </Table.TextHeaderCell>\n        <Table.TextHeaderCell flex='1 1 10%' paddingX={0}>Name</Table.TextHeaderCell>\n        <Table.TextHeaderCell flex='1 1 5%' paddingX={minorScale(1)}>Type</Table.TextHeaderCell>\n        <Table.TextHeaderCell flex='1 1 40%' paddingX={0}>Address</Table.TextHeaderCell>\n        <Table.TextHeaderCell flex='1 1 10%' paddingX={0}>Added</Table.TextHeaderCell>\n        <Table.TextHeaderCell\n          flex='1 1 2%'\n          textAlign='center'\n          padding={minorScale(2)}\n          alignItems='baseline'\n        >\n          <Icon size={12} icon='trash'/>\n        </Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body>\n        {programs.map(e => {\n          const program = e.payload.value\n          return (\n            <Table.Row key={`program-id-${program.address}`}>\n              <Table.Cell\n                flex='1 1 2%'\n                display='flex'\n                flexDirection='row'\n                justifyContent='center'\n                padding={minorScale(2)}\n              >\n                <IconButton\n                  appearance='minimal'\n                  icon='database'\n                  margin={0}\n                  padding={0}\n                  onClick={() => handleSelect(program)}\n                />\n              </Table.Cell>\n              <Table.TextCell flex='1 1 10%' paddingX={0}>{program.name}</Table.TextCell>\n              <Table.TextCell flex='1 1 5%' paddingX={minorScale(1)} textProps={{ color: colors[program.type]}}>\n                {program.type}\n              </Table.TextCell>\n              <Table.TextCell flex='1 1 40%' paddingX={0}>{program.address.toString() ? program.address.toString() : program.address}</Table.TextCell>\n              <Table.TextCell flex='1 1 10%' paddingX={0}>{program.added ? formatDistanceToNow(program.added) + ' ago': 'Unknown'}</Table.TextCell>\n              <Table.Cell\n                flex='1 1 2%'\n                display='flex'\n                flexDirection='row'\n                justifyContent='center'\n                padding={minorScale(2)}\n              >\n                <IconButton\n                  appearance='minimal'\n                  icon='cross'\n                  intent='danger'\n                  margin={0}\n                  padding={0}\n                  onClick={() => onRemove(e.hash, program)}\n                />\n              </Table.Cell>\n            </Table.Row>\n        )})}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default ProgramList\n","import React from 'react'\nimport {\n  Dialog,\n  FormField,\n  Select,\n  TextInput\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction CreateDialog ({ onCreate }) {\n  const [appState, dispatch] = useStateValue()\n  const [name, setName] = React.useState('')\n  const [type, setType] = React.useState('eventlog')\n  const [permissions, setPermissions] = React.useState('creator')\n\n  function handleSubmit (event) {\n    if (event) event.preventDefault()\n    if (name.length === 0) return\n    console.log('Create:', name, type, permissions)\n    onCreate({ name, type, permissions })\n    dispatch({ type: actions.DB.CLOSE_CREATEDB_DIALOG })\n  }\n\n  function handleNameChange (event) {\n    setName(event.target.value)\n  }\n\n  function handleTypeChange (event) {\n    setType(event.target.value)\n  }\n\n  function handlePermissionsChange (event) {\n    setPermissions(event.target.value)\n  }\n\n  return (\n    <Dialog\n      isShown={appState.createDBDialogOpen}\n      title='Create Database'\n      onCloseComplete={() => dispatch({ type: actions.DB.CLOSE_CREATEDB_DIALOG })}\n      cancelLabel='Cancel'\n      confirmLabel='Create'\n      onConfirm={close => handleSubmit(null, close)}\n    >\n      <form onSubmit={handleSubmit}>\n        <FormField label='Database Name:'>\n          <TextInput\n            onChange={handleNameChange}\n            name='name'\n            placeholder='Database name'\n            width='100%'\n          />\n        </FormField>\n        <FormField label='Type:'>\n          <Select onChange={handleTypeChange}>\n            <option value='eventlog' defaultValue>Immutable Log</option>\n            <option value='feed'>A list of entries</option>\n            <option value='keyvalue'>Key-Value Store</option>\n            <option value='docstore'>Document Store</option>\n            <option value='counter'>Counter (CRDT)</option>\n          </Select>\n        </FormField>\n        <FormField label='Write Permissions'>\n          <Select onChange={handlePermissionsChange}>\n            <option value='creator'>Creator-only: Only you can write, public read</option>\n            <option value='public'>Public: Anybody can write and write</option>\n          </Select>\n        </FormField>\n      </form>\n    </Dialog>\n  )\n}\n\nexport default CreateDialog\n","import React from 'react'\nimport { \n  Dialog, \n  TextInput \n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nfunction AddDialog ({ onAdd }) {\n  const [appState, dispatch] = useStateValue()\n  const [address, setAddress] = React.useState('')\n\n  function handleSubmit (event) {\n    if (event) event.preventDefault()\n    if (address.length === 0) return\n    console.log(\"Add:\", address)\n    onAdd({ address })\n    dispatch({ type: actions.DB.CLOSE_ADDDB_DIALOG })\n  }\n\n  function handleAddressChange (event) {\n    setAddress(event.target.value)\n  }\n\n  return (\n    <Dialog\n      isShown={appState.addDBDialogOpen}\n      title='Add Database'\n      onCloseComplete={() => dispatch({ type: actions.DB.CLOSE_ADDDB_DIALOG })}\n      cancelLabel='Cancel'\n      confirmLabel='Add'\n      onConfirm={close => handleSubmit(null, close)}\n    >\n      <form onSubmit={handleSubmit}>\n          <TextInput\n            onChange={handleAddressChange}\n            name='address'\n            placeholder='Address'\n            width='100%'\n          ></TextInput>\n      </form>\n    </Dialog>\n  )\n}\n\nexport default AddDialog\n","import React from 'react'\nimport { \n  majorScale,\n  minorScale,\n  Button,\n  Heading,\n  Pane,\n  Spinner,\n  Text\n} from 'evergreen-ui'\n\nimport { useStateValue, actions } from '../state'\n\nimport { getAllDatabases, addDatabase, removeDatabase, createDatabase } from '../database'\n\nimport ProgramList from '../components/DatabaseList'\nimport CreateDialog from '../components/CreateDialog'\nimport AddDialog from '../components/AddDialog'\n\nfunction DatabasesView () {\n  const [appState, dispatch] = useStateValue()\n\n  async function fetchDatabases () {\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: true })\n    const programs = await getAllDatabases()\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS, programs: programs.reverse() })\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: false })\n    return programs\n  }\n\n  const handleCreateDatabase = () => {\n    dispatch({ type: actions.DB.OPEN_CREATEDB_DIALOG })\n  }\n\n  const createDB = (args) => {\n    console.log(\"Create database...\", args)\n    createDatabase(args.name, args.type, args.permissions).then((hash) => {\n      console.log(\"Created\", hash)\n      fetchDatabases().then((data) => {\n        console.log(\"Loaded programs\", data)\n      })\n    })\n  }\n\n  const handleAddDatabase = (args) => {\n    dispatch({ type: actions.DB.OPEN_ADDDB_DIALOG })\n  }\n\n  const addDB = (args) => {\n    console.log(\"Add database...\", args)\n    addDatabase(args.address).then((hash) => {\n      console.log(\"Added\", args.address)\n      fetchDatabases().then((data) => {\n        console.log(\"Loaded programs\", data)\n      })\n    })\n  }\n\n  const handleRemoveDatabase = (hash, program) => {\n    console.log(\"Remove database...\", hash, program)\n    removeDatabase(hash).then(() => {\n      console.log(\"Removed\")\n      fetchDatabases().then((data) => {\n        console.log(\"Loaded programs\", data)\n      })\n    })\n  }\n\n  return (\n    <>\n    <Pane marginX={majorScale(6)}>\n      <Heading\n        fontFamily='Titillium Web'\n        color='#425A70'\n        size={700}\n        textTransform='uppercase'\n        marginTop={majorScale(3)}\n        marginBottom={majorScale(2)}\n      >\n        Databases\n      </Heading>\n    </Pane>\n    <Pane \n      display='flex' \n      flexDirection='row'\n      marginX={majorScale(6)}\n      marginTop={majorScale(2)}\n      marginBottom={majorScale(1)}\n    >\n      <Button\n        iconBefore='document'\n        appearance='default'\n        height={24}\n        onClick={handleCreateDatabase}\n      >\n        Create\n      </Button>\n      <Button\n        iconBefore='plus'\n        appearance='default'\n        height={24}\n        marginLeft={minorScale(1)}\n        onClick={handleAddDatabase}\n      >\n        Open\n      </Button>\n    </Pane>\n    <Pane display='flex' justifyContent='center' overflow='auto'>\n      <CreateDialog onCreate={createDB}/>\n      <AddDialog onAdd={addDB}/>\n      <Pane\n        flex='1'\n        overflow='auto'\n        elevation={1}\n        background='white'\n        marginX={majorScale(6)}\n      >\n        {!appState.loading.programs \n          ? (<ProgramList\n              programs={appState.programs}\n              onRemove={handleRemoveDatabase}\n            />)\n          : (<Pane\n              display='flex' \n              flexDirection='column' \n              alignItems='center' \n              marginTop={majorScale(3)}\n              marginBottom={majorScale(1)}\n            >\n              <Spinner size={24}/>\n              <Text marginY={majorScale(1)}>Loading...</Text>\n            </Pane>)\n        }\n      </Pane>\n    </Pane>\n    </>\n  )\n}\n\nexport default DatabasesView\n","import React, { useEffect } from 'react'\nimport { majorScale, Heading, Pane, Spinner } from 'evergreen-ui'\nimport { useLocation, Redirect } from 'react-router-dom'\nimport { useStateValue, actions, loadingState } from '../state'\n\nimport { getAllDatabases, removeDatabase } from '../database'\n\nimport ProgramList from '../components/DatabaseList'\n\nfunction useQuery () {\n  return new URLSearchParams(useLocation().search)\n}\n\nfunction SearchResultsView () {\n  const [appState, dispatch] = useStateValue()\n\n  const query = useQuery().get('q')\n  const queryOk = query.length >= 1\n\n  if (!queryOk) return <Redirect to='/' />\n\n  let programs = appState.programs\n  if (query) {\n    programs = programs.filter(({ payload: { value: { name, type, address } } }) =>\n      name.includes(query) || type.includes(query) || address.toString().includes(query)\n    )\n  }\n\n  async function fetchDatabases () {\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: true })\n    const programs = await getAllDatabases()\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS, programs: programs.reverse() })\n    dispatch({ type: actions.PROGRAMS.SET_PROGRAMS_LOADING, loading: false })\n    return programs\n  }\n\n  const handleRemoveDatabase = (hash, program) => {\n    console.log(\"Remove database...\", hash, program)\n    removeDatabase(hash).then(() => {\n      console.log(\"Removed\")\n      fetchDatabases().then((data) => {\n        console.log(\"Loaded programs\", data)\n      })\n    })\n  }\n\n  return (\n    <Pane display='flex' justifyContent='center'>\n      <Pane\n        flex='1'\n        elevation={1}\n        background='white'\n        margin={majorScale(6)}\n        padding={majorScale(4)}\n      >\n        <Pane borderBottom='default'>\n          <Heading size={600} marginBottom={majorScale(1)}>\n            {programs.length} programs found\n          </Heading>\n        </Pane>\n        {programs !== loadingState\n          ? <ProgramList programs={programs} onRemove={handleRemoveDatabase} />\n          : <Spinner marginX='auto' marginY={120} />}\n      </Pane>\n    </Pane>\n  )\n}\n\nexport default SearchResultsView\n","import React from 'react'\nimport { Pane } from 'evergreen-ui'\nimport { Route, Switch } from 'react-router-dom'\n\nimport { actions, loadingState, StateProvider } from './state'\n\nimport Systems from './components/Systems'\nimport Header from './components/Header'\n\nimport DatabaseView from './views/Database'\nimport DatabasesView from './views/Databases'\nimport SearchResultsView from './views/SearchResults'\n\nfunction App () {\n  const initialState = {\n    user: null,\n    loginDialogOpen: false,\n    createDBDialogOpen: false,\n    addDBDialogOpen: false,\n    programs: [],\n    program: false,\n    db: null,\n    entries: [],\n    orbitdbStatus: 'Starting',\n    ipfsStatus: 'Starting',\n    loading: {\n      programs: false\n    }\n  }\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case actions.SYSTEMS.SET_ORBITDB:\n        return {\n          ...state,\n          orbitdbStatus: action.orbitdbStatus\n        }\n      case actions.SYSTEMS.SET_IPFS:\n        return {\n          ...state,\n          ipfsStatus: action.ipfsStatus\n        }\n      case actions.PROGRAMS.SET_PROGRAM:\n        return {\n          ...state,\n          program: action.program\n        }\n      case actions.PROGRAMS.SET_PROGRAM_LOADING:\n        return {\n          ...state,\n          program: loadingState\n        }\n      case actions.PROGRAMS.SET_PROGRAMS:\n        return {\n          ...state,\n          programs: action.programs\n        }\n      case actions.DB.SET_DB:\n        return {\n          ...state,\n          db: action.db,\n          entries: action.entries,\n        }\n      case actions.DB.OPEN_CREATEDB_DIALOG:\n        return {\n          ...state,\n          createDBDialogOpen: true\n        }\n      case actions.DB.CLOSE_CREATEDB_DIALOG:\n        return {\n          ...state,\n          createDBDialogOpen: false\n        }\n      case actions.DB.OPEN_ADDDB_DIALOG:\n        return {\n          ...state,\n          addDBDialogOpen: true\n        }\n      case actions.DB.CLOSE_ADDDB_DIALOG:\n        return {\n          ...state,\n          addDBDialogOpen: false\n        }\n      case actions.PROGRAMS.SET_PROGRAMS_LOADING:\n        return {\n          ...state,\n          loading: { ...state.loading, programs: action.loading }\n        }\n      default:\n        return state\n    }\n  }\n\n  return (\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <Pane background='tint1' height='100%'>\n        <Header />\n        <Systems />\n        <Switch>\n          <Route path='/search'>\n            <SearchResultsView />\n          </Route>\n          <Route path='/orbitdb/:programName/:dbName'>\n            <DatabaseView />\n          </Route>\n          <Route path='/'>\n            <DatabasesView />\n          </Route>\n        </Switch>\n      </Pane>\n    </StateProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router } from 'react-router-dom'\n\nimport './index.css'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}