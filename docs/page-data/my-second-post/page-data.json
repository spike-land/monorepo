{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/my-second-post/","result":{"data":{"site":{"siteMetadata":{"title":"Zed vision"}},"mdx":{"excerpt":"And lets have some typography h1 h2 h3 h4 h5 This text will be italic I think you should use an  <addr>  element here instead. This text will be bold @mentionsâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My Second Post!\",\n  \"date\": \"2015-05-06T23:46:37.121Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"And lets have some typography\"), mdx(\"hr\", null), mdx(\"h1\", null, \"h1\"), mdx(\"h2\", null, \"h2\"), mdx(\"h3\", null, \"h3\"), mdx(\"h4\", null, \"h4\"), mdx(\"h5\", null, \"h5\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This text will be italic\")), mdx(\"p\", null, \"I think you should use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<addr>\"), \" element here instead.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This text will be bold\")), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  }), \" \", \"@mentions, #refs, \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"\"\n  }, \"links\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"formatting\"), \", and \", mdx(\"del\", null, \"tags\"), \" supported\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  }), \" \", \"list syntax required (any unordered or ordered list supported)\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  }), \" \", \"this is a complete item\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"this is an incomplete item\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"//\\n//  Counter.tsx\\n//\\n\\n() => {\\n    const [state, setState] = React.useState({counter: 0})\\n    \\n    const actions = {\\n    increase: ()=>setState({...state, counter: state.counter + 1}),\\n    }\\n    \\n    return <h3 onClick={actions.increase}>\\n        Counter: {state.counter}\\n        </h3>\\n}\\n\")), mdx(\"p\", null, \"As Kanye West said:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We're living the future so\\nthe present is our past.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You \", mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"can\"), \" combine them\")), mdx(\"h1\", null, \"h1\"), mdx(\"h2\", null, \"h2 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"code\")), mdx(\"p\", null, \"text\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var i=code\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"My Second Post!","date":"May 06, 2015","description":null}}},"pageContext":{"slug":"/my-second-post/","previous":null,"next":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New ways of web development"}}}},"staticQueryHashes":["2841359383"]}