var SHATEST,API_KEY;const corsHeaders={"Access-Control-Allow-Origin":"https://zed.vision","Access-Control-Allow-Methods":"GET,HEAD,POST,OPTIONS","Access-Control-Max-Age":"86400"};function handleOptions(e){const n=e.headers;let s={...n,...corsHeaders,"Access-Control-Allow-Headers":e.headers.get("Access-Control-Request-Headers")};return new Response(e.body,{headers:s})}self.runner=self.runner||"worker-cf";async function handleCloudRequest(e){if(e.method==="GET"){const n=new URL(e.url);if(e.url.includes("?h")){const s=n.searchParams.get("h");if(s!==null){const r=await SHATEST.get(s,"stream");if(r!==null)return new Response(r,{headers:{"content-type":"text/javascript"}})}}if(e.url.includes("?r")){const s=n.searchParams.get("r");if(s!==null){const r=await SHATEST.get(s,"stream");if(r!==null)return new Response(r,{headers:{"content-type":"text/html"}})}}return Response.redirect("https://zed.vision/code",301)}else if(e.method==="POST"){const n=e.headers.get("API_KEY");if(n)return n!==API_KEY?new Response("Sorry, you have supplied an invalid key.",{status:403}):new Response("NOT implemented yet.",{status:404});const s=await e.arrayBuffer(),r=await crypto.subtle.digest({name:"SHA-256"},s),a=Array.from(new Uint8Array(r)),c=a.map(l=>("00"+l.toString(16)).slice(-2)).join(""),o=c.substring(0,8);await SHATEST.put(o,s);const t=new Response(`{"hash":"${o}"}`);return t.headers.append("Access-Control-Allow-Origin","https://zed.vision"),t.headers.append("Access-Control-Allow-Methods","GET,HEAD,POST,OPTIONS"),t.headers.append("Access-Control-Max-Age","86400"),t}return handleOptions(e)}addEventListener("fetch",e=>{if(self.runner!=="worker-cf")return;e.respondWith(handleCloudRequest(e.request))});
