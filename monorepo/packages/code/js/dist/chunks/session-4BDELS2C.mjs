import {
  __publicField
} from "./chunk-XHYF4LCB.mjs";

// js/session.tsx
import { Record } from "https://ga.jspm.io/npm:immutable@4.0.0/dist/immutable.es.js";
import createDelta from "https://unpkg.com/@spike.land/esm@0.6.71/dist/textdiff-create.mjs";
import applyPatch from "https://unpkg.com/@spike.land/esm@0.6.71/dist/textdiff-patch.mjs";
function initSession(room, u) {
  return Record({ ...u, room, state: Record(u.state)() });
}
var hashStore = {};
var CodeSession = class {
  constructor(room, user) {
    __publicField(this, "session");
    __publicField(this, "hashCodeSession");
    __publicField(this, "room", "");
    __publicField(this, "created", new Date().toISOString());
    const savedState = null;
    this.room = room;
    this.session = initSession(room, {
      ...user,
      state: savedState ? savedState : user.state,
      capabilities: {
        ...user.capabilities,
        sessionStorage: storageAvailable("sessionStorage")
      }
    })();
    this.hashCodeSession = this.session.get("state").hashCode();
    hashStore[this.session.get("state").hashCode()] = this.session.get("state");
  }
  addEvent(e) {
    this.session.get("events").push({
      ...e
    });
    setTimeout(() => this.processEvents);
  }
  hashCode() {
    return this.session.get("state").hashCode();
  }
  processEvents() {
    const events = this.session.get("events");
    const event = events.shift();
    if (event) {
      switch (event.type) {
        case "code-init":
          const { code, transpiled, i, css, errorDiff, html } = event;
          const sess = {
            code,
            transpiled,
            i,
            css,
            errorDiff,
            html
          };
          this.session.set("events", events);
          this.session.set("state", Record(sess)());
      }
    }
  }
  createPatchFromHashCode(oldHash, state) {
    if (hashStore[oldHash]) {
      const oldRec = hashStore[oldHash];
      const oldState = JSON.stringify(oldRec.toJSON());
      const newRec = oldRec.merge(state);
      const newHash = newRec.hashCode();
      hashStore[newHash] = newRec;
      const newState = JSON.stringify(newRec.toJSON());
      const patch = createPatch(oldState, newState);
      return {
        oldHash,
        newHash,
        patch
      };
    }
  }
  createPatch(state) {
    if (state.code === this.session.get("state").get("code")) {
      return {
        oldHash: this.session.get("state").hashCode(),
        newHash: this.session.get("state").hashCode(),
        patch: ""
      };
    }
    const oldState = JSON.stringify(this.session.get("state").toJSON());
    const oldHash = this.session.get("state").hashCode();
    hashStore[oldHash] = this.session.get("state");
    const oldRec = this.session.get("state");
    const newRec = oldRec.merge(state);
    const newHash = newRec.hashCode();
    hashStore[newHash] = newRec;
    const newState = JSON.stringify(newRec.toJSON());
    const patch = createPatch(oldState, newState);
    return {
      oldHash,
      newHash,
      patch
    };
  }
  applyPatch({
    oldHash,
    newHash,
    patch
  }) {
    const oldHashCheck = this.session.get("state").hashCode();
    if (oldHashCheck !== oldHash) {
      console.error("Cant update");
      return;
    }
    const oldST = this.session.get("state").toJSON();
    const oldState = JSON.stringify(oldST);
    const oldCode = oldST.code;
    const newState = JSON.parse(applyPatch(oldState, JSON.parse(patch)));
    const newRec = Record(newState)();
    console.log({ newState });
    console.log(newRec.hashCode());
    const newRecord = this.session.get("state").merge(newRec);
    const newCode = newRecord.get("code");
    if (oldCode === newCode) {
      return;
    }
    console.log(newRecord.hashCode());
    const newHashCheck = newRecord.hashCode();
    if (newHashCheck === newHash) {
      this.session = this.session.set("state", newRecord);
    } else {
      console.log("WRONG");
      console.log({
        newState
      });
    }
  }
  json() {
    const user = this.session.toJSON();
    const state = user.state.toJSON();
    return { ...user, state };
  }
  setRoom(room) {
    const user = this.session.set("room", room);
    this.session = user;
  }
};
var session = null;
var session_default = (room, u) => session || new CodeSession(room, u);
function storageAvailable(type) {
  try {
    if (!window.hasOwnProperty(type)) {
      return;
    }
    const storage = window[type];
    const x = "__storage_test__";
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  } catch (e) {
    return false;
  }
}
function createPatch(oldCode, newCode) {
  return JSON.stringify(createDelta(oldCode, newCode));
}
export {
  CodeSession,
  session_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc2Vzc2lvbi50c3giXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGZyb21KUywgaXNLZXllZCwgUmVjb3JkIH0gZnJvbSBcImltbXV0YWJsZVwiO1xuLy8gQHRzLWV4cGVjdC1lcnJvclxuaW1wb3J0IGNyZWF0ZURlbHRhIGZyb20gXCJ0ZXh0ZGlmZi1jcmVhdGVcIjtcbi8vIEB0cy1leHBlY3QtZXJyb3JcbmltcG9ydCBhcHBseVBhdGNoIGZyb20gXCJ0ZXh0ZGlmZi1wYXRjaFwiO1xuLy8gSW1wb3J0ICogYXMgSW1tdXRhYmxlIGZyb20gXCJpbW11dGFibGVcIlxuXG50eXBlIElVc2VybmFtZSA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBJQ29kZVNlc3Npb24ge1xuICBjb2RlOiBzdHJpbmc7XG4gIGk6IG51bWJlcjtcbiAgZXJyb3JEaWZmOiBzdHJpbmc7XG4gIHRyYW5zcGlsZWQ6IHN0cmluZztcbiAgaHRtbDogc3RyaW5nO1xuICBjc3M6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTmV3V1NDb25uZWN0aW9uIHtcbiAgdXVpZDogc3RyaW5nO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgaGFzaENvZGU6IG51bWJlcjtcbiAgdHlwZTogXCJuZXctd3MtY29ubmVjdGlvblwiO1xufVxuXG5pbnRlcmZhY2UgSUNvZGVJbml0RXZlbnQgZXh0ZW5kcyBJQ29kZVNlc3Npb24ge1xuICBuYW1lOiBJVXNlcm5hbWU7XG4gIHV1aWQ6IHN0cmluZztcbiAgdHlwZTogXCJjb2RlLWluaXRcIjtcbiAgaGFzaE9mQ29kZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgT3RoZXJFdmVudCB7XG4gIG5hbWU6IElVc2VybmFtZTtcbiAgdXVpZDogc3RyaW5nO1xuICB0YXJnZXQ6IElVc2VybmFtZSB8IFwiYnJvYWRjYXN0XCI7XG4gIHR5cGU6IFwic3RhcnRcIiB8IFwib3BlblwiIHwgXCJxdWl0XCIgfCBcImdldC1jaWRcIiB8IFwicHJvdmlkZS1jaWRcIiB8IFwibmV3LXdzXCI7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBJRXZlbnQgPVxuICB8IElOZXdXU0Nvbm5lY3Rpb25cbiAgfCBPdGhlckV2ZW50XG4gIHwgSUNvZGVJbml0RXZlbnQ7XG5cbmludGVyZmFjZSBJQ2FwYWJpbGl0aWVzIHtcbiAgcHJldHRpZXI6IGJvb2xlYW47XG4gIGJhYmVsOiBib29sZWFuO1xuICBzZXNzaW9uU3RvcmFnZT86IGJvb2xlYW47XG4gIHdlYlJSVDogYm9vbGVhbjtcbiAgcHJlcmVuZGVyOiBib29sZWFuO1xuICBJUEZTOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElVc2VySlNPTiB7XG4gIG5hbWU6IElVc2VybmFtZTtcbiAgY2FwYWJpbGl0aWVzOiBJQ2FwYWJpbGl0aWVzO1xuICBzdGF0ZTogSUNvZGVTZXNzaW9uO1xuICB1c2VyczogUmVjb3JkPG9iamVjdD47XG4gIGV2ZW50czogSUV2ZW50W107XG59XG5cbmludGVyZmFjZSBJUVRhc2tFdmVudCB7XG4gIHV1aWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBvcGVyYXRpb246IHN0cmluZztcbiAgZGF0YTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElVc2VyIGV4dGVuZHNcbiAgUmVjb3JkPHtcbiAgICBuYW1lOiBJVXNlcm5hbWU7XG4gICAgcm9vbTogc3RyaW5nO1xuICAgIHN0YXRlOiBSZWNvcmQ8SUNvZGVTZXNzaW9uPjtcbiAgICBjYXBhYmlsaXRpZXM6IElDYXBhYmlsaXRpZXM7XG4gICAgdXNlcnM6IFJlY29yZDxvYmplY3Q+O1xuICAgIGV2ZW50czogSUV2ZW50W107XG4gIH0+IHtcbn1cblxuZnVuY3Rpb24gaW5pdFNlc3Npb24ocm9vbTogc3RyaW5nLCB1OiBJVXNlckpTT04pIHtcbiAgcmV0dXJuIFJlY29yZCh7IC4uLnUsIHJvb20sIHN0YXRlOiBSZWNvcmQodS5zdGF0ZSkoKSB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29kZVNlc3Mge1xuICByb29tOiBzdHJpbmc7XG4gIGhhc2hDb2RlU2Vzc2lvbjogbnVtYmVyO1xuICBoYXNoQ29kZTogKCkgPT4gbnVtYmVyO1xuICBhZGRFdmVudDogKGU6IElFdmVudCkgPT4gdm9pZDtcbiAgc2V0Um9vbTogKHJvb206IHN0cmluZykgPT4gdm9pZDtcbiAganNvbjogKCkgPT4gSVVzZXJKU09OO1xuICBwcm9jZXNzRXZlbnRzOiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBoYXNoU3RvcmU6IHsgW2tleTogbnVtYmVyXTogUmVjb3JkPElDb2RlU2Vzc2lvbj4gfSA9IHt9O1xuZXhwb3J0IGNsYXNzIENvZGVTZXNzaW9uIGltcGxlbWVudHMgSUNvZGVTZXNzIHtcbiAgc2Vzc2lvbjogSVVzZXI7XG4gIGhhc2hDb2RlU2Vzc2lvbjogbnVtYmVyO1xuICBwdWJsaWMgcm9vbSA9IFwiXCI7XG4gIGNyZWF0ZWQ6IHN0cmluZyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgY29uc3RydWN0b3Iocm9vbTogc3RyaW5nLCB1c2VyOiBJVXNlckpTT04pIHtcbiAgICBjb25zdCBzYXZlZFN0YXRlOiBJQ29kZVNlc3Npb24gfCBudWxsID0gbnVsbDtcbiAgICB0aGlzLnJvb20gPSByb29tO1xuICAgIC8vIElmICh1c2VyLnN0YXRlLmNvZGUgPT09IFwiXCIgJiYgcm9vbSkge1xuICAgIC8vIGNvbnN0IGNhY2hlS2V5ID0gYHN0YXRlLSR7cm9vbX1gO1xuXG4gICAgLy8gaWYgKHN0b3JhZ2VBdmFpbGFibGUoXCJsb2NhbFN0b3JhZ2VcIikpIHtcbiAgICAvLyAgIGNvbnN0IHNhdmVkU3RhdGVTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjYWNoZUtleSk7XG4gICAgLy8gICBpZiAoc2F2ZWRTdGF0ZVN0cikge1xuICAgIC8vICAgICBzYXZlZFN0YXRlID0gSlNPTi5wYXJzZShzYXZlZFN0YXRlU3RyKTtcbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIGZldGNoKGBodHRwczovL3NwaWtlLmxhbmQvYXBpL3Jvb20vJHtyb29tfS9teVNlc3Npb25gKS50aGVuKFxuICAgIC8vICAgICAgIChyZXNwKSA9PiByZXNwLmpzb24oKSxcbiAgICAvLyAgICAgKS50aGVuKChzZXNzaW9uOiBJVXNlckpTT04pID0+IHtcbiAgICAvLyAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShjYWNoZUtleSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbi5zdGF0ZSkpO1xuICAgIC8vICAgICAgIHRoaXMuc2Vzc2lvbi5zZXQoXCJzdGF0ZVwiLCBSZWNvcmQoc2Vzc2lvbi5zdGF0ZSkoKSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvLyB9XG5cbiAgICB0aGlzLnNlc3Npb24gPSBpbml0U2Vzc2lvbihyb29tLCB7XG4gICAgICAuLi51c2VyLFxuICAgICAgc3RhdGU6IHNhdmVkU3RhdGUgPyBzYXZlZFN0YXRlIDogdXNlci5zdGF0ZSxcblxuICAgICAgY2FwYWJpbGl0aWVzOiB7XG4gICAgICAgIC4uLnVzZXIuY2FwYWJpbGl0aWVzLFxuICAgICAgICBzZXNzaW9uU3RvcmFnZTogc3RvcmFnZUF2YWlsYWJsZShcInNlc3Npb25TdG9yYWdlXCIpLFxuICAgICAgfSxcbiAgICB9KSgpO1xuXG4gICAgdGhpcy5oYXNoQ29kZVNlc3Npb24gPSB0aGlzLnNlc3Npb24uZ2V0KFwic3RhdGVcIikuaGFzaENvZGUoKTtcbiAgICBoYXNoU3RvcmVbdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpLmhhc2hDb2RlKCldID0gdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpO1xuICB9XG5cbiAgcHVibGljIGFkZEV2ZW50KGU6IElFdmVudCkge1xuICAgIHRoaXMuc2Vzc2lvbi5nZXQoXCJldmVudHNcIikucHVzaCh7XG4gICAgICAuLi5lLFxuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wcm9jZXNzRXZlbnRzKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXNoQ29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpLmhhc2hDb2RlKCk7XG4gIH1cblxuICBwcm9jZXNzRXZlbnRzKCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuc2Vzc2lvbi5nZXQoXCJldmVudHNcIik7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHMuc2hpZnQoKTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJjb2RlLWluaXRcIjpcbiAgICAgICAgICBjb25zdCB7IGNvZGUsIHRyYW5zcGlsZWQsIGksIGNzcywgZXJyb3JEaWZmLCBodG1sIH0gPSBldmVudDtcbiAgICAgICAgICBjb25zdCBzZXNzOiBJQ29kZVNlc3Npb24gPSB7XG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgdHJhbnNwaWxlZCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjc3MsXG4gICAgICAgICAgICBlcnJvckRpZmYsXG4gICAgICAgICAgICBodG1sLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLnNlc3Npb24uc2V0KFwiZXZlbnRzXCIsIGV2ZW50cyk7XG4gICAgICAgICAgdGhpcy5zZXNzaW9uLnNldChcInN0YXRlXCIsIFJlY29yZChzZXNzKSgpKTtcblxuICAgICAgICAgIC8vIENvbnN0IGNhY2hlS2V5ID0gYHN0YXRlLSR7dGhpcy5yb29tfWA7XG5cbiAgICAgICAgICAvLyBpZiAoc3RvcmFnZUF2YWlsYWJsZShcImxvY2FsU3RvcmFnZVwiKSkge1xuICAgICAgICAgIC8vICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY2FjaGVLZXksIEpTT04uc3RyaW5naWZ5KHNlc3MpKTtcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgLy8gdGhpcy5zZXNzaW9uLnNldChcImV2ZW50c1wiLCBldmVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVQYXRjaEZyb21IYXNoQ29kZShvbGRIYXNoOiBudW1iZXIsIHN0YXRlOiBJQ29kZVNlc3Npb24pIHtcbiAgICBpZiAoaGFzaFN0b3JlW29sZEhhc2hdKSB7XG4gICAgICBjb25zdCBvbGRSZWMgPSBoYXNoU3RvcmVbb2xkSGFzaF07XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IEpTT04uc3RyaW5naWZ5KG9sZFJlYy50b0pTT04oKSk7XG5cbiAgICAgIGNvbnN0IG5ld1JlYyA9IG9sZFJlYy5tZXJnZShzdGF0ZSk7XG4gICAgICBjb25zdCBuZXdIYXNoID0gbmV3UmVjLmhhc2hDb2RlKCk7XG4gICAgICBoYXNoU3RvcmVbbmV3SGFzaF0gPSBuZXdSZWM7XG5cbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gSlNPTi5zdHJpbmdpZnkobmV3UmVjLnRvSlNPTigpKTtcbiAgICAgIGNvbnN0IHBhdGNoID0gY3JlYXRlUGF0Y2gob2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9sZEhhc2gsXG4gICAgICAgIG5ld0hhc2gsXG4gICAgICAgIHBhdGNoLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlUGF0Y2goc3RhdGU6IElDb2RlU2Vzc2lvbikge1xuICAgIGlmIChzdGF0ZS5jb2RlID09PSB0aGlzLnNlc3Npb24uZ2V0KFwic3RhdGVcIikuZ2V0KFwiY29kZVwiKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb2xkSGFzaDogdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpLmhhc2hDb2RlKCksXG4gICAgICAgIG5ld0hhc2g6IHRoaXMuc2Vzc2lvbi5nZXQoXCJzdGF0ZVwiKS5oYXNoQ29kZSgpLFxuICAgICAgICBwYXRjaDogXCJcIixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkU3RhdGUgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnNlc3Npb24uZ2V0KFwic3RhdGVcIikudG9KU09OKCkpO1xuXG4gICAgY29uc3Qgb2xkSGFzaCA9IHRoaXMuc2Vzc2lvbi5nZXQoXCJzdGF0ZVwiKS5oYXNoQ29kZSgpO1xuICAgIGhhc2hTdG9yZVtvbGRIYXNoXSA9IHRoaXMuc2Vzc2lvbi5nZXQoXCJzdGF0ZVwiKTtcbiAgICBjb25zdCBvbGRSZWMgPSB0aGlzLnNlc3Npb24uZ2V0KFwic3RhdGVcIik7XG5cbiAgICBjb25zdCBuZXdSZWMgPSBvbGRSZWMubWVyZ2Uoc3RhdGUpO1xuICAgIGNvbnN0IG5ld0hhc2ggPSBuZXdSZWMuaGFzaENvZGUoKTtcblxuICAgIGhhc2hTdG9yZVtuZXdIYXNoXSA9IG5ld1JlYztcblxuICAgIGNvbnN0IG5ld1N0YXRlID0gSlNPTi5zdHJpbmdpZnkobmV3UmVjLnRvSlNPTigpKTtcbiAgICBjb25zdCBwYXRjaCA9IGNyZWF0ZVBhdGNoKG9sZFN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9sZEhhc2gsXG4gICAgICBuZXdIYXNoLFxuICAgICAgcGF0Y2gsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhcHBseVBhdGNoKHtcbiAgICBvbGRIYXNoLFxuICAgIG5ld0hhc2gsXG4gICAgcGF0Y2gsXG4gIH06IHsgb2xkSGFzaDogbnVtYmVyOyBuZXdIYXNoOiBudW1iZXI7IHBhdGNoOiBzdHJpbmcgfSkge1xuICAgIGNvbnN0IG9sZEhhc2hDaGVjayA9IHRoaXMuc2Vzc2lvbi5nZXQoXCJzdGF0ZVwiKS5oYXNoQ29kZSgpO1xuXG4gICAgaWYgKG9sZEhhc2hDaGVjayAhPT0gb2xkSGFzaCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbnQgdXBkYXRlXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFNUID0gdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpLnRvSlNPTigpO1xuICAgIGNvbnN0IG9sZFN0YXRlID0gSlNPTi5zdHJpbmdpZnkob2xkU1QpO1xuICAgIGNvbnN0IG9sZENvZGUgPSBvbGRTVC5jb2RlO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gSlNPTi5wYXJzZShhcHBseVBhdGNoKG9sZFN0YXRlLCBKU09OLnBhcnNlKHBhdGNoKSkpO1xuICAgIGNvbnN0IG5ld1JlYzogUmVjb3JkPElDb2RlU2Vzc2lvbj4gPSBSZWNvcmQ8SUNvZGVTZXNzaW9uPihuZXdTdGF0ZSkoKTtcblxuICAgIGNvbnNvbGUubG9nKHsgbmV3U3RhdGUgfSk7XG4gICAgY29uc29sZS5sb2cobmV3UmVjLmhhc2hDb2RlKCkpO1xuXG4gICAgY29uc3QgbmV3UmVjb3JkID0gdGhpcy5zZXNzaW9uLmdldChcInN0YXRlXCIpLm1lcmdlKG5ld1JlYyk7XG4gICAgY29uc3QgbmV3Q29kZSA9IG5ld1JlY29yZC5nZXQoXCJjb2RlXCIpO1xuICAgIGlmIChvbGRDb2RlID09PSBuZXdDb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2cobmV3UmVjb3JkLmhhc2hDb2RlKCkpO1xuICAgIGNvbnN0IG5ld0hhc2hDaGVjayA9IG5ld1JlY29yZC5oYXNoQ29kZSgpO1xuXG4gICAgaWYgKG5ld0hhc2hDaGVjayA9PT0gbmV3SGFzaCkge1xuICAgICAgdGhpcy5zZXNzaW9uID0gdGhpcy5zZXNzaW9uLnNldChcInN0YXRlXCIsIG5ld1JlY29yZCk7XG4gICAgICAvLyAgQ29uc29sZS5lcnJvcihcIldST05HIHVwZGF0ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJXUk9OR1wiKTtcbiAgICAgIGNvbnNvbGUubG9nKHtcbiAgICAgICAgbmV3U3RhdGUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMganNvbigpIHtcbiAgICBjb25zdCB1c2VyID0gdGhpcy5zZXNzaW9uLnRvSlNPTigpO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlci5zdGF0ZS50b0pTT04oKTtcbiAgICByZXR1cm4geyAuLi51c2VyLCBzdGF0ZSB9O1xuICB9XG5cbiAgcHVibGljIHNldFJvb20ocm9vbTogc3RyaW5nKSB7XG4gICAgY29uc3QgdXNlciA9IHRoaXMuc2Vzc2lvbi5zZXQoXCJyb29tXCIsIHJvb20pO1xuICAgIHRoaXMuc2Vzc2lvbiA9IHVzZXI7XG4gIH1cbn1cblxuY29uc3Qgc2Vzc2lvbjogQ29kZVNlc3Npb24gfCBudWxsID0gbnVsbDtcbmV4cG9ydCBkZWZhdWx0IChyb29tOiBzdHJpbmcsIHU6IElVc2VySlNPTik6IElDb2RlU2VzcyA9PlxuICBzZXNzaW9uIHx8IG5ldyBDb2RlU2Vzc2lvbihyb29tLCB1KTtcblxuZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIXdpbmRvdy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3dbdHlwZSBhcyBrZXlvZiBXaW5kb3ddO1xuICAgIGNvbnN0IHggPSBcIl9fc3RvcmFnZV90ZXN0X19cIjtcbiAgICBzdG9yYWdlLnNldEl0ZW0oeCwgeCk7XG4gICAgc3RvcmFnZS5yZW1vdmVJdGVtKHgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2gob2xkQ29kZTogc3RyaW5nLCBuZXdDb2RlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNyZWF0ZURlbHRhKG9sZENvZGUsIG5ld0NvZGUpKTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7O0FBQUE7QUFFQTtBQUVBO0FBNEVBLHFCQUFxQixNQUFjLEdBQWM7QUFDL0MsU0FBTyxPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sT0FBTyxFQUFFO0FBQUE7QUFhOUMsSUFBTSxZQUFxRDtBQUNwRCx3QkFBdUM7QUFBQSxFQUs1QyxZQUFZLE1BQWMsTUFBaUI7QUFKM0M7QUFDQTtBQUNPLGdDQUFPO0FBQ2QsbUNBQWtCLElBQUksT0FBTztBQUUzQixVQUFN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
