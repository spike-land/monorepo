{
  "version": 3,
  "sources": ["../../getWorker.mjs", "../../formatter.mjs"],
  "sourcesContent": ["import { wrap } from \"comlink\";\n\nexport const getWrappedFromWorkerSrc = (src) => {\n  const url = URL.createObjectURL(\n    new Blob([src], { type: \"application/javascript\" }),\n  );\n\n  const worker = new Worker(url);\n  const { port1, port2 } = new MessageChannel();\n  const message = {\n    comlinkInit: true,\n    port: port1,\n  };\n\n  worker.postMessage(message, [port1]);\n\n  return wrap(port2);\n};\n\nexport const getWorker = (file, dist = false) => {\n  let workerSrc;\n  let forceNormalWorker = false;\n  const { pathname } = window.location;\n  if (pathname.includes(\"/ipfs/\")) {\n    const cid = pathname.slice(6, 52);\n    forceNormalWorker = true;\n    workerSrc = `/ipfs/${cid}/js/workers/${file}`;\n  } else if (location.origin !== \"https://spike.land\") {\n    forceNormalWorker = true;\n    workerSrc = window.URL.createObjectURL(\n      new Blob([\n        dist === false\n          ? `self.importScripts(\"./workers/${file}\");`\n          : `self.importScripts(\"./dist/workers/js/workers/${file}\");`,\n      ]),\n    );\n  } else {\n    workerSrc = `/workers/${file}`;\n  }\n\n  return {\n    workerSrc,\n    forceNormalWorker,\n  };\n};\n\nconst wrapped = {};\nexport const getWrapped = (file) => {\n  if (wrapped[file]) {\n    return wrapped[file];\n  }\n\n  let workerSrc;\n  let forceNormalWorker = false;\n  const { pathname } = window.location;\n  if (pathname.includes(\"/ipfs/\")) {\n    const cid = pathname.slice(6, 52);\n    forceNormalWorker = true;\n    workerSrc = `/ipfs/${cid}/js/workers/${file}`;\n  } else if (location.origin !== \"https://spike.land\") {\n    forceNormalWorker = true;\n    workerSrc = window.URL.createObjectURL(\n      new Blob([\n        `self.importScripts(\"https://spike.land/workers/${file}\");`,\n      ]),\n    );\n  } else {\n    workerSrc = `https://spike.land/workers/${file}`;\n  }\n\n  wrapped[file] = wrapped[workerSrc] = wrapped[workerSrc] ||\n    init(workerSrc, forceNormalWorker);\n\n  return wrapped[workerSrc];\n};\n\nfunction init(workerSrc, forceNormalWorker) {\n  if (forceNormalWorker || typeof SharedWorker === \"undefined\") {\n    const worker = new Worker(workerSrc);\n    const { port1, port2 } = new MessageChannel();\n    const message = {\n      comlinkInit: true,\n      port: port1,\n    };\n\n    worker.postMessage(message, [port1]);\n\n    return wrap(port2);\n  }\n\n  const worker = new SharedWorker(workerSrc);\n  worker.port.start();\n\n  return wrap(worker.port);\n}\n", "import src from \"./dist/workers/js/workers/prettier.worker.js\";\nimport { getWrappedFromWorkerSrc } from \"./getWorker.mjs\";\n\n/**\n * @param {string} code\n * @returns {Promise<string>}\n */\n\nconst format = getWrappedFromWorkerSrc(src);\n\nexport const formatter = async (code) => (await format)(code);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEO,IAAM,0BAA0B,CAAC,QAAQ;AAC9C,QAAM,MAAM,IAAI,gBACd,IAAI,KAAK,CAAC,MAAM,EAAE,MAAM;AAG1B,QAAM,SAAS,IAAI,OAAO;AAC1B,QAAM,EAAE,OAAO,UAAU,IAAI;AAC7B,QAAM,UAAU;AAAA,IACd,aAAa;AAAA,IACb,MAAM;AAAA;AAGR,SAAO,YAAY,SAAS,CAAC;AAE7B,SAAO,KAAK;AAAA;;;ACRd,IAAM,SAAS,wBAAwB;AAEhC,IAAM,YAAY,OAAO,SAAU,OAAM,QAAQ;",
  "names": []
}
