{
  "version": 3,
  "sources": ["../../../../../node_modules/monaco-editor/esm/vs/basic-languages/elixir/elixir.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/elixir/elixir.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ],\n  autoClosingPairs: [\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"comment\"] },\n    { open: '\"\"\"', close: '\"\"\"' },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"<<\", close: \">>\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: /^\\s*(after|else|catch|rescue|fn|[^#]*(do|<\\-|\\->|\\{|\\[|\\=))\\s*$/,\n    decreaseIndentPattern: /^\\s*((\\}|\\])\\s*$|(after|else|catch|rescue|end)\\b)/\n  }\n};\nvar language = {\n  defaultToken: \"source\",\n  tokenPostfix: \".elixir\",\n  brackets: [\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"<<\", close: \">>\", token: \"delimiter.angle.special\" }\n  ],\n  declarationKeywords: [\n    \"def\",\n    \"defp\",\n    \"defn\",\n    \"defnp\",\n    \"defguard\",\n    \"defguardp\",\n    \"defmacro\",\n    \"defmacrop\",\n    \"defdelegate\",\n    \"defcallback\",\n    \"defmacrocallback\",\n    \"defmodule\",\n    \"defprotocol\",\n    \"defexception\",\n    \"defimpl\",\n    \"defstruct\"\n  ],\n  operatorKeywords: [\"and\", \"in\", \"not\", \"or\", \"when\"],\n  namespaceKeywords: [\"alias\", \"import\", \"require\", \"use\"],\n  otherKeywords: [\n    \"after\",\n    \"case\",\n    \"catch\",\n    \"cond\",\n    \"do\",\n    \"else\",\n    \"end\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"quote\",\n    \"raise\",\n    \"receive\",\n    \"rescue\",\n    \"super\",\n    \"throw\",\n    \"try\",\n    \"unless\",\n    \"unquote_splicing\",\n    \"unquote\",\n    \"with\"\n  ],\n  constants: [\"true\", \"false\", \"nil\"],\n  nameBuiltin: [\"__MODULE__\", \"__DIR__\", \"__ENV__\", \"__CALLER__\", \"__STACKTRACE__\"],\n  operator: /-[->]?|!={0,2}|\\*{1,2}|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\n  variableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\n  atomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\n  specialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\n  aliasPart: /[A-Z][a-zA-Z0-9_]*/,\n  moduleName: /@aliasPart(?:\\.@aliasPart)*/,\n  sigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\n  sigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\n  sigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\n  sigilModifiers: /[a-zA-Z0-9]*/,\n  decimal: /\\d(?:_?\\d)*/,\n  hex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\n  octal: /[0-7](_?[0-7])*/,\n  binary: /[01](_?[01])*/,\n  escape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      { include: \"@comments\" },\n      { include: \"@keywordsShorthand\" },\n      { include: \"@numbers\" },\n      { include: \"@identifiers\" },\n      { include: \"@strings\" },\n      { include: \"@atoms\" },\n      { include: \"@sigils\" },\n      { include: \"@attributes\" },\n      { include: \"@symbols\" }\n    ],\n    whitespace: [[/\\s+/, \"white\"]],\n    comments: [[/(#)(.*)/, [\"comment.punctuation\", \"comment\"]]],\n    keywordsShorthand: [\n      [/(@atomName)(:)/, [\"constant\", \"constant.punctuation\"]],\n      [\n        /\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/,\n        { token: \"constant.delimiter\", next: \"@doubleQuotedStringKeyword\" }\n      ],\n      [\n        /'(?=([^']|#\\{.*?\\}|\\\\')*':)/,\n        { token: \"constant.delimiter\", next: \"@singleQuotedStringKeyword\" }\n      ]\n    ],\n    doubleQuotedStringKeyword: [\n      [/\":/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    singleQuotedStringKeyword: [\n      [/':/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    numbers: [\n      [/0b@binary/, \"number.binary\"],\n      [/0o@octal/, \"number.octal\"],\n      [/0x@hex/, \"number.hex\"],\n      [/@decimal\\.@decimal([eE]-?@decimal)?/, \"number.float\"],\n      [/@decimal/, \"number\"]\n    ],\n    identifiers: [\n      [\n        /\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/,\n        [\n          \"keyword.declaration\",\n          \"white\",\n          {\n            cases: {\n              unquote: \"keyword\",\n              \"@default\": \"function\"\n            }\n          }\n        ]\n      ],\n      [\n        /(@variableName)(?=\\s*\\.?\\s*\\()/,\n        {\n          cases: {\n            \"@declarationKeywords\": \"keyword.declaration\",\n            \"@namespaceKeywords\": \"keyword\",\n            \"@otherKeywords\": \"keyword\",\n            \"@default\": \"function.call\"\n          }\n        }\n      ],\n      [\n        /(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/,\n        [\"type.identifier\", \"white\", \"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/,\n        [\"constant.punctuation\", \"constant\", \"white\", \"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /(\\|>)(\\s*)(@variableName)/,\n        [\n          \"operator\",\n          \"white\",\n          {\n            cases: {\n              \"@otherKeywords\": \"keyword\",\n              \"@default\": \"function.call\"\n            }\n          }\n        ]\n      ],\n      [\n        /(&)(\\s*)(@variableName)/,\n        [\"operator\", \"white\", \"function.call\"]\n      ],\n      [\n        /@variableName/,\n        {\n          cases: {\n            \"@declarationKeywords\": \"keyword.declaration\",\n            \"@operatorKeywords\": \"keyword.operator\",\n            \"@namespaceKeywords\": \"keyword\",\n            \"@otherKeywords\": \"keyword\",\n            \"@constants\": \"constant.language\",\n            \"@nameBuiltin\": \"variable.language\",\n            \"_.*\": \"comment.unused\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/@moduleName/, \"type.identifier\"]\n    ],\n    strings: [\n      [/\"\"\"/, { token: \"string.delimiter\", next: \"@doubleQuotedHeredoc\" }],\n      [/'''/, { token: \"string.delimiter\", next: \"@singleQuotedHeredoc\" }],\n      [/\"/, { token: \"string.delimiter\", next: \"@doubleQuotedString\" }],\n      [/'/, { token: \"string.delimiter\", next: \"@singleQuotedString\" }]\n    ],\n    doubleQuotedHeredoc: [\n      [/\"\"\"/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    singleQuotedHeredoc: [\n      [/'''/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    doubleQuotedString: [\n      [/\"/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    singleQuotedString: [\n      [/'/, { token: \"string.delimiter\", next: \"@pop\" }],\n      { include: \"@stringContentInterpol\" }\n    ],\n    atoms: [\n      [/(:)(@atomName)/, [\"constant.punctuation\", \"constant\"]],\n      [/:\"/, { token: \"constant.delimiter\", next: \"@doubleQuotedStringAtom\" }],\n      [/:'/, { token: \"constant.delimiter\", next: \"@singleQuotedStringAtom\" }]\n    ],\n    doubleQuotedStringAtom: [\n      [/\"/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    singleQuotedStringAtom: [\n      [/'/, { token: \"constant.delimiter\", next: \"@pop\" }],\n      { include: \"@stringConstantContentInterpol\" }\n    ],\n    sigils: [\n      [/~[a-z]@sigilStartDelimiter/, { token: \"@rematch\", next: \"@sigil.interpol\" }],\n      [/~[A-Z]@sigilStartDelimiter/, { token: \"@rematch\", next: \"@sigil.noInterpol\" }]\n    ],\n    sigil: [\n      [/~([a-zA-Z])\\{/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.{.}\" }],\n      [/~([a-zA-Z])\\[/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.[.]\" }],\n      [/~([a-zA-Z])\\(/, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.(.)\" }],\n      [/~([a-zA-Z])\\</, { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.<.>\" }],\n      [\n        /~([a-zA-Z])(@sigilSymmetricDelimiter)/,\n        { token: \"@rematch\", switchTo: \"@sigilStart.$S2.$1.$2.$2\" }\n      ]\n    ],\n    \"sigilStart.interpol.s\": [\n      [\n        /~s@sigilStartDelimiter/,\n        {\n          token: \"string.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol.s\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"string.delimiter\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      { include: \"@stringContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol.S\": [\n      [\n        /~S@sigilStartDelimiter/,\n        {\n          token: \"string.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol.S\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"string\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"string.delimiter\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      { include: \"@stringContent\" }\n    ],\n    \"sigilStart.interpol.r\": [\n      [\n        /~r@sigilStartDelimiter/,\n        {\n          token: \"regexp.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol.r\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"regexp.delimiter\", next: \"@pop\" },\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexpContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol.R\": [\n      [\n        /~R@sigilStartDelimiter/,\n        {\n          token: \"regexp.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol.R\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"regexp\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"regexp.delimiter\", next: \"@pop\" },\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexpContent\" }\n    ],\n    \"sigilStart.interpol\": [\n      [\n        /~([a-zA-Z])@sigilStartDelimiter/,\n        {\n          token: \"sigil.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.interpol\": [\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"sigil.delimiter\", next: \"@pop\" },\n            \"@default\": \"sigil\"\n          }\n        }\n      ],\n      { include: \"@sigilContentInterpol\" }\n    ],\n    \"sigilStart.noInterpol\": [\n      [\n        /~([a-zA-Z])@sigilStartDelimiter/,\n        {\n          token: \"sigil.delimiter\",\n          switchTo: \"@sigilContinue.$S2.$S3.$S4.$S5\"\n        }\n      ]\n    ],\n    \"sigilContinue.noInterpol\": [\n      [/(^|[^\\\\])\\\\@sigilEndDelimiter/, \"sigil\"],\n      [\n        /(@sigilEndDelimiter)@sigilModifiers/,\n        {\n          cases: {\n            \"$1==$S5\": { token: \"sigil.delimiter\", next: \"@pop\" },\n            \"@default\": \"sigil\"\n          }\n        }\n      ],\n      { include: \"@sigilContent\" }\n    ],\n    attributes: [\n      [\n        /\\@(module|type)?doc (~[sS])?\"\"\"/,\n        {\n          token: \"comment.block.documentation\",\n          next: \"@doubleQuotedHeredocDocstring\"\n        }\n      ],\n      [\n        /\\@(module|type)?doc (~[sS])?\"/,\n        {\n          token: \"comment.block.documentation\",\n          next: \"@doubleQuotedStringDocstring\"\n        }\n      ],\n      [/\\@(module|type)?doc false/, \"comment.block.documentation\"],\n      [/\\@(@variableName)/, \"variable\"]\n    ],\n    doubleQuotedHeredocDocstring: [\n      [/\"\"\"/, { token: \"comment.block.documentation\", next: \"@pop\" }],\n      { include: \"@docstringContent\" }\n    ],\n    doubleQuotedStringDocstring: [\n      [/\"/, { token: \"comment.block.documentation\", next: \"@pop\" }],\n      { include: \"@docstringContent\" }\n    ],\n    symbols: [\n      [/\\?(\\\\.|[^\\\\\\s])/, \"number.constant\"],\n      [/&\\d+/, \"operator\"],\n      [/<<<|>>>/, \"operator\"],\n      [/[()\\[\\]\\{\\}]|<<|>>/, \"@brackets\"],\n      [/\\.\\.\\./, \"identifier\"],\n      [/=>/, \"punctuation\"],\n      [/@operator/, \"operator\"],\n      [/[:;,.%]/, \"punctuation\"]\n    ],\n    stringContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@stringContent\" }\n    ],\n    stringContent: [[/./, \"string\"]],\n    stringConstantContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@stringConstantContent\" }\n    ],\n    stringConstantContent: [[/./, \"constant\"]],\n    regexpContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@regexpContent\" }\n    ],\n    regexpContent: [\n      [/(\\s)(#)(\\s.*)$/, [\"white\", \"comment.punctuation\", \"comment\"]],\n      [/./, \"regexp\"]\n    ],\n    sigilContentInterpol: [\n      { include: \"@interpolation\" },\n      { include: \"@escapeChar\" },\n      { include: \"@sigilContent\" }\n    ],\n    sigilContent: [[/./, \"sigil\"]],\n    docstringContent: [[/./, \"comment.block.documentation\"]],\n    escapeChar: [[/@escape/, \"constant.character.escape\"]],\n    interpolation: [[/#{/, { token: \"delimiter.bracket.embed\", next: \"@interpolationContinue\" }]],\n    interpolationContinue: [\n      [/}/, { token: \"delimiter.bracket.embed\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],
  "mappings": "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",
  "names": []
}
