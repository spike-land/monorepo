import {
  editor_main_exports
} from "./chunk-UT5IC57H.mjs";
import "./chunk-MACA4S64.mjs";
import {
  Uri,
  editor,
  languages
} from "./chunk-IEYW77FP.mjs";
import {
  __commonJS,
  __toESM
} from "./chunk-BZTAI3VG.mjs";

// (disabled):os
var require_os = __commonJS({
  "(disabled):os"() {
  }
});

// ../../node_modules/@types/react/index.d.ts?text
var index_d_default = "data:text/plain;charset=utf-8;base64,";

// ../../node_modules/@types/react/jsx-runtime.d.ts?text
var jsx_runtime_d_default = "data:text/plain;charset=utf-8;base64,Ly8gRXhwb3NlIGBKU1hgIG5hbWVzcGFjZSBpbiBgZ2xvYmFsYCBuYW1lc3BhY2UKaW1wb3J0ICcuLyc7Cg==";

// ../../node_modules/@types/prop-types/index.d.ts?text
var index_d_default2 = "data:text/plain;charset=utf-8;base64,Ly8gVHlwZSBkZWZpbml0aW9ucyBmb3IgcHJvcC10eXBlcyAxNS43Ci8vIFByb2plY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3Byb3AtdHlwZXMsIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0Ci8vIERlZmluaXRpb25zIGJ5OiBEb3Z5ZGFzTmF2aWNrYXMgPGh0dHBzOi8vZ2l0aHViLmNvbS9Eb3Z5ZGFzTmF2aWNrYXM+Ci8vICAgICAgICAgICAgICAgICBGZXJkeSBCdWRoaWRoYXJtYSA8aHR0cHM6Ly9naXRodWIuY29tL2ZlcmRhYmVyPgovLyAgICAgICAgICAgICAgICAgU2ViYXN0aWFuIFNpbGJlcm1hbm4gPGh0dHBzOi8vZ2l0aHViLmNvbS9lcHMxbG9uPgovLyBEZWZpbml0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL0RlZmluaXRlbHlUeXBlZC9EZWZpbml0ZWx5VHlwZWQKLy8gVHlwZVNjcmlwdCBWZXJzaW9uOiAyLjgKCmV4cG9ydCB0eXBlIFJlYWN0Q29tcG9uZW50TGlrZSA9CiAgICB8IHN0cmluZwogICAgfCAoKHByb3BzOiBhbnksIGNvbnRleHQ/OiBhbnkpID0+IGFueSkKICAgIHwgKG5ldyAocHJvcHM6IGFueSwgY29udGV4dD86IGFueSkgPT4gYW55KTsKCmV4cG9ydCBpbnRlcmZhY2UgUmVhY3RFbGVtZW50TGlrZSB7CiAgICB0eXBlOiBSZWFjdENvbXBvbmVudExpa2U7CiAgICBwcm9wczogYW55OwogICAga2V5OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsOwp9CgpleHBvcnQgaW50ZXJmYWNlIFJlYWN0Tm9kZUFycmF5IGV4dGVuZHMgSXRlcmFibGU8UmVhY3ROb2RlTGlrZT4ge30KCmV4cG9ydCB0eXBlIFJlYWN0Tm9kZUxpa2UgPQogICAgfCBSZWFjdEVsZW1lbnRMaWtlCiAgICB8IFJlYWN0Tm9kZUFycmF5CiAgICB8IHN0cmluZwogICAgfCBudW1iZXIKICAgIHwgYm9vbGVhbgogICAgfCBudWxsCiAgICB8IHVuZGVmaW5lZDsKCmV4cG9ydCBjb25zdCBub21pbmFsVHlwZUhhY2s6IHVuaXF1ZSBzeW1ib2w7CgpleHBvcnQgdHlwZSBJc09wdGlvbmFsPFQ+ID0gdW5kZWZpbmVkIGV4dGVuZHMgVCA/IHRydWUgOiBmYWxzZTsKCmV4cG9ydCB0eXBlIFJlcXVpcmVkS2V5czxWPiA9IHsgW0sgaW4ga2V5b2YgVl0tPzogRXhjbHVkZTxWW0tdLCB1bmRlZmluZWQ+IGV4dGVuZHMgVmFsaWRhdG9yPGluZmVyIFQ+ID8gSXNPcHRpb25hbDxUPiBleHRlbmRzIHRydWUgPyBuZXZlciA6IEsgOiBuZXZlciB9W2tleW9mIFZdOwpleHBvcnQgdHlwZSBPcHRpb25hbEtleXM8Vj4gPSBFeGNsdWRlPGtleW9mIFYsIFJlcXVpcmVkS2V5czxWPj47CmV4cG9ydCB0eXBlIEluZmVyUHJvcHNJbm5lcjxWPiA9IHsgW0sgaW4ga2V5b2YgVl0tPzogSW5mZXJUeXBlPFZbS10+OyB9OwoKZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0b3I8VD4gewogICAgKHByb3BzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBwcm9wTmFtZTogc3RyaW5nLCBjb21wb25lbnROYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBzdHJpbmcsIHByb3BGdWxsTmFtZTogc3RyaW5nKTogRXJyb3IgfCBudWxsOwogICAgW25vbWluYWxUeXBlSGFja10/OiB7CiAgICAgICAgdHlwZTogVDsKICAgIH0gfCB1bmRlZmluZWQ7Cn0KCmV4cG9ydCBpbnRlcmZhY2UgUmVxdWlyZWFibGU8VD4gZXh0ZW5kcyBWYWxpZGF0b3I8VCB8IHVuZGVmaW5lZCB8IG51bGw+IHsKICAgIGlzUmVxdWlyZWQ6IFZhbGlkYXRvcjxOb25OdWxsYWJsZTxUPj47Cn0KCmV4cG9ydCB0eXBlIFZhbGlkYXRpb25NYXA8VD4gPSB7IFtLIGluIGtleW9mIFRdPzogVmFsaWRhdG9yPFRbS10+IH07CgpleHBvcnQgdHlwZSBJbmZlclR5cGU8Vj4gPSBWIGV4dGVuZHMgVmFsaWRhdG9yPGluZmVyIFQ+ID8gVCA6IGFueTsKZXhwb3J0IHR5cGUgSW5mZXJQcm9wczxWPiA9CiAgICAmIEluZmVyUHJvcHNJbm5lcjxQaWNrPFYsIFJlcXVpcmVkS2V5czxWPj4+CiAgICAmIFBhcnRpYWw8SW5mZXJQcm9wc0lubmVyPFBpY2s8ViwgT3B0aW9uYWxLZXlzPFY+Pj4+OwoKZXhwb3J0IGNvbnN0IGFueTogUmVxdWlyZWFibGU8YW55PjsKZXhwb3J0IGNvbnN0IGFycmF5OiBSZXF1aXJlYWJsZTxhbnlbXT47CmV4cG9ydCBjb25zdCBib29sOiBSZXF1aXJlYWJsZTxib29sZWFuPjsKZXhwb3J0IGNvbnN0IGZ1bmM6IFJlcXVpcmVhYmxlPCguLi5hcmdzOiBhbnlbXSkgPT4gYW55PjsKZXhwb3J0IGNvbnN0IG51bWJlcjogUmVxdWlyZWFibGU8bnVtYmVyPjsKZXhwb3J0IGNvbnN0IG9iamVjdDogUmVxdWlyZWFibGU8b2JqZWN0PjsKZXhwb3J0IGNvbnN0IHN0cmluZzogUmVxdWlyZWFibGU8c3RyaW5nPjsKZXhwb3J0IGNvbnN0IG5vZGU6IFJlcXVpcmVhYmxlPFJlYWN0Tm9kZUxpa2U+OwpleHBvcnQgY29uc3QgZWxlbWVudDogUmVxdWlyZWFibGU8UmVhY3RFbGVtZW50TGlrZT47CmV4cG9ydCBjb25zdCBzeW1ib2w6IFJlcXVpcmVhYmxlPHN5bWJvbD47CmV4cG9ydCBjb25zdCBlbGVtZW50VHlwZTogUmVxdWlyZWFibGU8UmVhY3RDb21wb25lbnRMaWtlPjsKZXhwb3J0IGZ1bmN0aW9uIGluc3RhbmNlT2Y8VD4oZXhwZWN0ZWRDbGFzczogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVCk6IFJlcXVpcmVhYmxlPFQ+OwpleHBvcnQgZnVuY3Rpb24gb25lT2Y8VD4odHlwZXM6IFJlYWRvbmx5QXJyYXk8VD4pOiBSZXF1aXJlYWJsZTxUPjsKZXhwb3J0IGZ1bmN0aW9uIG9uZU9mVHlwZTxUIGV4dGVuZHMgVmFsaWRhdG9yPGFueT4+KHR5cGVzOiBUW10pOiBSZXF1aXJlYWJsZTxOb25OdWxsYWJsZTxJbmZlclR5cGU8VD4+PjsKZXhwb3J0IGZ1bmN0aW9uIGFycmF5T2Y8VD4odHlwZTogVmFsaWRhdG9yPFQ+KTogUmVxdWlyZWFibGU8VFtdPjsKZXhwb3J0IGZ1bmN0aW9uIG9iamVjdE9mPFQ+KHR5cGU6IFZhbGlkYXRvcjxUPik6IFJlcXVpcmVhYmxlPHsgW0sgaW4ga2V5b2YgYW55XTogVDsgfT47CmV4cG9ydCBmdW5jdGlvbiBzaGFwZTxQIGV4dGVuZHMgVmFsaWRhdGlvbk1hcDxhbnk+Pih0eXBlOiBQKTogUmVxdWlyZWFibGU8SW5mZXJQcm9wczxQPj47CmV4cG9ydCBmdW5jdGlvbiBleGFjdDxQIGV4dGVuZHMgVmFsaWRhdGlvbk1hcDxhbnk+Pih0eXBlOiBQKTogUmVxdWlyZWFibGU8UmVxdWlyZWQ8SW5mZXJQcm9wczxQPj4+OwoKLyoqCiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy4KICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuCiAqCiAqIEBwYXJhbSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlCiAqIEBwYXJhbSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZAogKiBAcGFyYW0gbG9jYXRpb24gZS5nLiAicHJvcCIsICJjb250ZXh0IiwgImNoaWxkIGNvbnRleHQiCiAqIEBwYXJhbSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMKICogQHBhcmFtIGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjawogKi8KZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjczogYW55LCB2YWx1ZXM6IGFueSwgbG9jYXRpb246IHN0cmluZywgY29tcG9uZW50TmFtZTogc3RyaW5nLCBnZXRTdGFjaz86ICgpID0+IGFueSk6IHZvaWQ7CgovKioKICogT25seSBhdmFpbGFibGUgaWYgTk9ERV9FTlY9cHJvZHVjdGlvbgogKi8KZXhwb3J0IGZ1bmN0aW9uIHJlc2V0V2FybmluZ0NhY2hlKCk6IHZvaWQ7Cg==";

// ../../node_modules/csstype/index.d.ts?text
var index_d_default3 = "data:text/plain;charset=utf-8;base64,";

// js/types/framer.d.ts?text
var framer_d_default = "data:text/plain;charset=utf-8;base64,";

// ../../node_modules/@emotion/styled/types/base.d.ts?text
var base_d_default = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMy4yCgppbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgQ29tcG9uZW50U2VsZWN0b3IsIEludGVycG9sYXRpb24gfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnCmltcG9ydCB7IFByb3BzT2YsIERpc3RyaWJ1dGl2ZU9taXQsIFRoZW1lIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnCgpleHBvcnQgewogIEFycmF5SW50ZXJwb2xhdGlvbiwKICBDU1NPYmplY3QsCiAgRnVuY3Rpb25JbnRlcnBvbGF0aW9uCn0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJwoKZXhwb3J0IHsgQ29tcG9uZW50U2VsZWN0b3IsIEludGVycG9sYXRpb24gfQoKLyoqIFNhbWUgYXMgU3R5bGVkT3B0aW9ucyBidXQgc2hvdWxkRm9yd2FyZFByb3AgbXVzdCBiZSBhIHR5cGUgZ3VhcmQgKi8KZXhwb3J0IGludGVyZmFjZSBGaWx0ZXJpbmdTdHlsZWRPcHRpb25zPAogIFByb3BzLAogIEZvcndhcmRlZFByb3BzIGV4dGVuZHMga2V5b2YgUHJvcHMgPSBrZXlvZiBQcm9wcwo+IHsKICBsYWJlbD86IHN0cmluZwogIHNob3VsZEZvcndhcmRQcm9wPyhwcm9wTmFtZTogUHJvcGVydHlLZXkpOiBwcm9wTmFtZSBpcyBGb3J3YXJkZWRQcm9wcwogIHRhcmdldD86IHN0cmluZwp9CgpleHBvcnQgaW50ZXJmYWNlIFN0eWxlZE9wdGlvbnM8UHJvcHM+IHsKICBsYWJlbD86IHN0cmluZwogIHNob3VsZEZvcndhcmRQcm9wPyhwcm9wTmFtZTogUHJvcGVydHlLZXkpOiBib29sZWFuCiAgdGFyZ2V0Pzogc3RyaW5nCn0KCi8qKgogKiBAdHlwZXBhcmFtIENvbXBvbmVudFByb3BzICBQcm9wcyB3aGljaCB3aWxsIGJlIGluY2x1ZGVkIHdoZW4gd2l0aENvbXBvbmVudCBpcyBjYWxsZWQKICogQHR5cGVwYXJhbSBTcGVjaWZpY0NvbXBvbmVudFByb3BzICBQcm9wcyB3aGljaCB3aWxsICpub3QqIGJlIGluY2x1ZGVkIHdoZW4gd2l0aENvbXBvbmVudCBpcyBjYWxsZWQKICovCmV4cG9ydCBpbnRlcmZhY2UgU3R5bGVkQ29tcG9uZW50PAogIENvbXBvbmVudFByb3BzIGV4dGVuZHMge30sCiAgU3BlY2lmaWNDb21wb25lbnRQcm9wcyBleHRlbmRzIHt9ID0ge30sCiAgSlNYUHJvcHMgZXh0ZW5kcyB7fSA9IHt9Cj4gZXh0ZW5kcyBSZWFjdC5GQzxDb21wb25lbnRQcm9wcyAmIFNwZWNpZmljQ29tcG9uZW50UHJvcHMgJiBKU1hQcm9wcz4sCiAgICBDb21wb25lbnRTZWxlY3RvciB7CiAgd2l0aENvbXBvbmVudDxDIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50Q2xhc3M8UmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4+PigKICAgIGNvbXBvbmVudDogQwogICk6IFN0eWxlZENvbXBvbmVudDwKICAgIENvbXBvbmVudFByb3BzICYgUHJvcHNPZjxDPiwKICAgIHt9LAogICAgeyByZWY/OiBSZWFjdC5SZWY8SW5zdGFuY2VUeXBlPEM+PiB9CiAgPgogIHdpdGhDb21wb25lbnQ8QyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudFR5cGU8UmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4+PigKICAgIGNvbXBvbmVudDogQwogICk6IFN0eWxlZENvbXBvbmVudDxDb21wb25lbnRQcm9wcyAmIFByb3BzT2Y8Qz4+CiAgd2l0aENvbXBvbmVudDxUYWcgZXh0ZW5kcyBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHM+KAogICAgdGFnOiBUYWcKICApOiBTdHlsZWRDb21wb25lbnQ8Q29tcG9uZW50UHJvcHMsIEpTWC5JbnRyaW5zaWNFbGVtZW50c1tUYWddPgp9CgovKioKICogQHR5cGVwYXJhbSBDb21wb25lbnRQcm9wcyAgUHJvcHMgd2hpY2ggd2lsbCBiZSBpbmNsdWRlZCB3aGVuIHdpdGhDb21wb25lbnQgaXMgY2FsbGVkCiAqIEB0eXBlcGFyYW0gU3BlY2lmaWNDb21wb25lbnRQcm9wcyAgUHJvcHMgd2hpY2ggd2lsbCAqbm90KiBiZSBpbmNsdWRlZCB3aGVuIHdpdGhDb21wb25lbnQgaXMgY2FsbGVkCiAqLwpleHBvcnQgaW50ZXJmYWNlIENyZWF0ZVN0eWxlZENvbXBvbmVudDwKICBDb21wb25lbnRQcm9wcyBleHRlbmRzIHt9LAogIFNwZWNpZmljQ29tcG9uZW50UHJvcHMgZXh0ZW5kcyB7fSA9IHt9LAogIEpTWFByb3BzIGV4dGVuZHMge30gPSB7fQo+IHsKICAvKioKICAgKiBAdHlwZXBhcmFtIEFkZGl0aW9uYWxQcm9wcyAgQWRkaXRpb25hbCBwcm9wcyB0byBhZGQgdG8geW91ciBzdHlsZWQgY29tcG9uZW50CiAgICovCiAgPEFkZGl0aW9uYWxQcm9wcyBleHRlbmRzIHt9ID0ge30+KAogICAgLi4uc3R5bGVzOiBBcnJheTwKICAgICAgSW50ZXJwb2xhdGlvbjwKICAgICAgICBDb21wb25lbnRQcm9wcyAmCiAgICAgICAgICBTcGVjaWZpY0NvbXBvbmVudFByb3BzICYKICAgICAgICAgIEFkZGl0aW9uYWxQcm9wcyAmIHsgdGhlbWU6IFRoZW1lIH0KICAgICAgPgogICAgPgogICk6IFN0eWxlZENvbXBvbmVudDwKICAgIENvbXBvbmVudFByb3BzICYgQWRkaXRpb25hbFByb3BzLAogICAgU3BlY2lmaWNDb21wb25lbnRQcm9wcywKICAgIEpTWFByb3BzCiAgPgoKICAoCiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksCiAgICAuLi5zdHlsZXM6IEFycmF5PAogICAgICBJbnRlcnBvbGF0aW9uPENvbXBvbmVudFByb3BzICYgU3BlY2lmaWNDb21wb25lbnRQcm9wcyAmIHsgdGhlbWU6IFRoZW1lIH0+CiAgICA+CiAgKTogU3R5bGVkQ29tcG9uZW50PENvbXBvbmVudFByb3BzLCBTcGVjaWZpY0NvbXBvbmVudFByb3BzLCBKU1hQcm9wcz4KCiAgLyoqCiAgICogQHR5cGVwYXJhbSBBZGRpdGlvbmFsUHJvcHMgIEFkZGl0aW9uYWwgcHJvcHMgdG8gYWRkIHRvIHlvdXIgc3R5bGVkIGNvbXBvbmVudAogICAqLwogIDxBZGRpdGlvbmFsUHJvcHMgZXh0ZW5kcyB7fT4oCiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksCiAgICAuLi5zdHlsZXM6IEFycmF5PAogICAgICBJbnRlcnBvbGF0aW9uPAogICAgICAgIENvbXBvbmVudFByb3BzICYKICAgICAgICAgIFNwZWNpZmljQ29tcG9uZW50UHJvcHMgJgogICAgICAgICAgQWRkaXRpb25hbFByb3BzICYgeyB0aGVtZTogVGhlbWUgfQogICAgICA+CiAgICA+CiAgKTogU3R5bGVkQ29tcG9uZW50PAogICAgQ29tcG9uZW50UHJvcHMgJiBBZGRpdGlvbmFsUHJvcHMsCiAgICBTcGVjaWZpY0NvbXBvbmVudFByb3BzLAogICAgSlNYUHJvcHMKICA+Cn0KCi8qKgogKiBAZGVzYwogKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSBSZWFjdCBjb21wb25lbnQgb3IgdGFnICgnZGl2JywgJ2EnIGV0YykuCiAqCiAqIEBleGFtcGxlIHN0eWxlZChNeUNvbXBvbmVudCkoeyB3aWR0aDogMTAwIH0pCiAqIEBleGFtcGxlIHN0eWxlZChNeUNvbXBvbmVudCkobXlDb21wb25lbnRQcm9wcyA9PiAoeyB3aWR0aDogbXlDb21wb25lbnRQcm9wcy53aWR0aCB9KQogKiBAZXhhbXBsZSBzdHlsZWQoJ2RpdicpKHsgd2lkdGg6IDEwMCB9KQogKiBAZXhhbXBsZSBzdHlsZWQoJ2RpdicpPFByb3BzPihwcm9wcyA9PiAoeyB3aWR0aDogcHJvcHMud2lkdGggfSkKICovCmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU3R5bGVkIHsKICA8CiAgICBDIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50Q2xhc3M8UmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4+LAogICAgRm9yd2FyZGVkUHJvcHMgZXh0ZW5kcyBrZXlvZiBSZWFjdC5Db21wb25lbnRQcm9wczxDPiA9IGtleW9mIFJlYWN0LkNvbXBvbmVudFByb3BzPEM+CiAgPigKICAgIGNvbXBvbmVudDogQywKICAgIG9wdGlvbnM6IEZpbHRlcmluZ1N0eWxlZE9wdGlvbnM8UmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4sIEZvcndhcmRlZFByb3BzPgogICk6IENyZWF0ZVN0eWxlZENvbXBvbmVudDwKICAgIFBpY2s8UHJvcHNPZjxDPiwgRm9yd2FyZGVkUHJvcHM+ICYgewogICAgICB0aGVtZT86IFRoZW1lCiAgICB9LAogICAge30sCiAgICB7CiAgICAgIHJlZj86IFJlYWN0LlJlZjxJbnN0YW5jZVR5cGU8Qz4+CiAgICB9CiAgPgoKICA8QyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudENsYXNzPFJlYWN0LkNvbXBvbmVudFByb3BzPEM+Pj4oCiAgICBjb21wb25lbnQ6IEMsCiAgICBvcHRpb25zPzogU3R5bGVkT3B0aW9uczxSZWFjdC5Db21wb25lbnRQcm9wczxDPj4KICApOiBDcmVhdGVTdHlsZWRDb21wb25lbnQ8CiAgICBQcm9wc09mPEM+ICYgewogICAgICB0aGVtZT86IFRoZW1lCiAgICB9LAogICAge30sCiAgICB7CiAgICAgIHJlZj86IFJlYWN0LlJlZjxJbnN0YW5jZVR5cGU8Qz4+CiAgICB9CiAgPgoKICA8CiAgICBDIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZTxSZWFjdC5Db21wb25lbnRQcm9wczxDPj4sCiAgICBGb3J3YXJkZWRQcm9wcyBleHRlbmRzIGtleW9mIFJlYWN0LkNvbXBvbmVudFByb3BzPEM+ID0ga2V5b2YgUmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4KICA+KAogICAgY29tcG9uZW50OiBDLAogICAgb3B0aW9uczogRmlsdGVyaW5nU3R5bGVkT3B0aW9uczxSZWFjdC5Db21wb25lbnRQcm9wczxDPiwgRm9yd2FyZGVkUHJvcHM+CiAgKTogQ3JlYXRlU3R5bGVkQ29tcG9uZW50PAogICAgUGljazxQcm9wc09mPEM+LCBGb3J3YXJkZWRQcm9wcz4gJiB7CiAgICAgIHRoZW1lPzogVGhlbWUKICAgIH0KICA+CgogIDxDIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZTxSZWFjdC5Db21wb25lbnRQcm9wczxDPj4+KAogICAgY29tcG9uZW50OiBDLAogICAgb3B0aW9ucz86IFN0eWxlZE9wdGlvbnM8UmVhY3QuQ29tcG9uZW50UHJvcHM8Qz4+CiAgKTogQ3JlYXRlU3R5bGVkQ29tcG9uZW50PAogICAgUHJvcHNPZjxDPiAmIHsKICAgICAgdGhlbWU/OiBUaGVtZQogICAgfQogID4KCiAgPAogICAgVGFnIGV4dGVuZHMga2V5b2YgSlNYLkludHJpbnNpY0VsZW1lbnRzLAogICAgRm9yd2FyZGVkUHJvcHMgZXh0ZW5kcyBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHNbVGFnXSA9IGtleW9mIEpTWC5JbnRyaW5zaWNFbGVtZW50c1tUYWddCiAgPigKICAgIHRhZzogVGFnLAogICAgb3B0aW9uczogRmlsdGVyaW5nU3R5bGVkT3B0aW9uczxKU1guSW50cmluc2ljRWxlbWVudHNbVGFnXSwgRm9yd2FyZGVkUHJvcHM+CiAgKTogQ3JlYXRlU3R5bGVkQ29tcG9uZW50PAogICAgeyB0aGVtZT86IFRoZW1lOyBhcz86IFJlYWN0LkVsZW1lbnRUeXBlIH0sCiAgICBQaWNrPEpTWC5JbnRyaW5zaWNFbGVtZW50c1tUYWddLCBGb3J3YXJkZWRQcm9wcz4KICA+CgogIDxUYWcgZXh0ZW5kcyBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHM+KAogICAgdGFnOiBUYWcsCiAgICBvcHRpb25zPzogU3R5bGVkT3B0aW9uczxKU1guSW50cmluc2ljRWxlbWVudHNbVGFnXT4KICApOiBDcmVhdGVTdHlsZWRDb21wb25lbnQ8CiAgICB7IHRoZW1lPzogVGhlbWU7IGFzPzogUmVhY3QuRWxlbWVudFR5cGUgfSwKICAgIEpTWC5JbnRyaW5zaWNFbGVtZW50c1tUYWddCiAgPgp9CgpkZWNsYXJlIGNvbnN0IHN0eWxlZDogQ3JlYXRlU3R5bGVkCmV4cG9ydCBkZWZhdWx0IHN0eWxlZAo=";

// ../../node_modules/@emotion/styled/types/index.d.ts?text
var index_d_default4 = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMy4yCgppbXBvcnQgeyBUaGVtZSB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JwppbXBvcnQgeyBDcmVhdGVTdHlsZWQgYXMgQmFzZUNyZWF0ZVN0eWxlZCwgQ3JlYXRlU3R5bGVkQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlJwoKZXhwb3J0IHsKICBBcnJheUludGVycG9sYXRpb24sCiAgQ29tcG9uZW50U2VsZWN0b3IsCiAgQ1NTT2JqZWN0LAogIEZ1bmN0aW9uSW50ZXJwb2xhdGlvbiwKICBJbnRlcnBvbGF0aW9uLAogIFN0eWxlZENvbXBvbmVudCwKICBTdHlsZWRPcHRpb25zLAogIENyZWF0ZVN0eWxlZENvbXBvbmVudAp9IGZyb20gJy4vYmFzZScKCmV4cG9ydCB0eXBlIFN0eWxlZFRhZ3MgPSB7CiAgW1RhZyBpbiBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHNdOiBDcmVhdGVTdHlsZWRDb21wb25lbnQ8CiAgICB7CiAgICAgIHRoZW1lPzogVGhlbWUKICAgICAgYXM/OiBSZWFjdC5FbGVtZW50VHlwZQogICAgfSwKICAgIEpTWC5JbnRyaW5zaWNFbGVtZW50c1tUYWddCiAgPgp9CgpleHBvcnQgaW50ZXJmYWNlIENyZWF0ZVN0eWxlZCBleHRlbmRzIEJhc2VDcmVhdGVTdHlsZWQsIFN0eWxlZFRhZ3Mge30KCmRlY2xhcmUgY29uc3Qgc3R5bGVkOiBDcmVhdGVTdHlsZWQKZXhwb3J0IGRlZmF1bHQgc3R5bGVkCg==";

// ../../node_modules/@emotion/cache/types/index.d.ts?text
var index_d_default5 = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMi4yCmltcG9ydCB7IEVtb3Rpb25DYWNoZSB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJwoKZXhwb3J0IHsgRW1vdGlvbkNhY2hlIH0KCmV4cG9ydCBpbnRlcmZhY2UgU3R5bGlzRWxlbWVudCB7CiAgdHlwZTogc3RyaW5nCiAgdmFsdWU6IHN0cmluZwogIHByb3BzOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nCiAgcm9vdDogU3R5bGlzRWxlbWVudCB8IG51bGwKICBwYXJlbnQ6IFN0eWxpc0VsZW1lbnQgfCBudWxsCiAgY2hpbGRyZW46IEFycmF5PFN0eWxpc0VsZW1lbnQ+IHwgc3RyaW5nCiAgbGluZTogbnVtYmVyCiAgY29sdW1uOiBudW1iZXIKICBsZW5ndGg6IG51bWJlcgogIHJldHVybjogc3RyaW5nCn0KZXhwb3J0IHR5cGUgU3R5bGlzUGx1Z2luQ2FsbGJhY2sgPSAoCiAgZWxlbWVudDogU3R5bGlzRWxlbWVudCwKICBpbmRleDogbnVtYmVyLAogIGNoaWxkcmVuOiBBcnJheTxTdHlsaXNFbGVtZW50PiwKICBjYWxsYmFjazogU3R5bGlzUGx1Z2luQ2FsbGJhY2sKKSA9PiBzdHJpbmcgfCB2b2lkCgpleHBvcnQgdHlwZSBTdHlsaXNQbHVnaW4gPSAoCiAgZWxlbWVudDogU3R5bGlzRWxlbWVudCwKICBpbmRleDogbnVtYmVyLAogIGNoaWxkcmVuOiBBcnJheTxTdHlsaXNFbGVtZW50PiwKICBjYWxsYmFjazogU3R5bGlzUGx1Z2luQ2FsbGJhY2sKKSA9PiBzdHJpbmcgfCB2b2lkCgpleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMgewogIG5vbmNlPzogc3RyaW5nCiAgc3R5bGlzUGx1Z2lucz86IEFycmF5PFN0eWxpc1BsdWdpbj4KICBrZXk6IHN0cmluZwogIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50CiAgc3BlZWR5PzogYm9vbGVhbgogIC8qKiBAZGVwcmVjYXRlIHVzZSBgaW5zZXJ0aW9uUG9pbnRgIGluc3RlYWQgKi8KICBwcmVwZW5kPzogYm9vbGVhbgogIGluc2VydGlvblBvaW50PzogSFRNTEVsZW1lbnQKfQoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9uczogT3B0aW9ucyk6IEVtb3Rpb25DYWNoZQo=";

// ../../node_modules/@emotion/react/types/index.d.ts?text
var index_d_default6 = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMy40CgppbXBvcnQgeyBFbW90aW9uQ2FjaGUgfSBmcm9tICdAZW1vdGlvbi9jYWNoZScKaW1wb3J0IHsKICBBcnJheUludGVycG9sYXRpb24sCiAgQ29tcG9uZW50U2VsZWN0b3IsCiAgQ1NTSW50ZXJwb2xhdGlvbiwKICBDU1NPYmplY3QsCiAgRnVuY3Rpb25JbnRlcnBvbGF0aW9uLAogIEludGVycG9sYXRpb24sCiAgS2V5ZnJhbWVzLAogIFNlcmlhbGl6ZWRTdHlsZXMKfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnCmltcG9ydCB7CiAgQ2xhc3NBdHRyaWJ1dGVzLAogIENvbnRleHQsCiAgUHJvdmlkZXIsCiAgRkMsCiAgUmVhY3RFbGVtZW50LAogIFJlYWN0Tm9kZSwKICBSZWYsCiAgY3JlYXRlRWxlbWVudAp9IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBFbW90aW9uSlNYIH0gZnJvbSAnLi9qc3gtbmFtZXNwYWNlJwoKZXhwb3J0IHsKICBBcnJheUludGVycG9sYXRpb24sCiAgQ29tcG9uZW50U2VsZWN0b3IsCiAgQ1NTT2JqZWN0LAogIEVtb3Rpb25DYWNoZSwKICBGdW5jdGlvbkludGVycG9sYXRpb24sCiAgSW50ZXJwb2xhdGlvbiwKICBLZXlmcmFtZXMsCiAgU2VyaWFsaXplZFN0eWxlcwp9CgpleHBvcnQgKiBmcm9tICcuL3RoZW1pbmcnCmV4cG9ydCAqIGZyb20gJy4vaGVscGVyJwoKLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eS1pbnRlcmZhY2UKZXhwb3J0IGludGVyZmFjZSBUaGVtZSB7fQoKZXhwb3J0IGNvbnN0IFRoZW1lQ29udGV4dDogQ29udGV4dDxvYmplY3Q+CmV4cG9ydCBjb25zdCBDYWNoZVByb3ZpZGVyOiBQcm92aWRlcjxFbW90aW9uQ2FjaGU+CmV4cG9ydCBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlPFByb3BzLCBSZWZUeXBlID0gYW55PigKICBmdW5jOiAocHJvcHM6IFByb3BzLCBjb250ZXh0OiBFbW90aW9uQ2FjaGUsIHJlZjogUmVmPFJlZlR5cGU+KSA9PiBSZWFjdE5vZGUKKTogRkM8UHJvcHMgJiBDbGFzc0F0dHJpYnV0ZXM8UmVmVHlwZT4+CgpleHBvcnQgZnVuY3Rpb24gY3NzKAogIHRlbXBsYXRlOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwKICAuLi5hcmdzOiBBcnJheTxDU1NJbnRlcnBvbGF0aW9uPgopOiBTZXJpYWxpemVkU3R5bGVzCmV4cG9ydCBmdW5jdGlvbiBjc3MoLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4pOiBTZXJpYWxpemVkU3R5bGVzCgpleHBvcnQgaW50ZXJmYWNlIEdsb2JhbFByb3BzIHsKICBzdHlsZXM6IEludGVycG9sYXRpb248VGhlbWU+Cn0KCi8qKgogKiBAZGVzYwogKiBKU1ggZ2VuZXJpYyBhcmUgc3VwcG9ydGVkIG9ubHkgYWZ0ZXIgVFNAMi45CiAqLwpleHBvcnQgZnVuY3Rpb24gR2xvYmFsKHByb3BzOiBHbG9iYWxQcm9wcyk6IFJlYWN0RWxlbWVudAoKZXhwb3J0IGZ1bmN0aW9uIGtleWZyYW1lcygKICB0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksCiAgLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4KKTogS2V5ZnJhbWVzCmV4cG9ydCBmdW5jdGlvbiBrZXlmcmFtZXMoLi4uYXJnczogQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4pOiBLZXlmcmFtZXMKCmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlDbGFzc05hbWVzQXJnIGV4dGVuZHMgQXJyYXk8Q2xhc3NOYW1lc0FyZz4ge30KZXhwb3J0IHR5cGUgQ2xhc3NOYW1lc0FyZyA9CiAgfCB1bmRlZmluZWQKICB8IG51bGwKICB8IHN0cmluZwogIHwgYm9vbGVhbgogIHwgeyBbY2xhc3NOYW1lOiBzdHJpbmddOiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB9CiAgfCBBcnJheUNsYXNzTmFtZXNBcmcKCmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3NOYW1lc0NvbnRlbnQgewogIGNzcyh0ZW1wbGF0ZTogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLmFyZ3M6IEFycmF5PENTU0ludGVycG9sYXRpb24+KTogc3RyaW5nCiAgY3NzKC4uLmFyZ3M6IEFycmF5PENTU0ludGVycG9sYXRpb24+KTogc3RyaW5nCiAgY3goLi4uYXJnczogQXJyYXk8Q2xhc3NOYW1lc0FyZz4pOiBzdHJpbmcKICB0aGVtZTogVGhlbWUKfQpleHBvcnQgaW50ZXJmYWNlIENsYXNzTmFtZXNQcm9wcyB7CiAgY2hpbGRyZW4oY29udGVudDogQ2xhc3NOYW1lc0NvbnRlbnQpOiBSZWFjdE5vZGUKfQovKioKICogQGRlc2MKICogSlNYIGdlbmVyaWMgYXJlIHN1cHBvcnRlZCBvbmx5IGFmdGVyIFRTQDIuOQogKi8KZXhwb3J0IGZ1bmN0aW9uIENsYXNzTmFtZXMocHJvcHM6IENsYXNzTmFtZXNQcm9wcyk6IFJlYWN0RWxlbWVudAoKZXhwb3J0IGNvbnN0IGpzeDogdHlwZW9mIGNyZWF0ZUVsZW1lbnQKZXhwb3J0IG5hbWVzcGFjZSBqc3ggewogIG5hbWVzcGFjZSBKU1ggewogICAgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnQge30KICAgIGludGVyZmFjZSBFbGVtZW50Q2xhc3MgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRDbGFzcyB7fQogICAgaW50ZXJmYWNlIEVsZW1lbnRBdHRyaWJ1dGVzUHJvcGVydHkKICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRBdHRyaWJ1dGVzUHJvcGVydHkge30KICAgIGludGVyZmFjZSBFbGVtZW50Q2hpbGRyZW5BdHRyaWJ1dGUKICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7fQogICAgdHlwZSBMaWJyYXJ5TWFuYWdlZEF0dHJpYnV0ZXM8QywgUD4gPSBFbW90aW9uSlNYLkxpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczwKICAgICAgQywKICAgICAgUAogICAgPgogICAgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBFbW90aW9uSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge30KICAgIGludGVyZmFjZSBJbnRyaW5zaWNDbGFzc0F0dHJpYnV0ZXM8VD4KICAgICAgZXh0ZW5kcyBFbW90aW9uSlNYLkludHJpbnNpY0NsYXNzQXR0cmlidXRlczxUPiB7fQogICAgdHlwZSBJbnRyaW5zaWNFbGVtZW50cyA9IEVtb3Rpb25KU1guSW50cmluc2ljRWxlbWVudHMKICB9Cn0K";

// ../../node_modules/@emotion/react/types/jsx-runtime.d.ts?text
var jsx_runtime_d_default2 = "data:text/plain;charset=utf-8;base64,ZXhwb3J0IHsgRW1vdGlvbkpTWCBhcyBKU1ggfSBmcm9tICcuL2pzeC1uYW1lc3BhY2UnCg==";

// ../../node_modules/@emotion/react/types/jsx-namespace.d.ts?text
var jsx_namespace_d_default = "data:text/plain;charset=utf-8;base64,aW1wb3J0ICdyZWFjdCcKaW1wb3J0IHsgSW50ZXJwb2xhdGlvbiB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZScKaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuL2luZGV4JwoKdHlwZSBXaXRoQ29uZGl0aW9uYWxDU1NQcm9wPFA+ID0gJ2NsYXNzTmFtZScgZXh0ZW5kcyBrZXlvZiBQCiAgPyBzdHJpbmcgZXh0ZW5kcyBQWydjbGFzc05hbWUnICYga2V5b2YgUF0KICAgID8geyBjc3M/OiBJbnRlcnBvbGF0aW9uPFRoZW1lPiB9CiAgICA6IHt9CiAgOiB7fQoKLy8gdW5wYWNrIGFsbCBoZXJlIHRvIGF2b2lkIGluZmluaXRlIHNlbGYtcmVmZXJlbmNpbmcgd2hlbiBkZWZpbmluZyBvdXIgb3duIEpTWCBuYW1lc3BhY2UKdHlwZSBSZWFjdEpTWEVsZW1lbnQgPSBKU1guRWxlbWVudAp0eXBlIFJlYWN0SlNYRWxlbWVudENsYXNzID0gSlNYLkVsZW1lbnRDbGFzcwp0eXBlIFJlYWN0SlNYRWxlbWVudEF0dHJpYnV0ZXNQcm9wZXJ0eSA9IEpTWC5FbGVtZW50QXR0cmlidXRlc1Byb3BlcnR5CnR5cGUgUmVhY3RKU1hFbGVtZW50Q2hpbGRyZW5BdHRyaWJ1dGUgPSBKU1guRWxlbWVudENoaWxkcmVuQXR0cmlidXRlCnR5cGUgUmVhY3RKU1hMaWJyYXJ5TWFuYWdlZEF0dHJpYnV0ZXM8QywgUD4gPSBKU1guTGlicmFyeU1hbmFnZWRBdHRyaWJ1dGVzPEMsIFA+CnR5cGUgUmVhY3RKU1hJbnRyaW5zaWNBdHRyaWJ1dGVzID0gSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMKdHlwZSBSZWFjdEpTWEludHJpbnNpY0NsYXNzQXR0cmlidXRlczxUPiA9IEpTWC5JbnRyaW5zaWNDbGFzc0F0dHJpYnV0ZXM8VD4KdHlwZSBSZWFjdEpTWEludHJpbnNpY0VsZW1lbnRzID0gSlNYLkludHJpbnNpY0VsZW1lbnRzCgpleHBvcnQgbmFtZXNwYWNlIEVtb3Rpb25KU1ggewogIGludGVyZmFjZSBFbGVtZW50IGV4dGVuZHMgUmVhY3RKU1hFbGVtZW50IHt9CiAgaW50ZXJmYWNlIEVsZW1lbnRDbGFzcyBleHRlbmRzIFJlYWN0SlNYRWxlbWVudENsYXNzIHt9CiAgaW50ZXJmYWNlIEVsZW1lbnRBdHRyaWJ1dGVzUHJvcGVydHkKICAgIGV4dGVuZHMgUmVhY3RKU1hFbGVtZW50QXR0cmlidXRlc1Byb3BlcnR5IHt9CiAgaW50ZXJmYWNlIEVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSBleHRlbmRzIFJlYWN0SlNYRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHt9CgogIHR5cGUgTGlicmFyeU1hbmFnZWRBdHRyaWJ1dGVzPEMsIFA+ID0gV2l0aENvbmRpdGlvbmFsQ1NTUHJvcDxQPiAmCiAgICBSZWFjdEpTWExpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczxDLCBQPgoKICBpbnRlcmZhY2UgSW50cmluc2ljQXR0cmlidXRlcyBleHRlbmRzIFJlYWN0SlNYSW50cmluc2ljQXR0cmlidXRlcyB7fQogIGludGVyZmFjZSBJbnRyaW5zaWNDbGFzc0F0dHJpYnV0ZXM8VD4KICAgIGV4dGVuZHMgUmVhY3RKU1hJbnRyaW5zaWNDbGFzc0F0dHJpYnV0ZXM8VD4ge30KCiAgdHlwZSBJbnRyaW5zaWNFbGVtZW50cyA9IHsKICAgIFtLIGluIGtleW9mIFJlYWN0SlNYSW50cmluc2ljRWxlbWVudHNdOiBSZWFjdEpTWEludHJpbnNpY0VsZW1lbnRzW0tdICYgewogICAgICBjc3M/OiBJbnRlcnBvbGF0aW9uPFRoZW1lPgogICAgfQogIH0KfQo=";

// ../../node_modules/@emotion/react/types/css-prop.d.ts?text
var css_prop_d_default = "data:text/plain;charset=utf-8;base64,aW1wb3J0IHt9IGZyb20gJ3JlYWN0JwppbXBvcnQgeyBJbnRlcnBvbGF0aW9uIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJwppbXBvcnQgeyBUaGVtZSB9IGZyb20gJy4nCgpkZWNsYXJlIG1vZHVsZSAncmVhY3QnIHsKICBpbnRlcmZhY2UgQXR0cmlidXRlcyB7CiAgICBjc3M/OiBJbnRlcnBvbGF0aW9uPFRoZW1lPgogIH0KfQo=";

// ../../node_modules/@emotion/react/types/helper.d.ts?text
var helper_d_default = "data:text/plain;charset=utf-8;base64,aW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnCgovKioKICogQGRlc2MgVXRpbGl0eSB0eXBlIGZvciBnZXR0aW5nIHByb3BzIHR5cGUgb2YgUmVhY3QgY29tcG9uZW50LgogKiBJdCB0YWtlcyBgZGVmYXVsdFByb3BzYCBpbnRvIGFuIGFjY291bnQgLSBtYWtpbmcgcHJvcHMgd2l0aCBkZWZhdWx0cyBvcHRpb25hbC4KICovCmV4cG9ydCB0eXBlIFByb3BzT2Y8CiAgQyBleHRlbmRzIGtleW9mIEpTWC5JbnRyaW5zaWNFbGVtZW50cyB8IFJlYWN0LkpTWEVsZW1lbnRDb25zdHJ1Y3Rvcjxhbnk+Cj4gPSBKU1guTGlicmFyeU1hbmFnZWRBdHRyaWJ1dGVzPEMsIFJlYWN0LkNvbXBvbmVudFByb3BzPEM+PgoKLy8gV2UgbmVlZCB0byB1c2UgdGhpcyB2ZXJzaW9uIG9mIE9taXQgYXMgaXQncyBkaXN0cmlidXRpdmUgKFdpbGwgcHJlc2VydmUgdW5pb25zKQpleHBvcnQgdHlwZSBEaXN0cmlidXRpdmVPbWl0PFQsIFU+ID0gVCBleHRlbmRzIGFueQogID8gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIFU+PgogIDogbmV2ZXIK";

// ../../node_modules/@emotion/react/types/theming.d.ts?text
var theming_d_default = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMy4xCgppbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCcKaW1wb3J0IHsgVGhlbWUgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCcKaW1wb3J0IHsgRGlzdHJpYnV0aXZlT21pdCwgUHJvcHNPZiB9IGZyb20gJy4vaGVscGVyJwoKZXhwb3J0IGludGVyZmFjZSBUaGVtZVByb3ZpZGVyUHJvcHMgewogIHRoZW1lOiBQYXJ0aWFsPFRoZW1lPiB8ICgob3V0ZXJUaGVtZTogVGhlbWUpID0+IFRoZW1lKQogIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlCn0KCmV4cG9ydCBpbnRlcmZhY2UgVGhlbWVQcm92aWRlciB7CiAgKHByb3BzOiBUaGVtZVByb3ZpZGVyUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQKfQoKZXhwb3J0IHR5cGUgd2l0aFRoZW1lID0gPAogIEMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRUeXBlPFJlYWN0LkNvbXBvbmVudFByb3BzPEM+Pgo+KAogIGNvbXBvbmVudDogQwopID0+IFJlYWN0LkZDPERpc3RyaWJ1dGl2ZU9taXQ8UHJvcHNPZjxDPiwgJ3RoZW1lJz4gJiB7IHRoZW1lPzogVGhlbWUgfT4KCmV4cG9ydCBmdW5jdGlvbiB1c2VUaGVtZSgpOiBUaGVtZQoKZXhwb3J0IGNvbnN0IFRoZW1lUHJvdmlkZXI6IFRoZW1lUHJvdmlkZXIKCmV4cG9ydCBjb25zdCB3aXRoVGhlbWU6IHdpdGhUaGVtZQoKZXhwb3J0IHR5cGUgV2l0aFRoZW1lPFAsIFQ+ID0gUCBleHRlbmRzIHsgdGhlbWU6IGluZmVyIFRoZW1lIH0KICA/IFAgJiB7IHRoZW1lOiBFeGNsdWRlPFRoZW1lLCB1bmRlZmluZWQ+IH0KICA6IFAgJiB7IHRoZW1lOiBUIH0K";

// ../../node_modules/@emotion/serialize/types/index.d.ts?text
var index_d_default7 = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMi44CgppbXBvcnQgeyBSZWdpc3RlcmVkQ2FjaGUsIFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscycKaW1wb3J0ICogYXMgQ1NTIGZyb20gJ2Nzc3R5cGUnCgpleHBvcnQgeyBSZWdpc3RlcmVkQ2FjaGUsIFNlcmlhbGl6ZWRTdHlsZXMgfQoKZXhwb3J0IHR5cGUgQ1NTUHJvcGVydGllcyA9IENTUy5Qcm9wZXJ0aWVzRmFsbGJhY2s8bnVtYmVyIHwgc3RyaW5nPgpleHBvcnQgdHlwZSBDU1NQcm9wZXJ0aWVzV2l0aE11bHRpVmFsdWVzID0gewogIFtLIGluIGtleW9mIENTU1Byb3BlcnRpZXNdOgogICAgfCBDU1NQcm9wZXJ0aWVzW0tdCiAgICB8IEFycmF5PEV4dHJhY3Q8Q1NTUHJvcGVydGllc1tLXSwgc3RyaW5nPj4KfQoKZXhwb3J0IHR5cGUgQ1NTUHNldWRvcyA9IHsgW0sgaW4gQ1NTLlBzZXVkb3NdPzogQ1NTT2JqZWN0IH0KCmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlDU1NJbnRlcnBvbGF0aW9uIGV4dGVuZHMgQXJyYXk8Q1NTSW50ZXJwb2xhdGlvbj4ge30KCmV4cG9ydCB0eXBlIEludGVycG9sYXRpb25QcmltaXRpdmUgPQogIHwgbnVsbAogIHwgdW5kZWZpbmVkCiAgfCBib29sZWFuCiAgfCBudW1iZXIKICB8IHN0cmluZwogIHwgQ29tcG9uZW50U2VsZWN0b3IKICB8IEtleWZyYW1lcwogIHwgU2VyaWFsaXplZFN0eWxlcwogIHwgQ1NTT2JqZWN0CgpleHBvcnQgdHlwZSBDU1NJbnRlcnBvbGF0aW9uID0gSW50ZXJwb2xhdGlvblByaW1pdGl2ZSB8IEFycmF5Q1NTSW50ZXJwb2xhdGlvbgoKZXhwb3J0IGludGVyZmFjZSBDU1NPdGhlcnNPYmplY3QgewogIFtwcm9wZXJ0aWVzTmFtZTogc3RyaW5nXTogQ1NTSW50ZXJwb2xhdGlvbgp9CgpleHBvcnQgaW50ZXJmYWNlIENTU09iamVjdAogIGV4dGVuZHMgQ1NTUHJvcGVydGllc1dpdGhNdWx0aVZhbHVlcywKICAgIENTU1BzZXVkb3MsCiAgICBDU1NPdGhlcnNPYmplY3Qge30KCmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50U2VsZWN0b3IgewogIF9fZW1vdGlvbl9zdHlsZXM6IGFueQp9CgpleHBvcnQgdHlwZSBLZXlmcmFtZXMgPSB7CiAgbmFtZTogc3RyaW5nCiAgc3R5bGVzOiBzdHJpbmcKICBhbmltOiBudW1iZXIKICB0b1N0cmluZzogKCkgPT4gc3RyaW5nCn0gJiBzdHJpbmcKCmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlJbnRlcnBvbGF0aW9uPFByb3BzPgogIGV4dGVuZHMgQXJyYXk8SW50ZXJwb2xhdGlvbjxQcm9wcz4+IHt9CgpleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uSW50ZXJwb2xhdGlvbjxQcm9wcz4gewogIChwcm9wczogUHJvcHMpOiBJbnRlcnBvbGF0aW9uPFByb3BzPgp9CgpleHBvcnQgdHlwZSBJbnRlcnBvbGF0aW9uPFByb3BzPiA9CiAgfCBJbnRlcnBvbGF0aW9uUHJpbWl0aXZlCiAgfCBBcnJheUludGVycG9sYXRpb248UHJvcHM+CiAgfCBGdW5jdGlvbkludGVycG9sYXRpb248UHJvcHM+CgpleHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzPFByb3BzPigKICBhcmdzOiBBcnJheTxUZW1wbGF0ZVN0cmluZ3NBcnJheSB8IEludGVycG9sYXRpb248UHJvcHM+PiwKICByZWdpc3RlcmVkOiBSZWdpc3RlcmVkQ2FjaGUsCiAgcHJvcHM/OiBQcm9wcwopOiBTZXJpYWxpemVkU3R5bGVzCg==";

// ../../node_modules/@emotion/utils/types/index.d.ts?text
var index_d_default8 = "data:text/plain;charset=utf-8;base64,Ly8gRGVmaW5pdGlvbnMgYnk6IEp1bnlvdW5nIENsYXJlIEphbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9BaWxydW4+Ci8vIFR5cGVTY3JpcHQgVmVyc2lvbjogMi4yCgpleHBvcnQgaW50ZXJmYWNlIFJlZ2lzdGVyZWRDYWNoZSB7CiAgW2tleTogc3RyaW5nXTogc3RyaW5nCn0KCmV4cG9ydCBpbnRlcmZhY2UgU3R5bGVTaGVldCB7CiAgY29udGFpbmVyOiBIVE1MRWxlbWVudAogIG5vbmNlPzogc3RyaW5nCiAga2V5OiBzdHJpbmcKICBpbnNlcnQocnVsZTogc3RyaW5nKTogdm9pZAogIGZsdXNoKCk6IHZvaWQKICB0YWdzOiBBcnJheTxIVE1MU3R5bGVFbGVtZW50Pgp9CgpleHBvcnQgaW50ZXJmYWNlIEVtb3Rpb25DYWNoZSB7CiAgaW5zZXJ0ZWQ6IHsKICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHRydWUKICB9CiAgcmVnaXN0ZXJlZDogUmVnaXN0ZXJlZENhY2hlCiAgc2hlZXQ6IFN0eWxlU2hlZXQKICBrZXk6IHN0cmluZwogIGNvbXBhdD86IHRydWUKICBub25jZT86IHN0cmluZwogIGluc2VydCgKICAgIHNlbGVjdG9yOiBzdHJpbmcsCiAgICBzZXJpYWxpemVkOiBTZXJpYWxpemVkU3R5bGVzLAogICAgc2hlZXQ6IFN0eWxlU2hlZXQsCiAgICBzaG91bGRDYWNoZTogYm9vbGVhbgogICk6IHN0cmluZyB8IHZvaWQKfQoKZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkU3R5bGVzIHsKICBuYW1lOiBzdHJpbmcKICBzdHlsZXM6IHN0cmluZwogIG1hcD86IHN0cmluZwogIG5leHQ/OiBTZXJpYWxpemVkU3R5bGVzCn0KCmV4cG9ydCBjb25zdCBpc0Jyb3dzZXI6IGJvb2xlYW4KCmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKAogIHJlZ2lzdGVyZWQ6IFJlZ2lzdGVyZWRDYWNoZSwKICByZWdpc3RlcmVkU3R5bGVzOiBBcnJheTxzdHJpbmc+LAogIGNsYXNzTmFtZXM6IHN0cmluZwopOiBzdHJpbmcKCmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclN0eWxlcygKICBjYWNoZTogRW1vdGlvbkNhY2hlLAogIHNlcmlhbGl6ZWQ6IFNlcmlhbGl6ZWRTdHlsZXMsCiAgaXNTdHJpbmdUYWc6IGJvb2xlYW4KKTogdm9pZAoKZXhwb3J0IGZ1bmN0aW9uIGluc2VydFN0eWxlcygKICBjYWNoZTogRW1vdGlvbkNhY2hlLAogIHNlcmlhbGl6ZWQ6IFNlcmlhbGl6ZWRTdHlsZXMsCiAgaXNTdHJpbmdUYWc6IGJvb2xlYW4KKTogc3RyaW5nIHwgdm9pZAo=";

// js/types.mjs
var dtsFiles = {
  reactDts: index_d_default,
  jsxRuntimeDts: jsx_runtime_d_default,
  propTypesDts: index_d_default2,
  cssTypeDts: index_d_default3,
  framerDts: framer_d_default,
  emotionStyleBase: base_d_default,
  emotionStyled: index_d_default4,
  emotionCache: index_d_default5,
  emotionJSXDts: jsx_runtime_d_default2,
  emotionJSXNameSpaceDTS: jsx_namespace_d_default,
  emotionJSXRuntimeDTS: jsx_runtime_d_default2,
  emotionReactDts: index_d_default6,
  emotionReactCssPropDts: css_prop_d_default,
  emotionReactHelperDts: helper_d_default,
  emotionThemingDts: theming_d_default,
  emotionSerializeDts: index_d_default7,
  emotionUtilsDts: index_d_default8
};

// ../../node_modules/p-all/node_modules/indent-string/index.js
function indentString(string, count = 1, options = {}) {
  const {
    indent = " ",
    includeEmptyLines = false
  } = options;
  if (typeof string !== "string") {
    throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
  }
  if (typeof count !== "number") {
    throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
  }
  if (count < 0) {
    throw new RangeError(`Expected \`count\` to be at least 0, got \`${count}\``);
  }
  if (typeof indent !== "string") {
    throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof indent}\``);
  }
  if (count === 0) {
    return string;
  }
  const regex = includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string.replace(regex, indent.repeat(count));
}

// ../../node_modules/p-all/node_modules/clean-stack/index.js
var import_os = __toESM(require_os(), 1);

// ../../node_modules/p-all/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// ../../node_modules/p-all/node_modules/clean-stack/index.js
var extractPathRegex = /\s+at.*[(\s](.*)\)?/;
var pathRegex = /^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;
var homeDir = typeof import_os.default.homedir === "undefined" ? "" : import_os.default.homedir().replace(/\\/g, "/");
function cleanStack(stack, { pretty = false, basePath } = {}) {
  const basePathRegex = basePath && new RegExp(`(at | \\()${escapeStringRegexp(basePath.replace(/\\/g, "/"))}`, "g");
  if (typeof stack !== "string") {
    return void 0;
  }
  return stack.replace(/\\/g, "/").split("\n").filter((line) => {
    const pathMatches = line.match(extractPathRegex);
    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }
    const match = pathMatches[1];
    if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar")) {
      return false;
    }
    return !pathRegex.test(match);
  }).filter((line) => line.trim() !== "").map((line) => {
    if (basePathRegex) {
      line = line.replace(basePathRegex, "$1");
    }
    if (pretty) {
      line = line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, "~")));
    }
    return line;
  }).join("\n");
}

// ../../node_modules/p-all/node_modules/aggregate-error/index.js
var cleanInternalStack = (stack) => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
var AggregateError = class extends Error {
  #errors;
  name = "AggregateError";
  constructor(errors) {
    if (!Array.isArray(errors)) {
      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
    }
    errors = errors.map((error) => {
      if (error instanceof Error) {
        return error;
      }
      if (error !== null && typeof error === "object") {
        return Object.assign(new Error(error.message), error);
      }
      return new Error(error);
    });
    let message = errors.map((error) => {
      return typeof error.stack === "string" ? cleanInternalStack(cleanStack(error.stack)) : String(error);
    }).join("\n");
    message = "\n" + indentString(message, 4);
    super(message);
    this.#errors = errors;
  }
  get errors() {
    return this.#errors.slice();
  }
};

// ../../node_modules/p-all/node_modules/p-map/index.js
async function pMap(iterable, mapper, {
  concurrency = Number.POSITIVE_INFINITY,
  stopOnError = true
} = {}) {
  return new Promise((resolve, reject_) => {
    if (iterable[Symbol.iterator] === void 0 && iterable[Symbol.asyncIterator] === void 0) {
      throw new TypeError(`Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof iterable})`);
    }
    if (typeof mapper !== "function") {
      throw new TypeError("Mapper function is required");
    }
    if (!((Number.isSafeInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
    }
    const result = [];
    const errors = [];
    const skippedIndexesMap = /* @__PURE__ */ new Map();
    let isRejected = false;
    let isResolved = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;
    const iterator = iterable[Symbol.iterator] === void 0 ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();
    const reject = (reason) => {
      isRejected = true;
      isResolved = true;
      reject_(reason);
    };
    const next = async () => {
      if (isResolved) {
        return;
      }
      const nextItem = await iterator.next();
      const index = currentIndex;
      currentIndex++;
      if (nextItem.done) {
        isIterableDone = true;
        if (resolvingCount === 0 && !isResolved) {
          if (!stopOnError && errors.length > 0) {
            reject(new AggregateError(errors));
            return;
          }
          isResolved = true;
          if (!skippedIndexesMap.size) {
            resolve(result);
            return;
          }
          const pureResult = [];
          for (const [index2, value] of result.entries()) {
            if (skippedIndexesMap.get(index2) === pMapSkip) {
              continue;
            }
            pureResult.push(value);
          }
          resolve(pureResult);
        }
        return;
      }
      resolvingCount++;
      (async () => {
        try {
          const element = await nextItem.value;
          if (isResolved) {
            return;
          }
          const value = await mapper(element, index);
          if (value === pMapSkip) {
            skippedIndexesMap.set(index, value);
          }
          result[index] = value;
          resolvingCount--;
          await next();
        } catch (error) {
          if (stopOnError) {
            reject(error);
          } else {
            errors.push(error);
            resolvingCount--;
            try {
              await next();
            } catch (error2) {
              reject(error2);
            }
          }
        }
      })();
    };
    (async () => {
      for (let index = 0; index < concurrency; index++) {
        try {
          await next();
        } catch (error) {
          reject(error);
          break;
        }
        if (isIterableDone || isRejected) {
          break;
        }
      }
    })();
  });
}
var pMapSkip = Symbol("skip");

// ../../node_modules/p-all/index.js
async function pAll(iterable, options) {
  return pMap(iterable, (element) => element(), options);
}

// js/editor.ts
var {
  reactDts,
  jsxRuntimeDts,
  propTypesDts,
  cssTypeDts,
  framerDts,
  emotionStyled,
  emotionStyleBase,
  emotionCache,
  emotionJSXNameSpaceDTS,
  emotionJSXRuntimeDTS,
  emotionReactDts,
  emotionReactCssPropDts,
  emotionReactHelperDts,
  emotionThemingDts,
  emotionSerializeDts,
  emotionUtilsDts
} = dtsFiles;
var monEnv = {
  getWorkerUrl: function(_workerId, label) {
    if (label === "typescript" || label === "javascript") {
      return "dist/workers/language/typescript/ts.worker.js";
    }
    return "dist/workers/editor/editor.worker.js";
  }
};
Object.assign(globalThis, { MonacoEnvironment: monEnv });
var started = false;
var startMonaco = async ({ code, container }) => {
  console.log("monaco-editor");
  if (!started)
    started = true;
  else
    return;
  const shadowRoot = container.attachShadow({
    mode: "open"
  });
  const innerContainer = document.createElement("div");
  shadowRoot.appendChild(innerContainer);
  innerContainer.style.width = "100%";
  innerContainer.style.height = "100%";
  const outerStyle = document.createElement("style");
  outerStyle.innerText = ` @font-face {
    font-family: codicon;
    font-display: block;
    src: url(./base/browser/ui/codicons/codicon/codicon.ttf) format("truetype");
}`;
  document.head.appendChild(outerStyle);
  const innerStyle = document.createElement("style");
  innerStyle.innerText = `@import url("dist/starter.css");
  @font-face {
    font-family: codicon;
    font-display: block;
    src: url(./base/browser/ui/codicons/codicon/codicon.ttf) format("truetype");
}
  
  `;
  shadowRoot.appendChild(innerStyle);
  languages.typescript.typescriptDefaults.setCompilerOptions({
    target: languages.typescript.ScriptTarget.ES5,
    lib: [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    allowJs: true,
    skipLibCheck: true,
    esModuleInterop: true,
    allowSyntheticDefaultImports: true,
    strict: true,
    forceConsistentCasingInFileNames: true,
    noFallthroughCasesInSwitch: true,
    resolveJsonModule: true,
    isolatedModules: true,
    noEmit: true,
    allowNonTsExtensions: true,
    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,
    declaration: false,
    module: languages.typescript.ModuleKind.ESNext,
    noEmitOnError: true,
    maxNodeModuleJsDepth: 10,
    jsxImportSource: "@emotion/react",
    jsx: languages.typescript.JsxEmit.ReactJSX,
    allowUmdGlobalAccess: true
  });
  languages.typescript.typescriptDefaults.setDiagnosticsOptions({
    noSuggestionDiagnostics: true,
    noSemanticValidation: true,
    noSyntaxValidation: true
  });
  const editor2 = editor.create(innerContainer, {
    model: editor.createModel(code, "typescript", Uri.parse("file:///app/index.tsx")),
    language: "typescript",
    useShadowDOM: false,
    theme: "vs-dark",
    autoClosingBrackets: "languageDefined"
  });
  const throttle = (await import("./throttle-4WCLLGXA.mjs")).default;
  window.addEventListener("resize", throttle(function() {
    editor2.layout();
  }, 200));
  (async () => {
    const importHelper = [
      {
        name: "react",
        url: reactDts,
        depend: ["global", "csstype", "prop-types"]
      },
      {
        name: "react/jsx-runtime",
        url: jsxRuntimeDts,
        depend: ["global", "csstype", "prop-types"]
      },
      {
        name: "react/jsx-dev-runtime",
        url: jsxRuntimeDts,
        depend: ["global", "csstype", "prop-types"]
      },
      {
        name: "prop-types",
        url: propTypesDts,
        depend: []
      },
      {
        name: "csstype",
        url: cssTypeDts,
        depend: []
      },
      {
        name: "@emotion/base",
        url: emotionStyleBase,
        depend: [
          "@emotion/react",
          "@emotion/serialize",
          "react"
        ]
      },
      {
        name: "@emotion/styled",
        url: emotionStyled,
        depend: [
          "@emotion/react",
          "@emotion/serialize",
          "react"
        ]
      },
      {
        name: "@emotion/cache",
        url: emotionCache,
        depend: ["@emotion/utils"]
      },
      {
        name: "@emotion/react",
        url: emotionReactDts,
        depend: ["@emotion/cache"]
      },
      {
        name: "@emotion/react/jsx-runtime",
        url: emotionJSXRuntimeDTS,
        depend: ["@emotion/cache"]
      },
      {
        name: "@emotion/react/jsx-dev-runtime",
        url: emotionJSXRuntimeDTS,
        depend: ["@emotion/cache"]
      },
      {
        name: "@emotion/react/jsx-namespace",
        url: emotionJSXNameSpaceDTS,
        depend: ["@emotion/utils", "type"]
      },
      {
        name: "@emotion/react/theming",
        url: emotionThemingDts,
        depend: ["@emotion/utils", "type"]
      },
      {
        name: "@emotion/react/css-prop",
        url: emotionReactCssPropDts,
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/react/helper",
        url: emotionReactHelperDts,
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/serialize",
        url: emotionSerializeDts,
        depend: ["@emotion/utils", "csstype"]
      },
      {
        name: "@emotion/utils",
        url: emotionUtilsDts,
        depend: []
      },
      {
        name: "framer-motion",
        url: framerDts,
        depend: ["popmotion"]
      }
    ];
    const dts = importHelper.map(({ name, url }) => async () => languages.typescript.typescriptDefaults.addExtraLib(await (await fetch(url)).text(), `file:///node_modules/${name}/index.d.ts`));
    await pAll(dts, { concurrency: 2 });
    languages.typescript.typescriptDefaults.setEagerModelSync(true);
    languages.typescript.typescriptDefaults.setDiagnosticsOptions({
      noSuggestionDiagnostics: false,
      noSemanticValidation: false,
      noSyntaxValidation: false
    });
  })();
  return { editor: editor2, monaco: { ...editor_main_exports } };
};
export {
  startMonaco
};
