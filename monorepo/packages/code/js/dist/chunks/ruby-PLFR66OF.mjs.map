{
  "version": 3,
  "sources": ["../../../../../node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.1(337587859b1c171314b40503171188b6cea6a32a)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\n    \"__LINE__\",\n    \"__ENCODING__\",\n    \"__FILE__\",\n    \"BEGIN\",\n    \"END\",\n    \"alias\",\n    \"and\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"ensure\",\n    \"for\",\n    \"false\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\"\n  ],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\n    \"require\",\n    \"public\",\n    \"private\",\n    \"include\",\n    \"extend\",\n    \"attr_reader\",\n    \"protected\",\n    \"private_class_method\",\n    \"protected_class_method\",\n    \"new\"\n  ],\n  declarations: [\n    \"module\",\n    \"class\",\n    \"def\",\n    \"case\",\n    \"do\",\n    \"begin\",\n    \"for\",\n    \"if\",\n    \"while\",\n    \"until\",\n    \"unless\"\n  ],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\n    \"^\",\n    \"&\",\n    \"|\",\n    \"<=>\",\n    \"==\",\n    \"===\",\n    \"!~\",\n    \"=~\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"**\",\n    \"~\",\n    \"+@\",\n    \"-@\",\n    \"[]\",\n    \"[]=\",\n    \"`\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \"&=\",\n    \"&&=\",\n    \"||=\",\n    \"|=\"\n  ],\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [\n      [\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\n        [\n          \"white\",\n          {\n            cases: {\n              \"for|until|while\": {\n                token: \"keyword.$2\",\n                next: \"@dodecl.$2\"\n              },\n              \"@declarations\": {\n                token: \"keyword.$2\",\n                next: \"@root.$2\"\n              },\n              end: { token: \"keyword.$S2\", next: \"@pop\" },\n              \"@keywords\": \"keyword\",\n              \"@builtins\": \"predefined\",\n              \"@default\": \"identifier\"\n            }\n          }\n        ]\n      ],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            \"if|unless|while|until\": {\n              token: \"keyword.$0x\",\n              next: \"@modifier.$0x\"\n            },\n            for: { token: \"keyword.$2\", next: \"@dodecl.$2\" },\n            \"@linedecls\": { token: \"keyword.$0\", next: \"@root.$0\" },\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\n      [/\\$[\\w]*/, \"global.constant\"],\n      [/@[\\w]*/, \"namespace.instance.identifier\"],\n      [/@@@[\\w]*/, \"namespace.class.identifier\"],\n      [/<<[-~](@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/^<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      { include: \"@whitespace\" },\n      [/\"/, { token: \"string.d.delim\", next: '@dstring.d.\"' }],\n      [/'/, { token: \"string.sq.delim\", next: \"@sstring.sq\" }],\n      [/%([rsqxwW]|Q?)/, { token: \"@rematch\", next: \"pstring\" }],\n      [/`/, { token: \"string.x.delim\", next: \"@dstring.x.`\" }],\n      [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"],\n      [/:\"/, { token: \"string.s.delim\", next: '@dstring.s.\"' }],\n      [/:'/, { token: \"string.s.delim\", next: \"@sstring.s\" }],\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: \"regexp.delim\", next: \"@regexp\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywordops\": \"keyword\",\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[;,]/, \"delimiter\"],\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\n      [/0[dD]@decpart/, \"number\"],\n      [\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n        {\n          cases: {\n            $1: \"number.float\",\n            \"@default\": \"number\"\n          }\n        }\n      ]\n    ],\n    dodecl: [\n      [/^/, { token: \"\", switchTo: \"@root.$S2\" }],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            do: { token: \"keyword\", switchTo: \"@root.$S2\" },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    modifier: [\n      [/^/, \"\", \"@pop\"],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"then|else|elsif|do\": {\n              token: \"keyword\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    sstring: [\n      [/[^\\\\']+/, \"string.$S2\"],\n      [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.invalid\"],\n      [/'/, { token: \"string.$S2.delim\", next: \"@pop\" }]\n    ],\n    dstring: [\n      [/[^\\\\`\"#]+/, \"string.$S2\"],\n      [/#/, \"string.$S2.escape\", \"@interpolated\"],\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/@escapes/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape.invalid\"],\n      [\n        /[`\"]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    heredoc: [\n      [\n        /^(\\s*)(@heredelim)$/,\n        {\n          cases: {\n            \"$2==$S2\": [\"string.heredoc\", { token: \"string.heredoc.delimiter\", next: \"@pop\" }],\n            \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n          }\n        }\n      ],\n      [/.*/, \"string.heredoc\"]\n    ],\n    interpolated: [\n      [/\\$\\w*/, \"global.constant\", \"@pop\"],\n      [/@\\w*/, \"namespace.class.identifier\", \"@pop\"],\n      [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"],\n      [\n        /[{]/,\n        {\n          token: \"string.escape.curly\",\n          switchTo: \"@interpolated_compound\"\n        }\n      ],\n      [\"\", \"\", \"@pop\"]\n    ],\n    interpolated_compound: [\n      [/[}]/, { token: \"string.escape.curly\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ],\n    pregexp: [\n      { include: \"@whitespace\" },\n      [\n        /[^\\(\\{\\[\\\\]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"regexp.delim\", next: \"@pop\" },\n            \"$#==$S2\": { token: \"regexp.delim\", next: \"@push\" },\n            \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n            \"~@regexpctl\": \"regexp.escape.control\",\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexcontrol\" }\n    ],\n    regexp: [\n      { include: \"@regexcontrol\" },\n      [/[^\\\\\\/]/, \"regexp\"],\n      [\"/[ixmp]*\", { token: \"regexp.delim\" }, \"@pop\"]\n    ],\n    regexcontrol: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\n          \"@brackets.regexp.escape.control\",\n          \"regexp.escape.control\",\n          \"@brackets.regexp.escape.control\"\n        ]\n      ],\n      [\n        /(\\[)(\\^?)/,\n        [\"@brackets.regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]],\n      [/\\(\\?#/, { token: \"regexp.escape.control\", next: \"@regexpcomment\" }],\n      [/[()]/, \"@brackets.regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/#/, \"regexp.escape\", \"@interpolated\"]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]\n    ],\n    regexpcomment: [\n      [/[^)]+/, \"comment\"],\n      [/\\)/, { token: \"regexp.escape.control\", next: \"@pop\" }]\n    ],\n    pstring: [\n      [/%([qws])\\(/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.(.)\" }],\n      [/%([qws])\\[/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.[.]\" }],\n      [/%([qws])\\{/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.{.}\" }],\n      [/%([qws])</, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.<.>\" }],\n      [/%([qws])(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.$2.$2\" }],\n      [/%r\\(/, { token: \"regexp.delim\", switchTo: \"@pregexp.(.)\" }],\n      [/%r\\[/, { token: \"regexp.delim\", switchTo: \"@pregexp.[.]\" }],\n      [/%r\\{/, { token: \"regexp.delim\", switchTo: \"@pregexp.{.}\" }],\n      [/%r</, { token: \"regexp.delim\", switchTo: \"@pregexp.<.>\" }],\n      [/%r(@delim)/, { token: \"regexp.delim\", switchTo: \"@pregexp.$1.$1\" }],\n      [/%(x|W|Q?)\\(/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.(.)\" }],\n      [/%(x|W|Q?)\\[/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.[.]\" }],\n      [/%(x|W|Q?)\\{/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.{.}\" }],\n      [/%(x|W|Q?)</, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.<.>\" }],\n      [/%(x|W|Q?)(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.$2.$2\" }],\n      [/%([rqwsxW]|Q?)./, { token: \"invalid\", next: \"@pop\" }],\n      [/./, { token: \"invalid\", next: \"@pop\" }]\n    ],\n    qstring: [\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape\"],\n      [\n        /./,\n        {\n          cases: {\n            \"$#==$S4\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@push\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], { include: \"@qstring\" }],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/^\\s*=begin\\b/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^=]+/, \"comment\"],\n      [/^\\s*=begin\\b/, \"comment.invalid\"],\n      [/^\\s*=end\\b.*/, \"comment\", \"@pop\"],\n      [/[=]/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],
  "mappings": "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",
  "names": []
}
