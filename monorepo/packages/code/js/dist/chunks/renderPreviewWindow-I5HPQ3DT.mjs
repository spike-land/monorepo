import {
  wait
} from "./chunk-PL2TSUJW.mjs";
import {
  LazySpikeLandComponent
} from "./chunk-SZGP6JU2.mjs";
import "./chunk-XHYF4LCB.mjs";

// js/renderPreviewWindow.tsx
import { jsx as jsx3 } from "https://unpkg.com/@spike.land/esm@0.6.71/dist/emotion-react.mjs";

// js/DraggableWindow.tsx
import { css as css2, jsx as jsx2 } from "https://unpkg.com/@spike.land/esm@0.6.71/dist/emotion-react.mjs";
import React2, {
  useEffect,
  useRef,
  useState
} from "https://unpkg.com/@spike.land/esm@0.6.71/dist/react.mjs";
import { motion as motion2 } from "https://unpkg.com/@spike.land/esm@0.6.71/dist/framer-motion.mjs";

// js/Qr.tsx
import { css, jsx } from "https://unpkg.com/@spike.land/esm@0.6.71/dist/emotion-react.mjs";
import { motion } from "https://unpkg.com/@spike.land/esm@0.6.71/dist/framer-motion.mjs";
import React from "https://unpkg.com/@spike.land/esm@0.6.71/dist/react.mjs";

// ../qrious/dist/QRious.mjs
var ve = Object.create;
var w = Object.defineProperty;
var _e = Object.getOwnPropertyDescriptor;
var be = Object.getOwnPropertyNames;
var me = Object.getPrototypeOf;
var pe = Object.prototype.hasOwnProperty;
var ke = (t) => w(t, "__esModule", { value: true });
var o = (t, e5) => () => (e5 || t((e5 = { exports: {} }).exports, e5), e5.exports);
var ge = (t, e5, i13, r) => {
  if (e5 && typeof e5 == "object" || typeof e5 == "function")
    for (let x of be(e5))
      !pe.call(t, x) && (i13 || x !== "default") && w(t, x, { get: () => e5[x], enumerable: !(r = _e(e5, x)) || r.enumerable });
  return t;
};
var N = (t, e5) => ge(ke(w(t != null ? ve(me(t)) : {}, "default", !e5 && t && t.__esModule ? { get: () => t.default, enumerable: true } : { value: t, enumerable: true })), t);
var E = o((c0, A3) => {
  "use strict";
  var B3 = function() {
  }, we = Object.prototype.hasOwnProperty, Be = Array.prototype.slice;
  function Me(t, e5) {
    var i13;
    return typeof Object.create == "function" ? i13 = Object.create(t) : (B3.prototype = t, i13 = new B3(), B3.prototype = null), e5 && y8(true, i13, e5), i13;
  }
  function qe(t, e5, i13, r) {
    var x = this;
    return typeof t != "string" && (r = i13, i13 = e5, e5 = t, t = null), typeof e5 != "function" && (r = i13, i13 = e5, e5 = function() {
      return x.apply(this, arguments);
    }), y8(false, e5, x, r), e5.prototype = Me(x.prototype, i13), e5.prototype.constructor = e5, e5.class_ = t || x.class_, e5.super_ = x, e5;
  }
  function y8(t, e5, i13) {
    i13 = Be.call(arguments, 2);
    for (var r, x, s = 0, a18 = i13.length; s < a18; s++) {
      x = i13[s];
      for (r in x)
        (!t || we.call(x, r)) && (e5[r] = x[r]);
    }
  }
  A3.exports = qe;
});
var C = o((u0, S6) => {
  "use strict";
  var Oe = E();
  function p() {
  }
  p.class_ = "Nevis";
  p.super_ = Object;
  p.extend = Oe;
  S6.exports = p;
});
var u = o((h0, L4) => {
  "use strict";
  L4.exports = C();
});
var M = o((d0, R3) => {
  "use strict";
  var Ne = u(), ye = Ne.extend(function(t, e5, i13) {
    this.qrious = t, this.element = e5, this.element.qrious = t, this.enabled = Boolean(i13);
  }, { draw: function(t) {
  }, getElement: function() {
    return this.enabled || (this.enabled = true, this.render()), this.element;
  }, getModuleSize: function(t) {
    var e5 = this.qrious, i13 = e5.padding || 0, r = Math.floor((e5.size - i13 * 2) / t.width);
    return Math.max(1, r);
  }, getOffset: function(t) {
    var e5 = this.qrious, i13 = e5.padding;
    if (i13 != null)
      return i13;
    var r = this.getModuleSize(t), x = Math.floor((e5.size - r * t.width) / 2);
    return Math.max(0, x);
  }, render: function(t) {
    this.enabled && (this.resize(), this.reset(), this.draw(t));
  }, reset: function() {
  }, resize: function() {
  } });
  R3.exports = ye;
});
var j = o((l0, T4) => {
  "use strict";
  var Ae = M(), Ee = Ae.extend({ draw: function(t) {
    var e5, i13, r = this.qrious, x = this.getModuleSize(t), s = this.getOffset(t), a18 = this.element.getContext("2d");
    for (a18.fillStyle = r.foreground, a18.globalAlpha = r.foregroundAlpha, e5 = 0; e5 < t.width; e5++)
      for (i13 = 0; i13 < t.width; i13++)
        t.buffer[i13 * t.width + e5] && a18.fillRect(x * e5 + s, x * i13 + s, x, x);
  }, reset: function() {
    var t = this.qrious, e5 = this.element.getContext("2d"), i13 = t.size;
    e5.lineWidth = 1, e5.clearRect(0, 0, i13, i13), e5.fillStyle = t.background, e5.globalAlpha = t.backgroundAlpha, e5.fillRect(0, 0, i13, i13);
  }, resize: function() {
    var t = this.element;
    t.width = t.height = this.qrious.size;
  } });
  T4.exports = Ee;
});
var I = o((v0, z4) => {
  "use strict";
  var Se = u(), Ce2 = Se.extend(null, { BLOCK: [0, 11, 15, 19, 23, 27, 31, 16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24, 26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28] });
  z4.exports = Ce2;
});
var V = o((_0, P) => {
  "use strict";
  var Le = u(), Re = Le.extend(null, { BLOCKS: [1, 0, 19, 7, 1, 0, 16, 10, 1, 0, 13, 13, 1, 0, 9, 17, 1, 0, 34, 10, 1, 0, 28, 16, 1, 0, 22, 22, 1, 0, 16, 28, 1, 0, 55, 15, 1, 0, 44, 26, 2, 0, 17, 18, 2, 0, 13, 22, 1, 0, 80, 20, 2, 0, 32, 18, 2, 0, 24, 26, 4, 0, 9, 16, 1, 0, 108, 26, 2, 0, 43, 24, 2, 2, 15, 18, 2, 2, 11, 22, 2, 0, 68, 18, 4, 0, 27, 16, 4, 0, 19, 24, 4, 0, 15, 28, 2, 0, 78, 20, 4, 0, 31, 18, 2, 4, 14, 18, 4, 1, 13, 26, 2, 0, 97, 24, 2, 2, 38, 22, 4, 2, 18, 22, 4, 2, 14, 26, 2, 0, 116, 30, 3, 2, 36, 22, 4, 4, 16, 20, 4, 4, 12, 24, 2, 2, 68, 18, 4, 1, 43, 26, 6, 2, 19, 24, 6, 2, 15, 28, 4, 0, 81, 20, 1, 4, 50, 30, 4, 4, 22, 28, 3, 8, 12, 24, 2, 2, 92, 24, 6, 2, 36, 22, 4, 6, 20, 26, 7, 4, 14, 28, 4, 0, 107, 26, 8, 1, 37, 22, 8, 4, 20, 24, 12, 4, 11, 22, 3, 1, 115, 30, 4, 5, 40, 24, 11, 5, 16, 20, 11, 5, 12, 24, 5, 1, 87, 22, 5, 5, 41, 24, 5, 7, 24, 30, 11, 7, 12, 24, 5, 1, 98, 24, 7, 3, 45, 28, 15, 2, 19, 24, 3, 13, 15, 30, 1, 5, 107, 28, 10, 1, 46, 28, 1, 15, 22, 28, 2, 17, 14, 28, 5, 1, 120, 30, 9, 4, 43, 26, 17, 1, 22, 28, 2, 19, 14, 28, 3, 4, 113, 28, 3, 11, 44, 26, 17, 4, 21, 26, 9, 16, 13, 26, 3, 5, 107, 28, 3, 13, 41, 26, 15, 5, 24, 30, 15, 10, 15, 28, 4, 4, 116, 28, 17, 0, 42, 26, 17, 6, 22, 28, 19, 6, 16, 30, 2, 7, 111, 28, 17, 0, 46, 28, 7, 16, 24, 30, 34, 0, 13, 24, 4, 5, 121, 30, 4, 14, 47, 28, 11, 14, 24, 30, 16, 14, 15, 30, 6, 4, 117, 30, 6, 14, 45, 28, 11, 16, 24, 30, 30, 2, 16, 30, 8, 4, 106, 26, 8, 13, 47, 28, 7, 22, 24, 30, 22, 13, 15, 30, 10, 2, 114, 28, 19, 4, 46, 28, 28, 6, 22, 28, 33, 4, 16, 30, 8, 4, 122, 30, 22, 3, 45, 28, 8, 26, 23, 30, 12, 28, 15, 30, 3, 10, 117, 30, 3, 23, 45, 28, 4, 31, 24, 30, 11, 31, 15, 30, 7, 7, 116, 30, 21, 7, 45, 28, 1, 37, 23, 30, 19, 26, 15, 30, 5, 10, 115, 30, 19, 10, 47, 28, 15, 25, 24, 30, 23, 25, 15, 30, 13, 3, 115, 30, 2, 29, 46, 28, 42, 1, 24, 30, 23, 28, 15, 30, 17, 0, 115, 30, 10, 23, 46, 28, 10, 35, 24, 30, 19, 35, 15, 30, 17, 1, 115, 30, 14, 21, 46, 28, 29, 19, 24, 30, 11, 46, 15, 30, 13, 6, 115, 30, 14, 23, 46, 28, 44, 7, 24, 30, 59, 1, 16, 30, 12, 7, 121, 30, 12, 26, 47, 28, 39, 14, 24, 30, 22, 41, 15, 30, 6, 14, 121, 30, 6, 34, 47, 28, 46, 10, 24, 30, 2, 64, 15, 30, 17, 4, 122, 30, 29, 14, 46, 28, 49, 10, 24, 30, 24, 46, 15, 30, 4, 18, 122, 30, 13, 32, 46, 28, 48, 14, 24, 30, 42, 32, 15, 30, 20, 4, 117, 30, 40, 7, 47, 28, 43, 22, 24, 30, 10, 67, 15, 30, 19, 6, 118, 30, 18, 31, 47, 28, 34, 34, 24, 30, 20, 61, 15, 30], FINAL_FORMAT: [30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107], LEVELS: { L: 1, M: 2, Q: 3, H: 4 } });
  P.exports = Re;
});
var K = o((b0, G2) => {
  "use strict";
  var Te = u(), je = Te.extend(null, { EXPONENT: [1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 0], LOG: [255, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175] });
  G2.exports = je;
});
var D = o((m0, U2) => {
  "use strict";
  var ze = u(), Ie = ze.extend(null, { BLOCK: [3220, 1468, 2713, 1235, 3062, 1890, 2119, 1549, 2344, 2936, 1117, 2583, 1330, 2470, 1667, 2249, 2028, 3780, 481, 4011, 142, 3098, 831, 3445, 592, 2517, 1776, 2234, 1951, 2827, 1070, 2660, 1345, 3177] });
  U2.exports = Ie;
});
var Q = o((p0, F2) => {
  "use strict";
  var Pe = u(), Ve = I(), _7 = V(), l = K(), Ge = D(), c = Pe.extend(function(t) {
    var e5, i13, r, x, s, a18 = t.value.length;
    for (this._badness = [], this._level = _7.LEVELS[t.level], this._polynomial = [], this._value = t.value, this._version = 0, this._stringBuffer = []; this._version < 40 && (this._version++, r = (this._level - 1) * 4 + (this._version - 1) * 16, x = _7.BLOCKS[r++], s = _7.BLOCKS[r++], e5 = _7.BLOCKS[r++], i13 = _7.BLOCKS[r], r = e5 * (x + s) + s - 3 + (this._version <= 9), !(a18 <= r)); )
      ;
    this._dataBlock = e5, this._eccBlock = i13, this._neccBlock1 = x, this._neccBlock2 = s;
    var n8 = this.width = 17 + 4 * this._version;
    this.buffer = c._createArray(n8 * n8), this._ecc = c._createArray(e5 + (e5 + i13) * (x + s) + s), this._mask = c._createArray((n8 * (n8 + 1) + 1) / 2), this._insertFinders(), this._insertAlignments(), this.buffer[8 + n8 * (n8 - 8)] = 1, this._insertTimingGap(), this._reverseMask(), this._insertTimingRowAndColumn(), this._insertVersion(), this._syncMask(), this._convertBitStream(a18), this._calculatePolynomial(), this._appendEccToData(), this._interleaveBlocks(), this._pack(), this._finish();
  }, { _addAlignment: function(t, e5) {
    var i13, r = this.buffer, x = this.width;
    for (r[t + x * e5] = 1, i13 = -2; i13 < 2; i13++)
      r[t + i13 + x * (e5 - 2)] = 1, r[t - 2 + x * (e5 + i13 + 1)] = 1, r[t + 2 + x * (e5 + i13)] = 1, r[t + i13 + 1 + x * (e5 + 2)] = 1;
    for (i13 = 0; i13 < 2; i13++)
      this._setMask(t - 1, e5 + i13), this._setMask(t + 1, e5 - i13), this._setMask(t - i13, e5 - 1), this._setMask(t + i13, e5 + 1);
  }, _appendData: function(t, e5, i13, r) {
    var x, s, a18, n8 = this._polynomial, f10 = this._stringBuffer;
    for (s = 0; s < r; s++)
      f10[i13 + s] = 0;
    for (s = 0; s < e5; s++) {
      if (x = l.LOG[f10[t + s] ^ f10[i13]], x !== 255)
        for (a18 = 1; a18 < r; a18++)
          f10[i13 + a18 - 1] = f10[i13 + a18] ^ l.EXPONENT[c._modN(x + n8[r - a18])];
      else
        for (a18 = i13; a18 < i13 + r; a18++)
          f10[a18] = f10[a18 + 1];
      f10[i13 + r - 1] = x === 255 ? 0 : l.EXPONENT[c._modN(x + n8[0])];
    }
  }, _appendEccToData: function() {
    var t, e5 = 0, i13 = this._dataBlock, r = this._calculateMaxLength(), x = this._eccBlock;
    for (t = 0; t < this._neccBlock1; t++)
      this._appendData(e5, i13, r, x), e5 += i13, r += x;
    for (t = 0; t < this._neccBlock2; t++)
      this._appendData(e5, i13 + 1, r, x), e5 += i13 + 1, r += x;
  }, _applyMask: function(t) {
    var e5, i13, r, x, s = this.buffer, a18 = this.width;
    switch (t) {
      case 0:
        for (x = 0; x < a18; x++)
          for (r = 0; r < a18; r++)
            !(r + x & 1) && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 1:
        for (x = 0; x < a18; x++)
          for (r = 0; r < a18; r++)
            !(x & 1) && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 2:
        for (x = 0; x < a18; x++)
          for (e5 = 0, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0), !e5 && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 3:
        for (i13 = 0, x = 0; x < a18; x++, i13++)
          for (i13 === 3 && (i13 = 0), e5 = i13, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0), !e5 && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 4:
        for (x = 0; x < a18; x++)
          for (e5 = 0, i13 = x >> 1 & 1, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0, i13 = !i13), !i13 && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 5:
        for (i13 = 0, x = 0; x < a18; x++, i13++)
          for (i13 === 3 && (i13 = 0), e5 = 0, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0), !((r & x & 1) + !(!e5 | !i13)) && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 6:
        for (i13 = 0, x = 0; x < a18; x++, i13++)
          for (i13 === 3 && (i13 = 0), e5 = 0, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0), !((r & x & 1) + (e5 && e5 === i13) & 1) && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
      case 7:
        for (i13 = 0, x = 0; x < a18; x++, i13++)
          for (i13 === 3 && (i13 = 0), e5 = 0, r = 0; r < a18; r++, e5++)
            e5 === 3 && (e5 = 0), !((e5 && e5 === i13) + (r + x & 1) & 1) && !this._isMasked(r, x) && (s[r + x * a18] ^= 1);
        break;
    }
  }, _calculateMaxLength: function() {
    return this._dataBlock * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
  }, _calculatePolynomial: function() {
    var t, e5, i13 = this._eccBlock, r = this._polynomial;
    for (r[0] = 1, t = 0; t < i13; t++) {
      for (r[t + 1] = 1, e5 = t; e5 > 0; e5--)
        r[e5] = r[e5] ? r[e5 - 1] ^ l.EXPONENT[c._modN(l.LOG[r[e5]] + t)] : r[e5 - 1];
      r[0] = l.EXPONENT[c._modN(l.LOG[r[0]] + t)];
    }
    for (t = 0; t <= i13; t++)
      r[t] = l.LOG[r[t]];
  }, _checkBadness: function() {
    var t, e5, i13, r, x, s = 0, a18 = this._badness, n8 = this.buffer, f10 = this.width;
    for (x = 0; x < f10 - 1; x++)
      for (r = 0; r < f10 - 1; r++)
        (n8[r + f10 * x] && n8[r + 1 + f10 * x] && n8[r + f10 * (x + 1)] && n8[r + 1 + f10 * (x + 1)] || !(n8[r + f10 * x] || n8[r + 1 + f10 * x] || n8[r + f10 * (x + 1)] || n8[r + 1 + f10 * (x + 1)])) && (s += c.N2);
    var h = 0;
    for (x = 0; x < f10; x++) {
      for (i13 = 0, a18[0] = 0, t = 0, r = 0; r < f10; r++)
        e5 = n8[r + f10 * x], t === e5 ? a18[i13]++ : a18[++i13] = 1, t = e5, h += t ? 1 : -1;
      s += this._getBadness(i13);
    }
    h < 0 && (h = -h);
    var O3 = 0, b17 = h;
    for (b17 += b17 << 2, b17 <<= 1; b17 > f10 * f10; )
      b17 -= f10 * f10, O3++;
    for (s += O3 * c.N4, r = 0; r < f10; r++) {
      for (i13 = 0, a18[0] = 0, t = 0, x = 0; x < f10; x++)
        e5 = n8[r + f10 * x], t === e5 ? a18[i13]++ : a18[++i13] = 1, t = e5;
      s += this._getBadness(i13);
    }
    return s;
  }, _convertBitStream: function(t) {
    var e5, i13, r = this._ecc, x = this._version;
    for (i13 = 0; i13 < t; i13++)
      r[i13] = this._value.charCodeAt(i13);
    var s = this._stringBuffer = r.slice(), a18 = this._calculateMaxLength();
    t >= a18 - 2 && (t = a18 - 2, x > 9 && t--);
    var n8 = t;
    if (x > 9) {
      for (s[n8 + 2] = 0, s[n8 + 3] = 0; n8--; )
        e5 = s[n8], s[n8 + 3] |= 255 & e5 << 4, s[n8 + 2] = e5 >> 4;
      s[2] |= 255 & t << 4, s[1] = t >> 4, s[0] = 64 | t >> 12;
    } else {
      for (s[n8 + 1] = 0, s[n8 + 2] = 0; n8--; )
        e5 = s[n8], s[n8 + 2] |= 255 & e5 << 4, s[n8 + 1] = e5 >> 4;
      s[1] |= 255 & t << 4, s[0] = 64 | t >> 4;
    }
    for (n8 = t + 3 - (x < 10); n8 < a18; )
      s[n8++] = 236, s[n8++] = 17;
  }, _getBadness: function(t) {
    var e5, i13 = 0, r = this._badness;
    for (e5 = 0; e5 <= t; e5++)
      r[e5] >= 5 && (i13 += c.N1 + r[e5] - 5);
    for (e5 = 3; e5 < t - 1; e5 += 2)
      r[e5 - 2] === r[e5 + 2] && r[e5 + 2] === r[e5 - 1] && r[e5 - 1] === r[e5 + 1] && r[e5 - 1] * 3 === r[e5] && (r[e5 - 3] === 0 || e5 + 3 > t || r[e5 - 3] * 3 >= r[e5] * 4 || r[e5 + 3] * 3 >= r[e5] * 4) && (i13 += c.N3);
    return i13;
  }, _finish: function() {
    this._stringBuffer = this.buffer.slice();
    var t, e5, i13 = 0, r = 3e4;
    for (e5 = 0; e5 < 8 && (this._applyMask(e5), t = this._checkBadness(), t < r && (r = t, i13 = e5), i13 !== 7); e5++)
      this.buffer = this._stringBuffer.slice();
    i13 !== e5 && this._applyMask(i13), r = _7.FINAL_FORMAT[i13 + (this._level - 1 << 3)];
    var x = this.buffer, s = this.width;
    for (e5 = 0; e5 < 8; e5++, r >>= 1)
      r & 1 && (x[s - 1 - e5 + s * 8] = 1, e5 < 6 ? x[8 + s * e5] = 1 : x[8 + s * (e5 + 1)] = 1);
    for (e5 = 0; e5 < 7; e5++, r >>= 1)
      r & 1 && (x[8 + s * (s - 7 + e5)] = 1, e5 ? x[6 - e5 + s * 8] = 1 : x[7 + s * 8] = 1);
  }, _interleaveBlocks: function() {
    var t, e5, i13 = this._dataBlock, r = this._ecc, x = this._eccBlock, s = 0, a18 = this._calculateMaxLength(), n8 = this._neccBlock1, f10 = this._neccBlock2, h = this._stringBuffer;
    for (t = 0; t < i13; t++) {
      for (e5 = 0; e5 < n8; e5++)
        r[s++] = h[t + e5 * i13];
      for (e5 = 0; e5 < f10; e5++)
        r[s++] = h[n8 * i13 + t + e5 * (i13 + 1)];
    }
    for (e5 = 0; e5 < f10; e5++)
      r[s++] = h[n8 * i13 + t + e5 * (i13 + 1)];
    for (t = 0; t < x; t++)
      for (e5 = 0; e5 < n8 + f10; e5++)
        r[s++] = h[a18 + t + e5 * x];
    this._stringBuffer = r;
  }, _insertAlignments: function() {
    var t, e5, i13, r = this._version, x = this.width;
    if (r > 1)
      for (t = Ve.BLOCK[r], i13 = x - 7; ; ) {
        for (e5 = x - 7; e5 > t - 3 && (this._addAlignment(e5, i13), !(e5 < t)); )
          e5 -= t;
        if (i13 <= t + 9)
          break;
        i13 -= t, this._addAlignment(6, i13), this._addAlignment(i13, 6);
      }
  }, _insertFinders: function() {
    var t, e5, i13, r, x = this.buffer, s = this.width;
    for (t = 0; t < 3; t++) {
      for (e5 = 0, r = 0, t === 1 && (e5 = s - 7), t === 2 && (r = s - 7), x[r + 3 + s * (e5 + 3)] = 1, i13 = 0; i13 < 6; i13++)
        x[r + i13 + s * e5] = 1, x[r + s * (e5 + i13 + 1)] = 1, x[r + 6 + s * (e5 + i13)] = 1, x[r + i13 + 1 + s * (e5 + 6)] = 1;
      for (i13 = 1; i13 < 5; i13++)
        this._setMask(r + i13, e5 + 1), this._setMask(r + 1, e5 + i13 + 1), this._setMask(r + 5, e5 + i13), this._setMask(r + i13 + 1, e5 + 5);
      for (i13 = 2; i13 < 4; i13++)
        x[r + i13 + s * (e5 + 2)] = 1, x[r + 2 + s * (e5 + i13 + 1)] = 1, x[r + 4 + s * (e5 + i13)] = 1, x[r + i13 + 1 + s * (e5 + 4)] = 1;
    }
  }, _insertTimingGap: function() {
    var t, e5, i13 = this.width;
    for (e5 = 0; e5 < 7; e5++)
      this._setMask(7, e5), this._setMask(i13 - 8, e5), this._setMask(7, e5 + i13 - 7);
    for (t = 0; t < 8; t++)
      this._setMask(t, 7), this._setMask(t + i13 - 8, 7), this._setMask(t, i13 - 8);
  }, _insertTimingRowAndColumn: function() {
    var t, e5 = this.buffer, i13 = this.width;
    for (t = 0; t < i13 - 14; t++)
      t & 1 ? (this._setMask(8 + t, 6), this._setMask(6, 8 + t)) : (e5[8 + t + i13 * 6] = 1, e5[6 + i13 * (8 + t)] = 1);
  }, _insertVersion: function() {
    var t, e5, i13, r, x = this.buffer, s = this._version, a18 = this.width;
    if (s > 6)
      for (t = Ge.BLOCK[s - 7], e5 = 17, i13 = 0; i13 < 6; i13++)
        for (r = 0; r < 3; r++, e5--)
          1 & (e5 > 11 ? s >> e5 - 12 : t >> e5) ? (x[5 - i13 + a18 * (2 - r + a18 - 11)] = 1, x[2 - r + a18 - 11 + a18 * (5 - i13)] = 1) : (this._setMask(5 - i13, 2 - r + a18 - 11), this._setMask(2 - r + a18 - 11, 5 - i13));
  }, _isMasked: function(t, e5) {
    var i13 = c._getMaskBit(t, e5);
    return this._mask[i13] === 1;
  }, _pack: function() {
    var t, e5, i13, r = 1, x = 1, s = this.width, a18 = s - 1, n8 = s - 1, f10 = (this._dataBlock + this._eccBlock) * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
    for (e5 = 0; e5 < f10; e5++)
      for (t = this._stringBuffer[e5], i13 = 0; i13 < 8; i13++, t <<= 1) {
        128 & t && (this.buffer[a18 + s * n8] = 1);
        do
          x ? a18-- : (a18++, r ? n8 !== 0 ? n8-- : (a18 -= 2, r = !r, a18 === 6 && (a18--, n8 = 9)) : n8 !== s - 1 ? n8++ : (a18 -= 2, r = !r, a18 === 6 && (a18--, n8 -= 8))), x = !x;
        while (this._isMasked(a18, n8));
      }
  }, _reverseMask: function() {
    var t, e5, i13 = this.width;
    for (t = 0; t < 9; t++)
      this._setMask(t, 8);
    for (t = 0; t < 8; t++)
      this._setMask(t + i13 - 8, 8), this._setMask(8, t);
    for (e5 = 0; e5 < 7; e5++)
      this._setMask(8, e5 + i13 - 7);
  }, _setMask: function(t, e5) {
    var i13 = c._getMaskBit(t, e5);
    this._mask[i13] = 1;
  }, _syncMask: function() {
    var t, e5, i13 = this.width;
    for (e5 = 0; e5 < i13; e5++)
      for (t = 0; t <= e5; t++)
        this.buffer[t + i13 * e5] && this._setMask(t, e5);
  } }, { _createArray: function(t) {
    var e5, i13 = [];
    for (e5 = 0; e5 < t; e5++)
      i13[e5] = 0;
    return i13;
  }, _getMaskBit: function(t, e5) {
    var i13;
    return t > e5 && (i13 = t, t = e5, e5 = i13), i13 = e5, i13 += e5 * e5, i13 >>= 1, i13 += t, i13;
  }, _modN: function(t) {
    for (; t >= 255; )
      t -= 255, t = (t >> 8) + (t & 255);
    return t;
  }, N1: 3, N2: 3, N3: 40, N4: 10 });
  F2.exports = c;
});
var H = o((k0, X2) => {
  "use strict";
  var Ke = M(), Ue = Ke.extend({ draw: function() {
    this.element.src = this.qrious.toDataURL();
  }, reset: function() {
    this.element.src = "";
  }, resize: function() {
    var t = this.element;
    t.width = t.height = this.qrious.size;
  } });
  X2.exports = Ue;
});
var J = o((g0, W3) => {
  "use strict";
  var De = u(), Fe = De.extend(function(t, e5, i13, r) {
    this.name = t, this.modifiable = Boolean(e5), this.defaultValue = i13, this._valueTransformer = r;
  }, { transform: function(t) {
    var e5 = this._valueTransformer;
    return typeof e5 == "function" ? e5(t, this) : t;
  } });
  W3.exports = Fe;
});
var q = o((w0, Y2) => {
  "use strict";
  var Qe = u(), Xe = Qe.extend(null, { abs: function(t) {
    return t != null ? Math.abs(t) : null;
  }, hasOwn: function(t, e5) {
    return Object.prototype.hasOwnProperty.call(t, e5);
  }, noop: function() {
  }, toUpperCase: function(t) {
    return t != null ? t.toUpperCase() : null;
  } });
  Y2.exports = Xe;
});
var $ = o((B0, Z2) => {
  "use strict";
  var He = u(), k6 = q(), v7 = He.extend(function(t) {
    this.options = {}, t.forEach(function(e5) {
      this.options[e5.name] = e5;
    }, this);
  }, { exists: function(t) {
    return this.options[t] != null;
  }, get: function(t, e5) {
    return v7._get(this.options[t], e5);
  }, getAll: function(t) {
    var e5, i13 = this.options, r = {};
    for (e5 in i13)
      k6.hasOwn(i13, e5) && (r[e5] = v7._get(i13[e5], t));
    return r;
  }, init: function(t, e5, i13) {
    typeof i13 != "function" && (i13 = k6.noop);
    var r, x;
    for (r in this.options)
      k6.hasOwn(this.options, r) && (x = this.options[r], v7._set(x, x.defaultValue, e5), v7._createAccessor(x, e5, i13));
    this._setAll(t, e5, true);
  }, set: function(t, e5, i13) {
    return this._set(t, e5, i13);
  }, setAll: function(t, e5) {
    return this._setAll(t, e5);
  }, _set: function(t, e5, i13, r) {
    var x = this.options[t];
    if (!x)
      throw new Error("Invalid option: " + t);
    if (!x.modifiable && !r)
      throw new Error("Option cannot be modified: " + t);
    return v7._set(x, e5, i13);
  }, _setAll: function(t, e5, i13) {
    if (!t)
      return false;
    var r, x = false;
    for (r in t)
      k6.hasOwn(t, r) && this._set(r, t[r], e5, i13) && (x = true);
    return x;
  } }, { _createAccessor: function(t, e5, i13) {
    var r = { get: function() {
      return v7._get(t, e5);
    } };
    t.modifiable && (r.set = function(x) {
      v7._set(t, x, e5) && i13(x, t);
    }), Object.defineProperty(e5, t.name, r);
  }, _get: function(t, e5) {
    return e5["_" + t.name];
  }, _set: function(t, e5, i13) {
    var r = "_" + t.name, x = i13[r], s = t.transform(e5 != null ? e5 : t.defaultValue);
    return i13[r] = s, s !== x;
  } });
  Z2.exports = v7;
});
var te = o((M0, ee2) => {
  "use strict";
  var We = u(), Je = We.extend(function() {
    this._services = {};
  }, { getService: function(t) {
    var e5 = this._services[t];
    if (!e5)
      throw new Error("Service is not being managed with name: " + t);
    return e5;
  }, setService: function(t, e5) {
    if (this._services[t])
      throw new Error("Service is already managed with name: " + t);
    e5 && (this._services[t] = e5);
  } });
  ee2.exports = Je;
});
var se = o((q0, xe2) => {
  "use strict";
  var Ye = u(), Ze = j(), $e = Q(), e0 = H(), d7 = J(), t0 = $(), i0 = te(), m9 = q(), g5 = new t0([new d7("background", true, "white"), new d7("backgroundAlpha", true, 1, m9.abs), new d7("element"), new d7("foreground", true, "black"), new d7("foregroundAlpha", true, 1, m9.abs), new d7("level", true, "L", m9.toUpperCase), new d7("mime", true, "image/png"), new d7("padding", true, null, m9.abs), new d7("size", true, 100, m9.abs), new d7("value", true, "")]), ie = new i0(), re = Ye.extend(function(t) {
    g5.init(t, this, this.update.bind(this));
    var e5 = g5.get("element", this), i13 = ie.getService("element"), r = e5 && i13.isCanvas(e5) ? e5 : i13.createCanvas(), x = e5 && i13.isImage(e5) ? e5 : i13.createImage();
    this._canvasRenderer = new Ze(this, r, true), this._imageRenderer = new e0(this, x, x === e5), this.update();
  }, { get: function() {
    return g5.getAll(this);
  }, set: function(t) {
    g5.setAll(t, this) && this.update();
  }, toDataURL: function(t) {
    return this.canvas.toDataURL(t || this.mime);
  }, update: function() {
    var t = new $e({ level: this.level, value: this.value });
    this._canvasRenderer.render(t), this._imageRenderer.render(t);
  } }, { use: function(t) {
    ie.setService(t.getName(), t);
  } });
  Object.defineProperties(re.prototype, { canvas: { get: function() {
    return this._canvasRenderer.getElement();
  } }, image: { get: function() {
    return this._imageRenderer.getElement();
  } } });
  xe2.exports = re;
});
var ne = o((O0, ae) => {
  "use strict";
  ae.exports = se();
});
var oe = o((N0, fe) => {
  "use strict";
  var r0 = u(), x0 = r0.extend({ getName: function() {
  } });
  fe.exports = x0;
});
var ue = o((y0, ce) => {
  "use strict";
  var s0 = oe(), a0 = s0.extend({ createCanvas: function() {
  }, createImage: function() {
  }, getName: function() {
    return "element";
  }, isCanvas: function(t) {
  }, isImage: function(t) {
  } });
  ce.exports = a0;
});
var le = N(ne(), 1);
var he = N(ue(), 1);
var n0 = he.default.extend({ createCanvas: function() {
  return document.createElement("canvas");
}, createImage: function() {
  return document.createElement("img");
}, isCanvas: function(t) {
  return t instanceof HTMLCanvasElement;
}, isImage: function(t) {
  return t instanceof HTMLImageElement;
} });
var de = n0;
var f0 = le.default;
f0.use(new de());

// js/vendor/mui.mjs
var e = window.emotionReact;
var { ThemeContext: n } = e;
var { jsx: a } = e;
var { keyframes: m } = e;
var { withEmotionCache: i } = e;
function _objectWithoutPropertiesLoose(e13, t20) {
  if (e13 == null)
    return {};
  var o10 = {};
  var r14 = Object.keys(e13);
  var i13, n8;
  for (n8 = 0; n8 < r14.length; n8++) {
    i13 = r14[n8];
    t20.indexOf(i13) >= 0 || (o10[i13] = e13[i13]);
  }
  return o10;
}
function _extends() {
  _extends = Object.assign || function(e14) {
    for (var t21 = 1; t21 < arguments.length; t21++) {
      var n9 = arguments[t21];
      for (var r15 in n9)
        Object.prototype.hasOwnProperty.call(n9, r15) && (e14[r15] = n9[r15]);
    }
    return e14;
  };
  return _extends.apply(this, arguments);
}
var e1 = window.React;
var { createContext: t1 } = e1;
var { useDebugValue: o1 } = e1;
var { useState: s1 } = e1;
var { useId: n1 } = e1;
var { useRef: c1 } = e1;
var { useContext: r1 } = e1;
var { useEffect: a1 } = e1;
var { useLayoutEffect: p1 } = e1;
var { useReducer: x1 } = e1;
var { useCallback: u2 } = e1;
var { forwardRef: l1 } = e1;
var { createElement: f } = e1;
var { createFactory: m1 } = e1;
var { createRef: R } = e1;
var { Fragment: d } = e1;
var { Component: i1 } = e1;
var { Suspense: y } = e1;
var { isValidElement: C2 } = e1;
var { memo: w2 } = e1;
var { useImperativeHandle: E2 } = e1;
var { Children: b } = e1;
var { lazy: g } = e1;
var { isLazy: S } = e1;
var { useMemo: V2 } = e1;
var { cloneElement: k } = e1;
var D2 = e1;
var mod = {
  Children: b,
  Component: i1,
  Fragment: d,
  Suspense: y,
  cloneElement: k,
  createContext: t1,
  createElement: f,
  createFactory: m1,
  createRef: R,
  default: D2,
  forwardRef: l1,
  isLazy: S,
  isValidElement: C2,
  lazy: g,
  memo: w2,
  useCallback: u2,
  useContext: r1,
  useDebugValue: o1,
  useEffect: a1,
  useId: n1,
  useImperativeHandle: E2,
  useLayoutEffect: p1,
  useMemo: V2,
  useReducer: x1,
  useRef: c1,
  useState: s1
};
var _ = {};
var a2 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
_ = a2;
var r2 = _;
var t2 = {};
var i2 = r2;
function emptyFunction() {
}
function emptyFunctionWithReset() {
}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
t2 = function() {
  function shim(e5, t, n8, r, s, m15) {
    if (m15 !== i2) {
      var o11 = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      o11.name = "Invariant Violation";
      throw o11;
    }
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  var e15 = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  e15.PropTypes = e15;
  return e15;
};
var n2 = t2;
var r3 = {};
r3 = n2();
var s2 = r3;
function toVal(e16) {
  var t22, r16, f23 = "";
  if (typeof e16 === "string" || typeof e16 === "number")
    f23 += e16;
  else if (typeof e16 === "object") {
    if (Array.isArray(e16)) {
      for (t22 = 0; t22 < e16.length; t22++)
        if (e16[t22] && (r16 = toVal(e16[t22]))) {
          f23 && (f23 += " ");
          f23 += r16;
        }
    } else
      for (t22 in e16)
        if (e16[t22]) {
          f23 && (f23 += " ");
          f23 += t22;
        }
  }
  return f23;
}
function clsx_m() {
  var e17, t23, r17 = 0, f24 = "";
  while (r17 < arguments.length)
    if ((e17 = arguments[r17++]) && (t23 = toVal(e17))) {
      f24 && (f24 += " ");
      f24 += t23;
    }
  return f24;
}
function isHostComponent(o12) {
  return typeof o12 === "string";
}
function appendOwnerState(r18, a18 = {}, n10) {
  return isHostComponent(r18) ? a18 : _extends({}, a18, {
    ownerState: _extends({}, a18.ownerState, n10)
  });
}
function extractEventHandlers(t24, e18 = []) {
  if (t24 === void 0)
    return {};
  const n12 = {};
  Object.keys(t24).filter((n11) => n11.match(/^on[A-Z]/) && typeof t24[n11] === "function" && !e18.includes(n11)).forEach((e19) => {
    n12[e19] = t24[e19];
  });
  return n12;
}
var e2 = {};
var t3 = 60103;
var r4 = 60106;
var n3 = 60107;
var o2 = 60108;
var i3 = 60114;
var s3 = 60109;
var c2 = 60110;
var a3 = 60112;
var f1 = 60113;
var u1 = 60120;
var l2 = 60115;
var p2 = 60116;
var d1 = 60121;
var m2 = 60122;
var $2 = 60117;
var C1 = 60129;
var M2 = 60131;
if (typeof Symbol === "function" && Symbol.for) {
  P = Symbol.for;
  t3 = P("react.element");
  r4 = P("react.portal");
  n3 = P("react.fragment");
  o2 = P("react.strict_mode");
  i3 = P("react.profiler");
  s3 = P("react.provider");
  c2 = P("react.context");
  a3 = P("react.forward_ref");
  f1 = P("react.suspense");
  u1 = P("react.suspense_list");
  l2 = P("react.memo");
  p2 = P("react.lazy");
  d1 = P("react.block");
  m2 = P("react.server.block");
  $2 = P("react.fundamental");
  C1 = P("react.debug_trace_mode");
  M2 = P("react.legacy_hidden");
}
var P;
function y1(e110) {
  if (typeof e110 === "object" && e110 !== null) {
    var d18 = e110.$$typeof;
    switch (d18) {
      case t3:
        switch (e110 = e110.type, e110) {
          case n3:
          case i3:
          case o2:
          case f1:
          case u1:
            return e110;
          default:
            switch (e110 = e110 && e110.$$typeof, e110) {
              case c2:
              case a3:
              case p2:
              case l2:
              case s3:
                return e110;
              default:
                return d18;
            }
        }
      case r4:
        return d18;
    }
  }
}
var v = s3;
var x2 = t3;
var S1 = a3;
var b1 = n3;
var g1 = p2;
var w1 = l2;
var F = r4;
var E1 = i3;
var _1 = o2;
var z = f1;
e2.ContextConsumer = c2;
e2.ContextProvider = v;
e2.Element = x2;
e2.ForwardRef = S1;
e2.Fragment = b1;
e2.Lazy = g1;
e2.Memo = w1;
e2.Portal = F;
e2.Profiler = E1;
e2.StrictMode = _1;
e2.Suspense = z;
e2.isAsyncMode = function() {
  return false;
};
e2.isConcurrentMode = function() {
  return false;
};
e2.isContextConsumer = function(e21) {
  return y1(e21) === c2;
};
e2.isContextProvider = function(e32) {
  return y1(e32) === s3;
};
e2.isElement = function(e42) {
  return typeof e42 === "object" && e42 !== null && e42.$$typeof === t3;
};
e2.isForwardRef = function(e5) {
  return y1(e5) === a3;
};
e2.isFragment = function(e62) {
  return y1(e62) === n3;
};
e2.isLazy = function(e72) {
  return y1(e72) === p2;
};
e2.isMemo = function(e82) {
  return y1(e82) === l2;
};
e2.isPortal = function(e92) {
  return y1(e92) === r4;
};
e2.isProfiler = function(e102) {
  return y1(e102) === i3;
};
e2.isStrictMode = function(e112) {
  return y1(e112) === o2;
};
e2.isSuspense = function(e122) {
  return y1(e122) === f1;
};
e2.isValidElementType = function(e13) {
  return typeof e13 === "string" || typeof e13 === "function" || e13 === n3 || e13 === i3 || e13 === C1 || e13 === o2 || e13 === f1 || e13 === u1 || e13 === M2 || typeof e13 === "object" && e13 !== null && (e13.$$typeof === p2 || e13.$$typeof === l2 || e13.$$typeof === s3 || e13.$$typeof === c2 || e13.$$typeof === a3 || e13.$$typeof === $2 || e13.$$typeof === d1 || e13[0] === m2);
};
e2.typeOf = y1;
var h1 = e2.ContextConsumer;
var L = e2.ContextProvider;
var R1 = e2.Element;
var j2 = e2.ForwardRef;
var k1 = e2.Fragment;
var A = e2.Lazy;
var O = e2.Memo;
var T = e2.Portal;
var V1 = e2.Profiler;
var q2 = e2.StrictMode;
var B = e2.Suspense;
var D1 = e2.isAsyncMode;
var G = e2.isConcurrentMode;
var H2 = e2.isContextConsumer;
var I2 = e2.isContextProvider;
var J2 = e2.isElement;
var K2 = e2.isForwardRef;
var N2 = e2.isFragment;
var Q2 = e2.isLazy;
var U = e2.isMemo;
var W = e2.isPortal;
var X = e2.isProfiler;
var Y = e2.isStrictMode;
var Z = e2.isSuspense;
var ee = e2.isValidElementType;
var te2 = e2.typeOf;
function chainPropTypes(e111, t110) {
  return true ? () => null : function validate(...n13) {
    return e111(...n13) || t110(...n13);
  };
}
function isPlainObject(e22) {
  return e22 !== null && typeof e22 === "object" && e22.constructor === Object;
}
function deepmerge(t25, n21, o13 = {
  clone: true
}) {
  const r19 = o13.clone ? _extends({}, t25) : t25;
  isPlainObject(t25) && isPlainObject(n21) && Object.keys(n21).forEach((e32) => {
    e32 !== "__proto__" && (isPlainObject(n21[e32]) && e32 in t25 && isPlainObject(t25[e32]) ? r19[e32] = deepmerge(t25[e32], n21[e32], o13) : r19[e32] = n21[e32]);
  });
  return r19;
}
function isClassComponent$1(e42) {
  const { prototype: t31 = {} } = e42;
  return Boolean(t31.isReactComponent);
}
function acceptingRef(e5, t42, n31, o21, r21) {
  const i14 = e5[t42];
  const u19 = r21 || t42;
  if (i14 == null || typeof window === "undefined")
    return null;
  let s17;
  const l15 = i14.type;
  typeof l15 !== "function" || isClassComponent$1(l15) || (s17 = "Did you accidentally use a plain function component for an element instead?");
  return s17 !== void 0 ? new Error(`Invalid ${o21} \`${u19}\` supplied to \`${n31}\`. Expected an element that can hold a ref. ${s17} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
var i4 = chainPropTypes(s2.element, acceptingRef);
i4.isRequired = chainPropTypes(s2.element.isRequired, acceptingRef);
function isClassComponent(e62) {
  const { prototype: t52 = {} } = e62;
  return Boolean(t52.isReactComponent);
}
function elementTypeAcceptingRef(e72, t62, n42, o32, r31) {
  const i21 = e72[t62];
  const u23 = r31 || t62;
  if (i21 == null || typeof window === "undefined")
    return null;
  let s21;
  typeof i21 !== "function" || isClassComponent(i21) || (s21 = "Did you accidentally provide a plain function component instead?");
  return s21 !== void 0 ? new Error(`Invalid ${o32} \`${u23}\` supplied to \`${n42}\`. Expected an element type that can hold a ref. ${s21} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
var u22 = chainPropTypes(s2.elementType, elementTypeAcceptingRef);
function formatMuiErrorMessage(e122) {
  let t82 = "https://mui.com/production-error/?code=" + e122;
  for (let e112 = 1; e112 < arguments.length; e112 += 1)
    t82 += "&args[]=" + encodeURIComponent(arguments[e112]);
  return "Minified MUI error #" + e122 + "; visit " + t82 + " for the full message.";
}
typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
var a4 = s2.oneOfType([
  s2.func,
  s2.object
]);
function capitalize(e18) {
  if (typeof e18 !== "string")
    throw new Error(false ? "MUI: `capitalize(string)` expects a string argument." : formatMuiErrorMessage(7));
  return e18.charAt(0).toUpperCase() + e18.slice(1);
}
function createChainedFunction(...e19) {
  return e19.reduce((e20, t132) => t132 == null ? e20 : function chainedFunction(...n9) {
    e20.apply(this, n9);
    t132.apply(this, n9);
  }, () => {
  });
}
function debounce(e21, t142 = 166) {
  let n10;
  function debounced(...o62) {
    const later = () => {
      e21.apply(this, o62);
    };
    clearTimeout(n10);
    n10 = setTimeout(later, t142);
  }
  debounced.clear = () => {
    clearTimeout(n10);
  };
  return debounced;
}
function ownerDocument(e25) {
  return e25 && e25.ownerDocument || document;
}
function ownerWindow(e26) {
  const t172 = ownerDocument(e26);
  return t172.defaultView || window;
}
function setRef(e29, t192) {
  typeof e29 === "function" ? e29(t192) : e29 && (e29.current = t192);
}
var d2 = typeof window !== "undefined" ? p1 : a1;
var p3 = 0;
function useId(e30) {
  const [t20, n14] = s1(e30);
  const o92 = e30 || t20;
  a1(() => {
    if (t20 == null) {
      p3 += 1;
      n14(`mui-${p3}`);
    }
  }, [
    t20
  ]);
  return o92;
}
function useControlled({ controlled: e32, default: t22, name: n15, state: o10 = "value" }) {
  const { current: i72 } = c1(e32 !== void 0);
  const [u6, s5] = s1(t22);
  const l31 = i72 ? e32 : u6;
  if (false) {
    a1(() => {
      i72 !== (e32 !== void 0) && console.error([
        `MUI: A component is changing the ${i72 ? "" : "un"}controlled ${o10} state of ${n15} to be ${i72 ? "un" : ""}controlled.`,
        "Elements should not switch from uncontrolled to controlled (or vice versa).",
        `Decide between using a controlled or uncontrolled ${n15} element for the lifetime of the component.`,
        "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.",
        "More info: https://fb.me/react-controlled-components"
      ].join("\n"));
    }, [
      o10,
      n15,
      e32
    ]);
    const { current: u72 } = c1(t22);
    a1(() => {
      i72 || u72 === t22 || console.error([
        `MUI: A component is changing the default ${o10} state of an uncontrolled ${n15} after being initialized. To suppress this warning opt to use a controlled ${n15}.`
      ].join("\n"));
    }, [
      JSON.stringify(t22)
    ]);
  }
  const c21 = u2((e33) => {
    i72 || s5(e33);
  }, []);
  return [
    l31,
    c21
  ];
}
function useEventCallback(e34) {
  const t23 = c1(e34);
  d2(() => {
    t23.current = e34;
  });
  return u2((...e35) => (0, t23.current)(...e35), []);
}
function useForkRef(e36, t24) {
  return V2(() => e36 == null && t24 == null ? null : (n16) => {
    setRef(e36, n16);
    setRef(t24, n16);
  }, [
    e36,
    t24
  ]);
}
var f2 = true;
var m3 = false;
var h2;
var y2 = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  "datetime-local": true
};
function focusTriggersKeyboardModality(e37) {
  const { type: t25, tagName: n17 } = e37;
  return !(n17 !== "INPUT" || !y2[t25] || e37.readOnly) || n17 === "TEXTAREA" && !e37.readOnly || !!e37.isContentEditable;
}
function handleKeyDown(e38) {
  e38.metaKey || e38.altKey || e38.ctrlKey || (f2 = true);
}
function handlePointerDown() {
  f2 = false;
}
function handleVisibilityChange() {
  this.visibilityState === "hidden" && m3 && (f2 = true);
}
function prepare(e39) {
  e39.addEventListener("keydown", handleKeyDown, true);
  e39.addEventListener("mousedown", handlePointerDown, true);
  e39.addEventListener("pointerdown", handlePointerDown, true);
  e39.addEventListener("touchstart", handlePointerDown, true);
  e39.addEventListener("visibilitychange", handleVisibilityChange, true);
}
function isFocusVisible(e40) {
  const { target: t26 } = e40;
  try {
    return t26.matches(":focus-visible");
  } catch (e5) {
  }
  return f2 || focusTriggersKeyboardModality(t26);
}
function useIsFocusVisible() {
  const e41 = u2((e42) => {
    e42 != null && prepare(e42.ownerDocument);
  }, []);
  const t27 = c1(false);
  function handleBlurVisible() {
    if (t27.current) {
      m3 = true;
      window.clearTimeout(h2);
      h2 = window.setTimeout(() => {
        m3 = false;
      }, 100);
      t27.current = false;
      return true;
    }
    return false;
  }
  function handleFocusVisible(e43) {
    if (isFocusVisible(e43)) {
      t27.current = true;
      return true;
    }
    return false;
  }
  return {
    isFocusVisibleRef: t27,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref: e41
  };
}
function getScrollbarSize(e44) {
  const t28 = e44.documentElement.clientWidth;
  return Math.abs(window.innerWidth - t28);
}
var usePreviousProps = (e47) => {
  const t31 = c1({});
  a1(() => {
    t31.current = e47;
  });
  return t31.current;
};
var g2 = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: -1,
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
};
function getTypeByValue(e48) {
  const t32 = typeof e48;
  switch (t32) {
    case "number":
      return Number.isNaN(e48) ? "NaN" : Number.isFinite(e48) ? e48 !== Math.floor(e48) ? "float" : "number" : "Infinity";
    case "object":
      return e48 === null ? "null" : e48.constructor.name;
    default:
      return t32;
  }
}
function ponyfillIsInteger(e49) {
  return typeof e49 === "number" && isFinite(e49) && Math.floor(e49) === e49;
}
var w22 = Number.isInteger || ponyfillIsInteger;
function requiredInteger(e50, t33, n19, o12) {
  const r82 = e50[t33];
  if (r82 == null || !w22(r82)) {
    const e51 = getTypeByValue(r82);
    return new RangeError(`Invalid ${o12} \`${t33}\` of type \`${e51}\` supplied to \`${n19}\`, expected \`integer\`.`);
  }
  return null;
}
function validator(e52, t34, ...n20) {
  const o13 = e52[t34];
  return o13 === void 0 ? null : requiredInteger(e52, t34, ...n20);
}
function validatorNoop() {
  return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
function resolveProps(t35, n21) {
  const o14 = _extends({}, n21);
  Object.keys(t35).forEach((e53) => {
    o14[e53] === void 0 && (o14[e53] = t35[e53]);
  });
  return o14;
}
function stripDiacritics(e112) {
  return typeof e112.normalize !== "undefined" ? e112.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : e112;
}
function createFilterOptions(e23 = {}) {
  const { ignoreAccents: t111 = true, ignoreCase: n14 = true, limit: o14, matchFrom: r110 = "any", stringify: s18, trim: i15 = false } = e23;
  return (e32, { inputValue: l16, getOptionLabel: a19 }) => {
    let u20 = i15 ? l16.trim() : l16;
    n14 && (u20 = u20.toLowerCase());
    t111 && (u20 = stripDiacritics(u20));
    const c15 = e32.filter((e42) => {
      let o22 = (s18 || a19)(e42);
      n14 && (o22 = o22.toLowerCase());
      t111 && (o22 = stripDiacritics(o22));
      return r110 === "start" ? o22.indexOf(u20) === 0 : o22.indexOf(u20) > -1;
    });
    return typeof o14 === "number" ? c15.slice(0, o14) : c15;
  };
}
createFilterOptions();
function composeClasses(s19, e20, o15) {
  const c16 = {};
  Object.keys(s19).forEach((r20) => {
    c16[r20] = s19[r20].reduce((s20, c17) => {
      if (c17) {
        o15 && o15[c17] && s20.push(o15[c17]);
        s20.push(e20(c17));
      }
      return s20;
    }, []).join(" ");
  });
  return c16;
}
var defaultGenerator = (e113) => e113;
var createClassNameGenerator = () => {
  let e24 = defaultGenerator;
  return {
    configure(t112) {
      e24 = t112;
    },
    generate(t26) {
      return e24(t26);
    },
    reset() {
      e24 = defaultGenerator;
    }
  };
};
var e3 = createClassNameGenerator();
var t4 = {
  active: "Mui-active",
  checked: "Mui-checked",
  completed: "Mui-completed",
  disabled: "Mui-disabled",
  error: "Mui-error",
  expanded: "Mui-expanded",
  focused: "Mui-focused",
  focusVisible: "Mui-focusVisible",
  required: "Mui-required",
  selected: "Mui-selected"
};
function generateUtilityClass(i16, r22) {
  const s22 = t4[r22];
  return s22 || `${e3.generate(i16)}-${r22}`;
}
function generateUtilityClasses(t27, s110) {
  const a20 = {};
  s110.forEach((s23) => {
    a20[s23] = generateUtilityClass(t27, s23);
  });
  return a20;
}
var r5 = {};
var e4 = Object.getOwnPropertySymbols;
var t5 = Object.prototype.hasOwnProperty;
var n4 = Object.prototype.propertyIsEnumerable;
function toObject(r111) {
  if (r111 === null || r111 === void 0)
    throw new TypeError("Object.assign cannot be called with null or undefined");
  return Object(r111);
}
function shouldUseNative() {
  try {
    if (!Object.assign)
      return false;
    var r23 = new String("abc");
    r23[5] = "de";
    if (Object.getOwnPropertyNames(r23)[0] === "5")
      return false;
    var e114 = {};
    for (var t113 = 0; t113 < 10; t113++)
      e114["_" + String.fromCharCode(t113)] = t113;
    var n15 = Object.getOwnPropertyNames(e114).map(function(r32) {
      return e114[r32];
    });
    if (n15.join("") !== "0123456789")
      return false;
    var a110 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(r42) {
      a110[r42] = r42;
    });
    return Object.keys(Object.assign({}, a110)).join("") === "abcdefghijklmnopqrst";
  } catch (r) {
    return false;
  }
}
r5 = shouldUseNative() ? Object.assign : function(r51, a18) {
  var o16;
  var c18 = toObject(r51);
  var i17;
  for (var s24 = 1; s24 < arguments.length; s24++) {
    o16 = Object(arguments[s24]);
    for (var f25 in o16)
      t5.call(o16, f25) && (c18[f25] = o16[f25]);
    if (e4) {
      i17 = e4(o16);
      for (var l17 = 0; l17 < i17.length; l17++)
        n4.call(o16, i17[l17]) && (c18[i17[l17]] = o16[i17[l17]]);
    }
  }
  return c18;
};
var a5 = r5;
var mod1 = {
  default: a5
};
"default" in mod1 ? mod1.default : mod1;
var o3 = "default" in mod ? mod.default : mod;
var a6 = {};
var f3 = o3;
var n5 = 60103;
a6.Fragment = 60107;
if (typeof Symbol === "function" && Symbol.for) {
  s5 = Symbol.for;
  n5 = s5("react.element");
  a6.Fragment = s5("react.fragment");
}
var s5;
var l4 = f3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
var _2 = Object.prototype.hasOwnProperty;
var i5 = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
function q1(r112, e115, t114) {
  var o17, a111 = {}, f110 = null, s25 = null;
  t114 !== void 0 && (f110 = "" + t114);
  e115.key !== void 0 && (f110 = "" + e115.key);
  e115.ref !== void 0 && (s25 = e115.ref);
  for (o17 in e115)
    _2.call(e115, o17) && !i5.hasOwnProperty(o17) && (a111[o17] = e115[o17]);
  if (r112 && r112.defaultProps)
    for (o17 in e115 = r112.defaultProps, e115)
      a111[o17] === void 0 && (a111[o17] = e115[o17]);
  return {
    $$typeof: n5,
    type: r112,
    key: f110,
    ref: s25,
    props: a111,
    _owner: l4.current
  };
}
a6.jsx = q1;
a6.jsxs = q1;
var u3 = a6.Fragment;
var p4 = a6.jsx;
var y3 = a6.jsxs;
function getBackdropUtilityClass(e116) {
  return generateUtilityClass("MuiBackdrop", e116);
}
generateUtilityClasses("MuiBackdrop", [
  "root",
  "invisible"
]);
var l5 = [
  "classes",
  "className",
  "invisible",
  "component",
  "components",
  "componentsProps",
  "theme"
];
var useUtilityClasses = (e25) => {
  const { classes: o18, invisible: s111 } = e25;
  const t115 = {
    root: [
      "root",
      s111 && "invisible"
    ]
  };
  return composeClasses(t115, getBackdropUtilityClass, o18);
};
var f4 = l1(function BackdropUnstyled(s26, t28) {
  const { classes: i18, className: a112, invisible: c19 = false, component: p15 = "div", components: f111 = {}, componentsProps: b17 = {}, theme: d19 } = s26, u21 = _objectWithoutPropertiesLoose(s26, l5);
  const h15 = _extends({}, s26, {
    classes: i18,
    invisible: c19
  });
  const v13 = useUtilityClasses(h15);
  const y13 = f111.Root || p15;
  const N5 = b17.root || {};
  return p4(y13, _extends({
    "aria-hidden": true
  }, N5, !isHostComponent(y13) && {
    as: p15,
    ownerState: _extends({}, h15, N5.ownerState),
    theme: d19
  }, {
    ref: t28
  }, u21, {
    className: clsx_m(v13.root, N5.className, a112)
  }));
});
false ? f4.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  invisible: s2.bool
} : void 0;
function useBadge(e117) {
  const { anchorOrigin: o19 = {
    vertical: "top",
    horizontal: "right"
  }, badgeContent: t116, invisible: n16, max: a113 = 99, showZero: r113 = false, variant: s112 = "standard" } = e117;
  const c110 = usePreviousProps({
    anchorOrigin: o19,
    badgeContent: t116,
    max: a113,
    variant: s112
  });
  let l18 = n16;
  n16 == null && (t116 === 0 && !r113 || t116 == null && s112 !== "dot") && (l18 = true);
  const { anchorOrigin: m16 = o19, badgeContent: g14, max: d110 = a113, variant: p16 = s112 } = l18 ? c110 : e117;
  let h16 = "";
  p16 !== "dot" && (h16 = g14 && Number(g14) > d110 ? `${d110}+` : g14);
  return {
    anchorOrigin: m16,
    badgeContent: g14,
    invisible: l18,
    max: d110,
    variant: p16,
    displayValue: h16
  };
}
function getBadgeUtilityClass(e26) {
  return generateUtilityClass("MuiBadge", e26);
}
generateUtilityClasses("MuiBadge", [
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopLeft",
  "anchorOriginTopRight",
  "anchorOriginBottomLeft",
  "anchorOriginBottomRight",
  "invisible"
]);
var h3 = [
  "anchorOrigin",
  "classes",
  "badgeContent",
  "component",
  "children",
  "className",
  "components",
  "componentsProps",
  "invisible",
  "max",
  "showZero",
  "variant"
];
var useUtilityClasses1 = (e31) => {
  const { variant: o23, anchorOrigin: t29, invisible: n22, classes: a21 } = e31;
  const i19 = {
    root: [
      "root"
    ],
    badge: [
      "badge",
      o23,
      `anchorOrigin${capitalize(t29.vertical)}${capitalize(t29.horizontal)}`,
      n22 && "invisible"
    ]
  };
  return composeClasses(i19, getBadgeUtilityClass, a21);
};
var b2 = l1(function BadgeUnstyled(t32, n32) {
  const { anchorOrigin: i22 = {
    vertical: "top",
    horizontal: "right"
  }, classes: r24, component: s27, children: l21, className: m21, components: p21 = {}, componentsProps: b18 = {}, max: u222 = 99, showZero: f26 = false, variant: v14 = "standard" } = t32, O3 = _objectWithoutPropertiesLoose(t32, h3);
  const { anchorOrigin: x9, badgeContent: C7, max: y14, variant: B3, displayValue: N6, invisible: j6 } = useBadge(_extends({}, t32, {
    anchorOrigin: i22,
    max: u222,
    variant: v14
  }));
  const R5 = _extends({}, t32, {
    anchorOrigin: x9,
    badgeContent: C7,
    classes: r24,
    invisible: j6,
    max: y14,
    variant: B3,
    showZero: f26
  });
  const w9 = useUtilityClasses1(R5);
  const T4 = s27 || p21.Root || "span";
  const U2 = appendOwnerState(T4, _extends({}, O3, b18.root), R5);
  const Z2 = p21.Badge || "span";
  const z4 = appendOwnerState(Z2, b18.badge, R5);
  return y3(T4, _extends({}, U2, {
    ref: n32
  }, O3, {
    className: clsx_m(w9.root, U2.className, m21),
    children: [
      l21,
      p4(Z2, _extends({}, z4, {
        className: clsx_m(w9.badge, z4.className),
        children: N6
      }))
    ]
  }));
});
false ? b2.propTypes = {
  anchorOrigin: s2.shape({
    horizontal: s2.oneOf([
      "left",
      "right"
    ]).isRequired,
    vertical: s2.oneOf([
      "bottom",
      "top"
    ]).isRequired
  }),
  badgeContent: s2.node,
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Badge: s2.elementType,
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    badge: s2.object,
    root: s2.object
  }),
  invisible: s2.bool,
  max: s2.number,
  showZero: s2.bool,
  variant: s2.string
} : void 0;
function getButtonUnstyledUtilityClass(e118) {
  return generateUtilityClass("ButtonUnstyled", e118);
}
generateUtilityClasses("ButtonUnstyled", [
  "root",
  "active",
  "disabled",
  "focusVisible"
]);
function useButton(t117) {
  var n17;
  const { component: s113, components: a114 = {}, disabled: u110 = false, href: i110, ref: p17, tabIndex: m17 = 0, to: d111, type: b19 } = t117;
  const v13 = c1();
  const [y15, g15] = s1(false);
  const { isFocusVisibleRef: U3, onFocus: V5, onBlur: B4, ref: T5 } = useIsFocusVisible();
  const [h17, F2] = s1(false);
  u110 && h17 && F2(false);
  a1(() => {
    U3.current = h17;
  }, [
    h17,
    U3
  ]);
  const createHandleMouseLeave = (e27) => (t210) => {
    var o110;
    h17 && t210.preventDefault();
    (o110 = e27.onMouseLeave) == null ? void 0 : o110.call(e27, t210);
  };
  const createHandleBlur = (e32) => (t33) => {
    var o24;
    B4(t33);
    U3.current === false && F2(false);
    (o24 = e32.onBlur) == null ? void 0 : o24.call(e32, t33);
  };
  const createHandleFocus = (e41) => (t41) => {
    var o31;
    v13.current || (v13.current = t41.currentTarget);
    V5(t41);
    if (U3.current === true) {
      var n23;
      F2(true);
      (n23 = e41.onFocusVisible) == null ? void 0 : n23.call(e41, t41);
    }
    (o31 = e41.onFocus) == null ? void 0 : o31.call(e41, t41);
  };
  const C8 = (n17 = s113 != null ? s113 : a114.Root) != null ? n17 : "button";
  const isNonNativeButton = () => {
    const e5 = v13.current;
    return C8 !== "button" && !((e5 == null ? void 0 : e5.tagName) === "A" && e5 != null && e5.href);
  };
  const createHandleMouseDown = (e62) => (t51) => {
    var o4;
    t51.target !== t51.currentTarget || u110 || g15(true);
    (o4 = e62.onMouseDown) == null ? void 0 : o4.call(e62, t51);
  };
  const createHandleMouseUp = (e72) => (t62) => {
    var o52;
    t62.target === t62.currentTarget && g15(false);
    (o52 = e72.onMouseUp) == null ? void 0 : o52.call(e72, t62);
  };
  const createHandleKeyDown = (e82) => (t72) => {
    var o62;
    t72.target === t72.currentTarget && isNonNativeButton() && t72.key === " " && t72.preventDefault();
    t72.target !== t72.currentTarget || t72.key !== " " || u110 || g15(true);
    (o62 = e82.onKeyDown) == null ? void 0 : o62.call(e82, t72);
    if (t72.target === t72.currentTarget && isNonNativeButton() && t72.key === "Enter" && !u110) {
      var n33;
      t72.preventDefault();
      (n33 = e82.onClick) == null ? void 0 : n33.call(e82, t72);
    }
  };
  const createHandleKeyUp = (e92) => (t82) => {
    var o7;
    t82.target === t82.currentTarget && g15(false);
    (o7 = e92.onKeyUp) == null ? void 0 : o7.call(e92, t82);
    if (t82.target === t82.currentTarget && isNonNativeButton() && t82.key === " " && !t82.defaultPrevented) {
      var n41;
      (n41 = e92.onClick) == null ? void 0 : n41.call(e92, t82);
    }
  };
  const N7 = useForkRef(T5, v13);
  const R6 = useForkRef(p17, N7);
  const [D5, k6] = s1("");
  const updateRef = (e102) => {
    var t92;
    k6((t92 = e102 == null ? void 0 : e102.tagName) != null ? t92 : "");
    setRef(R6, e102);
  };
  const M4 = {};
  if (D5 === "BUTTON") {
    M4.type = b19 != null ? b19 : "button";
    M4.disabled = u110;
  } else if (D5 !== "") {
    i110 || d111 || (M4.role = "button");
    u110 && (M4["aria-disabled"] = u110);
  }
  const getRootProps = (o82) => {
    const n51 = extractEventHandlers(t117);
    const s28 = _extends({}, n51, o82);
    const r114 = {
      onBlur: createHandleBlur(s28),
      onFocus: createHandleFocus(s28),
      onKeyDown: createHandleKeyDown(s28),
      onKeyUp: createHandleKeyUp(s28),
      onMouseDown: createHandleMouseDown(s28),
      onMouseLeave: createHandleMouseLeave(s28),
      onMouseUp: createHandleMouseUp(s28)
    };
    const l19 = _extends({}, s28, r114);
    delete l19.onFocusVisible;
    return _extends({
      tabIndex: u110 ? -1 : m17,
      type: b19,
      ref: updateRef
    }, M4, l19);
  };
  return {
    getRootProps,
    focusVisible: h17,
    setFocusVisible: F2,
    disabled: u110,
    active: y15
  };
}
var b3 = [
  "className",
  "component",
  "components",
  "componentsProps",
  "children",
  "disabled",
  "action",
  "onBlur",
  "onClick",
  "onFocus",
  "onFocusVisible",
  "onKeyDown",
  "onKeyUp",
  "onMouseLeave"
];
var useUtilityClasses2 = (e112) => {
  const { active: t102, disabled: o92, focusVisible: n62 } = e112;
  const s31 = {
    root: [
      "root",
      o92 && "disabled",
      n62 && "focusVisible",
      t102 && "active"
    ]
  };
  return composeClasses(s31, getButtonUnstyledUtilityClass, {});
};
var v1 = l1(function ButtonUnstyled(n72, r25) {
  var c111;
  const { className: a22, component: u23, components: i23 = {}, componentsProps: f112 = {}, children: d21, action: v22 } = n72, y16 = _objectWithoutPropertiesLoose(n72, b3);
  const g16 = c1();
  const U4 = useForkRef(g16, r25);
  const { active: V6, focusVisible: B5, setFocusVisible: T6, getRootProps: h18 } = useButton(_extends({}, n72, {
    ref: U4
  }));
  E2(v22, () => ({
    focusVisible: () => {
      T6(true);
      g16.current.focus();
    }
  }), [
    T6
  ]);
  const F3 = _extends({}, n72, {
    active: V6,
    focusVisible: B5
  });
  const C9 = (c111 = u23 != null ? u23 : i23.Root) != null ? c111 : "button";
  const N8 = appendOwnerState(C9, _extends({}, y16, f112.root), F3);
  const R7 = useUtilityClasses2(F3);
  return p4(C9, _extends({}, h18(), N8, {
    className: clsx_m(R7.root, a22, N8.className),
    children: d21
  }));
});
false ? v1.propTypes = {
  action: s2.oneOfType([
    s2.func,
    s2.shape({
      current: s2.shape({
        focusVisible: s2.func.isRequired
      })
    })
  ]),
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  disabled: s2.bool,
  onClick: s2.func,
  onFocusVisible: s2.func
} : void 0;
false ? ClickAwayListener.propTypes = {
  children: i4.isRequired,
  disableReactTree: s2.bool,
  mouseEvent: s2.oneOf([
    "onClick",
    "onMouseDown",
    "onMouseUp",
    false
  ]),
  onClickAway: s2.func.isRequired,
  touchEvent: s2.oneOf([
    "onTouchEnd",
    "onTouchStart",
    false
  ])
} : void 0;
var t6 = t1(void 0);
function useFormControlUnstyled() {
  return r1(t6);
}
var d3 = generateUtilityClasses("MuiFormControl", [
  "root",
  "disabled"
]);
var p5 = [
  "defaultValue",
  "children",
  "className",
  "component",
  "components",
  "componentsProps",
  "disabled",
  "error",
  "focused",
  "onChange",
  "required",
  "value"
];
function hasValue(e29) {
  return e29 != null && !(Array.isArray(e29) && e29.length === 0) && e29 !== "";
}
var f5 = l1(function FormControlUnstyled(t119, i111) {
  var u24;
  const { defaultValue: c113, children: f113, className: b20, component: h20, components: y17 = {}, componentsProps: C10 = {}, disabled: v16 = false, error: g17 = false, focused: F4, onChange: U5, required: N9 = false, value: j7 } = t119, V7 = _objectWithoutPropertiesLoose(t119, p5);
  const [x10, _7] = useControlled({
    controlled: j7,
    default: c113,
    name: "FormControl",
    state: "value"
  });
  const q4 = hasValue(x10);
  const [E9, P] = s1(false);
  v16 && E9 && P(false);
  const T7 = F4 === void 0 || v16 ? E9 : F4;
  const R8 = _extends({}, t119, {
    disabled: v16,
    error: g17,
    filled: q4,
    focused: T7,
    required: N9
  });
  let registerEffect = () => {
  };
  if (false) {
    const e34 = c1(false);
    registerEffect = () => {
      e34.current && console.error([
        "MUI: There are multiple `Input` components inside a FormControl.",
        "This creates visual inconsistencies, only use one `Input`."
      ].join("\n"));
      e34.current = true;
      return () => {
        e34.current = false;
      };
    };
  }
  const handleChange = (e43) => {
    _7(e43.target.value);
    U5 == null ? void 0 : U5(e43);
  };
  const I22 = {
    disabled: v16,
    error: g17,
    filled: q4,
    focused: T7,
    onBlur: () => {
      P(false);
    },
    onChange: handleChange,
    onFocus: () => {
      P(true);
    },
    registerEffect,
    required: N9,
    value: x10 != null ? x10 : ""
  };
  const M5 = (u24 = h20 != null ? h20 : y17.Root) != null ? u24 : "div";
  const A3 = appendOwnerState(M5, _extends({}, V7, C10.root), R8);
  return p4(t6.Provider, {
    value: I22,
    children: p4(M5, _extends({
      ref: i111
    }, A3, {
      className: clsx_m(d3.root, b20, A3 == null ? void 0 : A3.className, v16 && d3.disabled),
      children: f113
    }))
  });
});
false ? f5.propTypes = {
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  defaultValue: s2.any,
  disabled: s2.bool,
  error: s2.bool,
  focused: s2.bool,
  onChange: s2.func,
  required: s2.bool,
  value: s2.any
} : void 0;
var b4 = generateUtilityClasses("MuiInput", [
  "root",
  "formControl",
  "focused",
  "disabled",
  "error",
  "multiline",
  "input",
  "inputMultiline",
  "inputTypeSearch",
  "adornedStart",
  "adornedEnd"
]);
function useInput(o111, t120) {
  const { defaultValue: r116, disabled: l110 = false, error: a115 = false, onBlur: s115, onChange: u111, onFocus: m19, required: f114 = false, value: b110 } = o111;
  const y18 = useFormControlUnstyled();
  let v17;
  let h21;
  let C11;
  let g18;
  if (y18) {
    var w10, x11, I3;
    v17 = y18.value;
    C11 = (w10 = y18.disabled) != null && w10;
    h21 = (x11 = y18.required) != null && x11;
    g18 = (I3 = y18.error) != null && I3;
  } else {
    v17 = b110;
    C11 = l110;
    h21 = f114;
    g18 = a115;
  }
  const { current: R9 } = c1(v17 != null);
  const N10 = u2((e210) => {
    false;
  }, []);
  const U6 = c1(null);
  const F5 = useForkRef(t120, N10);
  const B6 = useForkRef(U6, F5);
  const [E10, T8] = s1(false);
  a1(() => {
    if (!y18 && C11 && E10) {
      T8(false);
      s115 == null ? void 0 : s115();
    }
  }, [
    y18,
    C11,
    E10,
    s115
  ]);
  const handleFocus = (e35) => (o25) => {
    var n19;
    if (y18 != null && y18.disabled)
      o25.stopPropagation();
    else {
      (n19 = e35.onFocus) == null ? void 0 : n19.call(e35, o25);
      if (y18 && y18.onFocus) {
        var t212;
        y18 == null || (t212 = y18.onFocus) == null ? void 0 : t212.call(y18);
      } else
        T8(true);
    }
  };
  const handleBlur = (e44) => (o32) => {
    var n25;
    (n25 = e44.onBlur) == null ? void 0 : n25.call(e44, o32);
    y18 && y18.onBlur ? y18.onBlur() : T8(false);
  };
  const handleChange = (e5) => (o4, ...n34) => {
    var t35, r26;
    if (!R9) {
      const e62 = o4.target || U6.current;
      if (e62 == null)
        throw new Error(false ? "MUI: Expected valid input target. Did you use a custom `components.Input` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(17));
    }
    y18 == null || (t35 = y18.onChange) == null ? void 0 : t35.call(y18, o4);
    (r26 = e5.onChange) == null ? void 0 : r26.call(e5, o4, ...n34);
  };
  const handleClick = (e72) => (o52) => {
    var n42;
    U6.current && o52.currentTarget === o52.target && U6.current.focus();
    (n42 = e72.onClick) == null ? void 0 : n42.call(e72, o52);
  };
  const getRootProps = (n52) => {
    const t43 = extractEventHandlers(o111, [
      "onBlur",
      "onChange",
      "onFocus"
    ]);
    const r33 = _extends({}, t43, extractEventHandlers(n52));
    return _extends({}, n52, r33, {
      onClick: handleClick(r33)
    });
  };
  const getInputProps = (o62) => {
    const n62 = {
      onBlur: s115,
      onChange: u111,
      onFocus: m19
    };
    const t53 = _extends({}, n62, extractEventHandlers(o62));
    const l22 = _extends({}, o62, t53, {
      onBlur: handleBlur(t53),
      onChange: handleChange(t53),
      onFocus: handleFocus(t53)
    });
    return _extends({}, l22, {
      "aria-invalid": g18 || void 0,
      defaultValue: r116,
      ref: B6,
      value: v17,
      required: h21,
      disabled: C11
    });
  };
  return {
    disabled: C11,
    error: g18,
    focused: E10,
    formControlContext: y18,
    getInputProps,
    getRootProps,
    required: h21,
    value: v17
  };
}
var y4 = [
  "aria-describedby",
  "aria-label",
  "aria-labelledby",
  "autoComplete",
  "autoFocus",
  "className",
  "component",
  "components",
  "componentsProps",
  "defaultValue",
  "disabled",
  "endAdornment",
  "error",
  "id",
  "maxRows",
  "minRows",
  "multiline",
  "name",
  "onClick",
  "onChange",
  "onKeyDown",
  "onKeyUp",
  "onFocus",
  "onBlur",
  "placeholder",
  "readOnly",
  "required",
  "rows",
  "type",
  "startAdornment",
  "value"
];
var v2 = l1(function InputUnstyled(n72, r43) {
  var s29, u25, i112, c114, d112;
  const { "aria-describedby": p19, "aria-label": v21, "aria-labelledby": h22, autoComplete: C12, autoFocus: g19, className: w11, component: x12, components: I4 = {}, componentsProps: R10 = {}, defaultValue: N11, disabled: U7, endAdornment: F6, error: B7, id: E11, maxRows: T9, minRows: P, multiline: V8 = false, name: j8, onClick: D6, onChange: k7, onKeyDown: q5, onKeyUp: K22, onFocus: M6, onBlur: O4, placeholder: _8, readOnly: A4, required: S6, rows: L4, type: Y2 = "text", startAdornment: H22, value: W3 } = n72, z5 = _objectWithoutPropertiesLoose(n72, y4);
  const { getRootProps: G2, getInputProps: J22, focused: Q22, formControlContext: X2, error: Z3, disabled: $4 } = useInput({
    disabled: U7,
    defaultValue: N11,
    error: B7,
    onBlur: O4,
    onClick: D6,
    onChange: k7,
    onFocus: M6,
    required: S6,
    value: W3
  }, (s29 = R10.input) == null ? void 0 : s29.ref);
  const ee1 = _extends({}, n72, {
    disabled: $4,
    error: Z3,
    focused: Q22,
    formControlContext: X2,
    multiline: V8,
    type: Y2
  });
  const oe2 = clsx_m($4 && b4.disabled, Z3 && b4.error, Q22 && b4.focused, Boolean(X2) && b4.formControl, V8 && b4.multiline, Boolean(H22) && b4.adornedStart, Boolean(F6) && b4.adornedEnd);
  const ne2 = clsx_m($4 && b4.disabled, V8 && b4.multiline);
  const te1 = {
    "aria-describedby": p19,
    "aria-label": v21,
    "aria-labelledby": h22,
    autoComplete: C12,
    autoFocus: g19,
    id: E11,
    onKeyDown: q5,
    onKeyUp: K22,
    name: j8,
    placeholder: _8,
    readOnly: A4,
    type: Y2
  };
  const re = (u25 = x12 != null ? x12 : I4.Root) != null ? u25 : "div";
  const le2 = appendOwnerState(re, _extends({}, G2(_extends({}, z5, R10.root)), {
    className: clsx_m(b4.root, oe2, w11, (i112 = R10.root) == null ? void 0 : i112.className)
  }), ee1);
  let ae = (c114 = I4.Input) != null ? c114 : "input";
  let se2 = appendOwnerState(ae, _extends({}, J22(_extends({}, R10.input, te1)), {
    className: clsx_m(b4.input, ne2, (d112 = R10.input) == null ? void 0 : d112.className)
  }), ee1);
  if (V8) {
    var ue2, ie;
    const o7 = isHostComponent((ue2 = I4.Textarea) != null ? ue2 : "textarea");
    if (L4) {
      false;
      se2 = _extends({
        type: void 0,
        minRows: o7 ? void 0 : L4,
        maxRows: o7 ? void 0 : L4
      }, se2);
    } else
      se2 = _extends({
        type: void 0,
        maxRows: o7 ? void 0 : T9,
        minRows: o7 ? void 0 : P
      }, se2);
    ae = (ie = I4.Textarea) != null ? ie : "textarea";
  }
  return y3(re, _extends({}, le2, {
    ref: r43,
    children: [
      H22,
      p4(ae, _extends({}, se2)),
      F6
    ]
  }));
});
false ? v2.propTypes = {
  "aria-describedby": s2.string,
  "aria-label": s2.string,
  "aria-labelledby": s2.string,
  autoComplete: s2.string,
  autoFocus: s2.bool,
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Input: s2.elementType,
    Root: s2.elementType,
    Textarea: s2.elementType
  }),
  componentsProps: s2.shape({
    input: s2.object,
    root: s2.object
  }),
  defaultValue: s2.any,
  disabled: s2.bool,
  endAdornment: s2.node,
  error: s2.bool,
  id: s2.string,
  maxRows: s2.number,
  minRows: s2.number,
  multiline: s2.bool,
  name: s2.string,
  onBlur: s2.func,
  onChange: s2.func,
  onClick: s2.func,
  onFocus: s2.func,
  onKeyDown: s2.func,
  onKeyUp: s2.func,
  placeholder: s2.string,
  readOnly: s2.bool,
  required: s2.bool,
  rows: s2.number,
  startAdornment: s2.node,
  type: s2.string,
  value: s2.any
} : void 0;
var t7 = window.ReactDOM;
var c3 = t7;
function getContainer(e120) {
  return typeof e120 === "function" ? e120() : e120;
}
var a7 = l1(function Portal(r117, l111) {
  const { children: p110, container: a116, disablePortal: s30 = false } = r117;
  const [c20, f28] = s1(null);
  const u26 = useForkRef(C2(p110) ? p110.ref : null, l111);
  d2(() => {
    s30 || f28(getContainer(a116) || document.body);
  }, [
    a116,
    s30
  ]);
  d2(() => {
    if (c20 && !s30) {
      setRef(l111, c20);
      return () => {
        setRef(l111, null);
      };
    }
  }, [
    l111,
    c20,
    s30
  ]);
  return s30 ? C2(p110) ? k(p110, {
    ref: u26
  }) : p110 : c20 ? createPortal(p110, c20) : c20;
});
false ? a7.propTypes = {
  children: s2.node,
  container: s2.oneOfType([
    HTMLElementType,
    s2.func
  ]),
  disablePortal: s2.bool
} : void 0;
var a8 = [
  "input",
  "select",
  "textarea",
  "a[href]",
  "button",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  '[contenteditable]:not([contenteditable="false"])'
].join(",");
function getTabIndex(e121) {
  const t121 = parseInt(e121.getAttribute("tabindex"), 10);
  return Number.isNaN(t121) ? e121.contentEditable === "true" || (e121.nodeName === "AUDIO" || e121.nodeName === "VIDEO" || e121.nodeName === "DETAILS") && e121.getAttribute("tabindex") === null ? 0 : e121.tabIndex : t121;
}
function isNonTabbableRadio(e211) {
  if (e211.tagName !== "INPUT" || e211.type !== "radio")
    return false;
  if (!e211.name)
    return false;
  const getRadio = (t36) => e211.ownerDocument.querySelector(`input[type="radio"]${t36}`);
  let t213 = getRadio(`[name="${e211.name}"]:checked`);
  t213 || (t213 = getRadio(`[name="${e211.name}"]`));
  return t213 !== e211;
}
function isNodeMatchingSelectorFocusable(e36) {
  return !(e36.disabled || e36.tagName === "INPUT" && e36.type === "hidden" || isNonTabbableRadio(e36));
}
function defaultGetTabbable(e45) {
  const t44 = [];
  const n110 = [];
  Array.from(e45.querySelectorAll(a8)).forEach((e51, r118) => {
    const o112 = getTabIndex(e51);
    o112 !== -1 && isNodeMatchingSelectorFocusable(e51) && (o112 === 0 ? t44.push(e51) : n110.push({
      documentOrder: r118,
      tabIndex: o112,
      node: e51
    }));
  });
  return n110.sort((e62, t54) => e62.tabIndex === t54.tabIndex ? e62.documentOrder - t54.documentOrder : e62.tabIndex - t54.tabIndex).map((e72) => e72.node).concat(t44);
}
function defaultIsEnabled() {
  return true;
}
function Unstable_TrapFocus(t61) {
  const { children: o26, disableAutoFocus: c115 = false, disableEnforceFocus: a117 = false, disableRestoreFocus: l23 = false, getTabbable: i24 = defaultGetTabbable, isEnabled: d22 = defaultIsEnabled, open: f29 } = t61;
  const b21 = c1();
  const p20 = c1(null);
  const m20 = c1(null);
  const E12 = c1(null);
  const v18 = c1(null);
  const I5 = c1(false);
  const T10 = c1(null);
  const h23 = useForkRef(o26.ref, T10);
  const N12 = c1(null);
  a1(() => {
    f29 && T10.current && (I5.current = !c115);
  }, [
    c115,
    f29
  ]);
  a1(() => {
    if (!f29 || !T10.current)
      return;
    const e82 = ownerDocument(T10.current);
    if (!T10.current.contains(e82.activeElement)) {
      if (!T10.current.hasAttribute("tabIndex")) {
        false;
        T10.current.setAttribute("tabIndex", -1);
      }
      I5.current && T10.current.focus();
    }
    return () => {
      if (!l23) {
        if (E12.current && E12.current.focus) {
          b21.current = true;
          E12.current.focus();
        }
        E12.current = null;
      }
    };
  }, [
    f29
  ]);
  a1(() => {
    if (!f29 || !T10.current)
      return;
    const e92 = ownerDocument(T10.current);
    const contain = (t82) => {
      const { current: n26 } = T10;
      if (n26 !== null)
        if (e92.hasFocus() && !a117 && d22() && !b21.current) {
          if (!n26.contains(e92.activeElement)) {
            if (t82 && v18.current !== t82.target || e92.activeElement !== v18.current)
              v18.current = null;
            else if (v18.current !== null)
              return;
            if (!I5.current)
              return;
            let c22 = [];
            e92.activeElement !== p20.current && e92.activeElement !== m20.current || (c22 = i24(T10.current));
            if (c22.length > 0) {
              var r27, o33;
              const e102 = Boolean(((r27 = N12.current) == null ? void 0 : r27.shiftKey) && ((o33 = N12.current) == null ? void 0 : o33.key) === "Tab");
              const t92 = c22[0];
              const n35 = c22[c22.length - 1];
              e102 ? n35.focus() : t92.focus();
            } else
              n26.focus();
          }
        } else
          b21.current = false;
    };
    const loopFocus = (t102) => {
      N12.current = t102;
      if (!a117 && d22() && t102.key === "Tab" && e92.activeElement === T10.current && t102.shiftKey) {
        b21.current = true;
        m20.current.focus();
      }
    };
    e92.addEventListener("focusin", contain);
    e92.addEventListener("keydown", loopFocus, true);
    const t71 = setInterval(() => {
      e92.activeElement.tagName === "BODY" && contain();
    }, 50);
    return () => {
      clearInterval(t71);
      e92.removeEventListener("focusin", contain);
      e92.removeEventListener("keydown", loopFocus, true);
    };
  }, [
    c115,
    a117,
    l23,
    d22,
    f29,
    i24
  ]);
  const onFocus = (e112) => {
    E12.current === null && (E12.current = e112.relatedTarget);
    I5.current = true;
    v18.current = e112.target;
    const t112 = o26.props.onFocus;
    t112 && t112(e112);
  };
  const handleFocusSentinel = (e122) => {
    E12.current === null && (E12.current = e122.relatedTarget);
    I5.current = true;
  };
  return y3(d, {
    children: [
      p4("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: p20,
        "data-test": "sentinelStart"
      }),
      k(o26, {
        ref: h23,
        onFocus
      }),
      p4("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: m20,
        "data-test": "sentinelEnd"
      })
    ]
  });
}
false ? Unstable_TrapFocus.propTypes = {
  children: i4,
  disableAutoFocus: s2.bool,
  disableEnforceFocus: s2.bool,
  disableRestoreFocus: s2.bool,
  getTabbable: s2.func,
  isEnabled: s2.func,
  open: s2.bool.isRequired
} : void 0;
function isOverflowing(e122) {
  const o113 = ownerDocument(e122);
  return o113.body === e122 ? ownerWindow(e122).innerWidth > o113.documentElement.clientWidth : e122.scrollHeight > e122.clientHeight;
}
function ariaHidden(e212, o27) {
  o27 ? e212.setAttribute("aria-hidden", "true") : e212.removeAttribute("aria-hidden");
}
function getPaddingRight(e37) {
  return parseInt(ownerWindow(e37).getComputedStyle(e37).paddingRight, 10) || 0;
}
function ariaHiddenSiblings(e46, o34, n111, t122 = [], s116) {
  const r119 = [
    o34,
    n111,
    ...t122
  ];
  const i113 = [
    "TEMPLATE",
    "SCRIPT",
    "STYLE"
  ];
  [].forEach.call(e46.children, (e52) => {
    r119.indexOf(e52) === -1 && i113.indexOf(e52.tagName) === -1 && ariaHidden(e52, s116);
  });
}
function findIndexOf(e62, o41) {
  let n27 = -1;
  e62.some((e72, t214) => {
    if (o41(e72)) {
      n27 = t214;
      return true;
    }
    return false;
  });
  return n27;
}
function handleContainer(e82, o52) {
  const n36 = [];
  const t37 = e82.container;
  if (!o52.disableScrollLock) {
    if (isOverflowing(t37)) {
      const e92 = getScrollbarSize(ownerDocument(t37));
      n36.push({
        value: t37.style.paddingRight,
        property: "padding-right",
        el: t37
      });
      t37.style.paddingRight = `${getPaddingRight(t37) + e92}px`;
      const o62 = ownerDocument(t37).querySelectorAll(".mui-fixed");
      [].forEach.call(o62, (o92) => {
        n36.push({
          value: o92.style.paddingRight,
          property: "padding-right",
          el: o92
        });
        o92.style.paddingRight = `${getPaddingRight(o92) + e92}px`;
      });
    }
    const e102 = t37.parentElement;
    const o7 = ownerWindow(t37);
    const s210 = (e102 == null ? void 0 : e102.nodeName) === "HTML" && o7.getComputedStyle(e102).overflowY === "scroll" ? e102 : t37;
    n36.push({
      value: s210.style.overflow,
      property: "overflow",
      el: s210
    }, {
      value: s210.style.overflowX,
      property: "overflow-x",
      el: s210
    }, {
      value: s210.style.overflowY,
      property: "overflow-y",
      el: s210
    });
    s210.style.overflow = "hidden";
  }
  const restore = () => {
    n36.forEach(({ value: e112, el: o10, property: n43 }) => {
      e112 ? o10.style.setProperty(n43, e112) : o10.style.removeProperty(n43);
    });
  };
  return restore;
}
function getHiddenSiblings(e122) {
  const o11 = [];
  [].forEach.call(e122.children, (e13) => {
    e13.getAttribute("aria-hidden") === "true" && o11.push(e13);
  });
  return o11;
}
var ModalManager = class {
  constructor() {
    this.containers = void 0;
    this.modals = void 0;
    this.modals = [];
    this.containers = [];
  }
  add(e14, o12) {
    let n53 = this.modals.indexOf(e14);
    if (n53 !== -1)
      return n53;
    n53 = this.modals.length;
    this.modals.push(e14);
    e14.modalRef && ariaHidden(e14.modalRef, false);
    const t45 = getHiddenSiblings(o12);
    ariaHiddenSiblings(o12, e14.mount, e14.modalRef, t45, true);
    const s32 = findIndexOf(this.containers, (e15) => e15.container === o12);
    if (s32 !== -1) {
      this.containers[s32].modals.push(e14);
      return n53;
    }
    this.containers.push({
      modals: [
        e14
      ],
      container: o12,
      restore: null,
      hiddenSiblings: t45
    });
    return n53;
  }
  mount(e16, o13) {
    const n62 = findIndexOf(this.containers, (o14) => o14.modals.indexOf(e16) !== -1);
    const t55 = this.containers[n62];
    t55.restore || (t55.restore = handleContainer(t55, o13));
  }
  remove(e17) {
    const o15 = this.modals.indexOf(e17);
    if (o15 === -1)
      return o15;
    const n72 = findIndexOf(this.containers, (o16) => o16.modals.indexOf(e17) !== -1);
    const t62 = this.containers[n72];
    t62.modals.splice(t62.modals.indexOf(e17), 1);
    this.modals.splice(o15, 1);
    if (t62.modals.length === 0) {
      t62.restore && t62.restore();
      e17.modalRef && ariaHidden(e17.modalRef, true);
      ariaHiddenSiblings(t62.container, e17.mount, e17.modalRef, t62.hiddenSiblings, false);
      this.containers.splice(n72, 1);
    } else {
      const e18 = t62.modals[t62.modals.length - 1];
      e18.modalRef && ariaHidden(e18.modalRef, false);
    }
    return o15;
  }
  isTopModal(e19) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === e19;
  }
};
function getModalUtilityClass(e20) {
  return generateUtilityClass("MuiModal", e20);
}
generateUtilityClasses("MuiModal", [
  "root",
  "hidden"
]);
var v3 = [
  "BackdropComponent",
  "BackdropProps",
  "children",
  "classes",
  "className",
  "closeAfterTransition",
  "component",
  "components",
  "componentsProps",
  "container",
  "disableAutoFocus",
  "disableEnforceFocus",
  "disableEscapeKeyDown",
  "disablePortal",
  "disableRestoreFocus",
  "disableScrollLock",
  "hideBackdrop",
  "keepMounted",
  "manager",
  "onBackdropClick",
  "onClose",
  "onKeyDown",
  "open",
  "theme",
  "onTransitionEnter",
  "onTransitionExited"
];
var useUtilityClasses3 = (e21) => {
  const { open: o17, exited: n8, classes: t72 } = e21;
  const s41 = {
    root: [
      "root",
      !o17 && n8 && "hidden"
    ]
  };
  return composeClasses(s41, getModalUtilityClass, t72);
};
function getContainer1(e22) {
  return typeof e22 === "function" ? e22() : e22;
}
function getHasTransition(e23) {
  return !!e23.children && e23.children.props.hasOwnProperty("in");
}
var x3 = new ModalManager();
var C22 = l1(function ModalUnstyled(t82, i25) {
  const { BackdropComponent: a118, BackdropProps: u112, children: p111, classes: f115, className: g110, closeAfterTransition: y19 = false, component: R11 = "div", components: C13 = {}, componentsProps: T11 = {}, container: w12, disableAutoFocus: M7 = false, disableEnforceFocus: P = false, disableEscapeKeyDown: S7 = false, disablePortal: F7 = false, disableRestoreFocus: H3 = false, disableScrollLock: O5 = false, hideBackdrop: A5 = false, keepMounted: B8 = false, manager: D7 = x3, onBackdropClick: L5, onClose: N13, onKeyDown: K3, open: I6, theme: U8, onTransitionEnter: j9, onTransitionExited: q6 } = t82, W4 = _objectWithoutPropertiesLoose(t82, v3);
  const [Y3, _9] = s1(true);
  const $5 = c1({});
  const V9 = c1(null);
  const X3 = c1(null);
  const z6 = useForkRef(X3, i25);
  const G3 = getHasTransition(t82);
  const getDoc = () => ownerDocument(V9.current);
  const getModal = () => {
    $5.current.modalRef = X3.current;
    $5.current.mountNode = V9.current;
    return $5.current;
  };
  const handleMounted = () => {
    D7.mount(getModal(), {
      disableScrollLock: O5
    });
    X3.current.scrollTop = 0;
  };
  const J3 = useEventCallback(() => {
    const e24 = getContainer1(w12) || getDoc().body;
    D7.add(getModal(), e24);
    X3.current && handleMounted();
  });
  const Q3 = u2(() => D7.isTopModal(getModal()), [
    D7
  ]);
  const Z4 = useEventCallback((e25) => {
    V9.current = e25;
    e25 && (I6 && Q3() ? handleMounted() : ariaHidden(X3.current, true));
  });
  const ee2 = u2(() => {
    D7.remove(getModal());
  }, [
    D7
  ]);
  a1(() => () => {
    ee2();
  }, [
    ee2
  ]);
  a1(() => {
    I6 ? J3() : G3 && y19 || ee2();
  }, [
    I6,
    ee2,
    G3,
    y19,
    J3
  ]);
  const oe2 = _extends({}, t82, {
    classes: f115,
    closeAfterTransition: y19,
    disableAutoFocus: M7,
    disableEnforceFocus: P,
    disableEscapeKeyDown: S7,
    disablePortal: F7,
    disableRestoreFocus: H3,
    disableScrollLock: O5,
    exited: Y3,
    hideBackdrop: A5,
    keepMounted: B8
  });
  const ne2 = useUtilityClasses3(oe2);
  if (!B8 && !I6 && (!G3 || Y3))
    return null;
  const handleEnter = () => {
    _9(false);
    j9 && j9();
  };
  const handleExited = () => {
    _9(true);
    q6 && q6();
    y19 && ee2();
  };
  const handleBackdropClick = (e26) => {
    if (e26.target === e26.currentTarget) {
      L5 && L5(e26);
      N13 && N13(e26, "backdropClick");
    }
  };
  const handleKeyDown1 = (e27) => {
    K3 && K3(e27);
    if (e27.key === "Escape" && Q3() && !S7) {
      e27.stopPropagation();
      N13 && N13(e27, "escapeKeyDown");
    }
  };
  const te22 = {};
  p111.props.tabIndex === void 0 && (te22.tabIndex = "-1");
  if (G3) {
    te22.onEnter = createChainedFunction(handleEnter, p111.props.onEnter);
    te22.onExited = createChainedFunction(handleExited, p111.props.onExited);
  }
  const se2 = C13.Root || R11;
  const re = T11.root || {};
  return p4(a7, {
    ref: Z4,
    container: w12,
    disablePortal: F7,
    children: y3(se2, _extends({
      role: "presentation"
    }, re, !isHostComponent(se2) && {
      as: R11,
      ownerState: _extends({}, oe2, re.ownerState),
      theme: U8
    }, W4, {
      ref: z6,
      onKeyDown: handleKeyDown1,
      className: clsx_m(ne2.root, re.className, g110),
      children: [
        !A5 && a118 ? p4(a118, _extends({
          open: I6,
          onClick: handleBackdropClick
        }, u112)) : null,
        p4(Unstable_TrapFocus, {
          disableEnforceFocus: P,
          disableAutoFocus: M7,
          disableRestoreFocus: H3,
          isEnabled: Q3,
          open: I6,
          children: k(p111, te22)
        })
      ]
    }))
  });
});
false ? C22.propTypes = {
  BackdropComponent: s2.elementType,
  BackdropProps: s2.object,
  children: i4.isRequired,
  classes: s2.object,
  className: s2.string,
  closeAfterTransition: s2.bool,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  container: s2.oneOfType([
    HTMLElementType,
    s2.func
  ]),
  disableAutoFocus: s2.bool,
  disableEnforceFocus: s2.bool,
  disableEscapeKeyDown: s2.bool,
  disablePortal: s2.bool,
  disableRestoreFocus: s2.bool,
  disableScrollLock: s2.bool,
  hideBackdrop: s2.bool,
  keepMounted: s2.bool,
  onBackdropClick: s2.func,
  onClose: s2.func,
  onKeyDown: s2.func,
  open: s2.bool.isRequired
} : void 0;
false ? NoSsr.propTypes = {
  children: s2.node,
  defer: s2.bool,
  fallback: s2.node
} : void 0;
function getNodeName(e30) {
  return e30 ? (e30.nodeName || "").toLowerCase() : null;
}
function getWindow(n28) {
  if (n28 == null)
    return window;
  if (n28.toString() !== "[object Window]") {
    var t30 = n28.ownerDocument;
    return t30 && t30.defaultView || window;
  }
  return n28;
}
function isElement(e38) {
  var t38 = getWindow(e38).Element;
  return e38 instanceof t38 || e38 instanceof Element;
}
function isHTMLElement(e39) {
  var t39 = getWindow(e39).HTMLElement;
  return e39 instanceof t39 || e39 instanceof HTMLElement;
}
function isShadowRoot(e40) {
  if (typeof ShadowRoot === "undefined")
    return false;
  var t40 = getWindow(e40).ShadowRoot;
  return e40 instanceof t40 || e40 instanceof ShadowRoot;
}
var r6 = "top";
var a9 = "bottom";
var e6 = "right";
var v4 = "left";
var t8 = "auto";
var n6 = [
  r6,
  a9,
  e6,
  v4
];
var o5 = "start";
var c4 = "end";
var i6 = "clippingParents";
var f6 = "viewport";
var p6 = "popper";
var u4 = "reference";
var d4 = n6.reduce(function(r120, a119) {
  return r120.concat([
    a119 + "-" + o5,
    a119 + "-" + c4
  ]);
}, []);
var b5 = [].concat(n6, [
  t8
]).reduce(function(r28, a24) {
  return r28.concat([
    a24,
    a24 + "-" + o5,
    a24 + "-" + c4
  ]);
}, []);
var g3 = "beforeRead";
var l6 = "read";
var m4 = "afterRead";
var s6 = "beforeMain";
var w3 = "main";
var M1 = "afterMain";
var R2 = "beforeWrite";
var W1 = "write";
var h4 = "afterWrite";
var x4 = [
  g3,
  l6,
  m4,
  s6,
  w3,
  M1,
  R2,
  W1,
  h4
];
function getBasePlacement(e47) {
  return e47.split("-")[0];
}
var a10 = Math.max;
var r7 = Math.min;
var t9 = Math.round;
function getBoundingClientRect(i26, o20) {
  o20 === void 0 && (o20 = false);
  var r29 = i26.getBoundingClientRect();
  var n29 = 1;
  var f31 = 1;
  if (isHTMLElement(i26) && o20) {
    var g20 = i26.offsetHeight;
    var h24 = i26.offsetWidth;
    h24 > 0 && (n29 = t9(r29.width) / h24 || 1);
    g20 > 0 && (f31 = t9(r29.height) / g20 || 1);
  }
  return {
    width: r29.width / n29,
    height: r29.height / f31,
    top: r29.top / f31,
    right: r29.right / n29,
    bottom: r29.bottom / f31,
    left: r29.left / n29,
    x: r29.left / n29,
    y: r29.top / f31
  };
}
function getLayoutRect(e48) {
  var i27 = getBoundingClientRect(e48);
  var o28 = e48.offsetWidth;
  var f32 = e48.offsetHeight;
  Math.abs(i27.width - o28) <= 1 && (o28 = i27.width);
  Math.abs(i27.height - f32) <= 1 && (f32 = i27.height);
  return {
    x: e48.offsetLeft,
    y: e48.offsetTop,
    width: o28,
    height: f32
  };
}
function contains(o29, e49) {
  var n30 = e49.getRootNode && e49.getRootNode();
  if (o29.contains(e49))
    return true;
  if (n30 && isShadowRoot(n30)) {
    var r30 = e49;
    do {
      if (r30 && o29.isSameNode(r30))
        return true;
      r30 = r30.parentNode || r30.host;
    } while (r30);
  }
  return false;
}
function getComputedStyle(e50) {
  return getWindow(e50).getComputedStyle(e50);
}
function getDocumentElement(t46) {
  return ((isElement(t46) ? t46.ownerDocument : t46.document) || window.document).documentElement;
}
function getParentNode(n37) {
  return getNodeName(n37) === "html" ? n37 : n37.assignedSlot || n37.parentNode || (isShadowRoot(n37) ? n37.host : null) || getDocumentElement(n37);
}
function isTableElement(e124) {
  return [
    "table",
    "td",
    "th"
  ].indexOf(getNodeName(e124)) >= 0;
}
function getTrueOffsetParent(e213) {
  return isHTMLElement(e213) && getComputedStyle(e213).position !== "fixed" ? e213.offsetParent : null;
}
function getContainingBlock(e310) {
  var o30 = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var f33 = navigator.userAgent.indexOf("Trident") !== -1;
  if (f33 && isHTMLElement(e310)) {
    var a25 = getComputedStyle(e310);
    if (a25.position === "fixed")
      return null;
  }
  var s33 = getParentNode(e310);
  while (isHTMLElement(s33) && [
    "html",
    "body"
  ].indexOf(getNodeName(s33)) < 0) {
    var l24 = getComputedStyle(s33);
    if (l24.transform !== "none" || l24.perspective !== "none" || l24.contain === "paint" || [
      "transform",
      "perspective"
    ].indexOf(l24.willChange) !== -1 || o30 && l24.willChange === "filter" || o30 && l24.filter && l24.filter !== "none")
      return s33;
    s33 = s33.parentNode;
  }
  return null;
}
function getOffsetParent(r121) {
  var i114 = getWindow(r121);
  var o35 = getTrueOffsetParent(r121);
  while (o35 && isTableElement(o35) && getComputedStyle(o35).position === "static")
    o35 = getTrueOffsetParent(o35);
  return o35 && (getNodeName(o35) === "html" || getNodeName(o35) === "body" && getComputedStyle(o35).position === "static") ? i114 : o35 || getContainingBlock(r121) || i114;
}
function getMainAxisFromPlacement(t47) {
  return [
    "top",
    "bottom"
  ].indexOf(t47) >= 0 ? "x" : "y";
}
function within(n38, t48, r34) {
  return a10(n38, r7(t48, r34));
}
function withinMaxClamp(i115, a120, n39) {
  var t49 = within(i115, a120, n39);
  return t49 > n39 ? n39 : t49;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(e53) {
  return Object.assign({}, getFreshSideObject(), e53);
}
function expandToHashMap(e54, t123) {
  return t123.reduce(function(t50, n40) {
    t50[n40] = e54;
    return t50;
  }, {});
}
function getVariation(t56) {
  return t56.split("-")[1];
}
var t10 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(e125) {
  return e125.replace(/left|right|bottom|top/g, function(e55) {
    return t10[e55];
  });
}
var t11 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(e126) {
  return e126.replace(/start|end/g, function(e56) {
    return t11[e56];
  });
}
function getWindowScroll(r35) {
  var e57 = getWindow(r35);
  var t57 = e57.pageXOffset;
  var l25 = e57.pageYOffset;
  return {
    scrollLeft: t57,
    scrollTop: l25
  };
}
function getWindowScrollBarX(r36) {
  return getBoundingClientRect(getDocumentElement(r36)).left + getWindowScroll(r36).scrollLeft;
}
function getViewportRect(r37) {
  var o36 = getWindow(r37);
  var n44 = getDocumentElement(r37);
  var a26 = o36.visualViewport;
  var s34 = n44.clientWidth;
  var f34 = n44.clientHeight;
  var g21 = 0;
  var m22 = 0;
  if (a26) {
    s34 = a26.width;
    f34 = a26.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      g21 = a26.offsetLeft;
      m22 = a26.offsetTop;
    }
  }
  return {
    width: s34,
    height: f34,
    x: g21 + getWindowScrollBarX(r37),
    y: m22
  };
}
function getDocumentRect(l26) {
  var n45;
  var c24 = getDocumentElement(l26);
  var m23 = getWindowScroll(l26);
  var s35 = (n45 = l26.ownerDocument) == null ? void 0 : n45.body;
  var d23 = a10(c24.scrollWidth, c24.clientWidth, s35 ? s35.scrollWidth : 0, s35 ? s35.clientWidth : 0);
  var a27 = a10(c24.scrollHeight, c24.clientHeight, s35 ? s35.scrollHeight : 0, s35 ? s35.clientHeight : 0);
  var g22 = -m23.scrollLeft + getWindowScrollBarX(l26);
  var h25 = -m23.scrollTop;
  getComputedStyle(s35 || c24).direction === "rtl" && (g22 += a10(c24.clientWidth, s35 ? s35.clientWidth : 0) - d23);
  return {
    width: d23,
    height: a27,
    x: g22,
    y: h25
  };
}
function isScrollParent(r38) {
  var e58 = getComputedStyle(r38), t58 = e58.overflow, l27 = e58.overflowX, a28 = e58.overflowY;
  return /auto|scroll|overlay|hidden/.test(t58 + a28 + l27);
}
function getScrollParent(n112) {
  return [
    "html",
    "body",
    "#document"
  ].indexOf(getNodeName(n112)) >= 0 ? n112.ownerDocument.body : isHTMLElement(n112) && isScrollParent(n112) ? n112 : getScrollParent(getParentNode(n112));
}
function listScrollParents(r122, e127) {
  var l28;
  e127 === void 0 && (e127 = []);
  var a29 = getScrollParent(r122);
  var c25 = a29 === ((l28 = r122.ownerDocument) == null ? void 0 : l28.body);
  var i28 = getWindow(a29);
  var m24 = c25 ? [
    i28
  ].concat(i28.visualViewport || [], isScrollParent(a29) ? a29 : []) : a29;
  var s36 = e127.concat(m24);
  return c25 ? s36 : s36.concat(listScrollParents(getParentNode(m24)));
}
function rectToClientRect(t124) {
  return Object.assign({}, t124, {
    left: t124.x,
    top: t124.y,
    right: t124.x + t124.width,
    bottom: t124.y + t124.height
  });
}
function getInnerBoundingClientRect(t215) {
  var e128 = getBoundingClientRect(t215);
  e128.top = e128.top + t215.clientTop;
  e128.left = e128.left + t215.clientLeft;
  e128.bottom = e128.top + t215.clientHeight;
  e128.right = e128.left + t215.clientWidth;
  e128.width = t215.clientWidth;
  e128.height = t215.clientHeight;
  e128.x = e128.left;
  e128.y = e128.top;
  return e128;
}
function getClientRectFromMixedType(o114, r123) {
  return r123 === f6 ? rectToClientRect(getViewportRect(o114)) : isElement(r123) ? getInnerBoundingClientRect(r123) : rectToClientRect(getDocumentRect(getDocumentElement(o114)));
}
function getClippingParents(t310) {
  var e214 = listScrollParents(getParentNode(t310));
  var i116 = [
    "absolute",
    "fixed"
  ].indexOf(getComputedStyle(t310).position) >= 0;
  var n113 = i116 && isHTMLElement(t310) ? getOffsetParent(t310) : t310;
  return isElement(n113) ? e214.filter(function(t410) {
    return isElement(t410) && contains(t410, n113) && getNodeName(t410) !== "body";
  }) : [];
}
function getClippingRect(t59, e311, i29) {
  var o210 = e311 === "clippingParents" ? getClippingParents(t59) : [].concat(e311);
  var r210 = [].concat(o210, [
    i29
  ]);
  var n210 = r210[0];
  var l112 = r210.reduce(function(e410, i32) {
    var o37 = getClientRectFromMixedType(t59, i32);
    e410.top = a10(o37.top, e410.top);
    e410.right = r7(o37.right, e410.right);
    e410.bottom = r7(o37.bottom, e410.bottom);
    e410.left = a10(o37.left, e410.left);
    return e410;
  }, getClientRectFromMixedType(t59, n210));
  l112.width = l112.right - l112.left;
  l112.height = l112.bottom - l112.top;
  l112.x = l112.left;
  l112.y = l112.top;
  return l112;
}
function computeOffsets(f35) {
  var m25 = f35.reference, n46 = f35.element, o38 = f35.placement;
  var u27 = o38 ? getBasePlacement(o38) : null;
  var x13 = o38 ? getVariation(o38) : null;
  var d24 = m25.x + m25.width / 2 - n46.width / 2;
  var y20 = m25.y + m25.height / 2 - n46.height / 2;
  var b22;
  switch (u27) {
    case r6:
      b22 = {
        x: d24,
        y: m25.y - n46.height
      };
      break;
    case a9:
      b22 = {
        x: d24,
        y: m25.y + m25.height
      };
      break;
    case e6:
      b22 = {
        x: m25.x + m25.width,
        y: y20
      };
      break;
    case v4:
      b22 = {
        x: m25.x - n46.width,
        y: y20
      };
      break;
    default:
      b22 = {
        x: m25.x,
        y: m25.y
      };
  }
  var g23 = u27 ? getMainAxisFromPlacement(u27) : null;
  if (g23 != null) {
    var p23 = g23 === "y" ? "height" : "width";
    switch (x13) {
      case o5:
        b22[g23] = b22[g23] - (m25[p23] / 2 - n46[p23] / 2);
        break;
      case c4:
        b22[g23] = b22[g23] + (m25[p23] / 2 - n46[p23] / 2);
        break;
      default:
    }
  }
  return b22;
}
function detectOverflow(v19, g24) {
  g24 === void 0 && (g24 = {});
  var b23 = g24, y21 = b23.placement, O6 = y21 === void 0 ? v19.placement : y21, x14 = b23.boundary, _10 = x14 === void 0 ? i6 : x14, w13 = b23.rootBoundary, h26 = w13 === void 0 ? f6 : w13, P = b23.elementContext, S8 = P === void 0 ? p6 : P, B9 = b23.altBoundary, C14 = B9 !== void 0 && B9, D8 = b23.padding, E13 = D8 === void 0 ? 0 : D8;
  var N14 = mergePaddingObject(typeof E13 !== "number" ? E13 : expandToHashMap(E13, n6));
  var R12 = S8 === p6 ? u4 : p6;
  var W5 = v19.rects.popper;
  var k8 = v19.elements[C14 ? R12 : S8];
  var A6 = getClippingRect(isElement(k8) ? k8 : k8.contextElement || getDocumentElement(v19.elements.popper), _10, h26);
  var F8 = getBoundingClientRect(v19.elements.reference);
  var M8 = computeOffsets({
    reference: F8,
    element: W5,
    strategy: "absolute",
    placement: O6
  });
  var V10 = rectToClientRect(Object.assign({}, W5, M8));
  var X4 = S8 === p6 ? V10 : F8;
  var q7 = {
    top: A6.top - X4.top + N14.top,
    bottom: X4.bottom - A6.bottom + N14.bottom,
    left: A6.left - X4.left + N14.left,
    right: X4.right - A6.right + N14.right
  };
  var z7 = v19.modifiersData.offset;
  if (S8 === p6 && z7) {
    var G4 = z7[O6];
    Object.keys(q7).forEach(function(t125) {
      var e129 = [
        e6,
        a9
      ].indexOf(t125) >= 0 ? 1 : -1;
      var o115 = [
        r6,
        a9
      ].indexOf(t125) >= 0 ? "y" : "x";
      q7[t125] += G4[o115] * e129;
    });
  }
  return q7;
}
function computeAutoPlacement(m26, n47) {
  n47 === void 0 && (n47 = {});
  var l29 = n47, a30 = l29.placement, d25 = l29.boundary, u28 = l29.rootBoundary, p24 = l29.padding, c26 = l29.flipVariations, j10 = l29.allowedAutoPlacements, f36 = j10 === void 0 ? b5 : j10;
  var g25 = getVariation(a30);
  var v20 = g25 ? c26 ? d4 : d4.filter(function(o116) {
    return getVariation(o116) === g25;
  }) : n6;
  var w14 = v20.filter(function(t126) {
    return f36.indexOf(t126) >= 0;
  });
  if (w14.length === 0) {
    w14 = v20;
    false;
  }
  var P = w14.reduce(function(t216, o211) {
    t216[o211] = detectOverflow(m26, {
      placement: o211,
      boundary: d25,
      rootBoundary: u28,
      padding: p24
    })[getBasePlacement(o211)];
    return t216;
  }, {});
  return Object.keys(P).sort(function(t311, o39) {
    return P[t311] - P[o39];
  });
}
function applyStyles(s118) {
  var r39 = s118.state;
  Object.keys(r39.elements).forEach(function(s211) {
    var a31 = r39.styles[s211] || {};
    var o40 = r39.attributes[s211] || {};
    var n48 = r39.elements[s211];
    if (isHTMLElement(n48) && getNodeName(n48)) {
      Object.assign(n48.style, a31);
      Object.keys(o40).forEach(function(e130) {
        var t127 = o40[e130];
        t127 === false ? n48.removeAttribute(e130) : n48.setAttribute(e130, t127 === true ? "" : t127);
      });
    }
  });
}
function effect(s37) {
  var r40 = s37.state;
  var a32 = {
    popper: {
      position: r40.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(r40.elements.popper.style, a32.popper);
  r40.styles = a32;
  r40.elements.arrow && Object.assign(r40.elements.arrow.style, a32.arrow);
  return function() {
    Object.keys(r40.elements).forEach(function(s42) {
      var o42 = r40.elements[s42];
      var n49 = r40.attributes[s42] || {};
      var i30 = Object.keys(r40.styles.hasOwnProperty(s42) ? r40.styles[s42] : a32[s42]);
      var l30 = i30.reduce(function(e215, t217) {
        e215[t217] = "";
        return e215;
      }, {});
      if (isHTMLElement(o42) && getNodeName(o42)) {
        Object.assign(o42.style, l30);
        Object.keys(n49).forEach(function(e312) {
          o42.removeAttribute(e312);
        });
      }
    });
  };
}
var s7 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: [
    "computeStyles"
  ]
};
var u5 = function toPaddingObject(e131, r124) {
  e131 = typeof e131 === "function" ? e131(Object.assign({}, r124.rects, {
    placement: r124.placement
  })) : e131;
  return mergePaddingObject(typeof e131 !== "number" ? e131 : expandToHashMap(e131, n6));
};
function arrow(t128) {
  var i117;
  var n114 = t128.state, m110 = t128.name, d113 = t128.options;
  var v110 = n114.elements.arrow;
  var j11 = n114.modifiersData.popperOffsets;
  var g26 = getBasePlacement(n114.placement);
  var w15 = getMainAxisFromPlacement(g26);
  var O7 = [
    v4,
    e6
  ].indexOf(g26) >= 0;
  var h27 = O7 ? "height" : "width";
  if (v110 && j11) {
    var y22 = u5(d113.padding, n114);
    var E14 = getLayoutRect(v110);
    var b24 = w15 === "y" ? r6 : v4;
    var N15 = w15 === "y" ? a9 : e6;
    var _11 = n114.rects.reference[h27] + n114.rects.reference[w15] - j11[w15] - n114.rects.popper[h27];
    var P = j11[w15] - n114.rects.reference[w15];
    var D9 = getOffsetParent(v110);
    var x15 = D9 ? w15 === "y" ? D9.clientHeight || 0 : D9.clientWidth || 0 : 0;
    var S9 = _11 / 2 - P / 2;
    var V11 = y22[b24];
    var q8 = x15 - E14[h27] - y22[N15];
    var H4 = x15 / 2 - E14[h27] / 2 + S9;
    var L6 = within(V11, H4, q8);
    var M9 = w15;
    n114.modifiersData[m110] = (i117 = {}, i117[M9] = L6, i117.centerOffset = L6 - H4, i117);
  }
}
function effect1(e216) {
  var r211 = e216.state, o117 = e216.options;
  var a121 = o117.element, s119 = a121 === void 0 ? "[data-popper-arrow]" : a121;
  if (s119 != null) {
    if (typeof s119 === "string") {
      s119 = r211.elements.popper.querySelector(s119);
      if (!s119)
        return;
    }
    false;
    contains(r211.elements.popper, s119) ? r211.elements.arrow = s119 : false;
  }
}
var v5 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect1,
  requires: [
    "popperOffsets"
  ],
  requiresIfExists: [
    "preventOverflow"
  ]
};
var d5 = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(t129) {
  var e132 = t129.x, o118 = t129.y;
  var r125 = window;
  var i118 = r125.devicePixelRatio || 1;
  return {
    x: t9(e132 * i118) / i118 || 0,
    y: t9(o118 * i118) / i118 || 0
  };
}
function mapToStyles(f116) {
  var l113;
  var m111 = f116.popper, c116 = f116.popperRect, u29 = f116.placement, v22 = f116.variation, y23 = f116.offsets, g27 = f116.position, h28 = f116.gpuAcceleration, x16 = f116.adaptive, O8 = f116.roundOffsets, w16 = f116.isFixed;
  var b25 = y23.x, j12 = b25 === void 0 ? 0 : b25, S10 = y23.y, D10 = S10 === void 0 ? 0 : S10;
  var P = typeof O8 === "function" ? O8({
    x: j12,
    y: D10
  }) : {
    x: j12,
    y: D10
  };
  j12 = P.x;
  D10 = P.y;
  var R13 = y23.hasOwnProperty("x");
  var C15 = y23.hasOwnProperty("y");
  var N16 = v4;
  var V12 = r6;
  var W6 = window;
  if (x16) {
    var T12 = getOffsetParent(m111);
    var _12 = "clientHeight";
    var A7 = "clientWidth";
    if (T12 === getWindow(m111)) {
      T12 = getDocumentElement(m111);
      if (getComputedStyle(T12).position !== "static" && g27 === "absolute") {
        _12 = "scrollHeight";
        A7 = "scrollWidth";
      }
    }
    T12 = T12;
    if (u29 === r6 || (u29 === v4 || u29 === e6) && v22 === c4) {
      V12 = a9;
      var E15 = w16 && W6.visualViewport ? W6.visualViewport.height : T12[_12];
      D10 -= E15 - c116.height;
      D10 *= h28 ? 1 : -1;
    }
    if (u29 === v4 || (u29 === r6 || u29 === a9) && v22 === c4) {
      N16 = e6;
      var B10 = w16 && W6.visualViewport ? W6.visualViewport.width : T12[A7];
      j12 -= B10 - c116.width;
      j12 *= h28 ? 1 : -1;
    }
  }
  var F9 = Object.assign({
    position: g27
  }, x16 && d5);
  var H5 = O8 === true ? roundOffsetsByDPR({
    x: j12,
    y: D10
  }) : {
    x: j12,
    y: D10
  };
  j12 = H5.x;
  D10 = H5.y;
  if (h28) {
    var k9;
    return Object.assign({}, F9, (k9 = {}, k9[V12] = C15 ? "0" : "", k9[N16] = R13 ? "0" : "", k9.transform = (W6.devicePixelRatio || 1) <= 1 ? "translate(" + j12 + "px, " + D10 + "px)" : "translate3d(" + j12 + "px, " + D10 + "px, 0)", k9));
  }
  return Object.assign({}, F9, (l113 = {}, l113[V12] = C15 ? D10 + "px" : "", l113[N16] = R13 ? j12 + "px" : "", l113.transform = "", l113));
}
function computeStyles(t218) {
  var e217 = t218.state, o212 = t218.options;
  var r212 = o212.gpuAcceleration, i210 = r212 === void 0 || r212, a122 = o212.adaptive, s120 = a122 === void 0 || a122, p112 = o212.roundOffsets, m27 = p112 === void 0 || p112;
  if (false) {
    var d114 = getComputedStyle(e217.elements.popper).transitionProperty || "";
    s120 && [
      "transform",
      "top",
      "right",
      "bottom",
      "left"
    ].some(function(t312) {
      return d114.indexOf(t312) >= 0;
    }) && console.warn([
      "Popper: Detected CSS transitions on at least one of the following",
      'CSS properties: "transform", "top", "right", "bottom", "left".',
      "\n\n",
      'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
      "for smooth transitions, or remove these properties from the CSS",
      "transition declaration on the popper element if only transitioning",
      "opacity or background-color for example.",
      "\n\n",
      "We recommend using the popper element as a wrapper around an inner",
      "element that can have any CSS property transitioned for animations."
    ].join(" "));
  }
  var c27 = {
    placement: getBasePlacement(e217.placement),
    variation: getVariation(e217.placement),
    popper: e217.elements.popper,
    popperRect: e217.rects.popper,
    gpuAcceleration: i210,
    isFixed: e217.options.strategy === "fixed"
  };
  e217.modifiersData.popperOffsets != null && (e217.styles.popper = Object.assign({}, e217.styles.popper, mapToStyles(Object.assign({}, c27, {
    offsets: e217.modifiersData.popperOffsets,
    position: e217.options.strategy,
    adaptive: s120,
    roundOffsets: m27
  }))));
  e217.modifiersData.arrow != null && (e217.styles.arrow = Object.assign({}, e217.styles.arrow, mapToStyles(Object.assign({}, c27, {
    offsets: e217.modifiersData.arrow,
    position: "absolute",
    adaptive: false,
    roundOffsets: m27
  }))));
  e217.attributes.popper = Object.assign({}, e217.attributes.popper, {
    "data-popper-placement": e217.placement
  });
}
var c5 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var t12 = {
  passive: true
};
function effect2(r126) {
  var n50 = r126.state, a33 = r126.instance, o43 = r126.options;
  var s38 = o43.scroll, i33 = s38 === void 0 || s38, c28 = o43.resize, f37 = c28 === void 0 || c28;
  var v23 = getWindow(n50.elements.popper);
  var d26 = [].concat(n50.scrollParents.reference, n50.scrollParents.popper);
  i33 && d26.forEach(function(e133) {
    e133.addEventListener("scroll", a33.update, t12);
  });
  f37 && v23.addEventListener("resize", a33.update, t12);
  return function() {
    i33 && d26.forEach(function(e218) {
      e218.removeEventListener("scroll", a33.update, t12);
    });
    f37 && v23.removeEventListener("resize", a33.update, t12);
  };
}
var r8 = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect2,
  data: {}
};
function getExpandedFallbackPlacements(o119) {
  if (getBasePlacement(o119) === t8)
    return [];
  var i119 = getOppositePlacement(o119);
  return [
    getOppositeVariationPlacement(o119),
    i119,
    getOppositeVariationPlacement(i119)
  ];
}
function flip(r127) {
  var d115 = r127.state, c29 = r127.options, f38 = r127.name;
  if (!d115.modifiersData[f38]._skip) {
    var v24 = c29.mainAxis, j13 = v24 === void 0 || v24, g28 = c29.altAxis, P = g28 === void 0 || g28, b26 = c29.fallbackPlacements, y24 = c29.padding, _13 = c29.boundary, k10 = c29.rootBoundary, w17 = c29.altBoundary, x17 = c29.flipVariations, h29 = x17 === void 0 || x17, B11 = c29.allowedAutoPlacements;
    var A8 = d115.options.placement;
    var O9 = getBasePlacement(A8);
    var S11 = O9 === A8;
    var D11 = b26 || (S11 || !h29 ? [
      getOppositePlacement(A8)
    ] : getExpandedFallbackPlacements(A8));
    var E16 = [
      A8
    ].concat(D11).reduce(function(t130, r213) {
      return t130.concat(getBasePlacement(r213) === t8 ? computeAutoPlacement(d115, {
        placement: r213,
        boundary: _13,
        rootBoundary: k10,
        padding: y24,
        flipVariations: h29,
        allowedAutoPlacements: B11
      }) : r213);
    }, []);
    var V13 = d115.rects.reference;
    var F10 = d115.rects.popper;
    var N17 = /* @__PURE__ */ new Map();
    var R14 = true;
    var W7 = E16[0];
    for (var C16 = 0; C16 < E16.length; C16++) {
      var M10 = E16[C16];
      var q9 = getBasePlacement(M10);
      var I7 = getVariation(M10) === o5;
      var X5 = [
        r6,
        a9
      ].indexOf(q9) >= 0;
      var z8 = X5 ? "width" : "height";
      var G5 = detectOverflow(d115, {
        placement: M10,
        boundary: _13,
        rootBoundary: k10,
        altBoundary: w17,
        padding: y24
      });
      var H6 = X5 ? I7 ? e6 : v4 : I7 ? a9 : r6;
      V13[z8] > F10[z8] && (H6 = getOppositePlacement(H6));
      var J4 = getOppositePlacement(H6);
      var K4 = [];
      j13 && K4.push(G5[q9] <= 0);
      P && K4.push(G5[H6] <= 0, G5[J4] <= 0);
      if (K4.every(function(t219) {
        return t219;
      })) {
        W7 = M10;
        R14 = false;
        break;
      }
      N17.set(M10, K4);
    }
    if (R14) {
      var L7 = h29 ? 3 : 1;
      var Q4 = function _loop(t313) {
        var e134 = E16.find(function(e219) {
          var r310 = N17.get(e219);
          if (r310)
            return r310.slice(0, t313).every(function(t411) {
              return t411;
            });
        });
        if (e134) {
          W7 = e134;
          return "break";
        }
      };
      for (var T13 = L7; T13 > 0; T13--) {
        var U9 = Q4(T13);
        if (U9 === "break")
          break;
      }
    }
    if (d115.placement !== W7) {
      d115.modifiersData[f38]._skip = true;
      d115.placement = W7;
      d115.reset = true;
    }
  }
}
var d6 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: [
    "offset"
  ],
  data: {
    _skip: false
  }
};
function getSideOffsets(e135, t131, i120) {
  i120 === void 0 && (i120 = {
    x: 0,
    y: 0
  });
  return {
    top: e135.top - t131.height - i120.y,
    right: e135.right - t131.width + i120.x,
    bottom: e135.bottom - t131.height + i120.y,
    left: e135.left - t131.width - i120.x
  };
}
function isAnySideFullyClipped(o120) {
  return [
    r6,
    e6,
    a9,
    v4
  ].some(function(e220) {
    return o120[e220] >= 0;
  });
}
function hide(e313) {
  var t220 = e313.state, i211 = e313.name;
  var r128 = t220.rects.reference;
  var s121 = t220.rects.popper;
  var p25 = t220.modifiersData.preventOverflow;
  var m28 = detectOverflow(t220, {
    elementContext: "reference"
  });
  var d27 = detectOverflow(t220, {
    altBoundary: true
  });
  var n54 = getSideOffsets(m28, r128);
  var l32 = getSideOffsets(d27, s121, p25);
  var a34 = isAnySideFullyClipped(n54);
  var u30 = isAnySideFullyClipped(l32);
  t220.modifiersData[i211] = {
    referenceClippingOffsets: n54,
    popperEscapeOffsets: l32,
    isReferenceHidden: a34,
    hasPopperEscaped: u30
  };
  t220.attributes.popper = Object.assign({}, t220.attributes.popper, {
    "data-popper-reference-hidden": a34,
    "data-popper-escaped": u30
  });
}
var s8 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: [
    "preventOverflow"
  ],
  fn: hide
};
function distanceAndSkiddingToXY(a123, i121, s39) {
  var r44 = getBasePlacement(a123);
  var o44 = [
    v4,
    r6
  ].indexOf(r44) >= 0 ? -1 : 1;
  var d28 = typeof s39 === "function" ? s39(Object.assign({}, i121, {
    placement: a123
  })) : s39, p26 = d28[0], c30 = d28[1];
  p26 = p26 || 0;
  c30 = (c30 || 0) * o44;
  return [
    v4,
    e6
  ].indexOf(r44) >= 0 ? {
    x: c30,
    y: p26
  } : {
    x: p26,
    y: c30
  };
}
function offset(e136) {
  var t132 = e136.state, f117 = e136.options, n115 = e136.name;
  var i212 = f117.offset, s40 = i212 === void 0 ? [
    0,
    0
  ] : i212;
  var r45 = b5.reduce(function(e221, f210) {
    e221[f210] = distanceAndSkiddingToXY(f210, t132.rects, s40);
    return e221;
  }, {});
  var o45 = r45[t132.placement], d29 = o45.x, p27 = o45.y;
  if (t132.modifiersData.popperOffsets != null) {
    t132.modifiersData.popperOffsets.x += d29;
    t132.modifiersData.popperOffsets.y += p27;
  }
  t132.modifiersData[n115] = r45;
}
var i7 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: [
    "popperOffsets"
  ],
  fn: offset
};
function popperOffsets(t133) {
  var r46 = t133.state, s43 = t133.name;
  r46.modifiersData[s43] = computeOffsets({
    reference: r46.rects.reference,
    element: r46.rects.popper,
    strategy: "absolute",
    placement: r46.placement
  });
}
var t13 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(r129) {
  return r129 === "x" ? "y" : "x";
}
function preventOverflow(j12) {
  var g29 = j12.state, x18 = j12.options, w18 = j12.name;
  var y25 = x18.mainAxis, A9 = y25 === void 0 || y25, h30 = x18.altAxis, O10 = h30 !== void 0 && h30, D12 = x18.boundary, _14 = x18.rootBoundary, b27 = x18.altBoundary, B12 = x18.padding, P = x18.tether, S12 = P === void 0 || P, R15 = x18.tetherOffset, N18 = R15 === void 0 ? 0 : R15;
  var W8 = detectOverflow(g29, {
    boundary: D12,
    rootBoundary: _14,
    padding: B12,
    altBoundary: b27
  });
  var C17 = getBasePlacement(g29.placement);
  var E17 = getVariation(g29.placement);
  var L8 = !E17;
  var q10 = getMainAxisFromPlacement(C17);
  var F11 = getAltAxis(q10);
  var I8 = g29.modifiersData.popperOffsets;
  var M11 = g29.rects.reference;
  var T14 = g29.rects.popper;
  var V14 = typeof N18 === "function" ? N18(Object.assign({}, g29.rects, {
    placement: g29.placement
  })) : N18;
  var X6 = typeof V14 === "number" ? {
    mainAxis: V14,
    altAxis: V14
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, V14);
  var k11 = g29.modifiersData.offset ? g29.modifiersData.offset[g29.placement] : null;
  var z9 = {
    x: 0,
    y: 0
  };
  if (I8) {
    if (A9) {
      var G6;
      var H7 = q10 === "y" ? r6 : v4;
      var J5 = q10 === "y" ? a9 : e6;
      var K5 = q10 === "y" ? "height" : "width";
      var Q5 = I8[q10];
      var U10 = Q5 + W8[H7];
      var Y4 = Q5 - W8[J5];
      var Z5 = S12 ? -T14[K5] / 2 : 0;
      var $6 = E17 === o5 ? M11[K5] : T14[K5];
      var rr = E17 === o5 ? -T14[K5] : -M11[K5];
      var tr = g29.elements.arrow;
      var er = S12 && tr ? getLayoutRect(tr) : {
        width: 0,
        height: 0
      };
      var ar = g29.modifiersData["arrow#persistent"] ? g29.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var ir = ar[H7];
      var or = ar[J5];
      var sr = within(0, M11[K5], er[K5]);
      var mr = L8 ? M11[K5] / 2 - Z5 - sr - ir - X6.mainAxis : $6 - sr - ir - X6.mainAxis;
      var nr = L8 ? -M11[K5] / 2 + Z5 + sr + or + X6.mainAxis : rr + sr + or + X6.mainAxis;
      var lr = g29.elements.arrow && getOffsetParent(g29.elements.arrow);
      var vr = lr ? q10 === "y" ? lr.clientTop || 0 : lr.clientLeft || 0 : 0;
      var dr = (G6 = k11 == null ? void 0 : k11[q10]) != null ? G6 : 0;
      var pr = Q5 + mr - dr - vr;
      var fr = Q5 + nr - dr;
      var ur = within(S12 ? r7(U10, pr) : U10, Q5, S12 ? a10(Y4, fr) : Y4);
      I8[q10] = ur;
      z9[q10] = ur - Q5;
    }
    if (O10) {
      var cr;
      var jr = q10 === "x" ? r6 : v4;
      var gr = q10 === "x" ? a9 : e6;
      var xr = I8[F11];
      var wr = F11 === "y" ? "height" : "width";
      var yr = xr + W8[jr];
      var Ar = xr - W8[gr];
      var hr = [
        r6,
        v4
      ].indexOf(C17) !== -1;
      var Or = (cr = k11 == null ? void 0 : k11[F11]) != null ? cr : 0;
      var Dr = hr ? yr : xr - M11[wr] - T14[wr] - Or + X6.altAxis;
      var _r = hr ? xr + M11[wr] + T14[wr] - Or - X6.altAxis : Ar;
      var br = S12 && hr ? withinMaxClamp(Dr, xr, _r) : within(S12 ? Dr : yr, xr, S12 ? _r : Ar);
      I8[F11] = br;
      z9[F11] = br - xr;
    }
    g29.modifiersData[w18] = z9;
  }
}
var j1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: [
    "offset"
  ]
};
function getHTMLElementScroll(l33) {
  return {
    scrollLeft: l33.scrollLeft,
    scrollTop: l33.scrollTop
  };
}
function getNodeScroll(l34) {
  return l34 !== getWindow(l34) && isHTMLElement(l34) ? getHTMLElementScroll(l34) : getWindowScroll(l34);
}
function isElementScaled(t134) {
  var e137 = t134.getBoundingClientRect();
  var o121 = t9(e137.width) / t134.offsetWidth || 1;
  var r130 = t9(e137.height) / t134.offsetHeight || 1;
  return o121 !== 1 || r130 !== 1;
}
function getCompositeRect(s122, n55, f39) {
  f39 === void 0 && (f39 = false);
  var c31 = isHTMLElement(n55);
  var p28 = isHTMLElement(n55) && isElementScaled(n55);
  var a35 = getDocumentElement(n55);
  var g30 = getBoundingClientRect(s122, p28);
  var d30 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var j14 = {
    x: 0,
    y: 0
  };
  if (c31 || !c31 && !f39) {
    (getNodeName(n55) !== "body" || isScrollParent(a35)) && (d30 = getNodeScroll(n55));
    if (isHTMLElement(n55)) {
      j14 = getBoundingClientRect(n55, true);
      j14.x += n55.clientLeft;
      j14.y += n55.clientTop;
    } else
      a35 && (j14.x = getWindowScrollBarX(a35));
  }
  return {
    x: g30.left + d30.scrollLeft - j14.x,
    y: g30.top + d30.scrollTop - j14.y,
    width: g30.width,
    height: g30.height
  };
}
function order(e138) {
  var r131 = /* @__PURE__ */ new Map();
  var n116 = /* @__PURE__ */ new Set();
  var o122 = [];
  e138.forEach(function(e222) {
    r131.set(e222.name, e222);
  });
  function sort(e314) {
    n116.add(e314.name);
    var t135 = [].concat(e314.requires || [], e314.requiresIfExists || []);
    t135.forEach(function(e411) {
      if (!n116.has(e411)) {
        var o213 = r131.get(e411);
        o213 && sort(o213);
      }
    });
    o122.push(e314);
  }
  e138.forEach(function(e59) {
    n116.has(e59.name) || sort(e59);
  });
  return o122;
}
function orderModifiers(e61) {
  var r214 = order(e61);
  return x4.reduce(function(e72, n211) {
    return e72.concat(r214.filter(function(e82) {
      return e82.phase === n211;
    }));
  }, []);
}
function debounce1(e92) {
  var r311;
  return function() {
    r311 || (r311 = new Promise(function(n310) {
      Promise.resolve().then(function() {
        r311 = void 0;
        n310(e92());
      });
    }));
    return r311;
  };
}
function mergeByName(e18) {
  var r92 = e18.reduce(function(e19, r10) {
    var n9 = e19[r10.name];
    e19[r10.name] = n9 ? Object.assign({}, n9, r10, {
      options: Object.assign({}, n9.options, r10.options),
      data: Object.assign({}, n9.data, r10.data)
    }) : r10;
    return e19;
  }, {});
  return Object.keys(r92).map(function(e20) {
    return r92[e20];
  });
}
var m5 = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var e21 = arguments.length, r112 = new Array(e21), n10 = 0; n10 < e21; n10++)
    r112[n10] = arguments[n10];
  return !r112.some(function(e22) {
    return !(e22 && typeof e22.getBoundingClientRect === "function");
  });
}
function popperGenerator(i122) {
  i122 === void 0 && (i122 = {});
  var c117 = i122, u113 = c117.defaultModifiers, p113 = u113 === void 0 ? [] : u113, v111 = c117.defaultOptions, b28 = v111 === void 0 ? m5 : v111;
  return function createPopper(i213, c210, u210) {
    u210 === void 0 && (u210 = b28);
    var v25 = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, m5, b28),
      modifiersData: {},
      elements: {
        reference: i213,
        popper: c210
      },
      attributes: {},
      styles: {}
    };
    var g111 = [];
    var h110 = false;
    var y26 = {
      state: v25,
      setOptions: function setOptions(e23) {
        var r122 = typeof e23 === "function" ? e23(v25.options) : e23;
        cleanupModifierEffects();
        v25.options = Object.assign({}, b28, v25.options, r122);
        v25.scrollParents = {
          reference: isElement(i213) ? listScrollParents(i213) : i213.contextElement ? listScrollParents(i213.contextElement) : [],
          popper: listScrollParents(c210)
        };
        var o51 = orderModifiers(mergeByName([].concat(p113, v25.options.modifiers)));
        v25.orderedModifiers = o51.filter(function(e24) {
          return e24.enabled;
        });
        if (false) {
          var u31 = uniqueBy([].concat(o51, v25.options.modifiers), function(e25) {
            var r132 = e25.name;
            return r132;
          });
          validateModifiers(u31);
          if (getBasePlacement(v25.options.placement) === t8) {
            var d116 = v25.orderedModifiers.find(function(e26) {
              var r14 = e26.name;
              return r14 === "flip";
            });
            d116 || console.error([
              'Popper: "auto" placements require the "flip" modifier be',
              "present and enabled to work."
            ].join(" "));
          }
          var l114 = getComputedStyle(c210), m112 = l114.marginTop, g31 = l114.marginRight, h31 = l114.marginBottom, E18 = l114.marginLeft;
          [
            m112,
            g31,
            h31,
            E18
          ].some(function(e27) {
            return parseFloat(e27);
          }) && console.warn([
            'Popper: CSS "margin" styles cannot be used to apply padding',
            "between the popper and its reference element or boundary.",
            "To replicate margin, use the `offset` modifier, as well as",
            "the `padding` option in the `preventOverflow` and `flip`",
            "modifiers."
          ].join(" "));
        }
        runModifierEffects();
        return y26.update();
      },
      forceUpdate: function forceUpdate() {
        if (!h110) {
          var n11 = v25.elements, t221 = n11.reference, i34 = n11.popper;
          if (areValidElements(t221, i34)) {
            v25.rects = {
              reference: getCompositeRect(t221, getOffsetParent(i34), v25.options.strategy === "fixed"),
              popper: getLayoutRect(i34)
            };
            v25.reset = false;
            v25.placement = v25.options.placement;
            v25.orderedModifiers.forEach(function(e28) {
              return v25.modifiersData[e28.name] = Object.assign({}, e28.data);
            });
            var a124 = 0;
            for (var s123 = 0; s123 < v25.orderedModifiers.length; s123++) {
              if (false) {
                a124 += 1;
                if (a124 > 100) {
                  console.error(l7);
                  break;
                }
              }
              if (v25.reset !== true) {
                var f118 = v25.orderedModifiers[s123], c32 = f118.fn, u41 = f118.options, p29 = u41 === void 0 ? {} : u41, m29 = f118.name;
                typeof c32 === "function" && (v25 = c32({
                  state: v25,
                  options: p29,
                  name: m29,
                  instance: y26
                }) || v25);
              } else {
                v25.reset = false;
                s123 = -1;
              }
            }
          } else
            false;
        }
      },
      update: debounce1(function() {
        return new Promise(function(e29) {
          y26.forceUpdate();
          e29(v25);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        h110 = true;
      }
    };
    if (!areValidElements(i213, c210)) {
      false;
      return y26;
    }
    y26.setOptions(u210).then(function(e30) {
      !h110 && u210.onFirstUpdate && u210.onFirstUpdate(e30);
    });
    function runModifierEffects() {
      v25.orderedModifiers.forEach(function(e31) {
        var r15 = e31.name, n12 = e31.options, o62 = n12 === void 0 ? {} : n12, t314 = e31.effect;
        if (typeof t314 === "function") {
          var i41 = t314({
            state: v25,
            name: r15,
            instance: y26,
            options: o62
          });
          var a210 = function noopFn() {
          };
          g111.push(i41 || a210);
        }
      });
    }
    function cleanupModifierEffects() {
      g111.forEach(function(e32) {
        return e32();
      });
      g111 = [];
    }
    return y26;
  };
}
popperGenerator();
var m6 = [
  r8,
  t13,
  c5,
  s7
];
popperGenerator({
  defaultModifiers: m6
});
var j22 = [
  r8,
  t13,
  c5,
  s7,
  i7,
  d6,
  j1,
  v5,
  s8
];
var a11 = popperGenerator({
  defaultModifiers: j22
});
var u7 = [
  "anchorEl",
  "children",
  "direction",
  "disablePortal",
  "modifiers",
  "open",
  "placement",
  "popperOptions",
  "popperRef",
  "TransitionProps"
];
var m7 = [
  "anchorEl",
  "children",
  "container",
  "direction",
  "disablePortal",
  "keepMounted",
  "modifiers",
  "open",
  "placement",
  "popperOptions",
  "popperRef",
  "style",
  "transition"
];
function flipPlacement(e139, t136) {
  if (t136 === "ltr")
    return e139;
  switch (e139) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return e139;
  }
}
function resolveAnchorEl(e223) {
  return typeof e223 === "function" ? e223() : e223;
}
var h5 = {};
var b6 = l1(function PopperTooltip(r132, i123) {
  const { anchorEl: s124, children: p114, direction: l115, disablePortal: f119, modifiers: m113, open: h111, placement: b111, popperOptions: E19, popperRef: y27, TransitionProps: v26 } = r132, O11 = _objectWithoutPropertiesLoose(r132, u7);
  const g32 = c1(null);
  const R16 = useForkRef(g32, i123);
  const T15 = c1(null);
  const P = useForkRef(T15, y27);
  const j15 = c1(P);
  d2(() => {
    j15.current = P;
  }, [
    P
  ]);
  E2(y27, () => T15.current, []);
  const M12 = flipPlacement(b111, l115);
  const [x19, w19] = s1(M12);
  a1(() => {
    T15.current && T15.current.forceUpdate();
  });
  d2(() => {
    if (!s124 || !h111)
      return;
    const handlePopperUpdate = (e315) => {
      w19(e315.placement);
    };
    const t222 = resolveAnchorEl(s124);
    if (false) {
      const e412 = t222.getBoundingClientRect();
      e412.top === 0 && e412.left === 0 && e412.right === 0 && e412.bottom === 0 && console.warn([
        "MUI: The `anchorEl` prop provided to the component is invalid.",
        "The anchor element should be part of the document layout.",
        "Make sure the element is present in the document or that it's not display none."
      ].join("\n"));
    }
    let o123 = [
      {
        name: "preventOverflow",
        options: {
          altBoundary: f119
        }
      },
      {
        name: "flip",
        options: {
          altBoundary: f119
        }
      },
      {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({ state: e510 }) => {
          handlePopperUpdate(e510);
        }
      }
    ];
    m113 != null && (o123 = o123.concat(m113));
    E19 && E19.modifiers != null && (o123 = o123.concat(E19.modifiers));
    const n117 = a11(resolveAnchorEl(s124), g32.current, _extends({
      placement: M12
    }, E19, {
      modifiers: o123
    }));
    j15.current(n117);
    return () => {
      n117.destroy();
      j15.current(null);
    };
  }, [
    s124,
    f119,
    m113,
    h111,
    E19,
    M12
  ]);
  const N19 = {
    placement: x19
  };
  v26 !== null && (N19.TransitionProps = v26);
  return p4("div", _extends({
    ref: R16,
    role: "tooltip"
  }, O11, {
    children: typeof p114 === "function" ? p114(N19) : p114
  }));
});
var E22 = l1(function PopperUnstyled(o214, n212) {
  const { anchorEl: i214, children: s212, container: p210, direction: a125 = "ltr", disablePortal: l210 = false, keepMounted: u114 = false, modifiers: E21, open: y28, placement: v27 = "bottom", popperOptions: O12 = h5, popperRef: g33, style: R17, transition: T16 = false } = o214, P = _objectWithoutPropertiesLoose(o214, m7);
  const [j16, M13] = s1(true);
  const handleEnter = () => {
    M13(false);
  };
  const handleExited = () => {
    M13(true);
  };
  if (!u114 && !y28 && (!T16 || j16))
    return null;
  const x20 = p210 || (i214 ? ownerDocument(resolveAnchorEl(i214)).body : void 0);
  return p4(a7, {
    disablePortal: l210,
    container: x20,
    children: p4(b6, _extends({
      anchorEl: i214,
      direction: a125,
      disablePortal: l210,
      modifiers: E21,
      ref: n212,
      open: T16 ? !j16 : y28,
      placement: v27,
      popperOptions: O12,
      popperRef: g33
    }, P, {
      style: _extends({
        position: "fixed",
        top: 0,
        left: 0,
        display: y28 || !u114 || T16 && !j16 ? null : "none"
      }, R17),
      TransitionProps: T16 ? {
        in: y28,
        onEnter: handleEnter,
        onExited: handleExited
      } : null,
      children: s212
    }))
  });
});
false ? E22.propTypes = {
  anchorEl: chainPropTypes(s2.oneOfType([
    HTMLElementType,
    s2.object,
    s2.func
  ]), (e62) => {
    if (e62.open) {
      const t315 = resolveAnchorEl(e62.anchorEl);
      if (t315 && t315.nodeType === 1) {
        const e72 = t315.getBoundingClientRect();
        if (e72.top === 0 && e72.left === 0 && e72.right === 0 && e72.bottom === 0)
          return new Error([
            "MUI: The `anchorEl` prop provided to the component is invalid.",
            "The anchor element should be part of the document layout.",
            "Make sure the element is present in the document or that it's not display none."
          ].join("\n"));
      } else if (!t315 || typeof t315.getBoundingClientRect !== "function" || t315.contextElement != null && t315.contextElement.nodeType !== 1)
        return new Error([
          "MUI: The `anchorEl` prop provided to the component is invalid.",
          "It should be an HTML element instance or a virtualElement ",
          "(https://popper.js.org/docs/v2/virtual-elements/)."
        ].join("\n"));
    }
    return null;
  }),
  children: s2.oneOfType([
    s2.node,
    s2.func
  ]),
  container: s2.oneOfType([
    HTMLElementType,
    s2.func
  ]),
  direction: s2.oneOf([
    "ltr",
    "rtl"
  ]),
  disablePortal: s2.bool,
  keepMounted: s2.bool,
  modifiers: s2.arrayOf(s2.shape({
    data: s2.object,
    effect: s2.func,
    enabled: s2.bool,
    fn: s2.func,
    name: s2.any.isRequired,
    options: s2.object,
    phase: s2.oneOf([
      "afterMain",
      "afterRead",
      "afterWrite",
      "beforeMain",
      "beforeRead",
      "beforeWrite",
      "main",
      "read",
      "write"
    ]),
    requires: s2.arrayOf(s2.string),
    requiresIfExists: s2.arrayOf(s2.string)
  })),
  open: s2.bool.isRequired,
  placement: s2.oneOf([
    "auto-end",
    "auto-start",
    "auto",
    "bottom-end",
    "bottom-start",
    "bottom",
    "left-end",
    "left-start",
    "left",
    "right-end",
    "right-start",
    "right",
    "top-end",
    "top-start",
    "top"
  ]),
  popperOptions: s2.shape({
    modifiers: s2.array,
    onFirstUpdate: s2.func,
    placement: s2.oneOf([
      "auto-end",
      "auto-start",
      "auto",
      "bottom-end",
      "bottom-start",
      "bottom",
      "left-end",
      "left-start",
      "left",
      "right-end",
      "right-start",
      "right",
      "top-end",
      "top-start",
      "top"
    ]),
    strategy: s2.oneOf([
      "absolute",
      "fixed"
    ])
  }),
  popperRef: a4,
  style: s2.object,
  transition: s2.bool
} : void 0;
function getSliderUtilityClass(e140) {
  return generateUtilityClass("MuiSlider", e140);
}
var x5 = generateUtilityClasses("MuiSlider", [
  "root",
  "active",
  "focusVisible",
  "disabled",
  "dragging",
  "marked",
  "vertical",
  "trackInverted",
  "trackFalse",
  "rail",
  "track",
  "mark",
  "markActive",
  "markLabel",
  "markLabelActive",
  "thumb",
  "valueLabel",
  "valueLabelOpen",
  "valueLabelCircle",
  "valueLabelLabel"
]);
var useValueLabelClasses = (e224) => {
  const { open: t137 } = e224;
  const a126 = {
    offset: clsx_m(t137 && x5.valueLabelOpen),
    circle: x5.valueLabelCircle,
    label: x5.valueLabelLabel
  };
  return a126;
};
function SliderValueLabelUnstyled(e316) {
  const { children: t223, className: n118, value: r133, theme: s125 } = e316;
  const o124 = useValueLabelClasses(e316);
  return k(t223, {
    className: clsx_m(t223.props.className)
  }, y3(d, {
    children: [
      t223.props.children,
      p4("span", {
        className: clsx_m(o124.offset, n118),
        theme: s125,
        "aria-hidden": true,
        children: p4("span", {
          className: o124.circle,
          children: p4("span", {
            className: o124.label,
            children: r133
          })
        })
      })
    ]
  }));
}
false ? SliderValueLabelUnstyled.propTypes = {
  children: s2.element.isRequired,
  className: s2.string,
  theme: s2.any,
  value: s2.node
} : void 0;
function asc(e413, t316) {
  return e413 - t316;
}
function clamp(e511, t412, a211) {
  return e511 == null ? t412 : Math.min(Math.max(t412, e511), a211);
}
function findClosest(e63, t510) {
  var a36;
  const { index: n213 } = (a36 = e63.reduce((e72, a41, n311) => {
    const l116 = Math.abs(t510 - a41);
    return e72 === null || l116 < e72.distance || l116 === e72.distance ? {
      distance: l116,
      index: n311
    } : e72;
  }, null)) != null ? a36 : {};
  return n213;
}
function trackFinger(e82, t63) {
  if (t63.current !== void 0 && e82.changedTouches) {
    for (let a51 = 0; a51 < e82.changedTouches.length; a51 += 1) {
      const n411 = e82.changedTouches[a51];
      if (n411.identifier === t63.current)
        return {
          x: n411.clientX,
          y: n411.clientY
        };
    }
    return false;
  }
  return {
    x: e82.clientX,
    y: e82.clientY
  };
}
function valueToPercent(e92, t73, a61) {
  return 100 * (e92 - t73) / (a61 - t73);
}
function percentToValue(e102, t81, a71) {
  return (a71 - t81) * e102 + t81;
}
function getDecimalPrecision(e112) {
  if (Math.abs(e112) < 1) {
    const t91 = e112.toExponential().split("e-");
    const a81 = t91[0].split(".")[1];
    return (a81 ? a81.length : 0) + parseInt(t91[1], 10);
  }
  const t101 = e112.toString().split(".")[1];
  return t101 ? t101.length : 0;
}
function roundValueToStep(e122, t1110, a91) {
  const n57 = Math.round((e122 - a91) / t1110) * t1110 + a91;
  return Number(n57.toFixed(getDecimalPrecision(t1110)));
}
function setValueIndex({ values: e13, newValue: t1210, index: a101 }) {
  const n62 = e13.slice();
  n62[a101] = t1210;
  return n62.sort(asc);
}
function focusThumb({ sliderRef: e14, activeIndex: t138, setActive: a1110 }) {
  var n72, l211;
  const s213 = ownerDocument(e14.current);
  if (!((n72 = e14.current) != null && n72.contains(s213.activeElement)) || Number(s213 == null || (l211 = s213.activeElement) == null ? void 0 : l211.getAttribute("data-index")) !== t138) {
    var o215;
    (o215 = e14.current) == null ? void 0 : o215.querySelector(`[type="range"][data-index="${t138}"]`).focus();
  }
  a1110 && a1110(t138);
}
var L1 = {
  horizontal: {
    offset: (e15) => ({
      left: `${e15}%`
    }),
    leap: (e16) => ({
      width: `${e16}%`
    })
  },
  "horizontal-reverse": {
    offset: (e17) => ({
      right: `${e17}%`
    }),
    leap: (e18) => ({
      width: `${e18}%`
    })
  },
  vertical: {
    offset: (e19) => ({
      bottom: `${e19}%`
    }),
    leap: (e20) => ({
      height: `${e20}%`
    })
  }
};
var Identity$1 = (e21) => e21;
var T1;
function doesSupportTouchActionNone() {
  T1 === void 0 && (T1 = typeof CSS === "undefined" || typeof CSS.supports !== "function" || CSS.supports("touch-action", "none"));
  return T1;
}
function useSlider(t142) {
  const { ref: n8, "aria-labelledby": l35, defaultValue: m114, disableSwap: f120 = false, disabled: v112 = false, marks: p115 = false, max: b112 = 100, min: h112 = 0, name: g112, onChange: y110, onChangeCommitted: x110, orientation: T17 = "horizontal", scale: S13 = Identity$1, step: N12 = 1, tabIndex: A10, value: V15, isRtl: w20 = false } = t142;
  const I9 = c1();
  const [O13, C18] = s1(-1);
  const [E20, R18] = s1(-1);
  const [M14, P] = s1(false);
  const F12 = c1(0);
  const [D13, j17] = useControlled({
    controlled: V15,
    default: m114 != null ? m114 : h112,
    name: "Slider"
  });
  const U11 = y110 && ((e22, t152, a122) => {
    const n9 = e22.nativeEvent || e22;
    const l41 = new n9.constructor(n9.type, n9);
    Object.defineProperty(l41, "target", {
      writable: true,
      value: {
        value: t152,
        name: g112
      }
    });
    y110(l41, t152, a122);
  });
  const $7 = Array.isArray(D13);
  let z10 = $7 ? D13.slice().sort(asc) : [
    D13
  ];
  z10 = z10.map((e23) => clamp(e23, h112, b112));
  const B13 = p115 === true && N12 !== null ? [
    ...Array(Math.floor((b112 - h112) / N12) + 1)
  ].map((e5, t162) => ({
    value: h112 + N12 * t162
  })) : p115 || [];
  const Y5 = B13.map((e24) => e24.value);
  const { isFocusVisibleRef: _15, onBlur: q11, onFocus: H8, ref: X7 } = useIsFocusVisible();
  const [W9, G7] = s1(-1);
  const J6 = c1();
  const K6 = useForkRef(X7, J6);
  const Q6 = useForkRef(n8, K6);
  const createHandleHiddenInputFocus = (e25) => (t172) => {
    var a132;
    const n10 = Number(t172.currentTarget.getAttribute("data-index"));
    H8(t172);
    _15.current === true && G7(n10);
    R18(n10);
    e25 == null || (a132 = e25.onFocus) == null ? void 0 : a132.call(e25, t172);
  };
  const createHandleHidenInputBlur = (e26) => (t182) => {
    var a142;
    q11(t182);
    _15.current === false && G7(-1);
    R18(-1);
    e26 == null || (a142 = e26.onBlur) == null ? void 0 : a142.call(e26, t182);
  };
  d2(() => {
    if (v112 && J6.current.contains(document.activeElement)) {
      var e27;
      (e27 = document.activeElement) == null ? void 0 : e27.blur();
    }
  }, [
    v112
  ]);
  v112 && O13 !== -1 && C18(-1);
  v112 && W9 !== -1 && G7(-1);
  const createHandleHiddenInputChange = (e28) => (t192) => {
    var a152;
    (a152 = e28.onChange) == null ? void 0 : a152.call(e28, t192);
    const n11 = Number(t192.currentTarget.getAttribute("data-index"));
    const l51 = z10[n11];
    const r215 = Y5.indexOf(l51);
    let s310 = t192.target.valueAsNumber;
    B13 && N12 == null && (s310 = s310 < l51 ? Y5[r215 - 1] : Y5[r215 + 1]);
    s310 = clamp(s310, h112, b112);
    if (B13 && N12 == null) {
      const e29 = Y5.indexOf(z10[n11]);
      s310 = s310 < z10[n11] ? Y5[e29 - 1] : Y5[e29 + 1];
    }
    if ($7) {
      f120 && (s310 = clamp(s310, z10[n11 - 1] || -Infinity, z10[n11 + 1] || Infinity));
      const e30 = s310;
      s310 = setValueIndex({
        values: z10,
        newValue: s310,
        index: n11
      });
      let t20 = n11;
      f120 || (t20 = s310.indexOf(e30));
      focusThumb({
        sliderRef: J6,
        activeIndex: t20
      });
    }
    j17(s310);
    G7(n11);
    U11 && U11(t192, s310, n11);
    x110 && x110(t192, s310);
  };
  const Z6 = c1();
  let ee3 = T17;
  w20 && T17 === "horizontal" && (ee3 += "-reverse");
  const getFingerNewValue = ({ finger: e31, move: t21 = false, values: a162 }) => {
    const { current: n12 } = J6;
    const { width: l61, height: r312, bottom: s44, left: o311 } = n12.getBoundingClientRect();
    let i124;
    i124 = ee3.indexOf("vertical") === 0 ? (s44 - e31.y) / r312 : (e31.x - o311) / l61;
    ee3.indexOf("-reverse") !== -1 && (i124 = 1 - i124);
    let c118;
    c118 = percentToValue(i124, h112, b112);
    if (N12)
      c118 = roundValueToStep(c118, N12, h112);
    else {
      const e32 = findClosest(Y5, c118);
      c118 = Y5[e32];
    }
    c118 = clamp(c118, h112, b112);
    let u115 = 0;
    if ($7) {
      u115 = t21 ? Z6.current : findClosest(a162, c118);
      f120 && (c118 = clamp(c118, a162[u115 - 1] || -Infinity, a162[u115 + 1] || Infinity));
      const e33 = c118;
      c118 = setValueIndex({
        values: a162,
        newValue: c118,
        index: u115
      });
      if (!(f120 && t21)) {
        u115 = c118.indexOf(e33);
        Z6.current = u115;
      }
    }
    return {
      newValue: c118,
      activeIndex: u115
    };
  };
  const te3 = useEventCallback((e34) => {
    const t22 = trackFinger(e34, I9);
    if (!t22)
      return;
    F12.current += 1;
    if (e34.type === "mousemove" && e34.buttons === 0) {
      ae(e34);
      return;
    }
    const { newValue: a172, activeIndex: n13 } = getFingerNewValue({
      finger: t22,
      move: true,
      values: z10
    });
    focusThumb({
      sliderRef: J6,
      activeIndex: n13,
      setActive: C18
    });
    j17(a172);
    !M14 && F12.current > 2 && P(true);
    U11 && U11(e34, a172, n13);
  });
  const ae = useEventCallback((e35) => {
    const t23 = trackFinger(e35, I9);
    P(false);
    if (!t23)
      return;
    const { newValue: a18 } = getFingerNewValue({
      finger: t23,
      values: z10
    });
    C18(-1);
    e35.type === "touchend" && R18(-1);
    x110 && x110(e35, a18);
    I9.current = void 0;
    le2();
  });
  const ne2 = useEventCallback((e36) => {
    doesSupportTouchActionNone() || e36.preventDefault();
    const t24 = e36.changedTouches[0];
    t24 != null && (I9.current = t24.identifier);
    const a19 = trackFinger(e36, I9);
    if (a19 !== false) {
      const { newValue: t25, activeIndex: n14 } = getFingerNewValue({
        finger: a19,
        values: z10
      });
      focusThumb({
        sliderRef: J6,
        activeIndex: n14,
        setActive: C18
      });
      j17(t25);
      U11 && U11(e36, t25, n14);
    }
    F12.current = 0;
    const n15 = ownerDocument(J6.current);
    n15.addEventListener("touchmove", te3);
    n15.addEventListener("touchend", ae);
  });
  const le2 = u2(() => {
    const e37 = ownerDocument(J6.current);
    e37.removeEventListener("mousemove", te3);
    e37.removeEventListener("mouseup", ae);
    e37.removeEventListener("touchmove", te3);
    e37.removeEventListener("touchend", ae);
  }, [
    ae,
    te3
  ]);
  a1(() => {
    const { current: e38 } = J6;
    e38.addEventListener("touchstart", ne2, {
      passive: doesSupportTouchActionNone()
    });
    return () => {
      e38.removeEventListener("touchstart", ne2, {
        passive: doesSupportTouchActionNone()
      });
      le2();
    };
  }, [
    le2,
    ne2
  ]);
  a1(() => {
    v112 && le2();
  }, [
    v112,
    le2
  ]);
  const createHandleMouseDown = (e39) => (t26) => {
    var a20;
    (a20 = e39.onMouseDown) == null ? void 0 : a20.call(e39, t26);
    if (t26.defaultPrevented)
      return;
    if (t26.button !== 0)
      return;
    t26.preventDefault();
    const n16 = trackFinger(t26, I9);
    if (n16 !== false) {
      const { newValue: e40, activeIndex: a21 } = getFingerNewValue({
        finger: n16,
        values: z10
      });
      focusThumb({
        sliderRef: J6,
        activeIndex: a21,
        setActive: C18
      });
      j17(e40);
      U11 && U11(t26, e40, a21);
    }
    F12.current = 0;
    const l71 = ownerDocument(J6.current);
    l71.addEventListener("mousemove", te3);
    l71.addEventListener("mouseup", ae);
  };
  const re = valueToPercent($7 ? z10[0] : h112, h112, b112);
  const se2 = valueToPercent(z10[z10.length - 1], h112, b112) - re;
  const getRootProps = (t27) => {
    const a22 = {
      onMouseDown: createHandleMouseDown(t27 || {})
    };
    const n17 = _extends({}, t27, a22);
    return _extends({
      ref: Q6
    }, n17);
  };
  const createHandleMouseOver = (e41) => (t28) => {
    var a23;
    (a23 = e41.onMouseOver) == null ? void 0 : a23.call(e41, t28);
    const n18 = Number(t28.currentTarget.getAttribute("data-index"));
    R18(n18);
  };
  const createHandleMouseLeave = (e42) => (t29) => {
    var a24;
    (a24 = e42.onMouseLeave) == null ? void 0 : a24.call(e42, t29);
    R18(-1);
  };
  const getThumbProps = (t30) => {
    const a25 = {
      onMouseOver: createHandleMouseOver(t30 || {}),
      onMouseLeave: createHandleMouseLeave(t30 || {})
    };
    const n19 = _extends({}, t30, a25);
    return _extends({}, n19);
  };
  const getHiddenInputProps = (a26) => {
    const n20 = {
      onChange: createHandleHiddenInputChange(a26 || {}),
      onFocus: createHandleHiddenInputFocus(a26 || {}),
      onBlur: createHandleHidenInputBlur(a26 || {})
    };
    const r48 = _extends({}, a26, n20);
    return _extends({
      tabIndex: A10,
      "aria-labelledby": l35,
      "aria-orientation": T17,
      "aria-valuemax": S13(b112),
      "aria-valuemin": S13(h112),
      name: g112,
      type: "range",
      min: t142.min,
      max: t142.max,
      step: t142.step,
      disabled: v112
    }, r48, {
      style: _extends({}, g2, {
        direction: w20 ? "rtl" : "ltr",
        width: "100%",
        height: "100%"
      })
    });
  };
  return {
    axis: ee3,
    axisProps: L1,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    dragging: M14,
    marks: B13,
    values: z10,
    active: O13,
    focusVisible: W9,
    open: E20,
    range: $7,
    trackOffset: re,
    trackLeap: se2
  };
}
var S2 = [
  "aria-label",
  "aria-valuetext",
  "className",
  "component",
  "classes",
  "disableSwap",
  "disabled",
  "getAriaLabel",
  "getAriaValueText",
  "marks",
  "max",
  "min",
  "name",
  "onChange",
  "onChangeCommitted",
  "onMouseDown",
  "orientation",
  "scale",
  "step",
  "tabIndex",
  "track",
  "value",
  "valueLabelDisplay",
  "valueLabelFormat",
  "isRtl",
  "components",
  "componentsProps"
];
var Identity = (e43) => e43;
var useUtilityClasses4 = (e44) => {
  const { disabled: t31, dragging: a27, marked: n21, orientation: l82, track: r53, classes: s5 } = e44;
  const o47 = {
    root: [
      "root",
      t31 && "disabled",
      a27 && "dragging",
      n21 && "marked",
      l82 === "vertical" && "vertical",
      r53 === "inverted" && "trackInverted",
      r53 === false && "trackFalse"
    ],
    rail: [
      "rail"
    ],
    track: [
      "track"
    ],
    mark: [
      "mark"
    ],
    markActive: [
      "markActive"
    ],
    markLabel: [
      "markLabel"
    ],
    markLabelActive: [
      "markLabelActive"
    ],
    valueLabel: [
      "valueLabel"
    ],
    thumb: [
      "thumb",
      t31 && "disabled"
    ],
    active: [
      "active"
    ],
    disabled: [
      "disabled"
    ],
    focusVisible: [
      "focusVisible"
    ]
  };
  return composeClasses(o47, getSliderUtilityClass, s5);
};
var Forward = ({ children: e45 }) => e45;
var N1 = l1(function SliderUnstyled(n22, r62) {
  var s61, o52, i215, c211, u211, d117, m210;
  const { "aria-label": p211, "aria-valuetext": b29, className: h210, component: x21, classes: k12, disableSwap: L11 = false, disabled: T22 = false, getAriaLabel: N22, getAriaValueText: A11, marks: V16 = false, max: w21 = 100, min: I10 = 0, onMouseDown: O14, orientation: C19 = "horizontal", scale: E222 = Identity, step: R19 = 1, track: M15 = "normal", valueLabelDisplay: P = "off", valueLabelFormat: F13 = Identity, isRtl: D14 = false, components: j18 = {}, componentsProps: U12 = {} } = n22, $8 = _objectWithoutPropertiesLoose(n22, S2);
  const z11 = _extends({}, n22, {
    mark: V16,
    classes: k12,
    disabled: T22,
    isRtl: D14,
    max: w21,
    min: I10,
    orientation: C19,
    scale: E222,
    step: R19,
    track: M15,
    valueLabelDisplay: P,
    valueLabelFormat: F13
  });
  const { axisProps: B14, getRootProps: Y6, getHiddenInputProps: _16, getThumbProps: q12, open: H9, active: X8, axis: W10, range: G8, focusVisible: J7, dragging: K7, marks: Q7, values: Z7, trackOffset: ee4, trackLeap: te4 } = useSlider(_extends({}, z11, {
    ref: r62
  }));
  z11.marked = Q7.length > 0 && Q7.some((e46) => e46.label);
  z11.dragging = K7;
  const ae = (s61 = x21 != null ? x21 : j18.Root) != null ? s61 : "span";
  const ne2 = appendOwnerState(ae, _extends({}, $8, U12.root), z11);
  const le2 = (o52 = j18.Rail) != null ? o52 : "span";
  const re = appendOwnerState(le2, U12.rail, z11);
  const se2 = (i215 = j18.Track) != null ? i215 : "span";
  const oe2 = appendOwnerState(se2, U12.track, z11);
  const ie = _extends({}, B14[W10].offset(ee4), B14[W10].leap(te4));
  const ce = (c211 = j18.Thumb) != null ? c211 : "span";
  const ue2 = appendOwnerState(ce, U12.thumb, z11);
  const de2 = (u211 = j18.ValueLabel) != null ? u211 : SliderValueLabelUnstyled;
  const me2 = appendOwnerState(de2, U12.valueLabel, z11);
  const fe = (d117 = j18.Mark) != null ? d117 : "span";
  const ve1 = appendOwnerState(fe, U12.mark, z11);
  const pe2 = (m210 = j18.MarkLabel) != null ? m210 : "span";
  const be1 = appendOwnerState(pe2, U12.markLabel, z11);
  const he2 = j18.Input || "input";
  const ge2 = appendOwnerState(he2, U12.input, z11);
  const ye = _16();
  const xe1 = useUtilityClasses4(z11);
  return y3(ae, _extends({}, ne2, Y6({
    onMouseDown: O14
  }), {
    className: clsx_m(xe1.root, ne2.className, h210),
    children: [
      p4(le2, _extends({}, re, {
        className: clsx_m(xe1.rail, re.className)
      })),
      p4(se2, _extends({}, oe2, {
        className: clsx_m(xe1.track, oe2.className),
        style: _extends({}, ie, oe2.style)
      })),
      Q7.map((t32, n23) => {
        const r72 = valueToPercent(t32.value, I10, w21);
        const s71 = B14[W10].offset(r72);
        let o62;
        o62 = M15 === false ? Z7.indexOf(t32.value) !== -1 : M15 === "normal" && (G8 ? t32.value >= Z7[0] && t32.value <= Z7[Z7.length - 1] : t32.value <= Z7[0]) || M15 === "inverted" && (G8 ? t32.value <= Z7[0] || t32.value >= Z7[Z7.length - 1] : t32.value >= Z7[0]);
        return y3(d, {
          children: [
            p4(fe, _extends({
              "data-index": n23
            }, ve1, !isHostComponent(fe) && {
              markActive: o62
            }, {
              style: _extends({}, s71, ve1.style),
              className: clsx_m(xe1.mark, ve1.className, o62 && xe1.markActive)
            })),
            t32.label != null ? p4(pe2, _extends({
              "aria-hidden": true,
              "data-index": n23
            }, be1, !isHostComponent(pe2) && {
              markLabelActive: o62
            }, {
              style: _extends({}, s71, be1.style),
              className: clsx_m(xe1.markLabel, be1.className, o62 && xe1.markLabelActive),
              children: t32.label
            })) : null
          ]
        }, t32.value);
      }),
      Z7.map((t33, n24) => {
        const r82 = valueToPercent(t33, I10, w21);
        const s81 = B14[W10].offset(r82);
        const o7 = P === "off" ? Forward : de2;
        return p4(d, {
          children: p4(o7, _extends({}, !isHostComponent(o7) && {
            valueLabelFormat: F13,
            valueLabelDisplay: P,
            value: typeof F13 === "function" ? F13(E222(t33), n24) : F13,
            index: n24,
            open: H9 === n24 || X8 === n24 || P === "on",
            disabled: T22
          }, me2, {
            className: clsx_m(xe1.valueLabel, me2.className),
            children: p4(ce, _extends({
              "data-index": n24
            }, ue2, q12(), {
              className: clsx_m(xe1.thumb, ue2.className, X8 === n24 && xe1.active, J7 === n24 && xe1.focusVisible)
            }, !isHostComponent(ce) && {
              ownerState: _extends({}, z11, ue2.ownerState)
            }, {
              style: _extends({}, s81, {
                pointerEvents: L11 && X8 !== n24 ? "none" : void 0
              }, ue2.style),
              children: p4(he2, _extends({}, ye, {
                "data-index": n24,
                "aria-label": N22 ? N22(n24) : p211,
                "aria-valuenow": E222(t33),
                "aria-valuetext": A11 ? A11(E222(t33), n24) : b29,
                value: Z7[n24]
              }, !isHostComponent(he2) && {
                ownerState: _extends({}, z11, ge2.ownerState)
              }, ge2, {
                style: _extends({}, ye.style, ge2.style)
              }))
            }))
          }))
        }, n24);
      })
    ]
  }));
});
false ? N1.propTypes = {
  "aria-label": chainPropTypes(s2.string, (e47) => {
    const t34 = Array.isArray(e47.value || e47.defaultValue);
    return t34 && e47["aria-label"] != null ? new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.") : null;
  }),
  "aria-labelledby": s2.string,
  "aria-valuetext": chainPropTypes(s2.string, (e48) => {
    const t35 = Array.isArray(e48.value || e48.defaultValue);
    return t35 && e48["aria-valuetext"] != null ? new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.") : null;
  }),
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Input: s2.elementType,
    Mark: s2.elementType,
    MarkLabel: s2.elementType,
    Rail: s2.elementType,
    Root: s2.elementType,
    Thumb: s2.elementType,
    Track: s2.elementType,
    ValueLabel: s2.elementType
  }),
  componentsProps: s2.shape({
    input: s2.object,
    mark: s2.object,
    markLabel: s2.object,
    rail: s2.object,
    root: s2.object,
    thumb: s2.object,
    track: s2.object,
    valueLabel: s2.shape({
      className: s2.string,
      components: s2.shape({
        Root: s2.elementType
      }),
      style: s2.object,
      value: s2.oneOfType([
        s2.arrayOf(s2.number),
        s2.number
      ]),
      valueLabelDisplay: s2.oneOf([
        "auto",
        "off",
        "on"
      ])
    })
  }),
  defaultValue: s2.oneOfType([
    s2.arrayOf(s2.number),
    s2.number
  ]),
  disabled: s2.bool,
  disableSwap: s2.bool,
  getAriaLabel: s2.func,
  getAriaValueText: s2.func,
  isRtl: s2.bool,
  marks: s2.oneOfType([
    s2.arrayOf(s2.shape({
      label: s2.node,
      value: s2.number.isRequired
    })),
    s2.bool
  ]),
  max: s2.number,
  min: s2.number,
  name: s2.string,
  onChange: s2.func,
  onChangeCommitted: s2.func,
  onMouseDown: s2.func,
  orientation: s2.oneOf([
    "horizontal",
    "vertical"
  ]),
  scale: s2.func,
  step: s2.number,
  tabIndex: s2.number,
  track: s2.oneOf([
    "inverted",
    "normal",
    false
  ]),
  value: s2.oneOfType([
    s2.arrayOf(s2.number),
    s2.number
  ]),
  valueLabelDisplay: s2.oneOf([
    "auto",
    "off",
    "on"
  ]),
  valueLabelFormat: s2.oneOfType([
    s2.func,
    s2.string
  ])
} : void 0;
function useSwitch(o125) {
  const { checked: t139, defaultChecked: s126, disabled: u116, onBlur: a127, onChange: i125, onFocus: d118, onFocusVisible: m115, readOnly: p116, required: f121 } = o125;
  const [h113, b30] = useControlled({
    controlled: t139,
    default: Boolean(s126),
    name: "Switch",
    state: "checked"
  });
  const handleInputChange = (e141, o216) => {
    if (!e141.nativeEvent.defaultPrevented) {
      b30(e141.target.checked);
      i125 == null ? void 0 : i125(e141);
      o216 == null ? void 0 : o216(e141);
    }
  };
  const { isFocusVisibleRef: k13, onBlur: y29, onFocus: v28, ref: C20 } = useIsFocusVisible();
  const [g34, F14] = s1(false);
  u116 && g34 && F14(false);
  a1(() => {
    k13.current = g34;
  }, [
    g34,
    k13
  ]);
  const O15 = c1(null);
  const handleFocus = (e225, o312) => {
    O15.current || (O15.current = e225.currentTarget);
    v28(e225);
    if (k13.current === true) {
      F14(true);
      m115 == null ? void 0 : m115(e225);
    }
    d118 == null ? void 0 : d118(e225);
    o312 == null ? void 0 : o312(e225);
  };
  const handleBlur = (e317, o48) => {
    y29(e317);
    k13.current === false && F14(false);
    a127 == null ? void 0 : a127(e317);
    o48 == null ? void 0 : o48(e317);
  };
  const N20 = useForkRef(C20, O15);
  const getInputProps = (o53 = {}) => _extends({
    checked: t139,
    defaultChecked: s126,
    disabled: u116,
    readOnly: p116,
    required: f121,
    type: "checkbox"
  }, o53, {
    onChange: (e414) => handleInputChange(e414, o53.onChange),
    onFocus: (e512) => handleFocus(e512, o53.onFocus),
    onBlur: (e64) => handleBlur(e64, o53.onBlur),
    ref: N20
  });
  return {
    checked: h113,
    disabled: Boolean(u116),
    focusVisible: g34,
    getInputProps,
    readOnly: Boolean(p116)
  };
}
var p8 = generateUtilityClasses("MuiSwitch", [
  "root",
  "input",
  "track",
  "thumb",
  "checked",
  "disabled",
  "focusVisible",
  "readOnly"
]);
var f7 = [
  "checked",
  "className",
  "component",
  "components",
  "componentsProps",
  "defaultChecked",
  "disabled",
  "onBlur",
  "onChange",
  "onFocus",
  "onFocusVisible",
  "readOnly",
  "required"
];
var h6 = l1(function SwitchUnstyled(n119, t224) {
  var l117, c119, r134, u212, a212, h211, b31;
  const { checked: k14, className: y30, component: v29, components: C21 = {}, componentsProps: g35 = {}, defaultChecked: F15, disabled: O16, onBlur: N21, onChange: T18, onFocus: V17, onFocusVisible: B15, readOnly: w222 } = n119, S14 = _objectWithoutPropertiesLoose(n119, f7);
  const j19 = {
    checked: k14,
    defaultChecked: F15,
    disabled: O16,
    onBlur: N21,
    onChange: T18,
    onFocus: V17,
    onFocusVisible: B15,
    readOnly: w222
  };
  const { getInputProps: P, checked: U13, disabled: x22, focusVisible: R20, readOnly: q13 } = useSwitch(j19);
  const E23 = _extends({}, n119, {
    checked: U13,
    disabled: x22,
    focusVisible: R20,
    readOnly: q13
  });
  const I11 = (l117 = v29 != null ? v29 : C21.Root) != null ? l117 : "span";
  const _17 = appendOwnerState(I11, _extends({}, S14, g35.root), E23);
  const M16 = (c119 = C21.Thumb) != null ? c119 : "span";
  const D15 = appendOwnerState(M16, (r134 = g35.thumb) != null ? r134 : {}, E23);
  const L9 = (u212 = C21.Input) != null ? u212 : "input";
  const W11 = appendOwnerState(L9, (a212 = g35.input) != null ? a212 : {}, E23);
  const z12 = C21.Track === null ? () => null : (h211 = C21.Track) != null ? h211 : "span";
  const A12 = appendOwnerState(z12, (b31 = g35.track) != null ? b31 : {}, E23);
  const G9 = clsx_m(U13 && p8.checked, x22 && p8.disabled, R20 && p8.focusVisible, q13 && p8.readOnly);
  return y3(I11, _extends({
    ref: t224
  }, _17, {
    className: clsx_m(p8.root, G9, y30, _17 == null ? void 0 : _17.className),
    children: [
      p4(z12, _extends({}, A12, {
        className: clsx_m(p8.track, A12 == null ? void 0 : A12.className)
      })),
      p4(M16, _extends({}, D15, {
        className: clsx_m(p8.thumb, D15 == null ? void 0 : D15.className)
      })),
      p4(L9, _extends({}, P(W11), {
        className: clsx_m(p8.input, W11 == null ? void 0 : W11.className)
      }))
    ]
  }));
});
false ? h6.propTypes = {
  checked: s2.bool,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Input: s2.elementType,
    Root: s2.elementType,
    Thumb: s2.elementType,
    Track: s2.oneOfType([
      s2.elementType,
      s2.oneOf([
        null
      ])
    ])
  }),
  componentsProps: s2.shape({
    input: s2.object,
    root: s2.object,
    thumb: s2.object,
    track: s2.object
  }),
  defaultChecked: s2.bool,
  disabled: s2.bool,
  onBlur: s2.func,
  onChange: s2.func,
  onFocus: s2.func,
  onFocusVisible: s2.func,
  readOnly: s2.bool,
  required: s2.bool
} : void 0;
function getTabsUnstyledUtilityClass(o126) {
  return generateUtilityClass("TabsUnstyled", o126);
}
generateUtilityClasses("TabsUnstyled", [
  "root",
  "horizontal",
  "vertical"
]);
var useTabs = (o217) => {
  const { value: e142, defaultValue: n120, onChange: s127, orientation: r135, direction: l118, selectionFollowsFocus: i126 } = o217;
  const [a128, m116] = useControlled({
    controlled: e142,
    default: n120,
    name: "Tabs",
    state: "value"
  });
  const p117 = useId();
  const d119 = u2((o313, e226) => {
    m116(e226);
    s127 && s127(o313, e226);
  }, [
    s127,
    m116
  ]);
  const getRootProps = () => ({});
  const f122 = V2(() => ({
    idPrefix: p117,
    value: a128,
    onSelected: d119,
    orientation: r135,
    direction: l118,
    selectionFollowsFocus: i126
  }), [
    p117,
    a128,
    d119,
    r135,
    l118,
    i126
  ]);
  return {
    getRootProps,
    tabsContextValue: f122
  };
};
var d8 = t1(null);
function useTabContext() {
  return r1(d8);
}
function getPanelId(o49, e318) {
  const { idPrefix: t140 } = o49;
  return t140 === null ? null : `${o49.idPrefix}-P-${e318}`;
}
function getTabId(o54, e415) {
  const { idPrefix: t225 } = o54;
  return t225 === null ? null : `${o54.idPrefix}-T-${e415}`;
}
var f8 = [
  "children",
  "className",
  "value",
  "defaultValue",
  "orientation",
  "direction",
  "component",
  "components",
  "componentsProps",
  "onChange",
  "selectionFollowsFocus"
];
var useUtilityClasses5 = (o62) => {
  const { orientation: e513 } = o62;
  const t317 = {
    root: [
      "root",
      e513
    ]
  };
  return composeClasses(t317, getTabsUnstyledUtilityClass, {});
};
var b7 = l1((t413, n214) => {
  var l212, i216;
  const { children: a213, className: c120, orientation: u117 = "horizontal", direction: p212 = "ltr", component: b113, components: C222 = {}, componentsProps: T19 = {} } = t413, g36 = _objectWithoutPropertiesLoose(t413, f8);
  const { tabsContextValue: x23, getRootProps: y31 } = useTabs(t413);
  const h32 = _extends({}, t413, {
    orientation: u117,
    direction: p212
  });
  const v30 = useUtilityClasses5(h32);
  const P = (l212 = b113 != null ? b113 : C222.Root) != null ? l212 : "div";
  const N22 = appendOwnerState(P, _extends({}, g36, T19.root), h32);
  return p4(P, _extends({}, y31(), N22, {
    ref: n214,
    className: clsx_m(v30.root, (i216 = T19.root) == null ? void 0 : i216.className, c120),
    children: p4(d8.Provider, {
      value: x23,
      children: a213
    })
  }));
});
false ? b7.propTypes = {
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  defaultValue: s2.oneOfType([
    s2.oneOf([
      false
    ]),
    s2.number,
    s2.string
  ]),
  direction: s2.oneOf([
    "ltr",
    "rtl"
  ]),
  onChange: s2.func,
  orientation: s2.oneOf([
    "horizontal",
    "vertical"
  ]),
  selectionFollowsFocus: s2.bool,
  value: s2.oneOfType([
    s2.oneOf([
      false
    ]),
    s2.number,
    s2.string
  ])
} : void 0;
function getTabPanelUnstyledUtilityClass(e143) {
  return generateUtilityClass("TabPanelUnstyled", e143);
}
generateUtilityClasses("TabPanelUnstyled", [
  "root",
  "hidden"
]);
var useTabPanel = (e227) => {
  const { value: o127 } = e227;
  const t141 = useTabContext();
  if (t141 === null)
    throw new Error("No TabContext provided");
  const n121 = o127 !== t141.value;
  const s128 = getPanelId(t141, o127);
  const r136 = getTabId(t141, o127);
  const getRootProps = () => ({
    "aria-labelledby": r136,
    hidden: n121,
    id: s128
  });
  return {
    hidden: n121,
    getRootProps
  };
};
var b8 = [
  "children",
  "className",
  "value",
  "components",
  "componentsProps",
  "component"
];
var useUtilityClasses6 = (e319) => {
  const { hidden: o218 } = e319;
  const t226 = {
    root: [
      "root",
      o218 && "hidden"
    ]
  };
  return composeClasses(t226, getTabPanelUnstyledUtilityClass, {});
};
var f9 = l1(function TabPanelUnstyled(t318, n215) {
  var l119, a129;
  const { children: i127, className: m117, components: c121 = {}, componentsProps: p118 = {}, component: u118 } = t318, f123 = _objectWithoutPropertiesLoose(t318, b8);
  const { hidden: y32, getRootProps: h33 } = useTabPanel(t318);
  const P = _extends({}, t318, {
    hidden: y32
  });
  const T20 = useUtilityClasses6(P);
  const U14 = (l119 = u118 != null ? u118 : c121.Root) != null ? l119 : "div";
  const v31 = appendOwnerState(U14, _extends({}, f123, p118.root), P);
  return p4(U14, _extends({}, h33(), {
    ref: n215,
    role: "tabpanel"
  }, v31, {
    className: clsx_m(T20.root, (a129 = p118.root) == null ? void 0 : a129.className, m117),
    children: !y32 && i127
  }));
});
false ? f9.propTypes = {
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  value: s2.oneOfType([
    s2.number,
    s2.string
  ]).isRequired
} : void 0;
function getTabsListUnstyledUtilityClass(t142) {
  return generateUtilityClass("TabsListUnstyled", t142);
}
generateUtilityClasses("TabsListUnstyled", [
  "root",
  "horizontal",
  "vertical"
]);
var nextItem = (t227, e144) => t227 ? t227 === e144 ? t227.firstChild : e144 && e144.nextElementSibling ? e144.nextElementSibling : t227.firstChild : null;
var previousItem = (t319, e228) => t319 ? t319 === e228 ? t319.lastChild : e228 && e228.previousElementSibling ? e228.previousElementSibling : t319.lastChild : null;
var moveFocus = (t414, e320, o128) => {
  let r137 = false;
  let n122 = o128(t414, e320);
  while (t414 && n122) {
    if (n122 === t414.firstChild) {
      if (r137)
        return;
      r137 = true;
    }
    const e416 = n122.disabled || n122.getAttribute("aria-disabled") === "true";
    if (n122.hasAttribute("tabindex") && !e416) {
      n122.focus();
      return;
    }
    n122 = o128(t414, n122);
  }
};
var useTabsList = (e514) => {
  const { "aria-label": r216, "aria-labelledby": n216, children: s129, ref: i128 } = e514;
  const l120 = R();
  const a130 = useForkRef(l120, i128);
  const b114 = useTabContext();
  if (b114 === null)
    throw new Error("No TabContext provided");
  const { value: f124, orientation: h114 = "horizontal", direction: v113 = "ltr" } = b114;
  const y33 = v113 === "rtl";
  const handleKeyDown2 = (t511) => {
    const e65 = l120.current;
    const o219 = ownerDocument(e65).activeElement;
    const r313 = o219 == null ? void 0 : o219.getAttribute("role");
    if (r313 !== "tab")
      return;
    let n312 = h114 === "horizontal" ? "ArrowLeft" : "ArrowUp";
    let s214 = h114 === "horizontal" ? "ArrowRight" : "ArrowDown";
    if (h114 === "horizontal" && y33) {
      n312 = "ArrowRight";
      s214 = "ArrowLeft";
    }
    switch (t511.key) {
      case n312:
        t511.preventDefault();
        moveFocus(e65, o219, previousItem);
        break;
      case s214:
        t511.preventDefault();
        moveFocus(e65, o219, nextItem);
        break;
      case "Home":
        t511.preventDefault();
        moveFocus(e65, null, nextItem);
        break;
      case "End":
        t511.preventDefault();
        moveFocus(e65, null, previousItem);
        break;
      default:
        break;
    }
  };
  const createHandleKeyDown = (t64) => (e72) => {
    var o314;
    handleKeyDown2(e72);
    (o314 = t64.onKeyDown) == null ? void 0 : o314.call(t64, e72);
  };
  const getRootProps = (o410) => {
    const s311 = extractEventHandlers(e514);
    const i217 = _extends({}, s311, o410);
    const l213 = {
      onKeyDown: createHandleKeyDown(i217)
    };
    const c122 = _extends({}, i217, l213);
    return _extends({
      "aria-label": r216,
      "aria-labelledby": n216,
      "aria-orientation": h114 === "vertical" ? "vertical" : null,
      role: "tablist",
      ref: a130
    }, c122);
  };
  const g37 = u2(() => {
    const e82 = /* @__PURE__ */ new Map();
    let r49 = 0;
    const n412 = b.map(s129, (n58) => {
      if (!C2(n58))
        return null;
      false;
      const s45 = n58.props.value === void 0 ? r49 : n58.props.value;
      e82.set(s45, r49);
      r49 += 1;
      return k(n58, _extends({
        value: s45
      }, r49 === 1 && f124 === false && !n58.props.tabIndex || f124 === s45 ? {
        tabIndex: 0
      } : {
        tabIndex: -1
      }));
    });
    return n412;
  }, [
    s129,
    f124
  ]);
  return {
    isRtl: y33,
    orientation: h114,
    value: f124,
    processChildren: g37,
    getRootProps
  };
};
var h7 = [
  "className",
  "children",
  "component",
  "components",
  "componentsProps"
];
var useUtilityClasses7 = (t74) => {
  const { orientation: e92 } = t74;
  const o55 = {
    root: [
      "root",
      e92
    ]
  };
  return composeClasses(o55, getTabsListUnstyledUtilityClass, {});
};
var v6 = l1((o62, r54) => {
  var s5, l36;
  const { className: a214, component: c212, components: p119 = {}, componentsProps: m118 = {} } = o62, u119 = _objectWithoutPropertiesLoose(o62, h7);
  const { isRtl: d120, orientation: f211, getRootProps: v210, processChildren: y34 } = useTabsList(_extends({}, o62, {
    ref: r54
  }));
  const g38 = _extends({}, o62, {
    isRtl: d120,
    orientation: f211
  });
  const C23 = useUtilityClasses7(g38);
  const w23 = (s5 = c212 != null ? c212 : p119.Root) != null ? s5 : "div";
  const E24 = appendOwnerState(w23, _extends({}, u119, m118.root), g38);
  const U15 = y34();
  return p4(w23, _extends({}, v210(), E24, {
    className: clsx_m(a214, (l36 = m118.root) == null ? void 0 : l36.className, C23.root),
    children: U15
  }));
});
false ? v6.propTypes = {
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  })
} : void 0;
function getTabUnstyledUtilityClass(e145) {
  return generateUtilityClass("TabUnstyled", e145);
}
generateUtilityClasses("TabUnstyled", [
  "root",
  "selected",
  "disabled"
]);
var y5 = [
  "getRootProps"
];
var useTab = (t143) => {
  const { value: s130, onChange: n123, onClick: r138, onFocus: c123 } = t143;
  const l121 = useButton(t143), { getRootProps: i129 } = l121, a131 = _objectWithoutPropertiesLoose(l121, y5);
  const f125 = useTabContext();
  if (f125 === null)
    throw new Error("No TabContext provided");
  const b115 = s130 != null ? s130 : 0;
  const h115 = f125.value === b115;
  const g113 = f125.selectionFollowsFocus;
  const C24 = {
    role: "tab",
    "aria-controls": getPanelId(f125, b115),
    id: getTabId(f125, b115),
    "aria-selected": h115,
    disabled: a131.disabled
  };
  const handleFocus = (e229) => {
    if (g113 && !h115) {
      n123 && n123(e229, b115);
      f125.onSelected(e229, b115);
    }
    c123 && c123(e229);
  };
  const handleClick = (e321) => {
    if (!h115) {
      n123 && n123(e321, b115);
      f125.onSelected(e321, b115);
    }
    r138 && r138(e321);
  };
  const getRootProps = (o129) => {
    const t228 = i129(_extends({
      onClick: handleClick,
      onFocus: handleFocus
    }, o129));
    return _extends({}, t228, C24);
  };
  return _extends({
    getRootProps
  }, a131, {
    selected: h115
  });
};
var h8 = [
  "action",
  "children",
  "value",
  "className",
  "disabled",
  "onChange",
  "onClick",
  "onFocus",
  "component",
  "components",
  "componentsProps"
];
var useUtilityClasses8 = (e417) => {
  const { selected: o220, disabled: t320 } = e417;
  const s215 = {
    root: [
      "root",
      o220 && "selected",
      t320 && "disabled"
    ]
  };
  return composeClasses(s215, getTabUnstyledUtilityClass, {});
};
var g4 = l1(function TabUnstyled(s312, c213) {
  var i218, a215;
  const { action: m119, children: p120, className: u120, disabled: d121 = false, component: b210, components: y111 = {}, componentsProps: g210 = {} } = s312, C25 = _objectWithoutPropertiesLoose(s312, h8);
  const T21 = c1();
  const U16 = useForkRef(T21, c213);
  const { active: v32, focusVisible: R21, setFocusVisible: N23, selected: P, getRootProps: F16 } = useTab(_extends({}, s312, {
    ref: U16
  }));
  E2(m119, () => ({
    focusVisible: () => {
      N23(true);
      T21.current.focus();
    }
  }), [
    N23
  ]);
  const V18 = _extends({}, s312, {
    active: v32,
    focusVisible: R21,
    disabled: d121,
    selected: P
  });
  const j20 = useUtilityClasses8(V18);
  const x24 = (i218 = b210 != null ? b210 : y111.Root) != null ? i218 : "button";
  const k15 = appendOwnerState(x24, _extends({}, C25, g210.root), V18);
  return p4(x24, _extends({}, F16(), k15, {
    className: clsx_m(j20.root, (a215 = g210.root) == null ? void 0 : a215.className, u120),
    ref: c213,
    children: p120
  }));
});
false ? g4.propTypes = {
  action: s2.oneOfType([
    s2.func,
    s2.shape({
      current: s2.shape({
        focusVisible: s2.func.isRequired
      })
    })
  ]),
  children: s2.node,
  className: s2.string,
  component: s2.elementType,
  components: s2.shape({
    Root: s2.elementType
  }),
  componentsProps: s2.shape({
    root: s2.object
  }),
  disabled: s2.bool,
  onChange: s2.func,
  onClick: s2.func,
  onFocus: s2.func,
  value: s2.oneOfType([
    s2.number,
    s2.string
  ])
} : void 0;
var c7 = [
  "onChange",
  "maxRows",
  "minRows",
  "style",
  "value"
];
function getStyleValue(e146, t144) {
  return parseInt(e146[t144], 10) || 0;
}
var d9 = {
  shadow: {
    visibility: "hidden",
    position: "absolute",
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    transform: "translateZ(0)"
  }
};
var m8 = l1(function TextareaAutosize(o130, m120) {
  const { onChange: f126, maxRows: p30, minRows: h34 = 1, style: b32, value: g39 } = o130, y35 = _objectWithoutPropertiesLoose(o130, c7);
  const { current: v33 } = c1(g39 != null);
  const w24 = c1(null);
  const x25 = useForkRef(m120, w24);
  const R22 = c1(null);
  const S15 = c1(0);
  const [N24, O17] = s1({});
  const E25 = u2(() => {
    const e230 = w24.current;
    const t229 = ownerWindow(e230);
    const r139 = t229.getComputedStyle(e230);
    if (r139.width === "0px")
      return;
    const n124 = R22.current;
    n124.style.width = r139.width;
    n124.value = e230.value || o130.placeholder || "x";
    n124.value.slice(-1) === "\n" && (n124.value += " ");
    const a132 = r139["box-sizing"];
    const i130 = getStyleValue(r139, "padding-bottom") + getStyleValue(r139, "padding-top");
    const l122 = getStyleValue(r139, "border-bottom-width") + getStyleValue(r139, "border-top-width");
    const u121 = n124.scrollHeight;
    n124.value = "x";
    const c124 = n124.scrollHeight;
    let d122 = u121;
    h34 && (d122 = Math.max(Number(h34) * c124, d122));
    p30 && (d122 = Math.min(Number(p30) * c124, d122));
    d122 = Math.max(d122, c124);
    const m211 = d122 + (a132 === "border-box" ? i130 + l122 : 0);
    const f40 = Math.abs(d122 - u121) <= 1;
    O17((e322) => {
      if (S15.current < 20 && (m211 > 0 && Math.abs((e322.outerHeightStyle || 0) - m211) > 1 || e322.overflow !== f40)) {
        S15.current += 1;
        return {
          overflow: f40,
          outerHeightStyle: m211
        };
      }
      false;
      return e322;
    });
  }, [
    p30,
    h34,
    o130.placeholder
  ]);
  a1(() => {
    const e418 = debounce(() => {
      S15.current = 0;
      E25();
    });
    const t321 = ownerWindow(w24.current);
    t321.addEventListener("resize", e418);
    let r217;
    if (typeof ResizeObserver !== "undefined") {
      r217 = new ResizeObserver(e418);
      r217.observe(w24.current);
    }
    return () => {
      e418.clear();
      t321.removeEventListener("resize", e418);
      r217 && r217.disconnect();
    };
  }, [
    E25
  ]);
  d2(() => {
    E25();
  });
  a1(() => {
    S15.current = 0;
  }, [
    g39
  ]);
  const handleChange = (e515) => {
    S15.current = 0;
    v33 || E25();
    f126 && f126(e515);
  };
  return y3(d, {
    children: [
      p4("textarea", _extends({
        value: g39,
        onChange: handleChange,
        ref: x25,
        rows: h34,
        style: _extends({
          height: N24.outerHeightStyle,
          overflow: N24.overflow ? "hidden" : null
        }, b32)
      }, y35)),
      p4("textarea", {
        "aria-hidden": true,
        className: o130.className,
        readOnly: true,
        ref: R22,
        tabIndex: -1,
        style: _extends({}, d9.shadow, b32, {
          padding: 0
        })
      })
    ]
  });
});
false ? m8.propTypes = {
  className: s2.string,
  maxRows: s2.oneOfType([
    s2.number,
    s2.string
  ]),
  minRows: s2.oneOfType([
    s2.number,
    s2.string
  ]),
  onChange: s2.func,
  placeholder: s2.string,
  style: s2.object,
  value: s2.oneOfType([
    s2.arrayOf(s2.string),
    s2.number,
    s2.string
  ])
} : void 0;
function memoize(e60) {
  var t60 = /* @__PURE__ */ Object.create(null);
  return function(n59) {
    t60[n59] === void 0 && (t60[n59] = e60(n59));
    return t60[n59];
  };
}
var t14 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var r9 = memoize(function(e147) {
  return t14.test(e147) || e147.charCodeAt(0) === 111 && e147.charCodeAt(1) === 110 && e147.charCodeAt(2) < 91;
});
var e7 = true;
function getRegisteredStyles(e148, t145, r140) {
  var i35 = "";
  r140.split(" ").forEach(function(r50) {
    e148[r50] !== void 0 ? t145.push(e148[r50] + ";") : i35 += r50 + " ";
  });
  return i35;
}
var t15 = function insertStyles(t230, r55, i36) {
  var s46 = t230.key + "-" + r55.name;
  i36 !== false && e7 !== false || t230.registered[s46] !== void 0 || (t230.registered[s46] = r55.styles);
  if (t230.inserted[r55.name] === void 0) {
    var n60 = r55;
    do {
      t230.insert(r55 === n60 ? "." + s46 : "", n60, t230.sheet, true);
      n60 = n60.next;
    } while (n60 !== void 0);
  }
};
function murmur2(r56) {
  var t65 = 0;
  var a37, e66 = 0, c33 = r56.length;
  for (; c33 >= 4; ++e66, c33 -= 4) {
    a37 = 255 & r56.charCodeAt(e66) | (255 & r56.charCodeAt(++e66)) << 8 | (255 & r56.charCodeAt(++e66)) << 16 | (255 & r56.charCodeAt(++e66)) << 24;
    a37 = 1540483477 * (65535 & a37) + (59797 * (a37 >>> 16) << 16);
    a37 ^= a37 >>> 24;
    t65 = 1540483477 * (65535 & a37) + (59797 * (a37 >>> 16) << 16) ^ 1540483477 * (65535 & t65) + (59797 * (t65 >>> 16) << 16);
  }
  switch (c33) {
    case 3:
      t65 ^= (255 & r56.charCodeAt(e66 + 2)) << 16;
    case 2:
      t65 ^= (255 & r56.charCodeAt(e66 + 1)) << 8;
    case 1:
      t65 ^= 255 & r56.charCodeAt(e66);
      t65 = 1540483477 * (65535 & t65) + (59797 * (t65 >>> 16) << 16);
  }
  t65 ^= t65 >>> 13;
  t65 = 1540483477 * (65535 & t65) + (59797 * (t65 >>> 16) << 16);
  return ((t65 ^ t65 >>> 15) >>> 0).toString(36);
}
var o6 = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var a12 = /[A-Z]|^ms/g;
var i8 = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var s9 = function isCustomProperty(e149) {
  return e149.charCodeAt(1) === 45;
};
var l8 = function isProcessableValue(e231) {
  return e231 != null && typeof e231 !== "boolean";
};
var c8 = memoize(function(e323) {
  return s9(e323) ? e323 : e323.replace(a12, "-$&").toLowerCase();
});
var u8 = function processStyleValue(e419, t146) {
  switch (e419) {
    case "animation":
    case "animationName":
      if (typeof t146 === "string")
        return t146.replace(i8, function(e5, n125, t231) {
          E3 = {
            name: n125,
            styles: t231,
            next: E3
          };
          return n125;
        });
  }
  return o6[e419] === 1 || s9(e419) || typeof t146 !== "number" || t146 === 0 ? t146 : t146 + "px";
};
if (false) {
  p9 = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  d10 = [
    "normal",
    "none",
    "initial",
    "inherit",
    "unset"
  ];
  v7 = u8;
  f10 = /^-ms-/;
  m9 = /-(.)/g;
  h9 = {};
  u8 = function processStyleValue2(e516, n217) {
    if (e516 === "content" && (typeof n217 !== "string" || d10.indexOf(n217) === -1 && !p9.test(n217) && (n217.charAt(0) !== n217.charAt(n217.length - 1) || n217.charAt(0) !== '"' && n217.charAt(0) !== "'")))
      throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + n217 + "\"'`");
    var t322 = v7(e516, n217);
    if (t322 !== "" && !s9(e516) && e516.indexOf("-") !== -1 && h9[e516] === void 0) {
      h9[e516] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + e516.replace(f10, "ms-").replace(m9, function(e5, n313) {
        return n313.toUpperCase();
      }) + "?");
    }
    return t322;
  };
}
var p9;
var d10;
var v7;
var f10;
var m9;
var h9;
function handleInterpolation(e67, n413, t415) {
  if (t415 == null)
    return "";
  if (t415.__emotion_styles !== void 0) {
    if (false)
      throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
    return t415;
  }
  switch (typeof t415) {
    case "boolean":
      return "";
    case "object":
      if (t415.anim === 1) {
        E3 = {
          name: t415.name,
          styles: t415.styles,
          next: E3
        };
        return t415.name;
      }
      if (t415.styles !== void 0) {
        var r141 = t415.next;
        if (r141 !== void 0)
          while (r141 !== void 0) {
            E3 = {
              name: r141.name,
              styles: r141.styles,
              next: E3
            };
            r141 = r141.next;
          }
        var o131 = t415.styles + ";";
        false;
        return o131;
      }
      return createStringFromObject(e67, n413, t415);
    case "function":
      if (e67 !== void 0) {
        var a133 = E3;
        var s131 = t415(e67);
        E3 = a133;
        return handleInterpolation(e67, n413, s131);
      }
      false;
      break;
    case "string":
      if (false) {
        var l123 = [];
        var c125 = t415.replace(i8, function(e5, n8, t512) {
          var r218 = "animation" + l123.length;
          l123.push("const " + r218 + " = keyframes`" + t512.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + r218 + "}";
        });
        l123.length && console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(l123, [
          "`" + c125 + "`"
        ]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\ncss`" + c125 + "`");
      }
      break;
  }
  if (n413 == null)
    return t415;
  var u122 = n413[t415];
  return u122 !== void 0 ? u122 : t415;
}
function createStringFromObject(e71, n510, t66) {
  var r314 = "";
  if (Array.isArray(t66))
    for (var a216 = 0; a216 < t66.length; a216++)
      r314 += handleInterpolation(e71, n510, t66[a216]) + ";";
  else
    for (var i131 in t66) {
      var s216 = t66[i131];
      if (typeof s216 !== "object")
        n510 != null && n510[s216] !== void 0 ? r314 += i131 + "{" + n510[s216] + "}" : l8(s216) && (r314 += c8(i131) + ":" + u8(i131, s216) + ";");
      else {
        if (i131 === "NO_COMPONENT_SELECTOR" && false)
          throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
        if (!Array.isArray(s216) || typeof s216[0] !== "string" || n510 != null && n510[s216[0]] !== void 0) {
          var p31 = handleInterpolation(e71, n510, s216);
          switch (i131) {
            case "animation":
            case "animationName":
              r314 += c8(i131) + ":" + p31 + ";";
              break;
            default:
              false;
              r314 += i131 + "{" + p31 + "}";
          }
        } else
          for (var d31 = 0; d31 < s216.length; d31++)
            l8(s216[d31]) && (r314 += c8(i131) + ":" + u8(i131, s216[d31]) + ";");
      }
    }
  return r314;
}
var y6 = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var E3;
var b9 = function serializeStyles(n63, t75, o221) {
  if (n63.length === 1 && typeof n63[0] === "object" && n63[0] !== null && n63[0].styles !== void 0)
    return n63[0];
  var a38 = true;
  var i219 = "";
  E3 = void 0;
  var s313 = n63[0];
  if (s313 == null || s313.raw === void 0) {
    a38 = false;
    i219 += handleInterpolation(o221, t75, s313);
  } else {
    false;
    i219 += s313[0];
  }
  for (var l214 = 1; l214 < n63.length; l214++) {
    i219 += handleInterpolation(o221, t75, n63[l214]);
    if (a38) {
      false;
      i219 += s313[l214];
    }
  }
  var c214;
  false;
  y6.lastIndex = 0;
  var u213 = "";
  var p32;
  while ((p32 = y6.exec(i219)) !== null)
    u213 += "-" + p32[1];
  var d32 = murmur2(i219) + u213;
  return false ? {
    name: d32,
    styles: i219,
    map: c214,
    next: E3,
    toString: function toString() {
      return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
    }
  } : {
    name: d32,
    styles: i219,
    next: E3
  };
};
var d11 = r9;
var u9 = function testOmitPropsOnComponent(e150) {
  return e150 !== "theme";
};
var m10 = function getDefaultShouldForwardProp(e232) {
  return typeof e232 === "string" && e232.charCodeAt(0) > 96 ? d11 : u9;
};
var c9 = function composeShouldForwardProps(e324, r142, o132) {
  var t147;
  if (r142) {
    var a134 = r142.shouldForwardProp;
    t147 = e324.__emotion_forwardProp && a134 ? function(r219) {
      return e324.__emotion_forwardProp(r219) && a134(r219);
    } : a134;
  }
  typeof t147 !== "function" && o132 && (t147 = e324.__emotion_forwardProp);
  return t147;
};
var f11 = function Noop() {
  return null;
};
var _3 = function createStyled1(t232, d123) {
  if (false)
    throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
  var u123 = t232.__emotion_real === t232;
  var _18 = u123 && t232.__emotion_base || t232;
  var h116;
  var b116;
  if (d123 !== void 0) {
    h116 = d123.label;
    b116 = d123.target;
  }
  var y36 = c9(t232, d123, u123);
  var g40 = y36 || m10(_18);
  var N25 = !g40("as");
  return function() {
    var w110 = arguments;
    var E26 = u123 && t232.__emotion_styles !== void 0 ? t232.__emotion_styles.slice(0) : [];
    h116 !== void 0 && E26.push("label:" + h116 + ";");
    if (w110[0] == null || w110[0].raw === void 0)
      E26.push.apply(E26, w110);
    else {
      false;
      E26.push(w110[0][0]);
      var P = w110.length;
      var S16 = 1;
      for (; S16 < P; S16++) {
        false;
        E26.push(w110[S16], w110[0][S16]);
      }
    }
    var O1 = i(function(t323, a217, n126) {
      var d210 = N25 && t323.as || _18;
      var u214 = "";
      var c126 = [];
      var v114 = t323;
      if (t323.theme == null) {
        v114 = {};
        for (var h212 in t323)
          v114[h212] = t323[h212];
        v114.theme = r1(n);
      }
      typeof t323.className === "string" ? u214 = getRegisteredStyles(a217.registered, c126, t323.className) : t323.className != null && (u214 = t323.className + " ");
      var w25 = b9(E26.concat(c126), a217.registered, v114);
      t15(a217, w25, typeof d210 === "string");
      u214 += a217.key + "-" + w25.name;
      b116 !== void 0 && (u214 += " " + b116);
      var P4 = N25 && y36 === void 0 ? m10(d210) : g40;
      var S17 = {};
      for (var O18 in t323)
        N25 && O18 === "as" || P4(O18) && (S17[O18] = t323[O18]);
      S17.className = u214;
      S17.ref = n126;
      var k16 = f(d210, S17);
      var C26 = f(f11, null);
      return f(d, null, C26, k16);
    });
    O1.displayName = h116 !== void 0 ? h116 : "Styled(" + (typeof _18 === "string" ? _18 : _18.displayName || _18.name || "Component") + ")";
    O1.defaultProps = t232.defaultProps;
    O1.__emotion_real = O1;
    O1.__emotion_base = _18;
    O1.__emotion_styles = E26;
    O1.__emotion_forwardProp = y36;
    Object.defineProperty(O1, "toString", {
      value: function value() {
        return b116 === void 0 && false ? "NO_COMPONENT_SELECTOR" : "." + b116;
      }
    });
    O1.withComponent = function(e420, r315) {
      return createStyled1(e420, _extends({}, d123, r315, {
        shouldForwardProp: c9(O1, r315, true)
      })).apply(void 0, E26);
    };
    return O1;
  };
};
var h10 = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var b10 = _3.bind();
h10.forEach(function(e517) {
  b10[e517] = b10(e517);
});
function sheetForTag(e151) {
  if (e151.sheet)
    return e151.sheet;
  for (var t67 = 0; t67 < document.styleSheets.length; t67++)
    if (document.styleSheets[t67].ownerNode === e151)
      return document.styleSheets[t67];
}
function createStyleElement(e233) {
  var t68 = document.createElement("style");
  t68.setAttribute("data-emotion", e233.key);
  e233.nonce !== void 0 && t68.setAttribute("nonce", e233.nonce);
  t68.appendChild(document.createTextNode(""));
  t68.setAttribute("data-s", "");
  return t68;
}
var e8 = function() {
  function StyleSheet(e421) {
    var t69 = this;
    this._insertTag = function(e518) {
      var r57;
      r57 = t69.tags.length === 0 ? t69.insertionPoint ? t69.insertionPoint.nextSibling : t69.prepend ? t69.container.firstChild : t69.before : t69.tags[t69.tags.length - 1].nextSibling;
      t69.container.insertBefore(e518, r57);
      t69.tags.push(e518);
    };
    this.isSpeedy = e421.speedy === void 0 ? true : e421.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = e421.nonce;
    this.key = e421.key;
    this.container = e421.container;
    this.prepend = e421.prepend;
    this.insertionPoint = e421.insertionPoint;
    this.before = null;
  }
  var e325 = StyleSheet.prototype;
  e325.hydrate = function hydrate(e68) {
    e68.forEach(this._insertTag);
  };
  e325.insert = function insert(e72) {
    this.ctr % (this.isSpeedy ? 65e3 : 1) === 0 && this._insertTag(createStyleElement(this));
    var t70 = this.tags[this.tags.length - 1];
    if (false) {
      var r58 = e72.charCodeAt(0) === 64 && e72.charCodeAt(1) === 105;
      r58 && this._alreadyInsertedOrderInsensitiveRule && console.error("You're attempting to insert the following rule:\n" + e72 + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !r58;
    }
    if (this.isSpeedy) {
      var n64 = sheetForTag(t70);
      try {
        n64.insertRule(e72, n64.cssRules.length);
      } catch (t76) {
        true;
      }
    } else
      t70.appendChild(document.createTextNode(e72));
    this.ctr++;
  };
  e325.flush = function flush() {
    this.tags.forEach(function(e81) {
      return e81.parentNode && e81.parentNode.removeChild(e81);
    });
    this.tags = [];
    this.ctr = 0;
    false;
  };
  return StyleSheet;
}();
var e9 = "-ms-";
var r11 = "-moz-";
var a13 = "-webkit-";
var c10 = "comm";
var t16 = "rule";
var n7 = "decl";
var u10 = "@import";
var v9 = "@keyframes";
var k2 = Math.abs;
var w4 = String.fromCharCode;
var x6 = Object.assign;
function hash(e152, r143) {
  return (((r143 << 2 ^ charat(e152, 0)) << 2 ^ charat(e152, 1)) << 2 ^ charat(e152, 2)) << 2 ^ charat(e152, 3);
}
function trim(e234) {
  return e234.trim();
}
function match(e326, r220) {
  return (e326 = r220.exec(e326)) ? e326[0] : e326;
}
function replace(e422, r316, a135) {
  return e422.replace(r316, a135);
}
function indexof(e519, r410) {
  return e519.indexOf(r410);
}
function charat(e69, r59) {
  return 0 | e69.charCodeAt(r59);
}
function substr(e73, r63, a218) {
  return e73.slice(r63, a218);
}
function strlen(e82) {
  return e82.length;
}
function sizeof(e91) {
  return e91.length;
}
function append(e102, r73) {
  return r73.push(e102), e102;
}
function combine(e112, r83) {
  return e112.map(r83).join("");
}
var $1 = 1;
var g6 = 1;
var z1 = 0;
var y7 = 0;
var j3 = 0;
var C3 = "";
function node(e122, r91, a39, c127, t148, n127, s132) {
  return {
    value: e122,
    root: r91,
    parent: a39,
    type: c127,
    props: t148,
    children: n127,
    line: $1,
    column: g6,
    length: s132,
    return: ""
  };
}
function copy(e13, r101) {
  return x6(node("", null, null, "", null, null, 0), e13, {
    length: -e13.length
  }, r101);
}
function __char() {
  return j3;
}
function prev() {
  j3 = y7 > 0 ? charat(C3, --y7) : 0;
  (g6--, j3 === 10) && (g6 = 1, $1--);
  return j3;
}
function next() {
  j3 = y7 < z1 ? charat(C3, y7++) : 0;
  (g6++, j3 === 10) && (g6 = 1, $1++);
  return j3;
}
function peek() {
  return charat(C3, y7);
}
function caret() {
  return y7;
}
function slice(e14, r1110) {
  return substr(C3, e14, r1110);
}
function token(e15) {
  switch (e15) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(e16) {
  return $1 = g6 = 1, z1 = strlen(C3 = e16), y7 = 0, [];
}
function dealloc(e17) {
  return C3 = "", e17;
}
function delimit(e18) {
  return trim(slice(y7 - 1, delimiter(e18 === 91 ? e18 + 2 : e18 === 40 ? e18 + 1 : e18)));
}
function whitespace(e20) {
  while (j3 = peek()) {
    if (!(j3 < 33))
      break;
    next();
  }
  return token(e20) > 2 || token(j3) > 3 ? "" : " ";
}
function escaping(e22, r122) {
  while (--r122 && next())
    if (j3 < 48 || j3 > 102 || j3 > 57 && j3 < 65 || j3 > 70 && j3 < 97)
      break;
  return slice(e22, caret() + (r122 < 6 && peek() == 32 && next() == 32));
}
function delimiter(e23) {
  while (next())
    switch (j3) {
      case e23:
        return y7;
      case 34:
      case 39:
        e23 !== 34 && e23 !== 39 && delimiter(j3);
        break;
      case 40:
        e23 === 41 && delimiter(e23);
        break;
      case 92:
        next();
        break;
    }
  return y7;
}
function commenter(e24, r132) {
  while (next()) {
    if (e24 + j3 === 57)
      break;
    if (e24 + j3 === 84 && peek() === 47)
      break;
  }
  return "/*" + slice(r132, y7 - 1) + "*" + w4(e24 === 47 ? e24 : next());
}
function identifier(e25) {
  while (!token(peek()))
    next();
  return slice(e25, y7);
}
function compile(e26) {
  return dealloc(parse("", null, null, null, [
    ""
  ], e26 = alloc(e26), 0, [
    0
  ], e26));
}
function parse(e27, r14, a42, c215, t233, n218, s217, i132, u124) {
  var l124 = 0;
  var o133 = 0;
  var p121 = s217;
  var f127 = 0;
  var h117 = 0;
  var v115 = 0;
  var d124 = 1;
  var m121 = 1;
  var b117 = 1;
  var k17 = 0;
  var x111 = "";
  var $11 = t233;
  var g114 = n218;
  var z13 = c215;
  var y112 = x111;
  while (m121)
    switch (v115 = k17, k17 = next()) {
      case 40:
        if (v115 != 108 && y112.charCodeAt(p121 - 1) == 58) {
          indexof(y112 += replace(delimit(k17), "&", "&\f"), "&\f") != -1 && (b117 = -1);
          break;
        }
      case 34:
      case 39:
      case 91:
        y112 += delimit(k17);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        y112 += whitespace(v115);
        break;
      case 92:
        y112 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), r14, a42), u124);
            break;
          default:
            y112 += "/";
        }
        break;
      case 123 * d124:
        i132[l124++] = strlen(y112) * b117;
      case 125 * d124:
      case 59:
      case 0:
        switch (k17) {
          case 0:
          case 125:
            m121 = 0;
          case 59 + o133:
            h117 > 0 && strlen(y112) - p121 && append(h117 > 32 ? declaration(y112 + ";", c215, a42, p121 - 1) : declaration(replace(y112, " ", "") + ";", c215, a42, p121 - 2), u124);
            break;
          case 59:
            y112 += ";";
          default:
            append(z13 = ruleset(y112, r14, a42, l124, o133, t233, i132, x111, $11 = [], g114 = [], p121), n218);
            if (k17 === 123)
              if (o133 === 0)
                parse(y112, r14, z13, z13, $11, n218, p121, i132, g114);
              else
                switch (f127) {
                  case 100:
                  case 109:
                  case 115:
                    parse(e27, z13, z13, c215 && append(ruleset(e27, z13, z13, 0, 0, t233, i132, x111, t233, $11 = [], p121), g114), t233, g114, p121, i132, c215 ? $11 : g114);
                    break;
                  default:
                    parse(y112, z13, z13, z13, [
                      ""
                    ], g114, 0, i132, g114);
                }
        }
        l124 = o133 = h117 = 0, d124 = b117 = 1, x111 = y112 = "", p121 = s217;
        break;
      case 58:
        p121 = 1 + strlen(y112), h117 = v115;
      default:
        if (d124 < 1) {
          if (k17 == 123)
            --d124;
          else if (k17 == 125 && d124++ == 0 && prev() == 125)
            continue;
        }
        switch (y112 += w4(k17), k17 * d124) {
          case 38:
            b117 = o133 > 0 ? 1 : (y112 += "\f", -1);
            break;
          case 44:
            i132[l124++] = (strlen(y112) - 1) * b117, b117 = 1;
            break;
          case 64:
            peek() === 45 && (y112 += delimit(next()));
            f127 = peek(), o133 = p121 = strlen(x111 = y112 += identifier(caret())), k17++;
            break;
          case 45:
            v115 === 45 && strlen(y112) == 2 && (d124 = 0);
        }
    }
  return n218;
}
function ruleset(e28, r15, a52, c34, n314, s314, i220, u215, l215, o222, p213) {
  var f212 = n314 - 1;
  var h213 = n314 === 0 ? s314 : [
    ""
  ];
  var v211 = sizeof(h213);
  for (var d211 = 0, m212 = 0, b211 = 0; d211 < c34; ++d211)
    for (var w111 = 0, x26 = substr(e28, f212 + 1, f212 = k2(m212 = i220[d211])), $23 = e28; w111 < v211; ++w111)
      ($23 = trim(m212 > 0 ? h213[w111] + " " + x26 : replace(x26, /&\f/g, h213[w111]))) && (l215[b211++] = $23);
  return node(e28, r15, a52, n314 === 0 ? t16 : u215, l215, o222, p213);
}
function comment(e29, r16, a62) {
  return node(e29, r16, a62, c10, w4(__char()), substr(e29, 2, -2), 0);
}
function declaration(e30, r17, a72, c41) {
  return node(e30, r17, a72, n7, substr(e30, 0, c41), substr(e30, c41 + 1, -1), c41);
}
function prefix(c51, t324) {
  switch (hash(c51, t324)) {
    case 5103:
      return a13 + "print-" + c51 + c51;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return a13 + c51 + c51;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return a13 + c51 + r11 + c51 + e9 + c51 + c51;
    case 6828:
    case 4268:
      return a13 + c51 + e9 + c51 + c51;
    case 6165:
      return a13 + c51 + e9 + "flex-" + c51 + c51;
    case 5187:
      return a13 + c51 + replace(c51, /(\w+).+(:[^]+)/, a13 + "box-$1$2" + e9 + "flex-$1$2") + c51;
    case 5443:
      return a13 + c51 + e9 + "flex-item-" + replace(c51, /flex-|-self/, "") + c51;
    case 4675:
      return a13 + c51 + e9 + "flex-line-pack" + replace(c51, /align-content|flex-|-self/, "") + c51;
    case 5548:
      return a13 + c51 + e9 + replace(c51, "shrink", "negative") + c51;
    case 5292:
      return a13 + c51 + e9 + replace(c51, "basis", "preferred-size") + c51;
    case 6060:
      return a13 + "box-" + replace(c51, "-grow", "") + a13 + c51 + e9 + replace(c51, "grow", "positive") + c51;
    case 4554:
      return a13 + replace(c51, /([^-])(transform)/g, "$1" + a13 + "$2") + c51;
    case 6187:
      return replace(replace(replace(c51, /(zoom-|grab)/, a13 + "$1"), /(image-set)/, a13 + "$1"), c51, "") + c51;
    case 5495:
    case 3959:
      return replace(c51, /(image-set\([^]*)/, a13 + "$1$`$1");
    case 4968:
      return replace(replace(c51, /(.+:)(flex-)?(.*)/, a13 + "box-pack:$3" + e9 + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a13 + c51 + c51;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(c51, /(.+)-inline(.+)/, a13 + "$1$2") + c51;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(c51) - 1 - t324 > 6)
        switch (charat(c51, t324 + 1)) {
          case 109:
            if (charat(c51, t324 + 4) !== 45)
              break;
          case 102:
            return replace(c51, /(.+:)(.+)-([^]+)/, "$1" + a13 + "$2-$3$1" + r11 + (charat(c51, t324 + 3) == 108 ? "$3" : "$2-$3")) + c51;
          case 115:
            return ~indexof(c51, "stretch") ? prefix(replace(c51, "stretch", "fill-available"), t324) + c51 : c51;
        }
      break;
    case 4949:
      if (charat(c51, t324 + 1) !== 115)
        break;
    case 6444:
      switch (charat(c51, strlen(c51) - 3 - (~indexof(c51, "!important") && 10))) {
        case 107:
          return replace(c51, ":", ":" + a13) + c51;
        case 101:
          return replace(c51, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a13 + (charat(c51, 14) === 45 ? "inline-" : "") + "box$3$1" + a13 + "$2$3$1" + e9 + "$2box$3") + c51;
      }
      break;
    case 5936:
      switch (charat(c51, t324 + 11)) {
        case 114:
          return a13 + c51 + e9 + replace(c51, /[svh]\w+-[tblr]{2}/, "tb") + c51;
        case 108:
          return a13 + c51 + e9 + replace(c51, /[svh]\w+-[tblr]{2}/, "tb-rl") + c51;
        case 45:
          return a13 + c51 + e9 + replace(c51, /[svh]\w+-[tblr]{2}/, "lr") + c51;
      }
      return a13 + c51 + e9 + c51 + c51;
  }
  return c51;
}
function serialize(e31, r18) {
  var a82 = "";
  var c61 = sizeof(e31);
  for (var t416 = 0; t416 < c61; t416++)
    a82 += r18(e31[t416], t416, e31, r18) || "";
  return a82;
}
function stringify(e32, r, a92, s47) {
  switch (e32.type) {
    case u10:
    case n7:
      return e32.return = e32.return || e32.value;
    case c10:
      return "";
    case v9:
      return e32.return = e32.value + "{" + serialize(e32.children, s47) + "}";
    case t16:
      e32.value = e32.props.join(",");
  }
  return strlen(a92 = serialize(e32.children, s47)) ? e32.return = e32.value + "{" + a92 + "}" : "";
}
function middleware(e33) {
  var r19 = sizeof(e33);
  return function(a102, c71, t513, n414) {
    var s5 = "";
    for (var i37 = 0; i37 < r19; i37++)
      s5 += e33[i37](a102, c71, t513, n414) || "";
    return s5;
  };
}
function rulesheet(e34) {
  return function(r20) {
    r20.root || (r20 = r20.return) && e34(r20);
  };
}
function prefixer(c81, s, i13, u32) {
  if (c81.length > -1 && !c81.return)
    switch (c81.type) {
      case n7:
        c81.return = prefix(c81.value, c81.length);
        break;
      case v9:
        return serialize([
          copy(c81, {
            value: replace(c81.value, "@", "@" + a13)
          })
        ], u32);
      case t16:
        if (c81.length)
          return combine(c81.props, function(t610) {
            switch (match(t610, /(::plac\w+|:read-\w+)/)) {
              case ":read-only":
              case ":read-write":
                return serialize([
                  copy(c81, {
                    props: [
                      replace(t610, /:(read-\w+)/, ":" + r11 + "$1")
                    ]
                  })
                ], u32);
              case "::placeholder":
                return serialize([
                  copy(c81, {
                    props: [
                      replace(t610, /:(plac\w+)/, ":" + a13 + "input-$1")
                    ]
                  }),
                  copy(c81, {
                    props: [
                      replace(t610, /:(plac\w+)/, ":" + r11 + "$1")
                    ]
                  }),
                  copy(c81, {
                    props: [
                      replace(t610, /:(plac\w+)/, e9 + "input-$1")
                    ]
                  })
                ], u32);
            }
            return "";
          });
    }
}
var g7 = function identifierWithPointTracking(e235, i133, s133) {
  var u125 = 0;
  var l125 = 0;
  while (true) {
    u125 = l125;
    l125 = peek();
    u125 === 38 && l125 === 12 && (i133[s133] = 1);
    if (token(l125))
      break;
    next();
  }
  return slice(e235, y7);
};
var b11 = function toRules(e327, o134) {
  var u216 = -1;
  var l216 = 44;
  do {
    switch (token(l216)) {
      case 0:
        l216 === 38 && peek() === 12 && (o134[u216] = 1);
        e327[u216] += g7(y7 - 1, o134, u216);
        break;
      case 2:
        e327[u216] += delimit(l216);
        break;
      case 4:
        if (l216 === 44) {
          e327[++u216] = peek() === 58 ? "&\f" : "";
          o134[u216] = e327[u216].length;
          break;
        }
      default:
        e327[u216] += w4(l216);
    }
  } while (l216 = next());
  return e327;
};
var w5 = function getRules(e423, r144) {
  return dealloc(b11(alloc(e423), r144));
};
var E4 = /* @__PURE__ */ new WeakMap();
var k3 = function compat(e520) {
  if (e520.type === "rule" && e520.parent && !(e520.length < 1)) {
    var r221 = e520.value, t149 = e520.parent;
    var n128 = e520.column === t149.column && e520.line === t149.line;
    while (t149.type !== "rule") {
      t149 = t149.parent;
      if (!t149)
        return;
    }
    if ((e520.props.length !== 1 || r221.charCodeAt(0) === 58 || E4.get(t149)) && !n128) {
      E4.set(e520, true);
      var o223 = [];
      var a136 = w5(r221, o223);
      var i221 = t149.props;
      for (var s218 = 0, u33 = 0; s218 < a136.length; s218++)
        for (var l37 = 0; l37 < i221.length; l37++, u33++)
          e520.props[u33] = o223[s218] ? a136[s218].replace(/&\f/g, i221[l37]) : i221[l37] + " " + a136[s218];
    }
  }
};
var A1 = function removeLabel(e610) {
  if (e610.type === "decl") {
    var r317 = e610.value;
    if (r317.charCodeAt(0) === 108 && r317.charCodeAt(2) === 98) {
      e610.return = "";
      e610.value = "";
    }
  }
};
var _4 = [
  prefixer
];
var q22 = function createCache(r74) {
  var t514 = r74.key;
  if (false)
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  if (t514 === "css") {
    var n315 = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(n315, function(e14) {
      var r84 = e14.getAttribute("data-emotion");
      if (r84.indexOf(" ") !== -1) {
        document.head.appendChild(e14);
        e14.setAttribute("data-s", "");
      }
    });
  }
  var o411 = r74.stylisPlugins || _4;
  if (false)
    throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + t514 + '" was passed');
  var a310 = {};
  var i38;
  var s315 = [];
  i38 = r74.container || document.head;
  Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + t514 + ' "]'), function(e15) {
    var r92 = e15.getAttribute("data-emotion").split(" ");
    for (var t611 = 1; t611 < r92.length; t611++)
      a310[r92[t611]] = true;
    s315.push(e15);
  });
  var u42;
  var l42 = [
    k3,
    A1
  ];
  false;
  var c128;
  var y113 = [
    stringify,
    false ? function(e16) {
      e16.root || (e16.return ? c128.insert(e16.return) : e16.value && e16.type !== c10 && c128.insert(e16.value + "{}"));
    } : rulesheet(function(e17) {
      c128.insert(e17);
    })
  ];
  var g115 = middleware(l42.concat(o411, y113));
  var b118 = function stylis(e18) {
    return serialize(compile(e18), g115);
  };
  u42 = function insert(e19, r102, t77, n415) {
    c128 = t77;
    false;
    b118(e19 ? e19 + "{" + r102.styles + "}" : r102.styles);
    n415 && (w112.inserted[r102.name] = true);
  };
  var w112 = {
    key: t514,
    sheet: new e8({
      key: t514,
      container: i38,
      nonce: r74.nonce,
      speedy: r74.speedy,
      prepend: r74.prepend,
      insertionPoint: r74.insertionPoint
    }),
    nonce: r74.nonce,
    inserted: a310,
    registered: {},
    insert: u42
  };
  w112.sheet.hydrate(s315);
  return w112;
};
var i9 = q22({
  key: "css",
  prepend: true
});
false ? StyledEngineProvider.propTypes = {
  children: s2.node,
  injectFirst: s2.bool
} : void 0;
false ? GlobalStyles.propTypes = {
  defaultTheme: s2.object,
  styles: s2.oneOfType([
    s2.string,
    s2.object,
    s2.func
  ])
} : void 0;
function styled(o50, t151) {
  const r65 = b10(o50, t151);
  return false ? (...e155) => {
    const t78 = typeof o50 === "string" ? `"${o50}"` : "component";
    e155.length === 0 ? console.error([
      `MUI: Seems like you called \`styled(${t78})()\` without a \`style\` argument.`,
      'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'
    ].join("\n")) : e155.some((e236) => e236 === void 0) && console.error(`MUI: the styled(${t78})(...args) API requires all its args to be defined.`);
    return r65(...e155);
  } : r65;
}
var o8 = false ? s2.oneOfType([
  s2.number,
  s2.string,
  s2.object,
  s2.array
]) : {};
function merge(e156, n129) {
  return n129 ? deepmerge(e156, n129, {
    clone: false
  }) : e156;
}
var s10 = {
  xs: 0,
  sm: 600,
  md: 900,
  lg: 1200,
  xl: 1536
};
var i10 = {
  keys: [
    "xs",
    "sm",
    "md",
    "lg",
    "xl"
  ],
  up: (e237) => `@media (min-width:${s10[e237]}px)`
};
function handleBreakpoints(e328, n220, r145) {
  const t152 = e328.theme || {};
  if (Array.isArray(n220)) {
    const e424 = t152.breakpoints || i10;
    return n220.reduce((t236, o4, s134) => {
      t236[e424.up(e424.keys[s134])] = r145(n220[s134]);
      return t236;
    }, {});
  }
  if (typeof n220 === "object") {
    const e521 = t152.breakpoints || i10;
    return Object.keys(n220).reduce((t327, o224) => {
      if (Object.keys(e521.values || s10).indexOf(o224) !== -1) {
        const s219 = e521.up(o224);
        t327[s219] = r145(n220[o224], o224);
      } else {
        const e611 = o224;
        t327[e611] = n220[e611];
      }
      return t327;
    }, {});
  }
  const o136 = r145(n220);
  return o136;
}
function createEmptyBreakpointObject(e84 = {}) {
  var n316;
  const r318 = e84 == null || (n316 = e84.keys) == null ? void 0 : n316.reduce((n416, r412) => {
    const t515 = e84.up(r412);
    n416[t515] = {};
    return n416;
  }, {});
  return r318 || {};
}
function removeUnusedBreakpoints(e93, n511) {
  return e93.reduce((e102, n67) => {
    const r511 = e102[n67];
    const t612 = !r511 || Object.keys(r511).length === 0;
    t612 && delete e102[n67];
    return e102;
  }, n511);
}
function getPath(e15, n14) {
  return n14 && typeof n14 === "string" ? n14.split(".").reduce((e16, n15) => e16 && e16[n15] ? e16[n15] : null, e15) : null;
}
function getValue$1(e17, n16, r93, t1211 = r93) {
  let o71;
  o71 = typeof e17 === "function" ? e17(r93) : Array.isArray(e17) ? e17[r93] || t1211 : getPath(e17, r93) || t1211;
  n16 && (o71 = n16(o71));
  return o71;
}
function style$1(e18) {
  const { prop: n17, cssProperty: r103 = e18.prop, themeKey: s5, transform: i222 } = e18;
  const fn2 = (e19) => {
    if (e19[n17] == null)
      return null;
    const o81 = e19[n17];
    const a220 = e19.theme;
    const c129 = getPath(a220, s5) || {};
    const styleFromPropValue = (e20) => {
      let o92 = getValue$1(c129, i222, e20);
      e20 === o92 && typeof e20 === "string" && (o92 = getValue$1(c129, i222, `${n17}${e20 === "default" ? "" : capitalize(e20)}`, e20));
      return r103 === false ? o92 : {
        [r103]: o92
      };
    };
    return handleBreakpoints(e19, o81, styleFromPropValue);
  };
  fn2.propTypes = false ? {
    [n17]: o8
  } : {};
  fn2.filterProps = [
    n17
  ];
  return fn2;
}
function memoize1(e21) {
  const n18 = {};
  return (r1111) => {
    n18[r1111] === void 0 && (n18[r1111] = e21(r1111));
    return n18[r1111];
  };
}
var a14 = {
  m: "margin",
  p: "padding"
};
var c11 = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: [
    "Left",
    "Right"
  ],
  y: [
    "Top",
    "Bottom"
  ]
};
var u11 = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
};
var p10 = memoize1((e22) => {
  if (e22.length > 2) {
    if (!u11[e22])
      return [
        e22
      ];
    e22 = u11[e22];
  }
  const [n19, r122] = e22.split("");
  const t1310 = a14[n19];
  const o10 = c11[r122] || "";
  return Array.isArray(o10) ? o10.map((e23) => t1310 + e23) : [
    t1310 + o10
  ];
});
var l9 = [
  "m",
  "mt",
  "mr",
  "mb",
  "ml",
  "mx",
  "my",
  "margin",
  "marginTop",
  "marginRight",
  "marginBottom",
  "marginLeft",
  "marginX",
  "marginY",
  "marginInline",
  "marginInlineStart",
  "marginInlineEnd",
  "marginBlock",
  "marginBlockStart",
  "marginBlockEnd"
];
var d12 = [
  "p",
  "pt",
  "pr",
  "pb",
  "pl",
  "px",
  "py",
  "padding",
  "paddingTop",
  "paddingRight",
  "paddingBottom",
  "paddingLeft",
  "paddingX",
  "paddingY",
  "paddingInline",
  "paddingInlineStart",
  "paddingInlineEnd",
  "paddingBlock",
  "paddingBlockStart",
  "paddingBlockEnd"
];
var g8 = [
  ...l9,
  ...d12
];
function createUnaryUnit(e24, n20, r132, t1410) {
  const o11 = getPath(e24, n20) || r132;
  if (typeof o11 === "number")
    return (e25) => {
      if (typeof e25 === "string")
        return e25;
      false;
      return o11 * e25;
    };
  if (Array.isArray(o11))
    return (e26) => {
      if (typeof e26 === "string")
        return e26;
      false;
      return o11[e26];
    };
  if (typeof o11 === "function")
    return o11;
  false;
  return () => {
  };
}
function createUnarySpacing(e27) {
  return createUnaryUnit(e27, "spacing", 8, "spacing");
}
function getValue(e28, n21) {
  if (typeof n21 === "string" || n21 == null)
    return n21;
  const r14 = Math.abs(n21);
  const t153 = e28(r14);
  return n21 >= 0 ? t153 : typeof t153 === "number" ? -t153 : `-${t153}`;
}
function getStyleFromPropValue(e29, n22) {
  return (r15) => e29.reduce((e30, t161) => {
    e30[t161] = getValue(n22, r15);
    return e30;
  }, {});
}
function resolveCssProperty(e31, n23, r16, t172) {
  if (n23.indexOf(r16) === -1)
    return null;
  const o12 = p10(r16);
  const s62 = getStyleFromPropValue(o12, t172);
  const i39 = e31[r16];
  return handleBreakpoints(e31, i39, s62);
}
function style(e32, n24) {
  const r17 = createUnarySpacing(e32.theme);
  return Object.keys(e32).map((t182) => resolveCssProperty(e32, n24, t182, r17)).reduce(merge, {});
}
function margin(e33) {
  return style(e33, l9);
}
margin.propTypes = false ? l9.reduce((e34, n25) => {
  e34[n25] = o8;
  return e34;
}, {}) : {};
margin.filterProps = l9;
function padding(e35) {
  return style(e35, d12);
}
padding.propTypes = false ? d12.reduce((e36, n26) => {
  e36[n26] = o8;
  return e36;
}, {}) : {};
padding.filterProps = d12;
function spacing(e37) {
  return style(e37, g8);
}
spacing.propTypes = false ? g8.reduce((e38, n27) => {
  e38[n27] = o8;
  return e38;
}, {}) : {};
spacing.filterProps = g8;
function compose(...r146) {
  const s135 = r146.reduce((o137, r222) => {
    r222.filterProps.forEach((s220) => {
      o137[s220] = r222;
    });
    return o137;
  }, {});
  const fn2 = (r319) => Object.keys(r319).reduce((t154, e157) => s135[e157] ? merge(t154, s135[e157](r319)) : t154, {});
  fn2.propTypes = false ? r146.reduce((o225, r413) => Object.assign(o225, r413.propTypes), {}) : {};
  fn2.filterProps = r146.reduce((o316, r512) => o316.concat(r512.filterProps), []);
  return fn2;
}
function getBorder(o412) {
  return typeof o412 !== "number" ? o412 : `${o412}px solid`;
}
var u12 = style$1({
  prop: "border",
  themeKey: "borders",
  transform: getBorder
});
var d13 = style$1({
  prop: "borderTop",
  themeKey: "borders",
  transform: getBorder
});
var y9 = style$1({
  prop: "borderRight",
  themeKey: "borders",
  transform: getBorder
});
var h11 = style$1({
  prop: "borderBottom",
  themeKey: "borders",
  transform: getBorder
});
var g9 = style$1({
  prop: "borderLeft",
  themeKey: "borders",
  transform: getBorder
});
var b12 = style$1({
  prop: "borderColor",
  themeKey: "palette"
});
var x7 = style$1({
  prop: "borderTopColor",
  themeKey: "palette"
});
var P2 = style$1({
  prop: "borderRightColor",
  themeKey: "palette"
});
var v10 = style$1({
  prop: "borderBottomColor",
  themeKey: "palette"
});
var w6 = style$1({
  prop: "borderLeftColor",
  themeKey: "palette"
});
var borderRadius = (o56) => {
  if (o56.borderRadius !== void 0 && o56.borderRadius !== null) {
    const r66 = createUnaryUnit(o56.theme, "shape.borderRadius", 4, "borderRadius");
    const styleFromPropValue = (o61) => ({
      borderRadius: getValue(r66, o61)
    });
    return handleBreakpoints(o56, o56.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = false ? {
  borderRadius: o8
} : {};
borderRadius.filterProps = [
  "borderRadius"
];
var K1 = compose(u12, d13, y9, h11, g9, b12, x7, P2, v10, w6, borderRadius);
var j4 = style$1({
  prop: "displayPrint",
  cssProperty: false,
  transform: (o72) => ({
    "@media print": {
      display: o72
    }
  })
});
var S3 = style$1({
  prop: "display"
});
var T2 = style$1({
  prop: "overflow"
});
var G1 = style$1({
  prop: "textOverflow"
});
var k4 = style$1({
  prop: "visibility"
});
var E5 = style$1({
  prop: "whiteSpace"
});
var O2 = compose(j4, S3, T2, G1, k4, E5);
var R4 = style$1({
  prop: "flexBasis"
});
var C5 = style$1({
  prop: "flexDirection"
});
var A2 = style$1({
  prop: "flexWrap"
});
var N3 = style$1({
  prop: "justifyContent"
});
var z2 = style$1({
  prop: "alignItems"
});
var B1 = style$1({
  prop: "alignContent"
});
var V3 = style$1({
  prop: "order"
});
var W2 = style$1({
  prop: "flex"
});
var F1 = style$1({
  prop: "flexGrow"
});
var D3 = style$1({
  prop: "flexShrink"
});
var I1 = style$1({
  prop: "alignSelf"
});
var H1 = style$1({
  prop: "justifyItems"
});
var _5 = style$1({
  prop: "justifySelf"
});
var L2 = compose(R4, C5, A2, N3, z2, B1, V3, W2, F1, D3, I1, H1, _5);
var gap = (o82) => {
  if (o82.gap !== void 0 && o82.gap !== null) {
    const r75 = createUnaryUnit(o82.theme, "spacing", 8, "gap");
    const styleFromPropValue = (o92) => ({
      gap: getValue(r75, o92)
    });
    return handleBreakpoints(o82, o82.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = false ? {
  gap: o8
} : {};
gap.filterProps = [
  "gap"
];
var columnGap = (o10) => {
  if (o10.columnGap !== void 0 && o10.columnGap !== null) {
    const r85 = createUnaryUnit(o10.theme, "spacing", 8, "columnGap");
    const styleFromPropValue = (o11) => ({
      columnGap: getValue(r85, o11)
    });
    return handleBreakpoints(o10, o10.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = false ? {
  columnGap: o8
} : {};
columnGap.filterProps = [
  "columnGap"
];
var rowGap = (o12) => {
  if (o12.rowGap !== void 0 && o12.rowGap !== null) {
    const r94 = createUnaryUnit(o12.theme, "spacing", 8, "rowGap");
    const styleFromPropValue = (o13) => ({
      rowGap: getValue(r94, o13)
    });
    return handleBreakpoints(o12, o12.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = false ? {
  rowGap: o8
} : {};
rowGap.filterProps = [
  "rowGap"
];
var $22 = style$1({
  prop: "gridColumn"
});
var q3 = style$1({
  prop: "gridRow"
});
var J1 = style$1({
  prop: "gridAutoFlow"
});
var M22 = style$1({
  prop: "gridAutoColumns"
});
var Q1 = style$1({
  prop: "gridAutoRows"
});
var U1 = style$1({
  prop: "gridTemplateColumns"
});
var X1 = style$1({
  prop: "gridTemplateRows"
});
var Y1 = style$1({
  prop: "gridTemplateAreas"
});
var Z1 = style$1({
  prop: "gridArea"
});
var oo = compose(gap, columnGap, rowGap, $22, q3, J1, M22, Q1, U1, X1, Y1, Z1);
var ro = style$1({
  prop: "color",
  themeKey: "palette"
});
var so = style$1({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette"
});
var to = style$1({
  prop: "backgroundColor",
  themeKey: "palette"
});
var eo = compose(ro, so, to);
var po = style$1({
  prop: "position"
});
var no = style$1({
  prop: "zIndex",
  themeKey: "zIndex"
});
var ao = style$1({
  prop: "top"
});
var co = style$1({
  prop: "right"
});
var io = style$1({
  prop: "bottom"
});
var lo = style$1({
  prop: "left"
});
var mo = compose(po, no, ao, co, io, lo);
var fo = style$1({
  prop: "boxShadow",
  themeKey: "shadows"
});
function transform(o14) {
  return o14 <= 1 && o14 !== 0 ? 100 * o14 + "%" : o14;
}
var uo = style$1({
  prop: "width",
  transform
});
var maxWidth = (o15) => {
  if (o15.maxWidth !== void 0 && o15.maxWidth !== null) {
    const styleFromPropValue = (r104) => {
      var s316, t237, e238;
      const p122 = ((s316 = o15.theme) == null || (t237 = s316.breakpoints) == null || (e238 = t237.values) == null ? void 0 : e238[r104]) || s10[r104];
      return {
        maxWidth: p122 || transform(r104)
      };
    };
    return handleBreakpoints(o15, o15.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = [
  "maxWidth"
];
var yo = style$1({
  prop: "minWidth",
  transform
});
var ho = style$1({
  prop: "height",
  transform
});
var go = style$1({
  prop: "maxHeight",
  transform
});
var bo = style$1({
  prop: "minHeight",
  transform
});
style$1({
  prop: "size",
  cssProperty: "width",
  transform
});
style$1({
  prop: "size",
  cssProperty: "height",
  transform
});
var vo = style$1({
  prop: "boxSizing"
});
var wo = compose(uo, maxWidth, yo, ho, go, bo, vo);
var Ko = style$1({
  prop: "fontFamily",
  themeKey: "typography"
});
var jo = style$1({
  prop: "fontSize",
  themeKey: "typography"
});
var So = style$1({
  prop: "fontStyle",
  themeKey: "typography"
});
var To = style$1({
  prop: "fontWeight",
  themeKey: "typography"
});
var Go = style$1({
  prop: "letterSpacing"
});
var ko = style$1({
  prop: "textTransform"
});
var Eo = style$1({
  prop: "lineHeight"
});
var Oo = style$1({
  prop: "textAlign"
});
var Ro = style$1({
  prop: "typography",
  cssProperty: false,
  themeKey: "typography"
});
var Co = compose(Ro, Ko, jo, So, To, Go, Eo, Oo, ko);
var Ao = {
  borders: K1.filterProps,
  display: O2.filterProps,
  flexbox: L2.filterProps,
  grid: oo.filterProps,
  positions: mo.filterProps,
  palette: eo.filterProps,
  shadows: fo.filterProps,
  sizing: wo.filterProps,
  spacing: spacing.filterProps,
  typography: Co.filterProps
};
var No = {
  borders: K1,
  display: O2,
  flexbox: L2,
  grid: oo,
  positions: mo,
  palette: eo,
  shadows: fo,
  sizing: wo,
  spacing,
  typography: Co
};
var zo = Object.keys(Ao).reduce((o16, r1112) => {
  Ao[r1112].forEach((s49) => {
    o16[s49] = No[r1112];
  });
  return o16;
}, {});
function getThemeValue(o17, r122, s5) {
  const t328 = {
    [o17]: r122,
    theme: s5
  };
  const e329 = zo[o17];
  return e329 ? e329(t328) : {
    [o17]: r122
  };
}
function objectsHaveSameKeys(...o18) {
  const r132 = o18.reduce((o19, r14) => o19.concat(Object.keys(r14)), []);
  const s63 = new Set(r132);
  return o18.every((o20) => s63.size === Object.keys(o20).length);
}
function callIfFn(o21, r15) {
  return typeof o21 === "function" ? o21(r15) : o21;
}
function styleFunctionSx(r16) {
  const { sx: s72, theme: t418 = {} } = r16 || {};
  if (!s72)
    return null;
  function traverse(r17) {
    let s82 = r17;
    if (typeof r17 === "function")
      s82 = r17(t418);
    else if (typeof r17 !== "object")
      return r17;
    const p214 = createEmptyBreakpointObject(t418.breakpoints);
    const n130 = Object.keys(p214);
    let a137 = p214;
    Object.keys(s82).forEach((r18) => {
      const p33 = callIfFn(s82[r18], t418);
      if (p33 !== null && p33 !== void 0)
        if (typeof p33 === "object")
          if (zo[r18])
            a137 = merge(a137, getThemeValue(r18, p33, t418));
          else {
            const s91 = handleBreakpoints({
              theme: t418
            }, p33, (o22) => ({
              [r18]: o22
            }));
            objectsHaveSameKeys(s91, p33) ? a137[r18] = styleFunctionSx({
              sx: p33,
              theme: t418
            }) : a137 = merge(a137, s91);
          }
        else
          a137 = merge(a137, getThemeValue(r18, p33, t418));
    });
    return removeUnusedBreakpoints(n130, a137);
  }
  return Array.isArray(s72) ? s72.map(traverse) : traverse(s72);
}
styleFunctionSx.filterProps = [
  "sx"
];
var Bo = [
  "sx"
];
var splitProps = (o23) => {
  const r19 = {
    systemProps: {},
    otherProps: {}
  };
  Object.keys(o23).forEach((s101) => {
    zo[s101] ? r19.systemProps[s101] = o23[s101] : r19.otherProps[s101] = o23[s101];
  });
  return r19;
};
function extendSxProp(o24) {
  const { sx: r20 } = o24, s112 = _objectWithoutPropertiesLoose(o24, Bo);
  const { systemProps: t516, otherProps: e425 } = splitProps(s112);
  let p41;
  p41 = Array.isArray(r20) ? [
    t516,
    ...r20
  ] : typeof r20 === "function" ? (...o25) => {
    const s122 = r20(...o25);
    return isPlainObject(s122) ? _extends({}, t516, s122) : t516;
  } : _extends({}, t516, r20);
  return _extends({}, e425, {
    sx: p41
  });
}
var r12 = [
  "values",
  "unit",
  "step"
];
function createBreakpoints(t155) {
  const { values: o138 = {
    xs: 0,
    sm: 600,
    md: 900,
    lg: 1200,
    xl: 1536
  }, unit: i134 = "px", step: s136 = 5 } = t155, a40 = _objectWithoutPropertiesLoose(t155, r12);
  const c35 = Object.keys(o138);
  function up(e158) {
    const n131 = typeof o138[e158] === "number" ? o138[e158] : e158;
    return `@media (min-width:${n131}${i134})`;
  }
  function down(e239) {
    const n221 = typeof o138[e239] === "number" ? o138[e239] : e239;
    return `@media (max-width:${n221 - s136 / 100}${i134})`;
  }
  function between(e330, n317) {
    const t238 = c35.indexOf(n317);
    return `@media (min-width:${typeof o138[e330] === "number" ? o138[e330] : e330}${i134}) and (max-width:${(t238 !== -1 && typeof o138[c35[t238]] === "number" ? o138[c35[t238]] : n317) - s136 / 100}${i134})`;
  }
  function only(e426) {
    return c35.indexOf(e426) + 1 < c35.length ? between(e426, c35[c35.indexOf(e426) + 1]) : up(e426);
  }
  function not(e522) {
    const n417 = c35.indexOf(e522);
    return n417 === 0 ? up(c35[1]) : n417 === c35.length - 1 ? down(c35[n417]) : between(e522, c35[c35.indexOf(e522) + 1]).replace("@media", "@media not all and");
  }
  return _extends({
    keys: c35,
    values: o138,
    up,
    down,
    between,
    only,
    not,
    unit: i134
  }, a40);
}
var i11 = {
  borderRadius: 4
};
function createSpacing(e612 = 8) {
  if (e612.mui)
    return e612;
  const n512 = createUnarySpacing({
    spacing: e612
  });
  const spacing1 = (...e75) => {
    false;
    const t329 = e75.length === 0 ? [
      1
    ] : e75;
    return t329.map((e85) => {
      const t419 = n512(e85);
      return typeof t419 === "number" ? `${t419}px` : t419;
    }).join(" ");
  };
  spacing1.mui = true;
  return spacing1;
}
var s11 = [
  "breakpoints",
  "palette",
  "spacing",
  "shape"
];
function createTheme(o226 = {}, ...r147) {
  const { breakpoints: a43 = {}, palette: c36 = {}, spacing: p34, shape: u34 = {} } = o226, m30 = _objectWithoutPropertiesLoose(o226, s11);
  const d33 = createBreakpoints(a43);
  const l38 = createSpacing(p34);
  let f41 = deepmerge({
    breakpoints: d33,
    direction: "ltr",
    components: {},
    palette: _extends({
      mode: "light"
    }, c36),
    spacing: l38,
    shape: _extends({}, i11, u34)
  }, m30);
  f41 = r147.reduce((e94, n68) => deepmerge(e94, n68), f41);
  return f41;
}
var t17 = t1(null);
function useTheme() {
  const s50 = r1(t17);
  false;
  return s50;
}
var u13 = typeof Symbol === "function" && Symbol.for;
var s12 = u13 ? Symbol.for("mui.nested") : "__THEME_NESTED__";
false ? ThemeProvider.propTypes = {
  children: s2.node,
  theme: s2.oneOfType([
    s2.object,
    s2.func
  ]).isRequired
} : void 0;
function isObjectEmpty(e160) {
  return Object.keys(e160).length === 0;
}
function useTheme$1(e241 = null) {
  const s137 = useTheme();
  return !s137 || isObjectEmpty(s137) ? e241 : s137;
}
var s13 = createTheme();
function useTheme1(e332 = s13) {
  return useTheme$1(e332);
}
false ? InnerThemeProvider.propTypes = {
  children: s2.node
} : void 0;
false ? ThemeProvider1.propTypes = {
  children: s2.node,
  theme: s2.oneOfType([
    s2.object,
    s2.func
  ]).isRequired
} : void 0;
var i12 = [
  "className",
  "component"
];
function createBox(f128 = {}) {
  const { defaultTheme: l39, defaultClassName: u35 = "MuiBox-root", generateClassName: d34 } = f128;
  const x27 = styled("div")(styleFunctionSx);
  const b119 = l1(function Box(r150, t157) {
    const m122 = useTheme1(l39);
    const n132 = extendSxProp(r150), { className: f213, component: b33 = "div" } = n132, N26 = _objectWithoutPropertiesLoose(n132, i12);
    return p4(x27, _extends({
      as: b33,
      ref: t157,
      className: clsx_m(f213, d34 ? d34(u35) : u35),
      theme: m122
    }, N26));
  });
  false ? b119.propTypes = {
    children: s2.node,
    component: s2.elementType,
    sx: s2.oneOfType([
      s2.object,
      s2.array,
      s2.func
    ])
  } : void 0;
  return b119;
}
createBox();
function getThemeProps(o141) {
  const { theme: t79, name: p36, props: r67 } = o141;
  return t79 && t79.components && t79.components[p36] && t79.components[p36].defaultProps ? resolveProps(t79.components[p36].defaultProps, r67) : r67;
}
function useThemeProps({ props: e162, name: t80, defaultTheme: p37 }) {
  const r68 = useTheme1(p37);
  const s51 = getThemeProps({
    theme: r68,
    name: t80,
    props: e162
  });
  return s51;
}
var be2 = [
  "variant"
];
function isEmpty$1(e70) {
  return e70.length === 0;
}
function propsToClassKey(e76) {
  const { variant: o142 } = e76, t82 = _objectWithoutPropertiesLoose(e76, be2);
  let r69 = o142 || "";
  Object.keys(t82).sort().forEach((o57) => {
    r69 += o57 === "color" ? isEmpty$1(r69) ? e76[o57] : capitalize(e76[o57]) : `${isEmpty$1(r69) ? o57 : capitalize(o57)}${capitalize(e76[o57].toString())}`;
  });
  return r69;
}
var Ce = [
  "name",
  "slot",
  "skipVariantsResolver",
  "skipSx",
  "overridesResolver"
];
var ve2 = [
  "theme"
];
var xe = [
  "theme"
];
function isEmpty1(e77) {
  return Object.keys(e77).length === 0;
}
var getStyleOverrides = (e78, o58) => o58.components && o58.components[e78] && o58.components[e78].styleOverrides ? o58.components[e78].styleOverrides : null;
var getVariantStyles = (e163, o227) => {
  let t83 = [];
  o227 && o227.components && o227.components[e163] && o227.components[e163].variants && (t83 = o227.components[e163].variants);
  const r70 = {};
  t83.forEach((e79) => {
    const o59 = propsToClassKey(e79.props);
    r70[o59] = e79.style;
  });
  return r70;
};
var variantsResolver = (e80, o317, t158, r151) => {
  var s52, n69;
  const { ownerState: a44 = {} } = e80;
  const l40 = [];
  const c37 = t158 == null || (s52 = t158.components) == null || (n69 = s52[r151]) == null ? void 0 : n69.variants;
  c37 && c37.forEach((t84) => {
    let r76 = true;
    Object.keys(t84.props).forEach((o60) => {
      a44[o60] !== t84.props[o60] && e80[o60] !== t84.props[o60] && (r76 = false);
    });
    r76 && l40.push(o317[propsToClassKey(t84.props)]);
  });
  return l40;
};
function shouldForwardProp(e86) {
  return e86 !== "ownerState" && e86 !== "theme" && e86 !== "sx" && e86 !== "as";
}
var ke2 = createTheme();
function createStyled(e243 = {}) {
  const { defaultTheme: o413 = ke2, rootShouldForwardProp: t239 = shouldForwardProp, slotShouldForwardProp: r224 = shouldForwardProp } = e243;
  return (e333, s138 = {}) => {
    const { name: n70, slot: a45, skipVariantsResolver: l126, skipSx: c130, overridesResolver: i40 } = s138, m123 = _objectWithoutPropertiesLoose(s138, Ce);
    const d35 = l126 !== void 0 ? l126 : a45 && a45 !== "Root" || false;
    const u36 = c130 || false;
    let p38;
    false;
    let h35 = shouldForwardProp;
    a45 === "Root" ? h35 = t239 : a45 && (h35 = r224);
    const g41 = styled(e333, _extends({
      shouldForwardProp: h35,
      label: p38
    }, m123));
    const muiStyledResolver = (t330, ...r320) => {
      const s221 = r320 ? r320.map((e88) => typeof e88 === "function" && e88.__emotion_real !== e88 ? (t85) => {
        let { theme: r77 } = t85, s53 = _objectWithoutPropertiesLoose(t85, ve2);
        return e88(_extends({
          theme: isEmpty1(r77) ? o413 : r77
        }, s53));
      } : e88) : [];
      let l43 = t330;
      n70 && i40 && s221.push((e89) => {
        const t420 = isEmpty1(e89.theme) ? o413 : e89.theme;
        const r414 = getStyleOverrides(n70, t420);
        if (r414) {
          const o62 = {};
          Object.entries(r414).forEach(([t86, r78]) => {
            o62[t86] = typeof r78 === "function" ? r78(e89) : r78;
          });
          return i40(e89, o62);
        }
        return null;
      });
      n70 && !d35 && s221.push((e90) => {
        const t87 = isEmpty1(e90.theme) ? o413 : e90.theme;
        return variantsResolver(e90, getVariantStyles(n70, t87), t87, n70);
      });
      u36 || s221.push((e95) => {
        const t88 = isEmpty1(e95.theme) ? o413 : e95.theme;
        return styleFunctionSx(_extends({}, e95, {
          theme: t88
        }));
      });
      const c38 = s221.length - r320.length;
      if (Array.isArray(t330) && c38 > 0) {
        const e96 = new Array(c38).fill("");
        l43 = [
          ...t330,
          ...e96
        ];
        l43.raw = [
          ...t330.raw,
          ...e96
        ];
      } else
        typeof t330 === "function" && (l43 = (e97) => {
          let { theme: r79 } = e97, s54 = _objectWithoutPropertiesLoose(e97, xe);
          return t330(_extends({
            theme: isEmpty1(r79) ? o413 : r79
          }, s54));
        });
      const m31 = g41(l43, ...s221);
      if (false) {
        let o63;
        n70 && (o63 = `${n70}${a45 || ""}`);
        o63 === void 0 && (o63 = `Styled(${getDisplayName(e333)})`);
        m31.displayName = o63;
      }
      return m31;
    };
    g41.withConfig && (muiStyledResolver.withConfig = g41.withConfig);
    return muiStyledResolver;
  };
}
createStyled();
function clamp1(e98, o64 = 0, t89 = 1) {
  false;
  return Math.min(Math.max(o64, e98), t89);
}
function hexToRgb(e427) {
  e427 = e427.substr(1);
  const o510 = new RegExp(`.{1,${e427.length >= 6 ? 2 : 1}}`, "g");
  let t90 = e427.match(o510);
  t90 && t90[0].length === 1 && (t90 = t90.map((e99) => e99 + e99));
  return t90 ? `rgb${t90.length === 4 ? "a" : ""}(${t90.map((e100, o65) => o65 < 3 ? parseInt(e100, 16) : Math.round(parseInt(e100, 16) / 255 * 1e3) / 1e3).join(", ")})` : "";
}
function decomposeColor(e523) {
  if (e523.type)
    return e523;
  if (e523.charAt(0) === "#")
    return decomposeColor(hexToRgb(e523));
  const o66 = e523.indexOf("(");
  const t92 = e523.substring(0, o66);
  if ([
    "rgb",
    "rgba",
    "hsl",
    "hsla",
    "color"
  ].indexOf(t92) === -1)
    throw new Error(false ? `MUI: Unsupported \`${e523}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, e523));
  let r80 = e523.substring(o66 + 1, e523.length - 1);
  let s55;
  if (t92 === "color") {
    r80 = r80.split(" ");
    s55 = r80.shift();
    r80.length === 4 && r80[3].charAt(0) === "/" && (r80[3] = r80[3].substr(1));
    if ([
      "srgb",
      "display-p3",
      "a98-rgb",
      "prophoto-rgb",
      "rec-2020"
    ].indexOf(s55) === -1)
      throw new Error(false ? `MUI: unsupported \`${s55}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, s55));
  } else
    r80 = r80.split(",");
  r80 = r80.map((e101) => parseFloat(e101));
  return {
    type: t92,
    values: r80,
    colorSpace: s55
  };
}
function recomposeColor(e613) {
  const { type: o67, colorSpace: t93 } = e613;
  let { values: r86 } = e613;
  if (o67.indexOf("rgb") !== -1)
    r86 = r86.map((e102, o68) => o68 < 3 ? parseInt(e102, 10) : e102);
  else if (o67.indexOf("hsl") !== -1) {
    r86[1] = `${r86[1]}%`;
    r86[2] = `${r86[2]}%`;
  }
  r86 = o67.indexOf("color") !== -1 ? `${t93} ${r86.join(" ")}` : `${r86.join(", ")}`;
  return `${o67}(${r86})`;
}
function hslToRgb(e810) {
  e810 = decomposeColor(e810);
  const { values: o83 } = e810;
  const t94 = o83[0];
  const r87 = o83[1] / 100;
  const s56 = o83[2] / 100;
  const n71 = r87 * Math.min(s56, 1 - s56);
  const f42 = (e103, o69 = (e103 + t94 / 30) % 12) => s56 - n71 * Math.max(Math.min(o69 - 3, 9 - o69, 1), -1);
  let a46 = "rgb";
  const l44 = [
    Math.round(255 * f42(0)),
    Math.round(255 * f42(8)),
    Math.round(255 * f42(4))
  ];
  if (e810.type === "hsla") {
    a46 += "a";
    l44.push(o83[3]);
  }
  return recomposeColor({
    type: a46,
    values: l44
  });
}
function getLuminance(e104) {
  e104 = decomposeColor(e104);
  let o92 = e104.type === "hsl" ? decomposeColor(hslToRgb(e104)).values : e104.values;
  o92 = o92.map((o70) => {
    e104.type !== "color" && (o70 /= 255);
    return o70 <= 0.03928 ? o70 / 12.92 : ((o70 + 0.055) / 1.055) ** 2.4;
  });
  return Number((0.2126 * o92[0] + 0.7152 * o92[1] + 0.0722 * o92[2]).toFixed(3));
}
function getContrastRatio(e105, o73) {
  const t95 = getLuminance(e105);
  const r88 = getLuminance(o73);
  return (Math.max(t95, r88) + 0.05) / (Math.min(t95, r88) + 0.05);
}
function alpha(e106, o74) {
  e106 = decomposeColor(e106);
  o74 = clamp1(o74);
  e106.type !== "rgb" && e106.type !== "hsl" || (e106.type += "a");
  e106.type === "color" ? e106.values[3] = `/${o74}` : e106.values[3] = o74;
  return recomposeColor(e106);
}
function darken(e107, o75) {
  e107 = decomposeColor(e107);
  o75 = clamp1(o75);
  if (e107.type.indexOf("hsl") !== -1)
    e107.values[2] *= 1 - o75;
  else if (e107.type.indexOf("rgb") !== -1 || e107.type.indexOf("color") !== -1)
    for (let t96 = 0; t96 < 3; t96 += 1)
      e107.values[t96] *= 1 - o75;
  return recomposeColor(e107);
}
function lighten(e108, o76) {
  e108 = decomposeColor(e108);
  o76 = clamp1(o76);
  if (e108.type.indexOf("hsl") !== -1)
    e108.values[2] += (100 - e108.values[2]) * o76;
  else if (e108.type.indexOf("rgb") !== -1)
    for (let t97 = 0; t97 < 3; t97 += 1)
      e108.values[t97] += (255 - e108.values[t97]) * o76;
  else if (e108.type.indexOf("color") !== -1)
    for (let t517 = 0; t517 < 3; t517 += 1)
      e108.values[t517] += (1 - e108.values[t517]) * o76;
  return recomposeColor(e108);
}
var f12 = {
  black: "#000",
  white: "#fff"
};
var e10 = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
};
var f13 = {
  50: "#f3e5f5",
  100: "#e1bee7",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  600: "#8e24aa",
  700: "#7b1fa2",
  800: "#6a1b9a",
  900: "#4a148c",
  A100: "#ea80fc",
  A200: "#e040fb",
  A400: "#d500f9",
  A700: "#aa00ff"
};
var a15 = {
  50: "#e1f5fe",
  100: "#b3e5fc",
  200: "#81d4fa",
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  600: "#039be5",
  700: "#0288d1",
  800: "#0277bd",
  900: "#01579b",
  A100: "#80d8ff",
  A200: "#40c4ff",
  A400: "#00b0ff",
  A700: "#0091ea"
};
var f14 = {
  50: "#ffebee",
  100: "#ffcdd2",
  200: "#ef9a9a",
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  600: "#e53935",
  700: "#d32f2f",
  800: "#c62828",
  900: "#b71c1c",
  A100: "#ff8a80",
  A200: "#ff5252",
  A400: "#ff1744",
  A700: "#d50000"
};
var f15 = {
  50: "#fff3e0",
  100: "#ffe0b2",
  200: "#ffcc80",
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  600: "#fb8c00",
  700: "#f57c00",
  800: "#ef6c00",
  900: "#e65100",
  A100: "#ffd180",
  A200: "#ffab40",
  A400: "#ff9100",
  A700: "#ff6d00"
};
var f16 = {
  50: "#e3f2fd",
  100: "#bbdefb",
  200: "#90caf9",
  300: "#64b5f6",
  400: "#42a5f5",
  500: "#2196f3",
  600: "#1e88e5",
  700: "#1976d2",
  800: "#1565c0",
  900: "#0d47a1",
  A100: "#82b1ff",
  A200: "#448aff",
  A400: "#2979ff",
  A700: "#2962ff"
};
var e11 = {
  50: "#e8f5e9",
  100: "#c8e6c9",
  200: "#a5d6a7",
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  600: "#43a047",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20",
  A100: "#b9f6ca",
  A200: "#69f0ae",
  A400: "#00e676",
  A700: "#00c853"
};
var p11 = [
  "mode",
  "contrastThreshold",
  "tonalOffset"
];
var f17 = {
  text: {
    primary: "rgba(0, 0, 0, 0.87)",
    secondary: "rgba(0, 0, 0, 0.6)",
    disabled: "rgba(0, 0, 0, 0.38)"
  },
  divider: "rgba(0, 0, 0, 0.12)",
  background: {
    paper: f12.white,
    default: f12.white
  },
  action: {
    active: "rgba(0, 0, 0, 0.54)",
    hover: "rgba(0, 0, 0, 0.04)",
    hoverOpacity: 0.04,
    selected: "rgba(0, 0, 0, 0.08)",
    selectedOpacity: 0.08,
    disabled: "rgba(0, 0, 0, 0.26)",
    disabledBackground: "rgba(0, 0, 0, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(0, 0, 0, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
var b13 = {
  text: {
    primary: f12.white,
    secondary: "rgba(255, 255, 255, 0.7)",
    disabled: "rgba(255, 255, 255, 0.5)",
    icon: "rgba(255, 255, 255, 0.5)"
  },
  divider: "rgba(255, 255, 255, 0.12)",
  background: {
    paper: "#121212",
    default: "#121212"
  },
  action: {
    active: f12.white,
    hover: "rgba(255, 255, 255, 0.08)",
    hoverOpacity: 0.08,
    selected: "rgba(255, 255, 255, 0.16)",
    selectedOpacity: 0.16,
    disabled: "rgba(255, 255, 255, 0.3)",
    disabledBackground: "rgba(255, 255, 255, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(255, 255, 255, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};
function addLightOrDark(r152, t159, e164, o143) {
  const i136 = o143.light || o143;
  const s139 = o143.dark || 1.5 * o143;
  r152[t159] || (r152.hasOwnProperty(e164) ? r152[t159] = r152[e164] : t159 === "light" ? r152.light = lighten(r152.main, i136) : t159 === "dark" && (r152.dark = darken(r152.main, s139)));
}
function getDefaultPrimary(r225 = "light") {
  return r225 === "dark" ? {
    main: f16[200],
    light: f16[50],
    dark: f16[400]
  } : {
    main: f16[700],
    light: f16[400],
    dark: f16[800]
  };
}
function getDefaultSecondary(r321 = "light") {
  return r321 === "dark" ? {
    main: f13[200],
    light: f13[50],
    dark: f13[400]
  } : {
    main: f13[500],
    light: f13[300],
    dark: f13[700]
  };
}
function getDefaultError(r415 = "light") {
  return r415 === "dark" ? {
    main: f14[500],
    light: f14[300],
    dark: f14[700]
  } : {
    main: f14[700],
    light: f14[400],
    dark: f14[800]
  };
}
function getDefaultInfo(r513 = "light") {
  return r513 === "dark" ? {
    main: a15[400],
    light: a15[300],
    dark: a15[700]
  } : {
    main: a15[700],
    light: a15[500],
    dark: a15[900]
  };
}
function getDefaultSuccess(r610 = "light") {
  return r610 === "dark" ? {
    main: e11[400],
    light: e11[300],
    dark: e11[700]
  } : {
    main: e11[800],
    light: e11[500],
    dark: e11[900]
  };
}
function getDefaultWarning(r710 = "light") {
  return r710 === "dark" ? {
    main: f15[400],
    light: f15[300],
    dark: f15[700]
  } : {
    main: "#ed6c02",
    light: f15[500],
    dark: f15[900]
  };
}
function createPalette(a138) {
  const { mode: n133 = "light", contrastThreshold: d125 = 3, tonalOffset: l127 = 0.2 } = a138, m124 = _objectWithoutPropertiesLoose(a138, p11);
  const g116 = a138.primary || getDefaultPrimary(n133);
  const h118 = a138.secondary || getDefaultSecondary(n133);
  const u127 = a138.error || getDefaultError(n133);
  const y37 = a138.info || getDefaultInfo(n133);
  const k18 = a138.success || getDefaultSuccess(n133);
  const O19 = a138.warning || getDefaultWarning(n133);
  function getContrastText(r89) {
    const t240 = getContrastRatio(r89, b13.text.primary) >= d125 ? b13.text.primary : f17.text.primary;
    if (false) {
      const e244 = getContrastRatio(r89, t240);
      e244 < 3 && console.error([
        `MUI: The contrast ratio of ${e244}:1 for ${t240} on ${r89}`,
        "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.",
        "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"
      ].join("\n"));
    }
    return t240;
  }
  const augmentColor = ({ color: t331, name: o228, mainShade: a221 = 500, lightShade: n222 = 300, darkShade: i223 = 700 }) => {
    t331 = _extends({}, t331);
    !t331.main && t331[a221] && (t331.main = t331[a221]);
    if (!t331.hasOwnProperty("main"))
      throw new Error(false ? `MUI: The color${o228 ? ` (${o228})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${a221}\` property.` : formatMuiErrorMessage(11, o228 ? ` (${o228})` : "", a221));
    if (typeof t331.main !== "string")
      throw new Error(false ? `MUI: The color${o228 ? ` (${o228})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(t331.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, o228 ? ` (${o228})` : "", JSON.stringify(t331.main)));
    addLightOrDark(t331, "light", n222, l127);
    addLightOrDark(t331, "dark", i223, l127);
    t331.contrastText || (t331.contrastText = getContrastText(t331.main));
    return t331;
  };
  const v34 = {
    dark: b13,
    light: f17
  };
  false;
  const w26 = deepmerge(_extends({
    common: f12,
    mode: n133,
    primary: augmentColor({
      color: g116,
      name: "primary"
    }),
    secondary: augmentColor({
      color: h118,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    error: augmentColor({
      color: u127,
      name: "error"
    }),
    warning: augmentColor({
      color: O19,
      name: "warning"
    }),
    info: augmentColor({
      color: y37,
      name: "info"
    }),
    success: augmentColor({
      color: k18,
      name: "success"
    }),
    grey: e10,
    contrastThreshold: d125,
    getContrastText,
    augmentColor,
    tonalOffset: l127
  }, v34[n133]), m124);
  return w26;
}
function createShadow(...t160) {
  return [
    `${t160[0]}px ${t160[1]}px ${t160[2]}px ${t160[3]}px rgba(0,0,0,${0.2})`,
    `${t160[4]}px ${t160[5]}px ${t160[6]}px ${t160[7]}px rgba(0,0,0,${0.14})`,
    `${t160[8]}px ${t160[9]}px ${t160[10]}px ${t160[11]}px rgba(0,0,0,${0.12})`
  ].join(",");
}
var t18 = [
  "none",
  createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0),
  createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0),
  createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0),
  createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
  createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
  createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
  createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
  createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
  createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
  createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
  createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
  createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
  createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
  createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
  createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
  createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
  createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
  createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
  createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
  createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
  createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
  createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
  createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
  createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)
];
function createMixins(t162, o4, n134) {
  return _extends({
    toolbar: {
      minHeight: 56,
      [`${t162.up("xs")} and (orientation: landscape)`]: {
        minHeight: 48
      },
      [t162.up("sm")]: {
        minHeight: 64
      }
    }
  }, n134);
}
var a16 = [
  "fontFamily",
  "fontSize",
  "fontWeightLight",
  "fontWeightRegular",
  "fontWeightMedium",
  "fontWeightBold",
  "htmlFontSize",
  "allVariants",
  "pxToRem"
];
function round(e165) {
  return Math.round(1e5 * e165) / 1e5;
}
var c12 = {
  textTransform: "uppercase"
};
var u14 = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(n223, r153) {
  const i137 = typeof r153 === "function" ? r153(n223) : r153, { fontFamily: s140 = u14, fontSize: m125 = 14, fontWeightLight: l128 = 300, fontWeightRegular: p123 = 400, fontWeightMedium: h119 = 500, fontWeightBold: f129 = 700, htmlFontSize: d126 = 16, allVariants: g42, pxToRem: b34 } = i137, y38 = _objectWithoutPropertiesLoose(i137, a16);
  if (false) {
    typeof m125 !== "number" && console.error("MUI: `fontSize` is required to be a number.");
    typeof d126 !== "number" && console.error("MUI: `htmlFontSize` is required to be a number.");
  }
  const M17 = m125 / 14;
  const x28 = b34 || ((e245) => e245 / d126 * M17 + "rem");
  const buildVariant = (t241, o144, n318, r226, i224) => _extends({
    fontFamily: s140,
    fontWeight: t241,
    fontSize: x28(o144),
    lineHeight: n318
  }, s140 === u14 ? {
    letterSpacing: `${round(r226 / o144)}em`
  } : {}, i224, g42);
  const T22 = {
    h1: buildVariant(l128, 96, 1.167, -1.5),
    h2: buildVariant(l128, 60, 1.2, -0.5),
    h3: buildVariant(p123, 48, 1.167, 0),
    h4: buildVariant(p123, 34, 1.235, 0.25),
    h5: buildVariant(p123, 24, 1.334, 0),
    h6: buildVariant(h119, 20, 1.6, 0.15),
    subtitle1: buildVariant(p123, 16, 1.75, 0.15),
    subtitle2: buildVariant(h119, 14, 1.57, 0.1),
    body1: buildVariant(p123, 16, 1.5, 0.15),
    body2: buildVariant(p123, 14, 1.43, 0.15),
    button: buildVariant(h119, 14, 1.75, 0.4, c12),
    caption: buildVariant(p123, 12, 1.66, 0.4),
    overline: buildVariant(p123, 12, 2.66, 1, c12)
  };
  return deepmerge(_extends({
    htmlFontSize: d126,
    pxToRem: x28,
    fontFamily: s140,
    fontSize: m125,
    fontWeightLight: l128,
    fontWeightRegular: p123,
    fontWeightMedium: h119,
    fontWeightBold: f129
  }, T22), y38, {
    clone: false
  });
}
var m11 = [
  "duration",
  "easing",
  "delay"
];
var l10 = {
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
};
var p12 = {
  shortest: 150,
  shorter: 200,
  short: 250,
  standard: 300,
  complex: 375,
  enteringScreen: 225,
  leavingScreen: 195
};
function formatMs(e334) {
  return `${Math.round(e334)}ms`;
}
function getAutoHeightDuration(e428) {
  if (!e428)
    return 0;
  const t332 = e428 / 36;
  return Math.round(10 * (4 + 15 * t332 ** 0.25 + t332 / 5));
}
function createTransitions(o229) {
  const n418 = _extends({}, l10, o229.easing);
  const r322 = _extends({}, p12, o229.duration);
  const create = (e524 = [
    "all"
  ], o318 = {}) => {
    const { duration: i310 = r322.standard, easing: s222 = n418.easeInOut, delay: a139 = 0 } = o318, c131 = _objectWithoutPropertiesLoose(o318, m11);
    if (false) {
      const isString = (e614) => typeof e614 === "string";
      const isNumber = (e710) => !isNaN(parseFloat(e710));
      isString(e524) || Array.isArray(e524) || console.error('MUI: Argument "props" must be a string or Array.');
      isNumber(i310) || isString(i310) || console.error(`MUI: Argument "duration" must be a number or a string but found ${i310}.`);
      isString(s222) || console.error('MUI: Argument "easing" must be a string.');
      isNumber(a139) || isString(a139) || console.error('MUI: Argument "delay" must be a number or a string.');
      Object.keys(c131).length !== 0 && console.error(`MUI: Unrecognized argument(s) [${Object.keys(c131).join(",")}].`);
    }
    return (Array.isArray(e524) ? e524 : [
      e524
    ]).map((e811) => `${e811} ${typeof i310 === "string" ? i310 : formatMs(i310)} ${s222} ${typeof a139 === "string" ? a139 : formatMs(a139)}`).join(",");
  };
  return _extends({
    getAutoHeightDuration,
    create
  }, o229, {
    easing: n418,
    duration: r322
  });
}
var h12 = {
  mobileStepper: 1e3,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
var f18 = [
  "breakpoints",
  "mixins",
  "spacing",
  "palette",
  "transitions",
  "typography",
  "shape"
];
function createTheme1(a222 = {}, ...c216) {
  const { mixins: u128 = {}, palette: m213 = {}, transitions: l217 = {}, typography: p215 = {} } = a222, d212 = _objectWithoutPropertiesLoose(a222, f18);
  const g43 = createPalette(m213);
  const b35 = createTheme(a222);
  let y39 = deepmerge(b35, {
    mixins: createMixins(b35.breakpoints, b35.spacing, u128),
    palette: g43,
    shadows: t18.slice(),
    typography: createTypography(g43, p215),
    transitions: createTransitions(l217),
    zIndex: _extends({}, h12)
  });
  y39 = deepmerge(y39, d212);
  y39 = c216.reduce((e910, t421) => deepmerge(e910, t421), y39);
  if (false) {
    const e109 = [
      "active",
      "checked",
      "completed",
      "disabled",
      "error",
      "expanded",
      "focused",
      "focusVisible",
      "required",
      "selected"
    ];
    const traverse = (t518, o414) => {
      let r416;
      for (r416 in t518) {
        const i42 = t518[r416];
        if (e109.indexOf(r416) !== -1 && Object.keys(i42).length > 0) {
          if (false) {
            const e1110 = generateUtilityClass("", r416);
            console.error([
              `MUI: The \`${o414}\` component increases the CSS specificity of the \`${r416}\` internal state.`,
              "You can not override it like this: ",
              JSON.stringify(t518, null, 2),
              "",
              `Instead, you need to use the '&.${e1110}' syntax:`,
              JSON.stringify({
                root: {
                  [`&.${e1110}`]: i42
                }
              }, null, 2),
              "",
              "https://mui.com/r/state-classes-guide"
            ].join("\n"));
          }
          t518[r416] = {};
        }
      }
    };
    Object.keys(y39.components).forEach((e122) => {
      const t613 = y39.components[e122].styleOverrides;
      t613 && e122.indexOf("Mui") === 0 && traverse(t613, e122);
    });
  }
  return y39;
}
var r13 = createTheme1();
var rootShouldForwardProp = (r154) => shouldForwardProp(r154) && r154 !== "classes";
var t19 = createStyled({
  defaultTheme: r13,
  rootShouldForwardProp
});
function useThemeProps1({ props: r90, name: s57 }) {
  return useThemeProps({
    props: r90,
    name: s57,
    defaultTheme: r13
  });
}
function _setPrototypeOf(t163, e167) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(t98, e166) {
    t98.__proto__ = e166;
    return t98;
  };
  return _setPrototypeOf(t163, e167);
}
function _inheritsLoose(o77, e168) {
  o77.prototype = Object.create(e168.prototype);
  o77.prototype.constructor = o77;
  _setPrototypeOf(o77, e168);
}
var e12 = D2.createContext(null);
var s14 = {
  disabled: false
};
var a17 = false ? s2.oneOfType([
  s2.number,
  s2.shape({
    enter: s2.number,
    exit: s2.number,
    appear: s2.number
  }).isRequired
]) : null;
var u15 = false ? s2.oneOfType([
  s2.string,
  s2.shape({
    enter: s2.string,
    exit: s2.string,
    active: s2.string
  }),
  s2.shape({
    enter: s2.string,
    enterDone: s2.string,
    enterActive: s2.string,
    exit: s2.string,
    exitDone: s2.string,
    exitActive: s2.string
  })
]) : null;
var p13 = "unmounted";
var l11 = "exited";
var c13 = "entering";
var f19 = "entered";
var d14 = "exiting";
var E6 = function(n135) {
  _inheritsLoose(Transition, n135);
  function Transition(t164, e169) {
    var i138;
    i138 = n135.call(this, t164, e169) || this;
    var o145 = e169;
    var r155 = o145 && !o145.isMounting ? t164.enter : t164.appear;
    var s141;
    i138.appearStatus = null;
    if (t164.in)
      if (r155) {
        s141 = l11;
        i138.appearStatus = c13;
      } else
        s141 = f19;
    else
      s141 = t164.unmountOnExit || t164.mountOnEnter ? p13 : l11;
    i138.state = {
      status: s141
    };
    i138.nextCallback = null;
    return i138;
  }
  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(t242, e246) {
    var n224 = t242.in;
    return n224 && e246.status === p13 ? {
      status: l11
    } : null;
  };
  var a140 = Transition.prototype;
  a140.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  a140.componentDidUpdate = function componentDidUpdate(t333) {
    var e335 = null;
    if (t333 !== this.props) {
      var n319 = this.state.status;
      this.props.in ? n319 !== c13 && n319 !== f19 && (e335 = c13) : n319 !== c13 && n319 !== f19 || (e335 = d14);
    }
    this.updateStatus(false, e335);
  };
  a140.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  a140.getTimeouts = function getTimeouts() {
    var t422 = this.props.timeout;
    var e429, n419, i225;
    e429 = n419 = i225 = t422;
    if (t422 != null && typeof t422 !== "number") {
      e429 = t422.exit;
      n419 = t422.enter;
      i225 = t422.appear !== void 0 ? t422.appear : n419;
    }
    return {
      exit: e429,
      enter: n419,
      appear: i225
    };
  };
  a140.updateStatus = function updateStatus(t519, e525) {
    t519 === void 0 && (t519 = false);
    if (e525 !== null) {
      this.cancelNextCallback();
      e525 === c13 ? this.performEnter(t519) : this.performExit();
    } else
      this.props.unmountOnExit && this.state.status === l11 && this.setState({
        status: p13
      });
  };
  a140.performEnter = function performEnter(t614) {
    var e615 = this;
    var n513 = this.props.enter;
    var i311 = this.context ? this.context.isMounting : t614;
    var r227 = this.props.nodeRef ? [
      i311
    ] : [
      c3.findDOMNode(this),
      i311
    ], a223 = r227[0], u129 = r227[1];
    var p124 = this.getTimeouts();
    var l129 = i311 ? p124.appear : p124.enter;
    if (!t614 && !n513 || s14.disabled)
      this.safeSetState({
        status: f19
      }, function() {
        e615.props.onEntered(a223);
      });
    else {
      this.props.onEnter(a223, u129);
      this.safeSetState({
        status: c13
      }, function() {
        e615.props.onEntering(a223, u129);
        e615.onTransitionEnd(l129, function() {
          e615.safeSetState({
            status: f19
          }, function() {
            e615.props.onEntered(a223, u129);
          });
        });
      });
    }
  };
  a140.performExit = function performExit() {
    var t710 = this;
    var e711 = this.props.exit;
    var n610 = this.getTimeouts();
    var i43 = this.props.nodeRef ? void 0 : c3.findDOMNode(this);
    if (e711 && !s14.disabled) {
      this.props.onExit(i43);
      this.safeSetState({
        status: d14
      }, function() {
        t710.props.onExiting(i43);
        t710.onTransitionEnd(n610.exit, function() {
          t710.safeSetState({
            status: l11
          }, function() {
            t710.props.onExited(i43);
          });
        });
      });
    } else
      this.safeSetState({
        status: l11
      }, function() {
        t710.props.onExited(i43);
      });
  };
  a140.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  a140.safeSetState = function safeSetState(t810, e812) {
    e812 = this.setNextCallback(e812);
    this.setState(t810, e812);
  };
  a140.setNextCallback = function setNextCallback(t99) {
    var e911 = this;
    var n72 = true;
    this.nextCallback = function(i51) {
      if (n72) {
        n72 = false;
        e911.nextCallback = null;
        t99(i51);
      }
    };
    this.nextCallback.cancel = function() {
      n72 = false;
    };
    return this.nextCallback;
  };
  a140.onTransitionEnd = function onTransitionEnd(t102, e1010) {
    this.setNextCallback(e1010);
    var n8 = this.props.nodeRef ? this.props.nodeRef.current : c3.findDOMNode(this);
    var i61 = t102 == null && !this.props.addEndListener;
    if (n8 && !i61) {
      if (this.props.addEndListener) {
        var r323 = this.props.nodeRef ? [
          this.nextCallback
        ] : [
          n8,
          this.nextCallback
        ], s223 = r323[0], a311 = r323[1];
        this.props.addEndListener(s223, a311);
      }
      t102 != null && setTimeout(this.nextCallback, t102);
    } else
      setTimeout(this.nextCallback, 0);
  };
  a140.render = function render() {
    var e1111 = this.state.status;
    if (e1111 === p13)
      return null;
    var n9 = this.props, o230 = n9.children, s317 = (n9.in, n9.mountOnEnter, n9.unmountOnExit, n9.appear, n9.enter, n9.exit, n9.timeout, n9.addEndListener, n9.onEnter, n9.onEntering, n9.onEntered, n9.onExit, n9.onExiting, n9.onExited, n9.nodeRef, _objectWithoutPropertiesLoose(n9, [
      "children",
      "in",
      "mountOnEnter",
      "unmountOnExit",
      "appear",
      "enter",
      "exit",
      "timeout",
      "addEndListener",
      "onEnter",
      "onEntering",
      "onEntered",
      "onExit",
      "onExiting",
      "onExited",
      "nodeRef"
    ]));
    return D2.createElement(e12.Provider, {
      value: null
    }, typeof o230 === "function" ? o230(e1111, s317) : D2.cloneElement(D2.Children.only(o230), s317));
  };
  return Transition;
}(D2.Component);
E6.contextType = e12;
E6.propTypes = false ? {
  nodeRef: s2.shape({
    current: typeof Element === "undefined" ? s2.any : function(t1111, e1210, i71, o319, r417, s410) {
      var a47 = t1111[e1210];
      return s2.instanceOf(a47 && "ownerDocument" in a47 ? a47.ownerDocument.defaultView.Element : Element)(t1111, e1210, i71, o319, r417, s410);
    }
  }),
  children: s2.oneOfType([
    s2.func.isRequired,
    s2.element.isRequired
  ]).isRequired,
  in: s2.bool,
  mountOnEnter: s2.bool,
  unmountOnExit: s2.bool,
  appear: s2.bool,
  enter: s2.bool,
  exit: s2.bool,
  timeout: function timeout(t1212) {
    var e13 = a17;
    t1212.addEndListener || (e13 = e13.isRequired);
    for (var n10 = arguments.length, i81 = new Array(n10 > 1 ? n10 - 1 : 0), o415 = 1; o415 < n10; o415++)
      i81[o415 - 1] = arguments[o415];
    return e13.apply(void 0, [
      t1212
    ].concat(i81));
  },
  addEndListener: s2.func,
  onEnter: s2.func,
  onEntering: s2.func,
  onEntered: s2.func,
  onExit: s2.func,
  onExiting: s2.func,
  onExited: s2.func
} : {};
function noop() {
}
E6.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
E6.UNMOUNTED = p13;
E6.EXITED = l11;
E6.ENTERING = c13;
E6.ENTERED = f19;
E6.EXITING = d14;
function hasClass(s58, a48) {
  return s58.classList ? !!a48 && s58.classList.contains(a48) : (" " + (s58.className.baseVal || s58.className) + " ").indexOf(" " + a48 + " ") !== -1;
}
function addClass(a49, l45) {
  a49.classList ? a49.classList.add(l45) : hasClass(a49, l45) || (typeof a49.className === "string" ? a49.className = a49.className + " " + l45 : a49.setAttribute("class", (a49.className && a49.className.baseVal || "") + " " + l45));
}
function replaceClassName(s59, e170) {
  return s59.replace(new RegExp("(^|\\s)" + e170 + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(s60, e171) {
  s60.classList ? s60.classList.remove(e171) : typeof s60.className === "string" ? s60.className = replaceClassName(s60.className, e171) : s60.setAttribute("class", replaceClassName(s60.className && s60.className.baseVal || "", e171));
}
function _assertThisInitialized(e172) {
  if (e172 === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e172;
}
var l12 = function addClass1(e173, s142) {
  return e173 && s142 && s142.split(" ").forEach(function(s224) {
    return addClass(e173, s224);
  });
};
var m12 = function removeClass1(e247, s318) {
  return e247 && s318 && s318.split(" ").forEach(function(s411) {
    return removeClass(e247, s411);
  });
};
var d15 = function(n136) {
  _inheritsLoose(CSSTransition, n136);
  function CSSTransition() {
    var e336;
    for (var s5 = arguments.length, r156 = new Array(s5), t243 = 0; t243 < s5; t243++)
      r156[t243] = arguments[t243];
    e336 = n136.call.apply(n136, [
      this
    ].concat(r156)) || this;
    e336.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    e336.onEnter = function(s64, r228) {
      var n225 = e336.resolveArguments(s64, r228), t334 = n225[0], o146 = n225[1];
      e336.removeClasses(t334, "exit");
      e336.addClass(t334, o146 ? "appear" : "enter", "base");
      e336.props.onEnter && e336.props.onEnter(s64, r228);
    };
    e336.onEntering = function(s73, r324) {
      var n320 = e336.resolveArguments(s73, r324), t423 = n320[0], o231 = n320[1];
      var a141 = o231 ? "appear" : "enter";
      e336.addClass(t423, a141, "active");
      e336.props.onEntering && e336.props.onEntering(s73, r324);
    };
    e336.onEntered = function(s83, r418) {
      var n420 = e336.resolveArguments(s83, r418), t520 = n420[0], o320 = n420[1];
      var a224 = o320 ? "appear" : "enter";
      e336.removeClasses(t520, a224);
      e336.addClass(t520, a224, "done");
      e336.props.onEntered && e336.props.onEntered(s83, r418);
    };
    e336.onExit = function(s92) {
      var r514 = e336.resolveArguments(s92), n514 = r514[0];
      e336.removeClasses(n514, "appear");
      e336.removeClasses(n514, "enter");
      e336.addClass(n514, "exit", "base");
      e336.props.onExit && e336.props.onExit(s92);
    };
    e336.onExiting = function(s102) {
      var r611 = e336.resolveArguments(s102), n611 = r611[0];
      e336.addClass(n611, "exit", "active");
      e336.props.onExiting && e336.props.onExiting(s102);
    };
    e336.onExited = function(s1110) {
      var r711 = e336.resolveArguments(s1110), n73 = r711[0];
      e336.removeClasses(n73, "exit");
      e336.addClass(n73, "exit", "done");
      e336.props.onExited && e336.props.onExited(s1110);
    };
    e336.resolveArguments = function(s1210, r810) {
      return e336.props.nodeRef ? [
        e336.props.nodeRef.current,
        s1210
      ] : [
        s1210,
        r810
      ];
    };
    e336.getClassNames = function(s1310) {
      var r95 = e336.props.classNames;
      var n8 = typeof r95 === "string";
      var t615 = n8 && r95 ? r95 + "-" : "";
      var o416 = n8 ? "" + t615 + s1310 : r95[s1310];
      var a312 = n8 ? o416 + "-active" : r95[s1310 + "Active"];
      var i139 = n8 ? o416 + "-done" : r95[s1310 + "Done"];
      return {
        baseClassName: o416,
        activeClassName: a312,
        doneClassName: i139
      };
    };
    return e336;
  }
  var t165 = CSSTransition.prototype;
  t165.addClass = function addClass2(e430, s143, r105) {
    var n9 = this.getClassNames(s143)[r105 + "ClassName"];
    var t711 = this.getClassNames("enter"), o511 = t711.doneClassName;
    s143 === "appear" && r105 === "done" && o511 && (n9 += " " + o511);
    r105 === "active" && e430 && e430.scrollTop;
    if (n9) {
      this.appliedClasses[s143][r105] = n9;
      l12(e430, n9);
    }
  };
  t165.removeClasses = function removeClasses(e526, s152) {
    var r1113 = this.appliedClasses[s152], n10 = r1113.base, t811 = r1113.active, o610 = r1113.done;
    this.appliedClasses[s152] = {};
    n10 && m12(e526, n10);
    t811 && m12(e526, t811);
    o610 && m12(e526, o610);
  };
  t165.render = function render() {
    var r1210 = this.props, n11 = (r1210.classNames, _objectWithoutPropertiesLoose(r1210, [
      "classNames"
    ]));
    return D2.createElement(E6, _extends({}, n11, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition;
}(D2.Component);
d15.defaultProps = {
  classNames: ""
};
d15.propTypes = false ? _extends({}, E6.propTypes, {
  classNames: u15,
  onEnter: s2.func,
  onEntering: s2.func,
  onEntered: s2.func,
  onExit: s2.func,
  onExiting: s2.func,
  onExited: s2.func
}) : {};
function getChildMapping(e174, t166) {
  var n137 = function mapper(e248) {
    return t166 && C2(e248) ? t166(e248) : e248;
  };
  var r157 = /* @__PURE__ */ Object.create(null);
  e174 && b.map(e174, function(e337) {
    return e337;
  }).forEach(function(e431) {
    r157[e431.key] = n137(e431);
  });
  return r157;
}
function mergeChildMappings(e527, t244) {
  e527 = e527 || {};
  t244 = t244 || {};
  function getValueForKey(n321) {
    return n321 in t244 ? t244[n321] : e527[n321];
  }
  var n226 = /* @__PURE__ */ Object.create(null);
  var r229 = [];
  for (var i140 in e527)
    if (i140 in t244) {
      if (r229.length) {
        n226[i140] = r229;
        r229 = [];
      }
    } else
      r229.push(i140);
  var o147;
  var a142 = {};
  for (var p125 in t244) {
    if (n226[p125])
      for (o147 = 0; o147 < n226[p125].length; o147++) {
        var l130 = n226[p125][o147];
        a142[n226[p125][o147]] = getValueForKey(l130);
      }
    a142[p125] = getValueForKey(p125);
  }
  for (o147 = 0; o147 < r229.length; o147++)
    a142[r229[o147]] = getValueForKey(r229[o147]);
  return a142;
}
function getProp(e616, t335, n421) {
  return n421[t335] != null ? n421[t335] : e616.props[t335];
}
function getInitialChildMapping(e712, t424) {
  return getChildMapping(e712.children, function(n515) {
    return k(n515, {
      onExited: t424.bind(null, n515),
      in: true,
      appear: getProp(n515, "appear", e712),
      enter: getProp(n515, "enter", e712),
      exit: getProp(n515, "exit", e712)
    });
  });
}
function getNextChildMapping(e813, t521, n612) {
  var r325 = getChildMapping(e813.children);
  var i226 = mergeChildMappings(t521, r325);
  Object.keys(i226).forEach(function(o232) {
    var p216 = i226[o232];
    if (C2(p216)) {
      var u130 = o232 in t521;
      var c132 = o232 in r325;
      var s144 = t521[o232];
      var d127 = C2(s144) && !s144.props.in;
      !c132 || u130 && !d127 ? c132 || !u130 || d127 ? c132 && u130 && C2(s144) && (i226[o232] = k(p216, {
        onExited: n612.bind(null, p216),
        in: s144.props.in,
        exit: getProp(p216, "exit", e813),
        enter: getProp(p216, "enter", e813)
      })) : i226[o232] = k(p216, {
        in: false
      }) : i226[o232] = k(p216, {
        onExited: n612.bind(null, p216),
        in: true,
        exit: getProp(p216, "exit", e813),
        enter: getProp(p216, "enter", e813)
      });
    }
  });
  return i226;
}
var c14 = Object.values || function(e912) {
  return Object.keys(e912).map(function(t616) {
    return e912[t616];
  });
};
var s15 = {
  component: "div",
  childFactory: function childFactory(e1011) {
    return e1011;
  }
};
var d16 = function(i312) {
  _inheritsLoose(TransitionGroup, i312);
  function TransitionGroup(e1112, t712) {
    var r419;
    r419 = i312.call(this, e1112, t712) || this;
    var o321 = r419.handleExited.bind(_assertThisInitialized(r419));
    r419.state = {
      contextValue: {
        isMounting: true
      },
      handleExited: o321,
      firstRender: true
    };
    return r419;
  }
  var a225 = TransitionGroup.prototype;
  a225.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  a225.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(e1211, t812) {
    var n74 = t812.children, r515 = t812.handleExited, i44 = t812.firstRender;
    return {
      children: i44 ? getInitialChildMapping(e1211, r515) : getNextChildMapping(e1211, n74, r515),
      firstRender: false
    };
  };
  a225.handleExited = function handleExited(e13, n8) {
    var r612 = getChildMapping(this.props.children);
    if (!(e13.key in r612)) {
      e13.props.onExited && e13.props.onExited(n8);
      this.mounted && this.setState(function(n9) {
        var r712 = _extends({}, n9.children);
        delete r712[e13.key];
        return {
          children: r712
        };
      });
    }
  };
  a225.render = function render() {
    var t910 = this.props, n10 = t910.component, r811 = t910.childFactory, i52 = _objectWithoutPropertiesLoose(t910, [
      "component",
      "childFactory"
    ]);
    var a313 = this.state.contextValue;
    var p39 = c14(this.state.children).map(r811);
    delete i52.appear;
    delete i52.enter;
    delete i52.exit;
    return n10 === null ? D2.createElement(e12.Provider, {
      value: a313
    }, p39) : D2.createElement(e12.Provider, {
      value: a313
    }, D2.createElement(n10, i52, p39));
  };
  return TransitionGroup;
}(D2.Component);
d16.propTypes = false ? {
  component: s2.any,
  children: s2.node,
  appear: s2.bool,
  enter: s2.bool,
  exit: s2.bool,
  childFactory: s2.func
} : {};
d16.defaultProps = s15;
var l13 = function(r158) {
  _inheritsLoose(ReplaceTransition, r158);
  function ReplaceTransition() {
    var e175;
    for (var n138 = arguments.length, t167 = new Array(n138), i141 = 0; i141 < n138; i141++)
      t167[i141] = arguments[i141];
    e175 = r158.call.apply(r158, [
      this
    ].concat(t167)) || this;
    e175.handleEnter = function() {
      for (var n227 = arguments.length, r230 = new Array(n227), t245 = 0; t245 < n227; t245++)
        r230[t245] = arguments[t245];
      return e175.handleLifecycle("onEnter", 0, r230);
    };
    e175.handleEntering = function() {
      for (var n322 = arguments.length, r326 = new Array(n322), t336 = 0; t336 < n322; t336++)
        r326[t336] = arguments[t336];
      return e175.handleLifecycle("onEntering", 0, r326);
    };
    e175.handleEntered = function() {
      for (var n422 = arguments.length, r420 = new Array(n422), t425 = 0; t425 < n422; t425++)
        r420[t425] = arguments[t425];
      return e175.handleLifecycle("onEntered", 0, r420);
    };
    e175.handleExit = function() {
      for (var n516 = arguments.length, r516 = new Array(n516), t522 = 0; t522 < n516; t522++)
        r516[t522] = arguments[t522];
      return e175.handleLifecycle("onExit", 1, r516);
    };
    e175.handleExiting = function() {
      for (var n613 = arguments.length, r613 = new Array(n613), t617 = 0; t617 < n613; t617++)
        r613[t617] = arguments[t617];
      return e175.handleLifecycle("onExiting", 1, r613);
    };
    e175.handleExited = function() {
      for (var n75 = arguments.length, r713 = new Array(n75), t713 = 0; t713 < n75; t713++)
        r713[t713] = arguments[t713];
      return e175.handleLifecycle("onExited", 1, r713);
    };
    return e175;
  }
  var l131 = ReplaceTransition.prototype;
  l131.handleLifecycle = function handleLifecycle(e249, n8, r812) {
    var o148;
    var l218 = this.props.children;
    var a50 = D2.Children.toArray(l218)[n8];
    a50.props[e249] && (o148 = a50.props)[e249].apply(o148, r812);
    if (this.props[e249]) {
      var d36 = a50.props.nodeRef ? void 0 : c3.findDOMNode(this);
      this.props[e249](d36);
    }
  };
  l131.render = function render() {
    var n9 = this.props, r96 = n9.children, i227 = n9.in, l310 = _objectWithoutPropertiesLoose(n9, [
      "children",
      "in"
    ]);
    var a53 = D2.Children.toArray(r96), d37 = a53[0], h36 = a53[1];
    delete l310.onEnter;
    delete l310.onEntering;
    delete l310.onEntered;
    delete l310.onExit;
    delete l310.onExiting;
    delete l310.onExited;
    return D2.createElement(d16, l310, i227 ? D2.cloneElement(d37, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : D2.cloneElement(h36, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition;
}(D2.Component);
l13.propTypes = false ? {
  in: s2.bool.isRequired,
  children: function children(e338, n10) {
    return D2.Children.count(e338[n10]) !== 2 ? new Error('"' + n10 + '" must be exactly two transition components.') : null;
  }
} : {};
var s16;
var u16;
function areChildrenDifferent(e176, n139) {
  return e176 !== n139 && (!D2.isValidElement(e176) || !D2.isValidElement(n139) || e176.key == null || e176.key !== n139.key);
}
var l14 = {
  out: "out-in",
  in: "in-out"
};
var p14 = function callHook(e250, t168, n228) {
  return function() {
    var r159;
    e250.props[t168] && (r159 = e250.props)[t168].apply(r159, arguments);
    n228();
  };
};
var m13 = (s16 = {}, s16[l14.out] = function(e339) {
  var n323 = e339.current, o149 = e339.changeState;
  return D2.cloneElement(n323, {
    in: false,
    onExited: p14(n323, "onExited", function() {
      o149(c13, null);
    })
  });
}, s16[l14.in] = function(e432) {
  var n423 = e432.current, o233 = e432.changeState, i142 = e432.children;
  return [
    n423,
    D2.cloneElement(i142, {
      in: true,
      onEntered: p14(i142, "onEntered", function() {
        o233(c13);
      })
    })
  ];
}, s16);
var d17 = (u16 = {}, u16[l14.out] = function(e528) {
  var n517 = e528.children, r231 = e528.changeState;
  return D2.cloneElement(n517, {
    in: true,
    onEntered: p14(n517, "onEntered", function() {
      r231(f19, D2.cloneElement(n517, {
        in: true
      }));
    })
  });
}, u16[l14.in] = function(e617) {
  var n614 = e617.current, r327 = e617.children, i228 = e617.changeState;
  return [
    D2.cloneElement(n614, {
      in: false,
      onExited: p14(n614, "onExited", function() {
        i228(f19, D2.cloneElement(r327, {
          in: true
        }));
      })
    }),
    D2.cloneElement(r327, {
      in: true
    })
  ];
}, u16);
var f20 = function(n76) {
  _inheritsLoose(SwitchTransition, n76);
  function SwitchTransition() {
    var e713;
    for (var t246 = arguments.length, r421 = new Array(t246), i313 = 0; i313 < t246; i313++)
      r421[i313] = arguments[i313];
    e713 = n76.call.apply(n76, [
      this
    ].concat(r421)) || this;
    e713.state = {
      status: f19,
      current: null
    };
    e713.appeared = false;
    e713.changeState = function(t337, n8) {
      n8 === void 0 && (n8 = e713.state.current);
      e713.setState({
        status: t337,
        current: n8
      });
    };
    return e713;
  }
  var s145 = SwitchTransition.prototype;
  s145.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(e814, n9) {
    return e814.children == null ? {
      current: null
    } : n9.status === c13 && e814.mode === l14.in ? {
      status: c13
    } : n9.current && areChildrenDifferent(n9.current, e814.children) ? {
      status: d14
    } : {
      current: D2.cloneElement(e814.children, {
        in: true
      })
    };
  };
  s145.render = function render() {
    var e913 = this.props, n10 = e913.children, s225 = e913.mode, u131 = this.state, c39 = u131.status, l132 = u131.current;
    var p126 = {
      children: n10,
      current: l132,
      changeState: this.changeState,
      status: c39
    };
    var f130;
    switch (c39) {
      case c13:
        f130 = d17[s225](p126);
        break;
      case d14:
        f130 = m13[s225](p126);
        break;
      case f19:
        f130 = l132;
    }
    return D2.createElement(e12.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, f130);
  };
  return SwitchTransition;
}(D2.Component);
f20.propTypes = false ? {
  mode: s2.oneOf([
    l14.in,
    l14.out
  ]),
  children: s2.oneOfType([
    s2.element.isRequired
  ])
} : {};
f20.defaultProps = {
  mode: l14.out
};
function Ripple(e177) {
  const { className: t169, classes: n140, pulsate: r160 = false, rippleX: i143, rippleY: l133, rippleSize: c133, in: u132, onExited: a143, timeout: p127 } = e177;
  const [f131, d128] = s1(false);
  const m126 = clsx_m(t169, n140.ripple, n140.rippleVisible, r160 && n140.ripplePulsate);
  const b120 = {
    width: c133,
    height: c133,
    top: -c133 / 2 + l133,
    left: -c133 / 2 + i143
  };
  const R110 = clsx_m(n140.child, f131 && n140.childLeaving, r160 && n140.childPulsate);
  u132 || f131 || d128(true);
  a1(() => {
    if (!u132 && a143 != null) {
      const e251 = setTimeout(a143, p127);
      return () => {
        clearTimeout(e251);
      };
    }
  }, [
    a143,
    u132,
    p127
  ]);
  return p4("span", {
    className: m126,
    style: b120,
    children: p4("span", {
      className: R110
    })
  });
}
false ? Ripple.propTypes = {
  classes: s2.object.isRequired,
  className: s2.string,
  in: s2.bool,
  onExited: s2.func,
  pulsate: s2.bool,
  rippleSize: s2.number,
  rippleX: s2.number,
  rippleY: s2.number,
  timeout: s2.number.isRequired
} : void 0;
var g10 = generateUtilityClasses("MuiTouchRipple", [
  "root",
  "ripple",
  "rippleVisible",
  "ripplePulsate",
  "child",
  "childLeaving",
  "childPulsate"
]);
var T3 = [
  "center",
  "classes",
  "className"
];
var v11;
var M3;
var C6;
var j5;
var _6 = (e433) => e433;
var k5 = 80;
var B2 = m(v11 || (v11 = _6`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
var E7 = m(M3 || (M3 = _6`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
var N4 = m(C6 || (C6 = _6`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
var V4 = t19("span", {
  name: "MuiTouchRipple",
  slot: "Root",
  skipSx: true
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
});
var P3 = t19(Ripple, {
  name: "MuiTouchRipple",
  slot: "Ripple"
})(j5 || (j5 = _6`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), g10.rippleVisible, B2, 550, ({ theme: e529 }) => e529.transitions.easing.easeInOut, g10.ripplePulsate, ({ theme: e618 }) => e618.transitions.duration.shorter, g10.child, g10.childLeaving, E7, 550, ({ theme: e714 }) => e714.transitions.easing.easeInOut, g10.childPulsate, N4, ({ theme: e815 }) => e815.transitions.easing.easeInOut);
var D4 = l1(function TouchRipple(n229, r232) {
  const i229 = useThemeProps1({
    props: n229,
    name: "MuiTouchRipple"
  });
  const { center: l219 = false, classes: c217 = {}, className: u217 } = i229, a226 = _objectWithoutPropertiesLoose(i229, T3);
  const [p217, m214] = s1([]);
  const b212 = c1(0);
  const R23 = c1(null);
  a1(() => {
    if (R23.current) {
      R23.current();
      R23.current = null;
    }
  }, [
    p217
  ]);
  const y114 = c1(false);
  const v116 = c1(null);
  const M18 = c1(null);
  const C110 = c1(null);
  a1(() => () => {
    clearTimeout(v116.current);
  }, []);
  const j110 = u2((e914) => {
    const { pulsate: t247, rippleX: o150, rippleY: n324, rippleSize: r328, cb: i314 } = e914;
    m214((e1012) => [
      ...e1012,
      p4(P3, {
        classes: {
          ripple: clsx_m(c217.ripple, g10.ripple),
          rippleVisible: clsx_m(c217.rippleVisible, g10.rippleVisible),
          ripplePulsate: clsx_m(c217.ripplePulsate, g10.ripplePulsate),
          child: clsx_m(c217.child, g10.child),
          childLeaving: clsx_m(c217.childLeaving, g10.childLeaving),
          childPulsate: clsx_m(c217.childPulsate, g10.childPulsate)
        },
        timeout: 550,
        pulsate: t247,
        rippleX: o150,
        rippleY: n324,
        rippleSize: r328
      }, b212.current)
    ]);
    b212.current += 1;
    R23.current = i314;
  }, [
    c217
  ]);
  const B16 = u2((e1113 = {}, t338 = {}, o322) => {
    const { pulsate: n424 = false, center: s146 = l219 || t338.pulsate, fakeElement: r422 = false } = t338;
    if (e1113.type === "mousedown" && y114.current) {
      y114.current = false;
      return;
    }
    e1113.type === "touchstart" && (y114.current = true);
    const i45 = r422 ? null : C110.current;
    const c310 = i45 ? i45.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    let u37;
    let a314;
    let p310;
    if (s146 || e1113.clientX === 0 && e1113.clientY === 0 || !e1113.clientX && !e1113.touches) {
      u37 = Math.round(c310.width / 2);
      a314 = Math.round(c310.height / 2);
    } else {
      const { clientX: t426, clientY: o234 } = e1113.touches ? e1113.touches[0] : e1113;
      u37 = Math.round(t426 - c310.left);
      a314 = Math.round(o234 - c310.top);
    }
    if (s146) {
      p310 = Math.sqrt((2 * c310.width ** 2 + c310.height ** 2) / 3);
      p310 % 2 === 0 && (p310 += 1);
    } else {
      const e1212 = 2 * Math.max(Math.abs((i45 ? i45.clientWidth : 0) - u37), u37) + 2;
      const t523 = 2 * Math.max(Math.abs((i45 ? i45.clientHeight : 0) - a314), a314) + 2;
      p310 = Math.sqrt(e1212 ** 2 + t523 ** 2);
    }
    if (e1113.touches) {
      if (M18.current === null) {
        M18.current = () => {
          j110({
            pulsate: n424,
            rippleX: u37,
            rippleY: a314,
            rippleSize: p310,
            cb: o322
          });
        };
        v116.current = setTimeout(() => {
          if (M18.current) {
            M18.current();
            M18.current = null;
          }
        }, k5);
      }
    } else
      j110({
        pulsate: n424,
        rippleX: u37,
        rippleY: a314,
        rippleSize: p310,
        cb: o322
      });
  }, [
    l219,
    j110
  ]);
  const E110 = u2(() => {
    B16({}, {
      pulsate: true
    });
  }, [
    B16
  ]);
  const N110 = u2((e13, t618) => {
    clearTimeout(v116.current);
    if (e13.type === "touchend" && M18.current) {
      M18.current();
      M18.current = null;
      v116.current = setTimeout(() => {
        N110(e13, t618);
      });
    } else {
      M18.current = null;
      m214((e14) => e14.length > 0 ? e14.slice(1) : e14);
      R23.current = t618;
    }
  }, []);
  E2(r232, () => ({
    pulsate: E110,
    start: B16,
    stop: N110
  }), [
    E110,
    B16,
    N110
  ]);
  return p4(V4, _extends({
    className: clsx_m(c217.root, g10.root, u217),
    ref: C110
  }, a226, {
    children: p4(d16, {
      component: null,
      exit: true,
      children: p217
    })
  }));
});
false ? D4.propTypes = {
  center: s2.bool,
  classes: s2.object,
  className: s2.string
} : void 0;
function getButtonBaseUtilityClass(e15) {
  return generateUtilityClass("MuiButtonBase", e15);
}
var w7 = generateUtilityClasses("MuiButtonBase", [
  "root",
  "disabled",
  "focusVisible"
]);
var S4 = [
  "action",
  "centerRipple",
  "children",
  "className",
  "component",
  "disabled",
  "disableRipple",
  "disableTouchRipple",
  "focusRipple",
  "focusVisibleClassName",
  "LinkComponent",
  "onBlur",
  "onClick",
  "onContextMenu",
  "onDragLeave",
  "onFocus",
  "onFocusVisible",
  "onKeyDown",
  "onKeyUp",
  "onMouseDown",
  "onMouseLeave",
  "onMouseUp",
  "onTouchEnd",
  "onTouchMove",
  "onTouchStart",
  "tabIndex",
  "TouchRippleProps",
  "type"
];
var useUtilityClasses9 = (e16) => {
  const { disabled: t714, focusVisible: o417, focusVisibleClassName: n518, classes: s226 } = e16;
  const r517 = {
    root: [
      "root",
      t714 && "disabled",
      o417 && "focusVisible"
    ]
  };
  const i53 = composeClasses(r517, getButtonBaseUtilityClass, s226);
  o417 && n518 && (i53.root += ` ${n518}`);
  return i53;
};
var L3 = t19("button", {
  name: "MuiButtonBase",
  slot: "Root",
  overridesResolver: (e5, t813) => t813.root
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  outline: 0,
  border: 0,
  margin: 0,
  borderRadius: 0,
  padding: 0,
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  WebkitAppearance: "none",
  textDecoration: "none",
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
  },
  [`&.${w7.disabled}`]: {
    pointerEvents: "none",
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
});
var $3 = l1(function ButtonBase(n615, c42) {
  const u43 = useThemeProps1({
    props: n615,
    name: "MuiButtonBase"
  });
  const { action: a410, centerRipple: p42 = false, children: d213, className: m32, component: R31 = "button", disabled: y210 = false, disableRipple: g117 = false, disableTouchRipple: T110 = false, focusRipple: v212 = false, LinkComponent: M21 = "a", onBlur: C27, onClick: j21, onContextMenu: x112, onDragLeave: k19, onFocus: B21, onFocusVisible: E27, onKeyDown: N27, onKeyUp: V19, onMouseDown: P11, onMouseLeave: w113, onMouseUp: $12, onTouchEnd: H10, onTouchMove: U17, onTouchStart: I12, tabIndex: O20 = 0, TouchRippleProps: z14, type: F17 } = u43, X9 = _objectWithoutPropertiesLoose(u43, S4);
  const K8 = c1(null);
  const Y7 = c1(null);
  const { isFocusVisibleRef: A13, onFocus: q14, onBlur: W12, ref: G10 } = useIsFocusVisible();
  const [J8, Q8] = s1(false);
  y210 && J8 && Q8(false);
  E2(a410, () => ({
    focusVisible: () => {
      Q8(true);
      K8.current.focus();
    }
  }), []);
  a1(() => {
    J8 && v212 && !g117 && Y7.current.pulsate();
  }, [
    g117,
    v212,
    J8
  ]);
  function useRippleHandler(e17, t911, o512 = T110) {
    return useEventCallback((n77) => {
      t911 && t911(n77);
      const s319 = o512;
      !s319 && Y7.current && Y7.current[e17](n77);
      return true;
    });
  }
  const Z8 = useRippleHandler("start", P11);
  const ee5 = useRippleHandler("stop", x112);
  const te5 = useRippleHandler("stop", k19);
  const oe2 = useRippleHandler("stop", $12);
  const ne2 = useRippleHandler("stop", (e18) => {
    J8 && e18.preventDefault();
    w113 && w113(e18);
  });
  const se2 = useRippleHandler("start", I12);
  const re = useRippleHandler("stop", H10);
  const ie = useRippleHandler("stop", U17);
  const le2 = useRippleHandler("stop", (e19) => {
    W12(e19);
    A13.current === false && Q8(false);
    C27 && C27(e19);
  }, false);
  const ce = useEventCallback((e20) => {
    K8.current || (K8.current = e20.currentTarget);
    q14(e20);
    if (A13.current === true) {
      Q8(true);
      E27 && E27(e20);
    }
    B21 && B21(e20);
  });
  const isNonNativeButton = () => {
    const e21 = K8.current;
    return R31 && R31 !== "button" && !(e21.tagName === "A" && e21.href);
  };
  const ue2 = c1(false);
  const ae = useEventCallback((e22) => {
    if (v212 && !ue2.current && J8 && Y7.current && e22.key === " ") {
      ue2.current = true;
      Y7.current.stop(e22, () => {
        Y7.current.start(e22);
      });
    }
    e22.target === e22.currentTarget && isNonNativeButton() && e22.key === " " && e22.preventDefault();
    N27 && N27(e22);
    if (e22.target === e22.currentTarget && isNonNativeButton() && e22.key === "Enter" && !y210) {
      e22.preventDefault();
      j21 && j21(e22);
    }
  });
  const pe2 = useEventCallback((e23) => {
    if (v212 && e23.key === " " && Y7.current && J8 && !e23.defaultPrevented) {
      ue2.current = false;
      Y7.current.stop(e23, () => {
        Y7.current.pulsate(e23);
      });
    }
    V19 && V19(e23);
    j21 && e23.target === e23.currentTarget && isNonNativeButton() && e23.key === " " && !e23.defaultPrevented && j21(e23);
  });
  let fe = R31;
  fe === "button" && (X9.href || X9.to) && (fe = M21);
  const de2 = {};
  if (fe === "button") {
    de2.type = F17 === void 0 ? "button" : F17;
    de2.disabled = y210;
  } else {
    X9.href || X9.to || (de2.role = "button");
    y210 && (de2["aria-disabled"] = y210);
  }
  const me2 = useForkRef(G10, K8);
  const he2 = useForkRef(c42, me2);
  const [be22, Re] = s1(false);
  a1(() => {
    Re(true);
  }, []);
  const ye = be22 && !g117 && !y210;
  false;
  const ge2 = _extends({}, u43, {
    centerRipple: p42,
    component: R31,
    disabled: y210,
    disableRipple: g117,
    disableTouchRipple: T110,
    focusRipple: v212,
    tabIndex: O20,
    focusVisible: J8
  });
  const Te = useUtilityClasses9(ge2);
  return y3(L3, _extends({
    as: fe,
    className: clsx_m(Te.root, m32),
    ownerState: ge2,
    onBlur: le2,
    onClick: j21,
    onContextMenu: ee5,
    onFocus: ce,
    onKeyDown: ae,
    onKeyUp: pe2,
    onMouseDown: Z8,
    onMouseLeave: ne2,
    onMouseUp: oe2,
    onDragLeave: te5,
    onTouchEnd: re,
    onTouchMove: ie,
    onTouchStart: se2,
    ref: he2,
    tabIndex: y210 ? -1 : O20,
    type: F17
  }, de2, X9, {
    children: [
      d213,
      ye ? p4(D4, _extends({
        ref: Y7,
        center: p42
      }, z14)) : null
    ]
  }));
});
false ? $3.propTypes = {
  action: a4,
  centerRipple: s2.bool,
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  component: u22,
  disabled: s2.bool,
  disableRipple: s2.bool,
  disableTouchRipple: s2.bool,
  focusRipple: s2.bool,
  focusVisibleClassName: s2.string,
  href: s2.any,
  LinkComponent: s2.elementType,
  onBlur: s2.func,
  onClick: s2.func,
  onContextMenu: s2.func,
  onDragLeave: s2.func,
  onFocus: s2.func,
  onFocusVisible: s2.func,
  onKeyDown: s2.func,
  onKeyUp: s2.func,
  onMouseDown: s2.func,
  onMouseLeave: s2.func,
  onMouseUp: s2.func,
  onTouchEnd: s2.func,
  onTouchMove: s2.func,
  onTouchStart: s2.func,
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  tabIndex: s2.number,
  TouchRippleProps: s2.object,
  type: s2.oneOfType([
    s2.oneOf([
      "button",
      "reset",
      "submit"
    ]),
    s2.string
  ])
} : void 0;
function getFabUtilityClass(e178) {
  return generateUtilityClass("MuiFab", e178);
}
var u17 = generateUtilityClasses("MuiFab", [
  "root",
  "primary",
  "secondary",
  "extended",
  "circular",
  "focusVisible",
  "disabled",
  "colorInherit",
  "sizeSmall",
  "sizeMedium",
  "sizeLarge"
]);
var b14 = [
  "children",
  "className",
  "color",
  "component",
  "disabled",
  "disableFocusRipple",
  "focusVisibleClassName",
  "size",
  "variant"
];
var useUtilityClasses10 = (e252) => {
  const { color: o151, variant: r161, classes: t170, size: i144 } = e252;
  const a144 = {
    root: [
      "root",
      r161,
      `size${capitalize(i144)}`,
      o151 === "inherit" && "colorInherit",
      o151 === "primary" && "primary",
      o151 === "secondary" && "secondary"
    ]
  };
  return composeClasses(a144, getFabUtilityClass, t170);
};
var h13 = t19($3, {
  name: "MuiFab",
  slot: "Root",
  overridesResolver: (e340, o235) => {
    const { ownerState: r233 } = e340;
    return [
      o235.root,
      o235[r233.variant],
      o235[`size${capitalize(r233.size)}`],
      r233.color === "inherit" && o235.colorInherit,
      r233.color === "primary" && o235.primary,
      r233.color === "secondary" && o235.secondary
    ];
  }
})(({ theme: e434, ownerState: r329 }) => _extends({}, e434.typography.button, {
  minHeight: 36,
  transition: e434.transitions.create([
    "background-color",
    "box-shadow",
    "border-color"
  ], {
    duration: e434.transitions.duration.short
  }),
  borderRadius: "50%",
  padding: 0,
  minWidth: 0,
  width: 56,
  height: 56,
  boxShadow: e434.shadows[6],
  "&:active": {
    boxShadow: e434.shadows[12]
  },
  color: e434.palette.getContrastText(e434.palette.grey[300]),
  backgroundColor: e434.palette.grey[300],
  "&:hover": {
    backgroundColor: e434.palette.grey.A100,
    "@media (hover: none)": {
      backgroundColor: e434.palette.grey[300]
    },
    textDecoration: "none"
  },
  [`&.${u17.focusVisible}`]: {
    boxShadow: e434.shadows[6]
  },
  [`&.${u17.disabled}`]: {
    color: e434.palette.action.disabled,
    boxShadow: e434.shadows[0],
    backgroundColor: e434.palette.action.disabledBackground
  }
}, r329.size === "small" && {
  width: 40,
  height: 40
}, r329.size === "medium" && {
  width: 48,
  height: 48
}, r329.variant === "extended" && {
  borderRadius: 24,
  padding: "0 16px",
  width: "auto",
  minHeight: "auto",
  minWidth: 48,
  height: 48
}, r329.variant === "extended" && r329.size === "small" && {
  width: "auto",
  padding: "0 8px",
  borderRadius: 17,
  minWidth: 34,
  height: 34
}, r329.variant === "extended" && r329.size === "medium" && {
  width: "auto",
  padding: "0 16px",
  borderRadius: 20,
  minWidth: 40,
  height: 40
}, r329.color === "inherit" && {
  color: "inherit"
}), ({ theme: e530, ownerState: r423 }) => _extends({}, r423.color === "primary" && {
  color: e530.palette.primary.contrastText,
  backgroundColor: e530.palette.primary.main,
  "&:hover": {
    backgroundColor: e530.palette.primary.dark,
    "@media (hover: none)": {
      backgroundColor: e530.palette.primary.main
    }
  }
}, r423.color === "secondary" && {
  color: e530.palette.secondary.contrastText,
  backgroundColor: e530.palette.secondary.main,
  "&:hover": {
    backgroundColor: e530.palette.secondary.dark,
    "@media (hover: none)": {
      backgroundColor: e530.palette.secondary.main
    }
  }
}));
var y10 = l1(function Fab(r518, t248) {
  const a227 = useThemeProps1({
    props: r518,
    name: "MuiFab"
  });
  const { children: s147, className: n141, color: l134 = "default", component: c134 = "button", disabled: p128 = false, disableFocusRipple: u133 = false, focusVisibleClassName: y115, size: g44 = "large", variant: f43 = "circular" } = a227, x29 = _objectWithoutPropertiesLoose(a227, b14);
  const w27 = _extends({}, a227, {
    color: l134,
    component: c134,
    disabled: p128,
    disableFocusRipple: u133,
    size: g44,
    variant: f43
  });
  const v35 = useUtilityClasses10(w27);
  return p4(h13, _extends({
    className: clsx_m(v35.root, n141),
    component: c134,
    disabled: p128,
    focusRipple: !u133,
    focusVisibleClassName: clsx_m(v35.focusVisible, y115),
    ownerState: w27,
    ref: t248
  }, x29, {
    children: s147
  }));
});
false ? y10.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  color: s2.oneOfType([
    s2.oneOf([
      "default",
      "inherit",
      "primary",
      "secondary"
    ]),
    s2.string
  ]),
  component: s2.elementType,
  disabled: s2.bool,
  disableFocusRipple: s2.bool,
  disableRipple: s2.bool,
  focusVisibleClassName: s2.string,
  href: s2.string,
  size: s2.oneOfType([
    s2.oneOf([
      "small",
      "medium",
      "large"
    ]),
    s2.string
  ]),
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  variant: s2.oneOfType([
    s2.oneOf([
      "circular",
      "extended"
    ]),
    s2.string
  ])
} : void 0;
var o9 = t1({});
function getButtonUtilityClass(e179) {
  return generateUtilityClass("MuiButton", e179);
}
var x8 = generateUtilityClasses("MuiButton", [
  "root",
  "text",
  "textInherit",
  "textPrimary",
  "textSecondary",
  "outlined",
  "outlinedInherit",
  "outlinedPrimary",
  "outlinedSecondary",
  "contained",
  "containedInherit",
  "containedPrimary",
  "containedSecondary",
  "disableElevation",
  "focusVisible",
  "disabled",
  "colorInherit",
  "textSizeSmall",
  "textSizeMedium",
  "textSizeLarge",
  "outlinedSizeSmall",
  "outlinedSizeMedium",
  "outlinedSizeLarge",
  "containedSizeSmall",
  "containedSizeMedium",
  "containedSizeLarge",
  "sizeMedium",
  "sizeSmall",
  "sizeLarge",
  "fullWidth",
  "startIcon",
  "endIcon",
  "iconSizeSmall",
  "iconSizeMedium",
  "iconSizeLarge"
]);
var v12 = [
  "children",
  "color",
  "component",
  "className",
  "disabled",
  "disableElevation",
  "disableFocusRipple",
  "endIcon",
  "focusVisibleClassName",
  "fullWidth",
  "size",
  "startIcon",
  "type",
  "variant"
];
var useUtilityClasses11 = (e253) => {
  const { color: t171, disableElevation: i145, fullWidth: n142, size: r162, variant: l135, classes: s148 } = e253;
  const c135 = {
    root: [
      "root",
      l135,
      `${l135}${capitalize(t171)}`,
      `size${capitalize(r162)}`,
      `${l135}Size${capitalize(r162)}`,
      t171 === "inherit" && "colorInherit",
      i145 && "disableElevation",
      n142 && "fullWidth"
    ],
    label: [
      "label"
    ],
    startIcon: [
      "startIcon",
      `iconSize${capitalize(r162)}`
    ],
    endIcon: [
      "endIcon",
      `iconSize${capitalize(r162)}`
    ]
  };
  const p129 = composeClasses(c135, getButtonUtilityClass, s148);
  return _extends({}, s148, p129);
};
var commonIconStyles = (e341) => _extends({}, e341.size === "small" && {
  "& > *:nth-of-type(1)": {
    fontSize: 18
  }
}, e341.size === "medium" && {
  "& > *:nth-of-type(1)": {
    fontSize: 20
  }
}, e341.size === "large" && {
  "& > *:nth-of-type(1)": {
    fontSize: 22
  }
});
var y11 = t19($3, {
  shouldForwardProp: (e435) => rootShouldForwardProp(e435) || e435 === "classes",
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (e531, o152) => {
    const { ownerState: t249 } = e531;
    return [
      o152.root,
      o152[t249.variant],
      o152[`${t249.variant}${capitalize(t249.color)}`],
      o152[`size${capitalize(t249.size)}`],
      o152[`${t249.variant}Size${capitalize(t249.size)}`],
      t249.color === "inherit" && o152.colorInherit,
      t249.disableElevation && o152.disableElevation,
      t249.fullWidth && o152.fullWidth
    ];
  }
})(({ theme: e619, ownerState: t339 }) => _extends({}, e619.typography.button, {
  minWidth: 64,
  padding: "6px 16px",
  borderRadius: e619.shape.borderRadius,
  transition: e619.transitions.create([
    "background-color",
    "box-shadow",
    "border-color",
    "color"
  ], {
    duration: e619.transitions.duration.short
  }),
  "&:hover": _extends({
    textDecoration: "none",
    backgroundColor: alpha(e619.palette.text.primary, e619.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }, t339.variant === "text" && t339.color !== "inherit" && {
    backgroundColor: alpha(e619.palette[t339.color].main, e619.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }, t339.variant === "outlined" && t339.color !== "inherit" && {
    border: `1px solid ${e619.palette[t339.color].main}`,
    backgroundColor: alpha(e619.palette[t339.color].main, e619.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }, t339.variant === "contained" && {
    backgroundColor: e619.palette.grey.A100,
    boxShadow: e619.shadows[4],
    "@media (hover: none)": {
      boxShadow: e619.shadows[2],
      backgroundColor: e619.palette.grey[300]
    }
  }, t339.variant === "contained" && t339.color !== "inherit" && {
    backgroundColor: e619.palette[t339.color].dark,
    "@media (hover: none)": {
      backgroundColor: e619.palette[t339.color].main
    }
  }),
  "&:active": _extends({}, t339.variant === "contained" && {
    boxShadow: e619.shadows[8]
  }),
  [`&.${x8.focusVisible}`]: _extends({}, t339.variant === "contained" && {
    boxShadow: e619.shadows[6]
  }),
  [`&.${x8.disabled}`]: _extends({
    color: e619.palette.action.disabled
  }, t339.variant === "outlined" && {
    border: `1px solid ${e619.palette.action.disabledBackground}`
  }, t339.variant === "outlined" && t339.color === "secondary" && {
    border: `1px solid ${e619.palette.action.disabled}`
  }, t339.variant === "contained" && {
    color: e619.palette.action.disabled,
    boxShadow: e619.shadows[0],
    backgroundColor: e619.palette.action.disabledBackground
  })
}, t339.variant === "text" && {
  padding: "6px 8px"
}, t339.variant === "text" && t339.color !== "inherit" && {
  color: e619.palette[t339.color].main
}, t339.variant === "outlined" && {
  padding: "5px 15px",
  border: "1px solid " + (e619.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)")
}, t339.variant === "outlined" && t339.color !== "inherit" && {
  color: e619.palette[t339.color].main,
  border: `1px solid ${alpha(e619.palette[t339.color].main, 0.5)}`
}, t339.variant === "contained" && {
  color: e619.palette.getContrastText(e619.palette.grey[300]),
  backgroundColor: e619.palette.grey[300],
  boxShadow: e619.shadows[2]
}, t339.variant === "contained" && t339.color !== "inherit" && {
  color: e619.palette[t339.color].contrastText,
  backgroundColor: e619.palette[t339.color].main
}, t339.color === "inherit" && {
  color: "inherit",
  borderColor: "currentColor"
}, t339.size === "small" && t339.variant === "text" && {
  padding: "4px 5px",
  fontSize: e619.typography.pxToRem(13)
}, t339.size === "large" && t339.variant === "text" && {
  padding: "8px 11px",
  fontSize: e619.typography.pxToRem(15)
}, t339.size === "small" && t339.variant === "outlined" && {
  padding: "3px 9px",
  fontSize: e619.typography.pxToRem(13)
}, t339.size === "large" && t339.variant === "outlined" && {
  padding: "7px 21px",
  fontSize: e619.typography.pxToRem(15)
}, t339.size === "small" && t339.variant === "contained" && {
  padding: "4px 10px",
  fontSize: e619.typography.pxToRem(13)
}, t339.size === "large" && t339.variant === "contained" && {
  padding: "8px 22px",
  fontSize: e619.typography.pxToRem(15)
}, t339.fullWidth && {
  width: "100%"
}), ({ ownerState: e715 }) => e715.disableElevation && {
  boxShadow: "none",
  "&:hover": {
    boxShadow: "none"
  },
  [`&.${x8.focusVisible}`]: {
    boxShadow: "none"
  },
  "&:active": {
    boxShadow: "none"
  },
  [`&.${x8.disabled}`]: {
    boxShadow: "none"
  }
});
var S5 = t19("span", {
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (e816, o236) => {
    const { ownerState: t427 } = e816;
    return [
      o236.startIcon,
      o236[`iconSize${capitalize(t427.size)}`]
    ];
  }
})(({ ownerState: e915 }) => _extends({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4
}, e915.size === "small" && {
  marginLeft: -2
}, commonIconStyles(e915)));
var z3 = t19("span", {
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (e1013, o323) => {
    const { ownerState: t524 } = e1013;
    return [
      o323.endIcon,
      o323[`iconSize${capitalize(t524.size)}`]
    ];
  }
})(({ ownerState: e1114 }) => _extends({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8
}, e1114.size === "small" && {
  marginRight: -2
}, commonIconStyles(e1114)));
var w8 = l1(function Button(i230, a145) {
  const l220 = r1(o9);
  const s227 = resolveProps(l220, i230);
  const d129 = useThemeProps1({
    props: s227,
    name: "MuiButton"
  });
  const { children: c218, color: p218 = "primary", component: m127 = "button", className: b121, disabled: x113 = false, disableElevation: w114 = false, disableFocusRipple: C28 = false, endIcon: I13, focusVisibleClassName: R24, fullWidth: $9 = false, size: k20 = "medium", startIcon: T23, type: B17, variant: O21 = "text" } = d129, E28 = _objectWithoutPropertiesLoose(d129, v12);
  const N28 = _extends({}, d129, {
    color: p218,
    component: m127,
    disabled: x113,
    disableElevation: w114,
    disableFocusRipple: C28,
    fullWidth: $9,
    size: k20,
    type: B17,
    variant: O21
  });
  const W13 = useUtilityClasses11(N28);
  const M19 = T23 && p4(S5, {
    className: W13.startIcon,
    ownerState: N28,
    children: T23
  });
  const j222 = I13 && p4(z3, {
    className: W13.endIcon,
    ownerState: N28,
    children: I13
  });
  return y3(y11, _extends({
    ownerState: N28,
    className: clsx_m(b121, l220.className),
    component: m127,
    disabled: x113,
    focusRipple: !C28,
    focusVisibleClassName: clsx_m(W13.focusVisible, R24),
    ref: a145,
    type: B17
  }, E28, {
    classes: W13,
    children: [
      M19,
      c218,
      j222
    ]
  }));
});
false ? w8.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  color: s2.oneOfType([
    s2.oneOf([
      "inherit",
      "primary",
      "secondary",
      "success",
      "error",
      "info",
      "warning"
    ]),
    s2.string
  ]),
  component: s2.elementType,
  disabled: s2.bool,
  disableElevation: s2.bool,
  disableFocusRipple: s2.bool,
  disableRipple: s2.bool,
  endIcon: s2.node,
  focusVisibleClassName: s2.string,
  fullWidth: s2.bool,
  href: s2.string,
  size: s2.oneOfType([
    s2.oneOf([
      "small",
      "medium",
      "large"
    ]),
    s2.string
  ]),
  startIcon: s2.node,
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  type: s2.oneOfType([
    s2.oneOf([
      "button",
      "reset",
      "submit"
    ]),
    s2.string
  ]),
  variant: s2.oneOfType([
    s2.oneOf([
      "contained",
      "outlined",
      "text"
    ]),
    s2.string
  ])
} : void 0;
function getSvgIconUtilityClass(o153) {
  return generateUtilityClass("MuiSvgIcon", o153);
}
generateUtilityClasses("MuiSvgIcon", [
  "root",
  "colorPrimary",
  "colorSecondary",
  "colorAction",
  "colorError",
  "colorDisabled",
  "fontSizeInherit",
  "fontSizeSmall",
  "fontSizeMedium",
  "fontSizeLarge"
]);
var h14 = [
  "children",
  "className",
  "color",
  "component",
  "fontSize",
  "htmlColor",
  "inheritViewBox",
  "titleAccess",
  "viewBox"
];
var useUtilityClasses12 = (o237) => {
  const { color: e180, fontSize: t172, classes: r163 } = o237;
  const i146 = {
    root: [
      "root",
      e180 !== "inherit" && `color${capitalize(e180)}`,
      `fontSize${capitalize(t172)}`
    ]
  };
  return composeClasses(i146, getSvgIconUtilityClass, r163);
};
var u18 = t19("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (o324, e254) => {
    const { ownerState: t250 } = o324;
    return [
      e254.root,
      t250.color !== "inherit" && e254[`color${capitalize(t250.color)}`],
      e254[`fontSize${capitalize(t250.fontSize)}`]
    ];
  }
})(({ theme: o418, ownerState: e342 }) => {
  var t340, r234;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    fill: "currentColor",
    flexShrink: 0,
    transition: o418.transitions.create("fill", {
      duration: o418.transitions.duration.shorter
    }),
    fontSize: {
      inherit: "inherit",
      small: o418.typography.pxToRem(20),
      medium: o418.typography.pxToRem(24),
      large: o418.typography.pxToRem(35)
    }[e342.fontSize],
    color: (t340 = (r234 = o418.palette[e342.color]) == null ? void 0 : r234.main) != null ? t340 : {
      action: o418.palette.action.active,
      disabled: o418.palette.action.disabled,
      inherit: void 0
    }[e342.color]
  };
});
var g11 = l1(function SvgIcon(t428, r330) {
  const n143 = useThemeProps1({
    props: t428,
    name: "MuiSvgIcon"
  });
  const { children: s149, className: l136, color: a146 = "inherit", component: f132 = "svg", fontSize: d130 = "medium", htmlColor: g118, inheritViewBox: S18 = false, titleAccess: v36, viewBox: y40 = "0 0 24 24" } = n143, b36 = _objectWithoutPropertiesLoose(n143, h14);
  const x30 = _extends({}, n143, {
    color: a146,
    component: f132,
    fontSize: d130,
    inheritViewBox: S18,
    viewBox: y40
  });
  const w28 = {};
  S18 || (w28.viewBox = y40);
  const z15 = useUtilityClasses12(x30);
  return y3(u18, _extends({
    as: f132,
    className: clsx_m(z15.root, l136),
    ownerState: x30,
    focusable: "false",
    color: g118,
    "aria-hidden": !v36 || void 0,
    role: v36 ? "img" : void 0,
    ref: r330
  }, w28, b36, {
    children: [
      s149,
      v36 ? p4("title", {
        children: v36
      }) : null
    ]
  }));
});
false ? g11.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  color: s2.oneOfType([
    s2.oneOf([
      "inherit",
      "action",
      "disabled",
      "primary",
      "secondary",
      "error",
      "info",
      "success",
      "warning"
    ]),
    s2.string
  ]),
  component: s2.elementType,
  fontSize: s2.oneOfType([
    s2.oneOf([
      "inherit",
      "large",
      "medium",
      "small"
    ]),
    s2.string
  ]),
  htmlColor: s2.string,
  inheritViewBox: s2.bool,
  shapeRendering: s2.string,
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  titleAccess: s2.string,
  viewBox: s2.string
} : void 0;
g11.muiName = "SvgIcon";
function createSvgIcon(m33, a54) {
  const Component = (r164, i46) => p4(g11, _extends({
    "data-testid": `${a54}Icon`,
    ref: i46
  }, r164, {
    children: m33
  }));
  false;
  Component.muiName = g11.muiName;
  return w2(l1(Component));
}
function getToggleButtonUtilityClass(e181) {
  return generateUtilityClass("MuiToggleButton", e181);
}
var f21 = generateUtilityClasses("MuiToggleButton", [
  "root",
  "disabled",
  "selected",
  "standard",
  "primary",
  "secondary",
  "sizeSmall",
  "sizeMedium",
  "sizeLarge"
]);
var b15 = [
  "children",
  "className",
  "color",
  "disabled",
  "disableFocusRipple",
  "fullWidth",
  "onChange",
  "onClick",
  "selected",
  "size",
  "value"
];
var useUtilityClasses13 = (e255) => {
  const { classes: o154, fullWidth: t173, selected: r165, disabled: s150, size: l137, color: i147 } = e255;
  const n144 = {
    root: [
      "root",
      r165 && "selected",
      s150 && "disabled",
      t173 && "fullWidth",
      `size${capitalize(l137)}`,
      i147
    ]
  };
  return composeClasses(n144, getToggleButtonUtilityClass, o154);
};
var g12 = t19($3, {
  name: "MuiToggleButton",
  slot: "Root",
  overridesResolver: (e343, o238) => {
    const { ownerState: t251 } = e343;
    return [
      o238.root,
      o238[`size${capitalize(t251.size)}`]
    ];
  }
})(({ theme: e436, ownerState: t341 }) => {
  const r235 = t341.color === "standard" ? e436.palette.text.primary : e436.palette[t341.color].main;
  return _extends({}, e436.typography.button, {
    borderRadius: e436.shape.borderRadius,
    padding: 11,
    border: `1px solid ${e436.palette.divider}`,
    color: e436.palette.action.active
  }, t341.fullWidth && {
    width: "100%"
  }, {
    [`&.${f21.disabled}`]: {
      color: e436.palette.action.disabled,
      border: `1px solid ${e436.palette.action.disabledBackground}`
    },
    "&:hover": {
      textDecoration: "none",
      backgroundColor: alpha(e436.palette.text.primary, e436.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${f21.selected}`]: {
      color: r235,
      backgroundColor: alpha(r235, e436.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: alpha(r235, e436.palette.action.selectedOpacity + e436.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: alpha(r235, e436.palette.action.selectedOpacity)
        }
      }
    }
  }, t341.size === "small" && {
    padding: 7,
    fontSize: e436.typography.pxToRem(13)
  }, t341.size === "large" && {
    padding: 15,
    fontSize: e436.typography.pxToRem(15)
  });
});
var y12 = l1(function ToggleButton(t429, r331) {
  const l221 = useThemeProps1({
    props: t429,
    name: "MuiToggleButton"
  });
  const { children: i231, className: a147, color: n230 = "standard", disabled: d131 = false, disableFocusRipple: p130 = false, fullWidth: u134 = false, onChange: f133, onClick: y116, selected: h37, size: j23 = "medium", value: v37 } = l221, T24 = _objectWithoutPropertiesLoose(l221, b15);
  const C29 = _extends({}, l221, {
    color: n230,
    disabled: d131,
    disableFocusRipple: p130,
    fullWidth: u134,
    size: j23
  });
  const z16 = useUtilityClasses13(C29);
  const handleChange = (e532) => {
    if (y116) {
      y116(e532, v37);
      if (e532.defaultPrevented)
        return;
    }
    f133 && f133(e532, v37);
  };
  return p4(g12, _extends({
    className: clsx_m(z16.root, a147),
    disabled: d131,
    focusRipple: !p130,
    ref: r331,
    onClick: handleChange,
    onChange: f133,
    value: v37,
    ownerState: C29,
    "aria-pressed": h37
  }, T24, {
    children: i231
  }));
});
false ? y12.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  color: s2.oneOfType([
    s2.oneOf([
      "standard",
      "primary",
      "secondary",
      "error",
      "info",
      "success",
      "warning"
    ]),
    s2.string
  ]),
  disabled: s2.bool,
  disableFocusRipple: s2.bool,
  disableRipple: s2.bool,
  fullWidth: s2.bool,
  onChange: s2.func,
  onClick: s2.func,
  selected: s2.bool,
  size: s2.oneOfType([
    s2.oneOf([
      "small",
      "medium",
      "large"
    ]),
    s2.string
  ]),
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  value: s2.any.isRequired
} : void 0;
function isValueSelected(e182, o155) {
  return o155 !== void 0 && e182 !== void 0 && (Array.isArray(o155) ? o155.indexOf(e182) >= 0 : e182 === o155);
}
function getToggleButtonGroupUtilityClass(e256) {
  return generateUtilityClass("MuiToggleButtonGroup", e256);
}
var m14 = generateUtilityClasses("MuiToggleButtonGroup", [
  "root",
  "selected",
  "vertical",
  "disabled",
  "grouped",
  "groupedHorizontal",
  "groupedVertical"
]);
var f22 = [
  "children",
  "className",
  "color",
  "disabled",
  "exclusive",
  "fullWidth",
  "onChange",
  "orientation",
  "size",
  "value"
];
var useUtilityClasses14 = (e344) => {
  const { classes: o239, orientation: r166, fullWidth: t174, disabled: s151 } = e344;
  const i148 = {
    root: [
      "root",
      r166 === "vertical" && "vertical",
      t174 && "fullWidth"
    ],
    grouped: [
      "grouped",
      `grouped${capitalize(r166)}`,
      s151 && "disabled"
    ]
  };
  return composeClasses(i148, getToggleButtonGroupUtilityClass, o239);
};
var g13 = t19("div", {
  name: "MuiToggleButtonGroup",
  slot: "Root",
  overridesResolver: (e437, o325) => {
    const { ownerState: r236 } = e437;
    return [
      {
        [`& .${m14.grouped}`]: o325.grouped
      },
      {
        [`& .${m14.grouped}`]: o325[`grouped${capitalize(r236.orientation)}`]
      },
      o325.root,
      r236.orientation === "vertical" && o325.vertical,
      r236.fullWidth && o325.fullWidth
    ];
  }
})(({ ownerState: e533, theme: r332 }) => _extends({
  display: "inline-flex",
  borderRadius: r332.shape.borderRadius
}, e533.orientation === "vertical" && {
  flexDirection: "column"
}, e533.fullWidth && {
  width: "100%"
}, {
  [`& .${m14.grouped}`]: _extends({}, e533.orientation === "horizontal" ? {
    "&:not(:first-of-type)": {
      marginLeft: -1,
      borderLeft: "1px solid transparent",
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    },
    "&:not(:last-of-type)": {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    [`&.${m14.selected} + .${m14.grouped}.${m14.selected}`]: {
      borderLeft: 0,
      marginLeft: 0
    }
  } : {
    "&:not(:first-of-type)": {
      marginTop: -1,
      borderTop: "1px solid transparent",
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    },
    "&:not(:last-of-type)": {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    },
    [`&.${m14.selected} + .${m14.grouped}.${m14.selected}`]: {
      borderTop: 0,
      marginTop: 0
    }
  })
}));
var b16 = l1(function ToggleButtonGroup(s228, l138) {
  const n145 = useThemeProps1({
    props: s228,
    name: "MuiToggleButtonGroup"
  });
  const { children: a148, className: d132, color: c136 = "standard", disabled: m128 = false, exclusive: b122 = false, fullWidth: h38 = false, onChange: y41, orientation: T25 = "horizontal", size: v38 = "medium", value: j24 } = n145, R25 = _objectWithoutPropertiesLoose(n145, f22);
  const x31 = _extends({}, n145, {
    disabled: m128,
    fullWidth: h38,
    orientation: T25,
    size: v38
  });
  const B18 = useUtilityClasses14(x31);
  const handleChange = (e620, o419) => {
    if (!y41)
      return;
    const r424 = j24 && j24.indexOf(o419);
    let t252;
    if (j24 && r424 >= 0) {
      t252 = j24.slice();
      t252.splice(r424, 1);
    } else
      t252 = j24 ? j24.concat(o419) : [
        o419
      ];
    y41(e620, t252);
  };
  const handleExclusiveChange = (e716, o513) => {
    y41 && y41(e716, j24 === o513 ? null : o513);
  };
  return p4(g13, _extends({
    role: "group",
    className: clsx_m(B18.root, d132),
    ref: l138,
    ownerState: x31
  }, R25, {
    children: b.map(a148, (e817) => {
      if (!C2(e817))
        return null;
      false;
      return k(e817, {
        className: clsx_m(B18.grouped, e817.props.className),
        onChange: b122 ? handleExclusiveChange : handleChange,
        selected: e817.props.selected === void 0 ? isValueSelected(e817.props.value, j24) : e817.props.selected,
        size: e817.props.size || v38,
        fullWidth: h38,
        color: e817.props.color || c136,
        disabled: e817.props.disabled || m128
      });
    })
  }));
});
false ? b16.propTypes = {
  children: s2.node,
  classes: s2.object,
  className: s2.string,
  color: s2.oneOfType([
    s2.oneOf([
      "standard",
      "primary",
      "secondary",
      "error",
      "info",
      "success",
      "warning"
    ]),
    s2.string
  ]),
  disabled: s2.bool,
  exclusive: s2.bool,
  fullWidth: s2.bool,
  onChange: s2.func,
  orientation: s2.oneOf([
    "horizontal",
    "vertical"
  ]),
  size: s2.oneOfType([
    s2.oneOf([
      "small",
      "medium",
      "large"
    ]),
    s2.string
  ]),
  sx: s2.oneOfType([
    s2.arrayOf(s2.oneOfType([
      s2.func,
      s2.object,
      s2.bool
    ])),
    s2.func,
    s2.object
  ]),
  value: s2.any
} : void 0;
var FullscreenIcon = createSvgIcon(a("path", {
  d: "M17 4h5v5h-2V6h-3V4zM4 9V6h3V4H2v5h2zm16 6v3h-3v2h5v-5h-2zM7 18H4v-3H2v5h5v-2zM18 8H6v8h12V8z"
}), "Fullscreen");
var Phone = createSvgIcon(a("path", {
  key: "12",
  d: "M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"
}), "PhoneAndroid");
var MyButton = ({ onClick, children: children2 }) => a(w8, {
  variant: "contained",
  color: "primary",
  onClick
}, children2);
var Share = createSvgIcon(a("path", {
  key: "12",
  d: "M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"
}), "Share");
var Tablet = createSvgIcon(a("path", {
  key: "12",
  d: "M18 0H6C4.34 0 3 1.34 3 3v18c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V3c0-1.66-1.34-3-3-3zm-4 22h-4v-1h4v1zm5.25-3H4.75V3h14.5v16z"
}), "TabletAndroid");
var Tv = createSvgIcon(a("path", {
  key: "12",
  d: "M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12z"
}), "Tv");
var MyFsb = ({ onClick, children: children2 }) => a(y10, {
  variant: "extended",
  color: "primary",
  onClick
}, children2);
var QrCode = createSvgIcon(a("path", {
  key: "12",
  d: "M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zm8-12v8h8V3h-8zm6 6h-4V5h4v4zm0 10h2v2h-2zm-6-6h2v2h-2zm2 2h2v2h-2zm-2 2h2v2h-2zm2 2h2v2h-2zm2-2h2v2h-2zm0-4h2v2h-2zm2 2h2v2h-2z"
}), "QrCode");

// js/Qr.tsx
var QR = ({ url }) => {
  const canvasRef = React.useRef(null);
  React.useEffect(() => {
    const load = () => {
      const options = {
        size: 200,
        element: canvasRef.current,
        foregroundAlpha: 0.9,
        foreground: "white",
        backgroundAlpha: 1,
        padding: 16,
        background: "#1e1e1e",
        value: url
      };
      const qr = new f0(options);
    };
    load();
  }, [url]);
  return /* @__PURE__ */ jsx("canvas", {
    css: css`
        border-radius: 16px;
        margin-bottom: 8px;
  `,
    ref: canvasRef
  });
};
var QRButton = ({ url }) => {
  const [showQR, setQR] = React.useState(false);
  return /* @__PURE__ */ jsx(motion.div, {
    animate: {
      width: showQR ? 200 : 56,
      height: showQR ? 220 : 48
    },
    onClick: (e5) => {
      setQR(!showQR);
    },
    css: css`
                margin-bottom: 12px;
              `
  }, showQR ? /* @__PURE__ */ jsx(QR, {
    key: url,
    url: url + "/edit/"
  }) : /* @__PURE__ */ jsx(MyFsb, {
    variant: "extended",
    color: "secondary",
    onClick: () => {
      setQR(!showQR);
    }
  }, /* @__PURE__ */ jsx(QrCode, null)));
};

// js/DraggableWindow.tsx
var breakPoints = [680, 768, 1920];
var breakPointHeights = [1137, 1024, 1080];
var sizes = [10, 25, 50, 75, 100, 150];
var bg = `rgba(${Math.random() * 128 + 64}, ${Math.random() * 128 + 64}, ${Math.random() * 128 + 64}, ${!navigator.userAgent.includes("Firefox") ? 0.3 : 0.7})`;
var DraggableWindow = ({ onShare, onRestore, position, session, keepFullScreen, room }) => {
  const [isStable, setIsStable] = useState(false);
  const [scaleRange, changeScaleRange] = useState(100);
  const [childArray, setChild] = useState([
    /* @__PURE__ */ jsx2(LazySpikeLandComponent, {
      name: room,
      transpiled: session.transpiled,
      htmlContent: `<div id="root"><style>${session.css}</style><div id="zbody">${session.html}</div></div>`,
      html: session.html
    })
  ]);
  const startPositions = { bottom: -40, right: -90 };
  session.setChild = setChild;
  const [qrUrl, setQRUrl] = useState(session.url);
  const [errorText, setErrorText] = useState("");
  const [{ bottom, right }, setPositions] = useState(startPositions);
  const [width, setWidth] = useState(window.innerWidth * devicePixelRatio);
  const [height, setHeight] = useState(window.innerHeight * devicePixelRatio);
  const ref = useRef(null);
  const zbody = useRef(null);
  const child = childArray[childArray.length - 1];
  useEffect(() => {
    const handler = setInterval(async () => {
      if (errorText !== session.errorText) {
        const newError = session.errorText;
        setErrorText(newError);
        setIsStable(false);
        await wait(1500);
        if (session.errorText === newError) {
          setIsStable(true);
        }
      }
      if (qrUrl !== session.url) {
        setQRUrl(session.url);
      }
    }, 200);
    return () => {
      clearInterval(handler);
    };
  }, [setErrorText, setQRUrl, errorText, qrUrl]);
  const scale = scaleRange / 100;
  const [isFullScreen, setFullScreen] = useState(true);
  useEffect(() => {
    const reveal = async () => {
      const { bottom: bottom2, right: right2 } = startPositions;
      if (keepFullScreen) {
        return;
      }
      await wait(1200);
      await wait(300);
      setFullScreen(false);
      changeScaleRange(50);
      setPositions({
        bottom: window.innerHeight * 0.2,
        right: window.innerWidth * 0.2
      });
      if (window.innerWidth / devicePixelRatio < 600) {
        changeScaleRange(50);
        setWidth(breakPoints[0]);
        setHeight(breakPointHeights[0]);
      }
      if (window.innerWidth / devicePixelRatio < 1200) {
        changeScaleRange(75);
        setWidth(breakPoints[0]);
        setHeight(breakPointHeights[0]);
      } else if (window.innerWidth / devicePixelRatio < 1800) {
        setWidth(breakPoints[1]);
        setHeight(breakPointHeights[1]);
        changeScaleRange(50);
      } else if (window.innerWidth / devicePixelRatio < 2500) {
        setWidth(breakPoints[1]);
        setHeight(breakPointHeights[1]);
        changeScaleRange(75);
      } else if (window.innerWidth / devicePixelRatio > 2500) {
        setWidth(breakPoints[1]);
        setHeight(breakPointHeights[1]);
        changeScaleRange(100);
      }
      await wait(200);
      setPositions({
        bottom: 20,
        right: 20
      });
    };
    reveal();
  }, []);
  return /* @__PURE__ */ jsx2(React2.StrictMode, null, /* @__PURE__ */ jsx2(motion2.div, {
    ref,
    initial: { bottom: startPositions.bottom, right: startPositions.right },
    animate: {
      bottom,
      right
    },
    css: css2`
            background-color:${bg};
            backdrop-filter: blur(15px);
            padding: 0px 0px 0px 16px;
            border-radius: 16px;
            white-space: normal;
            position: ${position ? position : "fixed"};
          `,
    dragElastic: 0.5,
    dragConstraints: {
      left: 0,
      right: width - 20 - width / 6,
      bottom: innerHeight - 100
    },
    dragMomentum: false,
    drag: !isFullScreen
  }, /* @__PURE__ */ jsx2("div", {
    css: css2` 
              display: flex;
              
                `
  }, /* @__PURE__ */ jsx2("div", {
    css: css2`
            display: flex;
            flex-direction: column;
            align-items: center;
          `
  }, /* @__PURE__ */ jsx2(b16, {
    value: scaleRange,
    size: "small",
    exclusive: true,
    onChange: (_e2, newScale) => {
      newScale && changeScaleRange(newScale);
    }
  }, sizes.map((size) => /* @__PURE__ */ jsx2(y12, {
    key: size,
    value: size
  }, /* @__PURE__ */ jsx2("span", {
    css: css2`
                       color: ${size === scaleRange ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                       `
  }, size, "%")))), /* @__PURE__ */ jsx2(motion2.div, {
    animate: {
      width: width * scale / devicePixelRatio,
      height: height * scale / devicePixelRatio,
      maxHeight: height * scale / devicePixelRatio,
      borderRadius: isFullScreen ? 0 : 8
    },
    css: css2`
                width: ${width * scale / devicePixelRatio};
                height: ${height * scale / devicePixelRatio};
                display: block;
                overflow: hidden;


                /* background-color: red; */
            `
  }, errorText && errorText.trim() !== "" && /* @__PURE__ */ jsx2("pre", {
    css: css2`
                    position: absolute;
                    z-index:3;
                    color: rgb(255, 240, 240);
                    padding: 24px;
                    font-size: 14pt;
                    background-color: rgb(255, 0, 0);
                    flex: 0 0 auto;
                    overflow: auto;
                    margin: 0;
                    font-family: monospace;
                    white-space: pre-wrap;
                `
  }, isStable && errorText && errorText.trim(), isStable && errorText && errorText.trim() !== "" && /* @__PURE__ */ jsx2("div", {
    css: css2`
                          text-align: right;
                        `
  }, /* @__PURE__ */ jsx2(MyButton, {
    onClick: () => {
      onRestore();
      setErrorText("");
    }
  }, "Restore"))), /* @__PURE__ */ jsx2(motion2.div, {
    initial: {
      transformOrigin: "0px 0px",
      width: window.innerWidth / devicePixelRatio,
      height: window.innerHeight / devicePixelRatio,
      scale: scaleRange / 100
    },
    animate: {
      transformOrigin: "0px 0px",
      width: width / devicePixelRatio,
      height: height / devicePixelRatio,
      scale: scaleRange / 100
    },
    css: css2`
                  overflow:overlay;
                  overflow-y: hidden;
                  >div{
                    width:100%;
                    height:100%;
                    overflow: overlay;
                    background: white;
                  }
              `
  }, errorText ? /* @__PURE__ */ jsx2("div", {
    id: "zbody",
    css: `${session.css}`,
    dangerouslySetInnerHTML: createMarkup(session.html)
  }) : /* @__PURE__ */ jsx2("div", {
    id: "zbody",
    key: session.i,
    ref: zbody,
    css: css2`q
                        height: 100%;
                      `
  }, child), " ")), /* @__PURE__ */ jsx2(b16, {
    value: width,
    size: "small",
    exclusive: true,
    onChange: (_e2, newSize) => {
      if (newSize) {
        setHeight(breakPointHeights[breakPoints.indexOf(newSize)]);
        setWidth(newSize);
      }
    }
  }, breakPoints.map((size) => /* @__PURE__ */ jsx2(y12, {
    key: `size-${size}`,
    value: size
  }, size === 680 ? /* @__PURE__ */ jsx2(Phone, {
    css: css2`
                        color: ${width === 680 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                        `
  }) : size === 768 ? /* @__PURE__ */ jsx2(Tablet, {
    css: css2`
                        color: ${width === 768 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                        `
  }) : /* @__PURE__ */ jsx2(Tv, {
    css: css2`
                        color: ${width === 1920 ? "rgba(255,255,255,.8)" : "rgba(0,0,0,.3)"};
                      `
  }))))), /* @__PURE__ */ jsx2("div", {
    css: css2`
              display: flex;
              align-items: center;          
              flex-direction: column;
              padding: 16px;
              `
  }, /* @__PURE__ */ jsx2(MyFsb, {
    onClick: () => {
      setFullScreen(true);
    }
  }, /* @__PURE__ */ jsx2(FullscreenIcon, null)), /* @__PURE__ */ jsx2(QRButton, {
    url: qrUrl
  }), /* @__PURE__ */ jsx2(MyFsb, {
    onClick: () => {
      onShare();
    }
  }, /* @__PURE__ */ jsx2(Share, null))))));
};
function createMarkup(__html) {
  return { __html };
}

// js/renderPreviewWindow.tsx
var renderPreviewWindow = async (session, room, keepFullScreen) => {
  const target = document.createElement("div");
  const editor = document.querySelector("#monacoEditor");
  editor.style.opacity = "0";
  const { createRoot } = await import("https://unpkg.com/@spike.land/esm@0.6.71/dist/react-dom.mjs");
  const root = createRoot(target, {});
  root.render(/* @__PURE__ */ jsx3(DraggableWindow, {
    onShare: () => open(`https://spike.land/api/room/${room}/public`),
    onRestore: () => {
      const model = session.editor.getModel();
      model.setValue(session.code);
    },
    position: session.mode === "window" ? "fixed" : "absolute",
    session,
    keepFullScreen,
    room
  }));
  const diffy = window.diffy = Date.now() - window.aniStart;
  console.log({ diffy });
  target.style.opacity = "0";
  document.body.append(target);
  console.log("wait....: " + String(2e3 - diffy));
  await wait(2e3 - diffy);
  target.style.display = "block";
  target.style.opacity = "1";
  document.querySelector("#root").remove();
  document.body.style.backgroundImage = 'url("https://unpkg.com/@spike.land/code@0.6.11/js/assets/synthwave.webp")';
  editor.style.opacity = "1";
  editor.style.display = "block";
};
export {
  renderPreviewWindow
};
//# sourceMappingURL=data:application/json;base64,
