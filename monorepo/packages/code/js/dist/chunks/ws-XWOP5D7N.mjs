import{a as G}from"./chunk-64UOVNML.mjs";import{a as C,b as I,f as M}from"./chunk-LXO7TM6Z.mjs";var j=M(G());var v,q=new Uint8Array(16);function F(){if(!v&&(v=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!v))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return v(q)}var B=/^(?:[\da-f]{8}-[\da-f]{4}-[1-5][\da-f]{3}-[89ab][\da-f]{3}-[\da-f]{12}|0{8}-(?:0{4}-){3}0{12})$/i;function z(e){return typeof e=="string"&&B.test(e)}var c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));function K(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!z(n))throw new TypeError("Stringified UUID is invalid");return n}function J(e,t,n){e=e||{};let s=e.random||(e.rng||F)();if(s[6]=s[6]&15|64,s[8]=s[8]&63|128,t){n=n||0;for(let p=0;p<16;++p)t[n+p]=s[p];return t}return K(s)}var L=[],Q=window.location.hostname||"spike.land",x="",b="",S="",f="",O=0,y=0,r=null,m=!1,X=Date.now(),g=null,l=null,V=()=>l.session.get("state"),k=null;setInterval(()=>{Date.now()-y>4e4?(m=!1,w()):console.log("no_need_to_rejoin")},3e4);var _=async(e,t)=>{if(!e)return;let n=V().toJSON();if(!(t<n.i)&&e!==n.code)try{n&&n.editor?window.sess.editor.getModel().setValue(e):window.sess.update(e)}catch(s){console.error({e:s})}};async function w(){return!m||r===null?(r=null,r||(r=await Z(),r)):r}var ie=(0,j.default)(Y,100);async function Y(e){let t=C(C({},V().toJSON()),e);if((async()=>{try{if(g){let n=b?l.createPatchFromHashCode(b,t):l.createPatch(t);n&&n.patch!==""&&g.send(n)}}catch(n){console.error("Error sending RTC...",{e:n})}})(),r){let n=x?l.createPatchFromHashCode(x,t):l.createPatch(t);if(!n)return;let s=JSON.stringify(I(C({},n),{name:f}));n.patch!==""&&r.send(s)}else m=!1,await w()}var Z=async()=>{let e=location.pathname.split("/"),t=(e[1]==="api"&&e[2]==="room"?e[3]:(e.pop()||e.pop()).slice(-12))||"code-main",n=(self&&self.crypto&&self.crypto.randomUUID&&self.crypto.randomUUID()||J()).slice(0,8);if(S=S||t||"code-main",n&&(f=n),r!==null)return r;m=!0;let p=await(await fetch(`https://spike.land/api/room/${S}/session`)).json(),{startSession:E}=await import("./session-VRIEZ5WV.mjs");l=l||await E(S,{name:f,state:p});let h=new WebSocket("wss://"+Q+"/api/room/"+S+"/websocket");return m=!1,X=Date.now(),h.addEventListener("open",()=>(r=h,k&&clearInterval(k),k=setInterval(()=>{let u=Date.now(),D=u-y;if(u-y>3e4)try{r.send(JSON.stringify({name:f,time:O+D}))}catch(P){m=!1,w()}},3e4),h.send(JSON.stringify({name:f})),h)),h.addEventListener("message",u=>H(u,"ws")),h.addEventListener("close",u=>{console.log("WebSocket closed, reconnecting:",u.code,u.reason),m=!1,w()}),h.addEventListener("error",u=>{console.log("WebSocket error, reconnecting:",u),m=!1,w()}),h},N=window.location.hostname;N||(N="localhost");i("Hostname: "+N);var o={};function i(e){let t=new Date;console.log("["+t.toLocaleTimeString()+"] "+e)}function ee(e){let t=new Date;console.trace("["+t.toLocaleTimeString()+"] "+e)}var U={iceServers:["stun3.l.google.com:19302"].map(e=>({urls:`stun:${e}`}))};U.iceServers=[{urls:"stun:stun.stunprotocol.org:3478"},{urls:"stun:stun.l.google.com:19302"}];async function A(e){if(i(`Setting up a connection with ${e}`),o[e]){i(`Aborting, since we have connection with this ${e}`);return}o[e]=new RTCPeerConnection(U),o[e].onicecandidate=u,o[e].oniceconnectionstatechange=D,o[e].onicegatheringstatechange=W,o[e].onsignalingstatechange=P,o[e].onnegotiationneeded=E,o[e].ontrack=h,o[e].addEventListener("datachannel",s);let t={ordered:!0,reliable:!0,maxPacketLifeTime:3e3},n=o[e].createDataChannel(e,t);return n.binaryType="arraybuffer",n.addEventListener("message",a=>{console.log("***********RTC***",{msg:a});let d=JSON.parse(a.data);return d&&d.hashCode&&(b=d.hashCode),d&&d.newHash&&(b=d.newHash),H(a,"rtc")}),n.addEventListener("error",a=>{console.log("xxxxxx-  Data Channel Error:",a)}),n.addEventListener("open",()=>{console.log("@@@@@@@@RTC IS OPEN&&&&&&&&"),n.target=e,L.push(n),o[e].sendChannel=n,g=g={send:a=>{let d=a.target,T=JSON.stringify(I(C({},a),{name:a.name||f}));L.map(R=>{try{if(R.readyState!=="open")return;R.target===d&&R.send(T)}catch($){console.error("Error in broadcasting event",{e:$})}})}}}),n.addEventListener("close",()=>{console.log("xxxxxxxx- The Data Channel is Closed")}),o[e];function s(a){console.log("Receive Channel Callback");let d=a.channel;d.binaryType="arraybuffer",d.addEventListener("close",p),d.addEventListener("message",T=>H(T,"rtc")),L.push(d)}function p(){console.log("Receive channel is closed"),o[e].close(),o[e]=null,console.log("Closed remote peer connection")}async function E(){i("*** Negotiation needed");try{i("---> Creating offer");let a=await o[e].createOffer();if(o[e].signalingState!="stable"){i("     -- The connection isn't stable yet; postponing...");return}i("---> Setting local description to the offer"),await o[e].setLocalDescription(a),i("---> Sending the offer to the remote peer"),r.send(JSON.stringify({target:e,name:f,type:"offer",sdp:o[e].localDescription}))}catch(a){i("*** The following error occurred while handling the negotiationneeded event:")}}function h(a){i("*** Track event"),document.querySelector("#received_video").srcObject=a.streams[0],document.querySelector("#hangup-button").disabled=!1}function u(a){a.candidate&&(i("*** Outgoing ICE candidate: "+a.candidate),r.send(JSON.stringify({type:"new-ice-candidate",target:e,name:f,candidate:a.candidate})))}function D(){switch(i("*** ICE connection state changed to "+o[e].iceConnectionState),o[e].iceConnectionState){case"closed":case"failed":case"disconnected":break}}function P(){switch(i("*** connections[target].signalingState  changed to: "+o[e].signalingState),o[e].signalingState){case"closed":break}}function W(){i("*** connections[target].iceGatheringState changed to: "+o[e].iceGatheringState)}}async function ne(e,t){i("*** Adding received ICE candidate: "+JSON.stringify(e.candidate));let n=new RTCIceCandidate(e.candidate);console.log(o[t]),await o[t].addIceCandidate(n)}async function te(e,t){i("*** Call recipient has accepted our call");let n=new RTCSessionDescription(e.sdp);await o[t].setRemoteDescription(n).catch(console.error)}async function oe(e,t){if(o[t]||await A(t),!e.sdp)return;let n=new RTCSessionDescription(e.sdp);if(o[t].signalingState!="stable"){i("  - But the signaling state isn't stable, so triggering rollback"),await Promise.all([o[t].setLocalDescription({type:"rollback"}),o[t].setRemoteDescription(n)]);return}i("  - Setting remote description"),await o[t].setRemoteDescription(n),i("---> Creating and sending answer to caller"),await o[t].setLocalDescription(await o[t].createAnswer());let s=r||await w();s!==null&&s.send(JSON.stringify({target:t,name:f,type:"answer",sdp:o[t].localDescription}))}async function H(e,t){console.log(t,{event:e}),y=Date.now();let n=JSON.parse(e.data);if(n.name&&n.name!==f&&!o[n.name])try{await A(n.name)}catch(s){console.log({e:s}),ee("Error with p2p")}if(console.log(t,n.name),n.type==="new-ice-candidate"){await ne(n,n.name);return}if(n.type==="offer"){await oe(n,n.name);return}if(n.type==="answer"){await te(n,n.name);return}if(t==="ws"&&n.hashCode&&(x=n.hashCode),n.patch&&t==="ws"||n.name!==f){if(n.newHash===l.hashCode())return;if(n.oldHash===l.hashCode()){l.applyPatch(n),_(l.session.get("state").code,l.session.get("state").i),g&&g.send({hashCode:n.newHash});return}if(n.newHash===l.hashCode())return;if(n.code&&n.transpiled){let s=l.createPatch(n);l.applyPatch(s),_(n.code,n.i),g&&g.send({hashCode:s.newHash});return}return}n.timestamp&&(y=Date.now(),O=n.timestamp),n.name!==f&&(O=n.timestamp)}export{Z as join,ie as saveCode};
