// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var e1002 = [];
var n357 = false;
var r;
var a53 = -1;
function cleanUpNextTick() {
    if (n357 && r) {
        n357 = false;
        r.length ? e1002 = r.concat(e1002) : a53 = -1;
        e1002.length && drainQueue();
    }
}
function drainQueue() {
    if (!n357) {
        var t1 = setTimeout(cleanUpNextTick, 0);
        n357 = true;
        var o1 = e1002.length;
        while(o1){
            r = e1002;
            e1002 = [];
            while(++a53 < o1)r && r[a53].run();
            a53 = -1;
            o1 = e1002.length;
        }
        r = null;
        n357 = false;
        clearTimeout(t1);
    }
}
function nextTick(r1) {
    var a1 = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var t2 = 1; t2 < arguments.length; t2++)a1[t2 - 1] = arguments[t2];
    e1002.push(new Item(r1, a1));
    1 !== e1002.length || n357 || setTimeout(drainQueue, 0);
}
function Item(e110, n1) {
    this.fun = e110;
    this.array = n1;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
var t381 = "browser";
var o100 = "x64";
var i = "browser";
var v = {
    NODE_ENV: "production",
    PATH: "/usr/bin",
    LANG: navigator.language + ".UTF-8",
    PWD: "/",
    HOME: "/home",
    TMP: "/tmp"
};
var s = [
    "/usr/bin/node"
];
var l = [];
var u = "v16.8.0";
var c = {};
var emitWarning = function(e210, n2) {
    console.warn((n2 ? n2 + ": " : "") + e210);
};
var f = null;
var umask = function(e) {
    return 0;
};
var cwd = function() {
    return "/";
};
var chdir = function(e) {};
var p = {
    name: "node",
    sourceUrl: "",
    headersUrl: "",
    libUrl: ""
};
function noop() {}
var d = noop;
var g = [];
var m = null;
var h = {};
var _ = false;
var b = {};
var w = null;
function _getActiveRequests() {
    return [];
}
function _getActiveHandles() {
    return [];
}
var x = noop;
var k = noop;
var cpuUsage = function() {
    return {};
};
var E = cpuUsage;
var U = cpuUsage;
var A = noop;
var C = noop;
var T = noop;
var y = {};
function assert(e3, n3) {
    if (!e3) throw new Error(n3 || "assertion error");
}
var L = {
    inspector: false,
    debug: false,
    uv: false,
    ipv6: false,
    tls_alpn: false,
    tls_sni: false,
    tls_ocsp: false,
    tls: false,
    cached_builtins: true
};
var I = noop;
var N = noop;
function hasUncaughtExceptionCaptureCallback() {
    return false;
}
var P = noop;
var D = noop;
var H = noop;
var M = noop;
var q = noop;
var B = void 0;
var R = void 0;
var S = void 0;
var O = noop;
var Q = 2;
var F = 1;
var W = "/bin/usr/node";
var G = 9229;
var V = "node";
var j = [];
var z = noop;
var J = {
    now: "undefined" !== typeof performance ? performance.now.bind(performance) : void 0,
    timing: "undefined" !== typeof performance ? performance.timing : void 0
};
if (void 0 === J.now) {
    var K = Date.now();
    J.timing && J.timing.navigationStart && (K = J.timing.navigationStart);
    J.now = ()=>Date.now() - K
    ;
}
function uptime() {
    return J.now() / 1e3;
}
var X = 1e9;
function hrtime(e4) {
    var n4 = Math.floor(.001 * (Date.now() - J.now()));
    var r2 = .001 * J.now();
    var a2 = Math.floor(r2) + n4;
    var t3 = Math.floor(r2 % 1 * 1e9);
    if (e4) {
        a2 -= e4[0];
        t3 -= e4[1];
        if (t3 < 0) {
            a2--;
            t3 += X;
        }
    }
    return [
        a2,
        t3
    ];
}
hrtime.bigint = function(e5) {
    var n5 = hrtime(e5);
    return "undefined" === typeof BigInt ? n5[0] * X + n5[1] : BigInt(n5[0] * X) + BigInt(n5[1]);
};
var Y = 10;
var Z = {};
var $ = 0;
function on() {
    return se;
}
var ee = on;
var ne = on;
var re = on;
var ae = on;
var te = on;
var oe = noop;
var ie = on;
var ve = on;
function listeners() {
    return [];
}
var se = {
    version: u,
    versions: c,
    arch: o100,
    platform: i,
    release: p,
    _rawDebug: d,
    moduleLoadList: g,
    binding: f,
    _linkedBinding: m,
    _events: Z,
    _eventsCount: $,
    _maxListeners: Y,
    on: on,
    addListener: ee,
    once: ne,
    off: re,
    removeListener: ae,
    removeAllListeners: te,
    emit: oe,
    prependListener: ie,
    prependOnceListener: ve,
    listeners: listeners,
    domain: h,
    _exiting: _,
    config: b,
    dlopen: w,
    uptime: uptime,
    _getActiveRequests: _getActiveRequests,
    _getActiveHandles: _getActiveHandles,
    reallyExit: x,
    _kill: k,
    cpuUsage: cpuUsage,
    resourceUsage: E,
    memoryUsage: U,
    kill: A,
    exit: C,
    openStdin: T,
    allowedNodeEnvironmentFlags: y,
    assert: assert,
    features: L,
    _fatalExceptions: I,
    setUncaughtExceptionCaptureCallback: N,
    hasUncaughtExceptionCaptureCallback: hasUncaughtExceptionCaptureCallback,
    emitWarning: emitWarning,
    nextTick: nextTick,
    _tickCallback: P,
    _debugProcess: D,
    _debugEnd: H,
    _startProfilerIdleNotifier: M,
    _stopProfilerIdleNotifier: q,
    stdout: B,
    stdin: S,
    stderr: R,
    abort: O,
    umask: umask,
    chdir: chdir,
    cwd: cwd,
    env: v,
    title: t381,
    argv: s,
    execArgv: l,
    pid: Q,
    ppid: F,
    execPath: W,
    debugPort: G,
    hrtime: hrtime,
    argv0: V,
    _preload_modules: j,
    setSourceMapsEnabled: z
};
var r1 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var t1 = {};
var n1 = se;
t1 = t1 = SemVer;
var o1;
o1 = "object" === typeof n1 && n1.env && n1.env.NODE_DEBUG && /\bsemver\b/i.test(n1.env.NODE_DEBUG) ? function() {
    var e111 = Array.prototype.slice.call(arguments, 0);
    e111.unshift("SEMVER");
    console.log.apply(console, e111);
} : function() {};
t1.SEMVER_SPEC_VERSION = "2.0.0";
var a3 = 256;
var i1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
var s1 = 16;
var p1 = t1.re = [];
var c1 = t1.src = [];
var l1 = t1.tokens = {};
var E1 = 0;
function tok(e211) {
    l1[e211] = E1++;
}
tok("NUMERICIDENTIFIER");
c1[l1.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
tok("NUMERICIDENTIFIERLOOSE");
c1[l1.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
tok("NONNUMERICIDENTIFIER");
c1[l1.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
tok("MAINVERSION");
c1[l1.MAINVERSION] = "(" + c1[l1.NUMERICIDENTIFIER] + ")\\." + "(" + c1[l1.NUMERICIDENTIFIER] + ")\\." + "(" + c1[l1.NUMERICIDENTIFIER] + ")";
tok("MAINVERSIONLOOSE");
c1[l1.MAINVERSIONLOOSE] = "(" + c1[l1.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + c1[l1.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + c1[l1.NUMERICIDENTIFIERLOOSE] + ")";
tok("PRERELEASEIDENTIFIER");
c1[l1.PRERELEASEIDENTIFIER] = "(?:" + c1[l1.NUMERICIDENTIFIER] + "|" + c1[l1.NONNUMERICIDENTIFIER] + ")";
tok("PRERELEASEIDENTIFIERLOOSE");
c1[l1.PRERELEASEIDENTIFIERLOOSE] = "(?:" + c1[l1.NUMERICIDENTIFIERLOOSE] + "|" + c1[l1.NONNUMERICIDENTIFIER] + ")";
tok("PRERELEASE");
c1[l1.PRERELEASE] = "(?:-(" + c1[l1.PRERELEASEIDENTIFIER] + "(?:\\." + c1[l1.PRERELEASEIDENTIFIER] + ")*))";
tok("PRERELEASELOOSE");
c1[l1.PRERELEASELOOSE] = "(?:-?(" + c1[l1.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + c1[l1.PRERELEASEIDENTIFIERLOOSE] + ")*))";
tok("BUILDIDENTIFIER");
c1[l1.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
tok("BUILD");
c1[l1.BUILD] = "(?:\\+(" + c1[l1.BUILDIDENTIFIER] + "(?:\\." + c1[l1.BUILDIDENTIFIER] + ")*))";
tok("FULL");
tok("FULLPLAIN");
c1[l1.FULLPLAIN] = "v?" + c1[l1.MAINVERSION] + c1[l1.PRERELEASE] + "?" + c1[l1.BUILD] + "?";
c1[l1.FULL] = "^" + c1[l1.FULLPLAIN] + "$";
tok("LOOSEPLAIN");
c1[l1.LOOSEPLAIN] = "[v=\\s]*" + c1[l1.MAINVERSIONLOOSE] + c1[l1.PRERELEASELOOSE] + "?" + c1[l1.BUILD] + "?";
tok("LOOSE");
c1[l1.LOOSE] = "^" + c1[l1.LOOSEPLAIN] + "$";
tok("GTLT");
c1[l1.GTLT] = "((?:<|>)?=?)";
tok("XRANGEIDENTIFIERLOOSE");
c1[l1.XRANGEIDENTIFIERLOOSE] = c1[l1.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
tok("XRANGEIDENTIFIER");
c1[l1.XRANGEIDENTIFIER] = c1[l1.NUMERICIDENTIFIER] + "|x|X|\\*";
tok("XRANGEPLAIN");
c1[l1.XRANGEPLAIN] = "[v=\\s]*(" + c1[l1.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + c1[l1.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + c1[l1.XRANGEIDENTIFIER] + ")" + "(?:" + c1[l1.PRERELEASE] + ")?" + c1[l1.BUILD] + "?" + ")?)?";
tok("XRANGEPLAINLOOSE");
c1[l1.XRANGEPLAINLOOSE] = "[v=\\s]*(" + c1[l1.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + c1[l1.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + c1[l1.XRANGEIDENTIFIERLOOSE] + ")" + "(?:" + c1[l1.PRERELEASELOOSE] + ")?" + c1[l1.BUILD] + "?" + ")?)?";
tok("XRANGE");
c1[l1.XRANGE] = "^" + c1[l1.GTLT] + "\\s*" + c1[l1.XRANGEPLAIN] + "$";
tok("XRANGELOOSE");
c1[l1.XRANGELOOSE] = "^" + c1[l1.GTLT] + "\\s*" + c1[l1.XRANGEPLAINLOOSE] + "$";
tok("COERCE");
c1[l1.COERCE] = "(^|[^\\d])" + "(\\d{1," + s1 + "})" + "(?:\\.(\\d{1," + s1 + "}))?" + "(?:\\.(\\d{1," + s1 + "}))?" + "(?:$|[^\\d])";
tok("COERCERTL");
p1[l1.COERCERTL] = new RegExp(c1[l1.COERCE], "g");
tok("LONETILDE");
c1[l1.LONETILDE] = "(?:~>?)";
tok("TILDETRIM");
c1[l1.TILDETRIM] = "(\\s*)" + c1[l1.LONETILDE] + "\\s+";
p1[l1.TILDETRIM] = new RegExp(c1[l1.TILDETRIM], "g");
var u1 = "$1~";
tok("TILDE");
c1[l1.TILDE] = "^" + c1[l1.LONETILDE] + c1[l1.XRANGEPLAIN] + "$";
tok("TILDELOOSE");
c1[l1.TILDELOOSE] = "^" + c1[l1.LONETILDE] + c1[l1.XRANGEPLAINLOOSE] + "$";
tok("LONECARET");
c1[l1.LONECARET] = "(?:\\^)";
tok("CARETTRIM");
c1[l1.CARETTRIM] = "(\\s*)" + c1[l1.LONECARET] + "\\s+";
p1[l1.CARETTRIM] = new RegExp(c1[l1.CARETTRIM], "g");
var f1 = "$1^";
tok("CARET");
c1[l1.CARET] = "^" + c1[l1.LONECARET] + c1[l1.XRANGEPLAIN] + "$";
tok("CARETLOOSE");
c1[l1.CARETLOOSE] = "^" + c1[l1.LONECARET] + c1[l1.XRANGEPLAINLOOSE] + "$";
tok("COMPARATORLOOSE");
c1[l1.COMPARATORLOOSE] = "^" + c1[l1.GTLT] + "\\s*(" + c1[l1.LOOSEPLAIN] + ")$|^$";
tok("COMPARATOR");
c1[l1.COMPARATOR] = "^" + c1[l1.GTLT] + "\\s*(" + c1[l1.FULLPLAIN] + ")$|^$";
tok("COMPARATORTRIM");
c1[l1.COMPARATORTRIM] = "(\\s*)" + c1[l1.GTLT] + "\\s*(" + c1[l1.LOOSEPLAIN] + "|" + c1[l1.XRANGEPLAIN] + ")";
p1[l1.COMPARATORTRIM] = new RegExp(c1[l1.COMPARATORTRIM], "g");
var h1 = "$1$2$3";
tok("HYPHENRANGE");
c1[l1.HYPHENRANGE] = "^\\s*(" + c1[l1.XRANGEPLAIN] + ")" + "\\s+-\\s+" + "(" + c1[l1.XRANGEPLAIN] + ")" + "\\s*$";
tok("HYPHENRANGELOOSE");
c1[l1.HYPHENRANGELOOSE] = "^\\s*(" + c1[l1.XRANGEPLAINLOOSE] + ")" + "\\s+-\\s+" + "(" + c1[l1.XRANGEPLAINLOOSE] + ")" + "\\s*$";
tok("STAR");
c1[l1.STAR] = "(<|>)?=?\\s*\\*";
for(var m1 = 0; m1 < E1; m1++){
    o1(m1, c1[m1]);
    p1[m1] || (p1[m1] = new RegExp(c1[m1]));
}
t1.parse = parse;
function parse(e3, r110) {
    r110 && "object" === typeof r110 || (r110 = {
        loose: !!r110,
        includePrerelease: false
    });
    if (e3 instanceof SemVer) return e3;
    if ("string" !== typeof e3) return null;
    if (e3.length > a3) return null;
    var t110 = r110.loose ? p1[l1.LOOSE] : p1[l1.FULL];
    if (!t110.test(e3)) return null;
    try {
        return new SemVer(e3, r110);
    } catch (e) {
        return null;
    }
}
t1.valid = valid;
function valid(e4, r2) {
    var t2 = parse(e4, r2);
    return t2 ? t2.version : null;
}
t1.clean = clean;
function clean(e5, r3) {
    var t3 = parse(e5.trim().replace(/^[=v]+/, ""), r3);
    return t3 ? t3.version : null;
}
t1.SemVer = SemVer;
function SemVer(e6, t4) {
    t4 && "object" === typeof t4 || (t4 = {
        loose: !!t4,
        includePrerelease: false
    });
    if (e6 instanceof SemVer) {
        if (e6.loose === t4.loose) return e6;
        e6 = e6.version;
    } else if ("string" !== typeof e6) throw new TypeError("Invalid Version: " + e6);
    if (e6.length > a3) throw new TypeError("version is longer than " + a3 + " characters");
    if (!((this || r1) instanceof SemVer)) return new SemVer(e6, t4);
    o1("SemVer", e6, t4);
    (this || r1).options = t4;
    (this || r1).loose = !!t4.loose;
    var n110 = e6.trim().match(t4.loose ? p1[l1.LOOSE] : p1[l1.FULL]);
    if (!n110) throw new TypeError("Invalid Version: " + e6);
    (this || r1).raw = e6;
    (this || r1).major = +n110[1];
    (this || r1).minor = +n110[2];
    (this || r1).patch = +n110[3];
    if ((this || r1).major > i1 || (this || r1).major < 0) throw new TypeError("Invalid major version");
    if ((this || r1).minor > i1 || (this || r1).minor < 0) throw new TypeError("Invalid minor version");
    if ((this || r1).patch > i1 || (this || r1).patch < 0) throw new TypeError("Invalid patch version");
    n110[4] ? (this || r1).prerelease = n110[4].split(".").map(function(e7) {
        if (/^[0-9]+$/.test(e7)) {
            var r4 = +e7;
            if (r4 >= 0 && r4 < i1) return r4;
        }
        return e7;
    }) : (this || r1).prerelease = [];
    (this || r1).build = n110[5] ? n110[5].split(".") : [];
    this.format();
}
SemVer.prototype.format = function() {
    (this || r1).version = (this || r1).major + "." + (this || r1).minor + "." + (this || r1).patch;
    (this || r1).prerelease.length && ((this || r1).version += "-" + (this || r1).prerelease.join("."));
    return (this || r1).version;
};
SemVer.prototype.toString = function() {
    return (this || r1).version;
};
SemVer.prototype.compare = function(e8) {
    o1("SemVer.compare", (this || r1).version, (this || r1).options, e8);
    e8 instanceof SemVer || (e8 = new SemVer(e8, (this || r1).options));
    return this.compareMain(e8) || this.comparePre(e8);
};
SemVer.prototype.compareMain = function(e9) {
    e9 instanceof SemVer || (e9 = new SemVer(e9, (this || r1).options));
    return compareIdentifiers((this || r1).major, e9.major) || compareIdentifiers((this || r1).minor, e9.minor) || compareIdentifiers((this || r1).patch, e9.patch);
};
SemVer.prototype.comparePre = function(e10) {
    e10 instanceof SemVer || (e10 = new SemVer(e10, (this || r1).options));
    if ((this || r1).prerelease.length && !e10.prerelease.length) return -1;
    if (!(this || r1).prerelease.length && e10.prerelease.length) return 1;
    if (!(this || r1).prerelease.length && !e10.prerelease.length) return 0;
    var t5 = 0;
    do {
        var n2 = (this || r1).prerelease[t5];
        var a1 = e10.prerelease[t5];
        o1("prerelease compare", t5, n2, a1);
        if (void 0 === n2 && void 0 === a1) return 0;
        if (void 0 === a1) return 1;
        if (void 0 === n2) return -1;
        if (n2 !== a1) return compareIdentifiers(n2, a1);
    }while (++t5)
};
SemVer.prototype.compareBuild = function(e11) {
    e11 instanceof SemVer || (e11 = new SemVer(e11, (this || r1).options));
    var t6 = 0;
    do {
        var n3 = (this || r1).build[t6];
        var a2 = e11.build[t6];
        o1("prerelease compare", t6, n3, a2);
        if (void 0 === n3 && void 0 === a2) return 0;
        if (void 0 === a2) return 1;
        if (void 0 === n3) return -1;
        if (n3 !== a2) return compareIdentifiers(n3, a2);
    }while (++t6)
};
SemVer.prototype.inc = function(e12, t7) {
    switch(e12){
        case "premajor":
            (this || r1).prerelease.length = 0;
            (this || r1).patch = 0;
            (this || r1).minor = 0;
            (this || r1).major++;
            this.inc("pre", t7);
            break;
        case "preminor":
            (this || r1).prerelease.length = 0;
            (this || r1).patch = 0;
            (this || r1).minor++;
            this.inc("pre", t7);
            break;
        case "prepatch":
            (this || r1).prerelease.length = 0;
            this.inc("patch", t7);
            this.inc("pre", t7);
            break;
        case "prerelease":
            0 === (this || r1).prerelease.length && this.inc("patch", t7);
            this.inc("pre", t7);
            break;
        case "major":
            0 === (this || r1).minor && 0 === (this || r1).patch && 0 !== (this || r1).prerelease.length || (this || r1).major++;
            (this || r1).minor = 0;
            (this || r1).patch = 0;
            (this || r1).prerelease = [];
            break;
        case "minor":
            0 === (this || r1).patch && 0 !== (this || r1).prerelease.length || (this || r1).minor++;
            (this || r1).patch = 0;
            (this || r1).prerelease = [];
            break;
        case "patch":
            0 === (this || r1).prerelease.length && (this || r1).patch++;
            (this || r1).prerelease = [];
            break;
        case "pre":
            if (0 === (this || r1).prerelease.length) (this || r1).prerelease = [
                0
            ];
            else {
                var n4 = (this || r1).prerelease.length;
                while(--n4 >= 0)if ("number" === typeof (this || r1).prerelease[n4]) {
                    (this || r1).prerelease[n4]++;
                    n4 = -2;
                }
                -1 === n4 && (this || r1).prerelease.push(0);
            }
            t7 && ((this || r1).prerelease[0] === t7 ? isNaN((this || r1).prerelease[1]) && ((this || r1).prerelease = [
                t7,
                0
            ]) : (this || r1).prerelease = [
                t7,
                0
            ]);
            break;
        default:
            throw new Error("invalid increment argument: " + e12);
    }
    this.format();
    (this || r1).raw = (this || r1).version;
    return this || r1;
};
t1.inc = inc;
function inc(e13, r5, t8, n5) {
    if ("string" === typeof t8) {
        n5 = t8;
        t8 = void 0;
    }
    try {
        return new SemVer(e13, t8).inc(r5, n5).version;
    } catch (e) {
        return null;
    }
}
t1.diff = diff;
function diff(e14, r6) {
    if (eq(e14, r6)) return null;
    var t9 = parse(e14);
    var n6 = parse(r6);
    var o110 = "";
    if (t9.prerelease.length || n6.prerelease.length) {
        o110 = "pre";
        var a = "prerelease";
    }
    for(var i110 in t9)if (("major" === i110 || "minor" === i110 || "patch" === i110) && t9[i110] !== n6[i110]) return o110 + i110;
    return a;
}
t1.compareIdentifiers = compareIdentifiers;
var R1 = /^[0-9]+$/;
function compareIdentifiers(e15, r7) {
    var t10 = R1.test(e15);
    var n7 = R1.test(r7);
    if (t10 && n7) {
        e15 = +e15;
        r7 = +r7;
    }
    return e15 === r7 ? 0 : t10 && !n7 ? -1 : n7 && !t10 ? 1 : e15 < r7 ? -1 : 1;
}
t1.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(e16, r8) {
    return compareIdentifiers(r8, e16);
}
t1.major = major;
function major(e17, r9) {
    return new SemVer(e17, r9).major;
}
t1.minor = minor;
function minor(e18, r10) {
    return new SemVer(e18, r10).minor;
}
t1.patch = patch;
function patch(e19, r11) {
    return new SemVer(e19, r11).patch;
}
t1.compare = compare;
function compare(e20, r12, t11) {
    return new SemVer(e20, t11).compare(new SemVer(r12, t11));
}
t1.compareLoose = compareLoose;
function compareLoose(e21, r13) {
    return compare(e21, r13, true);
}
t1.compareBuild = compareBuild;
function compareBuild(e22, r14, t12) {
    var n8 = new SemVer(e22, t12);
    var o2 = new SemVer(r14, t12);
    return n8.compare(o2) || n8.compareBuild(o2);
}
t1.rcompare = rcompare;
function rcompare(e23, r15, t13) {
    return compare(r15, e23, t13);
}
t1.sort = sort;
function sort(e24, r16) {
    return e24.sort(function(e25, n9) {
        return t1.compareBuild(e25, n9, r16);
    });
}
t1.rsort = rsort;
function rsort(e26, r17) {
    return e26.sort(function(e27, n10) {
        return t1.compareBuild(n10, e27, r17);
    });
}
t1.gt = gt;
function gt(e28, r18, t14) {
    return compare(e28, r18, t14) > 0;
}
t1.lt = lt;
function lt(e29, r19, t15) {
    return compare(e29, r19, t15) < 0;
}
t1.eq = eq;
function eq(e30, r20, t16) {
    return 0 === compare(e30, r20, t16);
}
t1.neq = neq;
function neq(e31, r21, t17) {
    return 0 !== compare(e31, r21, t17);
}
t1.gte = gte;
function gte(e32, r22, t18) {
    return compare(e32, r22, t18) >= 0;
}
t1.lte = lte;
function lte(e33, r23, t19) {
    return compare(e33, r23, t19) <= 0;
}
t1.cmp = cmp;
function cmp(e34, r24, t20, n11) {
    switch(r24){
        case "===":
            "object" === typeof e34 && (e34 = e34.version);
            "object" === typeof t20 && (t20 = t20.version);
            return e34 === t20;
        case "!==":
            "object" === typeof e34 && (e34 = e34.version);
            "object" === typeof t20 && (t20 = t20.version);
            return e34 !== t20;
        case "":
        case "=":
        case "==":
            return eq(e34, t20, n11);
        case "!=":
            return neq(e34, t20, n11);
        case ">":
            return gt(e34, t20, n11);
        case ">=":
            return gte(e34, t20, n11);
        case "<":
            return lt(e34, t20, n11);
        case "<=":
            return lte(e34, t20, n11);
        default:
            throw new TypeError("Invalid operator: " + r24);
    }
}
t1.Comparator = Comparator;
function Comparator(e35, t21) {
    t21 && "object" === typeof t21 || (t21 = {
        loose: !!t21,
        includePrerelease: false
    });
    if (e35 instanceof Comparator) {
        if (e35.loose === !!t21.loose) return e35;
        e35 = e35.value;
    }
    if (!((this || r1) instanceof Comparator)) return new Comparator(e35, t21);
    o1("comparator", e35, t21);
    (this || r1).options = t21;
    (this || r1).loose = !!t21.loose;
    this.parse(e35);
    (this || r1).semver === I1 ? (this || r1).value = "" : (this || r1).value = (this || r1).operator + (this || r1).semver.version;
    o1("comp", this || r1);
}
var I1 = {};
Comparator.prototype.parse = function(e36) {
    var t22 = (this || r1).options.loose ? p1[l1.COMPARATORLOOSE] : p1[l1.COMPARATOR];
    var n12 = e36.match(t22);
    if (!n12) throw new TypeError("Invalid comparator: " + e36);
    (this || r1).operator = void 0 !== n12[1] ? n12[1] : "";
    "=" === (this || r1).operator && ((this || r1).operator = "");
    n12[2] ? (this || r1).semver = new SemVer(n12[2], (this || r1).options.loose) : (this || r1).semver = I1;
};
Comparator.prototype.toString = function() {
    return (this || r1).value;
};
Comparator.prototype.test = function(e37) {
    o1("Comparator.test", e37, (this || r1).options.loose);
    if ((this || r1).semver === I1 || e37 === I1) return true;
    if ("string" === typeof e37) try {
        e37 = new SemVer(e37, (this || r1).options);
    } catch (e) {
        return false;
    }
    return cmp(e37, (this || r1).operator, (this || r1).semver, (this || r1).options);
};
Comparator.prototype.intersects = function(e38, t23) {
    if (!(e38 instanceof Comparator)) throw new TypeError("a Comparator is required");
    t23 && "object" === typeof t23 || (t23 = {
        loose: !!t23,
        includePrerelease: false
    });
    var n13;
    if ("" === (this || r1).operator) {
        if ("" === (this || r1).value) return true;
        n13 = new Range(e38.value, t23);
        return satisfies((this || r1).value, n13, t23);
    }
    if ("" === e38.operator) {
        if ("" === e38.value) return true;
        n13 = new Range((this || r1).value, t23);
        return satisfies(e38.semver, n13, t23);
    }
    var o3 = (">=" === (this || r1).operator || ">" === (this || r1).operator) && (">=" === e38.operator || ">" === e38.operator);
    var a = ("<=" === (this || r1).operator || "<" === (this || r1).operator) && ("<=" === e38.operator || "<" === e38.operator);
    var i2 = (this || r1).semver.version === e38.semver.version;
    var s110 = (">=" === (this || r1).operator || "<=" === (this || r1).operator) && (">=" === e38.operator || "<=" === e38.operator);
    var p110 = cmp((this || r1).semver, "<", e38.semver, t23) && (">=" === (this || r1).operator || ">" === (this || r1).operator) && ("<=" === e38.operator || "<" === e38.operator);
    var c110 = cmp((this || r1).semver, ">", e38.semver, t23) && ("<=" === (this || r1).operator || "<" === (this || r1).operator) && (">=" === e38.operator || ">" === e38.operator);
    return o3 || a || i2 && s110 || p110 || c110;
};
t1.Range = Range;
function Range(e39, t24) {
    t24 && "object" === typeof t24 || (t24 = {
        loose: !!t24,
        includePrerelease: false
    });
    if (e39 instanceof Range) return e39.loose === !!t24.loose && e39.includePrerelease === !!t24.includePrerelease ? e39 : new Range(e39.raw, t24);
    if (e39 instanceof Comparator) return new Range(e39.value, t24);
    if (!((this || r1) instanceof Range)) return new Range(e39, t24);
    (this || r1).options = t24;
    (this || r1).loose = !!t24.loose;
    (this || r1).includePrerelease = !!t24.includePrerelease;
    (this || r1).raw = e39;
    (this || r1).set = e39.split(/\s*\|\|\s*/).map(function(e40) {
        return this.parseRange(e40.trim());
    }, this || r1).filter(function(e41) {
        return e41.length;
    });
    if (!(this || r1).set.length) throw new TypeError("Invalid SemVer Range: " + e39);
    this.format();
}
Range.prototype.format = function() {
    (this || r1).range = (this || r1).set.map(function(e42) {
        return e42.join(" ").trim();
    }).join("||").trim();
    return (this || r1).range;
};
Range.prototype.toString = function() {
    return (this || r1).range;
};
Range.prototype.parseRange = function(e43) {
    var t25 = (this || r1).options.loose;
    e43 = e43.trim();
    var n14 = t25 ? p1[l1.HYPHENRANGELOOSE] : p1[l1.HYPHENRANGE];
    e43 = e43.replace(n14, hyphenReplace);
    o1("hyphen replace", e43);
    e43 = e43.replace(p1[l1.COMPARATORTRIM], h1);
    o1("comparator trim", e43, p1[l1.COMPARATORTRIM]);
    e43 = e43.replace(p1[l1.TILDETRIM], u1);
    e43 = e43.replace(p1[l1.CARETTRIM], f1);
    e43 = e43.split(/\s+/).join(" ");
    var a = t25 ? p1[l1.COMPARATORLOOSE] : p1[l1.COMPARATOR];
    var i3 = e43.split(" ").map(function(e44) {
        return parseComparator(e44, (this || r1).options);
    }, this || r1).join(" ").split(/\s+/);
    (this || r1).options.loose && (i3 = i3.filter(function(e45) {
        return !!e45.match(a);
    }));
    i3 = i3.map(function(e46) {
        return new Comparator(e46, (this || r1).options);
    }, this || r1);
    return i3;
};
Range.prototype.intersects = function(e47, t26) {
    if (!(e47 instanceof Range)) throw new TypeError("a Range is required");
    return (this || r1).set.some(function(r25) {
        return isSatisfiable(r25, t26) && e47.set.some(function(e48) {
            return isSatisfiable(e48, t26) && r25.every(function(r26) {
                return e48.every(function(e49) {
                    return r26.intersects(e49, t26);
                });
            });
        });
    });
};
function isSatisfiable(e50, r27) {
    var t27 = true;
    var n15 = e50.slice();
    var o4 = n15.pop();
    while(t27 && n15.length){
        t27 = n15.every(function(e51) {
            return o4.intersects(e51, r27);
        });
        o4 = n15.pop();
    }
    return t27;
}
t1.toComparators = toComparators;
function toComparators(e52, r28) {
    return new Range(e52, r28).set.map(function(e53) {
        return e53.map(function(e54) {
            return e54.value;
        }).join(" ").trim().split(" ");
    });
}
function parseComparator(e55, r29) {
    o1("comp", e55, r29);
    e55 = replaceCarets(e55, r29);
    o1("caret", e55);
    e55 = replaceTildes(e55, r29);
    o1("tildes", e55);
    e55 = replaceXRanges(e55, r29);
    o1("xrange", e55);
    e55 = replaceStars(e55, r29);
    o1("stars", e55);
    return e55;
}
function isX(e56) {
    return !e56 || "x" === e56.toLowerCase() || "*" === e56;
}
function replaceTildes(e57, r30) {
    return e57.trim().split(/\s+/).map(function(e58) {
        return replaceTilde(e58, r30);
    }).join(" ");
}
function replaceTilde(e59, r31) {
    var t28 = r31.loose ? p1[l1.TILDELOOSE] : p1[l1.TILDE];
    return e59.replace(t28, function(r32, t29, n16, a, i4) {
        o1("tilde", e59, r32, t29, n16, a, i4);
        var s2;
        if (isX(t29)) s2 = "";
        else if (isX(n16)) s2 = ">=" + t29 + ".0.0 <" + (+t29 + 1) + ".0.0";
        else if (isX(a)) s2 = ">=" + t29 + "." + n16 + ".0 <" + t29 + "." + (+n16 + 1) + ".0";
        else if (i4) {
            o1("replaceTilde pr", i4);
            s2 = ">=" + t29 + "." + n16 + "." + a + "-" + i4 + " <" + t29 + "." + (+n16 + 1) + ".0";
        } else s2 = ">=" + t29 + "." + n16 + "." + a + " <" + t29 + "." + (+n16 + 1) + ".0";
        o1("tilde return", s2);
        return s2;
    });
}
function replaceCarets(e60, r33) {
    return e60.trim().split(/\s+/).map(function(e61) {
        return replaceCaret(e61, r33);
    }).join(" ");
}
function replaceCaret(e62, r34) {
    o1("caret", e62, r34);
    var t30 = r34.loose ? p1[l1.CARETLOOSE] : p1[l1.CARET];
    return e62.replace(t30, function(r35, t31, n17, a, i5) {
        o1("caret", e62, r35, t31, n17, a, i5);
        var s3;
        if (isX(t31)) s3 = "";
        else if (isX(n17)) s3 = ">=" + t31 + ".0.0 <" + (+t31 + 1) + ".0.0";
        else if (isX(a)) s3 = "0" === t31 ? ">=" + t31 + "." + n17 + ".0 <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + ".0 <" + (+t31 + 1) + ".0.0";
        else if (i5) {
            o1("replaceCaret pr", i5);
            s3 = "0" === t31 ? "0" === n17 ? ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + t31 + "." + n17 + "." + (+a + 1) : ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + (+t31 + 1) + ".0.0";
        } else {
            o1("no pr");
            s3 = "0" === t31 ? "0" === n17 ? ">=" + t31 + "." + n17 + "." + a + " <" + t31 + "." + n17 + "." + (+a + 1) : ">=" + t31 + "." + n17 + "." + a + " <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + "." + a + " <" + (+t31 + 1) + ".0.0";
        }
        o1("caret return", s3);
        return s3;
    });
}
function replaceXRanges(e63, r36) {
    o1("replaceXRanges", e63, r36);
    return e63.split(/\s+/).map(function(e64) {
        return replaceXRange(e64, r36);
    }).join(" ");
}
function replaceXRange(e65, r37) {
    e65 = e65.trim();
    var t32 = r37.loose ? p1[l1.XRANGELOOSE] : p1[l1.XRANGE];
    return e65.replace(t32, function(t33, n18, a, i6, s4, p2) {
        o1("xRange", e65, t33, n18, a, i6, s4, p2);
        var c2 = isX(a);
        var l110 = c2 || isX(i6);
        var E110 = l110 || isX(s4);
        var u110 = E110;
        "=" === n18 && u110 && (n18 = "");
        p2 = r37.includePrerelease ? "-0" : "";
        if (c2) t33 = ">" === n18 || "<" === n18 ? "<0.0.0-0" : "*";
        else if (n18 && u110) {
            l110 && (i6 = 0);
            s4 = 0;
            if (">" === n18) {
                n18 = ">=";
                if (l110) {
                    a = +a + 1;
                    i6 = 0;
                    s4 = 0;
                } else {
                    i6 = +i6 + 1;
                    s4 = 0;
                }
            } else if ("<=" === n18) {
                n18 = "<";
                l110 ? a = +a + 1 : i6 = +i6 + 1;
            }
            t33 = n18 + a + "." + i6 + "." + s4 + p2;
        } else l110 ? t33 = ">=" + a + ".0.0" + p2 + " <" + (+a + 1) + ".0.0" + p2 : E110 && (t33 = ">=" + a + "." + i6 + ".0" + p2 + " <" + a + "." + (+i6 + 1) + ".0" + p2);
        o1("xRange return", t33);
        return t33;
    });
}
function replaceStars(e66, r38) {
    o1("replaceStars", e66, r38);
    return e66.trim().replace(p1[l1.STAR], "");
}
function hyphenReplace(e, r39, t34, n19, o5, a, i, s5, p3, c3, l2, E2, u) {
    r39 = isX(t34) ? "" : isX(n19) ? ">=" + t34 + ".0.0" : isX(o5) ? ">=" + t34 + "." + n19 + ".0" : ">=" + r39;
    s5 = isX(p3) ? "" : isX(c3) ? "<" + (+p3 + 1) + ".0.0" : isX(l2) ? "<" + p3 + "." + (+c3 + 1) + ".0" : E2 ? "<=" + p3 + "." + c3 + "." + l2 + "-" + E2 : "<=" + s5;
    return (r39 + " " + s5).trim();
}
Range.prototype.test = function(e67) {
    if (!e67) return false;
    if ("string" === typeof e67) try {
        e67 = new SemVer(e67, (this || r1).options);
    } catch (e) {
        return false;
    }
    for(var t35 = 0; t35 < (this || r1).set.length; t35++)if (testSet((this || r1).set[t35], e67, (this || r1).options)) return true;
    return false;
};
function testSet(e68, r40, t36) {
    for(var n20 = 0; n20 < e68.length; n20++)if (!e68[n20].test(r40)) return false;
    if (r40.prerelease.length && !t36.includePrerelease) {
        for(n20 = 0; n20 < e68.length; n20++){
            o1(e68[n20].semver);
            if (e68[n20].semver !== I1 && e68[n20].semver.prerelease.length > 0) {
                var a = e68[n20].semver;
                if (a.major === r40.major && a.minor === r40.minor && a.patch === r40.patch) return true;
            }
        }
        return false;
    }
    return true;
}
t1.satisfies = satisfies;
function satisfies(e70, r41, t37) {
    try {
        r41 = new Range(r41, t37);
    } catch (e69) {
        return false;
    }
    return r41.test(e70);
}
t1.maxSatisfying = maxSatisfying;
function maxSatisfying(e72, r42, t38) {
    var n21 = null;
    var o6 = null;
    try {
        var a = new Range(r42, t38);
    } catch (e71) {
        return null;
    }
    e72.forEach(function(e73) {
        if (a.test(e73) && (!n21 || -1 === o6.compare(e73))) {
            n21 = e73;
            o6 = new SemVer(n21, t38);
        }
    });
    return n21;
}
t1.minSatisfying = minSatisfying;
function minSatisfying(e75, r43, t39) {
    var n22 = null;
    var o7 = null;
    try {
        var a = new Range(r43, t39);
    } catch (e74) {
        return null;
    }
    e75.forEach(function(e76) {
        if (a.test(e76) && (!n22 || 1 === o7.compare(e76))) {
            n22 = e76;
            o7 = new SemVer(n22, t39);
        }
    });
    return n22;
}
t1.minVersion = minVersion;
function minVersion(e77, r44) {
    e77 = new Range(e77, r44);
    var t40 = new SemVer("0.0.0");
    if (e77.test(t40)) return t40;
    t40 = new SemVer("0.0.0-0");
    if (e77.test(t40)) return t40;
    t40 = null;
    for(var n23 = 0; n23 < e77.set.length; ++n23){
        var o8 = e77.set[n23];
        o8.forEach(function(e78) {
            var r45 = new SemVer(e78.semver.version);
            switch(e78.operator){
                case ">":
                    0 === r45.prerelease.length ? r45.patch++ : r45.prerelease.push(0);
                    r45.raw = r45.format();
                case "":
                case ">=":
                    t40 && !gt(t40, r45) || (t40 = r45);
                    break;
                case "<":
                case "<=":
                    break;
                default:
                    throw new Error("Unexpected operation: " + e78.operator);
            }
        });
    }
    return t40 && e77.test(t40) ? t40 : null;
}
t1.validRange = validRange;
function validRange(e79, r46) {
    try {
        return new Range(e79, r46).range || "*";
    } catch (e) {
        return null;
    }
}
t1.ltr = ltr;
function ltr(e80, r47, t41) {
    return outside(e80, r47, "<", t41);
}
t1.gtr = gtr;
function gtr(e81, r48, t42) {
    return outside(e81, r48, ">", t42);
}
t1.outside = outside;
function outside(e82, r49, t43, n24) {
    e82 = new SemVer(e82, n24);
    r49 = new Range(r49, n24);
    var o9, a, i7, s6, p4;
    switch(t43){
        case ">":
            o9 = gt;
            a = lte;
            i7 = lt;
            s6 = ">";
            p4 = ">=";
            break;
        case "<":
            o9 = lt;
            a = gte;
            i7 = gt;
            s6 = "<";
            p4 = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(e82, r49, n24)) return false;
    for(var c4 = 0; c4 < r49.set.length; ++c4){
        var l3 = r49.set[c4];
        var E3 = null;
        var u2 = null;
        l3.forEach(function(e83) {
            e83.semver === I1 && (e83 = new Comparator(">=0.0.0"));
            E3 = E3 || e83;
            u2 = u2 || e83;
            o9(e83.semver, E3.semver, n24) ? E3 = e83 : i7(e83.semver, u2.semver, n24) && (u2 = e83);
        });
        if (E3.operator === s6 || E3.operator === p4) return false;
        if ((!u2.operator || u2.operator === s6) && a(e82, u2.semver)) return false;
        if (u2.operator === p4 && i7(e82, u2.semver)) return false;
    }
    return true;
}
t1.prerelease = prerelease;
function prerelease(e84, r50) {
    var t44 = parse(e84, r50);
    return t44 && t44.prerelease.length ? t44.prerelease : null;
}
t1.intersects = intersects;
function intersects(e85, r51, t45) {
    e85 = new Range(e85, t45);
    r51 = new Range(r51, t45);
    return e85.intersects(r51);
}
t1.coerce = coerce;
function coerce(e86, r52) {
    if (e86 instanceof SemVer) return e86;
    "number" === typeof e86 && (e86 = String(e86));
    if ("string" !== typeof e86) return null;
    r52 = r52 || {};
    var t46 = null;
    if (r52.rtl) {
        var n25;
        while((n25 = p1[l1.COERCERTL].exec(e86)) && (!t46 || t46.index + t46[0].length !== e86.length)){
            t46 && n25.index + n25[0].length === t46.index + t46[0].length || (t46 = n25);
            p1[l1.COERCERTL].lastIndex = n25.index + n25[1].length + n25[2].length;
        }
        p1[l1.COERCERTL].lastIndex = -1;
    } else t46 = e86.match(p1[l1.COERCE]);
    return null === t46 ? null : parse(t46[2] + "." + (t46[3] || "0") + "." + (t46[4] || "0"), r52);
}
var v1 = t1;
const O1 = t1.SEMVER_SPEC_VERSION, L1 = t1.tokens;
const N1 = t1.re, S1 = t1.src, T1 = t1.parse, g1 = t1.valid, A1 = t1.clean, d1 = t1.SemVer, C1 = t1.inc, w1 = t1.diff, y1 = t1.compareIdentifiers, P1 = t1.rcompareIdentifiers, D1 = t1.major, V1 = t1.minor, M1 = t1.patch, X1 = t1.compare, k1 = t1.compareLoose, F1 = t1.compareBuild, G1 = t1.rcompare, j1 = t1.sort, U1 = t1.rsort, b1 = t1.gt, x1 = t1.lt, $1 = t1.eq, B1 = t1.neq, q1 = t1.gte, H1 = t1.lte, _1 = t1.cmp, Y1 = t1.Comparator, z1 = t1.Range, Z1 = t1.toComparators, J1 = t1.satisfies, K1 = t1.maxSatisfying, Q1 = t1.minSatisfying, W1 = t1.minVersion, ee1 = t1.validRange, re1 = t1.ltr, te1 = t1.gtr, ne1 = t1.outside, oe1 = t1.prerelease, ae1 = t1.intersects, ie1 = t1.coerce;
const mod = {
    Comparator: Y1,
    Range: z1,
    SEMVER_SPEC_VERSION: O1,
    SemVer: d1,
    clean: A1,
    cmp: _1,
    coerce: ie1,
    compare: X1,
    compareBuild: F1,
    compareIdentifiers: y1,
    compareLoose: k1,
    diff: w1,
    eq: $1,
    gt: b1,
    gte: q1,
    gtr: te1,
    inc: C1,
    intersects: ae1,
    lt: x1,
    lte: H1,
    ltr: re1,
    major: D1,
    maxSatisfying: K1,
    minSatisfying: Q1,
    minVersion: W1,
    minor: V1,
    neq: B1,
    outside: ne1,
    parse: T1,
    patch: M1,
    prerelease: oe1,
    rcompare: G1,
    rcompareIdentifiers: P1,
    re: N1,
    rsort: U1,
    satisfies: J1,
    sort: j1,
    src: S1,
    toComparators: Z1,
    tokens: L1,
    valid: g1,
    validRange: ee1,
    default: v1
};
var e1 = {}, r2 = false;
function dew() {
    if (r2) return e1;
    r2 = true;
    Object.defineProperty(e1, "__esModule", {
        value: true
    });
    e1.default = shallowEqual;
    function shallowEqual(e1, r111) {
        const t54 = Object.keys(r111);
        for (const u49 of t54)if (e1[u49] !== r111[u49]) return false;
        return true;
    }
    return e1;
}
var t2 = {}, n2 = false;
function dew1() {
    if (n2) return t2;
    n2 = true;
    Object.defineProperty(t2, "__esModule", {
        value: true
    });
    t2.isAccessor = isAccessor;
    t2.isAnyTypeAnnotation = isAnyTypeAnnotation;
    t2.isArgumentPlaceholder = isArgumentPlaceholder;
    t2.isArrayExpression = isArrayExpression;
    t2.isArrayPattern = isArrayPattern;
    t2.isArrayTypeAnnotation = isArrayTypeAnnotation;
    t2.isArrowFunctionExpression = isArrowFunctionExpression;
    t2.isAssignmentExpression = isAssignmentExpression;
    t2.isAssignmentPattern = isAssignmentPattern;
    t2.isAwaitExpression = isAwaitExpression;
    t2.isBigIntLiteral = isBigIntLiteral;
    t2.isBinary = isBinary;
    t2.isBinaryExpression = isBinaryExpression;
    t2.isBindExpression = isBindExpression;
    t2.isBlock = isBlock;
    t2.isBlockParent = isBlockParent;
    t2.isBlockStatement = isBlockStatement;
    t2.isBooleanLiteral = isBooleanLiteral;
    t2.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
    t2.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
    t2.isBreakStatement = isBreakStatement;
    t2.isCallExpression = isCallExpression;
    t2.isCatchClause = isCatchClause;
    t2.isClass = isClass;
    t2.isClassAccessorProperty = isClassAccessorProperty;
    t2.isClassBody = isClassBody;
    t2.isClassDeclaration = isClassDeclaration;
    t2.isClassExpression = isClassExpression;
    t2.isClassImplements = isClassImplements;
    t2.isClassMethod = isClassMethod;
    t2.isClassPrivateMethod = isClassPrivateMethod;
    t2.isClassPrivateProperty = isClassPrivateProperty;
    t2.isClassProperty = isClassProperty;
    t2.isCompletionStatement = isCompletionStatement;
    t2.isConditional = isConditional;
    t2.isConditionalExpression = isConditionalExpression;
    t2.isContinueStatement = isContinueStatement;
    t2.isDebuggerStatement = isDebuggerStatement;
    t2.isDecimalLiteral = isDecimalLiteral;
    t2.isDeclaration = isDeclaration;
    t2.isDeclareClass = isDeclareClass;
    t2.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
    t2.isDeclareExportDeclaration = isDeclareExportDeclaration;
    t2.isDeclareFunction = isDeclareFunction;
    t2.isDeclareInterface = isDeclareInterface;
    t2.isDeclareModule = isDeclareModule;
    t2.isDeclareModuleExports = isDeclareModuleExports;
    t2.isDeclareOpaqueType = isDeclareOpaqueType;
    t2.isDeclareTypeAlias = isDeclareTypeAlias;
    t2.isDeclareVariable = isDeclareVariable;
    t2.isDeclaredPredicate = isDeclaredPredicate;
    t2.isDecorator = isDecorator;
    t2.isDirective = isDirective;
    t2.isDirectiveLiteral = isDirectiveLiteral;
    t2.isDoExpression = isDoExpression;
    t2.isDoWhileStatement = isDoWhileStatement;
    t2.isEmptyStatement = isEmptyStatement;
    t2.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
    t2.isEnumBody = isEnumBody;
    t2.isEnumBooleanBody = isEnumBooleanBody;
    t2.isEnumBooleanMember = isEnumBooleanMember;
    t2.isEnumDeclaration = isEnumDeclaration;
    t2.isEnumDefaultedMember = isEnumDefaultedMember;
    t2.isEnumMember = isEnumMember;
    t2.isEnumNumberBody = isEnumNumberBody;
    t2.isEnumNumberMember = isEnumNumberMember;
    t2.isEnumStringBody = isEnumStringBody;
    t2.isEnumStringMember = isEnumStringMember;
    t2.isEnumSymbolBody = isEnumSymbolBody;
    t2.isExistsTypeAnnotation = isExistsTypeAnnotation;
    t2.isExportAllDeclaration = isExportAllDeclaration;
    t2.isExportDeclaration = isExportDeclaration;
    t2.isExportDefaultDeclaration = isExportDefaultDeclaration;
    t2.isExportDefaultSpecifier = isExportDefaultSpecifier;
    t2.isExportNamedDeclaration = isExportNamedDeclaration;
    t2.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
    t2.isExportSpecifier = isExportSpecifier;
    t2.isExpression = isExpression;
    t2.isExpressionStatement = isExpressionStatement;
    t2.isExpressionWrapper = isExpressionWrapper;
    t2.isFile = isFile;
    t2.isFlow = isFlow;
    t2.isFlowBaseAnnotation = isFlowBaseAnnotation;
    t2.isFlowDeclaration = isFlowDeclaration;
    t2.isFlowPredicate = isFlowPredicate;
    t2.isFlowType = isFlowType;
    t2.isFor = isFor;
    t2.isForInStatement = isForInStatement;
    t2.isForOfStatement = isForOfStatement;
    t2.isForStatement = isForStatement;
    t2.isForXStatement = isForXStatement;
    t2.isFunction = isFunction1;
    t2.isFunctionDeclaration = isFunctionDeclaration;
    t2.isFunctionExpression = isFunctionExpression;
    t2.isFunctionParent = isFunctionParent;
    t2.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
    t2.isFunctionTypeParam = isFunctionTypeParam;
    t2.isGenericTypeAnnotation = isGenericTypeAnnotation;
    t2.isIdentifier = isIdentifier;
    t2.isIfStatement = isIfStatement;
    t2.isImmutable = isImmutable;
    t2.isImport = isImport;
    t2.isImportAttribute = isImportAttribute;
    t2.isImportDeclaration = isImportDeclaration;
    t2.isImportDefaultSpecifier = isImportDefaultSpecifier;
    t2.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
    t2.isImportSpecifier = isImportSpecifier;
    t2.isIndexedAccessType = isIndexedAccessType;
    t2.isInferredPredicate = isInferredPredicate;
    t2.isInterfaceDeclaration = isInterfaceDeclaration;
    t2.isInterfaceExtends = isInterfaceExtends;
    t2.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
    t2.isInterpreterDirective = isInterpreterDirective;
    t2.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
    t2.isJSX = isJSX;
    t2.isJSXAttribute = isJSXAttribute;
    t2.isJSXClosingElement = isJSXClosingElement;
    t2.isJSXClosingFragment = isJSXClosingFragment;
    t2.isJSXElement = isJSXElement;
    t2.isJSXEmptyExpression = isJSXEmptyExpression;
    t2.isJSXExpressionContainer = isJSXExpressionContainer;
    t2.isJSXFragment = isJSXFragment;
    t2.isJSXIdentifier = isJSXIdentifier;
    t2.isJSXMemberExpression = isJSXMemberExpression;
    t2.isJSXNamespacedName = isJSXNamespacedName;
    t2.isJSXOpeningElement = isJSXOpeningElement;
    t2.isJSXOpeningFragment = isJSXOpeningFragment;
    t2.isJSXSpreadAttribute = isJSXSpreadAttribute;
    t2.isJSXSpreadChild = isJSXSpreadChild;
    t2.isJSXText = isJSXText;
    t2.isLVal = isLVal;
    t2.isLabeledStatement = isLabeledStatement;
    t2.isLiteral = isLiteral;
    t2.isLogicalExpression = isLogicalExpression;
    t2.isLoop = isLoop;
    t2.isMemberExpression = isMemberExpression;
    t2.isMetaProperty = isMetaProperty;
    t2.isMethod = isMethod;
    t2.isMiscellaneous = isMiscellaneous;
    t2.isMixedTypeAnnotation = isMixedTypeAnnotation;
    t2.isModuleDeclaration = isModuleDeclaration;
    t2.isModuleExpression = isModuleExpression;
    t2.isModuleSpecifier = isModuleSpecifier;
    t2.isNewExpression = isNewExpression;
    t2.isNoop = isNoop;
    t2.isNullLiteral = isNullLiteral;
    t2.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
    t2.isNullableTypeAnnotation = isNullableTypeAnnotation;
    t2.isNumberLiteral = isNumberLiteral;
    t2.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
    t2.isNumberTypeAnnotation = isNumberTypeAnnotation;
    t2.isNumericLiteral = isNumericLiteral;
    t2.isObjectExpression = isObjectExpression;
    t2.isObjectMember = isObjectMember;
    t2.isObjectMethod = isObjectMethod;
    t2.isObjectPattern = isObjectPattern;
    t2.isObjectProperty = isObjectProperty;
    t2.isObjectTypeAnnotation = isObjectTypeAnnotation;
    t2.isObjectTypeCallProperty = isObjectTypeCallProperty;
    t2.isObjectTypeIndexer = isObjectTypeIndexer;
    t2.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
    t2.isObjectTypeProperty = isObjectTypeProperty;
    t2.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
    t2.isOpaqueType = isOpaqueType;
    t2.isOptionalCallExpression = isOptionalCallExpression;
    t2.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
    t2.isOptionalMemberExpression = isOptionalMemberExpression;
    t2.isParenthesizedExpression = isParenthesizedExpression;
    t2.isPattern = isPattern;
    t2.isPatternLike = isPatternLike;
    t2.isPipelineBareFunction = isPipelineBareFunction;
    t2.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
    t2.isPipelineTopicExpression = isPipelineTopicExpression;
    t2.isPlaceholder = isPlaceholder;
    t2.isPrivate = isPrivate;
    t2.isPrivateName = isPrivateName;
    t2.isProgram = isProgram;
    t2.isProperty = isProperty;
    t2.isPureish = isPureish;
    t2.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
    t2.isRecordExpression = isRecordExpression;
    t2.isRegExpLiteral = isRegExpLiteral;
    t2.isRegexLiteral = isRegexLiteral;
    t2.isRestElement = isRestElement;
    t2.isRestProperty = isRestProperty;
    t2.isReturnStatement = isReturnStatement;
    t2.isScopable = isScopable;
    t2.isSequenceExpression = isSequenceExpression;
    t2.isSpreadElement = isSpreadElement;
    t2.isSpreadProperty = isSpreadProperty;
    t2.isStandardized = isStandardized;
    t2.isStatement = isStatement;
    t2.isStaticBlock = isStaticBlock;
    t2.isStringLiteral = isStringLiteral;
    t2.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
    t2.isStringTypeAnnotation = isStringTypeAnnotation;
    t2.isSuper = isSuper;
    t2.isSwitchCase = isSwitchCase;
    t2.isSwitchStatement = isSwitchStatement;
    t2.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
    t2.isTSAnyKeyword = isTSAnyKeyword;
    t2.isTSArrayType = isTSArrayType;
    t2.isTSAsExpression = isTSAsExpression;
    t2.isTSBaseType = isTSBaseType;
    t2.isTSBigIntKeyword = isTSBigIntKeyword;
    t2.isTSBooleanKeyword = isTSBooleanKeyword;
    t2.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
    t2.isTSConditionalType = isTSConditionalType;
    t2.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
    t2.isTSConstructorType = isTSConstructorType;
    t2.isTSDeclareFunction = isTSDeclareFunction;
    t2.isTSDeclareMethod = isTSDeclareMethod;
    t2.isTSEntityName = isTSEntityName;
    t2.isTSEnumDeclaration = isTSEnumDeclaration;
    t2.isTSEnumMember = isTSEnumMember;
    t2.isTSExportAssignment = isTSExportAssignment;
    t2.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
    t2.isTSExternalModuleReference = isTSExternalModuleReference;
    t2.isTSFunctionType = isTSFunctionType;
    t2.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
    t2.isTSImportType = isTSImportType;
    t2.isTSIndexSignature = isTSIndexSignature;
    t2.isTSIndexedAccessType = isTSIndexedAccessType;
    t2.isTSInferType = isTSInferType;
    t2.isTSInterfaceBody = isTSInterfaceBody;
    t2.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
    t2.isTSIntersectionType = isTSIntersectionType;
    t2.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
    t2.isTSLiteralType = isTSLiteralType;
    t2.isTSMappedType = isTSMappedType;
    t2.isTSMethodSignature = isTSMethodSignature;
    t2.isTSModuleBlock = isTSModuleBlock;
    t2.isTSModuleDeclaration = isTSModuleDeclaration;
    t2.isTSNamedTupleMember = isTSNamedTupleMember;
    t2.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
    t2.isTSNeverKeyword = isTSNeverKeyword;
    t2.isTSNonNullExpression = isTSNonNullExpression;
    t2.isTSNullKeyword = isTSNullKeyword;
    t2.isTSNumberKeyword = isTSNumberKeyword;
    t2.isTSObjectKeyword = isTSObjectKeyword;
    t2.isTSOptionalType = isTSOptionalType;
    t2.isTSParameterProperty = isTSParameterProperty;
    t2.isTSParenthesizedType = isTSParenthesizedType;
    t2.isTSPropertySignature = isTSPropertySignature;
    t2.isTSQualifiedName = isTSQualifiedName;
    t2.isTSRestType = isTSRestType;
    t2.isTSStringKeyword = isTSStringKeyword;
    t2.isTSSymbolKeyword = isTSSymbolKeyword;
    t2.isTSThisType = isTSThisType;
    t2.isTSTupleType = isTSTupleType;
    t2.isTSType = isTSType;
    t2.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
    t2.isTSTypeAnnotation = isTSTypeAnnotation;
    t2.isTSTypeAssertion = isTSTypeAssertion;
    t2.isTSTypeElement = isTSTypeElement;
    t2.isTSTypeLiteral = isTSTypeLiteral;
    t2.isTSTypeOperator = isTSTypeOperator;
    t2.isTSTypeParameter = isTSTypeParameter;
    t2.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
    t2.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
    t2.isTSTypePredicate = isTSTypePredicate;
    t2.isTSTypeQuery = isTSTypeQuery;
    t2.isTSTypeReference = isTSTypeReference;
    t2.isTSUndefinedKeyword = isTSUndefinedKeyword;
    t2.isTSUnionType = isTSUnionType;
    t2.isTSUnknownKeyword = isTSUnknownKeyword;
    t2.isTSVoidKeyword = isTSVoidKeyword;
    t2.isTaggedTemplateExpression = isTaggedTemplateExpression;
    t2.isTemplateElement = isTemplateElement;
    t2.isTemplateLiteral = isTemplateLiteral;
    t2.isTerminatorless = isTerminatorless;
    t2.isThisExpression = isThisExpression;
    t2.isThisTypeAnnotation = isThisTypeAnnotation;
    t2.isThrowStatement = isThrowStatement;
    t2.isTopicReference = isTopicReference;
    t2.isTryStatement = isTryStatement;
    t2.isTupleExpression = isTupleExpression;
    t2.isTupleTypeAnnotation = isTupleTypeAnnotation;
    t2.isTypeAlias = isTypeAlias;
    t2.isTypeAnnotation = isTypeAnnotation;
    t2.isTypeCastExpression = isTypeCastExpression;
    t2.isTypeParameter = isTypeParameter;
    t2.isTypeParameterDeclaration = isTypeParameterDeclaration;
    t2.isTypeParameterInstantiation = isTypeParameterInstantiation;
    t2.isTypeScript = isTypeScript;
    t2.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
    t2.isUnaryExpression = isUnaryExpression;
    t2.isUnaryLike = isUnaryLike;
    t2.isUnionTypeAnnotation = isUnionTypeAnnotation;
    t2.isUpdateExpression = isUpdateExpression;
    t2.isUserWhitespacable = isUserWhitespacable;
    t2.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
    t2.isVariableDeclaration = isVariableDeclaration;
    t2.isVariableDeclarator = isVariableDeclarator;
    t2.isVariance = isVariance;
    t2.isVoidTypeAnnotation = isVoidTypeAnnotation;
    t2.isWhile = isWhile;
    t2.isWhileStatement = isWhileStatement;
    t2.isWithStatement = isWithStatement;
    t2.isYieldExpression = isYieldExpression;
    var i53 = dew();
    function isArrayExpression(e1, t111) {
        if (!e1) return false;
        const n111 = e1.type;
        return "ArrayExpression" === n111 && ("undefined" === typeof t111 || (0, i53.default)(e1, t111));
    }
    function isAssignmentExpression(e212, t210) {
        if (!e212) return false;
        const n210 = e212.type;
        return "AssignmentExpression" === n210 && ("undefined" === typeof t210 || (0, i53.default)(e212, t210));
    }
    function isBinaryExpression(e3, t3) {
        if (!e3) return false;
        const n3 = e3.type;
        return "BinaryExpression" === n3 && ("undefined" === typeof t3 || (0, i53.default)(e3, t3));
    }
    function isInterpreterDirective(e4, t4) {
        if (!e4) return false;
        const n4 = e4.type;
        return "InterpreterDirective" === n4 && ("undefined" === typeof t4 || (0, i53.default)(e4, t4));
    }
    function isDirective(e5, t5) {
        if (!e5) return false;
        const n5 = e5.type;
        return "Directive" === n5 && ("undefined" === typeof t5 || (0, i53.default)(e5, t5));
    }
    function isDirectiveLiteral(e6, t6) {
        if (!e6) return false;
        const n6 = e6.type;
        return "DirectiveLiteral" === n6 && ("undefined" === typeof t6 || (0, i53.default)(e6, t6));
    }
    function isBlockStatement(e7, t7) {
        if (!e7) return false;
        const n7 = e7.type;
        return "BlockStatement" === n7 && ("undefined" === typeof t7 || (0, i53.default)(e7, t7));
    }
    function isBreakStatement(e8, t8) {
        if (!e8) return false;
        const n8 = e8.type;
        return "BreakStatement" === n8 && ("undefined" === typeof t8 || (0, i53.default)(e8, t8));
    }
    function isCallExpression(e9, t9) {
        if (!e9) return false;
        const n9 = e9.type;
        return "CallExpression" === n9 && ("undefined" === typeof t9 || (0, i53.default)(e9, t9));
    }
    function isCatchClause(e10, t10) {
        if (!e10) return false;
        const n10 = e10.type;
        return "CatchClause" === n10 && ("undefined" === typeof t10 || (0, i53.default)(e10, t10));
    }
    function isConditionalExpression(e11, t11) {
        if (!e11) return false;
        const n11 = e11.type;
        return "ConditionalExpression" === n11 && ("undefined" === typeof t11 || (0, i53.default)(e11, t11));
    }
    function isContinueStatement(e12, t12) {
        if (!e12) return false;
        const n12 = e12.type;
        return "ContinueStatement" === n12 && ("undefined" === typeof t12 || (0, i53.default)(e12, t12));
    }
    function isDebuggerStatement(e13, t13) {
        if (!e13) return false;
        const n13 = e13.type;
        return "DebuggerStatement" === n13 && ("undefined" === typeof t13 || (0, i53.default)(e13, t13));
    }
    function isDoWhileStatement(e14, t14) {
        if (!e14) return false;
        const n14 = e14.type;
        return "DoWhileStatement" === n14 && ("undefined" === typeof t14 || (0, i53.default)(e14, t14));
    }
    function isEmptyStatement(e15, t15) {
        if (!e15) return false;
        const n15 = e15.type;
        return "EmptyStatement" === n15 && ("undefined" === typeof t15 || (0, i53.default)(e15, t15));
    }
    function isExpressionStatement(e16, t16) {
        if (!e16) return false;
        const n16 = e16.type;
        return "ExpressionStatement" === n16 && ("undefined" === typeof t16 || (0, i53.default)(e16, t16));
    }
    function isFile(e17, t17) {
        if (!e17) return false;
        const n17 = e17.type;
        return "File" === n17 && ("undefined" === typeof t17 || (0, i53.default)(e17, t17));
    }
    function isForInStatement(e18, t18) {
        if (!e18) return false;
        const n18 = e18.type;
        return "ForInStatement" === n18 && ("undefined" === typeof t18 || (0, i53.default)(e18, t18));
    }
    function isForStatement(e19, t19) {
        if (!e19) return false;
        const n19 = e19.type;
        return "ForStatement" === n19 && ("undefined" === typeof t19 || (0, i53.default)(e19, t19));
    }
    function isFunctionDeclaration(e20, t20) {
        if (!e20) return false;
        const n20 = e20.type;
        return "FunctionDeclaration" === n20 && ("undefined" === typeof t20 || (0, i53.default)(e20, t20));
    }
    function isFunctionExpression(e21, t21) {
        if (!e21) return false;
        const n21 = e21.type;
        return "FunctionExpression" === n21 && ("undefined" === typeof t21 || (0, i53.default)(e21, t21));
    }
    function isIdentifier(e22, t22) {
        if (!e22) return false;
        const n22 = e22.type;
        return "Identifier" === n22 && ("undefined" === typeof t22 || (0, i53.default)(e22, t22));
    }
    function isIfStatement(e23, t23) {
        if (!e23) return false;
        const n23 = e23.type;
        return "IfStatement" === n23 && ("undefined" === typeof t23 || (0, i53.default)(e23, t23));
    }
    function isLabeledStatement(e24, t24) {
        if (!e24) return false;
        const n24 = e24.type;
        return "LabeledStatement" === n24 && ("undefined" === typeof t24 || (0, i53.default)(e24, t24));
    }
    function isStringLiteral(e25, t25) {
        if (!e25) return false;
        const n25 = e25.type;
        return "StringLiteral" === n25 && ("undefined" === typeof t25 || (0, i53.default)(e25, t25));
    }
    function isNumericLiteral(e26, t26) {
        if (!e26) return false;
        const n26 = e26.type;
        return "NumericLiteral" === n26 && ("undefined" === typeof t26 || (0, i53.default)(e26, t26));
    }
    function isNullLiteral(e27, t27) {
        if (!e27) return false;
        const n27 = e27.type;
        return "NullLiteral" === n27 && ("undefined" === typeof t27 || (0, i53.default)(e27, t27));
    }
    function isBooleanLiteral(e28, t28) {
        if (!e28) return false;
        const n28 = e28.type;
        return "BooleanLiteral" === n28 && ("undefined" === typeof t28 || (0, i53.default)(e28, t28));
    }
    function isRegExpLiteral(e29, t29) {
        if (!e29) return false;
        const n29 = e29.type;
        return "RegExpLiteral" === n29 && ("undefined" === typeof t29 || (0, i53.default)(e29, t29));
    }
    function isLogicalExpression(e30, t30) {
        if (!e30) return false;
        const n30 = e30.type;
        return "LogicalExpression" === n30 && ("undefined" === typeof t30 || (0, i53.default)(e30, t30));
    }
    function isMemberExpression(e31, t31) {
        if (!e31) return false;
        const n31 = e31.type;
        return "MemberExpression" === n31 && ("undefined" === typeof t31 || (0, i53.default)(e31, t31));
    }
    function isNewExpression(e32, t32) {
        if (!e32) return false;
        const n32 = e32.type;
        return "NewExpression" === n32 && ("undefined" === typeof t32 || (0, i53.default)(e32, t32));
    }
    function isProgram(e33, t33) {
        if (!e33) return false;
        const n33 = e33.type;
        return "Program" === n33 && ("undefined" === typeof t33 || (0, i53.default)(e33, t33));
    }
    function isObjectExpression(e34, t34) {
        if (!e34) return false;
        const n34 = e34.type;
        return "ObjectExpression" === n34 && ("undefined" === typeof t34 || (0, i53.default)(e34, t34));
    }
    function isObjectMethod(e35, t35) {
        if (!e35) return false;
        const n35 = e35.type;
        return "ObjectMethod" === n35 && ("undefined" === typeof t35 || (0, i53.default)(e35, t35));
    }
    function isObjectProperty(e36, t36) {
        if (!e36) return false;
        const n36 = e36.type;
        return "ObjectProperty" === n36 && ("undefined" === typeof t36 || (0, i53.default)(e36, t36));
    }
    function isRestElement(e37, t37) {
        if (!e37) return false;
        const n37 = e37.type;
        return "RestElement" === n37 && ("undefined" === typeof t37 || (0, i53.default)(e37, t37));
    }
    function isReturnStatement(e38, t38) {
        if (!e38) return false;
        const n38 = e38.type;
        return "ReturnStatement" === n38 && ("undefined" === typeof t38 || (0, i53.default)(e38, t38));
    }
    function isSequenceExpression(e39, t39) {
        if (!e39) return false;
        const n39 = e39.type;
        return "SequenceExpression" === n39 && ("undefined" === typeof t39 || (0, i53.default)(e39, t39));
    }
    function isParenthesizedExpression(e40, t40) {
        if (!e40) return false;
        const n40 = e40.type;
        return "ParenthesizedExpression" === n40 && ("undefined" === typeof t40 || (0, i53.default)(e40, t40));
    }
    function isSwitchCase(e41, t41) {
        if (!e41) return false;
        const n41 = e41.type;
        return "SwitchCase" === n41 && ("undefined" === typeof t41 || (0, i53.default)(e41, t41));
    }
    function isSwitchStatement(e42, t42) {
        if (!e42) return false;
        const n42 = e42.type;
        return "SwitchStatement" === n42 && ("undefined" === typeof t42 || (0, i53.default)(e42, t42));
    }
    function isThisExpression(e43, t43) {
        if (!e43) return false;
        const n43 = e43.type;
        return "ThisExpression" === n43 && ("undefined" === typeof t43 || (0, i53.default)(e43, t43));
    }
    function isThrowStatement(e44, t44) {
        if (!e44) return false;
        const n44 = e44.type;
        return "ThrowStatement" === n44 && ("undefined" === typeof t44 || (0, i53.default)(e44, t44));
    }
    function isTryStatement(e45, t45) {
        if (!e45) return false;
        const n45 = e45.type;
        return "TryStatement" === n45 && ("undefined" === typeof t45 || (0, i53.default)(e45, t45));
    }
    function isUnaryExpression(e46, t46) {
        if (!e46) return false;
        const n46 = e46.type;
        return "UnaryExpression" === n46 && ("undefined" === typeof t46 || (0, i53.default)(e46, t46));
    }
    function isUpdateExpression(e47, t47) {
        if (!e47) return false;
        const n47 = e47.type;
        return "UpdateExpression" === n47 && ("undefined" === typeof t47 || (0, i53.default)(e47, t47));
    }
    function isVariableDeclaration(e48, t48) {
        if (!e48) return false;
        const n48 = e48.type;
        return "VariableDeclaration" === n48 && ("undefined" === typeof t48 || (0, i53.default)(e48, t48));
    }
    function isVariableDeclarator(e49, t49) {
        if (!e49) return false;
        const n49 = e49.type;
        return "VariableDeclarator" === n49 && ("undefined" === typeof t49 || (0, i53.default)(e49, t49));
    }
    function isWhileStatement(e50, t50) {
        if (!e50) return false;
        const n50 = e50.type;
        return "WhileStatement" === n50 && ("undefined" === typeof t50 || (0, i53.default)(e50, t50));
    }
    function isWithStatement(e51, t51) {
        if (!e51) return false;
        const n51 = e51.type;
        return "WithStatement" === n51 && ("undefined" === typeof t51 || (0, i53.default)(e51, t51));
    }
    function isAssignmentPattern(e52, t52) {
        if (!e52) return false;
        const n52 = e52.type;
        return "AssignmentPattern" === n52 && ("undefined" === typeof t52 || (0, i53.default)(e52, t52));
    }
    function isArrayPattern(e53, t53) {
        if (!e53) return false;
        const n53 = e53.type;
        return "ArrayPattern" === n53 && ("undefined" === typeof t53 || (0, i53.default)(e53, t53));
    }
    function isArrowFunctionExpression(e54, t54) {
        if (!e54) return false;
        const n54 = e54.type;
        return "ArrowFunctionExpression" === n54 && ("undefined" === typeof t54 || (0, i53.default)(e54, t54));
    }
    function isClassBody(e55, t55) {
        if (!e55) return false;
        const n55 = e55.type;
        return "ClassBody" === n55 && ("undefined" === typeof t55 || (0, i53.default)(e55, t55));
    }
    function isClassExpression(e56, t56) {
        if (!e56) return false;
        const n56 = e56.type;
        return "ClassExpression" === n56 && ("undefined" === typeof t56 || (0, i53.default)(e56, t56));
    }
    function isClassDeclaration(e57, t57) {
        if (!e57) return false;
        const n57 = e57.type;
        return "ClassDeclaration" === n57 && ("undefined" === typeof t57 || (0, i53.default)(e57, t57));
    }
    function isExportAllDeclaration(e58, t58) {
        if (!e58) return false;
        const n58 = e58.type;
        return "ExportAllDeclaration" === n58 && ("undefined" === typeof t58 || (0, i53.default)(e58, t58));
    }
    function isExportDefaultDeclaration(e59, t59) {
        if (!e59) return false;
        const n59 = e59.type;
        return "ExportDefaultDeclaration" === n59 && ("undefined" === typeof t59 || (0, i53.default)(e59, t59));
    }
    function isExportNamedDeclaration(e60, t60) {
        if (!e60) return false;
        const n60 = e60.type;
        return "ExportNamedDeclaration" === n60 && ("undefined" === typeof t60 || (0, i53.default)(e60, t60));
    }
    function isExportSpecifier(e61, t61) {
        if (!e61) return false;
        const n61 = e61.type;
        return "ExportSpecifier" === n61 && ("undefined" === typeof t61 || (0, i53.default)(e61, t61));
    }
    function isForOfStatement(e62, t62) {
        if (!e62) return false;
        const n62 = e62.type;
        return "ForOfStatement" === n62 && ("undefined" === typeof t62 || (0, i53.default)(e62, t62));
    }
    function isImportDeclaration(e63, t63) {
        if (!e63) return false;
        const n63 = e63.type;
        return "ImportDeclaration" === n63 && ("undefined" === typeof t63 || (0, i53.default)(e63, t63));
    }
    function isImportDefaultSpecifier(e64, t64) {
        if (!e64) return false;
        const n64 = e64.type;
        return "ImportDefaultSpecifier" === n64 && ("undefined" === typeof t64 || (0, i53.default)(e64, t64));
    }
    function isImportNamespaceSpecifier(e65, t65) {
        if (!e65) return false;
        const n65 = e65.type;
        return "ImportNamespaceSpecifier" === n65 && ("undefined" === typeof t65 || (0, i53.default)(e65, t65));
    }
    function isImportSpecifier(e66, t66) {
        if (!e66) return false;
        const n66 = e66.type;
        return "ImportSpecifier" === n66 && ("undefined" === typeof t66 || (0, i53.default)(e66, t66));
    }
    function isMetaProperty(e67, t67) {
        if (!e67) return false;
        const n67 = e67.type;
        return "MetaProperty" === n67 && ("undefined" === typeof t67 || (0, i53.default)(e67, t67));
    }
    function isClassMethod(e68, t68) {
        if (!e68) return false;
        const n68 = e68.type;
        return "ClassMethod" === n68 && ("undefined" === typeof t68 || (0, i53.default)(e68, t68));
    }
    function isObjectPattern(e69, t69) {
        if (!e69) return false;
        const n69 = e69.type;
        return "ObjectPattern" === n69 && ("undefined" === typeof t69 || (0, i53.default)(e69, t69));
    }
    function isSpreadElement(e70, t70) {
        if (!e70) return false;
        const n70 = e70.type;
        return "SpreadElement" === n70 && ("undefined" === typeof t70 || (0, i53.default)(e70, t70));
    }
    function isSuper(e71, t71) {
        if (!e71) return false;
        const n71 = e71.type;
        return "Super" === n71 && ("undefined" === typeof t71 || (0, i53.default)(e71, t71));
    }
    function isTaggedTemplateExpression(e72, t72) {
        if (!e72) return false;
        const n72 = e72.type;
        return "TaggedTemplateExpression" === n72 && ("undefined" === typeof t72 || (0, i53.default)(e72, t72));
    }
    function isTemplateElement(e73, t73) {
        if (!e73) return false;
        const n73 = e73.type;
        return "TemplateElement" === n73 && ("undefined" === typeof t73 || (0, i53.default)(e73, t73));
    }
    function isTemplateLiteral(e74, t74) {
        if (!e74) return false;
        const n74 = e74.type;
        return "TemplateLiteral" === n74 && ("undefined" === typeof t74 || (0, i53.default)(e74, t74));
    }
    function isYieldExpression(e75, t75) {
        if (!e75) return false;
        const n75 = e75.type;
        return "YieldExpression" === n75 && ("undefined" === typeof t75 || (0, i53.default)(e75, t75));
    }
    function isAwaitExpression(e76, t76) {
        if (!e76) return false;
        const n76 = e76.type;
        return "AwaitExpression" === n76 && ("undefined" === typeof t76 || (0, i53.default)(e76, t76));
    }
    function isImport(e77, t77) {
        if (!e77) return false;
        const n77 = e77.type;
        return "Import" === n77 && ("undefined" === typeof t77 || (0, i53.default)(e77, t77));
    }
    function isBigIntLiteral(e78, t78) {
        if (!e78) return false;
        const n78 = e78.type;
        return "BigIntLiteral" === n78 && ("undefined" === typeof t78 || (0, i53.default)(e78, t78));
    }
    function isExportNamespaceSpecifier(e79, t79) {
        if (!e79) return false;
        const n79 = e79.type;
        return "ExportNamespaceSpecifier" === n79 && ("undefined" === typeof t79 || (0, i53.default)(e79, t79));
    }
    function isOptionalMemberExpression(e80, t80) {
        if (!e80) return false;
        const n80 = e80.type;
        return "OptionalMemberExpression" === n80 && ("undefined" === typeof t80 || (0, i53.default)(e80, t80));
    }
    function isOptionalCallExpression(e81, t81) {
        if (!e81) return false;
        const n81 = e81.type;
        return "OptionalCallExpression" === n81 && ("undefined" === typeof t81 || (0, i53.default)(e81, t81));
    }
    function isClassProperty(e82, t82) {
        if (!e82) return false;
        const n82 = e82.type;
        return "ClassProperty" === n82 && ("undefined" === typeof t82 || (0, i53.default)(e82, t82));
    }
    function isClassAccessorProperty(e83, t83) {
        if (!e83) return false;
        const n83 = e83.type;
        return "ClassAccessorProperty" === n83 && ("undefined" === typeof t83 || (0, i53.default)(e83, t83));
    }
    function isClassPrivateProperty(e84, t84) {
        if (!e84) return false;
        const n84 = e84.type;
        return "ClassPrivateProperty" === n84 && ("undefined" === typeof t84 || (0, i53.default)(e84, t84));
    }
    function isClassPrivateMethod(e85, t85) {
        if (!e85) return false;
        const n85 = e85.type;
        return "ClassPrivateMethod" === n85 && ("undefined" === typeof t85 || (0, i53.default)(e85, t85));
    }
    function isPrivateName(e86, t86) {
        if (!e86) return false;
        const n86 = e86.type;
        return "PrivateName" === n86 && ("undefined" === typeof t86 || (0, i53.default)(e86, t86));
    }
    function isStaticBlock(e87, t87) {
        if (!e87) return false;
        const n87 = e87.type;
        return "StaticBlock" === n87 && ("undefined" === typeof t87 || (0, i53.default)(e87, t87));
    }
    function isAnyTypeAnnotation(e88, t88) {
        if (!e88) return false;
        const n88 = e88.type;
        return "AnyTypeAnnotation" === n88 && ("undefined" === typeof t88 || (0, i53.default)(e88, t88));
    }
    function isArrayTypeAnnotation(e89, t89) {
        if (!e89) return false;
        const n89 = e89.type;
        return "ArrayTypeAnnotation" === n89 && ("undefined" === typeof t89 || (0, i53.default)(e89, t89));
    }
    function isBooleanTypeAnnotation(e90, t90) {
        if (!e90) return false;
        const n90 = e90.type;
        return "BooleanTypeAnnotation" === n90 && ("undefined" === typeof t90 || (0, i53.default)(e90, t90));
    }
    function isBooleanLiteralTypeAnnotation(e91, t91) {
        if (!e91) return false;
        const n91 = e91.type;
        return "BooleanLiteralTypeAnnotation" === n91 && ("undefined" === typeof t91 || (0, i53.default)(e91, t91));
    }
    function isNullLiteralTypeAnnotation(e92, t92) {
        if (!e92) return false;
        const n92 = e92.type;
        return "NullLiteralTypeAnnotation" === n92 && ("undefined" === typeof t92 || (0, i53.default)(e92, t92));
    }
    function isClassImplements(e93, t93) {
        if (!e93) return false;
        const n93 = e93.type;
        return "ClassImplements" === n93 && ("undefined" === typeof t93 || (0, i53.default)(e93, t93));
    }
    function isDeclareClass(e94, t94) {
        if (!e94) return false;
        const n94 = e94.type;
        return "DeclareClass" === n94 && ("undefined" === typeof t94 || (0, i53.default)(e94, t94));
    }
    function isDeclareFunction(e95, t95) {
        if (!e95) return false;
        const n95 = e95.type;
        return "DeclareFunction" === n95 && ("undefined" === typeof t95 || (0, i53.default)(e95, t95));
    }
    function isDeclareInterface(e96, t96) {
        if (!e96) return false;
        const n96 = e96.type;
        return "DeclareInterface" === n96 && ("undefined" === typeof t96 || (0, i53.default)(e96, t96));
    }
    function isDeclareModule(e97, t97) {
        if (!e97) return false;
        const n97 = e97.type;
        return "DeclareModule" === n97 && ("undefined" === typeof t97 || (0, i53.default)(e97, t97));
    }
    function isDeclareModuleExports(e98, t98) {
        if (!e98) return false;
        const n98 = e98.type;
        return "DeclareModuleExports" === n98 && ("undefined" === typeof t98 || (0, i53.default)(e98, t98));
    }
    function isDeclareTypeAlias(e99, t99) {
        if (!e99) return false;
        const n99 = e99.type;
        return "DeclareTypeAlias" === n99 && ("undefined" === typeof t99 || (0, i53.default)(e99, t99));
    }
    function isDeclareOpaqueType(e100, t100) {
        if (!e100) return false;
        const n100 = e100.type;
        return "DeclareOpaqueType" === n100 && ("undefined" === typeof t100 || (0, i53.default)(e100, t100));
    }
    function isDeclareVariable(e101, t101) {
        if (!e101) return false;
        const n101 = e101.type;
        return "DeclareVariable" === n101 && ("undefined" === typeof t101 || (0, i53.default)(e101, t101));
    }
    function isDeclareExportDeclaration(e102, t102) {
        if (!e102) return false;
        const n102 = e102.type;
        return "DeclareExportDeclaration" === n102 && ("undefined" === typeof t102 || (0, i53.default)(e102, t102));
    }
    function isDeclareExportAllDeclaration(e103, t103) {
        if (!e103) return false;
        const n103 = e103.type;
        return "DeclareExportAllDeclaration" === n103 && ("undefined" === typeof t103 || (0, i53.default)(e103, t103));
    }
    function isDeclaredPredicate(e104, t104) {
        if (!e104) return false;
        const n104 = e104.type;
        return "DeclaredPredicate" === n104 && ("undefined" === typeof t104 || (0, i53.default)(e104, t104));
    }
    function isExistsTypeAnnotation(e105, t105) {
        if (!e105) return false;
        const n105 = e105.type;
        return "ExistsTypeAnnotation" === n105 && ("undefined" === typeof t105 || (0, i53.default)(e105, t105));
    }
    function isFunctionTypeAnnotation(e106, t106) {
        if (!e106) return false;
        const n106 = e106.type;
        return "FunctionTypeAnnotation" === n106 && ("undefined" === typeof t106 || (0, i53.default)(e106, t106));
    }
    function isFunctionTypeParam(e107, t107) {
        if (!e107) return false;
        const n107 = e107.type;
        return "FunctionTypeParam" === n107 && ("undefined" === typeof t107 || (0, i53.default)(e107, t107));
    }
    function isGenericTypeAnnotation(e108, t108) {
        if (!e108) return false;
        const n108 = e108.type;
        return "GenericTypeAnnotation" === n108 && ("undefined" === typeof t108 || (0, i53.default)(e108, t108));
    }
    function isInferredPredicate(e109, t109) {
        if (!e109) return false;
        const n109 = e109.type;
        return "InferredPredicate" === n109 && ("undefined" === typeof t109 || (0, i53.default)(e109, t109));
    }
    function isInterfaceExtends(e110, t110) {
        if (!e110) return false;
        const n110 = e110.type;
        return "InterfaceExtends" === n110 && ("undefined" === typeof t110 || (0, i53.default)(e110, t110));
    }
    function isInterfaceDeclaration(e111, t111) {
        if (!e111) return false;
        const n111 = e111.type;
        return "InterfaceDeclaration" === n111 && ("undefined" === typeof t111 || (0, i53.default)(e111, t111));
    }
    function isInterfaceTypeAnnotation(e112, t112) {
        if (!e112) return false;
        const n112 = e112.type;
        return "InterfaceTypeAnnotation" === n112 && ("undefined" === typeof t112 || (0, i53.default)(e112, t112));
    }
    function isIntersectionTypeAnnotation(e113, t113) {
        if (!e113) return false;
        const n113 = e113.type;
        return "IntersectionTypeAnnotation" === n113 && ("undefined" === typeof t113 || (0, i53.default)(e113, t113));
    }
    function isMixedTypeAnnotation(e114, t114) {
        if (!e114) return false;
        const n114 = e114.type;
        return "MixedTypeAnnotation" === n114 && ("undefined" === typeof t114 || (0, i53.default)(e114, t114));
    }
    function isEmptyTypeAnnotation(e115, t115) {
        if (!e115) return false;
        const n115 = e115.type;
        return "EmptyTypeAnnotation" === n115 && ("undefined" === typeof t115 || (0, i53.default)(e115, t115));
    }
    function isNullableTypeAnnotation(e116, t116) {
        if (!e116) return false;
        const n116 = e116.type;
        return "NullableTypeAnnotation" === n116 && ("undefined" === typeof t116 || (0, i53.default)(e116, t116));
    }
    function isNumberLiteralTypeAnnotation(e117, t117) {
        if (!e117) return false;
        const n117 = e117.type;
        return "NumberLiteralTypeAnnotation" === n117 && ("undefined" === typeof t117 || (0, i53.default)(e117, t117));
    }
    function isNumberTypeAnnotation(e118, t118) {
        if (!e118) return false;
        const n118 = e118.type;
        return "NumberTypeAnnotation" === n118 && ("undefined" === typeof t118 || (0, i53.default)(e118, t118));
    }
    function isObjectTypeAnnotation(e119, t119) {
        if (!e119) return false;
        const n119 = e119.type;
        return "ObjectTypeAnnotation" === n119 && ("undefined" === typeof t119 || (0, i53.default)(e119, t119));
    }
    function isObjectTypeInternalSlot(e120, t120) {
        if (!e120) return false;
        const n120 = e120.type;
        return "ObjectTypeInternalSlot" === n120 && ("undefined" === typeof t120 || (0, i53.default)(e120, t120));
    }
    function isObjectTypeCallProperty(e121, t121) {
        if (!e121) return false;
        const n121 = e121.type;
        return "ObjectTypeCallProperty" === n121 && ("undefined" === typeof t121 || (0, i53.default)(e121, t121));
    }
    function isObjectTypeIndexer(e122, t122) {
        if (!e122) return false;
        const n122 = e122.type;
        return "ObjectTypeIndexer" === n122 && ("undefined" === typeof t122 || (0, i53.default)(e122, t122));
    }
    function isObjectTypeProperty(e123, t123) {
        if (!e123) return false;
        const n123 = e123.type;
        return "ObjectTypeProperty" === n123 && ("undefined" === typeof t123 || (0, i53.default)(e123, t123));
    }
    function isObjectTypeSpreadProperty(e124, t124) {
        if (!e124) return false;
        const n124 = e124.type;
        return "ObjectTypeSpreadProperty" === n124 && ("undefined" === typeof t124 || (0, i53.default)(e124, t124));
    }
    function isOpaqueType(e125, t125) {
        if (!e125) return false;
        const n125 = e125.type;
        return "OpaqueType" === n125 && ("undefined" === typeof t125 || (0, i53.default)(e125, t125));
    }
    function isQualifiedTypeIdentifier(e126, t126) {
        if (!e126) return false;
        const n126 = e126.type;
        return "QualifiedTypeIdentifier" === n126 && ("undefined" === typeof t126 || (0, i53.default)(e126, t126));
    }
    function isStringLiteralTypeAnnotation(e127, t127) {
        if (!e127) return false;
        const n127 = e127.type;
        return "StringLiteralTypeAnnotation" === n127 && ("undefined" === typeof t127 || (0, i53.default)(e127, t127));
    }
    function isStringTypeAnnotation(e128, t128) {
        if (!e128) return false;
        const n128 = e128.type;
        return "StringTypeAnnotation" === n128 && ("undefined" === typeof t128 || (0, i53.default)(e128, t128));
    }
    function isSymbolTypeAnnotation(e129, t129) {
        if (!e129) return false;
        const n129 = e129.type;
        return "SymbolTypeAnnotation" === n129 && ("undefined" === typeof t129 || (0, i53.default)(e129, t129));
    }
    function isThisTypeAnnotation(e130, t130) {
        if (!e130) return false;
        const n130 = e130.type;
        return "ThisTypeAnnotation" === n130 && ("undefined" === typeof t130 || (0, i53.default)(e130, t130));
    }
    function isTupleTypeAnnotation(e131, t131) {
        if (!e131) return false;
        const n131 = e131.type;
        return "TupleTypeAnnotation" === n131 && ("undefined" === typeof t131 || (0, i53.default)(e131, t131));
    }
    function isTypeofTypeAnnotation(e132, t132) {
        if (!e132) return false;
        const n132 = e132.type;
        return "TypeofTypeAnnotation" === n132 && ("undefined" === typeof t132 || (0, i53.default)(e132, t132));
    }
    function isTypeAlias(e133, t133) {
        if (!e133) return false;
        const n133 = e133.type;
        return "TypeAlias" === n133 && ("undefined" === typeof t133 || (0, i53.default)(e133, t133));
    }
    function isTypeAnnotation(e134, t134) {
        if (!e134) return false;
        const n134 = e134.type;
        return "TypeAnnotation" === n134 && ("undefined" === typeof t134 || (0, i53.default)(e134, t134));
    }
    function isTypeCastExpression(e135, t135) {
        if (!e135) return false;
        const n135 = e135.type;
        return "TypeCastExpression" === n135 && ("undefined" === typeof t135 || (0, i53.default)(e135, t135));
    }
    function isTypeParameter(e136, t136) {
        if (!e136) return false;
        const n136 = e136.type;
        return "TypeParameter" === n136 && ("undefined" === typeof t136 || (0, i53.default)(e136, t136));
    }
    function isTypeParameterDeclaration(e137, t137) {
        if (!e137) return false;
        const n137 = e137.type;
        return "TypeParameterDeclaration" === n137 && ("undefined" === typeof t137 || (0, i53.default)(e137, t137));
    }
    function isTypeParameterInstantiation(e138, t138) {
        if (!e138) return false;
        const n138 = e138.type;
        return "TypeParameterInstantiation" === n138 && ("undefined" === typeof t138 || (0, i53.default)(e138, t138));
    }
    function isUnionTypeAnnotation(e139, t139) {
        if (!e139) return false;
        const n139 = e139.type;
        return "UnionTypeAnnotation" === n139 && ("undefined" === typeof t139 || (0, i53.default)(e139, t139));
    }
    function isVariance(e140, t140) {
        if (!e140) return false;
        const n140 = e140.type;
        return "Variance" === n140 && ("undefined" === typeof t140 || (0, i53.default)(e140, t140));
    }
    function isVoidTypeAnnotation(e141, t141) {
        if (!e141) return false;
        const n141 = e141.type;
        return "VoidTypeAnnotation" === n141 && ("undefined" === typeof t141 || (0, i53.default)(e141, t141));
    }
    function isEnumDeclaration(e142, t142) {
        if (!e142) return false;
        const n142 = e142.type;
        return "EnumDeclaration" === n142 && ("undefined" === typeof t142 || (0, i53.default)(e142, t142));
    }
    function isEnumBooleanBody(e143, t143) {
        if (!e143) return false;
        const n143 = e143.type;
        return "EnumBooleanBody" === n143 && ("undefined" === typeof t143 || (0, i53.default)(e143, t143));
    }
    function isEnumNumberBody(e144, t144) {
        if (!e144) return false;
        const n144 = e144.type;
        return "EnumNumberBody" === n144 && ("undefined" === typeof t144 || (0, i53.default)(e144, t144));
    }
    function isEnumStringBody(e145, t145) {
        if (!e145) return false;
        const n145 = e145.type;
        return "EnumStringBody" === n145 && ("undefined" === typeof t145 || (0, i53.default)(e145, t145));
    }
    function isEnumSymbolBody(e146, t146) {
        if (!e146) return false;
        const n146 = e146.type;
        return "EnumSymbolBody" === n146 && ("undefined" === typeof t146 || (0, i53.default)(e146, t146));
    }
    function isEnumBooleanMember(e147, t147) {
        if (!e147) return false;
        const n147 = e147.type;
        return "EnumBooleanMember" === n147 && ("undefined" === typeof t147 || (0, i53.default)(e147, t147));
    }
    function isEnumNumberMember(e148, t148) {
        if (!e148) return false;
        const n148 = e148.type;
        return "EnumNumberMember" === n148 && ("undefined" === typeof t148 || (0, i53.default)(e148, t148));
    }
    function isEnumStringMember(e149, t149) {
        if (!e149) return false;
        const n149 = e149.type;
        return "EnumStringMember" === n149 && ("undefined" === typeof t149 || (0, i53.default)(e149, t149));
    }
    function isEnumDefaultedMember(e150, t150) {
        if (!e150) return false;
        const n150 = e150.type;
        return "EnumDefaultedMember" === n150 && ("undefined" === typeof t150 || (0, i53.default)(e150, t150));
    }
    function isIndexedAccessType(e151, t151) {
        if (!e151) return false;
        const n151 = e151.type;
        return "IndexedAccessType" === n151 && ("undefined" === typeof t151 || (0, i53.default)(e151, t151));
    }
    function isOptionalIndexedAccessType(e152, t152) {
        if (!e152) return false;
        const n152 = e152.type;
        return "OptionalIndexedAccessType" === n152 && ("undefined" === typeof t152 || (0, i53.default)(e152, t152));
    }
    function isJSXAttribute(e153, t153) {
        if (!e153) return false;
        const n153 = e153.type;
        return "JSXAttribute" === n153 && ("undefined" === typeof t153 || (0, i53.default)(e153, t153));
    }
    function isJSXClosingElement(e154, t154) {
        if (!e154) return false;
        const n154 = e154.type;
        return "JSXClosingElement" === n154 && ("undefined" === typeof t154 || (0, i53.default)(e154, t154));
    }
    function isJSXElement(e155, t155) {
        if (!e155) return false;
        const n155 = e155.type;
        return "JSXElement" === n155 && ("undefined" === typeof t155 || (0, i53.default)(e155, t155));
    }
    function isJSXEmptyExpression(e156, t156) {
        if (!e156) return false;
        const n156 = e156.type;
        return "JSXEmptyExpression" === n156 && ("undefined" === typeof t156 || (0, i53.default)(e156, t156));
    }
    function isJSXExpressionContainer(e157, t157) {
        if (!e157) return false;
        const n157 = e157.type;
        return "JSXExpressionContainer" === n157 && ("undefined" === typeof t157 || (0, i53.default)(e157, t157));
    }
    function isJSXSpreadChild(e158, t158) {
        if (!e158) return false;
        const n158 = e158.type;
        return "JSXSpreadChild" === n158 && ("undefined" === typeof t158 || (0, i53.default)(e158, t158));
    }
    function isJSXIdentifier(e159, t159) {
        if (!e159) return false;
        const n159 = e159.type;
        return "JSXIdentifier" === n159 && ("undefined" === typeof t159 || (0, i53.default)(e159, t159));
    }
    function isJSXMemberExpression(e160, t160) {
        if (!e160) return false;
        const n160 = e160.type;
        return "JSXMemberExpression" === n160 && ("undefined" === typeof t160 || (0, i53.default)(e160, t160));
    }
    function isJSXNamespacedName(e161, t161) {
        if (!e161) return false;
        const n161 = e161.type;
        return "JSXNamespacedName" === n161 && ("undefined" === typeof t161 || (0, i53.default)(e161, t161));
    }
    function isJSXOpeningElement(e162, t162) {
        if (!e162) return false;
        const n162 = e162.type;
        return "JSXOpeningElement" === n162 && ("undefined" === typeof t162 || (0, i53.default)(e162, t162));
    }
    function isJSXSpreadAttribute(e163, t163) {
        if (!e163) return false;
        const n163 = e163.type;
        return "JSXSpreadAttribute" === n163 && ("undefined" === typeof t163 || (0, i53.default)(e163, t163));
    }
    function isJSXText(e164, t164) {
        if (!e164) return false;
        const n164 = e164.type;
        return "JSXText" === n164 && ("undefined" === typeof t164 || (0, i53.default)(e164, t164));
    }
    function isJSXFragment(e165, t165) {
        if (!e165) return false;
        const n165 = e165.type;
        return "JSXFragment" === n165 && ("undefined" === typeof t165 || (0, i53.default)(e165, t165));
    }
    function isJSXOpeningFragment(e166, t166) {
        if (!e166) return false;
        const n166 = e166.type;
        return "JSXOpeningFragment" === n166 && ("undefined" === typeof t166 || (0, i53.default)(e166, t166));
    }
    function isJSXClosingFragment(e167, t167) {
        if (!e167) return false;
        const n167 = e167.type;
        return "JSXClosingFragment" === n167 && ("undefined" === typeof t167 || (0, i53.default)(e167, t167));
    }
    function isNoop(e168, t168) {
        if (!e168) return false;
        const n168 = e168.type;
        return "Noop" === n168 && ("undefined" === typeof t168 || (0, i53.default)(e168, t168));
    }
    function isPlaceholder(e169, t169) {
        if (!e169) return false;
        const n169 = e169.type;
        return "Placeholder" === n169 && ("undefined" === typeof t169 || (0, i53.default)(e169, t169));
    }
    function isV8IntrinsicIdentifier(e170, t170) {
        if (!e170) return false;
        const n170 = e170.type;
        return "V8IntrinsicIdentifier" === n170 && ("undefined" === typeof t170 || (0, i53.default)(e170, t170));
    }
    function isArgumentPlaceholder(e171, t171) {
        if (!e171) return false;
        const n171 = e171.type;
        return "ArgumentPlaceholder" === n171 && ("undefined" === typeof t171 || (0, i53.default)(e171, t171));
    }
    function isBindExpression(e172, t172) {
        if (!e172) return false;
        const n172 = e172.type;
        return "BindExpression" === n172 && ("undefined" === typeof t172 || (0, i53.default)(e172, t172));
    }
    function isImportAttribute(e173, t173) {
        if (!e173) return false;
        const n173 = e173.type;
        return "ImportAttribute" === n173 && ("undefined" === typeof t173 || (0, i53.default)(e173, t173));
    }
    function isDecorator(e174, t174) {
        if (!e174) return false;
        const n174 = e174.type;
        return "Decorator" === n174 && ("undefined" === typeof t174 || (0, i53.default)(e174, t174));
    }
    function isDoExpression(e175, t175) {
        if (!e175) return false;
        const n175 = e175.type;
        return "DoExpression" === n175 && ("undefined" === typeof t175 || (0, i53.default)(e175, t175));
    }
    function isExportDefaultSpecifier(e176, t176) {
        if (!e176) return false;
        const n176 = e176.type;
        return "ExportDefaultSpecifier" === n176 && ("undefined" === typeof t176 || (0, i53.default)(e176, t176));
    }
    function isRecordExpression(e177, t177) {
        if (!e177) return false;
        const n177 = e177.type;
        return "RecordExpression" === n177 && ("undefined" === typeof t177 || (0, i53.default)(e177, t177));
    }
    function isTupleExpression(e178, t178) {
        if (!e178) return false;
        const n178 = e178.type;
        return "TupleExpression" === n178 && ("undefined" === typeof t178 || (0, i53.default)(e178, t178));
    }
    function isDecimalLiteral(e179, t179) {
        if (!e179) return false;
        const n179 = e179.type;
        return "DecimalLiteral" === n179 && ("undefined" === typeof t179 || (0, i53.default)(e179, t179));
    }
    function isModuleExpression(e180, t180) {
        if (!e180) return false;
        const n180 = e180.type;
        return "ModuleExpression" === n180 && ("undefined" === typeof t180 || (0, i53.default)(e180, t180));
    }
    function isTopicReference(e181, t181) {
        if (!e181) return false;
        const n181 = e181.type;
        return "TopicReference" === n181 && ("undefined" === typeof t181 || (0, i53.default)(e181, t181));
    }
    function isPipelineTopicExpression(e182, t182) {
        if (!e182) return false;
        const n182 = e182.type;
        return "PipelineTopicExpression" === n182 && ("undefined" === typeof t182 || (0, i53.default)(e182, t182));
    }
    function isPipelineBareFunction(e183, t183) {
        if (!e183) return false;
        const n183 = e183.type;
        return "PipelineBareFunction" === n183 && ("undefined" === typeof t183 || (0, i53.default)(e183, t183));
    }
    function isPipelinePrimaryTopicReference(e184, t184) {
        if (!e184) return false;
        const n184 = e184.type;
        return "PipelinePrimaryTopicReference" === n184 && ("undefined" === typeof t184 || (0, i53.default)(e184, t184));
    }
    function isTSParameterProperty(e185, t185) {
        if (!e185) return false;
        const n185 = e185.type;
        return "TSParameterProperty" === n185 && ("undefined" === typeof t185 || (0, i53.default)(e185, t185));
    }
    function isTSDeclareFunction(e186, t186) {
        if (!e186) return false;
        const n186 = e186.type;
        return "TSDeclareFunction" === n186 && ("undefined" === typeof t186 || (0, i53.default)(e186, t186));
    }
    function isTSDeclareMethod(e187, t187) {
        if (!e187) return false;
        const n187 = e187.type;
        return "TSDeclareMethod" === n187 && ("undefined" === typeof t187 || (0, i53.default)(e187, t187));
    }
    function isTSQualifiedName(e188, t188) {
        if (!e188) return false;
        const n188 = e188.type;
        return "TSQualifiedName" === n188 && ("undefined" === typeof t188 || (0, i53.default)(e188, t188));
    }
    function isTSCallSignatureDeclaration(e189, t189) {
        if (!e189) return false;
        const n189 = e189.type;
        return "TSCallSignatureDeclaration" === n189 && ("undefined" === typeof t189 || (0, i53.default)(e189, t189));
    }
    function isTSConstructSignatureDeclaration(e190, t190) {
        if (!e190) return false;
        const n190 = e190.type;
        return "TSConstructSignatureDeclaration" === n190 && ("undefined" === typeof t190 || (0, i53.default)(e190, t190));
    }
    function isTSPropertySignature(e191, t191) {
        if (!e191) return false;
        const n191 = e191.type;
        return "TSPropertySignature" === n191 && ("undefined" === typeof t191 || (0, i53.default)(e191, t191));
    }
    function isTSMethodSignature(e192, t192) {
        if (!e192) return false;
        const n192 = e192.type;
        return "TSMethodSignature" === n192 && ("undefined" === typeof t192 || (0, i53.default)(e192, t192));
    }
    function isTSIndexSignature(e193, t193) {
        if (!e193) return false;
        const n193 = e193.type;
        return "TSIndexSignature" === n193 && ("undefined" === typeof t193 || (0, i53.default)(e193, t193));
    }
    function isTSAnyKeyword(e194, t194) {
        if (!e194) return false;
        const n194 = e194.type;
        return "TSAnyKeyword" === n194 && ("undefined" === typeof t194 || (0, i53.default)(e194, t194));
    }
    function isTSBooleanKeyword(e195, t195) {
        if (!e195) return false;
        const n195 = e195.type;
        return "TSBooleanKeyword" === n195 && ("undefined" === typeof t195 || (0, i53.default)(e195, t195));
    }
    function isTSBigIntKeyword(e196, t196) {
        if (!e196) return false;
        const n196 = e196.type;
        return "TSBigIntKeyword" === n196 && ("undefined" === typeof t196 || (0, i53.default)(e196, t196));
    }
    function isTSIntrinsicKeyword(e197, t197) {
        if (!e197) return false;
        const n197 = e197.type;
        return "TSIntrinsicKeyword" === n197 && ("undefined" === typeof t197 || (0, i53.default)(e197, t197));
    }
    function isTSNeverKeyword(e198, t198) {
        if (!e198) return false;
        const n198 = e198.type;
        return "TSNeverKeyword" === n198 && ("undefined" === typeof t198 || (0, i53.default)(e198, t198));
    }
    function isTSNullKeyword(e199, t199) {
        if (!e199) return false;
        const n199 = e199.type;
        return "TSNullKeyword" === n199 && ("undefined" === typeof t199 || (0, i53.default)(e199, t199));
    }
    function isTSNumberKeyword(e200, t200) {
        if (!e200) return false;
        const n200 = e200.type;
        return "TSNumberKeyword" === n200 && ("undefined" === typeof t200 || (0, i53.default)(e200, t200));
    }
    function isTSObjectKeyword(e201, t201) {
        if (!e201) return false;
        const n201 = e201.type;
        return "TSObjectKeyword" === n201 && ("undefined" === typeof t201 || (0, i53.default)(e201, t201));
    }
    function isTSStringKeyword(e202, t202) {
        if (!e202) return false;
        const n202 = e202.type;
        return "TSStringKeyword" === n202 && ("undefined" === typeof t202 || (0, i53.default)(e202, t202));
    }
    function isTSSymbolKeyword(e203, t203) {
        if (!e203) return false;
        const n203 = e203.type;
        return "TSSymbolKeyword" === n203 && ("undefined" === typeof t203 || (0, i53.default)(e203, t203));
    }
    function isTSUndefinedKeyword(e204, t204) {
        if (!e204) return false;
        const n204 = e204.type;
        return "TSUndefinedKeyword" === n204 && ("undefined" === typeof t204 || (0, i53.default)(e204, t204));
    }
    function isTSUnknownKeyword(e205, t205) {
        if (!e205) return false;
        const n205 = e205.type;
        return "TSUnknownKeyword" === n205 && ("undefined" === typeof t205 || (0, i53.default)(e205, t205));
    }
    function isTSVoidKeyword(e206, t206) {
        if (!e206) return false;
        const n206 = e206.type;
        return "TSVoidKeyword" === n206 && ("undefined" === typeof t206 || (0, i53.default)(e206, t206));
    }
    function isTSThisType(e207, t207) {
        if (!e207) return false;
        const n207 = e207.type;
        return "TSThisType" === n207 && ("undefined" === typeof t207 || (0, i53.default)(e207, t207));
    }
    function isTSFunctionType(e208, t208) {
        if (!e208) return false;
        const n208 = e208.type;
        return "TSFunctionType" === n208 && ("undefined" === typeof t208 || (0, i53.default)(e208, t208));
    }
    function isTSConstructorType(e209, t209) {
        if (!e209) return false;
        const n209 = e209.type;
        return "TSConstructorType" === n209 && ("undefined" === typeof t209 || (0, i53.default)(e209, t209));
    }
    function isTSTypeReference(e210, t210) {
        if (!e210) return false;
        const n210 = e210.type;
        return "TSTypeReference" === n210 && ("undefined" === typeof t210 || (0, i53.default)(e210, t210));
    }
    function isTSTypePredicate(e211, t211) {
        if (!e211) return false;
        const n211 = e211.type;
        return "TSTypePredicate" === n211 && ("undefined" === typeof t211 || (0, i53.default)(e211, t211));
    }
    function isTSTypeQuery(e212, t212) {
        if (!e212) return false;
        const n212 = e212.type;
        return "TSTypeQuery" === n212 && ("undefined" === typeof t212 || (0, i53.default)(e212, t212));
    }
    function isTSTypeLiteral(e213, t213) {
        if (!e213) return false;
        const n213 = e213.type;
        return "TSTypeLiteral" === n213 && ("undefined" === typeof t213 || (0, i53.default)(e213, t213));
    }
    function isTSArrayType(e214, t214) {
        if (!e214) return false;
        const n214 = e214.type;
        return "TSArrayType" === n214 && ("undefined" === typeof t214 || (0, i53.default)(e214, t214));
    }
    function isTSTupleType(e215, t215) {
        if (!e215) return false;
        const n215 = e215.type;
        return "TSTupleType" === n215 && ("undefined" === typeof t215 || (0, i53.default)(e215, t215));
    }
    function isTSOptionalType(e216, t216) {
        if (!e216) return false;
        const n216 = e216.type;
        return "TSOptionalType" === n216 && ("undefined" === typeof t216 || (0, i53.default)(e216, t216));
    }
    function isTSRestType(e217, t217) {
        if (!e217) return false;
        const n217 = e217.type;
        return "TSRestType" === n217 && ("undefined" === typeof t217 || (0, i53.default)(e217, t217));
    }
    function isTSNamedTupleMember(e218, t218) {
        if (!e218) return false;
        const n218 = e218.type;
        return "TSNamedTupleMember" === n218 && ("undefined" === typeof t218 || (0, i53.default)(e218, t218));
    }
    function isTSUnionType(e219, t219) {
        if (!e219) return false;
        const n219 = e219.type;
        return "TSUnionType" === n219 && ("undefined" === typeof t219 || (0, i53.default)(e219, t219));
    }
    function isTSIntersectionType(e220, t220) {
        if (!e220) return false;
        const n220 = e220.type;
        return "TSIntersectionType" === n220 && ("undefined" === typeof t220 || (0, i53.default)(e220, t220));
    }
    function isTSConditionalType(e221, t221) {
        if (!e221) return false;
        const n221 = e221.type;
        return "TSConditionalType" === n221 && ("undefined" === typeof t221 || (0, i53.default)(e221, t221));
    }
    function isTSInferType(e222, t222) {
        if (!e222) return false;
        const n222 = e222.type;
        return "TSInferType" === n222 && ("undefined" === typeof t222 || (0, i53.default)(e222, t222));
    }
    function isTSParenthesizedType(e223, t223) {
        if (!e223) return false;
        const n223 = e223.type;
        return "TSParenthesizedType" === n223 && ("undefined" === typeof t223 || (0, i53.default)(e223, t223));
    }
    function isTSTypeOperator(e224, t224) {
        if (!e224) return false;
        const n224 = e224.type;
        return "TSTypeOperator" === n224 && ("undefined" === typeof t224 || (0, i53.default)(e224, t224));
    }
    function isTSIndexedAccessType(e225, t225) {
        if (!e225) return false;
        const n225 = e225.type;
        return "TSIndexedAccessType" === n225 && ("undefined" === typeof t225 || (0, i53.default)(e225, t225));
    }
    function isTSMappedType(e226, t226) {
        if (!e226) return false;
        const n226 = e226.type;
        return "TSMappedType" === n226 && ("undefined" === typeof t226 || (0, i53.default)(e226, t226));
    }
    function isTSLiteralType(e227, t227) {
        if (!e227) return false;
        const n227 = e227.type;
        return "TSLiteralType" === n227 && ("undefined" === typeof t227 || (0, i53.default)(e227, t227));
    }
    function isTSExpressionWithTypeArguments(e228, t228) {
        if (!e228) return false;
        const n228 = e228.type;
        return "TSExpressionWithTypeArguments" === n228 && ("undefined" === typeof t228 || (0, i53.default)(e228, t228));
    }
    function isTSInterfaceDeclaration(e229, t229) {
        if (!e229) return false;
        const n229 = e229.type;
        return "TSInterfaceDeclaration" === n229 && ("undefined" === typeof t229 || (0, i53.default)(e229, t229));
    }
    function isTSInterfaceBody(e230, t230) {
        if (!e230) return false;
        const n230 = e230.type;
        return "TSInterfaceBody" === n230 && ("undefined" === typeof t230 || (0, i53.default)(e230, t230));
    }
    function isTSTypeAliasDeclaration(e231, t231) {
        if (!e231) return false;
        const n231 = e231.type;
        return "TSTypeAliasDeclaration" === n231 && ("undefined" === typeof t231 || (0, i53.default)(e231, t231));
    }
    function isTSAsExpression(e232, t232) {
        if (!e232) return false;
        const n232 = e232.type;
        return "TSAsExpression" === n232 && ("undefined" === typeof t232 || (0, i53.default)(e232, t232));
    }
    function isTSTypeAssertion(e233, t233) {
        if (!e233) return false;
        const n233 = e233.type;
        return "TSTypeAssertion" === n233 && ("undefined" === typeof t233 || (0, i53.default)(e233, t233));
    }
    function isTSEnumDeclaration(e234, t234) {
        if (!e234) return false;
        const n234 = e234.type;
        return "TSEnumDeclaration" === n234 && ("undefined" === typeof t234 || (0, i53.default)(e234, t234));
    }
    function isTSEnumMember(e235, t235) {
        if (!e235) return false;
        const n235 = e235.type;
        return "TSEnumMember" === n235 && ("undefined" === typeof t235 || (0, i53.default)(e235, t235));
    }
    function isTSModuleDeclaration(e236, t236) {
        if (!e236) return false;
        const n236 = e236.type;
        return "TSModuleDeclaration" === n236 && ("undefined" === typeof t236 || (0, i53.default)(e236, t236));
    }
    function isTSModuleBlock(e237, t237) {
        if (!e237) return false;
        const n237 = e237.type;
        return "TSModuleBlock" === n237 && ("undefined" === typeof t237 || (0, i53.default)(e237, t237));
    }
    function isTSImportType(e238, t238) {
        if (!e238) return false;
        const n238 = e238.type;
        return "TSImportType" === n238 && ("undefined" === typeof t238 || (0, i53.default)(e238, t238));
    }
    function isTSImportEqualsDeclaration(e239, t239) {
        if (!e239) return false;
        const n239 = e239.type;
        return "TSImportEqualsDeclaration" === n239 && ("undefined" === typeof t239 || (0, i53.default)(e239, t239));
    }
    function isTSExternalModuleReference(e240, t240) {
        if (!e240) return false;
        const n240 = e240.type;
        return "TSExternalModuleReference" === n240 && ("undefined" === typeof t240 || (0, i53.default)(e240, t240));
    }
    function isTSNonNullExpression(e241, t241) {
        if (!e241) return false;
        const n241 = e241.type;
        return "TSNonNullExpression" === n241 && ("undefined" === typeof t241 || (0, i53.default)(e241, t241));
    }
    function isTSExportAssignment(e242, t242) {
        if (!e242) return false;
        const n242 = e242.type;
        return "TSExportAssignment" === n242 && ("undefined" === typeof t242 || (0, i53.default)(e242, t242));
    }
    function isTSNamespaceExportDeclaration(e243, t243) {
        if (!e243) return false;
        const n243 = e243.type;
        return "TSNamespaceExportDeclaration" === n243 && ("undefined" === typeof t243 || (0, i53.default)(e243, t243));
    }
    function isTSTypeAnnotation(e244, t244) {
        if (!e244) return false;
        const n244 = e244.type;
        return "TSTypeAnnotation" === n244 && ("undefined" === typeof t244 || (0, i53.default)(e244, t244));
    }
    function isTSTypeParameterInstantiation(e245, t245) {
        if (!e245) return false;
        const n245 = e245.type;
        return "TSTypeParameterInstantiation" === n245 && ("undefined" === typeof t245 || (0, i53.default)(e245, t245));
    }
    function isTSTypeParameterDeclaration(e246, t246) {
        if (!e246) return false;
        const n246 = e246.type;
        return "TSTypeParameterDeclaration" === n246 && ("undefined" === typeof t246 || (0, i53.default)(e246, t246));
    }
    function isTSTypeParameter(e247, t247) {
        if (!e247) return false;
        const n247 = e247.type;
        return "TSTypeParameter" === n247 && ("undefined" === typeof t247 || (0, i53.default)(e247, t247));
    }
    function isStandardized(e248, t248) {
        if (!e248) return false;
        const n248 = e248.type;
        return ("ArrayExpression" === n248 || "AssignmentExpression" === n248 || "BinaryExpression" === n248 || "InterpreterDirective" === n248 || "Directive" === n248 || "DirectiveLiteral" === n248 || "BlockStatement" === n248 || "BreakStatement" === n248 || "CallExpression" === n248 || "CatchClause" === n248 || "ConditionalExpression" === n248 || "ContinueStatement" === n248 || "DebuggerStatement" === n248 || "DoWhileStatement" === n248 || "EmptyStatement" === n248 || "ExpressionStatement" === n248 || "File" === n248 || "ForInStatement" === n248 || "ForStatement" === n248 || "FunctionDeclaration" === n248 || "FunctionExpression" === n248 || "Identifier" === n248 || "IfStatement" === n248 || "LabeledStatement" === n248 || "StringLiteral" === n248 || "NumericLiteral" === n248 || "NullLiteral" === n248 || "BooleanLiteral" === n248 || "RegExpLiteral" === n248 || "LogicalExpression" === n248 || "MemberExpression" === n248 || "NewExpression" === n248 || "Program" === n248 || "ObjectExpression" === n248 || "ObjectMethod" === n248 || "ObjectProperty" === n248 || "RestElement" === n248 || "ReturnStatement" === n248 || "SequenceExpression" === n248 || "ParenthesizedExpression" === n248 || "SwitchCase" === n248 || "SwitchStatement" === n248 || "ThisExpression" === n248 || "ThrowStatement" === n248 || "TryStatement" === n248 || "UnaryExpression" === n248 || "UpdateExpression" === n248 || "VariableDeclaration" === n248 || "VariableDeclarator" === n248 || "WhileStatement" === n248 || "WithStatement" === n248 || "AssignmentPattern" === n248 || "ArrayPattern" === n248 || "ArrowFunctionExpression" === n248 || "ClassBody" === n248 || "ClassExpression" === n248 || "ClassDeclaration" === n248 || "ExportAllDeclaration" === n248 || "ExportDefaultDeclaration" === n248 || "ExportNamedDeclaration" === n248 || "ExportSpecifier" === n248 || "ForOfStatement" === n248 || "ImportDeclaration" === n248 || "ImportDefaultSpecifier" === n248 || "ImportNamespaceSpecifier" === n248 || "ImportSpecifier" === n248 || "MetaProperty" === n248 || "ClassMethod" === n248 || "ObjectPattern" === n248 || "SpreadElement" === n248 || "Super" === n248 || "TaggedTemplateExpression" === n248 || "TemplateElement" === n248 || "TemplateLiteral" === n248 || "YieldExpression" === n248 || "AwaitExpression" === n248 || "Import" === n248 || "BigIntLiteral" === n248 || "ExportNamespaceSpecifier" === n248 || "OptionalMemberExpression" === n248 || "OptionalCallExpression" === n248 || "ClassProperty" === n248 || "ClassAccessorProperty" === n248 || "ClassPrivateProperty" === n248 || "ClassPrivateMethod" === n248 || "PrivateName" === n248 || "StaticBlock" === n248 || "Placeholder" === n248 && ("Identifier" === e248.expectedNode || "StringLiteral" === e248.expectedNode || "BlockStatement" === e248.expectedNode || "ClassBody" === e248.expectedNode)) && ("undefined" === typeof t248 || (0, i53.default)(e248, t248));
    }
    function isExpression(e249, t249) {
        if (!e249) return false;
        const n249 = e249.type;
        return ("ArrayExpression" === n249 || "AssignmentExpression" === n249 || "BinaryExpression" === n249 || "CallExpression" === n249 || "ConditionalExpression" === n249 || "FunctionExpression" === n249 || "Identifier" === n249 || "StringLiteral" === n249 || "NumericLiteral" === n249 || "NullLiteral" === n249 || "BooleanLiteral" === n249 || "RegExpLiteral" === n249 || "LogicalExpression" === n249 || "MemberExpression" === n249 || "NewExpression" === n249 || "ObjectExpression" === n249 || "SequenceExpression" === n249 || "ParenthesizedExpression" === n249 || "ThisExpression" === n249 || "UnaryExpression" === n249 || "UpdateExpression" === n249 || "ArrowFunctionExpression" === n249 || "ClassExpression" === n249 || "MetaProperty" === n249 || "Super" === n249 || "TaggedTemplateExpression" === n249 || "TemplateLiteral" === n249 || "YieldExpression" === n249 || "AwaitExpression" === n249 || "Import" === n249 || "BigIntLiteral" === n249 || "OptionalMemberExpression" === n249 || "OptionalCallExpression" === n249 || "TypeCastExpression" === n249 || "JSXElement" === n249 || "JSXFragment" === n249 || "BindExpression" === n249 || "DoExpression" === n249 || "RecordExpression" === n249 || "TupleExpression" === n249 || "DecimalLiteral" === n249 || "ModuleExpression" === n249 || "TopicReference" === n249 || "PipelineTopicExpression" === n249 || "PipelineBareFunction" === n249 || "PipelinePrimaryTopicReference" === n249 || "TSAsExpression" === n249 || "TSTypeAssertion" === n249 || "TSNonNullExpression" === n249 || "Placeholder" === n249 && ("Expression" === e249.expectedNode || "Identifier" === e249.expectedNode || "StringLiteral" === e249.expectedNode)) && ("undefined" === typeof t249 || (0, i53.default)(e249, t249));
    }
    function isBinary(e250, t250) {
        if (!e250) return false;
        const n250 = e250.type;
        return ("BinaryExpression" === n250 || "LogicalExpression" === n250) && ("undefined" === typeof t250 || (0, i53.default)(e250, t250));
    }
    function isScopable(e251, t251) {
        if (!e251) return false;
        const n251 = e251.type;
        return ("BlockStatement" === n251 || "CatchClause" === n251 || "DoWhileStatement" === n251 || "ForInStatement" === n251 || "ForStatement" === n251 || "FunctionDeclaration" === n251 || "FunctionExpression" === n251 || "Program" === n251 || "ObjectMethod" === n251 || "SwitchStatement" === n251 || "WhileStatement" === n251 || "ArrowFunctionExpression" === n251 || "ClassExpression" === n251 || "ClassDeclaration" === n251 || "ForOfStatement" === n251 || "ClassMethod" === n251 || "ClassPrivateMethod" === n251 || "StaticBlock" === n251 || "TSModuleBlock" === n251 || "Placeholder" === n251 && "BlockStatement" === e251.expectedNode) && ("undefined" === typeof t251 || (0, i53.default)(e251, t251));
    }
    function isBlockParent(e252, t252) {
        if (!e252) return false;
        const n252 = e252.type;
        return ("BlockStatement" === n252 || "CatchClause" === n252 || "DoWhileStatement" === n252 || "ForInStatement" === n252 || "ForStatement" === n252 || "FunctionDeclaration" === n252 || "FunctionExpression" === n252 || "Program" === n252 || "ObjectMethod" === n252 || "SwitchStatement" === n252 || "WhileStatement" === n252 || "ArrowFunctionExpression" === n252 || "ForOfStatement" === n252 || "ClassMethod" === n252 || "ClassPrivateMethod" === n252 || "StaticBlock" === n252 || "TSModuleBlock" === n252 || "Placeholder" === n252 && "BlockStatement" === e252.expectedNode) && ("undefined" === typeof t252 || (0, i53.default)(e252, t252));
    }
    function isBlock(e253, t253) {
        if (!e253) return false;
        const n253 = e253.type;
        return ("BlockStatement" === n253 || "Program" === n253 || "TSModuleBlock" === n253 || "Placeholder" === n253 && "BlockStatement" === e253.expectedNode) && ("undefined" === typeof t253 || (0, i53.default)(e253, t253));
    }
    function isStatement(e254, t254) {
        if (!e254) return false;
        const n254 = e254.type;
        return ("BlockStatement" === n254 || "BreakStatement" === n254 || "ContinueStatement" === n254 || "DebuggerStatement" === n254 || "DoWhileStatement" === n254 || "EmptyStatement" === n254 || "ExpressionStatement" === n254 || "ForInStatement" === n254 || "ForStatement" === n254 || "FunctionDeclaration" === n254 || "IfStatement" === n254 || "LabeledStatement" === n254 || "ReturnStatement" === n254 || "SwitchStatement" === n254 || "ThrowStatement" === n254 || "TryStatement" === n254 || "VariableDeclaration" === n254 || "WhileStatement" === n254 || "WithStatement" === n254 || "ClassDeclaration" === n254 || "ExportAllDeclaration" === n254 || "ExportDefaultDeclaration" === n254 || "ExportNamedDeclaration" === n254 || "ForOfStatement" === n254 || "ImportDeclaration" === n254 || "DeclareClass" === n254 || "DeclareFunction" === n254 || "DeclareInterface" === n254 || "DeclareModule" === n254 || "DeclareModuleExports" === n254 || "DeclareTypeAlias" === n254 || "DeclareOpaqueType" === n254 || "DeclareVariable" === n254 || "DeclareExportDeclaration" === n254 || "DeclareExportAllDeclaration" === n254 || "InterfaceDeclaration" === n254 || "OpaqueType" === n254 || "TypeAlias" === n254 || "EnumDeclaration" === n254 || "TSDeclareFunction" === n254 || "TSInterfaceDeclaration" === n254 || "TSTypeAliasDeclaration" === n254 || "TSEnumDeclaration" === n254 || "TSModuleDeclaration" === n254 || "TSImportEqualsDeclaration" === n254 || "TSExportAssignment" === n254 || "TSNamespaceExportDeclaration" === n254 || "Placeholder" === n254 && ("Statement" === e254.expectedNode || "Declaration" === e254.expectedNode || "BlockStatement" === e254.expectedNode)) && ("undefined" === typeof t254 || (0, i53.default)(e254, t254));
    }
    function isTerminatorless(e255, t255) {
        if (!e255) return false;
        const n255 = e255.type;
        return ("BreakStatement" === n255 || "ContinueStatement" === n255 || "ReturnStatement" === n255 || "ThrowStatement" === n255 || "YieldExpression" === n255 || "AwaitExpression" === n255) && ("undefined" === typeof t255 || (0, i53.default)(e255, t255));
    }
    function isCompletionStatement(e256, t256) {
        if (!e256) return false;
        const n256 = e256.type;
        return ("BreakStatement" === n256 || "ContinueStatement" === n256 || "ReturnStatement" === n256 || "ThrowStatement" === n256) && ("undefined" === typeof t256 || (0, i53.default)(e256, t256));
    }
    function isConditional(e257, t257) {
        if (!e257) return false;
        const n257 = e257.type;
        return ("ConditionalExpression" === n257 || "IfStatement" === n257) && ("undefined" === typeof t257 || (0, i53.default)(e257, t257));
    }
    function isLoop(e258, t258) {
        if (!e258) return false;
        const n258 = e258.type;
        return ("DoWhileStatement" === n258 || "ForInStatement" === n258 || "ForStatement" === n258 || "WhileStatement" === n258 || "ForOfStatement" === n258) && ("undefined" === typeof t258 || (0, i53.default)(e258, t258));
    }
    function isWhile(e259, t259) {
        if (!e259) return false;
        const n259 = e259.type;
        return ("DoWhileStatement" === n259 || "WhileStatement" === n259) && ("undefined" === typeof t259 || (0, i53.default)(e259, t259));
    }
    function isExpressionWrapper(e260, t260) {
        if (!e260) return false;
        const n260 = e260.type;
        return ("ExpressionStatement" === n260 || "ParenthesizedExpression" === n260 || "TypeCastExpression" === n260) && ("undefined" === typeof t260 || (0, i53.default)(e260, t260));
    }
    function isFor(e261, t261) {
        if (!e261) return false;
        const n261 = e261.type;
        return ("ForInStatement" === n261 || "ForStatement" === n261 || "ForOfStatement" === n261) && ("undefined" === typeof t261 || (0, i53.default)(e261, t261));
    }
    function isForXStatement(e262, t262) {
        if (!e262) return false;
        const n262 = e262.type;
        return ("ForInStatement" === n262 || "ForOfStatement" === n262) && ("undefined" === typeof t262 || (0, i53.default)(e262, t262));
    }
    function isFunction1(e263, t263) {
        if (!e263) return false;
        const n263 = e263.type;
        return ("FunctionDeclaration" === n263 || "FunctionExpression" === n263 || "ObjectMethod" === n263 || "ArrowFunctionExpression" === n263 || "ClassMethod" === n263 || "ClassPrivateMethod" === n263) && ("undefined" === typeof t263 || (0, i53.default)(e263, t263));
    }
    function isFunctionParent(e264, t264) {
        if (!e264) return false;
        const n264 = e264.type;
        return ("FunctionDeclaration" === n264 || "FunctionExpression" === n264 || "ObjectMethod" === n264 || "ArrowFunctionExpression" === n264 || "ClassMethod" === n264 || "ClassPrivateMethod" === n264 || "StaticBlock" === n264) && ("undefined" === typeof t264 || (0, i53.default)(e264, t264));
    }
    function isPureish(e265, t265) {
        if (!e265) return false;
        const n265 = e265.type;
        return ("FunctionDeclaration" === n265 || "FunctionExpression" === n265 || "StringLiteral" === n265 || "NumericLiteral" === n265 || "NullLiteral" === n265 || "BooleanLiteral" === n265 || "RegExpLiteral" === n265 || "ArrowFunctionExpression" === n265 || "BigIntLiteral" === n265 || "DecimalLiteral" === n265 || "Placeholder" === n265 && "StringLiteral" === e265.expectedNode) && ("undefined" === typeof t265 || (0, i53.default)(e265, t265));
    }
    function isDeclaration(e266, t266) {
        if (!e266) return false;
        const n266 = e266.type;
        return ("FunctionDeclaration" === n266 || "VariableDeclaration" === n266 || "ClassDeclaration" === n266 || "ExportAllDeclaration" === n266 || "ExportDefaultDeclaration" === n266 || "ExportNamedDeclaration" === n266 || "ImportDeclaration" === n266 || "DeclareClass" === n266 || "DeclareFunction" === n266 || "DeclareInterface" === n266 || "DeclareModule" === n266 || "DeclareModuleExports" === n266 || "DeclareTypeAlias" === n266 || "DeclareOpaqueType" === n266 || "DeclareVariable" === n266 || "DeclareExportDeclaration" === n266 || "DeclareExportAllDeclaration" === n266 || "InterfaceDeclaration" === n266 || "OpaqueType" === n266 || "TypeAlias" === n266 || "EnumDeclaration" === n266 || "TSDeclareFunction" === n266 || "TSInterfaceDeclaration" === n266 || "TSTypeAliasDeclaration" === n266 || "TSEnumDeclaration" === n266 || "TSModuleDeclaration" === n266 || "Placeholder" === n266 && "Declaration" === e266.expectedNode) && ("undefined" === typeof t266 || (0, i53.default)(e266, t266));
    }
    function isPatternLike(e267, t267) {
        if (!e267) return false;
        const n267 = e267.type;
        return ("Identifier" === n267 || "RestElement" === n267 || "AssignmentPattern" === n267 || "ArrayPattern" === n267 || "ObjectPattern" === n267 || "Placeholder" === n267 && ("Pattern" === e267.expectedNode || "Identifier" === e267.expectedNode)) && ("undefined" === typeof t267 || (0, i53.default)(e267, t267));
    }
    function isLVal(e268, t268) {
        if (!e268) return false;
        const n268 = e268.type;
        return ("Identifier" === n268 || "MemberExpression" === n268 || "RestElement" === n268 || "AssignmentPattern" === n268 || "ArrayPattern" === n268 || "ObjectPattern" === n268 || "TSParameterProperty" === n268 || "Placeholder" === n268 && ("Pattern" === e268.expectedNode || "Identifier" === e268.expectedNode)) && ("undefined" === typeof t268 || (0, i53.default)(e268, t268));
    }
    function isTSEntityName(e269, t269) {
        if (!e269) return false;
        const n269 = e269.type;
        return ("Identifier" === n269 || "TSQualifiedName" === n269 || "Placeholder" === n269 && "Identifier" === e269.expectedNode) && ("undefined" === typeof t269 || (0, i53.default)(e269, t269));
    }
    function isLiteral(e270, t270) {
        if (!e270) return false;
        const n270 = e270.type;
        return ("StringLiteral" === n270 || "NumericLiteral" === n270 || "NullLiteral" === n270 || "BooleanLiteral" === n270 || "RegExpLiteral" === n270 || "TemplateLiteral" === n270 || "BigIntLiteral" === n270 || "DecimalLiteral" === n270 || "Placeholder" === n270 && "StringLiteral" === e270.expectedNode) && ("undefined" === typeof t270 || (0, i53.default)(e270, t270));
    }
    function isImmutable(e271, t271) {
        if (!e271) return false;
        const n271 = e271.type;
        return ("StringLiteral" === n271 || "NumericLiteral" === n271 || "NullLiteral" === n271 || "BooleanLiteral" === n271 || "BigIntLiteral" === n271 || "JSXAttribute" === n271 || "JSXClosingElement" === n271 || "JSXElement" === n271 || "JSXExpressionContainer" === n271 || "JSXSpreadChild" === n271 || "JSXOpeningElement" === n271 || "JSXText" === n271 || "JSXFragment" === n271 || "JSXOpeningFragment" === n271 || "JSXClosingFragment" === n271 || "DecimalLiteral" === n271 || "Placeholder" === n271 && "StringLiteral" === e271.expectedNode) && ("undefined" === typeof t271 || (0, i53.default)(e271, t271));
    }
    function isUserWhitespacable(e272, t272) {
        if (!e272) return false;
        const n272 = e272.type;
        return ("ObjectMethod" === n272 || "ObjectProperty" === n272 || "ObjectTypeInternalSlot" === n272 || "ObjectTypeCallProperty" === n272 || "ObjectTypeIndexer" === n272 || "ObjectTypeProperty" === n272 || "ObjectTypeSpreadProperty" === n272) && ("undefined" === typeof t272 || (0, i53.default)(e272, t272));
    }
    function isMethod(e273, t273) {
        if (!e273) return false;
        const n273 = e273.type;
        return ("ObjectMethod" === n273 || "ClassMethod" === n273 || "ClassPrivateMethod" === n273) && ("undefined" === typeof t273 || (0, i53.default)(e273, t273));
    }
    function isObjectMember(e274, t274) {
        if (!e274) return false;
        const n274 = e274.type;
        return ("ObjectMethod" === n274 || "ObjectProperty" === n274) && ("undefined" === typeof t274 || (0, i53.default)(e274, t274));
    }
    function isProperty(e275, t275) {
        if (!e275) return false;
        const n275 = e275.type;
        return ("ObjectProperty" === n275 || "ClassProperty" === n275 || "ClassAccessorProperty" === n275 || "ClassPrivateProperty" === n275) && ("undefined" === typeof t275 || (0, i53.default)(e275, t275));
    }
    function isUnaryLike(e276, t276) {
        if (!e276) return false;
        const n276 = e276.type;
        return ("UnaryExpression" === n276 || "SpreadElement" === n276) && ("undefined" === typeof t276 || (0, i53.default)(e276, t276));
    }
    function isPattern(e277, t277) {
        if (!e277) return false;
        const n277 = e277.type;
        return ("AssignmentPattern" === n277 || "ArrayPattern" === n277 || "ObjectPattern" === n277 || "Placeholder" === n277 && "Pattern" === e277.expectedNode) && ("undefined" === typeof t277 || (0, i53.default)(e277, t277));
    }
    function isClass(e278, t278) {
        if (!e278) return false;
        const n278 = e278.type;
        return ("ClassExpression" === n278 || "ClassDeclaration" === n278) && ("undefined" === typeof t278 || (0, i53.default)(e278, t278));
    }
    function isModuleDeclaration(e279, t279) {
        if (!e279) return false;
        const n279 = e279.type;
        return ("ExportAllDeclaration" === n279 || "ExportDefaultDeclaration" === n279 || "ExportNamedDeclaration" === n279 || "ImportDeclaration" === n279) && ("undefined" === typeof t279 || (0, i53.default)(e279, t279));
    }
    function isExportDeclaration(e280, t280) {
        if (!e280) return false;
        const n280 = e280.type;
        return ("ExportAllDeclaration" === n280 || "ExportDefaultDeclaration" === n280 || "ExportNamedDeclaration" === n280) && ("undefined" === typeof t280 || (0, i53.default)(e280, t280));
    }
    function isModuleSpecifier(e281, t281) {
        if (!e281) return false;
        const n281 = e281.type;
        return ("ExportSpecifier" === n281 || "ImportDefaultSpecifier" === n281 || "ImportNamespaceSpecifier" === n281 || "ImportSpecifier" === n281 || "ExportNamespaceSpecifier" === n281 || "ExportDefaultSpecifier" === n281) && ("undefined" === typeof t281 || (0, i53.default)(e281, t281));
    }
    function isAccessor(e282, t282) {
        if (!e282) return false;
        const n282 = e282.type;
        return "ClassAccessorProperty" === n282 && ("undefined" === typeof t282 || (0, i53.default)(e282, t282));
    }
    function isPrivate(e283, t283) {
        if (!e283) return false;
        const n283 = e283.type;
        return ("ClassPrivateProperty" === n283 || "ClassPrivateMethod" === n283 || "PrivateName" === n283) && ("undefined" === typeof t283 || (0, i53.default)(e283, t283));
    }
    function isFlow(e284, t284) {
        if (!e284) return false;
        const n284 = e284.type;
        return ("AnyTypeAnnotation" === n284 || "ArrayTypeAnnotation" === n284 || "BooleanTypeAnnotation" === n284 || "BooleanLiteralTypeAnnotation" === n284 || "NullLiteralTypeAnnotation" === n284 || "ClassImplements" === n284 || "DeclareClass" === n284 || "DeclareFunction" === n284 || "DeclareInterface" === n284 || "DeclareModule" === n284 || "DeclareModuleExports" === n284 || "DeclareTypeAlias" === n284 || "DeclareOpaqueType" === n284 || "DeclareVariable" === n284 || "DeclareExportDeclaration" === n284 || "DeclareExportAllDeclaration" === n284 || "DeclaredPredicate" === n284 || "ExistsTypeAnnotation" === n284 || "FunctionTypeAnnotation" === n284 || "FunctionTypeParam" === n284 || "GenericTypeAnnotation" === n284 || "InferredPredicate" === n284 || "InterfaceExtends" === n284 || "InterfaceDeclaration" === n284 || "InterfaceTypeAnnotation" === n284 || "IntersectionTypeAnnotation" === n284 || "MixedTypeAnnotation" === n284 || "EmptyTypeAnnotation" === n284 || "NullableTypeAnnotation" === n284 || "NumberLiteralTypeAnnotation" === n284 || "NumberTypeAnnotation" === n284 || "ObjectTypeAnnotation" === n284 || "ObjectTypeInternalSlot" === n284 || "ObjectTypeCallProperty" === n284 || "ObjectTypeIndexer" === n284 || "ObjectTypeProperty" === n284 || "ObjectTypeSpreadProperty" === n284 || "OpaqueType" === n284 || "QualifiedTypeIdentifier" === n284 || "StringLiteralTypeAnnotation" === n284 || "StringTypeAnnotation" === n284 || "SymbolTypeAnnotation" === n284 || "ThisTypeAnnotation" === n284 || "TupleTypeAnnotation" === n284 || "TypeofTypeAnnotation" === n284 || "TypeAlias" === n284 || "TypeAnnotation" === n284 || "TypeCastExpression" === n284 || "TypeParameter" === n284 || "TypeParameterDeclaration" === n284 || "TypeParameterInstantiation" === n284 || "UnionTypeAnnotation" === n284 || "Variance" === n284 || "VoidTypeAnnotation" === n284 || "EnumDeclaration" === n284 || "EnumBooleanBody" === n284 || "EnumNumberBody" === n284 || "EnumStringBody" === n284 || "EnumSymbolBody" === n284 || "EnumBooleanMember" === n284 || "EnumNumberMember" === n284 || "EnumStringMember" === n284 || "EnumDefaultedMember" === n284 || "IndexedAccessType" === n284 || "OptionalIndexedAccessType" === n284) && ("undefined" === typeof t284 || (0, i53.default)(e284, t284));
    }
    function isFlowType(e285, t285) {
        if (!e285) return false;
        const n285 = e285.type;
        return ("AnyTypeAnnotation" === n285 || "ArrayTypeAnnotation" === n285 || "BooleanTypeAnnotation" === n285 || "BooleanLiteralTypeAnnotation" === n285 || "NullLiteralTypeAnnotation" === n285 || "ExistsTypeAnnotation" === n285 || "FunctionTypeAnnotation" === n285 || "GenericTypeAnnotation" === n285 || "InterfaceTypeAnnotation" === n285 || "IntersectionTypeAnnotation" === n285 || "MixedTypeAnnotation" === n285 || "EmptyTypeAnnotation" === n285 || "NullableTypeAnnotation" === n285 || "NumberLiteralTypeAnnotation" === n285 || "NumberTypeAnnotation" === n285 || "ObjectTypeAnnotation" === n285 || "StringLiteralTypeAnnotation" === n285 || "StringTypeAnnotation" === n285 || "SymbolTypeAnnotation" === n285 || "ThisTypeAnnotation" === n285 || "TupleTypeAnnotation" === n285 || "TypeofTypeAnnotation" === n285 || "UnionTypeAnnotation" === n285 || "VoidTypeAnnotation" === n285 || "IndexedAccessType" === n285 || "OptionalIndexedAccessType" === n285) && ("undefined" === typeof t285 || (0, i53.default)(e285, t285));
    }
    function isFlowBaseAnnotation(e286, t286) {
        if (!e286) return false;
        const n286 = e286.type;
        return ("AnyTypeAnnotation" === n286 || "BooleanTypeAnnotation" === n286 || "NullLiteralTypeAnnotation" === n286 || "MixedTypeAnnotation" === n286 || "EmptyTypeAnnotation" === n286 || "NumberTypeAnnotation" === n286 || "StringTypeAnnotation" === n286 || "SymbolTypeAnnotation" === n286 || "ThisTypeAnnotation" === n286 || "VoidTypeAnnotation" === n286) && ("undefined" === typeof t286 || (0, i53.default)(e286, t286));
    }
    function isFlowDeclaration(e287, t287) {
        if (!e287) return false;
        const n287 = e287.type;
        return ("DeclareClass" === n287 || "DeclareFunction" === n287 || "DeclareInterface" === n287 || "DeclareModule" === n287 || "DeclareModuleExports" === n287 || "DeclareTypeAlias" === n287 || "DeclareOpaqueType" === n287 || "DeclareVariable" === n287 || "DeclareExportDeclaration" === n287 || "DeclareExportAllDeclaration" === n287 || "InterfaceDeclaration" === n287 || "OpaqueType" === n287 || "TypeAlias" === n287) && ("undefined" === typeof t287 || (0, i53.default)(e287, t287));
    }
    function isFlowPredicate(e288, t288) {
        if (!e288) return false;
        const n288 = e288.type;
        return ("DeclaredPredicate" === n288 || "InferredPredicate" === n288) && ("undefined" === typeof t288 || (0, i53.default)(e288, t288));
    }
    function isEnumBody(e289, t289) {
        if (!e289) return false;
        const n289 = e289.type;
        return ("EnumBooleanBody" === n289 || "EnumNumberBody" === n289 || "EnumStringBody" === n289 || "EnumSymbolBody" === n289) && ("undefined" === typeof t289 || (0, i53.default)(e289, t289));
    }
    function isEnumMember(e290, t290) {
        if (!e290) return false;
        const n290 = e290.type;
        return ("EnumBooleanMember" === n290 || "EnumNumberMember" === n290 || "EnumStringMember" === n290 || "EnumDefaultedMember" === n290) && ("undefined" === typeof t290 || (0, i53.default)(e290, t290));
    }
    function isJSX(e291, t291) {
        if (!e291) return false;
        const n291 = e291.type;
        return ("JSXAttribute" === n291 || "JSXClosingElement" === n291 || "JSXElement" === n291 || "JSXEmptyExpression" === n291 || "JSXExpressionContainer" === n291 || "JSXSpreadChild" === n291 || "JSXIdentifier" === n291 || "JSXMemberExpression" === n291 || "JSXNamespacedName" === n291 || "JSXOpeningElement" === n291 || "JSXSpreadAttribute" === n291 || "JSXText" === n291 || "JSXFragment" === n291 || "JSXOpeningFragment" === n291 || "JSXClosingFragment" === n291) && ("undefined" === typeof t291 || (0, i53.default)(e291, t291));
    }
    function isMiscellaneous(e292, t292) {
        if (!e292) return false;
        const n292 = e292.type;
        return ("Noop" === n292 || "Placeholder" === n292 || "V8IntrinsicIdentifier" === n292) && ("undefined" === typeof t292 || (0, i53.default)(e292, t292));
    }
    function isTypeScript(e293, t293) {
        if (!e293) return false;
        const n293 = e293.type;
        return ("TSParameterProperty" === n293 || "TSDeclareFunction" === n293 || "TSDeclareMethod" === n293 || "TSQualifiedName" === n293 || "TSCallSignatureDeclaration" === n293 || "TSConstructSignatureDeclaration" === n293 || "TSPropertySignature" === n293 || "TSMethodSignature" === n293 || "TSIndexSignature" === n293 || "TSAnyKeyword" === n293 || "TSBooleanKeyword" === n293 || "TSBigIntKeyword" === n293 || "TSIntrinsicKeyword" === n293 || "TSNeverKeyword" === n293 || "TSNullKeyword" === n293 || "TSNumberKeyword" === n293 || "TSObjectKeyword" === n293 || "TSStringKeyword" === n293 || "TSSymbolKeyword" === n293 || "TSUndefinedKeyword" === n293 || "TSUnknownKeyword" === n293 || "TSVoidKeyword" === n293 || "TSThisType" === n293 || "TSFunctionType" === n293 || "TSConstructorType" === n293 || "TSTypeReference" === n293 || "TSTypePredicate" === n293 || "TSTypeQuery" === n293 || "TSTypeLiteral" === n293 || "TSArrayType" === n293 || "TSTupleType" === n293 || "TSOptionalType" === n293 || "TSRestType" === n293 || "TSNamedTupleMember" === n293 || "TSUnionType" === n293 || "TSIntersectionType" === n293 || "TSConditionalType" === n293 || "TSInferType" === n293 || "TSParenthesizedType" === n293 || "TSTypeOperator" === n293 || "TSIndexedAccessType" === n293 || "TSMappedType" === n293 || "TSLiteralType" === n293 || "TSExpressionWithTypeArguments" === n293 || "TSInterfaceDeclaration" === n293 || "TSInterfaceBody" === n293 || "TSTypeAliasDeclaration" === n293 || "TSAsExpression" === n293 || "TSTypeAssertion" === n293 || "TSEnumDeclaration" === n293 || "TSEnumMember" === n293 || "TSModuleDeclaration" === n293 || "TSModuleBlock" === n293 || "TSImportType" === n293 || "TSImportEqualsDeclaration" === n293 || "TSExternalModuleReference" === n293 || "TSNonNullExpression" === n293 || "TSExportAssignment" === n293 || "TSNamespaceExportDeclaration" === n293 || "TSTypeAnnotation" === n293 || "TSTypeParameterInstantiation" === n293 || "TSTypeParameterDeclaration" === n293 || "TSTypeParameter" === n293) && ("undefined" === typeof t293 || (0, i53.default)(e293, t293));
    }
    function isTSTypeElement(e294, t294) {
        if (!e294) return false;
        const n294 = e294.type;
        return ("TSCallSignatureDeclaration" === n294 || "TSConstructSignatureDeclaration" === n294 || "TSPropertySignature" === n294 || "TSMethodSignature" === n294 || "TSIndexSignature" === n294) && ("undefined" === typeof t294 || (0, i53.default)(e294, t294));
    }
    function isTSType(e295, t295) {
        if (!e295) return false;
        const n295 = e295.type;
        return ("TSAnyKeyword" === n295 || "TSBooleanKeyword" === n295 || "TSBigIntKeyword" === n295 || "TSIntrinsicKeyword" === n295 || "TSNeverKeyword" === n295 || "TSNullKeyword" === n295 || "TSNumberKeyword" === n295 || "TSObjectKeyword" === n295 || "TSStringKeyword" === n295 || "TSSymbolKeyword" === n295 || "TSUndefinedKeyword" === n295 || "TSUnknownKeyword" === n295 || "TSVoidKeyword" === n295 || "TSThisType" === n295 || "TSFunctionType" === n295 || "TSConstructorType" === n295 || "TSTypeReference" === n295 || "TSTypePredicate" === n295 || "TSTypeQuery" === n295 || "TSTypeLiteral" === n295 || "TSArrayType" === n295 || "TSTupleType" === n295 || "TSOptionalType" === n295 || "TSRestType" === n295 || "TSUnionType" === n295 || "TSIntersectionType" === n295 || "TSConditionalType" === n295 || "TSInferType" === n295 || "TSParenthesizedType" === n295 || "TSTypeOperator" === n295 || "TSIndexedAccessType" === n295 || "TSMappedType" === n295 || "TSLiteralType" === n295 || "TSExpressionWithTypeArguments" === n295 || "TSImportType" === n295) && ("undefined" === typeof t295 || (0, i53.default)(e295, t295));
    }
    function isTSBaseType(e296, t296) {
        if (!e296) return false;
        const n296 = e296.type;
        return ("TSAnyKeyword" === n296 || "TSBooleanKeyword" === n296 || "TSBigIntKeyword" === n296 || "TSIntrinsicKeyword" === n296 || "TSNeverKeyword" === n296 || "TSNullKeyword" === n296 || "TSNumberKeyword" === n296 || "TSObjectKeyword" === n296 || "TSStringKeyword" === n296 || "TSSymbolKeyword" === n296 || "TSUndefinedKeyword" === n296 || "TSUnknownKeyword" === n296 || "TSVoidKeyword" === n296 || "TSThisType" === n296 || "TSLiteralType" === n296) && ("undefined" === typeof t296 || (0, i53.default)(e296, t296));
    }
    function isNumberLiteral(e297, t297) {
        console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
        if (!e297) return false;
        const n297 = e297.type;
        return "NumberLiteral" === n297 && ("undefined" === typeof t297 || (0, i53.default)(e297, t297));
    }
    function isRegexLiteral(e298, t298) {
        console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
        if (!e298) return false;
        const n298 = e298.type;
        return "RegexLiteral" === n298 && ("undefined" === typeof t298 || (0, i53.default)(e298, t298));
    }
    function isRestProperty(e299, t299) {
        console.trace("The node type RestProperty has been renamed to RestElement");
        if (!e299) return false;
        const n299 = e299.type;
        return "RestProperty" === n299 && ("undefined" === typeof t299 || (0, i53.default)(e299, t299));
    }
    function isSpreadProperty(e300, t300) {
        console.trace("The node type SpreadProperty has been renamed to SpreadElement");
        if (!e300) return false;
        const n300 = e300.type;
        return "SpreadProperty" === n300 && ("undefined" === typeof t300 || (0, i53.default)(e300, t300));
    }
    return t2;
}
var t3 = {};
let e2 = null;
function FastObject(t2100) {
    if (null !== e2 && typeof e2.property) {
        const t1100 = e2;
        e2 = FastObject.prototype = null;
        return t1100;
    }
    e2 = FastObject.prototype = null == t2100 ? Object.create(null) : t2100;
    return new FastObject;
}
FastObject();
t3 = function toFastproperties(t310) {
    return FastObject(t310);
};
var r3 = t3;
const mod1 = {
    default: r3
};
var e3 = {};
Object.defineProperty(e3, "__esModule", {
    value: true
});
e3.isIdentifierChar = isIdentifierChar$1;
e3.isIdentifierName = isIdentifierName$1;
e3.isIdentifierStart = isIdentifierStart$1;
let r4 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
let t4 = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
const i2 = new RegExp("[" + r4 + "]");
const n3 = new RegExp("[" + r4 + t4 + "]");
r4 = t4 = null;
const s2 = [
    0,
    11,
    2,
    25,
    2,
    18,
    2,
    1,
    2,
    14,
    3,
    13,
    35,
    122,
    70,
    52,
    268,
    28,
    4,
    48,
    48,
    31,
    14,
    29,
    6,
    37,
    11,
    29,
    3,
    35,
    5,
    7,
    2,
    4,
    43,
    157,
    19,
    35,
    5,
    35,
    5,
    39,
    9,
    51,
    13,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    2,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    68,
    310,
    10,
    21,
    11,
    7,
    25,
    5,
    2,
    41,
    2,
    8,
    70,
    5,
    3,
    0,
    2,
    43,
    2,
    1,
    4,
    0,
    3,
    22,
    11,
    22,
    10,
    30,
    66,
    18,
    2,
    1,
    11,
    21,
    11,
    25,
    71,
    55,
    7,
    1,
    65,
    0,
    16,
    3,
    2,
    2,
    2,
    28,
    43,
    28,
    4,
    28,
    36,
    7,
    2,
    27,
    28,
    53,
    11,
    21,
    11,
    18,
    14,
    17,
    111,
    72,
    56,
    50,
    14,
    50,
    14,
    35,
    349,
    41,
    7,
    1,
    79,
    28,
    11,
    0,
    9,
    21,
    43,
    17,
    47,
    20,
    28,
    22,
    13,
    52,
    58,
    1,
    3,
    0,
    14,
    44,
    33,
    24,
    27,
    35,
    30,
    0,
    3,
    0,
    9,
    34,
    4,
    0,
    13,
    47,
    15,
    3,
    22,
    0,
    2,
    0,
    36,
    17,
    2,
    24,
    85,
    6,
    2,
    0,
    2,
    3,
    2,
    14,
    2,
    9,
    8,
    46,
    39,
    7,
    3,
    1,
    3,
    21,
    2,
    6,
    2,
    1,
    2,
    4,
    4,
    0,
    19,
    0,
    13,
    4,
    159,
    52,
    19,
    3,
    21,
    2,
    31,
    47,
    21,
    1,
    2,
    0,
    185,
    46,
    42,
    3,
    37,
    47,
    21,
    0,
    60,
    42,
    14,
    0,
    72,
    26,
    38,
    6,
    186,
    43,
    117,
    63,
    32,
    7,
    3,
    0,
    3,
    7,
    2,
    1,
    2,
    23,
    16,
    0,
    2,
    0,
    95,
    7,
    3,
    38,
    17,
    0,
    2,
    0,
    29,
    0,
    11,
    39,
    8,
    0,
    22,
    0,
    12,
    45,
    20,
    0,
    19,
    72,
    264,
    8,
    2,
    36,
    18,
    0,
    50,
    29,
    113,
    6,
    2,
    1,
    2,
    37,
    22,
    0,
    26,
    5,
    2,
    1,
    2,
    31,
    15,
    0,
    328,
    18,
    190,
    0,
    80,
    921,
    103,
    110,
    18,
    195,
    2637,
    96,
    16,
    1070,
    4050,
    582,
    8634,
    568,
    8,
    30,
    18,
    78,
    18,
    29,
    19,
    47,
    17,
    3,
    32,
    20,
    6,
    18,
    689,
    63,
    129,
    74,
    6,
    0,
    67,
    12,
    65,
    1,
    2,
    0,
    29,
    6135,
    9,
    1237,
    43,
    8,
    8936,
    3,
    2,
    6,
    2,
    1,
    2,
    290,
    46,
    2,
    18,
    3,
    9,
    395,
    2309,
    106,
    6,
    12,
    4,
    8,
    8,
    9,
    5991,
    84,
    2,
    70,
    2,
    1,
    3,
    0,
    3,
    1,
    3,
    3,
    2,
    11,
    2,
    0,
    2,
    6,
    2,
    64,
    2,
    3,
    3,
    7,
    2,
    6,
    2,
    27,
    2,
    3,
    2,
    4,
    2,
    0,
    4,
    6,
    2,
    339,
    3,
    24,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    7,
    1845,
    30,
    482,
    44,
    11,
    6,
    17,
    0,
    322,
    29,
    19,
    43,
    1269,
    6,
    2,
    3,
    2,
    1,
    2,
    14,
    2,
    196,
    60,
    67,
    8,
    0,
    1205,
    3,
    2,
    26,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    9,
    2,
    3,
    2,
    0,
    2,
    0,
    7,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    2,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    2,
    0,
    3,
    3,
    2,
    6,
    2,
    3,
    2,
    3,
    2,
    0,
    2,
    9,
    2,
    16,
    6,
    2,
    2,
    4,
    2,
    16,
    4421,
    42719,
    33,
    4152,
    8,
    221,
    3,
    5761,
    15,
    7472,
    3104,
    541,
    1507,
    4938
];
const d2 = [
    509,
    0,
    227,
    0,
    150,
    4,
    294,
    9,
    1368,
    2,
    2,
    1,
    6,
    3,
    41,
    2,
    5,
    0,
    166,
    1,
    574,
    3,
    9,
    9,
    370,
    1,
    154,
    10,
    50,
    3,
    123,
    2,
    54,
    14,
    32,
    10,
    3,
    1,
    11,
    3,
    46,
    10,
    8,
    0,
    46,
    9,
    7,
    2,
    37,
    13,
    2,
    9,
    6,
    1,
    45,
    0,
    13,
    2,
    49,
    13,
    9,
    3,
    2,
    11,
    83,
    11,
    7,
    0,
    161,
    11,
    6,
    9,
    7,
    3,
    56,
    1,
    2,
    6,
    3,
    1,
    3,
    2,
    10,
    0,
    11,
    1,
    3,
    6,
    4,
    4,
    193,
    17,
    10,
    9,
    5,
    0,
    82,
    19,
    13,
    9,
    214,
    6,
    3,
    8,
    28,
    1,
    83,
    16,
    16,
    9,
    82,
    12,
    9,
    9,
    84,
    14,
    5,
    9,
    243,
    14,
    166,
    9,
    71,
    5,
    2,
    1,
    3,
    3,
    2,
    0,
    2,
    1,
    13,
    9,
    120,
    6,
    3,
    6,
    4,
    0,
    29,
    9,
    41,
    6,
    2,
    3,
    9,
    0,
    10,
    10,
    47,
    15,
    406,
    7,
    2,
    7,
    17,
    9,
    57,
    21,
    2,
    13,
    123,
    5,
    4,
    0,
    2,
    1,
    2,
    6,
    2,
    0,
    9,
    9,
    49,
    4,
    2,
    1,
    2,
    4,
    9,
    9,
    330,
    3,
    19306,
    9,
    87,
    9,
    39,
    4,
    60,
    6,
    26,
    9,
    1014,
    0,
    2,
    54,
    8,
    3,
    82,
    0,
    12,
    1,
    19628,
    1,
    4706,
    45,
    3,
    22,
    543,
    4,
    4,
    5,
    9,
    7,
    3,
    6,
    31,
    3,
    149,
    2,
    1418,
    49,
    513,
    54,
    5,
    49,
    9,
    0,
    15,
    0,
    23,
    4,
    2,
    14,
    1361,
    6,
    2,
    16,
    3,
    6,
    2,
    1,
    2,
    4,
    262,
    6,
    10,
    9,
    357,
    0,
    62,
    13,
    1495,
    6,
    110,
    6,
    6,
    9,
    4759,
    9,
    787719,
    239
];
function isInAstralSet(e1, r112) {
    let t1101 = 65536;
    for(let i111 = 0, n1100 = r112.length; i111 < n1100; i111 += 2){
        t1101 += r112[i111];
        if (t1101 > e1) return false;
        t1101 += r112[i111 + 1];
        if (t1101 >= e1) return true;
    }
    return false;
}
function isIdentifierStart$1(e2) {
    return e2 < 65 ? 36 === e2 : e2 <= 90 || (e2 < 97 ? 95 === e2 : e2 <= 122 || (e2 <= 65535 ? e2 >= 170 && i2.test(String.fromCharCode(e2)) : isInAstralSet(e2, s2)));
}
function isIdentifierChar$1(e310) {
    return e310 < 48 ? 36 === e310 : e310 < 58 || !(e310 < 65) && (e310 <= 90 || (e310 < 97 ? 95 === e310 : e310 <= 122 || (e310 <= 65535 ? e310 >= 170 && n3.test(String.fromCharCode(e310)) : isInAstralSet(e310, s2) || isInAstralSet(e310, d2))));
}
function isIdentifierName$1(e4) {
    let r310 = true;
    for(let t2101 = 0; t2101 < e4.length; t2101++){
        let i210 = e4.charCodeAt(t2101);
        if (55296 === (64512 & i210) && t2101 + 1 < e4.length) {
            const r210 = e4.charCodeAt(++t2101);
            56320 === (64512 & r210) && (i210 = 65536 + ((1023 & i210) << 10) + (1023 & r210));
        }
        if (r310) {
            r310 = false;
            if (!isIdentifierStart$1(i210)) return false;
        } else if (!isIdentifierChar$1(i210)) return false;
    }
    return !r310;
}
var o2 = {};
Object.defineProperty(o2, "__esModule", {
    value: true
});
o2.isKeyword = isKeyword$1;
o2.isReservedWord = isReservedWord$1;
o2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord$1;
o2.isStrictBindReservedWord = isStrictBindReservedWord$1;
o2.isStrictReservedWord = isStrictReservedWord$1;
const u2 = {
    keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "default",
        "do",
        "else",
        "finally",
        "for",
        "function",
        "if",
        "return",
        "switch",
        "throw",
        "try",
        "var",
        "const",
        "while",
        "with",
        "new",
        "this",
        "super",
        "class",
        "extends",
        "export",
        "import",
        "null",
        "true",
        "false",
        "in",
        "instanceof",
        "typeof",
        "void",
        "delete"
    ],
    strict: [
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "yield"
    ],
    strictBind: [
        "eval",
        "arguments"
    ]
};
const c2 = new Set(u2.keyword);
const f2 = new Set(u2.strict);
const a1 = new Set(u2.strictBind);
function isReservedWord$1(e5, r410) {
    return r410 && "await" === e5 || "enum" === e5;
}
function isStrictReservedWord$1(e6, r5) {
    return isReservedWord$1(e6, r5) || f2.has(e6);
}
function isStrictBindOnlyReservedWord$1(e7) {
    return a1.has(e7);
}
function isStrictBindReservedWord$1(e8, r6) {
    return isStrictReservedWord$1(e8, r6) || isStrictBindOnlyReservedWord$1(e8);
}
function isKeyword$1(e9) {
    return c2.has(e9);
}
var l2 = {};
Object.defineProperty(l2, "__esModule", {
    value: true
});
Object.defineProperty(l2, "isIdentifierChar", {
    enumerable: true,
    get: function() {
        return v2.isIdentifierChar;
    }
});
Object.defineProperty(l2, "isIdentifierName", {
    enumerable: true,
    get: function() {
        return v2.isIdentifierName;
    }
});
Object.defineProperty(l2, "isIdentifierStart", {
    enumerable: true,
    get: function() {
        return v2.isIdentifierStart;
    }
});
Object.defineProperty(l2, "isKeyword", {
    enumerable: true,
    get: function() {
        return S2.isKeyword;
    }
});
Object.defineProperty(l2, "isReservedWord", {
    enumerable: true,
    get: function() {
        return S2.isReservedWord;
    }
});
Object.defineProperty(l2, "isStrictBindOnlyReservedWord", {
    enumerable: true,
    get: function() {
        return S2.isStrictBindOnlyReservedWord;
    }
});
Object.defineProperty(l2, "isStrictBindReservedWord", {
    enumerable: true,
    get: function() {
        return S2.isStrictBindReservedWord;
    }
});
Object.defineProperty(l2, "isStrictReservedWord", {
    enumerable: true,
    get: function() {
        return S2.isStrictReservedWord;
    }
});
var v2 = e3;
var S2 = o2;
const y2 = l2.__esModule, R2 = l2.isIdentifierChar, W2 = l2.isIdentifierName, I2 = l2.isIdentifierStart, h2 = l2.isKeyword, p2 = l2.isReservedWord, b2 = l2.isStrictBindOnlyReservedWord, m2 = l2.isStrictBindReservedWord, $2 = l2.isStrictReservedWord;
const mod2 = {
    __esModule: y2,
    default: l2,
    isIdentifierChar: R2,
    isIdentifierName: W2,
    isIdentifierStart: I2,
    isKeyword: h2,
    isReservedWord: p2,
    isStrictBindOnlyReservedWord: b2,
    isStrictBindReservedWord: m2,
    isStrictReservedWord: $2
};
var O2 = {}, R3 = false;
function dew2() {
    if (R3) return O2;
    R3 = true;
    Object.defineProperty(O2, "__esModule", {
        value: true
    });
    O2.UPDATE_OPERATORS = O2.UNARY_OPERATORS = O2.STRING_UNARY_OPERATORS = O2.STATEMENT_OR_BLOCK_KEYS = O2.NUMBER_UNARY_OPERATORS = O2.NUMBER_BINARY_OPERATORS = O2.NOT_LOCAL_BINDING = O2.LOGICAL_OPERATORS = O2.INHERIT_KEYS = O2.FOR_INIT_KEYS = O2.FLATTENABLE_KEYS = O2.EQUALITY_BINARY_OPERATORS = O2.COMPARISON_BINARY_OPERATORS = O2.COMMENT_KEYS = O2.BOOLEAN_UNARY_OPERATORS = O2.BOOLEAN_NUMBER_BINARY_OPERATORS = O2.BOOLEAN_BINARY_OPERATORS = O2.BLOCK_SCOPED_SYMBOL = O2.BINARY_OPERATORS = O2.ASSIGNMENT_OPERATORS = void 0;
    const A21 = [
        "consequent",
        "body",
        "alternate"
    ];
    O2.STATEMENT_OR_BLOCK_KEYS = A21;
    const _25 = [
        "body",
        "expressions"
    ];
    O2.FLATTENABLE_KEYS = _25;
    const E23 = [
        "left",
        "init"
    ];
    O2.FOR_INIT_KEYS = E23;
    const N20 = [
        "leadingComments",
        "trailingComments",
        "innerComments"
    ];
    O2.COMMENT_KEYS = N20;
    const o59 = [
        "||",
        "&&",
        "??"
    ];
    O2.LOGICAL_OPERATORS = o59;
    const T21 = [
        "++",
        "--"
    ];
    O2.UPDATE_OPERATORS = T21;
    const t301 = [
        ">",
        "<",
        ">=",
        "<="
    ];
    O2.BOOLEAN_NUMBER_BINARY_OPERATORS = t301;
    const S25 = [
        "==",
        "===",
        "!=",
        "!=="
    ];
    O2.EQUALITY_BINARY_OPERATORS = S25;
    const n301 = [
        ...S25,
        "in",
        "instanceof"
    ];
    O2.COMPARISON_BINARY_OPERATORS = n301;
    const e301 = [
        ...n301,
        ...t301
    ];
    O2.BOOLEAN_BINARY_OPERATORS = e301;
    const s52 = [
        "-",
        "/",
        "%",
        "*",
        "**",
        "&",
        "|",
        ">>",
        ">>>",
        "<<",
        "^"
    ];
    O2.NUMBER_BINARY_OPERATORS = s52;
    const B19 = [
        "+",
        ...s52,
        ...e301
    ];
    O2.BINARY_OPERATORS = B19;
    const I23 = [
        "=",
        "+=",
        ...s52.map((O110)=>O110 + "="
        ),
        ...o59.map((O23)=>O23 + "="
        )
    ];
    O2.ASSIGNMENT_OPERATORS = I23;
    const P22 = [
        "delete",
        "!"
    ];
    O2.BOOLEAN_UNARY_OPERATORS = P22;
    const Y15 = [
        "+",
        "-",
        "~"
    ];
    O2.NUMBER_UNARY_OPERATORS = Y15;
    const c48 = [
        "typeof"
    ];
    O2.STRING_UNARY_OPERATORS = c48;
    const L17 = [
        "void",
        "throw",
        ...P22,
        ...Y15,
        ...c48
    ];
    O2.UNARY_OPERATORS = L17;
    const r68 = {
        optional: [
            "typeAnnotation",
            "typeParameters",
            "returnType"
        ],
        force: [
            "start",
            "loc",
            "end"
        ]
    };
    O2.INHERIT_KEYS = r68;
    const a = Symbol.for("var used to be block scoped");
    O2.BLOCK_SCOPED_SYMBOL = a;
    const i54 = Symbol.for("should not be considered a local binding");
    O2.NOT_LOCAL_BINDING = i54;
    return O2;
}
var s3 = {}, o3 = false;
function dew$d() {
    if (o3) return s3;
    o3 = true;
    Object.defineProperty(s3, "__esModule", {
        value: true
    });
    s3.default = isType1;
    var e1 = dew3();
    function isType1(a110, t1102) {
        if (a110 === t1102) return true;
        if (e1.ALIAS_KEYS[t1102]) return false;
        const i112 = e1.FLIPPED_ALIAS_KEYS[t1102];
        if (i112) {
            if (i112[0] === a110) return true;
            for (const e2 of i112)if (a110 === e2) return true;
        }
        return false;
    }
    return s3;
}
var n4 = {}, l3 = false;
function dew$c() {
    if (l3) return n4;
    l3 = true;
    Object.defineProperty(n4, "__esModule", {
        value: true
    });
    n4.default = isPlaceholderType;
    var e311 = dew3();
    function isPlaceholderType(a2, t2102) {
        if (a2 === t2102) return true;
        const i211 = e311.PLACEHOLDERS_ALIAS[a2];
        if (i211) {
            for (const e4 of i211)if (t2102 === e4) return true;
        }
        return false;
    }
    return n4;
}
var p3 = {}, d3 = false;
function dew$b() {
    if (d3) return p3;
    d3 = true;
    Object.defineProperty(p3, "__esModule", {
        value: true
    });
    p3.default = is1;
    var e5 = dew();
    var t311 = dew$d();
    var i3 = dew$c();
    var r113 = dew3();
    function is1(a310, s111, o111) {
        if (!s111) return false;
        const n1101 = (0, t311.default)(s111.type, a310);
        return n1101 ? "undefined" === typeof o111 || (0, e5.default)(s111, o111) : !o111 && "Placeholder" === s111.type && a310 in r113.FLIPPED_ALIAS_KEYS && (0, i3.default)(s111.expectedNode, a310);
    }
    return p3;
}
var y3 = "default" in mod2 ? mod2.default : mod2;
var T2 = {}, u3 = false;
function dew$a() {
    if (u3) return T2;
    u3 = true;
    Object.defineProperty(T2, "__esModule", {
        value: true
    });
    T2.default = isValidIdentifier;
    var e6 = y3;
    function isValidIdentifier(a4, t410 = true) {
        return "string" === typeof a4 && (!t410 || !(0, e6.isKeyword)(a4) && !(0, e6.isStrictReservedWord)(a4, true)) && (0, e6.isIdentifierName)(a4);
    }
    return T2;
}
var c3 = {}, v3 = false;
function dew$9() {
    if (v3) return c3;
    v3 = true;
    Object.defineProperty(c3, "__esModule", {
        value: true
    });
    c3.default = validate;
    c3.validateChild = validateChild;
    c3.validateField = validateField;
    var e7 = dew3();
    function validate(a5, t5, i4) {
        if (!a5) return;
        const r211 = e7.NODE_FIELDS[a5.type];
        if (!r211) return;
        const s210 = r211[t5];
        validateField(a5, t5, i4, s210);
        validateChild(a5, t5, i4);
    }
    function validateField(e8, a6, t6, i5) {
        null != i5 && i5.validate && (i5.optional && null == t6 || i5.validate(e8, a6, t6));
    }
    function validateChild(a7, t7, i6) {
        if (null == i6) return;
        const r311 = e7.NODE_PARENT_VALIDATIONS[i6.type];
        r311 && r311(a7, t7, i6);
    }
    return c3;
}
var f3 = {}, m3 = false;
function dew$8() {
    if (m3) return f3;
    m3 = true;
    var e9 = se;
    Object.defineProperty(f3, "__esModule", {
        value: true
    });
    f3.VISITOR_KEYS = f3.NODE_PARENT_VALIDATIONS = f3.NODE_FIELDS = f3.FLIPPED_ALIAS_KEYS = f3.DEPRECATED_KEYS = f3.BUILDER_KEYS = f3.ALIAS_KEYS = void 0;
    f3.arrayOf = arrayOf;
    f3.arrayOfType = arrayOfType;
    f3.assertEach = assertEach;
    f3.assertNodeOrValueType = assertNodeOrValueType;
    f3.assertNodeType = assertNodeType;
    f3.assertOneOf = assertOneOf;
    f3.assertOptionalChainStart = assertOptionalChainStart;
    f3.assertShape = assertShape;
    f3.assertValueType = assertValueType;
    f3.chain = chain;
    f3.default = defineType;
    f3.defineAliasedType = defineAliasedType;
    f3.typeIs = typeIs;
    f3.validate = validate1;
    f3.validateArrayOfType = validateArrayOfType;
    f3.validateOptional = validateOptional;
    f3.validateOptionalType = validateOptionalType;
    f3.validateType = validateType;
    var a8 = dew$b();
    var i7 = dew$9();
    const r411 = {};
    f3.VISITOR_KEYS = r411;
    const s310 = {};
    f3.ALIAS_KEYS = s310;
    const o210 = {};
    f3.FLIPPED_ALIAS_KEYS = o210;
    const n2100 = {};
    f3.NODE_FIELDS = n2100;
    const l111 = {};
    f3.BUILDER_KEYS = l111;
    const p111 = {};
    f3.DEPRECATED_KEYS = p111;
    const d110 = {};
    f3.NODE_PARENT_VALIDATIONS = d110;
    function getType(e10) {
        return Array.isArray(e10) ? "array" : null === e10 ? "null" : typeof e10;
    }
    function validate1(e11) {
        return {
            validate: e11
        };
    }
    function typeIs(e12) {
        return "string" === typeof e12 ? assertNodeType(e12) : assertNodeType(...e12);
    }
    function validateType(e13) {
        return validate1(typeIs(e13));
    }
    function validateOptional(e14) {
        return {
            validate: e14,
            optional: true
        };
    }
    function validateOptionalType(e15) {
        return {
            validate: typeIs(e15),
            optional: true
        };
    }
    function arrayOf(e16) {
        return chain(assertValueType("array"), assertEach(e16));
    }
    function arrayOfType(e17) {
        return arrayOf(typeIs(e17));
    }
    function validateArrayOfType(e18) {
        return validate1(arrayOfType(e18));
    }
    function assertEach(a9) {
        function validator(t8, r5, s4) {
            if (Array.isArray(s4)) for(let o310 = 0; o310 < s4.length; o310++){
                const n310 = `${r5}[${o310}]`;
                const l210 = s4[o310];
                a9(t8, n310, l210);
                e9.env.BABEL_TYPES_8_BREAKING && (0, i7.validateChild)(t8, n310, l210);
            }
        }
        validator.each = a9;
        return validator;
    }
    function assertOneOf(...e19) {
        function validate(a, t9, i8) {
            if (e19.indexOf(i8) < 0) throw new TypeError(`Property ${t9} expected value to be one of ${JSON.stringify(e19)} but got ${JSON.stringify(i8)}`);
        }
        validate.oneOf = e19;
        return validate;
    }
    function assertNodeType(...e20) {
        function validate(t10, r6, s5) {
            for (const o4 of e20)if ((0, a8.default)(o4, s5)) {
                (0, i7.validateChild)(t10, r6, s5);
                return;
            }
            throw new TypeError(`Property ${r6} of ${t10.type} expected node to be of a type ${JSON.stringify(e20)} but instead got ${JSON.stringify(null == s5 ? void 0 : s5.type)}`);
        }
        validate.oneOfNodeTypes = e20;
        return validate;
    }
    function assertNodeOrValueType(...e21) {
        function validate(t11, r7, s6) {
            for (const o5 of e21)if (getType(s6) === o5 || (0, a8.default)(o5, s6)) {
                (0, i7.validateChild)(t11, r7, s6);
                return;
            }
            throw new TypeError(`Property ${r7} of ${t11.type} expected node to be of a type ${JSON.stringify(e21)} but instead got ${JSON.stringify(null == s6 ? void 0 : s6.type)}`);
        }
        validate.oneOfNodeOrValueTypes = e21;
        return validate;
    }
    function assertValueType(e22) {
        function validate(a, t12, i9) {
            const r8 = getType(i9) === e22;
            if (!r8) throw new TypeError(`Property ${t12} expected type of ${e22} but got ${getType(i9)}`);
        }
        validate.type = e22;
        return validate;
    }
    function assertShape(e23) {
        function validate(a10, t14, r9) {
            const s7 = [];
            for (const t13 of Object.keys(e23))try {
                (0, i7.validateField)(a10, t13, r9[t13], e23[t13]);
            } catch (e24) {
                if (e24 instanceof TypeError) {
                    s7.push(e24.message);
                    continue;
                }
                throw e24;
            }
            if (s7.length) throw new TypeError(`Property ${t14} of ${a10.type} expected to have the following:\n${s7.join("\n")}`);
        }
        validate.shapeOf = e23;
        return validate;
    }
    function assertOptionalChainStart() {
        function validate(e25) {
            var a11;
            let t15 = e25;
            while(e25){
                const { type: e26  } = t15;
                if ("OptionalCallExpression" !== e26) {
                    if ("OptionalMemberExpression" !== e26) break;
                    if (t15.optional) return;
                    t15 = t15.object;
                } else {
                    if (t15.optional) return;
                    t15 = t15.callee;
                }
            }
            throw new TypeError(`Non-optional ${e25.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (a11 = t15) ? void 0 : a11.type}`);
        }
        return validate;
    }
    function chain(...e27) {
        function validate(...a12) {
            for (const t16 of e27)t16(...a12);
        }
        validate.chainOf = e27;
        if (e27.length >= 2 && "type" in e27[0] && "array" === e27[0].type && !("each" in e27[1])) throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
        return validate;
    }
    const y110 = [
        "aliases",
        "builder",
        "deprecatedAlias",
        "fields",
        "inherits",
        "visitor",
        "validate"
    ];
    const T110 = [
        "default",
        "optional",
        "validate"
    ];
    function defineAliasedType(...e28) {
        return (a13, t17 = {})=>{
            let i10 = t17.aliases;
            if (!i10) {
                var r10, s8;
                t17.inherits && (i10 = null == (r10 = u111[t17.inherits].aliases) ? void 0 : r10.slice());
                null != (s8 = i10) ? s8 : i10 = [];
                t17.aliases = i10;
            }
            const o6 = e28.filter((e29)=>!i10.includes(e29)
            );
            i10.unshift(...o6);
            return defineType(a13, t17);
        };
    }
    function defineType(e33, a15 = {}) {
        const t19 = a15.inherits && u111[a15.inherits] || {};
        let i11 = a15.fields;
        if (!i11) {
            i11 = {};
            if (t19.fields) {
                const e31 = Object.getOwnPropertyNames(t19.fields);
                for (const a16 of e31){
                    const e32 = t19.fields[a16];
                    const r11 = e32.default;
                    if (Array.isArray(r11) ? r11.length > 0 : r11 && "object" === typeof r11) throw new Error("field defaults can only be primitives or empty arrays currently");
                    i11[a16] = {
                        default: Array.isArray(r11) ? [] : r11,
                        optional: e32.optional,
                        validate: e32.validate
                    };
                }
            }
        }
        const c111 = a15.visitor || t19.visitor || [];
        const v110 = a15.aliases || t19.aliases || [];
        const f110 = a15.builder || t19.builder || a15.visitor || [];
        for (const t18 of Object.keys(a15))if (-1 === y110.indexOf(t18)) throw new Error(`Unknown type option "${t18}" on ${e33}`);
        a15.deprecatedAlias && (p111[a15.deprecatedAlias] = e33);
        for (const e30 of c111.concat(f110))i11[e30] = i11[e30] || {};
        for (const a14 of Object.keys(i11)){
            const t20 = i11[a14];
            void 0 !== t20.default && -1 === f110.indexOf(a14) && (t20.optional = true);
            void 0 === t20.default ? t20.default = null : t20.validate || null == t20.default || (t20.validate = assertValueType(getType(t20.default)));
            for (const i12 of Object.keys(t20))if (-1 === T110.indexOf(i12)) throw new Error(`Unknown field key "${i12}" on ${e33}.${a14}`);
        }
        r411[e33] = a15.visitor = c111;
        l111[e33] = a15.builder = f110;
        n2100[e33] = a15.fields = i11;
        s310[e33] = a15.aliases = v110;
        v110.forEach((a17)=>{
            o210[a17] = o210[a17] || [];
            o210[a17].push(e33);
        });
        a15.validate && (d110[e33] = a15.validate);
        u111[e33] = a15;
    }
    const u111 = {};
    return f3;
}
var E2 = "default" in mod2 ? mod2.default : mod2;
var S3 = {}, b3 = false;
function dew$7() {
    if (b3) return S3;
    b3 = true;
    var e34 = se;
    Object.defineProperty(S3, "__esModule", {
        value: true
    });
    S3.patternLikeCommon = S3.functionTypeAnnotationCommon = S3.functionDeclarationCommon = S3.functionCommon = S3.classMethodOrPropertyCommon = S3.classMethodOrDeclareMethodCommon = void 0;
    var a18 = dew$b();
    var i13 = dew$a();
    var s9 = E2;
    var o7 = dew2();
    var n410 = dew$8();
    const l310 = (0, n410.defineAliasedType)("Standardized");
    l310("ArrayExpression", {
        fields: {
            elements: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
                default: e34.env.BABEL_TYPES_8_BREAKING ? void 0 : []
            }
        },
        visitor: [
            "elements"
        ],
        aliases: [
            "Expression"
        ]
    });
    l310("AssignmentExpression", {
        fields: {
            operator: {
                validate: function() {
                    if (!e34.env.BABEL_TYPES_8_BREAKING) return (0, n410.assertValueType)("string");
                    const t21 = (0, n410.assertOneOf)(...o7.ASSIGNMENT_OPERATORS);
                    const i14 = (0, n410.assertOneOf)("=");
                    return function(e35, r12, s10) {
                        const o8 = (0, a18.default)("Pattern", e35.left) ? i14 : t21;
                        o8(e35, r12, s10);
                    };
                }()
            },
            left: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern") : (0, n410.assertNodeType)("LVal")
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        },
        builder: [
            "operator",
            "left",
            "right"
        ],
        visitor: [
            "left",
            "right"
        ],
        aliases: [
            "Expression"
        ]
    });
    l310("BinaryExpression", {
        builder: [
            "operator",
            "left",
            "right"
        ],
        fields: {
            operator: {
                validate: (0, n410.assertOneOf)(...o7.BINARY_OPERATORS)
            },
            left: {
                validate: function() {
                    const e36 = (0, n410.assertNodeType)("Expression");
                    const a19 = (0, n410.assertNodeType)("Expression", "PrivateName");
                    const validator = function(t22, i15, r13) {
                        const s11 = "in" === t22.operator ? a19 : e36;
                        s11(t22, i15, r13);
                    };
                    validator.oneOfNodeTypes = [
                        "Expression",
                        "PrivateName"
                    ];
                    return validator;
                }()
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        },
        visitor: [
            "left",
            "right"
        ],
        aliases: [
            "Binary",
            "Expression"
        ]
    });
    l310("InterpreterDirective", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertValueType)("string")
            }
        }
    });
    l310("Directive", {
        visitor: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertNodeType)("DirectiveLiteral")
            }
        }
    });
    l310("DirectiveLiteral", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertValueType)("string")
            }
        }
    });
    l310("BlockStatement", {
        builder: [
            "body",
            "directives"
        ],
        visitor: [
            "directives",
            "body"
        ],
        fields: {
            directives: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Directive"))),
                default: []
            },
            body: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Statement")))
            }
        },
        aliases: [
            "Scopable",
            "BlockParent",
            "Block",
            "Statement"
        ]
    });
    l310("BreakStatement", {
        visitor: [
            "label"
        ],
        fields: {
            label: {
                validate: (0, n410.assertNodeType)("Identifier"),
                optional: true
            }
        },
        aliases: [
            "Statement",
            "Terminatorless",
            "CompletionStatement"
        ]
    });
    l310("CallExpression", {
        visitor: [
            "callee",
            "arguments",
            "typeParameters",
            "typeArguments"
        ],
        builder: [
            "callee",
            "arguments"
        ],
        aliases: [
            "Expression"
        ],
        fields: Object.assign({
            callee: {
                validate: (0, n410.assertNodeType)("Expression", "V8IntrinsicIdentifier")
            },
            arguments: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
            }
        }, e34.env.BABEL_TYPES_8_BREAKING ? {} : {
            optional: {
                validate: (0, n410.assertOneOf)(true, false),
                optional: true
            }
        }, {
            typeArguments: {
                validate: (0, n410.assertNodeType)("TypeParameterInstantiation"),
                optional: true
            },
            typeParameters: {
                validate: (0, n410.assertNodeType)("TSTypeParameterInstantiation"),
                optional: true
            }
        })
    });
    l310("CatchClause", {
        visitor: [
            "param",
            "body"
        ],
        fields: {
            param: {
                validate: (0, n410.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        },
        aliases: [
            "Scopable",
            "BlockParent"
        ]
    });
    l310("ConditionalExpression", {
        visitor: [
            "test",
            "consequent",
            "alternate"
        ],
        fields: {
            test: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            consequent: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            alternate: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        },
        aliases: [
            "Expression",
            "Conditional"
        ]
    });
    l310("ContinueStatement", {
        visitor: [
            "label"
        ],
        fields: {
            label: {
                validate: (0, n410.assertNodeType)("Identifier"),
                optional: true
            }
        },
        aliases: [
            "Statement",
            "Terminatorless",
            "CompletionStatement"
        ]
    });
    l310("DebuggerStatement", {
        aliases: [
            "Statement"
        ]
    });
    l310("DoWhileStatement", {
        visitor: [
            "test",
            "body"
        ],
        fields: {
            test: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        },
        aliases: [
            "Statement",
            "BlockParent",
            "Loop",
            "While",
            "Scopable"
        ]
    });
    l310("EmptyStatement", {
        aliases: [
            "Statement"
        ]
    });
    l310("ExpressionStatement", {
        visitor: [
            "expression"
        ],
        fields: {
            expression: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        },
        aliases: [
            "Statement",
            "ExpressionWrapper"
        ]
    });
    l310("File", {
        builder: [
            "program",
            "comments",
            "tokens"
        ],
        visitor: [
            "program"
        ],
        fields: {
            program: {
                validate: (0, n410.assertNodeType)("Program")
            },
            comments: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.assertEach)((0, n410.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(()=>{}, {
                    each: {
                        oneOfNodeTypes: [
                            "CommentBlock",
                            "CommentLine"
                        ]
                    }
                }),
                optional: true
            },
            tokens: {
                validate: (0, n410.assertEach)(Object.assign(()=>{}, {
                    type: "any"
                })),
                optional: true
            }
        }
    });
    l310("ForInStatement", {
        visitor: [
            "left",
            "right",
            "body"
        ],
        aliases: [
            "Scopable",
            "Statement",
            "For",
            "BlockParent",
            "Loop",
            "ForXStatement"
        ],
        fields: {
            left: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern") : (0, n410.assertNodeType)("VariableDeclaration", "LVal")
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    l310("ForStatement", {
        visitor: [
            "init",
            "test",
            "update",
            "body"
        ],
        aliases: [
            "Scopable",
            "Statement",
            "For",
            "BlockParent",
            "Loop"
        ],
        fields: {
            init: {
                validate: (0, n410.assertNodeType)("VariableDeclaration", "Expression"),
                optional: true
            },
            test: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            update: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    const p210 = {
        params: {
            validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Identifier", "Pattern", "RestElement")))
        },
        generator: {
            default: false
        },
        async: {
            default: false
        }
    };
    S3.functionCommon = p210;
    const d210 = {
        returnType: {
            validate: (0, n410.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
            optional: true
        },
        typeParameters: {
            validate: (0, n410.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
            optional: true
        }
    };
    S3.functionTypeAnnotationCommon = d210;
    const y28 = Object.assign({}, p210, {
        declare: {
            validate: (0, n410.assertValueType)("boolean"),
            optional: true
        },
        id: {
            validate: (0, n410.assertNodeType)("Identifier"),
            optional: true
        }
    });
    S3.functionDeclarationCommon = y28;
    l310("FunctionDeclaration", {
        builder: [
            "id",
            "params",
            "body",
            "generator",
            "async"
        ],
        visitor: [
            "id",
            "params",
            "body",
            "returnType",
            "typeParameters"
        ],
        fields: Object.assign({}, y28, d210, {
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        }),
        aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Statement",
            "Pureish",
            "Declaration"
        ],
        validate: function() {
            if (!e34.env.BABEL_TYPES_8_BREAKING) return ()=>{};
            const t23 = (0, n410.assertNodeType)("Identifier");
            return function(e37, i, r14) {
                (0, a18.default)("ExportDefaultDeclaration", e37) || t23(r14, "id", r14.id);
            };
        }()
    });
    l310("FunctionExpression", {
        inherits: "FunctionDeclaration",
        aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Expression",
            "Pureish"
        ],
        fields: Object.assign({}, p210, d210, {
            id: {
                validate: (0, n410.assertNodeType)("Identifier"),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        })
    });
    const T22 = {
        typeAnnotation: {
            validate: (0, n410.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
            optional: true
        },
        decorators: {
            validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator")))
        }
    };
    S3.patternLikeCommon = T22;
    l310("Identifier", {
        builder: [
            "name"
        ],
        visitor: [
            "typeAnnotation",
            "decorators"
        ],
        aliases: [
            "Expression",
            "PatternLike",
            "LVal",
            "TSEntityName"
        ],
        fields: Object.assign({}, T22, {
            name: {
                validate: (0, n410.chain)((0, n410.assertValueType)("string"), Object.assign(function(a, t, r15) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && !(0, i13.default)(r15, false)) throw new TypeError(`"${r15}" is not a valid identifier name`);
                }, {
                    type: "string"
                }))
            },
            optional: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            }
        }),
        validate (t24, i16, r16) {
            if (!e34.env.BABEL_TYPES_8_BREAKING) return;
            const o9 = /\.(\w+)$/.exec(i16);
            if (!o9) return;
            const [, n5] = o9;
            const l4 = {
                computed: false
            };
            if ("property" === n5) {
                if ((0, a18.default)("MemberExpression", t24, l4)) return;
                if ((0, a18.default)("OptionalMemberExpression", t24, l4)) return;
            } else if ("key" === n5) {
                if ((0, a18.default)("Property", t24, l4)) return;
                if ((0, a18.default)("Method", t24, l4)) return;
            } else if ("exported" === n5) {
                if ((0, a18.default)("ExportSpecifier", t24)) return;
            } else if ("imported" === n5) {
                if ((0, a18.default)("ImportSpecifier", t24, {
                    imported: r16
                })) return;
            } else if ("meta" === n5 && (0, a18.default)("MetaProperty", t24, {
                meta: r16
            })) return;
            if (((0, s9.isKeyword)(r16.name) || (0, s9.isReservedWord)(r16.name, false)) && "this" !== r16.name) throw new TypeError(`"${r16.name}" is not a valid identifier`);
        }
    });
    l310("IfStatement", {
        visitor: [
            "test",
            "consequent",
            "alternate"
        ],
        aliases: [
            "Statement",
            "Conditional"
        ],
        fields: {
            test: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            consequent: {
                validate: (0, n410.assertNodeType)("Statement")
            },
            alternate: {
                optional: true,
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    l310("LabeledStatement", {
        visitor: [
            "label",
            "body"
        ],
        aliases: [
            "Statement"
        ],
        fields: {
            label: {
                validate: (0, n410.assertNodeType)("Identifier")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    l310("StringLiteral", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertValueType)("string")
            }
        },
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    l310("NumericLiteral", {
        builder: [
            "value"
        ],
        deprecatedAlias: "NumberLiteral",
        fields: {
            value: {
                validate: (0, n410.assertValueType)("number")
            }
        },
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    l310("NullLiteral", {
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    l310("BooleanLiteral", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertValueType)("boolean")
            }
        },
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    l310("RegExpLiteral", {
        builder: [
            "pattern",
            "flags"
        ],
        deprecatedAlias: "RegexLiteral",
        aliases: [
            "Expression",
            "Pureish",
            "Literal"
        ],
        fields: {
            pattern: {
                validate: (0, n410.assertValueType)("string")
            },
            flags: {
                validate: (0, n410.chain)((0, n410.assertValueType)("string"), Object.assign(function(a, t, i17) {
                    if (!e34.env.BABEL_TYPES_8_BREAKING) return;
                    const r17 = /[^gimsuy]/.exec(i17);
                    if (r17) throw new TypeError(`"${r17[0]}" is not a valid RegExp flag`);
                }, {
                    type: "string"
                })),
                default: ""
            }
        }
    });
    l310("LogicalExpression", {
        builder: [
            "operator",
            "left",
            "right"
        ],
        visitor: [
            "left",
            "right"
        ],
        aliases: [
            "Binary",
            "Expression"
        ],
        fields: {
            operator: {
                validate: (0, n410.assertOneOf)(...o7.LOGICAL_OPERATORS)
            },
            left: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("MemberExpression", {
        builder: [
            "object",
            "property",
            "computed",
            ...e34.env.BABEL_TYPES_8_BREAKING ? [] : [
                "optional"
            ]
        ],
        visitor: [
            "object",
            "property"
        ],
        aliases: [
            "Expression",
            "LVal"
        ],
        fields: Object.assign({
            object: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            property: {
                validate: function() {
                    const e38 = (0, n410.assertNodeType)("Identifier", "PrivateName");
                    const a20 = (0, n410.assertNodeType)("Expression");
                    const validator = function(t25, i18, r18) {
                        const s12 = t25.computed ? a20 : e38;
                        s12(t25, i18, r18);
                    };
                    validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier",
                        "PrivateName"
                    ];
                    return validator;
                }()
            },
            computed: {
                default: false
            }
        }, e34.env.BABEL_TYPES_8_BREAKING ? {} : {
            optional: {
                validate: (0, n410.assertOneOf)(true, false),
                optional: true
            }
        })
    });
    l310("NewExpression", {
        inherits: "CallExpression"
    });
    l310("Program", {
        visitor: [
            "directives",
            "body"
        ],
        builder: [
            "body",
            "directives",
            "sourceType",
            "interpreter"
        ],
        fields: {
            sourceFile: {
                validate: (0, n410.assertValueType)("string")
            },
            sourceType: {
                validate: (0, n410.assertOneOf)("script", "module"),
                default: "script"
            },
            interpreter: {
                validate: (0, n410.assertNodeType)("InterpreterDirective"),
                default: null,
                optional: true
            },
            directives: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Directive"))),
                default: []
            },
            body: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Statement")))
            }
        },
        aliases: [
            "Scopable",
            "BlockParent",
            "Block"
        ]
    });
    l310("ObjectExpression", {
        visitor: [
            "properties"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            properties: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
            }
        }
    });
    l310("ObjectMethod", {
        builder: [
            "kind",
            "key",
            "params",
            "body",
            "computed",
            "generator",
            "async"
        ],
        fields: Object.assign({}, p210, d210, {
            kind: Object.assign({
                validate: (0, n410.assertOneOf)("method", "get", "set")
            }, e34.env.BABEL_TYPES_8_BREAKING ? {} : {
                default: "method"
            }),
            computed: {
                default: false
            },
            key: {
                validate: function() {
                    const e39 = (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
                    const a21 = (0, n410.assertNodeType)("Expression");
                    const validator = function(t26, i19, r19) {
                        const s13 = t26.computed ? a21 : e39;
                        s13(t26, i19, r19);
                    };
                    validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier",
                        "StringLiteral",
                        "NumericLiteral"
                    ];
                    return validator;
                }()
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        }),
        visitor: [
            "key",
            "params",
            "body",
            "decorators",
            "returnType",
            "typeParameters"
        ],
        aliases: [
            "UserWhitespacable",
            "Function",
            "Scopable",
            "BlockParent",
            "FunctionParent",
            "Method",
            "ObjectMember"
        ]
    });
    l310("ObjectProperty", {
        builder: [
            "key",
            "value",
            "computed",
            "shorthand",
            ...e34.env.BABEL_TYPES_8_BREAKING ? [] : [
                "decorators"
            ]
        ],
        fields: {
            computed: {
                default: false
            },
            key: {
                validate: function() {
                    const e40 = (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
                    const a22 = (0, n410.assertNodeType)("Expression");
                    const validator = function(t27, i20, r20) {
                        const s14 = t27.computed ? a22 : e40;
                        s14(t27, i20, r20);
                    };
                    validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier",
                        "StringLiteral",
                        "NumericLiteral"
                    ];
                    return validator;
                }()
            },
            value: {
                validate: (0, n410.assertNodeType)("Expression", "PatternLike")
            },
            shorthand: {
                validate: (0, n410.chain)((0, n410.assertValueType)("boolean"), Object.assign(function(a23, t, i21) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && i21 && a23.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
                }, {
                    type: "boolean"
                }), function(t28, i, r21) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && r21 && !(0, a18.default)("Identifier", t28.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
                }),
                default: false
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            }
        },
        visitor: [
            "key",
            "value",
            "decorators"
        ],
        aliases: [
            "UserWhitespacable",
            "Property",
            "ObjectMember"
        ],
        validate: function() {
            const t29 = (0, n410.assertNodeType)("Identifier", "Pattern");
            const i22 = (0, n410.assertNodeType)("Expression");
            return function(r22, s, o10) {
                if (!e34.env.BABEL_TYPES_8_BREAKING) return;
                const n6 = (0, a18.default)("ObjectPattern", r22) ? t29 : i22;
                n6(o10, "value", o10.value);
            };
        }()
    });
    l310("RestElement", {
        visitor: [
            "argument",
            "typeAnnotation"
        ],
        builder: [
            "argument"
        ],
        aliases: [
            "LVal",
            "PatternLike"
        ],
        deprecatedAlias: "RestProperty",
        fields: Object.assign({}, T22, {
            argument: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression") : (0, n410.assertNodeType)("LVal")
            },
            optional: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            }
        }),
        validate (a24, t30) {
            if (!e34.env.BABEL_TYPES_8_BREAKING) return;
            const i23 = /(\w+)\[(\d+)\]/.exec(t30);
            if (!i23) throw new Error("Internal Babel error: malformed key.");
            const [, r23, s15] = i23;
            if (a24[r23].length > s15 + 1) throw new TypeError(`RestElement must be last element of ${r23}`);
        }
    });
    l310("ReturnStatement", {
        visitor: [
            "argument"
        ],
        aliases: [
            "Statement",
            "Terminatorless",
            "CompletionStatement"
        ],
        fields: {
            argument: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            }
        }
    });
    l310("SequenceExpression", {
        visitor: [
            "expressions"
        ],
        fields: {
            expressions: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Expression")))
            }
        },
        aliases: [
            "Expression"
        ]
    });
    l310("ParenthesizedExpression", {
        visitor: [
            "expression"
        ],
        aliases: [
            "Expression",
            "ExpressionWrapper"
        ],
        fields: {
            expression: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("SwitchCase", {
        visitor: [
            "test",
            "consequent"
        ],
        fields: {
            test: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            consequent: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Statement")))
            }
        }
    });
    l310("SwitchStatement", {
        visitor: [
            "discriminant",
            "cases"
        ],
        aliases: [
            "Statement",
            "BlockParent",
            "Scopable"
        ],
        fields: {
            discriminant: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            cases: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("SwitchCase")))
            }
        }
    });
    l310("ThisExpression", {
        aliases: [
            "Expression"
        ]
    });
    l310("ThrowStatement", {
        visitor: [
            "argument"
        ],
        aliases: [
            "Statement",
            "Terminatorless",
            "CompletionStatement"
        ],
        fields: {
            argument: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("TryStatement", {
        visitor: [
            "block",
            "handler",
            "finalizer"
        ],
        aliases: [
            "Statement"
        ],
        fields: {
            block: {
                validate: (0, n410.chain)((0, n410.assertNodeType)("BlockStatement"), Object.assign(function(a25) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && !a25.handler && !a25.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
                }, {
                    oneOfNodeTypes: [
                        "BlockStatement"
                    ]
                }))
            },
            handler: {
                optional: true,
                validate: (0, n410.assertNodeType)("CatchClause")
            },
            finalizer: {
                optional: true,
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        }
    });
    l310("UnaryExpression", {
        builder: [
            "operator",
            "argument",
            "prefix"
        ],
        fields: {
            prefix: {
                default: true
            },
            argument: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            operator: {
                validate: (0, n410.assertOneOf)(...o7.UNARY_OPERATORS)
            }
        },
        visitor: [
            "argument"
        ],
        aliases: [
            "UnaryLike",
            "Expression"
        ]
    });
    l310("UpdateExpression", {
        builder: [
            "operator",
            "argument",
            "prefix"
        ],
        fields: {
            prefix: {
                default: false
            },
            argument: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.assertNodeType)("Identifier", "MemberExpression") : (0, n410.assertNodeType)("Expression")
            },
            operator: {
                validate: (0, n410.assertOneOf)(...o7.UPDATE_OPERATORS)
            }
        },
        visitor: [
            "argument"
        ],
        aliases: [
            "Expression"
        ]
    });
    l310("VariableDeclaration", {
        builder: [
            "kind",
            "declarations"
        ],
        visitor: [
            "declarations"
        ],
        aliases: [
            "Statement",
            "Declaration"
        ],
        fields: {
            declare: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            kind: {
                validate: (0, n410.assertOneOf)("var", "let", "const")
            },
            declarations: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("VariableDeclarator")))
            }
        },
        validate (t31, i, r24) {
            if (e34.env.BABEL_TYPES_8_BREAKING && (0, a18.default)("ForXStatement", t31, {
                left: r24
            }) && 1 !== r24.declarations.length) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${t31.type}`);
        }
    });
    l310("VariableDeclarator", {
        visitor: [
            "id",
            "init"
        ],
        fields: {
            id: {
                validate: function() {
                    if (!e34.env.BABEL_TYPES_8_BREAKING) return (0, n410.assertNodeType)("LVal");
                    const a26 = (0, n410.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
                    const t32 = (0, n410.assertNodeType)("Identifier");
                    return function(e41, i24, r25) {
                        const s16 = e41.init ? a26 : t32;
                        s16(e41, i24, r25);
                    };
                }()
            },
            definite: {
                optional: true,
                validate: (0, n410.assertValueType)("boolean")
            },
            init: {
                optional: true,
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("WhileStatement", {
        visitor: [
            "test",
            "body"
        ],
        aliases: [
            "Statement",
            "BlockParent",
            "Loop",
            "While",
            "Scopable"
        ],
        fields: {
            test: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    l310("WithStatement", {
        visitor: [
            "object",
            "body"
        ],
        aliases: [
            "Statement"
        ],
        fields: {
            object: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            }
        }
    });
    l310("AssignmentPattern", {
        visitor: [
            "left",
            "right",
            "decorators"
        ],
        builder: [
            "left",
            "right"
        ],
        aliases: [
            "Pattern",
            "PatternLike",
            "LVal"
        ],
        fields: Object.assign({}, T22, {
            left: {
                validate: (0, n410.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression")
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            }
        })
    });
    l310("ArrayPattern", {
        visitor: [
            "elements",
            "typeAnnotation"
        ],
        builder: [
            "elements"
        ],
        aliases: [
            "Pattern",
            "PatternLike",
            "LVal"
        ],
        fields: Object.assign({}, T22, {
            elements: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeOrValueType)("null", "PatternLike")))
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            optional: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            }
        })
    });
    l310("ArrowFunctionExpression", {
        builder: [
            "params",
            "body",
            "async"
        ],
        visitor: [
            "params",
            "body",
            "returnType",
            "typeParameters"
        ],
        aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Expression",
            "Pureish"
        ],
        fields: Object.assign({}, p210, d210, {
            expression: {
                validate: (0, n410.assertValueType)("boolean")
            },
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement", "Expression")
            }
        })
    });
    l310("ClassBody", {
        visitor: [
            "body"
        ],
        fields: {
            body: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")))
            }
        }
    });
    l310("ClassExpression", {
        builder: [
            "id",
            "superClass",
            "body",
            "decorators"
        ],
        visitor: [
            "id",
            "body",
            "superClass",
            "mixins",
            "typeParameters",
            "superTypeParameters",
            "implements",
            "decorators"
        ],
        aliases: [
            "Scopable",
            "Class",
            "Expression"
        ],
        fields: {
            id: {
                validate: (0, n410.assertNodeType)("Identifier"),
                optional: true
            },
            typeParameters: {
                validate: (0, n410.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("ClassBody")
            },
            superClass: {
                optional: true,
                validate: (0, n410.assertNodeType)("Expression")
            },
            superTypeParameters: {
                validate: (0, n410.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
                optional: true
            },
            implements: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
                optional: true
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            mixins: {
                validate: (0, n410.assertNodeType)("InterfaceExtends"),
                optional: true
            }
        }
    });
    l310("ClassDeclaration", {
        inherits: "ClassExpression",
        aliases: [
            "Scopable",
            "Class",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: {
                validate: (0, n410.assertNodeType)("Identifier")
            },
            typeParameters: {
                validate: (0, n410.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
                optional: true
            },
            body: {
                validate: (0, n410.assertNodeType)("ClassBody")
            },
            superClass: {
                optional: true,
                validate: (0, n410.assertNodeType)("Expression")
            },
            superTypeParameters: {
                validate: (0, n410.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
                optional: true
            },
            implements: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
                optional: true
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            mixins: {
                validate: (0, n410.assertNodeType)("InterfaceExtends"),
                optional: true
            },
            declare: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            abstract: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            }
        },
        validate: function() {
            const t33 = (0, n410.assertNodeType)("Identifier");
            return function(i25, r, s17) {
                e34.env.BABEL_TYPES_8_BREAKING && ((0, a18.default)("ExportDefaultDeclaration", i25) || t33(s17, "id", s17.id));
            };
        }()
    });
    l310("ExportAllDeclaration", {
        visitor: [
            "source"
        ],
        aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
        ],
        fields: {
            source: {
                validate: (0, n410.assertNodeType)("StringLiteral")
            },
            exportKind: (0, n410.validateOptional)((0, n410.assertOneOf)("type", "value")),
            assertions: {
                optional: true,
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ImportAttribute")))
            }
        }
    });
    l310("ExportDefaultDeclaration", {
        visitor: [
            "declaration"
        ],
        aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
        ],
        fields: {
            declaration: {
                validate: (0, n410.assertNodeType)("FunctionDeclaration", "TSDeclareFunction", "ClassDeclaration", "Expression")
            },
            exportKind: (0, n410.validateOptional)((0, n410.assertOneOf)("value"))
        }
    });
    l310("ExportNamedDeclaration", {
        visitor: [
            "declaration",
            "specifiers",
            "source"
        ],
        aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
        ],
        fields: {
            declaration: {
                optional: true,
                validate: (0, n410.chain)((0, n410.assertNodeType)("Declaration"), Object.assign(function(a27, t, i26) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && i26 && a27.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
                }, {
                    oneOfNodeTypes: [
                        "Declaration"
                    ]
                }), function(a28, t, i27) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && i27 && a28.source) throw new TypeError("Cannot export a declaration from a source");
                })
            },
            assertions: {
                optional: true,
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ImportAttribute")))
            },
            specifiers: {
                default: [],
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)(function() {
                    const a29 = (0, n410.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
                    const t34 = (0, n410.assertNodeType)("ExportSpecifier");
                    return e34.env.BABEL_TYPES_8_BREAKING ? function(e42, i28, r26) {
                        const s18 = e42.source ? a29 : t34;
                        s18(e42, i28, r26);
                    } : a29;
                }()))
            },
            source: {
                validate: (0, n410.assertNodeType)("StringLiteral"),
                optional: true
            },
            exportKind: (0, n410.validateOptional)((0, n410.assertOneOf)("type", "value"))
        }
    });
    l310("ExportSpecifier", {
        visitor: [
            "local",
            "exported"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            local: {
                validate: (0, n410.assertNodeType)("Identifier")
            },
            exported: {
                validate: (0, n410.assertNodeType)("Identifier", "StringLiteral")
            },
            exportKind: {
                validate: (0, n410.assertOneOf)("type", "value"),
                optional: true
            }
        }
    });
    l310("ForOfStatement", {
        visitor: [
            "left",
            "right",
            "body"
        ],
        builder: [
            "left",
            "right",
            "body",
            "await"
        ],
        aliases: [
            "Scopable",
            "Statement",
            "For",
            "BlockParent",
            "Loop",
            "ForXStatement"
        ],
        fields: {
            left: {
                validate: function() {
                    if (!e34.env.BABEL_TYPES_8_BREAKING) return (0, n410.assertNodeType)("VariableDeclaration", "LVal");
                    const t35 = (0, n410.assertNodeType)("VariableDeclaration");
                    const i29 = (0, n410.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern");
                    return function(e43, r27, s19) {
                        (0, a18.default)("VariableDeclaration", s19) ? t35(e43, r27, s19) : i29(e43, r27, s19);
                    };
                }()
            },
            right: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            body: {
                validate: (0, n410.assertNodeType)("Statement")
            },
            await: {
                default: false
            }
        }
    });
    l310("ImportDeclaration", {
        visitor: [
            "specifiers",
            "source"
        ],
        aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration"
        ],
        fields: {
            assertions: {
                optional: true,
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ImportAttribute")))
            },
            specifiers: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
            },
            source: {
                validate: (0, n410.assertNodeType)("StringLiteral")
            },
            importKind: {
                validate: (0, n410.assertOneOf)("type", "typeof", "value"),
                optional: true
            }
        }
    });
    l310("ImportDefaultSpecifier", {
        visitor: [
            "local"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            local: {
                validate: (0, n410.assertNodeType)("Identifier")
            }
        }
    });
    l310("ImportNamespaceSpecifier", {
        visitor: [
            "local"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            local: {
                validate: (0, n410.assertNodeType)("Identifier")
            }
        }
    });
    l310("ImportSpecifier", {
        visitor: [
            "local",
            "imported"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            local: {
                validate: (0, n410.assertNodeType)("Identifier")
            },
            imported: {
                validate: (0, n410.assertNodeType)("Identifier", "StringLiteral")
            },
            importKind: {
                validate: (0, n410.assertOneOf)("type", "typeof", "value"),
                optional: true
            }
        }
    });
    l310("MetaProperty", {
        visitor: [
            "meta",
            "property"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            meta: {
                validate: (0, n410.chain)((0, n410.assertNodeType)("Identifier"), Object.assign(function(t36, i, r28) {
                    if (!e34.env.BABEL_TYPES_8_BREAKING) return;
                    let s20;
                    switch(r28.name){
                        case "function":
                            s20 = "sent";
                            break;
                        case "new":
                            s20 = "target";
                            break;
                        case "import":
                            s20 = "meta";
                            break;
                    }
                    if (!(0, a18.default)("Identifier", t36.property, {
                        name: s20
                    })) throw new TypeError("Unrecognised MetaProperty");
                }, {
                    oneOfNodeTypes: [
                        "Identifier"
                    ]
                }))
            },
            property: {
                validate: (0, n410.assertNodeType)("Identifier")
            }
        }
    });
    const u210 = {
        abstract: {
            validate: (0, n410.assertValueType)("boolean"),
            optional: true
        },
        accessibility: {
            validate: (0, n410.assertOneOf)("public", "private", "protected"),
            optional: true
        },
        static: {
            default: false
        },
        override: {
            default: false
        },
        computed: {
            default: false
        },
        optional: {
            validate: (0, n410.assertValueType)("boolean"),
            optional: true
        },
        key: {
            validate: (0, n410.chain)(function() {
                const e44 = (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral");
                const a30 = (0, n410.assertNodeType)("Expression");
                return function(t37, i30, r29) {
                    const s21 = t37.computed ? a30 : e44;
                    s21(t37, i30, r29);
                };
            }(), (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "Expression"))
        }
    };
    S3.classMethodOrPropertyCommon = u210;
    const c210 = Object.assign({}, p210, u210, {
        params: {
            validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
        },
        kind: {
            validate: (0, n410.assertOneOf)("get", "set", "method", "constructor"),
            default: "method"
        },
        access: {
            validate: (0, n410.chain)((0, n410.assertValueType)("string"), (0, n410.assertOneOf)("public", "private", "protected")),
            optional: true
        },
        decorators: {
            validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
            optional: true
        }
    });
    S3.classMethodOrDeclareMethodCommon = c210;
    l310("ClassMethod", {
        aliases: [
            "Function",
            "Scopable",
            "BlockParent",
            "FunctionParent",
            "Method"
        ],
        builder: [
            "kind",
            "key",
            "params",
            "body",
            "computed",
            "static",
            "generator",
            "async"
        ],
        visitor: [
            "key",
            "params",
            "body",
            "decorators",
            "returnType",
            "typeParameters"
        ],
        fields: Object.assign({}, c210, d210, {
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        })
    });
    l310("ObjectPattern", {
        visitor: [
            "properties",
            "typeAnnotation",
            "decorators"
        ],
        builder: [
            "properties"
        ],
        aliases: [
            "Pattern",
            "PatternLike",
            "LVal"
        ],
        fields: Object.assign({}, T22, {
            properties: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("RestElement", "ObjectProperty")))
            }
        })
    });
    l310("SpreadElement", {
        visitor: [
            "argument"
        ],
        aliases: [
            "UnaryLike"
        ],
        deprecatedAlias: "SpreadProperty",
        fields: {
            argument: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("Super", {
        aliases: [
            "Expression"
        ]
    });
    l310("TaggedTemplateExpression", {
        visitor: [
            "tag",
            "quasi",
            "typeParameters"
        ],
        builder: [
            "tag",
            "quasi"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            tag: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            quasi: {
                validate: (0, n410.assertNodeType)("TemplateLiteral")
            },
            typeParameters: {
                validate: (0, n410.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
                optional: true
            }
        }
    });
    l310("TemplateElement", {
        builder: [
            "value",
            "tail"
        ],
        fields: {
            value: {
                validate: (0, n410.assertShape)({
                    raw: {
                        validate: (0, n410.assertValueType)("string")
                    },
                    cooked: {
                        validate: (0, n410.assertValueType)("string"),
                        optional: true
                    }
                })
            },
            tail: {
                default: false
            }
        }
    });
    l310("TemplateLiteral", {
        visitor: [
            "quasis",
            "expressions"
        ],
        aliases: [
            "Expression",
            "Literal"
        ],
        fields: {
            quasis: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("TemplateElement")))
            },
            expressions: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Expression", "TSType")), function(e45, a, t38) {
                    if (e45.quasis.length !== t38.length + 1) throw new TypeError(`Number of ${e45.type} quasis should be exactly one more than the number of expressions.\nExpected ${t38.length + 1} quasis but got ${e45.quasis.length}`);
                })
            }
        }
    });
    l310("YieldExpression", {
        builder: [
            "argument",
            "delegate"
        ],
        visitor: [
            "argument"
        ],
        aliases: [
            "Expression",
            "Terminatorless"
        ],
        fields: {
            delegate: {
                validate: (0, n410.chain)((0, n410.assertValueType)("boolean"), Object.assign(function(a31, t, i31) {
                    if (e34.env.BABEL_TYPES_8_BREAKING && i31 && !a31.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
                }, {
                    type: "boolean"
                })),
                default: false
            },
            argument: {
                optional: true,
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("AwaitExpression", {
        builder: [
            "argument"
        ],
        visitor: [
            "argument"
        ],
        aliases: [
            "Expression",
            "Terminatorless"
        ],
        fields: {
            argument: {
                validate: (0, n410.assertNodeType)("Expression")
            }
        }
    });
    l310("Import", {
        aliases: [
            "Expression"
        ]
    });
    l310("BigIntLiteral", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, n410.assertValueType)("string")
            }
        },
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    l310("ExportNamespaceSpecifier", {
        visitor: [
            "exported"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            exported: {
                validate: (0, n410.assertNodeType)("Identifier")
            }
        }
    });
    l310("OptionalMemberExpression", {
        builder: [
            "object",
            "property",
            "computed",
            "optional"
        ],
        visitor: [
            "object",
            "property"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            object: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            property: {
                validate: function() {
                    const e46 = (0, n410.assertNodeType)("Identifier");
                    const a32 = (0, n410.assertNodeType)("Expression");
                    const validator = function(t39, i32, r30) {
                        const s22 = t39.computed ? a32 : e46;
                        s22(t39, i32, r30);
                    };
                    validator.oneOfNodeTypes = [
                        "Expression",
                        "Identifier"
                    ];
                    return validator;
                }()
            },
            computed: {
                default: false
            },
            optional: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.chain)((0, n410.assertValueType)("boolean"), (0, n410.assertOptionalChainStart)()) : (0, n410.assertValueType)("boolean")
            }
        }
    });
    l310("OptionalCallExpression", {
        visitor: [
            "callee",
            "arguments",
            "typeParameters",
            "typeArguments"
        ],
        builder: [
            "callee",
            "arguments",
            "optional"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            callee: {
                validate: (0, n410.assertNodeType)("Expression")
            },
            arguments: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
            },
            optional: {
                validate: e34.env.BABEL_TYPES_8_BREAKING ? (0, n410.chain)((0, n410.assertValueType)("boolean"), (0, n410.assertOptionalChainStart)()) : (0, n410.assertValueType)("boolean")
            },
            typeArguments: {
                validate: (0, n410.assertNodeType)("TypeParameterInstantiation"),
                optional: true
            },
            typeParameters: {
                validate: (0, n410.assertNodeType)("TSTypeParameterInstantiation"),
                optional: true
            }
        }
    });
    l310("ClassProperty", {
        visitor: [
            "key",
            "value",
            "typeAnnotation",
            "decorators"
        ],
        builder: [
            "key",
            "value",
            "typeAnnotation",
            "decorators",
            "computed",
            "static"
        ],
        aliases: [
            "Property"
        ],
        fields: Object.assign({}, u210, {
            value: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            definite: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            typeAnnotation: {
                validate: (0, n410.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
                optional: true
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            readonly: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            declare: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            variance: {
                validate: (0, n410.assertNodeType)("Variance"),
                optional: true
            }
        })
    });
    l310("ClassAccessorProperty", {
        visitor: [
            "key",
            "value",
            "typeAnnotation",
            "decorators"
        ],
        builder: [
            "key",
            "value",
            "typeAnnotation",
            "decorators",
            "computed",
            "static"
        ],
        aliases: [
            "Property",
            "Accessor"
        ],
        fields: Object.assign({}, u210, {
            key: {
                validate: (0, n410.chain)(function() {
                    const e47 = (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "PrivateName");
                    const a33 = (0, n410.assertNodeType)("Expression");
                    return function(t40, i33, r31) {
                        const s23 = t40.computed ? a33 : e47;
                        s23(t40, i33, r31);
                    };
                }(), (0, n410.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "Expression", "PrivateName"))
            },
            value: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            definite: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            typeAnnotation: {
                validate: (0, n410.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
                optional: true
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            readonly: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            declare: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            variance: {
                validate: (0, n410.assertNodeType)("Variance"),
                optional: true
            }
        })
    });
    l310("ClassPrivateProperty", {
        visitor: [
            "key",
            "value",
            "decorators",
            "typeAnnotation"
        ],
        builder: [
            "key",
            "value",
            "decorators",
            "static"
        ],
        aliases: [
            "Property",
            "Private"
        ],
        fields: {
            key: {
                validate: (0, n410.assertNodeType)("PrivateName")
            },
            value: {
                validate: (0, n410.assertNodeType)("Expression"),
                optional: true
            },
            typeAnnotation: {
                validate: (0, n410.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
                optional: true
            },
            decorators: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Decorator"))),
                optional: true
            },
            readonly: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            definite: {
                validate: (0, n410.assertValueType)("boolean"),
                optional: true
            },
            variance: {
                validate: (0, n410.assertNodeType)("Variance"),
                optional: true
            }
        }
    });
    l310("ClassPrivateMethod", {
        builder: [
            "kind",
            "key",
            "params",
            "body",
            "static"
        ],
        visitor: [
            "key",
            "params",
            "body",
            "decorators",
            "returnType",
            "typeParameters"
        ],
        aliases: [
            "Function",
            "Scopable",
            "BlockParent",
            "FunctionParent",
            "Method",
            "Private"
        ],
        fields: Object.assign({}, c210, d210, {
            key: {
                validate: (0, n410.assertNodeType)("PrivateName")
            },
            body: {
                validate: (0, n410.assertNodeType)("BlockStatement")
            }
        })
    });
    l310("PrivateName", {
        visitor: [
            "id"
        ],
        aliases: [
            "Private"
        ],
        fields: {
            id: {
                validate: (0, n410.assertNodeType)("Identifier")
            }
        }
    });
    l310("StaticBlock", {
        visitor: [
            "body"
        ],
        fields: {
            body: {
                validate: (0, n410.chain)((0, n410.assertValueType)("array"), (0, n410.assertEach)((0, n410.assertNodeType)("Statement")))
            }
        },
        aliases: [
            "Scopable",
            "BlockParent",
            "FunctionParent"
        ]
    });
    return S3;
}
var N2 = {}, O3 = false;
function dew$6() {
    if (O3) return N2;
    O3 = true;
    var e48 = dew$8();
    const a34 = (0, e48.defineAliasedType)("Flow");
    const defineInterfaceishType = (t41, i34 = "TypeParameterDeclaration")=>{
        a34(t41, {
            builder: [
                "id",
                "typeParameters",
                "extends",
                "body"
            ],
            visitor: [
                "id",
                "typeParameters",
                "extends",
                "mixins",
                "implements",
                "body"
            ],
            aliases: [
                "FlowDeclaration",
                "Statement",
                "Declaration"
            ],
            fields: {
                id: (0, e48.validateType)("Identifier"),
                typeParameters: (0, e48.validateOptionalType)(i34),
                extends: (0, e48.validateOptional)((0, e48.arrayOfType)("InterfaceExtends")),
                mixins: (0, e48.validateOptional)((0, e48.arrayOfType)("InterfaceExtends")),
                implements: (0, e48.validateOptional)((0, e48.arrayOfType)("ClassImplements")),
                body: (0, e48.validateType)("ObjectTypeAnnotation")
            }
        });
    };
    a34("AnyTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("ArrayTypeAnnotation", {
        visitor: [
            "elementType"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            elementType: (0, e48.validateType)("FlowType")
        }
    });
    a34("BooleanTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("BooleanLiteralTypeAnnotation", {
        builder: [
            "value"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            value: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("NullLiteralTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("ClassImplements", {
        visitor: [
            "id",
            "typeParameters"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterInstantiation")
        }
    });
    defineInterfaceishType("DeclareClass");
    a34("DeclareFunction", {
        visitor: [
            "id"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            predicate: (0, e48.validateOptionalType)("DeclaredPredicate")
        }
    });
    defineInterfaceishType("DeclareInterface");
    a34("DeclareModule", {
        builder: [
            "id",
            "body",
            "kind"
        ],
        visitor: [
            "id",
            "body"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)([
                "Identifier",
                "StringLiteral"
            ]),
            body: (0, e48.validateType)("BlockStatement"),
            kind: (0, e48.validateOptional)((0, e48.assertOneOf)("CommonJS", "ES"))
        }
    });
    a34("DeclareModuleExports", {
        visitor: [
            "typeAnnotation"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            typeAnnotation: (0, e48.validateType)("TypeAnnotation")
        }
    });
    a34("DeclareTypeAlias", {
        visitor: [
            "id",
            "typeParameters",
            "right"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterDeclaration"),
            right: (0, e48.validateType)("FlowType")
        }
    });
    a34("DeclareOpaqueType", {
        visitor: [
            "id",
            "typeParameters",
            "supertype"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterDeclaration"),
            supertype: (0, e48.validateOptionalType)("FlowType"),
            impltype: (0, e48.validateOptionalType)("FlowType")
        }
    });
    a34("DeclareVariable", {
        visitor: [
            "id"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier")
        }
    });
    a34("DeclareExportDeclaration", {
        visitor: [
            "declaration",
            "specifiers",
            "source"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            declaration: (0, e48.validateOptionalType)("Flow"),
            specifiers: (0, e48.validateOptional)((0, e48.arrayOfType)([
                "ExportSpecifier",
                "ExportNamespaceSpecifier"
            ])),
            source: (0, e48.validateOptionalType)("StringLiteral"),
            default: (0, e48.validateOptional)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("DeclareExportAllDeclaration", {
        visitor: [
            "source"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            source: (0, e48.validateType)("StringLiteral"),
            exportKind: (0, e48.validateOptional)((0, e48.assertOneOf)("type", "value"))
        }
    });
    a34("DeclaredPredicate", {
        visitor: [
            "value"
        ],
        aliases: [
            "FlowPredicate"
        ],
        fields: {
            value: (0, e48.validateType)("Flow")
        }
    });
    a34("ExistsTypeAnnotation", {
        aliases: [
            "FlowType"
        ]
    });
    a34("FunctionTypeAnnotation", {
        visitor: [
            "typeParameters",
            "params",
            "rest",
            "returnType"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            typeParameters: (0, e48.validateOptionalType)("TypeParameterDeclaration"),
            params: (0, e48.validate)((0, e48.arrayOfType)("FunctionTypeParam")),
            rest: (0, e48.validateOptionalType)("FunctionTypeParam"),
            this: (0, e48.validateOptionalType)("FunctionTypeParam"),
            returnType: (0, e48.validateType)("FlowType")
        }
    });
    a34("FunctionTypeParam", {
        visitor: [
            "name",
            "typeAnnotation"
        ],
        fields: {
            name: (0, e48.validateOptionalType)("Identifier"),
            typeAnnotation: (0, e48.validateType)("FlowType"),
            optional: (0, e48.validateOptional)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("GenericTypeAnnotation", {
        visitor: [
            "id",
            "typeParameters"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            id: (0, e48.validateType)([
                "Identifier",
                "QualifiedTypeIdentifier"
            ]),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterInstantiation")
        }
    });
    a34("InferredPredicate", {
        aliases: [
            "FlowPredicate"
        ]
    });
    a34("InterfaceExtends", {
        visitor: [
            "id",
            "typeParameters"
        ],
        fields: {
            id: (0, e48.validateType)([
                "Identifier",
                "QualifiedTypeIdentifier"
            ]),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterInstantiation")
        }
    });
    defineInterfaceishType("InterfaceDeclaration");
    a34("InterfaceTypeAnnotation", {
        visitor: [
            "extends",
            "body"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            extends: (0, e48.validateOptional)((0, e48.arrayOfType)("InterfaceExtends")),
            body: (0, e48.validateType)("ObjectTypeAnnotation")
        }
    });
    a34("IntersectionTypeAnnotation", {
        visitor: [
            "types"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            types: (0, e48.validate)((0, e48.arrayOfType)("FlowType"))
        }
    });
    a34("MixedTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("EmptyTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("NullableTypeAnnotation", {
        visitor: [
            "typeAnnotation"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            typeAnnotation: (0, e48.validateType)("FlowType")
        }
    });
    a34("NumberLiteralTypeAnnotation", {
        builder: [
            "value"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            value: (0, e48.validate)((0, e48.assertValueType)("number"))
        }
    });
    a34("NumberTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("ObjectTypeAnnotation", {
        visitor: [
            "properties",
            "indexers",
            "callProperties",
            "internalSlots"
        ],
        aliases: [
            "FlowType"
        ],
        builder: [
            "properties",
            "indexers",
            "callProperties",
            "internalSlots",
            "exact"
        ],
        fields: {
            properties: (0, e48.validate)((0, e48.arrayOfType)([
                "ObjectTypeProperty",
                "ObjectTypeSpreadProperty"
            ])),
            indexers: {
                validate: (0, e48.arrayOfType)("ObjectTypeIndexer"),
                optional: true,
                default: void 0
            },
            callProperties: {
                validate: (0, e48.arrayOfType)("ObjectTypeCallProperty"),
                optional: true,
                default: void 0
            },
            internalSlots: {
                validate: (0, e48.arrayOfType)("ObjectTypeInternalSlot"),
                optional: true,
                default: void 0
            },
            exact: {
                validate: (0, e48.assertValueType)("boolean"),
                default: false
            },
            inexact: (0, e48.validateOptional)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("ObjectTypeInternalSlot", {
        visitor: [
            "id",
            "value",
            "optional",
            "static",
            "method"
        ],
        aliases: [
            "UserWhitespacable"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            value: (0, e48.validateType)("FlowType"),
            optional: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            static: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            method: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("ObjectTypeCallProperty", {
        visitor: [
            "value"
        ],
        aliases: [
            "UserWhitespacable"
        ],
        fields: {
            value: (0, e48.validateType)("FlowType"),
            static: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("ObjectTypeIndexer", {
        visitor: [
            "id",
            "key",
            "value",
            "variance"
        ],
        aliases: [
            "UserWhitespacable"
        ],
        fields: {
            id: (0, e48.validateOptionalType)("Identifier"),
            key: (0, e48.validateType)("FlowType"),
            value: (0, e48.validateType)("FlowType"),
            static: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            variance: (0, e48.validateOptionalType)("Variance")
        }
    });
    a34("ObjectTypeProperty", {
        visitor: [
            "key",
            "value",
            "variance"
        ],
        aliases: [
            "UserWhitespacable"
        ],
        fields: {
            key: (0, e48.validateType)([
                "Identifier",
                "StringLiteral"
            ]),
            value: (0, e48.validateType)("FlowType"),
            kind: (0, e48.validate)((0, e48.assertOneOf)("init", "get", "set")),
            static: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            proto: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            optional: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            variance: (0, e48.validateOptionalType)("Variance"),
            method: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("ObjectTypeSpreadProperty", {
        visitor: [
            "argument"
        ],
        aliases: [
            "UserWhitespacable"
        ],
        fields: {
            argument: (0, e48.validateType)("FlowType")
        }
    });
    a34("OpaqueType", {
        visitor: [
            "id",
            "typeParameters",
            "supertype",
            "impltype"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterDeclaration"),
            supertype: (0, e48.validateOptionalType)("FlowType"),
            impltype: (0, e48.validateType)("FlowType")
        }
    });
    a34("QualifiedTypeIdentifier", {
        visitor: [
            "id",
            "qualification"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            qualification: (0, e48.validateType)([
                "Identifier",
                "QualifiedTypeIdentifier"
            ])
        }
    });
    a34("StringLiteralTypeAnnotation", {
        builder: [
            "value"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            value: (0, e48.validate)((0, e48.assertValueType)("string"))
        }
    });
    a34("StringTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("SymbolTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("ThisTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("TupleTypeAnnotation", {
        visitor: [
            "types"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            types: (0, e48.validate)((0, e48.arrayOfType)("FlowType"))
        }
    });
    a34("TypeofTypeAnnotation", {
        visitor: [
            "argument"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            argument: (0, e48.validateType)("FlowType")
        }
    });
    a34("TypeAlias", {
        visitor: [
            "id",
            "typeParameters",
            "right"
        ],
        aliases: [
            "FlowDeclaration",
            "Statement",
            "Declaration"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            typeParameters: (0, e48.validateOptionalType)("TypeParameterDeclaration"),
            right: (0, e48.validateType)("FlowType")
        }
    });
    a34("TypeAnnotation", {
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            typeAnnotation: (0, e48.validateType)("FlowType")
        }
    });
    a34("TypeCastExpression", {
        visitor: [
            "expression",
            "typeAnnotation"
        ],
        aliases: [
            "ExpressionWrapper",
            "Expression"
        ],
        fields: {
            expression: (0, e48.validateType)("Expression"),
            typeAnnotation: (0, e48.validateType)("TypeAnnotation")
        }
    });
    a34("TypeParameter", {
        visitor: [
            "bound",
            "default",
            "variance"
        ],
        fields: {
            name: (0, e48.validate)((0, e48.assertValueType)("string")),
            bound: (0, e48.validateOptionalType)("TypeAnnotation"),
            default: (0, e48.validateOptionalType)("FlowType"),
            variance: (0, e48.validateOptionalType)("Variance")
        }
    });
    a34("TypeParameterDeclaration", {
        visitor: [
            "params"
        ],
        fields: {
            params: (0, e48.validate)((0, e48.arrayOfType)("TypeParameter"))
        }
    });
    a34("TypeParameterInstantiation", {
        visitor: [
            "params"
        ],
        fields: {
            params: (0, e48.validate)((0, e48.arrayOfType)("FlowType"))
        }
    });
    a34("UnionTypeAnnotation", {
        visitor: [
            "types"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            types: (0, e48.validate)((0, e48.arrayOfType)("FlowType"))
        }
    });
    a34("Variance", {
        builder: [
            "kind"
        ],
        fields: {
            kind: (0, e48.validate)((0, e48.assertOneOf)("minus", "plus"))
        }
    });
    a34("VoidTypeAnnotation", {
        aliases: [
            "FlowType",
            "FlowBaseAnnotation"
        ]
    });
    a34("EnumDeclaration", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "body"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            body: (0, e48.validateType)([
                "EnumBooleanBody",
                "EnumNumberBody",
                "EnumStringBody",
                "EnumSymbolBody"
            ])
        }
    });
    a34("EnumBooleanBody", {
        aliases: [
            "EnumBody"
        ],
        visitor: [
            "members"
        ],
        fields: {
            explicitType: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            members: (0, e48.validateArrayOfType)("EnumBooleanMember"),
            hasUnknownMembers: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("EnumNumberBody", {
        aliases: [
            "EnumBody"
        ],
        visitor: [
            "members"
        ],
        fields: {
            explicitType: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            members: (0, e48.validateArrayOfType)("EnumNumberMember"),
            hasUnknownMembers: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("EnumStringBody", {
        aliases: [
            "EnumBody"
        ],
        visitor: [
            "members"
        ],
        fields: {
            explicitType: (0, e48.validate)((0, e48.assertValueType)("boolean")),
            members: (0, e48.validateArrayOfType)([
                "EnumStringMember",
                "EnumDefaultedMember"
            ]),
            hasUnknownMembers: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("EnumSymbolBody", {
        aliases: [
            "EnumBody"
        ],
        visitor: [
            "members"
        ],
        fields: {
            members: (0, e48.validateArrayOfType)("EnumDefaultedMember"),
            hasUnknownMembers: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    a34("EnumBooleanMember", {
        aliases: [
            "EnumMember"
        ],
        visitor: [
            "id"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            init: (0, e48.validateType)("BooleanLiteral")
        }
    });
    a34("EnumNumberMember", {
        aliases: [
            "EnumMember"
        ],
        visitor: [
            "id",
            "init"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            init: (0, e48.validateType)("NumericLiteral")
        }
    });
    a34("EnumStringMember", {
        aliases: [
            "EnumMember"
        ],
        visitor: [
            "id",
            "init"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier"),
            init: (0, e48.validateType)("StringLiteral")
        }
    });
    a34("EnumDefaultedMember", {
        aliases: [
            "EnumMember"
        ],
        visitor: [
            "id"
        ],
        fields: {
            id: (0, e48.validateType)("Identifier")
        }
    });
    a34("IndexedAccessType", {
        visitor: [
            "objectType",
            "indexType"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            objectType: (0, e48.validateType)("FlowType"),
            indexType: (0, e48.validateType)("FlowType")
        }
    });
    a34("OptionalIndexedAccessType", {
        visitor: [
            "objectType",
            "indexType"
        ],
        aliases: [
            "FlowType"
        ],
        fields: {
            objectType: (0, e48.validateType)("FlowType"),
            indexType: (0, e48.validateType)("FlowType"),
            optional: (0, e48.validate)((0, e48.assertValueType)("boolean"))
        }
    });
    return N2;
}
var P2 = {}, A2 = false;
function dew$5() {
    if (A2) return P2;
    A2 = true;
    var e49 = dew$8();
    const a35 = (0, e49.defineAliasedType)("JSX");
    a35("JSXAttribute", {
        visitor: [
            "name",
            "value"
        ],
        aliases: [
            "Immutable"
        ],
        fields: {
            name: {
                validate: (0, e49.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
            },
            value: {
                optional: true,
                validate: (0, e49.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
            }
        }
    });
    a35("JSXClosingElement", {
        visitor: [
            "name"
        ],
        aliases: [
            "Immutable"
        ],
        fields: {
            name: {
                validate: (0, e49.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
            }
        }
    });
    a35("JSXElement", {
        builder: [
            "openingElement",
            "closingElement",
            "children",
            "selfClosing"
        ],
        visitor: [
            "openingElement",
            "children",
            "closingElement"
        ],
        aliases: [
            "Immutable",
            "Expression"
        ],
        fields: Object.assign({
            openingElement: {
                validate: (0, e49.assertNodeType)("JSXOpeningElement")
            },
            closingElement: {
                optional: true,
                validate: (0, e49.assertNodeType)("JSXClosingElement")
            },
            children: {
                validate: (0, e49.chain)((0, e49.assertValueType)("array"), (0, e49.assertEach)((0, e49.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
            }
        }, {
            selfClosing: {
                validate: (0, e49.assertValueType)("boolean"),
                optional: true
            }
        })
    });
    a35("JSXEmptyExpression", {});
    a35("JSXExpressionContainer", {
        visitor: [
            "expression"
        ],
        aliases: [
            "Immutable"
        ],
        fields: {
            expression: {
                validate: (0, e49.assertNodeType)("Expression", "JSXEmptyExpression")
            }
        }
    });
    a35("JSXSpreadChild", {
        visitor: [
            "expression"
        ],
        aliases: [
            "Immutable"
        ],
        fields: {
            expression: {
                validate: (0, e49.assertNodeType)("Expression")
            }
        }
    });
    a35("JSXIdentifier", {
        builder: [
            "name"
        ],
        fields: {
            name: {
                validate: (0, e49.assertValueType)("string")
            }
        }
    });
    a35("JSXMemberExpression", {
        visitor: [
            "object",
            "property"
        ],
        fields: {
            object: {
                validate: (0, e49.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
            },
            property: {
                validate: (0, e49.assertNodeType)("JSXIdentifier")
            }
        }
    });
    a35("JSXNamespacedName", {
        visitor: [
            "namespace",
            "name"
        ],
        fields: {
            namespace: {
                validate: (0, e49.assertNodeType)("JSXIdentifier")
            },
            name: {
                validate: (0, e49.assertNodeType)("JSXIdentifier")
            }
        }
    });
    a35("JSXOpeningElement", {
        builder: [
            "name",
            "attributes",
            "selfClosing"
        ],
        visitor: [
            "name",
            "attributes"
        ],
        aliases: [
            "Immutable"
        ],
        fields: {
            name: {
                validate: (0, e49.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
            },
            selfClosing: {
                default: false
            },
            attributes: {
                validate: (0, e49.chain)((0, e49.assertValueType)("array"), (0, e49.assertEach)((0, e49.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
            },
            typeParameters: {
                validate: (0, e49.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
                optional: true
            }
        }
    });
    a35("JSXSpreadAttribute", {
        visitor: [
            "argument"
        ],
        fields: {
            argument: {
                validate: (0, e49.assertNodeType)("Expression")
            }
        }
    });
    a35("JSXText", {
        aliases: [
            "Immutable"
        ],
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, e49.assertValueType)("string")
            }
        }
    });
    a35("JSXFragment", {
        builder: [
            "openingFragment",
            "closingFragment",
            "children"
        ],
        visitor: [
            "openingFragment",
            "children",
            "closingFragment"
        ],
        aliases: [
            "Immutable",
            "Expression"
        ],
        fields: {
            openingFragment: {
                validate: (0, e49.assertNodeType)("JSXOpeningFragment")
            },
            closingFragment: {
                validate: (0, e49.assertNodeType)("JSXClosingFragment")
            },
            children: {
                validate: (0, e49.chain)((0, e49.assertValueType)("array"), (0, e49.assertEach)((0, e49.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
            }
        }
    });
    a35("JSXOpeningFragment", {
        aliases: [
            "Immutable"
        ]
    });
    a35("JSXClosingFragment", {
        aliases: [
            "Immutable"
        ]
    });
    return P2;
}
var x2 = {}, h3 = false;
function dew$4() {
    if (h3) return x2;
    h3 = true;
    Object.defineProperty(x2, "__esModule", {
        value: true
    });
    x2.PLACEHOLDERS_FLIPPED_ALIAS = x2.PLACEHOLDERS_ALIAS = x2.PLACEHOLDERS = void 0;
    var e50 = dew$8();
    const a36 = [
        "Identifier",
        "StringLiteral",
        "Expression",
        "Statement",
        "Declaration",
        "BlockStatement",
        "ClassBody",
        "Pattern"
    ];
    x2.PLACEHOLDERS = a36;
    const t42 = {
        Declaration: [
            "Statement"
        ],
        Pattern: [
            "PatternLike",
            "LVal"
        ]
    };
    x2.PLACEHOLDERS_ALIAS = t42;
    for (const i36 of a36){
        const a37 = e50.ALIAS_KEYS[i36];
        null != a37 && a37.length && (t42[i36] = a37);
    }
    const i35 = {};
    x2.PLACEHOLDERS_FLIPPED_ALIAS = i35;
    Object.keys(t42).forEach((e51)=>{
        t42[e51].forEach((a38)=>{
            Object.hasOwnProperty.call(i35, a38) || (i35[a38] = []);
            i35[a38].push(e51);
        });
    });
    return x2;
}
var I3 = {}, g2 = false;
function dew$3() {
    if (g2) return I3;
    g2 = true;
    var e52 = dew$8();
    var a39 = dew$4();
    const t43 = (0, e52.defineAliasedType)("Miscellaneous");
    t43("Noop", {
        visitor: []
    });
    t43("Placeholder", {
        visitor: [],
        builder: [
            "expectedNode",
            "name"
        ],
        fields: {
            name: {
                validate: (0, e52.assertNodeType)("Identifier")
            },
            expectedNode: {
                validate: (0, e52.assertOneOf)(...a39.PLACEHOLDERS)
            }
        }
    });
    t43("V8IntrinsicIdentifier", {
        builder: [
            "name"
        ],
        fields: {
            name: {
                validate: (0, e52.assertValueType)("string")
            }
        }
    });
    return I3;
}
var L2 = {}, D2 = false;
function dew$2() {
    if (D2) return L2;
    D2 = true;
    var e53 = se;
    var a40 = dew$8();
    (0, a40.default)("ArgumentPlaceholder", {});
    (0, a40.default)("BindExpression", {
        visitor: [
            "object",
            "callee"
        ],
        aliases: [
            "Expression"
        ],
        fields: e53.env.BABEL_TYPES_8_BREAKING ? {
            object: {
                validate: (0, a40.assertNodeType)("Expression")
            },
            callee: {
                validate: (0, a40.assertNodeType)("Expression")
            }
        } : {
            object: {
                validate: Object.assign(()=>{}, {
                    oneOfNodeTypes: [
                        "Expression"
                    ]
                })
            },
            callee: {
                validate: Object.assign(()=>{}, {
                    oneOfNodeTypes: [
                        "Expression"
                    ]
                })
            }
        }
    });
    (0, a40.default)("ImportAttribute", {
        visitor: [
            "key",
            "value"
        ],
        fields: {
            key: {
                validate: (0, a40.assertNodeType)("Identifier", "StringLiteral")
            },
            value: {
                validate: (0, a40.assertNodeType)("StringLiteral")
            }
        }
    });
    (0, a40.default)("Decorator", {
        visitor: [
            "expression"
        ],
        fields: {
            expression: {
                validate: (0, a40.assertNodeType)("Expression")
            }
        }
    });
    (0, a40.default)("DoExpression", {
        visitor: [
            "body"
        ],
        builder: [
            "body",
            "async"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            body: {
                validate: (0, a40.assertNodeType)("BlockStatement")
            },
            async: {
                validate: (0, a40.assertValueType)("boolean"),
                default: false
            }
        }
    });
    (0, a40.default)("ExportDefaultSpecifier", {
        visitor: [
            "exported"
        ],
        aliases: [
            "ModuleSpecifier"
        ],
        fields: {
            exported: {
                validate: (0, a40.assertNodeType)("Identifier")
            }
        }
    });
    (0, a40.default)("RecordExpression", {
        visitor: [
            "properties"
        ],
        aliases: [
            "Expression"
        ],
        fields: {
            properties: {
                validate: (0, a40.chain)((0, a40.assertValueType)("array"), (0, a40.assertEach)((0, a40.assertNodeType)("ObjectProperty", "SpreadElement")))
            }
        }
    });
    (0, a40.default)("TupleExpression", {
        fields: {
            elements: {
                validate: (0, a40.chain)((0, a40.assertValueType)("array"), (0, a40.assertEach)((0, a40.assertNodeType)("Expression", "SpreadElement"))),
                default: []
            }
        },
        visitor: [
            "elements"
        ],
        aliases: [
            "Expression"
        ]
    });
    (0, a40.default)("DecimalLiteral", {
        builder: [
            "value"
        ],
        fields: {
            value: {
                validate: (0, a40.assertValueType)("string")
            }
        },
        aliases: [
            "Expression",
            "Pureish",
            "Literal",
            "Immutable"
        ]
    });
    (0, a40.default)("ModuleExpression", {
        visitor: [
            "body"
        ],
        fields: {
            body: {
                validate: (0, a40.assertNodeType)("Program")
            }
        },
        aliases: [
            "Expression"
        ]
    });
    (0, a40.default)("TopicReference", {
        aliases: [
            "Expression"
        ]
    });
    (0, a40.default)("PipelineTopicExpression", {
        builder: [
            "expression"
        ],
        visitor: [
            "expression"
        ],
        fields: {
            expression: {
                validate: (0, a40.assertNodeType)("Expression")
            }
        },
        aliases: [
            "Expression"
        ]
    });
    (0, a40.default)("PipelineBareFunction", {
        builder: [
            "callee"
        ],
        visitor: [
            "callee"
        ],
        fields: {
            callee: {
                validate: (0, a40.assertNodeType)("Expression")
            }
        },
        aliases: [
            "Expression"
        ]
    });
    (0, a40.default)("PipelinePrimaryTopicReference", {
        aliases: [
            "Expression"
        ]
    });
    return L2;
}
var w2 = {}, B2 = false;
function dew$1() {
    if (B2) return w2;
    B2 = true;
    var e55 = dew$8();
    var a41 = dew$7();
    var t44 = dew$b();
    const i37 = (0, e55.defineAliasedType)("TypeScript");
    const r32 = (0, e55.assertValueType)("boolean");
    const s24 = {
        returnType: {
            validate: (0, e55.assertNodeType)("TSTypeAnnotation", "Noop"),
            optional: true
        },
        typeParameters: {
            validate: (0, e55.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
            optional: true
        }
    };
    i37("TSParameterProperty", {
        aliases: [
            "LVal"
        ],
        visitor: [
            "parameter"
        ],
        fields: {
            accessibility: {
                validate: (0, e55.assertOneOf)("public", "private", "protected"),
                optional: true
            },
            readonly: {
                validate: (0, e55.assertValueType)("boolean"),
                optional: true
            },
            parameter: {
                validate: (0, e55.assertNodeType)("Identifier", "AssignmentPattern")
            },
            override: {
                validate: (0, e55.assertValueType)("boolean"),
                optional: true
            },
            decorators: {
                validate: (0, e55.chain)((0, e55.assertValueType)("array"), (0, e55.assertEach)((0, e55.assertNodeType)("Decorator"))),
                optional: true
            }
        }
    });
    i37("TSDeclareFunction", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "typeParameters",
            "params",
            "returnType"
        ],
        fields: Object.assign({}, a41.functionDeclarationCommon, s24)
    });
    i37("TSDeclareMethod", {
        visitor: [
            "decorators",
            "key",
            "typeParameters",
            "params",
            "returnType"
        ],
        fields: Object.assign({}, a41.classMethodOrDeclareMethodCommon, s24)
    });
    i37("TSQualifiedName", {
        aliases: [
            "TSEntityName"
        ],
        visitor: [
            "left",
            "right"
        ],
        fields: {
            left: (0, e55.validateType)("TSEntityName"),
            right: (0, e55.validateType)("Identifier")
        }
    });
    const o11 = {
        typeParameters: (0, e55.validateOptionalType)("TSTypeParameterDeclaration"),
        parameters: (0, e55.validateArrayOfType)([
            "Identifier",
            "RestElement"
        ]),
        typeAnnotation: (0, e55.validateOptionalType)("TSTypeAnnotation")
    };
    const n7 = {
        aliases: [
            "TSTypeElement"
        ],
        visitor: [
            "typeParameters",
            "parameters",
            "typeAnnotation"
        ],
        fields: o11
    };
    i37("TSCallSignatureDeclaration", n7);
    i37("TSConstructSignatureDeclaration", n7);
    const l5 = {
        key: (0, e55.validateType)("Expression"),
        computed: (0, e55.validate)(r32),
        optional: (0, e55.validateOptional)(r32)
    };
    i37("TSPropertySignature", {
        aliases: [
            "TSTypeElement"
        ],
        visitor: [
            "key",
            "typeAnnotation",
            "initializer"
        ],
        fields: Object.assign({}, l5, {
            readonly: (0, e55.validateOptional)(r32),
            typeAnnotation: (0, e55.validateOptionalType)("TSTypeAnnotation"),
            initializer: (0, e55.validateOptionalType)("Expression"),
            kind: {
                validate: (0, e55.assertOneOf)("get", "set")
            }
        })
    });
    i37("TSMethodSignature", {
        aliases: [
            "TSTypeElement"
        ],
        visitor: [
            "key",
            "typeParameters",
            "parameters",
            "typeAnnotation"
        ],
        fields: Object.assign({}, o11, l5, {
            kind: {
                validate: (0, e55.assertOneOf)("method", "get", "set")
            }
        })
    });
    i37("TSIndexSignature", {
        aliases: [
            "TSTypeElement"
        ],
        visitor: [
            "parameters",
            "typeAnnotation"
        ],
        fields: {
            readonly: (0, e55.validateOptional)(r32),
            static: (0, e55.validateOptional)(r32),
            parameters: (0, e55.validateArrayOfType)("Identifier"),
            typeAnnotation: (0, e55.validateOptionalType)("TSTypeAnnotation")
        }
    });
    const p310 = [
        "TSAnyKeyword",
        "TSBooleanKeyword",
        "TSBigIntKeyword",
        "TSIntrinsicKeyword",
        "TSNeverKeyword",
        "TSNullKeyword",
        "TSNumberKeyword",
        "TSObjectKeyword",
        "TSStringKeyword",
        "TSSymbolKeyword",
        "TSUndefinedKeyword",
        "TSUnknownKeyword",
        "TSVoidKeyword"
    ];
    for (const e54 of p310)i37(e54, {
        aliases: [
            "TSType",
            "TSBaseType"
        ],
        visitor: [],
        fields: {}
    });
    i37("TSThisType", {
        aliases: [
            "TSType",
            "TSBaseType"
        ],
        visitor: [],
        fields: {}
    });
    const d310 = {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeParameters",
            "parameters",
            "typeAnnotation"
        ]
    };
    i37("TSFunctionType", Object.assign({}, d310, {
        fields: o11
    }));
    i37("TSConstructorType", Object.assign({}, d310, {
        fields: Object.assign({}, o11, {
            abstract: (0, e55.validateOptional)(r32)
        })
    }));
    i37("TSTypeReference", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeName",
            "typeParameters"
        ],
        fields: {
            typeName: (0, e55.validateType)("TSEntityName"),
            typeParameters: (0, e55.validateOptionalType)("TSTypeParameterInstantiation")
        }
    });
    i37("TSTypePredicate", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "parameterName",
            "typeAnnotation"
        ],
        builder: [
            "parameterName",
            "typeAnnotation",
            "asserts"
        ],
        fields: {
            parameterName: (0, e55.validateType)([
                "Identifier",
                "TSThisType"
            ]),
            typeAnnotation: (0, e55.validateOptionalType)("TSTypeAnnotation"),
            asserts: (0, e55.validateOptional)(r32)
        }
    });
    i37("TSTypeQuery", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "exprName"
        ],
        fields: {
            exprName: (0, e55.validateType)([
                "TSEntityName",
                "TSImportType"
            ])
        }
    });
    i37("TSTypeLiteral", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "members"
        ],
        fields: {
            members: (0, e55.validateArrayOfType)("TSTypeElement")
        }
    });
    i37("TSArrayType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "elementType"
        ],
        fields: {
            elementType: (0, e55.validateType)("TSType")
        }
    });
    i37("TSTupleType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "elementTypes"
        ],
        fields: {
            elementTypes: (0, e55.validateArrayOfType)([
                "TSType",
                "TSNamedTupleMember"
            ])
        }
    });
    i37("TSOptionalType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSRestType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSNamedTupleMember", {
        visitor: [
            "label",
            "elementType"
        ],
        builder: [
            "label",
            "elementType",
            "optional"
        ],
        fields: {
            label: (0, e55.validateType)("Identifier"),
            optional: {
                validate: r32,
                default: false
            },
            elementType: (0, e55.validateType)("TSType")
        }
    });
    const y31 = {
        aliases: [
            "TSType"
        ],
        visitor: [
            "types"
        ],
        fields: {
            types: (0, e55.validateArrayOfType)("TSType")
        }
    };
    i37("TSUnionType", y31);
    i37("TSIntersectionType", y31);
    i37("TSConditionalType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "checkType",
            "extendsType",
            "trueType",
            "falseType"
        ],
        fields: {
            checkType: (0, e55.validateType)("TSType"),
            extendsType: (0, e55.validateType)("TSType"),
            trueType: (0, e55.validateType)("TSType"),
            falseType: (0, e55.validateType)("TSType")
        }
    });
    i37("TSInferType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeParameter"
        ],
        fields: {
            typeParameter: (0, e55.validateType)("TSTypeParameter")
        }
    });
    i37("TSParenthesizedType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSTypeOperator", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            operator: (0, e55.validate)((0, e55.assertValueType)("string")),
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSIndexedAccessType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "objectType",
            "indexType"
        ],
        fields: {
            objectType: (0, e55.validateType)("TSType"),
            indexType: (0, e55.validateType)("TSType")
        }
    });
    i37("TSMappedType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "typeParameter",
            "typeAnnotation",
            "nameType"
        ],
        fields: {
            readonly: (0, e55.validateOptional)(r32),
            typeParameter: (0, e55.validateType)("TSTypeParameter"),
            optional: (0, e55.validateOptional)(r32),
            typeAnnotation: (0, e55.validateOptionalType)("TSType"),
            nameType: (0, e55.validateOptionalType)("TSType")
        }
    });
    i37("TSLiteralType", {
        aliases: [
            "TSType",
            "TSBaseType"
        ],
        visitor: [
            "literal"
        ],
        fields: {
            literal: {
                validate: function() {
                    const a42 = (0, e55.assertNodeType)("NumericLiteral", "BigIntLiteral");
                    const i38 = (0, e55.assertOneOf)("-");
                    const r33 = (0, e55.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral");
                    function validator(e56, s25, o12) {
                        if ((0, t44.default)("UnaryExpression", o12)) {
                            i38(o12, "operator", o12.operator);
                            a42(o12, "argument", o12.argument);
                        } else r33(e56, s25, o12);
                    }
                    validator.oneOfNodeTypes = [
                        "NumericLiteral",
                        "StringLiteral",
                        "BooleanLiteral",
                        "BigIntLiteral",
                        "UnaryExpression"
                    ];
                    return validator;
                }()
            }
        }
    });
    i37("TSExpressionWithTypeArguments", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "expression",
            "typeParameters"
        ],
        fields: {
            expression: (0, e55.validateType)("TSEntityName"),
            typeParameters: (0, e55.validateOptionalType)("TSTypeParameterInstantiation")
        }
    });
    i37("TSInterfaceDeclaration", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "typeParameters",
            "extends",
            "body"
        ],
        fields: {
            declare: (0, e55.validateOptional)(r32),
            id: (0, e55.validateType)("Identifier"),
            typeParameters: (0, e55.validateOptionalType)("TSTypeParameterDeclaration"),
            extends: (0, e55.validateOptional)((0, e55.arrayOfType)("TSExpressionWithTypeArguments")),
            body: (0, e55.validateType)("TSInterfaceBody")
        }
    });
    i37("TSInterfaceBody", {
        visitor: [
            "body"
        ],
        fields: {
            body: (0, e55.validateArrayOfType)("TSTypeElement")
        }
    });
    i37("TSTypeAliasDeclaration", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "typeParameters",
            "typeAnnotation"
        ],
        fields: {
            declare: (0, e55.validateOptional)(r32),
            id: (0, e55.validateType)("Identifier"),
            typeParameters: (0, e55.validateOptionalType)("TSTypeParameterDeclaration"),
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSAsExpression", {
        aliases: [
            "Expression"
        ],
        visitor: [
            "expression",
            "typeAnnotation"
        ],
        fields: {
            expression: (0, e55.validateType)("Expression"),
            typeAnnotation: (0, e55.validateType)("TSType")
        }
    });
    i37("TSTypeAssertion", {
        aliases: [
            "Expression"
        ],
        visitor: [
            "typeAnnotation",
            "expression"
        ],
        fields: {
            typeAnnotation: (0, e55.validateType)("TSType"),
            expression: (0, e55.validateType)("Expression")
        }
    });
    i37("TSEnumDeclaration", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "members"
        ],
        fields: {
            declare: (0, e55.validateOptional)(r32),
            const: (0, e55.validateOptional)(r32),
            id: (0, e55.validateType)("Identifier"),
            members: (0, e55.validateArrayOfType)("TSEnumMember"),
            initializer: (0, e55.validateOptionalType)("Expression")
        }
    });
    i37("TSEnumMember", {
        visitor: [
            "id",
            "initializer"
        ],
        fields: {
            id: (0, e55.validateType)([
                "Identifier",
                "StringLiteral"
            ]),
            initializer: (0, e55.validateOptionalType)("Expression")
        }
    });
    i37("TSModuleDeclaration", {
        aliases: [
            "Statement",
            "Declaration"
        ],
        visitor: [
            "id",
            "body"
        ],
        fields: {
            declare: (0, e55.validateOptional)(r32),
            global: (0, e55.validateOptional)(r32),
            id: (0, e55.validateType)([
                "Identifier",
                "StringLiteral"
            ]),
            body: (0, e55.validateType)([
                "TSModuleBlock",
                "TSModuleDeclaration"
            ])
        }
    });
    i37("TSModuleBlock", {
        aliases: [
            "Scopable",
            "Block",
            "BlockParent"
        ],
        visitor: [
            "body"
        ],
        fields: {
            body: (0, e55.validateArrayOfType)("Statement")
        }
    });
    i37("TSImportType", {
        aliases: [
            "TSType"
        ],
        visitor: [
            "argument",
            "qualifier",
            "typeParameters"
        ],
        fields: {
            argument: (0, e55.validateType)("StringLiteral"),
            qualifier: (0, e55.validateOptionalType)("TSEntityName"),
            typeParameters: (0, e55.validateOptionalType)("TSTypeParameterInstantiation")
        }
    });
    i37("TSImportEqualsDeclaration", {
        aliases: [
            "Statement"
        ],
        visitor: [
            "id",
            "moduleReference"
        ],
        fields: {
            isExport: (0, e55.validate)(r32),
            id: (0, e55.validateType)("Identifier"),
            moduleReference: (0, e55.validateType)([
                "TSEntityName",
                "TSExternalModuleReference"
            ]),
            importKind: {
                validate: (0, e55.assertOneOf)("type", "value"),
                optional: true
            }
        }
    });
    i37("TSExternalModuleReference", {
        visitor: [
            "expression"
        ],
        fields: {
            expression: (0, e55.validateType)("StringLiteral")
        }
    });
    i37("TSNonNullExpression", {
        aliases: [
            "Expression"
        ],
        visitor: [
            "expression"
        ],
        fields: {
            expression: (0, e55.validateType)("Expression")
        }
    });
    i37("TSExportAssignment", {
        aliases: [
            "Statement"
        ],
        visitor: [
            "expression"
        ],
        fields: {
            expression: (0, e55.validateType)("Expression")
        }
    });
    i37("TSNamespaceExportDeclaration", {
        aliases: [
            "Statement"
        ],
        visitor: [
            "id"
        ],
        fields: {
            id: (0, e55.validateType)("Identifier")
        }
    });
    i37("TSTypeAnnotation", {
        visitor: [
            "typeAnnotation"
        ],
        fields: {
            typeAnnotation: {
                validate: (0, e55.assertNodeType)("TSType")
            }
        }
    });
    i37("TSTypeParameterInstantiation", {
        visitor: [
            "params"
        ],
        fields: {
            params: {
                validate: (0, e55.chain)((0, e55.assertValueType)("array"), (0, e55.assertEach)((0, e55.assertNodeType)("TSType")))
            }
        }
    });
    i37("TSTypeParameterDeclaration", {
        visitor: [
            "params"
        ],
        fields: {
            params: {
                validate: (0, e55.chain)((0, e55.assertValueType)("array"), (0, e55.assertEach)((0, e55.assertNodeType)("TSTypeParameter")))
            }
        }
    });
    i37("TSTypeParameter", {
        builder: [
            "constraint",
            "default",
            "name"
        ],
        visitor: [
            "constraint",
            "default"
        ],
        fields: {
            name: {
                validate: (0, e55.assertValueType)("string")
            },
            constraint: {
                validate: (0, e55.assertNodeType)("TSType"),
                optional: true
            },
            default: {
                validate: (0, e55.assertNodeType)("TSType"),
                optional: true
            }
        }
    });
    return w2;
}
var _2 = "default" in mod1 ? mod1.default : mod1;
var V2 = {}, F2 = false;
function dew3() {
    if (F2) return V2;
    F2 = true;
    Object.defineProperty(V2, "__esModule", {
        value: true
    });
    Object.defineProperty(V2, "ALIAS_KEYS", {
        enumerable: true,
        get: function() {
            return a43.ALIAS_KEYS;
        }
    });
    Object.defineProperty(V2, "BUILDER_KEYS", {
        enumerable: true,
        get: function() {
            return a43.BUILDER_KEYS;
        }
    });
    Object.defineProperty(V2, "DEPRECATED_KEYS", {
        enumerable: true,
        get: function() {
            return a43.DEPRECATED_KEYS;
        }
    });
    Object.defineProperty(V2, "FLIPPED_ALIAS_KEYS", {
        enumerable: true,
        get: function() {
            return a43.FLIPPED_ALIAS_KEYS;
        }
    });
    Object.defineProperty(V2, "NODE_FIELDS", {
        enumerable: true,
        get: function() {
            return a43.NODE_FIELDS;
        }
    });
    Object.defineProperty(V2, "NODE_PARENT_VALIDATIONS", {
        enumerable: true,
        get: function() {
            return a43.NODE_PARENT_VALIDATIONS;
        }
    });
    Object.defineProperty(V2, "PLACEHOLDERS", {
        enumerable: true,
        get: function() {
            return t45.PLACEHOLDERS;
        }
    });
    Object.defineProperty(V2, "PLACEHOLDERS_ALIAS", {
        enumerable: true,
        get: function() {
            return t45.PLACEHOLDERS_ALIAS;
        }
    });
    Object.defineProperty(V2, "PLACEHOLDERS_FLIPPED_ALIAS", {
        enumerable: true,
        get: function() {
            return t45.PLACEHOLDERS_FLIPPED_ALIAS;
        }
    });
    V2.TYPES = void 0;
    Object.defineProperty(V2, "VISITOR_KEYS", {
        enumerable: true,
        get: function() {
            return a43.VISITOR_KEYS;
        }
    });
    var e57 = _2;
    dew$7();
    dew$6();
    dew$5();
    dew$3();
    dew$2();
    dew$1();
    var a43 = dew$8();
    var t45 = dew$4();
    e57(a43.VISITOR_KEYS);
    e57(a43.ALIAS_KEYS);
    e57(a43.FLIPPED_ALIAS_KEYS);
    e57(a43.NODE_FIELDS);
    e57(a43.BUILDER_KEYS);
    e57(a43.DEPRECATED_KEYS);
    e57(t45.PLACEHOLDERS_ALIAS);
    e57(t45.PLACEHOLDERS_FLIPPED_ALIAS);
    const i39 = [].concat(Object.keys(a43.VISITOR_KEYS), Object.keys(a43.FLIPPED_ALIAS_KEYS), Object.keys(a43.DEPRECATED_KEYS));
    V2.TYPES = i39;
    return V2;
}
var r5 = {}, n5 = false;
function dew4() {
    if (n5) return r5;
    n5 = true;
    Object.defineProperty(r5, "__esModule", {
        value: true
    });
    r5.default = builder;
    var o60 = dew3();
    var a111 = dew$9();
    function builder() {
        const e2 = this;
        const t1103 = o60.BUILDER_KEYS[e2];
        const r114 = arguments.length;
        if (r114 > t1103.length) throw new Error(`${e2}: Too many arguments passed. Received ${r114} but can receive no more than ${t1103.length}`);
        const n1102 = {
            type: e2
        };
        for(let a = 0; a < t1103.length; ++a){
            const s53 = t1103[a];
            const u50 = o60.NODE_FIELDS[e2][s53];
            let d42;
            a < r114 && (d42 = arguments[a]);
            void 0 === d42 && (d42 = Array.isArray(u50.default) ? [] : u50.default);
            n1102[s53] = d42;
        }
        for(const e1 in n1102)(0, a111.default)(n1102, e1, n1102[e1]);
        return n1102;
    }
    return r5;
}
var t5 = {}, n6 = false;
function dew5() {
    if (n6) return t5;
    n6 = true;
    Object.defineProperty(t5, "__esModule", {
        value: true
    });
    t5.anyTypeAnnotation = anyTypeAnnotation;
    t5.argumentPlaceholder = argumentPlaceholder;
    t5.arrayExpression = arrayExpression;
    t5.arrayPattern = arrayPattern;
    t5.arrayTypeAnnotation = arrayTypeAnnotation;
    t5.arrowFunctionExpression = arrowFunctionExpression;
    t5.assignmentExpression = assignmentExpression;
    t5.assignmentPattern = assignmentPattern;
    t5.awaitExpression = awaitExpression;
    t5.bigIntLiteral = bigIntLiteral;
    t5.binaryExpression = binaryExpression;
    t5.bindExpression = bindExpression;
    t5.blockStatement = blockStatement;
    t5.booleanLiteral = booleanLiteral;
    t5.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
    t5.booleanTypeAnnotation = booleanTypeAnnotation;
    t5.breakStatement = breakStatement;
    t5.callExpression = callExpression;
    t5.catchClause = catchClause;
    t5.classAccessorProperty = classAccessorProperty;
    t5.classBody = classBody;
    t5.classDeclaration = classDeclaration;
    t5.classExpression = classExpression;
    t5.classImplements = classImplements;
    t5.classMethod = classMethod;
    t5.classPrivateMethod = classPrivateMethod;
    t5.classPrivateProperty = classPrivateProperty;
    t5.classProperty = classProperty;
    t5.conditionalExpression = conditionalExpression;
    t5.continueStatement = continueStatement;
    t5.debuggerStatement = debuggerStatement;
    t5.decimalLiteral = decimalLiteral;
    t5.declareClass = declareClass;
    t5.declareExportAllDeclaration = declareExportAllDeclaration;
    t5.declareExportDeclaration = declareExportDeclaration;
    t5.declareFunction = declareFunction;
    t5.declareInterface = declareInterface;
    t5.declareModule = declareModule;
    t5.declareModuleExports = declareModuleExports;
    t5.declareOpaqueType = declareOpaqueType;
    t5.declareTypeAlias = declareTypeAlias;
    t5.declareVariable = declareVariable;
    t5.declaredPredicate = declaredPredicate;
    t5.decorator = decorator;
    t5.directive = directive;
    t5.directiveLiteral = directiveLiteral;
    t5.doExpression = doExpression;
    t5.doWhileStatement = doWhileStatement;
    t5.emptyStatement = emptyStatement;
    t5.emptyTypeAnnotation = emptyTypeAnnotation;
    t5.enumBooleanBody = enumBooleanBody;
    t5.enumBooleanMember = enumBooleanMember;
    t5.enumDeclaration = enumDeclaration;
    t5.enumDefaultedMember = enumDefaultedMember;
    t5.enumNumberBody = enumNumberBody;
    t5.enumNumberMember = enumNumberMember;
    t5.enumStringBody = enumStringBody;
    t5.enumStringMember = enumStringMember;
    t5.enumSymbolBody = enumSymbolBody;
    t5.existsTypeAnnotation = existsTypeAnnotation;
    t5.exportAllDeclaration = exportAllDeclaration;
    t5.exportDefaultDeclaration = exportDefaultDeclaration;
    t5.exportDefaultSpecifier = exportDefaultSpecifier;
    t5.exportNamedDeclaration = exportNamedDeclaration;
    t5.exportNamespaceSpecifier = exportNamespaceSpecifier;
    t5.exportSpecifier = exportSpecifier;
    t5.expressionStatement = expressionStatement;
    t5.file = file;
    t5.forInStatement = forInStatement;
    t5.forOfStatement = forOfStatement;
    t5.forStatement = forStatement;
    t5.functionDeclaration = functionDeclaration;
    t5.functionExpression = functionExpression;
    t5.functionTypeAnnotation = functionTypeAnnotation;
    t5.functionTypeParam = functionTypeParam;
    t5.genericTypeAnnotation = genericTypeAnnotation;
    t5.identifier = identifier;
    t5.ifStatement = ifStatement;
    t5.import = _import;
    t5.importAttribute = importAttribute;
    t5.importDeclaration = importDeclaration;
    t5.importDefaultSpecifier = importDefaultSpecifier;
    t5.importNamespaceSpecifier = importNamespaceSpecifier;
    t5.importSpecifier = importSpecifier;
    t5.indexedAccessType = indexedAccessType;
    t5.inferredPredicate = inferredPredicate;
    t5.interfaceDeclaration = interfaceDeclaration;
    t5.interfaceExtends = interfaceExtends;
    t5.interfaceTypeAnnotation = interfaceTypeAnnotation;
    t5.interpreterDirective = interpreterDirective;
    t5.intersectionTypeAnnotation = intersectionTypeAnnotation;
    t5.jSXAttribute = t5.jsxAttribute = jsxAttribute;
    t5.jSXClosingElement = t5.jsxClosingElement = jsxClosingElement;
    t5.jSXClosingFragment = t5.jsxClosingFragment = jsxClosingFragment;
    t5.jSXElement = t5.jsxElement = jsxElement;
    t5.jSXEmptyExpression = t5.jsxEmptyExpression = jsxEmptyExpression;
    t5.jSXExpressionContainer = t5.jsxExpressionContainer = jsxExpressionContainer;
    t5.jSXFragment = t5.jsxFragment = jsxFragment;
    t5.jSXIdentifier = t5.jsxIdentifier = jsxIdentifier;
    t5.jSXMemberExpression = t5.jsxMemberExpression = jsxMemberExpression;
    t5.jSXNamespacedName = t5.jsxNamespacedName = jsxNamespacedName;
    t5.jSXOpeningElement = t5.jsxOpeningElement = jsxOpeningElement;
    t5.jSXOpeningFragment = t5.jsxOpeningFragment = jsxOpeningFragment;
    t5.jSXSpreadAttribute = t5.jsxSpreadAttribute = jsxSpreadAttribute;
    t5.jSXSpreadChild = t5.jsxSpreadChild = jsxSpreadChild;
    t5.jSXText = t5.jsxText = jsxText;
    t5.labeledStatement = labeledStatement;
    t5.logicalExpression = logicalExpression;
    t5.memberExpression = memberExpression;
    t5.metaProperty = metaProperty;
    t5.mixedTypeAnnotation = mixedTypeAnnotation;
    t5.moduleExpression = moduleExpression;
    t5.newExpression = newExpression;
    t5.noop = noop2;
    t5.nullLiteral = nullLiteral;
    t5.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
    t5.nullableTypeAnnotation = nullableTypeAnnotation;
    t5.numberLiteral = NumberLiteral;
    t5.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
    t5.numberTypeAnnotation = numberTypeAnnotation;
    t5.numericLiteral = numericLiteral;
    t5.objectExpression = objectExpression;
    t5.objectMethod = objectMethod;
    t5.objectPattern = objectPattern;
    t5.objectProperty = objectProperty;
    t5.objectTypeAnnotation = objectTypeAnnotation;
    t5.objectTypeCallProperty = objectTypeCallProperty;
    t5.objectTypeIndexer = objectTypeIndexer;
    t5.objectTypeInternalSlot = objectTypeInternalSlot;
    t5.objectTypeProperty = objectTypeProperty;
    t5.objectTypeSpreadProperty = objectTypeSpreadProperty;
    t5.opaqueType = opaqueType;
    t5.optionalCallExpression = optionalCallExpression;
    t5.optionalIndexedAccessType = optionalIndexedAccessType;
    t5.optionalMemberExpression = optionalMemberExpression;
    t5.parenthesizedExpression = parenthesizedExpression;
    t5.pipelineBareFunction = pipelineBareFunction;
    t5.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
    t5.pipelineTopicExpression = pipelineTopicExpression;
    t5.placeholder = placeholder;
    t5.privateName = privateName;
    t5.program = program;
    t5.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
    t5.recordExpression = recordExpression;
    t5.regExpLiteral = regExpLiteral;
    t5.regexLiteral = RegexLiteral;
    t5.restElement = restElement;
    t5.restProperty = RestProperty;
    t5.returnStatement = returnStatement;
    t5.sequenceExpression = sequenceExpression;
    t5.spreadElement = spreadElement;
    t5.spreadProperty = SpreadProperty;
    t5.staticBlock = staticBlock;
    t5.stringLiteral = stringLiteral;
    t5.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
    t5.stringTypeAnnotation = stringTypeAnnotation;
    t5.super = _super;
    t5.switchCase = switchCase;
    t5.switchStatement = switchStatement;
    t5.symbolTypeAnnotation = symbolTypeAnnotation;
    t5.taggedTemplateExpression = taggedTemplateExpression;
    t5.templateElement = templateElement;
    t5.templateLiteral = templateLiteral;
    t5.thisExpression = thisExpression;
    t5.thisTypeAnnotation = thisTypeAnnotation;
    t5.throwStatement = throwStatement;
    t5.topicReference = topicReference;
    t5.tryStatement = tryStatement;
    t5.tSAnyKeyword = t5.tsAnyKeyword = tsAnyKeyword;
    t5.tSArrayType = t5.tsArrayType = tsArrayType;
    t5.tSAsExpression = t5.tsAsExpression = tsAsExpression;
    t5.tSBigIntKeyword = t5.tsBigIntKeyword = tsBigIntKeyword;
    t5.tSBooleanKeyword = t5.tsBooleanKeyword = tsBooleanKeyword;
    t5.tSCallSignatureDeclaration = t5.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
    t5.tSConditionalType = t5.tsConditionalType = tsConditionalType;
    t5.tSConstructSignatureDeclaration = t5.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
    t5.tSConstructorType = t5.tsConstructorType = tsConstructorType;
    t5.tSDeclareFunction = t5.tsDeclareFunction = tsDeclareFunction;
    t5.tSDeclareMethod = t5.tsDeclareMethod = tsDeclareMethod;
    t5.tSEnumDeclaration = t5.tsEnumDeclaration = tsEnumDeclaration;
    t5.tSEnumMember = t5.tsEnumMember = tsEnumMember;
    t5.tSExportAssignment = t5.tsExportAssignment = tsExportAssignment;
    t5.tSExpressionWithTypeArguments = t5.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
    t5.tSExternalModuleReference = t5.tsExternalModuleReference = tsExternalModuleReference;
    t5.tSFunctionType = t5.tsFunctionType = tsFunctionType;
    t5.tSImportEqualsDeclaration = t5.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
    t5.tSImportType = t5.tsImportType = tsImportType;
    t5.tSIndexSignature = t5.tsIndexSignature = tsIndexSignature;
    t5.tSIndexedAccessType = t5.tsIndexedAccessType = tsIndexedAccessType;
    t5.tSInferType = t5.tsInferType = tsInferType;
    t5.tSInterfaceBody = t5.tsInterfaceBody = tsInterfaceBody;
    t5.tSInterfaceDeclaration = t5.tsInterfaceDeclaration = tsInterfaceDeclaration;
    t5.tSIntersectionType = t5.tsIntersectionType = tsIntersectionType;
    t5.tSIntrinsicKeyword = t5.tsIntrinsicKeyword = tsIntrinsicKeyword;
    t5.tSLiteralType = t5.tsLiteralType = tsLiteralType;
    t5.tSMappedType = t5.tsMappedType = tsMappedType;
    t5.tSMethodSignature = t5.tsMethodSignature = tsMethodSignature;
    t5.tSModuleBlock = t5.tsModuleBlock = tsModuleBlock;
    t5.tSModuleDeclaration = t5.tsModuleDeclaration = tsModuleDeclaration;
    t5.tSNamedTupleMember = t5.tsNamedTupleMember = tsNamedTupleMember;
    t5.tSNamespaceExportDeclaration = t5.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
    t5.tSNeverKeyword = t5.tsNeverKeyword = tsNeverKeyword;
    t5.tSNonNullExpression = t5.tsNonNullExpression = tsNonNullExpression;
    t5.tSNullKeyword = t5.tsNullKeyword = tsNullKeyword;
    t5.tSNumberKeyword = t5.tsNumberKeyword = tsNumberKeyword;
    t5.tSObjectKeyword = t5.tsObjectKeyword = tsObjectKeyword;
    t5.tSOptionalType = t5.tsOptionalType = tsOptionalType;
    t5.tSParameterProperty = t5.tsParameterProperty = tsParameterProperty;
    t5.tSParenthesizedType = t5.tsParenthesizedType = tsParenthesizedType;
    t5.tSPropertySignature = t5.tsPropertySignature = tsPropertySignature;
    t5.tSQualifiedName = t5.tsQualifiedName = tsQualifiedName;
    t5.tSRestType = t5.tsRestType = tsRestType;
    t5.tSStringKeyword = t5.tsStringKeyword = tsStringKeyword;
    t5.tSSymbolKeyword = t5.tsSymbolKeyword = tsSymbolKeyword;
    t5.tSThisType = t5.tsThisType = tsThisType;
    t5.tSTupleType = t5.tsTupleType = tsTupleType;
    t5.tSTypeAliasDeclaration = t5.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
    t5.tSTypeAnnotation = t5.tsTypeAnnotation = tsTypeAnnotation;
    t5.tSTypeAssertion = t5.tsTypeAssertion = tsTypeAssertion;
    t5.tSTypeLiteral = t5.tsTypeLiteral = tsTypeLiteral;
    t5.tSTypeOperator = t5.tsTypeOperator = tsTypeOperator;
    t5.tSTypeParameter = t5.tsTypeParameter = tsTypeParameter;
    t5.tSTypeParameterDeclaration = t5.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
    t5.tSTypeParameterInstantiation = t5.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
    t5.tSTypePredicate = t5.tsTypePredicate = tsTypePredicate;
    t5.tSTypeQuery = t5.tsTypeQuery = tsTypeQuery;
    t5.tSTypeReference = t5.tsTypeReference = tsTypeReference;
    t5.tSUndefinedKeyword = t5.tsUndefinedKeyword = tsUndefinedKeyword;
    t5.tSUnionType = t5.tsUnionType = tsUnionType;
    t5.tSUnknownKeyword = t5.tsUnknownKeyword = tsUnknownKeyword;
    t5.tSVoidKeyword = t5.tsVoidKeyword = tsVoidKeyword;
    t5.tupleExpression = tupleExpression;
    t5.tupleTypeAnnotation = tupleTypeAnnotation;
    t5.typeAlias = typeAlias;
    t5.typeAnnotation = typeAnnotation;
    t5.typeCastExpression = typeCastExpression;
    t5.typeParameter = typeParameter;
    t5.typeParameterDeclaration = typeParameterDeclaration;
    t5.typeParameterInstantiation = typeParameterInstantiation;
    t5.typeofTypeAnnotation = typeofTypeAnnotation;
    t5.unaryExpression = unaryExpression;
    t5.unionTypeAnnotation = unionTypeAnnotation;
    t5.updateExpression = updateExpression;
    t5.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
    t5.variableDeclaration = variableDeclaration;
    t5.variableDeclarator = variableDeclarator;
    t5.variance = variance;
    t5.voidTypeAnnotation = voidTypeAnnotation;
    t5.whileStatement = whileStatement;
    t5.withStatement = withStatement;
    t5.yieldExpression = yieldExpression;
    var r69 = dew4();
    function arrayExpression(e) {
        return r69.default.apply("ArrayExpression", arguments);
    }
    function assignmentExpression(e, t, n) {
        return r69.default.apply("AssignmentExpression", arguments);
    }
    function binaryExpression(e, t, n) {
        return r69.default.apply("BinaryExpression", arguments);
    }
    function interpreterDirective(e) {
        return r69.default.apply("InterpreterDirective", arguments);
    }
    function directive(e) {
        return r69.default.apply("Directive", arguments);
    }
    function directiveLiteral(e) {
        return r69.default.apply("DirectiveLiteral", arguments);
    }
    function blockStatement(e, t) {
        return r69.default.apply("BlockStatement", arguments);
    }
    function breakStatement(e) {
        return r69.default.apply("BreakStatement", arguments);
    }
    function callExpression(e, t) {
        return r69.default.apply("CallExpression", arguments);
    }
    function catchClause(e, t) {
        return r69.default.apply("CatchClause", arguments);
    }
    function conditionalExpression(e, t, n) {
        return r69.default.apply("ConditionalExpression", arguments);
    }
    function continueStatement(e) {
        return r69.default.apply("ContinueStatement", arguments);
    }
    function debuggerStatement() {
        return r69.default.apply("DebuggerStatement", arguments);
    }
    function doWhileStatement(e, t) {
        return r69.default.apply("DoWhileStatement", arguments);
    }
    function emptyStatement() {
        return r69.default.apply("EmptyStatement", arguments);
    }
    function expressionStatement(e) {
        return r69.default.apply("ExpressionStatement", arguments);
    }
    function file(e, t, n) {
        return r69.default.apply("File", arguments);
    }
    function forInStatement(e, t, n) {
        return r69.default.apply("ForInStatement", arguments);
    }
    function forStatement(e, t, n, a) {
        return r69.default.apply("ForStatement", arguments);
    }
    function functionDeclaration(e, t, n, a, o) {
        return r69.default.apply("FunctionDeclaration", arguments);
    }
    function functionExpression(e, t, n, a, o) {
        return r69.default.apply("FunctionExpression", arguments);
    }
    function identifier(e) {
        return r69.default.apply("Identifier", arguments);
    }
    function ifStatement(e, t, n) {
        return r69.default.apply("IfStatement", arguments);
    }
    function labeledStatement(e, t) {
        return r69.default.apply("LabeledStatement", arguments);
    }
    function stringLiteral(e) {
        return r69.default.apply("StringLiteral", arguments);
    }
    function numericLiteral(e) {
        return r69.default.apply("NumericLiteral", arguments);
    }
    function nullLiteral() {
        return r69.default.apply("NullLiteral", arguments);
    }
    function booleanLiteral(e) {
        return r69.default.apply("BooleanLiteral", arguments);
    }
    function regExpLiteral(e, t) {
        return r69.default.apply("RegExpLiteral", arguments);
    }
    function logicalExpression(e, t, n) {
        return r69.default.apply("LogicalExpression", arguments);
    }
    function memberExpression(e, t, n, a) {
        return r69.default.apply("MemberExpression", arguments);
    }
    function newExpression(e, t) {
        return r69.default.apply("NewExpression", arguments);
    }
    function program(e, t, n, a) {
        return r69.default.apply("Program", arguments);
    }
    function objectExpression(e) {
        return r69.default.apply("ObjectExpression", arguments);
    }
    function objectMethod(e, t, n, a, o, p, i) {
        return r69.default.apply("ObjectMethod", arguments);
    }
    function objectProperty(e, t, n, a, o) {
        return r69.default.apply("ObjectProperty", arguments);
    }
    function restElement(e) {
        return r69.default.apply("RestElement", arguments);
    }
    function returnStatement(e) {
        return r69.default.apply("ReturnStatement", arguments);
    }
    function sequenceExpression(e) {
        return r69.default.apply("SequenceExpression", arguments);
    }
    function parenthesizedExpression(e) {
        return r69.default.apply("ParenthesizedExpression", arguments);
    }
    function switchCase(e, t) {
        return r69.default.apply("SwitchCase", arguments);
    }
    function switchStatement(e, t) {
        return r69.default.apply("SwitchStatement", arguments);
    }
    function thisExpression() {
        return r69.default.apply("ThisExpression", arguments);
    }
    function throwStatement(e) {
        return r69.default.apply("ThrowStatement", arguments);
    }
    function tryStatement(e, t, n) {
        return r69.default.apply("TryStatement", arguments);
    }
    function unaryExpression(e, t, n) {
        return r69.default.apply("UnaryExpression", arguments);
    }
    function updateExpression(e, t, n) {
        return r69.default.apply("UpdateExpression", arguments);
    }
    function variableDeclaration(e, t) {
        return r69.default.apply("VariableDeclaration", arguments);
    }
    function variableDeclarator(e, t) {
        return r69.default.apply("VariableDeclarator", arguments);
    }
    function whileStatement(e, t) {
        return r69.default.apply("WhileStatement", arguments);
    }
    function withStatement(e, t) {
        return r69.default.apply("WithStatement", arguments);
    }
    function assignmentPattern(e, t) {
        return r69.default.apply("AssignmentPattern", arguments);
    }
    function arrayPattern(e) {
        return r69.default.apply("ArrayPattern", arguments);
    }
    function arrowFunctionExpression(e, t, n) {
        return r69.default.apply("ArrowFunctionExpression", arguments);
    }
    function classBody(e) {
        return r69.default.apply("ClassBody", arguments);
    }
    function classExpression(e, t, n, a) {
        return r69.default.apply("ClassExpression", arguments);
    }
    function classDeclaration(e, t, n, a) {
        return r69.default.apply("ClassDeclaration", arguments);
    }
    function exportAllDeclaration(e) {
        return r69.default.apply("ExportAllDeclaration", arguments);
    }
    function exportDefaultDeclaration(e) {
        return r69.default.apply("ExportDefaultDeclaration", arguments);
    }
    function exportNamedDeclaration(e, t, n) {
        return r69.default.apply("ExportNamedDeclaration", arguments);
    }
    function exportSpecifier(e, t) {
        return r69.default.apply("ExportSpecifier", arguments);
    }
    function forOfStatement(e, t, n, a) {
        return r69.default.apply("ForOfStatement", arguments);
    }
    function importDeclaration(e, t) {
        return r69.default.apply("ImportDeclaration", arguments);
    }
    function importDefaultSpecifier(e) {
        return r69.default.apply("ImportDefaultSpecifier", arguments);
    }
    function importNamespaceSpecifier(e) {
        return r69.default.apply("ImportNamespaceSpecifier", arguments);
    }
    function importSpecifier(e, t) {
        return r69.default.apply("ImportSpecifier", arguments);
    }
    function metaProperty(e, t) {
        return r69.default.apply("MetaProperty", arguments);
    }
    function classMethod(e, t, n, a, o, p, i, l) {
        return r69.default.apply("ClassMethod", arguments);
    }
    function objectPattern(e) {
        return r69.default.apply("ObjectPattern", arguments);
    }
    function spreadElement(e) {
        return r69.default.apply("SpreadElement", arguments);
    }
    function _super() {
        return r69.default.apply("Super", arguments);
    }
    function taggedTemplateExpression(e, t) {
        return r69.default.apply("TaggedTemplateExpression", arguments);
    }
    function templateElement(e, t) {
        return r69.default.apply("TemplateElement", arguments);
    }
    function templateLiteral(e, t) {
        return r69.default.apply("TemplateLiteral", arguments);
    }
    function yieldExpression(e, t) {
        return r69.default.apply("YieldExpression", arguments);
    }
    function awaitExpression(e) {
        return r69.default.apply("AwaitExpression", arguments);
    }
    function _import() {
        return r69.default.apply("Import", arguments);
    }
    function bigIntLiteral(e) {
        return r69.default.apply("BigIntLiteral", arguments);
    }
    function exportNamespaceSpecifier(e) {
        return r69.default.apply("ExportNamespaceSpecifier", arguments);
    }
    function optionalMemberExpression(e, t, n, a) {
        return r69.default.apply("OptionalMemberExpression", arguments);
    }
    function optionalCallExpression(e, t, n) {
        return r69.default.apply("OptionalCallExpression", arguments);
    }
    function classProperty(e, t, n, a, o, p) {
        return r69.default.apply("ClassProperty", arguments);
    }
    function classAccessorProperty(e, t, n, a, o, p) {
        return r69.default.apply("ClassAccessorProperty", arguments);
    }
    function classPrivateProperty(e, t, n, a) {
        return r69.default.apply("ClassPrivateProperty", arguments);
    }
    function classPrivateMethod(e, t, n, a, o) {
        return r69.default.apply("ClassPrivateMethod", arguments);
    }
    function privateName(e) {
        return r69.default.apply("PrivateName", arguments);
    }
    function staticBlock(e) {
        return r69.default.apply("StaticBlock", arguments);
    }
    function anyTypeAnnotation() {
        return r69.default.apply("AnyTypeAnnotation", arguments);
    }
    function arrayTypeAnnotation(e) {
        return r69.default.apply("ArrayTypeAnnotation", arguments);
    }
    function booleanTypeAnnotation() {
        return r69.default.apply("BooleanTypeAnnotation", arguments);
    }
    function booleanLiteralTypeAnnotation(e) {
        return r69.default.apply("BooleanLiteralTypeAnnotation", arguments);
    }
    function nullLiteralTypeAnnotation() {
        return r69.default.apply("NullLiteralTypeAnnotation", arguments);
    }
    function classImplements(e, t) {
        return r69.default.apply("ClassImplements", arguments);
    }
    function declareClass(e, t, n, a) {
        return r69.default.apply("DeclareClass", arguments);
    }
    function declareFunction(e) {
        return r69.default.apply("DeclareFunction", arguments);
    }
    function declareInterface(e, t, n, a) {
        return r69.default.apply("DeclareInterface", arguments);
    }
    function declareModule(e, t, n) {
        return r69.default.apply("DeclareModule", arguments);
    }
    function declareModuleExports(e) {
        return r69.default.apply("DeclareModuleExports", arguments);
    }
    function declareTypeAlias(e, t, n) {
        return r69.default.apply("DeclareTypeAlias", arguments);
    }
    function declareOpaqueType(e, t, n) {
        return r69.default.apply("DeclareOpaqueType", arguments);
    }
    function declareVariable(e) {
        return r69.default.apply("DeclareVariable", arguments);
    }
    function declareExportDeclaration(e, t, n) {
        return r69.default.apply("DeclareExportDeclaration", arguments);
    }
    function declareExportAllDeclaration(e) {
        return r69.default.apply("DeclareExportAllDeclaration", arguments);
    }
    function declaredPredicate(e) {
        return r69.default.apply("DeclaredPredicate", arguments);
    }
    function existsTypeAnnotation() {
        return r69.default.apply("ExistsTypeAnnotation", arguments);
    }
    function functionTypeAnnotation(e, t, n, a) {
        return r69.default.apply("FunctionTypeAnnotation", arguments);
    }
    function functionTypeParam(e, t) {
        return r69.default.apply("FunctionTypeParam", arguments);
    }
    function genericTypeAnnotation(e, t) {
        return r69.default.apply("GenericTypeAnnotation", arguments);
    }
    function inferredPredicate() {
        return r69.default.apply("InferredPredicate", arguments);
    }
    function interfaceExtends(e, t) {
        return r69.default.apply("InterfaceExtends", arguments);
    }
    function interfaceDeclaration(e, t, n, a) {
        return r69.default.apply("InterfaceDeclaration", arguments);
    }
    function interfaceTypeAnnotation(e, t) {
        return r69.default.apply("InterfaceTypeAnnotation", arguments);
    }
    function intersectionTypeAnnotation(e) {
        return r69.default.apply("IntersectionTypeAnnotation", arguments);
    }
    function mixedTypeAnnotation() {
        return r69.default.apply("MixedTypeAnnotation", arguments);
    }
    function emptyTypeAnnotation() {
        return r69.default.apply("EmptyTypeAnnotation", arguments);
    }
    function nullableTypeAnnotation(e) {
        return r69.default.apply("NullableTypeAnnotation", arguments);
    }
    function numberLiteralTypeAnnotation(e) {
        return r69.default.apply("NumberLiteralTypeAnnotation", arguments);
    }
    function numberTypeAnnotation() {
        return r69.default.apply("NumberTypeAnnotation", arguments);
    }
    function objectTypeAnnotation(e, t, n, a, o) {
        return r69.default.apply("ObjectTypeAnnotation", arguments);
    }
    function objectTypeInternalSlot(e, t, n, a, o) {
        return r69.default.apply("ObjectTypeInternalSlot", arguments);
    }
    function objectTypeCallProperty(e) {
        return r69.default.apply("ObjectTypeCallProperty", arguments);
    }
    function objectTypeIndexer(e, t, n, a) {
        return r69.default.apply("ObjectTypeIndexer", arguments);
    }
    function objectTypeProperty(e, t, n) {
        return r69.default.apply("ObjectTypeProperty", arguments);
    }
    function objectTypeSpreadProperty(e) {
        return r69.default.apply("ObjectTypeSpreadProperty", arguments);
    }
    function opaqueType(e, t, n, a) {
        return r69.default.apply("OpaqueType", arguments);
    }
    function qualifiedTypeIdentifier(e, t) {
        return r69.default.apply("QualifiedTypeIdentifier", arguments);
    }
    function stringLiteralTypeAnnotation(e) {
        return r69.default.apply("StringLiteralTypeAnnotation", arguments);
    }
    function stringTypeAnnotation() {
        return r69.default.apply("StringTypeAnnotation", arguments);
    }
    function symbolTypeAnnotation() {
        return r69.default.apply("SymbolTypeAnnotation", arguments);
    }
    function thisTypeAnnotation() {
        return r69.default.apply("ThisTypeAnnotation", arguments);
    }
    function tupleTypeAnnotation(e) {
        return r69.default.apply("TupleTypeAnnotation", arguments);
    }
    function typeofTypeAnnotation(e) {
        return r69.default.apply("TypeofTypeAnnotation", arguments);
    }
    function typeAlias(e, t, n) {
        return r69.default.apply("TypeAlias", arguments);
    }
    function typeAnnotation(e) {
        return r69.default.apply("TypeAnnotation", arguments);
    }
    function typeCastExpression(e, t) {
        return r69.default.apply("TypeCastExpression", arguments);
    }
    function typeParameter(e, t, n) {
        return r69.default.apply("TypeParameter", arguments);
    }
    function typeParameterDeclaration(e) {
        return r69.default.apply("TypeParameterDeclaration", arguments);
    }
    function typeParameterInstantiation(e) {
        return r69.default.apply("TypeParameterInstantiation", arguments);
    }
    function unionTypeAnnotation(e) {
        return r69.default.apply("UnionTypeAnnotation", arguments);
    }
    function variance(e) {
        return r69.default.apply("Variance", arguments);
    }
    function voidTypeAnnotation() {
        return r69.default.apply("VoidTypeAnnotation", arguments);
    }
    function enumDeclaration(e, t) {
        return r69.default.apply("EnumDeclaration", arguments);
    }
    function enumBooleanBody(e) {
        return r69.default.apply("EnumBooleanBody", arguments);
    }
    function enumNumberBody(e) {
        return r69.default.apply("EnumNumberBody", arguments);
    }
    function enumStringBody(e) {
        return r69.default.apply("EnumStringBody", arguments);
    }
    function enumSymbolBody(e) {
        return r69.default.apply("EnumSymbolBody", arguments);
    }
    function enumBooleanMember(e) {
        return r69.default.apply("EnumBooleanMember", arguments);
    }
    function enumNumberMember(e, t) {
        return r69.default.apply("EnumNumberMember", arguments);
    }
    function enumStringMember(e, t) {
        return r69.default.apply("EnumStringMember", arguments);
    }
    function enumDefaultedMember(e) {
        return r69.default.apply("EnumDefaultedMember", arguments);
    }
    function indexedAccessType(e, t) {
        return r69.default.apply("IndexedAccessType", arguments);
    }
    function optionalIndexedAccessType(e, t) {
        return r69.default.apply("OptionalIndexedAccessType", arguments);
    }
    function jsxAttribute(e, t) {
        return r69.default.apply("JSXAttribute", arguments);
    }
    function jsxClosingElement(e) {
        return r69.default.apply("JSXClosingElement", arguments);
    }
    function jsxElement(e, t, n, a) {
        return r69.default.apply("JSXElement", arguments);
    }
    function jsxEmptyExpression() {
        return r69.default.apply("JSXEmptyExpression", arguments);
    }
    function jsxExpressionContainer(e) {
        return r69.default.apply("JSXExpressionContainer", arguments);
    }
    function jsxSpreadChild(e) {
        return r69.default.apply("JSXSpreadChild", arguments);
    }
    function jsxIdentifier(e) {
        return r69.default.apply("JSXIdentifier", arguments);
    }
    function jsxMemberExpression(e, t) {
        return r69.default.apply("JSXMemberExpression", arguments);
    }
    function jsxNamespacedName(e, t) {
        return r69.default.apply("JSXNamespacedName", arguments);
    }
    function jsxOpeningElement(e, t, n) {
        return r69.default.apply("JSXOpeningElement", arguments);
    }
    function jsxSpreadAttribute(e) {
        return r69.default.apply("JSXSpreadAttribute", arguments);
    }
    function jsxText(e) {
        return r69.default.apply("JSXText", arguments);
    }
    function jsxFragment(e, t, n) {
        return r69.default.apply("JSXFragment", arguments);
    }
    function jsxOpeningFragment() {
        return r69.default.apply("JSXOpeningFragment", arguments);
    }
    function jsxClosingFragment() {
        return r69.default.apply("JSXClosingFragment", arguments);
    }
    function noop2() {
        return r69.default.apply("Noop", arguments);
    }
    function placeholder(e, t) {
        return r69.default.apply("Placeholder", arguments);
    }
    function v8IntrinsicIdentifier(e) {
        return r69.default.apply("V8IntrinsicIdentifier", arguments);
    }
    function argumentPlaceholder() {
        return r69.default.apply("ArgumentPlaceholder", arguments);
    }
    function bindExpression(e, t) {
        return r69.default.apply("BindExpression", arguments);
    }
    function importAttribute(e, t) {
        return r69.default.apply("ImportAttribute", arguments);
    }
    function decorator(e) {
        return r69.default.apply("Decorator", arguments);
    }
    function doExpression(e, t) {
        return r69.default.apply("DoExpression", arguments);
    }
    function exportDefaultSpecifier(e) {
        return r69.default.apply("ExportDefaultSpecifier", arguments);
    }
    function recordExpression(e) {
        return r69.default.apply("RecordExpression", arguments);
    }
    function tupleExpression(e) {
        return r69.default.apply("TupleExpression", arguments);
    }
    function decimalLiteral(e) {
        return r69.default.apply("DecimalLiteral", arguments);
    }
    function moduleExpression(e) {
        return r69.default.apply("ModuleExpression", arguments);
    }
    function topicReference() {
        return r69.default.apply("TopicReference", arguments);
    }
    function pipelineTopicExpression(e) {
        return r69.default.apply("PipelineTopicExpression", arguments);
    }
    function pipelineBareFunction(e) {
        return r69.default.apply("PipelineBareFunction", arguments);
    }
    function pipelinePrimaryTopicReference() {
        return r69.default.apply("PipelinePrimaryTopicReference", arguments);
    }
    function tsParameterProperty(e) {
        return r69.default.apply("TSParameterProperty", arguments);
    }
    function tsDeclareFunction(e, t, n, a) {
        return r69.default.apply("TSDeclareFunction", arguments);
    }
    function tsDeclareMethod(e, t, n, a, o) {
        return r69.default.apply("TSDeclareMethod", arguments);
    }
    function tsQualifiedName(e, t) {
        return r69.default.apply("TSQualifiedName", arguments);
    }
    function tsCallSignatureDeclaration(e, t, n) {
        return r69.default.apply("TSCallSignatureDeclaration", arguments);
    }
    function tsConstructSignatureDeclaration(e, t, n) {
        return r69.default.apply("TSConstructSignatureDeclaration", arguments);
    }
    function tsPropertySignature(e, t, n) {
        return r69.default.apply("TSPropertySignature", arguments);
    }
    function tsMethodSignature(e, t, n, a) {
        return r69.default.apply("TSMethodSignature", arguments);
    }
    function tsIndexSignature(e, t) {
        return r69.default.apply("TSIndexSignature", arguments);
    }
    function tsAnyKeyword() {
        return r69.default.apply("TSAnyKeyword", arguments);
    }
    function tsBooleanKeyword() {
        return r69.default.apply("TSBooleanKeyword", arguments);
    }
    function tsBigIntKeyword() {
        return r69.default.apply("TSBigIntKeyword", arguments);
    }
    function tsIntrinsicKeyword() {
        return r69.default.apply("TSIntrinsicKeyword", arguments);
    }
    function tsNeverKeyword() {
        return r69.default.apply("TSNeverKeyword", arguments);
    }
    function tsNullKeyword() {
        return r69.default.apply("TSNullKeyword", arguments);
    }
    function tsNumberKeyword() {
        return r69.default.apply("TSNumberKeyword", arguments);
    }
    function tsObjectKeyword() {
        return r69.default.apply("TSObjectKeyword", arguments);
    }
    function tsStringKeyword() {
        return r69.default.apply("TSStringKeyword", arguments);
    }
    function tsSymbolKeyword() {
        return r69.default.apply("TSSymbolKeyword", arguments);
    }
    function tsUndefinedKeyword() {
        return r69.default.apply("TSUndefinedKeyword", arguments);
    }
    function tsUnknownKeyword() {
        return r69.default.apply("TSUnknownKeyword", arguments);
    }
    function tsVoidKeyword() {
        return r69.default.apply("TSVoidKeyword", arguments);
    }
    function tsThisType() {
        return r69.default.apply("TSThisType", arguments);
    }
    function tsFunctionType(e, t, n) {
        return r69.default.apply("TSFunctionType", arguments);
    }
    function tsConstructorType(e, t, n) {
        return r69.default.apply("TSConstructorType", arguments);
    }
    function tsTypeReference(e, t) {
        return r69.default.apply("TSTypeReference", arguments);
    }
    function tsTypePredicate(e, t, n) {
        return r69.default.apply("TSTypePredicate", arguments);
    }
    function tsTypeQuery(e) {
        return r69.default.apply("TSTypeQuery", arguments);
    }
    function tsTypeLiteral(e) {
        return r69.default.apply("TSTypeLiteral", arguments);
    }
    function tsArrayType(e) {
        return r69.default.apply("TSArrayType", arguments);
    }
    function tsTupleType(e) {
        return r69.default.apply("TSTupleType", arguments);
    }
    function tsOptionalType(e) {
        return r69.default.apply("TSOptionalType", arguments);
    }
    function tsRestType(e) {
        return r69.default.apply("TSRestType", arguments);
    }
    function tsNamedTupleMember(e, t, n) {
        return r69.default.apply("TSNamedTupleMember", arguments);
    }
    function tsUnionType(e) {
        return r69.default.apply("TSUnionType", arguments);
    }
    function tsIntersectionType(e) {
        return r69.default.apply("TSIntersectionType", arguments);
    }
    function tsConditionalType(e, t, n, a) {
        return r69.default.apply("TSConditionalType", arguments);
    }
    function tsInferType(e) {
        return r69.default.apply("TSInferType", arguments);
    }
    function tsParenthesizedType(e) {
        return r69.default.apply("TSParenthesizedType", arguments);
    }
    function tsTypeOperator(e) {
        return r69.default.apply("TSTypeOperator", arguments);
    }
    function tsIndexedAccessType(e, t) {
        return r69.default.apply("TSIndexedAccessType", arguments);
    }
    function tsMappedType(e, t, n) {
        return r69.default.apply("TSMappedType", arguments);
    }
    function tsLiteralType(e) {
        return r69.default.apply("TSLiteralType", arguments);
    }
    function tsExpressionWithTypeArguments(e, t) {
        return r69.default.apply("TSExpressionWithTypeArguments", arguments);
    }
    function tsInterfaceDeclaration(e, t, n, a) {
        return r69.default.apply("TSInterfaceDeclaration", arguments);
    }
    function tsInterfaceBody(e) {
        return r69.default.apply("TSInterfaceBody", arguments);
    }
    function tsTypeAliasDeclaration(e, t, n) {
        return r69.default.apply("TSTypeAliasDeclaration", arguments);
    }
    function tsAsExpression(e, t) {
        return r69.default.apply("TSAsExpression", arguments);
    }
    function tsTypeAssertion(e, t) {
        return r69.default.apply("TSTypeAssertion", arguments);
    }
    function tsEnumDeclaration(e, t) {
        return r69.default.apply("TSEnumDeclaration", arguments);
    }
    function tsEnumMember(e, t) {
        return r69.default.apply("TSEnumMember", arguments);
    }
    function tsModuleDeclaration(e, t) {
        return r69.default.apply("TSModuleDeclaration", arguments);
    }
    function tsModuleBlock(e) {
        return r69.default.apply("TSModuleBlock", arguments);
    }
    function tsImportType(e, t, n) {
        return r69.default.apply("TSImportType", arguments);
    }
    function tsImportEqualsDeclaration(e, t) {
        return r69.default.apply("TSImportEqualsDeclaration", arguments);
    }
    function tsExternalModuleReference(e) {
        return r69.default.apply("TSExternalModuleReference", arguments);
    }
    function tsNonNullExpression(e) {
        return r69.default.apply("TSNonNullExpression", arguments);
    }
    function tsExportAssignment(e) {
        return r69.default.apply("TSExportAssignment", arguments);
    }
    function tsNamespaceExportDeclaration(e) {
        return r69.default.apply("TSNamespaceExportDeclaration", arguments);
    }
    function tsTypeAnnotation(e) {
        return r69.default.apply("TSTypeAnnotation", arguments);
    }
    function tsTypeParameterInstantiation(e) {
        return r69.default.apply("TSTypeParameterInstantiation", arguments);
    }
    function tsTypeParameterDeclaration(e) {
        return r69.default.apply("TSTypeParameterDeclaration", arguments);
    }
    function tsTypeParameter(e, t, n) {
        return r69.default.apply("TSTypeParameter", arguments);
    }
    function NumberLiteral(e) {
        console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
        return r69.default.apply("NumberLiteral", arguments);
    }
    function RegexLiteral(e, t) {
        console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
        return r69.default.apply("RegexLiteral", arguments);
    }
    function RestProperty(e) {
        console.trace("The node type RestProperty has been renamed to RestElement");
        return r69.default.apply("RestProperty", arguments);
    }
    function SpreadProperty(e) {
        console.trace("The node type SpreadProperty has been renamed to SpreadElement");
        return r69.default.apply("SpreadProperty", arguments);
    }
    return t5;
}
var t6 = {}, l4 = false;
function dew6() {
    if (l4) return t6;
    l4 = true;
    Object.defineProperty(t6, "__esModule", {
        value: true
    });
    t6.default = cleanJSXElementLiteralChild;
    var r115 = dew5();
    function cleanJSXElementLiteralChild(e312, t2103) {
        const l112 = e312.value.split(/\r\n|\n|\r/);
        let n302 = 0;
        for(let e1 = 0; e1 < l112.length; e1++)l112[e1].match(/[^ \t]/) && (n302 = e1);
        let a = "";
        for(let e2 = 0; e2 < l112.length; e2++){
            const t1104 = l112[e2];
            const r70 = 0 === e2;
            const c49 = e2 === l112.length - 1;
            const o61 = e2 === n302;
            let i55 = t1104.replace(/\t/g, " ");
            r70 || (i55 = i55.replace(/^[ ]+/, ""));
            c49 || (i55 = i55.replace(/[ ]+$/, ""));
            if (i55) {
                o61 || (i55 += " ");
                a += i55;
            }
        }
        a && t2103.push((0, r115.stringLiteral)(a));
    }
    return t6;
}
var a2 = {}, t7 = false;
function dew$11() {
    if (t7) return a2;
    t7 = true;
    Object.defineProperty(a2, "__esModule", {
        value: true
    });
    a2.default = isLet;
    var i113 = dew1();
    var n1103 = dew2();
    function isLet(e1) {
        return (0, i113.isVariableDeclaration)(e1) && ("var" !== e1.kind || e1[n1103.BLOCK_SCOPED_SYMBOL]);
    }
    return a2;
}
var i3 = {}, n7 = false;
function dew7() {
    if (n7) return i3;
    n7 = true;
    Object.defineProperty(i3, "__esModule", {
        value: true
    });
    i3.default = isBlockScoped;
    var r116 = dew1();
    var a112 = dew$11();
    function isBlockScoped(e2) {
        return (0, r116.isFunctionDeclaration)(e2) || (0, r116.isClassDeclaration)(e2) || (0, a112.default)(e2);
    }
    return i3;
}
var e4 = {}, r6 = false;
function dew8() {
    if (r6) return e4;
    r6 = true;
    Object.defineProperty(e4, "__esModule", {
        value: true
    });
    e4.default = isReferenced;
    function isReferenced(e1, r117, t302) {
        switch(r117.type){
            case "MemberExpression":
            case "OptionalMemberExpression":
                return r117.property === e1 ? !!r117.computed : r117.object === e1;
            case "JSXMemberExpression":
                return r117.object === e1;
            case "VariableDeclarator":
                return r117.init === e1;
            case "ArrowFunctionExpression":
                return r117.body === e1;
            case "PrivateName":
                return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
                return r117.key === e1 && !!r117.computed;
            case "ObjectProperty":
                return r117.key === e1 ? !!r117.computed : !t302 || "ObjectPattern" !== t302.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
                return r117.key !== e1 || !!r117.computed;
            case "ClassPrivateProperty":
                return r117.key !== e1;
            case "ClassDeclaration":
            case "ClassExpression":
                return r117.superClass === e1;
            case "AssignmentExpression":
                return r117.right === e1;
            case "AssignmentPattern":
                return r117.right === e1;
            case "LabeledStatement":
                return false;
            case "CatchClause":
                return false;
            case "RestElement":
                return false;
            case "BreakStatement":
            case "ContinueStatement":
                return false;
            case "FunctionDeclaration":
            case "FunctionExpression":
                return false;
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
                return false;
            case "ExportSpecifier":
                return (null == t302 || !t302.source) && r117.local === e1;
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
                return false;
            case "ImportAttribute":
                return false;
            case "JSXAttribute":
                return false;
            case "ObjectPattern":
            case "ArrayPattern":
                return false;
            case "MetaProperty":
                return false;
            case "ObjectTypeProperty":
                return r117.key !== e1;
            case "TSEnumMember":
                return r117.id !== e1;
            case "TSPropertySignature":
                return r117.key !== e1 || !!r117.computed;
        }
        return true;
    }
    return e4;
}
var S4 = {}, m4 = false;
function dew$U() {
    if (m4) return S4;
    m4 = true;
    Object.defineProperty(S4, "__esModule", {
        value: true
    });
    S4.default = matchesPattern;
    var t1105 = dew1();
    function matchesPattern(e2, r212, s112) {
        if (!(0, t1105.isMemberExpression)(e2)) return false;
        const a113 = Array.isArray(r212) ? r212 : r212.split(".");
        const n1104 = [];
        let i114;
        for(i114 = e2; (0, t1105.isMemberExpression)(i114); i114 = i114.object)n1104.push(i114.property);
        n1104.push(i114);
        if (n1104.length < a113.length) return false;
        if (!s112 && n1104.length > a113.length) return false;
        for(let e1 = 0, r118 = n1104.length - 1; e1 < a113.length; e1++, r118--){
            const s211 = n1104[r118];
            let i212;
            if ((0, t1105.isIdentifier)(s211)) i212 = s211.name;
            else if ((0, t1105.isStringLiteral)(s211)) i212 = s211.value;
            else {
                if (!(0, t1105.isThisExpression)(s211)) return false;
                i212 = "this";
            }
            if (a113[e1] !== i212) return false;
        }
        return true;
    }
    return S4;
}
var f4 = {}, E3 = false;
function dew$T() {
    if (E3) return f4;
    E3 = true;
    Object.defineProperty(f4, "__esModule", {
        value: true
    });
    f4.default = buildMatchMemberExpression;
    var e313 = dew$U();
    function buildMatchMemberExpression(t2104, r312) {
        const s311 = t2104.split(".");
        return (t312)=>(0, e313.default)(t312, s311, r312)
        ;
    }
    return f4;
}
var P3 = {}, b4 = false;
function dew$S() {
    if (b4) return P3;
    b4 = true;
    Object.defineProperty(P3, "__esModule", {
        value: true
    });
    P3.default = void 0;
    var e410 = dew$T();
    const t411 = (0, e410.default)("React.Component");
    var r412 = t411;
    P3.default = r412;
    return P3;
}
var A3 = {}, x3 = false;
function dew$R() {
    if (x3) return A3;
    x3 = true;
    Object.defineProperty(A3, "__esModule", {
        value: true
    });
    A3.default = isCompatTag;
    function isCompatTag(e5) {
        return !!e5 && /^[a-z]/.test(e5);
    }
    return A3;
}
var O4 = {}, g3 = false;
function dew$Q() {
    if (g3) return O4;
    g3 = true;
    Object.defineProperty(O4, "__esModule", {
        value: true
    });
    O4.default = buildChildren;
    var r510 = dew1();
    var s4 = dew6();
    function buildChildren(e6) {
        const t510 = [];
        for(let a210 = 0; a210 < e6.children.length; a210++){
            let n2101 = e6.children[a210];
            if ((0, r510.isJSXText)(n2101)) (0, s4.default)(n2101, t510);
            else {
                (0, r510.isJSXExpressionContainer)(n2101) && (n2101 = n2101.expression);
                (0, r510.isJSXEmptyExpression)(n2101) || t510.push(n2101);
            }
        }
        return t510;
    }
    return O4;
}
var I4 = {}, D3 = false;
function dew$P() {
    if (D3) return I4;
    D3 = true;
    Object.defineProperty(I4, "__esModule", {
        value: true
    });
    I4.default = isNode;
    var e7 = dew3();
    function isNode(t610) {
        return !!(t610 && e7.VISITOR_KEYS[t610.type]);
    }
    return I4;
}
var j2 = {}, L3 = false;
function dew$O() {
    if (L3) return j2;
    L3 = true;
    Object.defineProperty(j2, "__esModule", {
        value: true
    });
    j2.default = assertNode;
    var e8 = dew$P();
    function assertNode(t710) {
        if (!(0, e8.default)(t710)) {
            var r610;
            const e9 = null != (r610 = null == t710 ? void 0 : t710.type) ? r610 : JSON.stringify(t710);
            throw new TypeError(`Not a valid node of type "${e9}"`);
        }
    }
    return j2;
}
var N3 = {}, C2 = false;
function dew$N() {
    if (C2) return N3;
    C2 = true;
    Object.defineProperty(N3, "__esModule", {
        value: true
    });
    N3.assertAccessor = assertAccessor;
    N3.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
    N3.assertArgumentPlaceholder = assertArgumentPlaceholder;
    N3.assertArrayExpression = assertArrayExpression;
    N3.assertArrayPattern = assertArrayPattern;
    N3.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
    N3.assertArrowFunctionExpression = assertArrowFunctionExpression;
    N3.assertAssignmentExpression = assertAssignmentExpression;
    N3.assertAssignmentPattern = assertAssignmentPattern;
    N3.assertAwaitExpression = assertAwaitExpression;
    N3.assertBigIntLiteral = assertBigIntLiteral;
    N3.assertBinary = assertBinary;
    N3.assertBinaryExpression = assertBinaryExpression;
    N3.assertBindExpression = assertBindExpression;
    N3.assertBlock = assertBlock;
    N3.assertBlockParent = assertBlockParent;
    N3.assertBlockStatement = assertBlockStatement;
    N3.assertBooleanLiteral = assertBooleanLiteral;
    N3.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
    N3.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
    N3.assertBreakStatement = assertBreakStatement;
    N3.assertCallExpression = assertCallExpression;
    N3.assertCatchClause = assertCatchClause;
    N3.assertClass = assertClass;
    N3.assertClassAccessorProperty = assertClassAccessorProperty;
    N3.assertClassBody = assertClassBody;
    N3.assertClassDeclaration = assertClassDeclaration;
    N3.assertClassExpression = assertClassExpression;
    N3.assertClassImplements = assertClassImplements;
    N3.assertClassMethod = assertClassMethod;
    N3.assertClassPrivateMethod = assertClassPrivateMethod;
    N3.assertClassPrivateProperty = assertClassPrivateProperty;
    N3.assertClassProperty = assertClassProperty;
    N3.assertCompletionStatement = assertCompletionStatement;
    N3.assertConditional = assertConditional;
    N3.assertConditionalExpression = assertConditionalExpression;
    N3.assertContinueStatement = assertContinueStatement;
    N3.assertDebuggerStatement = assertDebuggerStatement;
    N3.assertDecimalLiteral = assertDecimalLiteral;
    N3.assertDeclaration = assertDeclaration;
    N3.assertDeclareClass = assertDeclareClass;
    N3.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
    N3.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
    N3.assertDeclareFunction = assertDeclareFunction;
    N3.assertDeclareInterface = assertDeclareInterface;
    N3.assertDeclareModule = assertDeclareModule;
    N3.assertDeclareModuleExports = assertDeclareModuleExports;
    N3.assertDeclareOpaqueType = assertDeclareOpaqueType;
    N3.assertDeclareTypeAlias = assertDeclareTypeAlias;
    N3.assertDeclareVariable = assertDeclareVariable;
    N3.assertDeclaredPredicate = assertDeclaredPredicate;
    N3.assertDecorator = assertDecorator;
    N3.assertDirective = assertDirective;
    N3.assertDirectiveLiteral = assertDirectiveLiteral;
    N3.assertDoExpression = assertDoExpression;
    N3.assertDoWhileStatement = assertDoWhileStatement;
    N3.assertEmptyStatement = assertEmptyStatement;
    N3.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
    N3.assertEnumBody = assertEnumBody;
    N3.assertEnumBooleanBody = assertEnumBooleanBody;
    N3.assertEnumBooleanMember = assertEnumBooleanMember;
    N3.assertEnumDeclaration = assertEnumDeclaration;
    N3.assertEnumDefaultedMember = assertEnumDefaultedMember;
    N3.assertEnumMember = assertEnumMember;
    N3.assertEnumNumberBody = assertEnumNumberBody;
    N3.assertEnumNumberMember = assertEnumNumberMember;
    N3.assertEnumStringBody = assertEnumStringBody;
    N3.assertEnumStringMember = assertEnumStringMember;
    N3.assertEnumSymbolBody = assertEnumSymbolBody;
    N3.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
    N3.assertExportAllDeclaration = assertExportAllDeclaration;
    N3.assertExportDeclaration = assertExportDeclaration;
    N3.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
    N3.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
    N3.assertExportNamedDeclaration = assertExportNamedDeclaration;
    N3.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
    N3.assertExportSpecifier = assertExportSpecifier1;
    N3.assertExpression = assertExpression;
    N3.assertExpressionStatement = assertExpressionStatement;
    N3.assertExpressionWrapper = assertExpressionWrapper;
    N3.assertFile = assertFile;
    N3.assertFlow = assertFlow;
    N3.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
    N3.assertFlowDeclaration = assertFlowDeclaration;
    N3.assertFlowPredicate = assertFlowPredicate;
    N3.assertFlowType = assertFlowType;
    N3.assertFor = assertFor;
    N3.assertForInStatement = assertForInStatement;
    N3.assertForOfStatement = assertForOfStatement;
    N3.assertForStatement = assertForStatement;
    N3.assertForXStatement = assertForXStatement;
    N3.assertFunction = assertFunction;
    N3.assertFunctionDeclaration = assertFunctionDeclaration;
    N3.assertFunctionExpression = assertFunctionExpression;
    N3.assertFunctionParent = assertFunctionParent;
    N3.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
    N3.assertFunctionTypeParam = assertFunctionTypeParam;
    N3.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
    N3.assertIdentifier = assertIdentifier;
    N3.assertIfStatement = assertIfStatement;
    N3.assertImmutable = assertImmutable;
    N3.assertImport = assertImport;
    N3.assertImportAttribute = assertImportAttribute;
    N3.assertImportDeclaration = assertImportDeclaration;
    N3.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
    N3.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
    N3.assertImportSpecifier = assertImportSpecifier;
    N3.assertIndexedAccessType = assertIndexedAccessType;
    N3.assertInferredPredicate = assertInferredPredicate;
    N3.assertInterfaceDeclaration = assertInterfaceDeclaration;
    N3.assertInterfaceExtends = assertInterfaceExtends;
    N3.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
    N3.assertInterpreterDirective = assertInterpreterDirective;
    N3.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
    N3.assertJSX = assertJSX;
    N3.assertJSXAttribute = assertJSXAttribute;
    N3.assertJSXClosingElement = assertJSXClosingElement;
    N3.assertJSXClosingFragment = assertJSXClosingFragment;
    N3.assertJSXElement = assertJSXElement;
    N3.assertJSXEmptyExpression = assertJSXEmptyExpression;
    N3.assertJSXExpressionContainer = assertJSXExpressionContainer;
    N3.assertJSXFragment = assertJSXFragment;
    N3.assertJSXIdentifier = assertJSXIdentifier;
    N3.assertJSXMemberExpression = assertJSXMemberExpression;
    N3.assertJSXNamespacedName = assertJSXNamespacedName;
    N3.assertJSXOpeningElement = assertJSXOpeningElement;
    N3.assertJSXOpeningFragment = assertJSXOpeningFragment;
    N3.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
    N3.assertJSXSpreadChild = assertJSXSpreadChild;
    N3.assertJSXText = assertJSXText;
    N3.assertLVal = assertLVal;
    N3.assertLabeledStatement = assertLabeledStatement;
    N3.assertLiteral = assertLiteral;
    N3.assertLogicalExpression = assertLogicalExpression;
    N3.assertLoop = assertLoop;
    N3.assertMemberExpression = assertMemberExpression;
    N3.assertMetaProperty = assertMetaProperty;
    N3.assertMethod = assertMethod;
    N3.assertMiscellaneous = assertMiscellaneous;
    N3.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
    N3.assertModuleDeclaration = assertModuleDeclaration;
    N3.assertModuleExpression = assertModuleExpression;
    N3.assertModuleSpecifier = assertModuleSpecifier;
    N3.assertNewExpression = assertNewExpression;
    N3.assertNoop = assertNoop;
    N3.assertNullLiteral = assertNullLiteral;
    N3.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
    N3.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
    N3.assertNumberLiteral = assertNumberLiteral;
    N3.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
    N3.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
    N3.assertNumericLiteral = assertNumericLiteral;
    N3.assertObjectExpression = assertObjectExpression;
    N3.assertObjectMember = assertObjectMember;
    N3.assertObjectMethod = assertObjectMethod;
    N3.assertObjectPattern = assertObjectPattern;
    N3.assertObjectProperty = assertObjectProperty;
    N3.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
    N3.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
    N3.assertObjectTypeIndexer = assertObjectTypeIndexer;
    N3.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
    N3.assertObjectTypeProperty = assertObjectTypeProperty;
    N3.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
    N3.assertOpaqueType = assertOpaqueType;
    N3.assertOptionalCallExpression = assertOptionalCallExpression;
    N3.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
    N3.assertOptionalMemberExpression = assertOptionalMemberExpression;
    N3.assertParenthesizedExpression = assertParenthesizedExpression;
    N3.assertPattern = assertPattern;
    N3.assertPatternLike = assertPatternLike;
    N3.assertPipelineBareFunction = assertPipelineBareFunction;
    N3.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
    N3.assertPipelineTopicExpression = assertPipelineTopicExpression;
    N3.assertPlaceholder = assertPlaceholder;
    N3.assertPrivate = assertPrivate;
    N3.assertPrivateName = assertPrivateName;
    N3.assertProgram = assertProgram;
    N3.assertProperty = assertProperty;
    N3.assertPureish = assertPureish;
    N3.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
    N3.assertRecordExpression = assertRecordExpression;
    N3.assertRegExpLiteral = assertRegExpLiteral;
    N3.assertRegexLiteral = assertRegexLiteral;
    N3.assertRestElement = assertRestElement;
    N3.assertRestProperty = assertRestProperty;
    N3.assertReturnStatement = assertReturnStatement;
    N3.assertScopable = assertScopable;
    N3.assertSequenceExpression = assertSequenceExpression;
    N3.assertSpreadElement = assertSpreadElement;
    N3.assertSpreadProperty = assertSpreadProperty;
    N3.assertStandardized = assertStandardized;
    N3.assertStatement = assertStatement;
    N3.assertStaticBlock = assertStaticBlock;
    N3.assertStringLiteral = assertStringLiteral;
    N3.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
    N3.assertStringTypeAnnotation = assertStringTypeAnnotation;
    N3.assertSuper = assertSuper;
    N3.assertSwitchCase = assertSwitchCase;
    N3.assertSwitchStatement = assertSwitchStatement;
    N3.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
    N3.assertTSAnyKeyword = assertTSAnyKeyword;
    N3.assertTSArrayType = assertTSArrayType;
    N3.assertTSAsExpression = assertTSAsExpression;
    N3.assertTSBaseType = assertTSBaseType;
    N3.assertTSBigIntKeyword = assertTSBigIntKeyword;
    N3.assertTSBooleanKeyword = assertTSBooleanKeyword;
    N3.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
    N3.assertTSConditionalType = assertTSConditionalType;
    N3.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
    N3.assertTSConstructorType = assertTSConstructorType;
    N3.assertTSDeclareFunction = assertTSDeclareFunction;
    N3.assertTSDeclareMethod = assertTSDeclareMethod;
    N3.assertTSEntityName = assertTSEntityName;
    N3.assertTSEnumDeclaration = assertTSEnumDeclaration;
    N3.assertTSEnumMember = assertTSEnumMember;
    N3.assertTSExportAssignment = assertTSExportAssignment;
    N3.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
    N3.assertTSExternalModuleReference = assertTSExternalModuleReference;
    N3.assertTSFunctionType = assertTSFunctionType;
    N3.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
    N3.assertTSImportType = assertTSImportType;
    N3.assertTSIndexSignature = assertTSIndexSignature;
    N3.assertTSIndexedAccessType = assertTSIndexedAccessType;
    N3.assertTSInferType = assertTSInferType;
    N3.assertTSInterfaceBody = assertTSInterfaceBody;
    N3.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
    N3.assertTSIntersectionType = assertTSIntersectionType;
    N3.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
    N3.assertTSLiteralType = assertTSLiteralType;
    N3.assertTSMappedType = assertTSMappedType;
    N3.assertTSMethodSignature = assertTSMethodSignature;
    N3.assertTSModuleBlock = assertTSModuleBlock;
    N3.assertTSModuleDeclaration = assertTSModuleDeclaration;
    N3.assertTSNamedTupleMember = assertTSNamedTupleMember;
    N3.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
    N3.assertTSNeverKeyword = assertTSNeverKeyword;
    N3.assertTSNonNullExpression = assertTSNonNullExpression;
    N3.assertTSNullKeyword = assertTSNullKeyword;
    N3.assertTSNumberKeyword = assertTSNumberKeyword;
    N3.assertTSObjectKeyword = assertTSObjectKeyword;
    N3.assertTSOptionalType = assertTSOptionalType;
    N3.assertTSParameterProperty = assertTSParameterProperty;
    N3.assertTSParenthesizedType = assertTSParenthesizedType;
    N3.assertTSPropertySignature = assertTSPropertySignature;
    N3.assertTSQualifiedName = assertTSQualifiedName;
    N3.assertTSRestType = assertTSRestType;
    N3.assertTSStringKeyword = assertTSStringKeyword;
    N3.assertTSSymbolKeyword = assertTSSymbolKeyword;
    N3.assertTSThisType = assertTSThisType;
    N3.assertTSTupleType = assertTSTupleType;
    N3.assertTSType = assertTSType;
    N3.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
    N3.assertTSTypeAnnotation = assertTSTypeAnnotation;
    N3.assertTSTypeAssertion = assertTSTypeAssertion;
    N3.assertTSTypeElement = assertTSTypeElement;
    N3.assertTSTypeLiteral = assertTSTypeLiteral;
    N3.assertTSTypeOperator = assertTSTypeOperator;
    N3.assertTSTypeParameter = assertTSTypeParameter;
    N3.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
    N3.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
    N3.assertTSTypePredicate = assertTSTypePredicate;
    N3.assertTSTypeQuery = assertTSTypeQuery;
    N3.assertTSTypeReference = assertTSTypeReference;
    N3.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
    N3.assertTSUnionType = assertTSUnionType;
    N3.assertTSUnknownKeyword = assertTSUnknownKeyword;
    N3.assertTSVoidKeyword = assertTSVoidKeyword;
    N3.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
    N3.assertTemplateElement = assertTemplateElement;
    N3.assertTemplateLiteral = assertTemplateLiteral;
    N3.assertTerminatorless = assertTerminatorless;
    N3.assertThisExpression = assertThisExpression;
    N3.assertThisTypeAnnotation = assertThisTypeAnnotation;
    N3.assertThrowStatement = assertThrowStatement;
    N3.assertTopicReference = assertTopicReference;
    N3.assertTryStatement = assertTryStatement;
    N3.assertTupleExpression = assertTupleExpression;
    N3.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
    N3.assertTypeAlias = assertTypeAlias;
    N3.assertTypeAnnotation = assertTypeAnnotation;
    N3.assertTypeCastExpression = assertTypeCastExpression;
    N3.assertTypeParameter = assertTypeParameter;
    N3.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
    N3.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
    N3.assertTypeScript = assertTypeScript;
    N3.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
    N3.assertUnaryExpression = assertUnaryExpression;
    N3.assertUnaryLike = assertUnaryLike;
    N3.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
    N3.assertUpdateExpression = assertUpdateExpression;
    N3.assertUserWhitespacable = assertUserWhitespacable;
    N3.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
    N3.assertVariableDeclaration = assertVariableDeclaration;
    N3.assertVariableDeclarator = assertVariableDeclarator;
    N3.assertVariance = assertVariance;
    N3.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
    N3.assertWhile = assertWhile;
    N3.assertWhileStatement = assertWhileStatement;
    N3.assertWithStatement = assertWithStatement;
    N3.assertYieldExpression = assertYieldExpression;
    var e10 = dew$b();
    function assert2(t8, r7, s5) {
        if (!(0, e10.default)(t8, r7, s5)) throw new Error(`Expected type "${t8}" with option ${JSON.stringify(s5)}, but instead got "${r7.type}".`);
    }
    function assertArrayExpression(e11, t9) {
        assert2("ArrayExpression", e11, t9);
    }
    function assertAssignmentExpression(e12, t10) {
        assert2("AssignmentExpression", e12, t10);
    }
    function assertBinaryExpression(e13, t11) {
        assert2("BinaryExpression", e13, t11);
    }
    function assertInterpreterDirective(e14, t12) {
        assert2("InterpreterDirective", e14, t12);
    }
    function assertDirective(e15, t13) {
        assert2("Directive", e15, t13);
    }
    function assertDirectiveLiteral(e16, t14) {
        assert2("DirectiveLiteral", e16, t14);
    }
    function assertBlockStatement(e17, t15) {
        assert2("BlockStatement", e17, t15);
    }
    function assertBreakStatement(e18, t16) {
        assert2("BreakStatement", e18, t16);
    }
    function assertCallExpression(e19, t17) {
        assert2("CallExpression", e19, t17);
    }
    function assertCatchClause(e20, t18) {
        assert2("CatchClause", e20, t18);
    }
    function assertConditionalExpression(e21, t19) {
        assert2("ConditionalExpression", e21, t19);
    }
    function assertContinueStatement(e22, t20) {
        assert2("ContinueStatement", e22, t20);
    }
    function assertDebuggerStatement(e23, t21) {
        assert2("DebuggerStatement", e23, t21);
    }
    function assertDoWhileStatement(e24, t22) {
        assert2("DoWhileStatement", e24, t22);
    }
    function assertEmptyStatement(e25, t23) {
        assert2("EmptyStatement", e25, t23);
    }
    function assertExpressionStatement(e26, t24) {
        assert2("ExpressionStatement", e26, t24);
    }
    function assertFile(e27, t25) {
        assert2("File", e27, t25);
    }
    function assertForInStatement(e28, t26) {
        assert2("ForInStatement", e28, t26);
    }
    function assertForStatement(e29, t27) {
        assert2("ForStatement", e29, t27);
    }
    function assertFunctionDeclaration(e30, t28) {
        assert2("FunctionDeclaration", e30, t28);
    }
    function assertFunctionExpression(e31, t29) {
        assert2("FunctionExpression", e31, t29);
    }
    function assertIdentifier(e32, t30) {
        assert2("Identifier", e32, t30);
    }
    function assertIfStatement(e33, t31) {
        assert2("IfStatement", e33, t31);
    }
    function assertLabeledStatement(e34, t32) {
        assert2("LabeledStatement", e34, t32);
    }
    function assertStringLiteral(e35, t33) {
        assert2("StringLiteral", e35, t33);
    }
    function assertNumericLiteral(e36, t34) {
        assert2("NumericLiteral", e36, t34);
    }
    function assertNullLiteral(e37, t35) {
        assert2("NullLiteral", e37, t35);
    }
    function assertBooleanLiteral(e38, t36) {
        assert2("BooleanLiteral", e38, t36);
    }
    function assertRegExpLiteral(e39, t37) {
        assert2("RegExpLiteral", e39, t37);
    }
    function assertLogicalExpression(e40, t38) {
        assert2("LogicalExpression", e40, t38);
    }
    function assertMemberExpression(e41, t39) {
        assert2("MemberExpression", e41, t39);
    }
    function assertNewExpression(e42, t40) {
        assert2("NewExpression", e42, t40);
    }
    function assertProgram(e43, t41) {
        assert2("Program", e43, t41);
    }
    function assertObjectExpression(e44, t42) {
        assert2("ObjectExpression", e44, t42);
    }
    function assertObjectMethod(e45, t43) {
        assert2("ObjectMethod", e45, t43);
    }
    function assertObjectProperty(e46, t44) {
        assert2("ObjectProperty", e46, t44);
    }
    function assertRestElement(e47, t45) {
        assert2("RestElement", e47, t45);
    }
    function assertReturnStatement(e48, t46) {
        assert2("ReturnStatement", e48, t46);
    }
    function assertSequenceExpression(e49, t47) {
        assert2("SequenceExpression", e49, t47);
    }
    function assertParenthesizedExpression(e50, t48) {
        assert2("ParenthesizedExpression", e50, t48);
    }
    function assertSwitchCase(e51, t49) {
        assert2("SwitchCase", e51, t49);
    }
    function assertSwitchStatement(e52, t50) {
        assert2("SwitchStatement", e52, t50);
    }
    function assertThisExpression(e53, t51) {
        assert2("ThisExpression", e53, t51);
    }
    function assertThrowStatement(e54, t52) {
        assert2("ThrowStatement", e54, t52);
    }
    function assertTryStatement(e55, t53) {
        assert2("TryStatement", e55, t53);
    }
    function assertUnaryExpression(e56, t54) {
        assert2("UnaryExpression", e56, t54);
    }
    function assertUpdateExpression(e57, t55) {
        assert2("UpdateExpression", e57, t55);
    }
    function assertVariableDeclaration(e58, t56) {
        assert2("VariableDeclaration", e58, t56);
    }
    function assertVariableDeclarator(e59, t57) {
        assert2("VariableDeclarator", e59, t57);
    }
    function assertWhileStatement(e60, t58) {
        assert2("WhileStatement", e60, t58);
    }
    function assertWithStatement(e61, t59) {
        assert2("WithStatement", e61, t59);
    }
    function assertAssignmentPattern(e62, t60) {
        assert2("AssignmentPattern", e62, t60);
    }
    function assertArrayPattern(e63, t61) {
        assert2("ArrayPattern", e63, t61);
    }
    function assertArrowFunctionExpression(e64, t62) {
        assert2("ArrowFunctionExpression", e64, t62);
    }
    function assertClassBody(e65, t63) {
        assert2("ClassBody", e65, t63);
    }
    function assertClassExpression(e66, t64) {
        assert2("ClassExpression", e66, t64);
    }
    function assertClassDeclaration(e67, t65) {
        assert2("ClassDeclaration", e67, t65);
    }
    function assertExportAllDeclaration(e68, t66) {
        assert2("ExportAllDeclaration", e68, t66);
    }
    function assertExportDefaultDeclaration(e69, t67) {
        assert2("ExportDefaultDeclaration", e69, t67);
    }
    function assertExportNamedDeclaration(e70, t68) {
        assert2("ExportNamedDeclaration", e70, t68);
    }
    function assertExportSpecifier1(e71, t69) {
        assert2("ExportSpecifier", e71, t69);
    }
    function assertForOfStatement(e72, t70) {
        assert2("ForOfStatement", e72, t70);
    }
    function assertImportDeclaration(e73, t71) {
        assert2("ImportDeclaration", e73, t71);
    }
    function assertImportDefaultSpecifier(e74, t72) {
        assert2("ImportDefaultSpecifier", e74, t72);
    }
    function assertImportNamespaceSpecifier(e75, t73) {
        assert2("ImportNamespaceSpecifier", e75, t73);
    }
    function assertImportSpecifier(e76, t74) {
        assert2("ImportSpecifier", e76, t74);
    }
    function assertMetaProperty(e77, t75) {
        assert2("MetaProperty", e77, t75);
    }
    function assertClassMethod(e78, t76) {
        assert2("ClassMethod", e78, t76);
    }
    function assertObjectPattern(e79, t77) {
        assert2("ObjectPattern", e79, t77);
    }
    function assertSpreadElement(e80, t78) {
        assert2("SpreadElement", e80, t78);
    }
    function assertSuper(e81, t79) {
        assert2("Super", e81, t79);
    }
    function assertTaggedTemplateExpression(e82, t80) {
        assert2("TaggedTemplateExpression", e82, t80);
    }
    function assertTemplateElement(e83, t81) {
        assert2("TemplateElement", e83, t81);
    }
    function assertTemplateLiteral(e84, t82) {
        assert2("TemplateLiteral", e84, t82);
    }
    function assertYieldExpression(e85, t83) {
        assert2("YieldExpression", e85, t83);
    }
    function assertAwaitExpression(e86, t84) {
        assert2("AwaitExpression", e86, t84);
    }
    function assertImport(e87, t85) {
        assert2("Import", e87, t85);
    }
    function assertBigIntLiteral(e88, t86) {
        assert2("BigIntLiteral", e88, t86);
    }
    function assertExportNamespaceSpecifier(e89, t87) {
        assert2("ExportNamespaceSpecifier", e89, t87);
    }
    function assertOptionalMemberExpression(e90, t88) {
        assert2("OptionalMemberExpression", e90, t88);
    }
    function assertOptionalCallExpression(e91, t89) {
        assert2("OptionalCallExpression", e91, t89);
    }
    function assertClassProperty(e92, t90) {
        assert2("ClassProperty", e92, t90);
    }
    function assertClassAccessorProperty(e93, t91) {
        assert2("ClassAccessorProperty", e93, t91);
    }
    function assertClassPrivateProperty(e94, t92) {
        assert2("ClassPrivateProperty", e94, t92);
    }
    function assertClassPrivateMethod(e95, t93) {
        assert2("ClassPrivateMethod", e95, t93);
    }
    function assertPrivateName(e96, t94) {
        assert2("PrivateName", e96, t94);
    }
    function assertStaticBlock(e97, t95) {
        assert2("StaticBlock", e97, t95);
    }
    function assertAnyTypeAnnotation(e98, t96) {
        assert2("AnyTypeAnnotation", e98, t96);
    }
    function assertArrayTypeAnnotation(e99, t97) {
        assert2("ArrayTypeAnnotation", e99, t97);
    }
    function assertBooleanTypeAnnotation(e100, t98) {
        assert2("BooleanTypeAnnotation", e100, t98);
    }
    function assertBooleanLiteralTypeAnnotation(e101, t99) {
        assert2("BooleanLiteralTypeAnnotation", e101, t99);
    }
    function assertNullLiteralTypeAnnotation(e102, t100) {
        assert2("NullLiteralTypeAnnotation", e102, t100);
    }
    function assertClassImplements(e103, t101) {
        assert2("ClassImplements", e103, t101);
    }
    function assertDeclareClass(e104, t102) {
        assert2("DeclareClass", e104, t102);
    }
    function assertDeclareFunction(e105, t103) {
        assert2("DeclareFunction", e105, t103);
    }
    function assertDeclareInterface(e106, t104) {
        assert2("DeclareInterface", e106, t104);
    }
    function assertDeclareModule(e107, t105) {
        assert2("DeclareModule", e107, t105);
    }
    function assertDeclareModuleExports(e108, t106) {
        assert2("DeclareModuleExports", e108, t106);
    }
    function assertDeclareTypeAlias(e109, t107) {
        assert2("DeclareTypeAlias", e109, t107);
    }
    function assertDeclareOpaqueType(e110, t108) {
        assert2("DeclareOpaqueType", e110, t108);
    }
    function assertDeclareVariable(e111, t109) {
        assert2("DeclareVariable", e111, t109);
    }
    function assertDeclareExportDeclaration(e112, t110) {
        assert2("DeclareExportDeclaration", e112, t110);
    }
    function assertDeclareExportAllDeclaration(e113, t111) {
        assert2("DeclareExportAllDeclaration", e113, t111);
    }
    function assertDeclaredPredicate(e114, t112) {
        assert2("DeclaredPredicate", e114, t112);
    }
    function assertExistsTypeAnnotation(e115, t113) {
        assert2("ExistsTypeAnnotation", e115, t113);
    }
    function assertFunctionTypeAnnotation(e116, t114) {
        assert2("FunctionTypeAnnotation", e116, t114);
    }
    function assertFunctionTypeParam(e117, t115) {
        assert2("FunctionTypeParam", e117, t115);
    }
    function assertGenericTypeAnnotation(e118, t116) {
        assert2("GenericTypeAnnotation", e118, t116);
    }
    function assertInferredPredicate(e119, t117) {
        assert2("InferredPredicate", e119, t117);
    }
    function assertInterfaceExtends(e120, t118) {
        assert2("InterfaceExtends", e120, t118);
    }
    function assertInterfaceDeclaration(e121, t119) {
        assert2("InterfaceDeclaration", e121, t119);
    }
    function assertInterfaceTypeAnnotation(e122, t120) {
        assert2("InterfaceTypeAnnotation", e122, t120);
    }
    function assertIntersectionTypeAnnotation(e123, t121) {
        assert2("IntersectionTypeAnnotation", e123, t121);
    }
    function assertMixedTypeAnnotation(e124, t122) {
        assert2("MixedTypeAnnotation", e124, t122);
    }
    function assertEmptyTypeAnnotation(e125, t123) {
        assert2("EmptyTypeAnnotation", e125, t123);
    }
    function assertNullableTypeAnnotation(e126, t124) {
        assert2("NullableTypeAnnotation", e126, t124);
    }
    function assertNumberLiteralTypeAnnotation(e127, t125) {
        assert2("NumberLiteralTypeAnnotation", e127, t125);
    }
    function assertNumberTypeAnnotation(e128, t126) {
        assert2("NumberTypeAnnotation", e128, t126);
    }
    function assertObjectTypeAnnotation(e129, t127) {
        assert2("ObjectTypeAnnotation", e129, t127);
    }
    function assertObjectTypeInternalSlot(e130, t128) {
        assert2("ObjectTypeInternalSlot", e130, t128);
    }
    function assertObjectTypeCallProperty(e131, t129) {
        assert2("ObjectTypeCallProperty", e131, t129);
    }
    function assertObjectTypeIndexer(e132, t130) {
        assert2("ObjectTypeIndexer", e132, t130);
    }
    function assertObjectTypeProperty(e133, t131) {
        assert2("ObjectTypeProperty", e133, t131);
    }
    function assertObjectTypeSpreadProperty(e134, t132) {
        assert2("ObjectTypeSpreadProperty", e134, t132);
    }
    function assertOpaqueType(e135, t133) {
        assert2("OpaqueType", e135, t133);
    }
    function assertQualifiedTypeIdentifier(e136, t134) {
        assert2("QualifiedTypeIdentifier", e136, t134);
    }
    function assertStringLiteralTypeAnnotation(e137, t135) {
        assert2("StringLiteralTypeAnnotation", e137, t135);
    }
    function assertStringTypeAnnotation(e138, t136) {
        assert2("StringTypeAnnotation", e138, t136);
    }
    function assertSymbolTypeAnnotation(e139, t137) {
        assert2("SymbolTypeAnnotation", e139, t137);
    }
    function assertThisTypeAnnotation(e140, t138) {
        assert2("ThisTypeAnnotation", e140, t138);
    }
    function assertTupleTypeAnnotation(e141, t139) {
        assert2("TupleTypeAnnotation", e141, t139);
    }
    function assertTypeofTypeAnnotation(e142, t140) {
        assert2("TypeofTypeAnnotation", e142, t140);
    }
    function assertTypeAlias(e143, t141) {
        assert2("TypeAlias", e143, t141);
    }
    function assertTypeAnnotation(e144, t142) {
        assert2("TypeAnnotation", e144, t142);
    }
    function assertTypeCastExpression(e145, t143) {
        assert2("TypeCastExpression", e145, t143);
    }
    function assertTypeParameter(e146, t144) {
        assert2("TypeParameter", e146, t144);
    }
    function assertTypeParameterDeclaration(e147, t145) {
        assert2("TypeParameterDeclaration", e147, t145);
    }
    function assertTypeParameterInstantiation(e148, t146) {
        assert2("TypeParameterInstantiation", e148, t146);
    }
    function assertUnionTypeAnnotation(e149, t147) {
        assert2("UnionTypeAnnotation", e149, t147);
    }
    function assertVariance(e150, t148) {
        assert2("Variance", e150, t148);
    }
    function assertVoidTypeAnnotation(e151, t149) {
        assert2("VoidTypeAnnotation", e151, t149);
    }
    function assertEnumDeclaration(e152, t150) {
        assert2("EnumDeclaration", e152, t150);
    }
    function assertEnumBooleanBody(e153, t151) {
        assert2("EnumBooleanBody", e153, t151);
    }
    function assertEnumNumberBody(e154, t152) {
        assert2("EnumNumberBody", e154, t152);
    }
    function assertEnumStringBody(e155, t153) {
        assert2("EnumStringBody", e155, t153);
    }
    function assertEnumSymbolBody(e156, t154) {
        assert2("EnumSymbolBody", e156, t154);
    }
    function assertEnumBooleanMember(e157, t155) {
        assert2("EnumBooleanMember", e157, t155);
    }
    function assertEnumNumberMember(e158, t156) {
        assert2("EnumNumberMember", e158, t156);
    }
    function assertEnumStringMember(e159, t157) {
        assert2("EnumStringMember", e159, t157);
    }
    function assertEnumDefaultedMember(e160, t158) {
        assert2("EnumDefaultedMember", e160, t158);
    }
    function assertIndexedAccessType(e161, t159) {
        assert2("IndexedAccessType", e161, t159);
    }
    function assertOptionalIndexedAccessType(e162, t160) {
        assert2("OptionalIndexedAccessType", e162, t160);
    }
    function assertJSXAttribute(e163, t161) {
        assert2("JSXAttribute", e163, t161);
    }
    function assertJSXClosingElement(e164, t162) {
        assert2("JSXClosingElement", e164, t162);
    }
    function assertJSXElement(e165, t163) {
        assert2("JSXElement", e165, t163);
    }
    function assertJSXEmptyExpression(e166, t164) {
        assert2("JSXEmptyExpression", e166, t164);
    }
    function assertJSXExpressionContainer(e167, t165) {
        assert2("JSXExpressionContainer", e167, t165);
    }
    function assertJSXSpreadChild(e168, t166) {
        assert2("JSXSpreadChild", e168, t166);
    }
    function assertJSXIdentifier(e169, t167) {
        assert2("JSXIdentifier", e169, t167);
    }
    function assertJSXMemberExpression(e170, t168) {
        assert2("JSXMemberExpression", e170, t168);
    }
    function assertJSXNamespacedName(e171, t169) {
        assert2("JSXNamespacedName", e171, t169);
    }
    function assertJSXOpeningElement(e172, t170) {
        assert2("JSXOpeningElement", e172, t170);
    }
    function assertJSXSpreadAttribute(e173, t171) {
        assert2("JSXSpreadAttribute", e173, t171);
    }
    function assertJSXText(e174, t172) {
        assert2("JSXText", e174, t172);
    }
    function assertJSXFragment(e175, t173) {
        assert2("JSXFragment", e175, t173);
    }
    function assertJSXOpeningFragment(e176, t174) {
        assert2("JSXOpeningFragment", e176, t174);
    }
    function assertJSXClosingFragment(e177, t175) {
        assert2("JSXClosingFragment", e177, t175);
    }
    function assertNoop(e178, t176) {
        assert2("Noop", e178, t176);
    }
    function assertPlaceholder(e179, t177) {
        assert2("Placeholder", e179, t177);
    }
    function assertV8IntrinsicIdentifier(e180, t178) {
        assert2("V8IntrinsicIdentifier", e180, t178);
    }
    function assertArgumentPlaceholder(e181, t179) {
        assert2("ArgumentPlaceholder", e181, t179);
    }
    function assertBindExpression(e182, t180) {
        assert2("BindExpression", e182, t180);
    }
    function assertImportAttribute(e183, t181) {
        assert2("ImportAttribute", e183, t181);
    }
    function assertDecorator(e184, t182) {
        assert2("Decorator", e184, t182);
    }
    function assertDoExpression(e185, t183) {
        assert2("DoExpression", e185, t183);
    }
    function assertExportDefaultSpecifier(e186, t184) {
        assert2("ExportDefaultSpecifier", e186, t184);
    }
    function assertRecordExpression(e187, t185) {
        assert2("RecordExpression", e187, t185);
    }
    function assertTupleExpression(e188, t186) {
        assert2("TupleExpression", e188, t186);
    }
    function assertDecimalLiteral(e189, t187) {
        assert2("DecimalLiteral", e189, t187);
    }
    function assertModuleExpression(e190, t188) {
        assert2("ModuleExpression", e190, t188);
    }
    function assertTopicReference(e191, t189) {
        assert2("TopicReference", e191, t189);
    }
    function assertPipelineTopicExpression(e192, t190) {
        assert2("PipelineTopicExpression", e192, t190);
    }
    function assertPipelineBareFunction(e193, t191) {
        assert2("PipelineBareFunction", e193, t191);
    }
    function assertPipelinePrimaryTopicReference(e194, t192) {
        assert2("PipelinePrimaryTopicReference", e194, t192);
    }
    function assertTSParameterProperty(e195, t193) {
        assert2("TSParameterProperty", e195, t193);
    }
    function assertTSDeclareFunction(e196, t194) {
        assert2("TSDeclareFunction", e196, t194);
    }
    function assertTSDeclareMethod(e197, t195) {
        assert2("TSDeclareMethod", e197, t195);
    }
    function assertTSQualifiedName(e198, t196) {
        assert2("TSQualifiedName", e198, t196);
    }
    function assertTSCallSignatureDeclaration(e199, t197) {
        assert2("TSCallSignatureDeclaration", e199, t197);
    }
    function assertTSConstructSignatureDeclaration(e200, t198) {
        assert2("TSConstructSignatureDeclaration", e200, t198);
    }
    function assertTSPropertySignature(e201, t199) {
        assert2("TSPropertySignature", e201, t199);
    }
    function assertTSMethodSignature(e202, t200) {
        assert2("TSMethodSignature", e202, t200);
    }
    function assertTSIndexSignature(e203, t201) {
        assert2("TSIndexSignature", e203, t201);
    }
    function assertTSAnyKeyword(e204, t202) {
        assert2("TSAnyKeyword", e204, t202);
    }
    function assertTSBooleanKeyword(e205, t203) {
        assert2("TSBooleanKeyword", e205, t203);
    }
    function assertTSBigIntKeyword(e206, t204) {
        assert2("TSBigIntKeyword", e206, t204);
    }
    function assertTSIntrinsicKeyword(e207, t205) {
        assert2("TSIntrinsicKeyword", e207, t205);
    }
    function assertTSNeverKeyword(e208, t206) {
        assert2("TSNeverKeyword", e208, t206);
    }
    function assertTSNullKeyword(e209, t207) {
        assert2("TSNullKeyword", e209, t207);
    }
    function assertTSNumberKeyword(e210, t208) {
        assert2("TSNumberKeyword", e210, t208);
    }
    function assertTSObjectKeyword(e211, t209) {
        assert2("TSObjectKeyword", e211, t209);
    }
    function assertTSStringKeyword(e212, t210) {
        assert2("TSStringKeyword", e212, t210);
    }
    function assertTSSymbolKeyword(e213, t211) {
        assert2("TSSymbolKeyword", e213, t211);
    }
    function assertTSUndefinedKeyword(e214, t212) {
        assert2("TSUndefinedKeyword", e214, t212);
    }
    function assertTSUnknownKeyword(e215, t213) {
        assert2("TSUnknownKeyword", e215, t213);
    }
    function assertTSVoidKeyword(e216, t214) {
        assert2("TSVoidKeyword", e216, t214);
    }
    function assertTSThisType(e217, t215) {
        assert2("TSThisType", e217, t215);
    }
    function assertTSFunctionType(e218, t216) {
        assert2("TSFunctionType", e218, t216);
    }
    function assertTSConstructorType(e219, t217) {
        assert2("TSConstructorType", e219, t217);
    }
    function assertTSTypeReference(e220, t218) {
        assert2("TSTypeReference", e220, t218);
    }
    function assertTSTypePredicate(e221, t219) {
        assert2("TSTypePredicate", e221, t219);
    }
    function assertTSTypeQuery(e222, t220) {
        assert2("TSTypeQuery", e222, t220);
    }
    function assertTSTypeLiteral(e223, t221) {
        assert2("TSTypeLiteral", e223, t221);
    }
    function assertTSArrayType(e224, t222) {
        assert2("TSArrayType", e224, t222);
    }
    function assertTSTupleType(e225, t223) {
        assert2("TSTupleType", e225, t223);
    }
    function assertTSOptionalType(e226, t224) {
        assert2("TSOptionalType", e226, t224);
    }
    function assertTSRestType(e227, t225) {
        assert2("TSRestType", e227, t225);
    }
    function assertTSNamedTupleMember(e228, t226) {
        assert2("TSNamedTupleMember", e228, t226);
    }
    function assertTSUnionType(e229, t227) {
        assert2("TSUnionType", e229, t227);
    }
    function assertTSIntersectionType(e230, t228) {
        assert2("TSIntersectionType", e230, t228);
    }
    function assertTSConditionalType(e231, t229) {
        assert2("TSConditionalType", e231, t229);
    }
    function assertTSInferType(e232, t230) {
        assert2("TSInferType", e232, t230);
    }
    function assertTSParenthesizedType(e233, t231) {
        assert2("TSParenthesizedType", e233, t231);
    }
    function assertTSTypeOperator(e234, t232) {
        assert2("TSTypeOperator", e234, t232);
    }
    function assertTSIndexedAccessType(e235, t233) {
        assert2("TSIndexedAccessType", e235, t233);
    }
    function assertTSMappedType(e236, t234) {
        assert2("TSMappedType", e236, t234);
    }
    function assertTSLiteralType(e237, t235) {
        assert2("TSLiteralType", e237, t235);
    }
    function assertTSExpressionWithTypeArguments(e238, t236) {
        assert2("TSExpressionWithTypeArguments", e238, t236);
    }
    function assertTSInterfaceDeclaration(e239, t237) {
        assert2("TSInterfaceDeclaration", e239, t237);
    }
    function assertTSInterfaceBody(e240, t238) {
        assert2("TSInterfaceBody", e240, t238);
    }
    function assertTSTypeAliasDeclaration(e241, t239) {
        assert2("TSTypeAliasDeclaration", e241, t239);
    }
    function assertTSAsExpression(e242, t240) {
        assert2("TSAsExpression", e242, t240);
    }
    function assertTSTypeAssertion(e243, t241) {
        assert2("TSTypeAssertion", e243, t241);
    }
    function assertTSEnumDeclaration(e244, t242) {
        assert2("TSEnumDeclaration", e244, t242);
    }
    function assertTSEnumMember(e245, t243) {
        assert2("TSEnumMember", e245, t243);
    }
    function assertTSModuleDeclaration(e246, t244) {
        assert2("TSModuleDeclaration", e246, t244);
    }
    function assertTSModuleBlock(e247, t245) {
        assert2("TSModuleBlock", e247, t245);
    }
    function assertTSImportType(e248, t246) {
        assert2("TSImportType", e248, t246);
    }
    function assertTSImportEqualsDeclaration(e249, t247) {
        assert2("TSImportEqualsDeclaration", e249, t247);
    }
    function assertTSExternalModuleReference(e250, t248) {
        assert2("TSExternalModuleReference", e250, t248);
    }
    function assertTSNonNullExpression(e251, t249) {
        assert2("TSNonNullExpression", e251, t249);
    }
    function assertTSExportAssignment(e252, t250) {
        assert2("TSExportAssignment", e252, t250);
    }
    function assertTSNamespaceExportDeclaration(e253, t251) {
        assert2("TSNamespaceExportDeclaration", e253, t251);
    }
    function assertTSTypeAnnotation(e254, t252) {
        assert2("TSTypeAnnotation", e254, t252);
    }
    function assertTSTypeParameterInstantiation(e255, t253) {
        assert2("TSTypeParameterInstantiation", e255, t253);
    }
    function assertTSTypeParameterDeclaration(e256, t254) {
        assert2("TSTypeParameterDeclaration", e256, t254);
    }
    function assertTSTypeParameter(e257, t255) {
        assert2("TSTypeParameter", e257, t255);
    }
    function assertStandardized(e258, t256) {
        assert2("Standardized", e258, t256);
    }
    function assertExpression(e259, t257) {
        assert2("Expression", e259, t257);
    }
    function assertBinary(e260, t258) {
        assert2("Binary", e260, t258);
    }
    function assertScopable(e261, t259) {
        assert2("Scopable", e261, t259);
    }
    function assertBlockParent(e262, t260) {
        assert2("BlockParent", e262, t260);
    }
    function assertBlock(e263, t261) {
        assert2("Block", e263, t261);
    }
    function assertStatement(e264, t262) {
        assert2("Statement", e264, t262);
    }
    function assertTerminatorless(e265, t263) {
        assert2("Terminatorless", e265, t263);
    }
    function assertCompletionStatement(e266, t264) {
        assert2("CompletionStatement", e266, t264);
    }
    function assertConditional(e267, t265) {
        assert2("Conditional", e267, t265);
    }
    function assertLoop(e268, t266) {
        assert2("Loop", e268, t266);
    }
    function assertWhile(e269, t267) {
        assert2("While", e269, t267);
    }
    function assertExpressionWrapper(e270, t268) {
        assert2("ExpressionWrapper", e270, t268);
    }
    function assertFor(e271, t269) {
        assert2("For", e271, t269);
    }
    function assertForXStatement(e272, t270) {
        assert2("ForXStatement", e272, t270);
    }
    function assertFunction(e273, t271) {
        assert2("Function", e273, t271);
    }
    function assertFunctionParent(e274, t272) {
        assert2("FunctionParent", e274, t272);
    }
    function assertPureish(e275, t273) {
        assert2("Pureish", e275, t273);
    }
    function assertDeclaration(e276, t274) {
        assert2("Declaration", e276, t274);
    }
    function assertPatternLike(e277, t275) {
        assert2("PatternLike", e277, t275);
    }
    function assertLVal(e278, t276) {
        assert2("LVal", e278, t276);
    }
    function assertTSEntityName(e279, t277) {
        assert2("TSEntityName", e279, t277);
    }
    function assertLiteral(e280, t278) {
        assert2("Literal", e280, t278);
    }
    function assertImmutable(e281, t279) {
        assert2("Immutable", e281, t279);
    }
    function assertUserWhitespacable(e282, t280) {
        assert2("UserWhitespacable", e282, t280);
    }
    function assertMethod(e283, t281) {
        assert2("Method", e283, t281);
    }
    function assertObjectMember(e284, t282) {
        assert2("ObjectMember", e284, t282);
    }
    function assertProperty(e285, t283) {
        assert2("Property", e285, t283);
    }
    function assertUnaryLike(e286, t284) {
        assert2("UnaryLike", e286, t284);
    }
    function assertPattern(e287, t285) {
        assert2("Pattern", e287, t285);
    }
    function assertClass(e288, t286) {
        assert2("Class", e288, t286);
    }
    function assertModuleDeclaration(e289, t287) {
        assert2("ModuleDeclaration", e289, t287);
    }
    function assertExportDeclaration(e290, t288) {
        assert2("ExportDeclaration", e290, t288);
    }
    function assertModuleSpecifier(e291, t289) {
        assert2("ModuleSpecifier", e291, t289);
    }
    function assertAccessor(e292, t290) {
        assert2("Accessor", e292, t290);
    }
    function assertPrivate(e293, t291) {
        assert2("Private", e293, t291);
    }
    function assertFlow(e294, t292) {
        assert2("Flow", e294, t292);
    }
    function assertFlowType(e295, t293) {
        assert2("FlowType", e295, t293);
    }
    function assertFlowBaseAnnotation(e296, t294) {
        assert2("FlowBaseAnnotation", e296, t294);
    }
    function assertFlowDeclaration(e297, t295) {
        assert2("FlowDeclaration", e297, t295);
    }
    function assertFlowPredicate(e298, t296) {
        assert2("FlowPredicate", e298, t296);
    }
    function assertEnumBody(e299, t297) {
        assert2("EnumBody", e299, t297);
    }
    function assertEnumMember(e300, t298) {
        assert2("EnumMember", e300, t298);
    }
    function assertJSX(e301, t299) {
        assert2("JSX", e301, t299);
    }
    function assertMiscellaneous(e302, t300) {
        assert2("Miscellaneous", e302, t300);
    }
    function assertTypeScript(e303, t301) {
        assert2("TypeScript", e303, t301);
    }
    function assertTSTypeElement(e304, t302) {
        assert2("TSTypeElement", e304, t302);
    }
    function assertTSType(e305, t303) {
        assert2("TSType", e305, t303);
    }
    function assertTSBaseType(e306, t304) {
        assert2("TSBaseType", e306, t304);
    }
    function assertNumberLiteral(e307, t305) {
        console.trace("The node type NumberLiteral has been renamed to NumericLiteral");
        assert2("NumberLiteral", e307, t305);
    }
    function assertRegexLiteral(e308, t306) {
        console.trace("The node type RegexLiteral has been renamed to RegExpLiteral");
        assert2("RegexLiteral", e308, t306);
    }
    function assertRestProperty(e309, t307) {
        console.trace("The node type RestProperty has been renamed to RestElement");
        assert2("RestProperty", e309, t307);
    }
    function assertSpreadProperty(e310, t308) {
        console.trace("The node type SpreadProperty has been renamed to SpreadElement");
        assert2("SpreadProperty", e310, t308);
    }
    return N3;
}
var M2 = {}, w3 = false;
function dew$M() {
    if (w3) return M2;
    w3 = true;
    Object.defineProperty(M2, "__esModule", {
        value: true
    });
    M2.default = void 0;
    var e311 = dew5();
    var t309 = createTypeAnnotationBasedOnTypeof;
    M2.default = t309;
    function createTypeAnnotationBasedOnTypeof(t310) {
        switch(t310){
            case "string":
                return (0, e311.stringTypeAnnotation)();
            case "number":
                return (0, e311.numberTypeAnnotation)();
            case "undefined":
                return (0, e311.voidTypeAnnotation)();
            case "boolean":
                return (0, e311.booleanTypeAnnotation)();
            case "function":
                return (0, e311.genericTypeAnnotation)((0, e311.identifier)("Function"));
            case "object":
                return (0, e311.genericTypeAnnotation)((0, e311.identifier)("Object"));
            case "symbol":
                return (0, e311.genericTypeAnnotation)((0, e311.identifier)("Symbol"));
            case "bigint":
                return (0, e311.anyTypeAnnotation)();
        }
        throw new Error("Invalid typeof value: " + t310);
    }
    return M2;
}
var _3 = {}, h4 = false;
function dew$L() {
    if (h4) return _3;
    h4 = true;
    Object.defineProperty(_3, "__esModule", {
        value: true
    });
    _3.default = removeTypeDuplicates;
    var t311 = dew1();
    function getQualifiedName(e312) {
        return (0, t311.isIdentifier)(e312) ? e312.name : `${e312.id.name}.${getQualifiedName(e312.qualification)}`;
    }
    function removeTypeDuplicates(e315) {
        const r8 = {};
        const s6 = {};
        const a311 = new Set;
        const n311 = [];
        for(let i310 = 0; i310 < e315.length; i310++){
            const o112 = e315[i310];
            if (o112 && !(n311.indexOf(o112) >= 0)) {
                if ((0, t311.isAnyTypeAnnotation)(o112)) return [
                    o112
                ];
                if ((0, t311.isFlowBaseAnnotation)(o112)) s6[o112.type] = o112;
                else if ((0, t311.isUnionTypeAnnotation)(o112)) {
                    if (!a311.has(o112.types)) {
                        e315 = e315.concat(o112.types);
                        a311.add(o112.types);
                    }
                } else if ((0, t311.isGenericTypeAnnotation)(o112)) {
                    const e316 = getQualifiedName(o112.id);
                    if (r8[e316]) {
                        let t312 = r8[e316];
                        t312.typeParameters ? o112.typeParameters && (t312.typeParameters.params = removeTypeDuplicates(t312.typeParameters.params.concat(o112.typeParameters.params))) : t312 = o112.typeParameters;
                    } else r8[e316] = o112;
                } else n311.push(o112);
            }
        }
        for (const e313 of Object.keys(s6))n311.push(s6[e313]);
        for (const e314 of Object.keys(r8))n311.push(r8[e314]);
        return n311;
    }
    return _3;
}
var v4 = {}, B3 = false;
function dew$K() {
    if (B3) return v4;
    B3 = true;
    Object.defineProperty(v4, "__esModule", {
        value: true
    });
    v4.default = createFlowUnionType;
    var e317 = dew5();
    var t313 = dew$L();
    function createFlowUnionType(r9) {
        const s7 = (0, t313.default)(r9);
        return 1 === s7.length ? s7[0] : (0, e317.unionTypeAnnotation)(s7);
    }
    return v4;
}
var F3 = {}, R4 = false;
function dew$J() {
    if (R4) return F3;
    R4 = true;
    Object.defineProperty(F3, "__esModule", {
        value: true
    });
    F3.default = removeTypeDuplicates;
    var t314 = dew1();
    function removeTypeDuplicates(e320) {
        const r11 = {};
        const s8 = {};
        const a4 = new Set;
        const n411 = [];
        for(let r10 = 0; r10 < e320.length; r10++){
            const i4 = e320[r10];
            if (i4 && !(n411.indexOf(i4) >= 0)) {
                if ((0, t314.isTSAnyKeyword)(i4)) return [
                    i4
                ];
                if ((0, t314.isTSBaseType)(i4)) s8[i4.type] = i4;
                else if ((0, t314.isTSUnionType)(i4)) {
                    if (!a4.has(i4.types)) {
                        e320.push(...i4.types);
                        a4.add(i4.types);
                    }
                } else n411.push(i4);
            }
        }
        for (const e318 of Object.keys(s8))n411.push(s8[e318]);
        for (const e319 of Object.keys(r11))n411.push(r11[e319]);
        return n411;
    }
    return F3;
}
var Y2 = {}, K2 = false;
function dew$I() {
    if (K2) return Y2;
    K2 = true;
    Object.defineProperty(Y2, "__esModule", {
        value: true
    });
    Y2.default = createTSUnionType;
    var e321 = dew5();
    var t315 = dew$J();
    function createTSUnionType(r12) {
        const s9 = r12.map((e322)=>e322.typeAnnotation
        );
        const a5 = (0, t315.default)(s9);
        return 1 === a5.length ? a5[0] : (0, e321.tsUnionType)(a5);
    }
    return Y2;
}
var X2 = {}, U2 = false;
function dew$H() {
    if (U2) return X2;
    U2 = true;
    Object.defineProperty(X2, "__esModule", {
        value: true
    });
    Object.defineProperty(X2, "AnyTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.anyTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ArgumentPlaceholder", {
        enumerable: true,
        get: function() {
            return e323.argumentPlaceholder;
        }
    });
    Object.defineProperty(X2, "ArrayExpression", {
        enumerable: true,
        get: function() {
            return e323.arrayExpression;
        }
    });
    Object.defineProperty(X2, "ArrayPattern", {
        enumerable: true,
        get: function() {
            return e323.arrayPattern;
        }
    });
    Object.defineProperty(X2, "ArrayTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.arrayTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ArrowFunctionExpression", {
        enumerable: true,
        get: function() {
            return e323.arrowFunctionExpression;
        }
    });
    Object.defineProperty(X2, "AssignmentExpression", {
        enumerable: true,
        get: function() {
            return e323.assignmentExpression;
        }
    });
    Object.defineProperty(X2, "AssignmentPattern", {
        enumerable: true,
        get: function() {
            return e323.assignmentPattern;
        }
    });
    Object.defineProperty(X2, "AwaitExpression", {
        enumerable: true,
        get: function() {
            return e323.awaitExpression;
        }
    });
    Object.defineProperty(X2, "BigIntLiteral", {
        enumerable: true,
        get: function() {
            return e323.bigIntLiteral;
        }
    });
    Object.defineProperty(X2, "BinaryExpression", {
        enumerable: true,
        get: function() {
            return e323.binaryExpression;
        }
    });
    Object.defineProperty(X2, "BindExpression", {
        enumerable: true,
        get: function() {
            return e323.bindExpression;
        }
    });
    Object.defineProperty(X2, "BlockStatement", {
        enumerable: true,
        get: function() {
            return e323.blockStatement;
        }
    });
    Object.defineProperty(X2, "BooleanLiteral", {
        enumerable: true,
        get: function() {
            return e323.booleanLiteral;
        }
    });
    Object.defineProperty(X2, "BooleanLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.booleanLiteralTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "BooleanTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.booleanTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "BreakStatement", {
        enumerable: true,
        get: function() {
            return e323.breakStatement;
        }
    });
    Object.defineProperty(X2, "CallExpression", {
        enumerable: true,
        get: function() {
            return e323.callExpression;
        }
    });
    Object.defineProperty(X2, "CatchClause", {
        enumerable: true,
        get: function() {
            return e323.catchClause;
        }
    });
    Object.defineProperty(X2, "ClassAccessorProperty", {
        enumerable: true,
        get: function() {
            return e323.classAccessorProperty;
        }
    });
    Object.defineProperty(X2, "ClassBody", {
        enumerable: true,
        get: function() {
            return e323.classBody;
        }
    });
    Object.defineProperty(X2, "ClassDeclaration", {
        enumerable: true,
        get: function() {
            return e323.classDeclaration;
        }
    });
    Object.defineProperty(X2, "ClassExpression", {
        enumerable: true,
        get: function() {
            return e323.classExpression;
        }
    });
    Object.defineProperty(X2, "ClassImplements", {
        enumerable: true,
        get: function() {
            return e323.classImplements;
        }
    });
    Object.defineProperty(X2, "ClassMethod", {
        enumerable: true,
        get: function() {
            return e323.classMethod;
        }
    });
    Object.defineProperty(X2, "ClassPrivateMethod", {
        enumerable: true,
        get: function() {
            return e323.classPrivateMethod;
        }
    });
    Object.defineProperty(X2, "ClassPrivateProperty", {
        enumerable: true,
        get: function() {
            return e323.classPrivateProperty;
        }
    });
    Object.defineProperty(X2, "ClassProperty", {
        enumerable: true,
        get: function() {
            return e323.classProperty;
        }
    });
    Object.defineProperty(X2, "ConditionalExpression", {
        enumerable: true,
        get: function() {
            return e323.conditionalExpression;
        }
    });
    Object.defineProperty(X2, "ContinueStatement", {
        enumerable: true,
        get: function() {
            return e323.continueStatement;
        }
    });
    Object.defineProperty(X2, "DebuggerStatement", {
        enumerable: true,
        get: function() {
            return e323.debuggerStatement;
        }
    });
    Object.defineProperty(X2, "DecimalLiteral", {
        enumerable: true,
        get: function() {
            return e323.decimalLiteral;
        }
    });
    Object.defineProperty(X2, "DeclareClass", {
        enumerable: true,
        get: function() {
            return e323.declareClass;
        }
    });
    Object.defineProperty(X2, "DeclareExportAllDeclaration", {
        enumerable: true,
        get: function() {
            return e323.declareExportAllDeclaration;
        }
    });
    Object.defineProperty(X2, "DeclareExportDeclaration", {
        enumerable: true,
        get: function() {
            return e323.declareExportDeclaration;
        }
    });
    Object.defineProperty(X2, "DeclareFunction", {
        enumerable: true,
        get: function() {
            return e323.declareFunction;
        }
    });
    Object.defineProperty(X2, "DeclareInterface", {
        enumerable: true,
        get: function() {
            return e323.declareInterface;
        }
    });
    Object.defineProperty(X2, "DeclareModule", {
        enumerable: true,
        get: function() {
            return e323.declareModule;
        }
    });
    Object.defineProperty(X2, "DeclareModuleExports", {
        enumerable: true,
        get: function() {
            return e323.declareModuleExports;
        }
    });
    Object.defineProperty(X2, "DeclareOpaqueType", {
        enumerable: true,
        get: function() {
            return e323.declareOpaqueType;
        }
    });
    Object.defineProperty(X2, "DeclareTypeAlias", {
        enumerable: true,
        get: function() {
            return e323.declareTypeAlias;
        }
    });
    Object.defineProperty(X2, "DeclareVariable", {
        enumerable: true,
        get: function() {
            return e323.declareVariable;
        }
    });
    Object.defineProperty(X2, "DeclaredPredicate", {
        enumerable: true,
        get: function() {
            return e323.declaredPredicate;
        }
    });
    Object.defineProperty(X2, "Decorator", {
        enumerable: true,
        get: function() {
            return e323.decorator;
        }
    });
    Object.defineProperty(X2, "Directive", {
        enumerable: true,
        get: function() {
            return e323.directive;
        }
    });
    Object.defineProperty(X2, "DirectiveLiteral", {
        enumerable: true,
        get: function() {
            return e323.directiveLiteral;
        }
    });
    Object.defineProperty(X2, "DoExpression", {
        enumerable: true,
        get: function() {
            return e323.doExpression;
        }
    });
    Object.defineProperty(X2, "DoWhileStatement", {
        enumerable: true,
        get: function() {
            return e323.doWhileStatement;
        }
    });
    Object.defineProperty(X2, "EmptyStatement", {
        enumerable: true,
        get: function() {
            return e323.emptyStatement;
        }
    });
    Object.defineProperty(X2, "EmptyTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.emptyTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "EnumBooleanBody", {
        enumerable: true,
        get: function() {
            return e323.enumBooleanBody;
        }
    });
    Object.defineProperty(X2, "EnumBooleanMember", {
        enumerable: true,
        get: function() {
            return e323.enumBooleanMember;
        }
    });
    Object.defineProperty(X2, "EnumDeclaration", {
        enumerable: true,
        get: function() {
            return e323.enumDeclaration;
        }
    });
    Object.defineProperty(X2, "EnumDefaultedMember", {
        enumerable: true,
        get: function() {
            return e323.enumDefaultedMember;
        }
    });
    Object.defineProperty(X2, "EnumNumberBody", {
        enumerable: true,
        get: function() {
            return e323.enumNumberBody;
        }
    });
    Object.defineProperty(X2, "EnumNumberMember", {
        enumerable: true,
        get: function() {
            return e323.enumNumberMember;
        }
    });
    Object.defineProperty(X2, "EnumStringBody", {
        enumerable: true,
        get: function() {
            return e323.enumStringBody;
        }
    });
    Object.defineProperty(X2, "EnumStringMember", {
        enumerable: true,
        get: function() {
            return e323.enumStringMember;
        }
    });
    Object.defineProperty(X2, "EnumSymbolBody", {
        enumerable: true,
        get: function() {
            return e323.enumSymbolBody;
        }
    });
    Object.defineProperty(X2, "ExistsTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.existsTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ExportAllDeclaration", {
        enumerable: true,
        get: function() {
            return e323.exportAllDeclaration;
        }
    });
    Object.defineProperty(X2, "ExportDefaultDeclaration", {
        enumerable: true,
        get: function() {
            return e323.exportDefaultDeclaration;
        }
    });
    Object.defineProperty(X2, "ExportDefaultSpecifier", {
        enumerable: true,
        get: function() {
            return e323.exportDefaultSpecifier;
        }
    });
    Object.defineProperty(X2, "ExportNamedDeclaration", {
        enumerable: true,
        get: function() {
            return e323.exportNamedDeclaration;
        }
    });
    Object.defineProperty(X2, "ExportNamespaceSpecifier", {
        enumerable: true,
        get: function() {
            return e323.exportNamespaceSpecifier;
        }
    });
    Object.defineProperty(X2, "ExportSpecifier", {
        enumerable: true,
        get: function() {
            return e323.exportSpecifier;
        }
    });
    Object.defineProperty(X2, "ExpressionStatement", {
        enumerable: true,
        get: function() {
            return e323.expressionStatement;
        }
    });
    Object.defineProperty(X2, "File", {
        enumerable: true,
        get: function() {
            return e323.file;
        }
    });
    Object.defineProperty(X2, "ForInStatement", {
        enumerable: true,
        get: function() {
            return e323.forInStatement;
        }
    });
    Object.defineProperty(X2, "ForOfStatement", {
        enumerable: true,
        get: function() {
            return e323.forOfStatement;
        }
    });
    Object.defineProperty(X2, "ForStatement", {
        enumerable: true,
        get: function() {
            return e323.forStatement;
        }
    });
    Object.defineProperty(X2, "FunctionDeclaration", {
        enumerable: true,
        get: function() {
            return e323.functionDeclaration;
        }
    });
    Object.defineProperty(X2, "FunctionExpression", {
        enumerable: true,
        get: function() {
            return e323.functionExpression;
        }
    });
    Object.defineProperty(X2, "FunctionTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.functionTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "FunctionTypeParam", {
        enumerable: true,
        get: function() {
            return e323.functionTypeParam;
        }
    });
    Object.defineProperty(X2, "GenericTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.genericTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "Identifier", {
        enumerable: true,
        get: function() {
            return e323.identifier;
        }
    });
    Object.defineProperty(X2, "IfStatement", {
        enumerable: true,
        get: function() {
            return e323.ifStatement;
        }
    });
    Object.defineProperty(X2, "Import", {
        enumerable: true,
        get: function() {
            return e323.import;
        }
    });
    Object.defineProperty(X2, "ImportAttribute", {
        enumerable: true,
        get: function() {
            return e323.importAttribute;
        }
    });
    Object.defineProperty(X2, "ImportDeclaration", {
        enumerable: true,
        get: function() {
            return e323.importDeclaration;
        }
    });
    Object.defineProperty(X2, "ImportDefaultSpecifier", {
        enumerable: true,
        get: function() {
            return e323.importDefaultSpecifier;
        }
    });
    Object.defineProperty(X2, "ImportNamespaceSpecifier", {
        enumerable: true,
        get: function() {
            return e323.importNamespaceSpecifier;
        }
    });
    Object.defineProperty(X2, "ImportSpecifier", {
        enumerable: true,
        get: function() {
            return e323.importSpecifier;
        }
    });
    Object.defineProperty(X2, "IndexedAccessType", {
        enumerable: true,
        get: function() {
            return e323.indexedAccessType;
        }
    });
    Object.defineProperty(X2, "InferredPredicate", {
        enumerable: true,
        get: function() {
            return e323.inferredPredicate;
        }
    });
    Object.defineProperty(X2, "InterfaceDeclaration", {
        enumerable: true,
        get: function() {
            return e323.interfaceDeclaration;
        }
    });
    Object.defineProperty(X2, "InterfaceExtends", {
        enumerable: true,
        get: function() {
            return e323.interfaceExtends;
        }
    });
    Object.defineProperty(X2, "InterfaceTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.interfaceTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "InterpreterDirective", {
        enumerable: true,
        get: function() {
            return e323.interpreterDirective;
        }
    });
    Object.defineProperty(X2, "IntersectionTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.intersectionTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "JSXAttribute", {
        enumerable: true,
        get: function() {
            return e323.jsxAttribute;
        }
    });
    Object.defineProperty(X2, "JSXClosingElement", {
        enumerable: true,
        get: function() {
            return e323.jsxClosingElement;
        }
    });
    Object.defineProperty(X2, "JSXClosingFragment", {
        enumerable: true,
        get: function() {
            return e323.jsxClosingFragment;
        }
    });
    Object.defineProperty(X2, "JSXElement", {
        enumerable: true,
        get: function() {
            return e323.jsxElement;
        }
    });
    Object.defineProperty(X2, "JSXEmptyExpression", {
        enumerable: true,
        get: function() {
            return e323.jsxEmptyExpression;
        }
    });
    Object.defineProperty(X2, "JSXExpressionContainer", {
        enumerable: true,
        get: function() {
            return e323.jsxExpressionContainer;
        }
    });
    Object.defineProperty(X2, "JSXFragment", {
        enumerable: true,
        get: function() {
            return e323.jsxFragment;
        }
    });
    Object.defineProperty(X2, "JSXIdentifier", {
        enumerable: true,
        get: function() {
            return e323.jsxIdentifier;
        }
    });
    Object.defineProperty(X2, "JSXMemberExpression", {
        enumerable: true,
        get: function() {
            return e323.jsxMemberExpression;
        }
    });
    Object.defineProperty(X2, "JSXNamespacedName", {
        enumerable: true,
        get: function() {
            return e323.jsxNamespacedName;
        }
    });
    Object.defineProperty(X2, "JSXOpeningElement", {
        enumerable: true,
        get: function() {
            return e323.jsxOpeningElement;
        }
    });
    Object.defineProperty(X2, "JSXOpeningFragment", {
        enumerable: true,
        get: function() {
            return e323.jsxOpeningFragment;
        }
    });
    Object.defineProperty(X2, "JSXSpreadAttribute", {
        enumerable: true,
        get: function() {
            return e323.jsxSpreadAttribute;
        }
    });
    Object.defineProperty(X2, "JSXSpreadChild", {
        enumerable: true,
        get: function() {
            return e323.jsxSpreadChild;
        }
    });
    Object.defineProperty(X2, "JSXText", {
        enumerable: true,
        get: function() {
            return e323.jsxText;
        }
    });
    Object.defineProperty(X2, "LabeledStatement", {
        enumerable: true,
        get: function() {
            return e323.labeledStatement;
        }
    });
    Object.defineProperty(X2, "LogicalExpression", {
        enumerable: true,
        get: function() {
            return e323.logicalExpression;
        }
    });
    Object.defineProperty(X2, "MemberExpression", {
        enumerable: true,
        get: function() {
            return e323.memberExpression;
        }
    });
    Object.defineProperty(X2, "MetaProperty", {
        enumerable: true,
        get: function() {
            return e323.metaProperty;
        }
    });
    Object.defineProperty(X2, "MixedTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.mixedTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ModuleExpression", {
        enumerable: true,
        get: function() {
            return e323.moduleExpression;
        }
    });
    Object.defineProperty(X2, "NewExpression", {
        enumerable: true,
        get: function() {
            return e323.newExpression;
        }
    });
    Object.defineProperty(X2, "Noop", {
        enumerable: true,
        get: function() {
            return e323.noop;
        }
    });
    Object.defineProperty(X2, "NullLiteral", {
        enumerable: true,
        get: function() {
            return e323.nullLiteral;
        }
    });
    Object.defineProperty(X2, "NullLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.nullLiteralTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "NullableTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.nullableTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "NumberLiteral", {
        enumerable: true,
        get: function() {
            return e323.numberLiteral;
        }
    });
    Object.defineProperty(X2, "NumberLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.numberLiteralTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "NumberTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.numberTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "NumericLiteral", {
        enumerable: true,
        get: function() {
            return e323.numericLiteral;
        }
    });
    Object.defineProperty(X2, "ObjectExpression", {
        enumerable: true,
        get: function() {
            return e323.objectExpression;
        }
    });
    Object.defineProperty(X2, "ObjectMethod", {
        enumerable: true,
        get: function() {
            return e323.objectMethod;
        }
    });
    Object.defineProperty(X2, "ObjectPattern", {
        enumerable: true,
        get: function() {
            return e323.objectPattern;
        }
    });
    Object.defineProperty(X2, "ObjectProperty", {
        enumerable: true,
        get: function() {
            return e323.objectProperty;
        }
    });
    Object.defineProperty(X2, "ObjectTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.objectTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ObjectTypeCallProperty", {
        enumerable: true,
        get: function() {
            return e323.objectTypeCallProperty;
        }
    });
    Object.defineProperty(X2, "ObjectTypeIndexer", {
        enumerable: true,
        get: function() {
            return e323.objectTypeIndexer;
        }
    });
    Object.defineProperty(X2, "ObjectTypeInternalSlot", {
        enumerable: true,
        get: function() {
            return e323.objectTypeInternalSlot;
        }
    });
    Object.defineProperty(X2, "ObjectTypeProperty", {
        enumerable: true,
        get: function() {
            return e323.objectTypeProperty;
        }
    });
    Object.defineProperty(X2, "ObjectTypeSpreadProperty", {
        enumerable: true,
        get: function() {
            return e323.objectTypeSpreadProperty;
        }
    });
    Object.defineProperty(X2, "OpaqueType", {
        enumerable: true,
        get: function() {
            return e323.opaqueType;
        }
    });
    Object.defineProperty(X2, "OptionalCallExpression", {
        enumerable: true,
        get: function() {
            return e323.optionalCallExpression;
        }
    });
    Object.defineProperty(X2, "OptionalIndexedAccessType", {
        enumerable: true,
        get: function() {
            return e323.optionalIndexedAccessType;
        }
    });
    Object.defineProperty(X2, "OptionalMemberExpression", {
        enumerable: true,
        get: function() {
            return e323.optionalMemberExpression;
        }
    });
    Object.defineProperty(X2, "ParenthesizedExpression", {
        enumerable: true,
        get: function() {
            return e323.parenthesizedExpression;
        }
    });
    Object.defineProperty(X2, "PipelineBareFunction", {
        enumerable: true,
        get: function() {
            return e323.pipelineBareFunction;
        }
    });
    Object.defineProperty(X2, "PipelinePrimaryTopicReference", {
        enumerable: true,
        get: function() {
            return e323.pipelinePrimaryTopicReference;
        }
    });
    Object.defineProperty(X2, "PipelineTopicExpression", {
        enumerable: true,
        get: function() {
            return e323.pipelineTopicExpression;
        }
    });
    Object.defineProperty(X2, "Placeholder", {
        enumerable: true,
        get: function() {
            return e323.placeholder;
        }
    });
    Object.defineProperty(X2, "PrivateName", {
        enumerable: true,
        get: function() {
            return e323.privateName;
        }
    });
    Object.defineProperty(X2, "Program", {
        enumerable: true,
        get: function() {
            return e323.program;
        }
    });
    Object.defineProperty(X2, "QualifiedTypeIdentifier", {
        enumerable: true,
        get: function() {
            return e323.qualifiedTypeIdentifier;
        }
    });
    Object.defineProperty(X2, "RecordExpression", {
        enumerable: true,
        get: function() {
            return e323.recordExpression;
        }
    });
    Object.defineProperty(X2, "RegExpLiteral", {
        enumerable: true,
        get: function() {
            return e323.regExpLiteral;
        }
    });
    Object.defineProperty(X2, "RegexLiteral", {
        enumerable: true,
        get: function() {
            return e323.regexLiteral;
        }
    });
    Object.defineProperty(X2, "RestElement", {
        enumerable: true,
        get: function() {
            return e323.restElement;
        }
    });
    Object.defineProperty(X2, "RestProperty", {
        enumerable: true,
        get: function() {
            return e323.restProperty;
        }
    });
    Object.defineProperty(X2, "ReturnStatement", {
        enumerable: true,
        get: function() {
            return e323.returnStatement;
        }
    });
    Object.defineProperty(X2, "SequenceExpression", {
        enumerable: true,
        get: function() {
            return e323.sequenceExpression;
        }
    });
    Object.defineProperty(X2, "SpreadElement", {
        enumerable: true,
        get: function() {
            return e323.spreadElement;
        }
    });
    Object.defineProperty(X2, "SpreadProperty", {
        enumerable: true,
        get: function() {
            return e323.spreadProperty;
        }
    });
    Object.defineProperty(X2, "StaticBlock", {
        enumerable: true,
        get: function() {
            return e323.staticBlock;
        }
    });
    Object.defineProperty(X2, "StringLiteral", {
        enumerable: true,
        get: function() {
            return e323.stringLiteral;
        }
    });
    Object.defineProperty(X2, "StringLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.stringLiteralTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "StringTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.stringTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "Super", {
        enumerable: true,
        get: function() {
            return e323.super;
        }
    });
    Object.defineProperty(X2, "SwitchCase", {
        enumerable: true,
        get: function() {
            return e323.switchCase;
        }
    });
    Object.defineProperty(X2, "SwitchStatement", {
        enumerable: true,
        get: function() {
            return e323.switchStatement;
        }
    });
    Object.defineProperty(X2, "SymbolTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.symbolTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "TSAnyKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsAnyKeyword;
        }
    });
    Object.defineProperty(X2, "TSArrayType", {
        enumerable: true,
        get: function() {
            return e323.tsArrayType;
        }
    });
    Object.defineProperty(X2, "TSAsExpression", {
        enumerable: true,
        get: function() {
            return e323.tsAsExpression;
        }
    });
    Object.defineProperty(X2, "TSBigIntKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsBigIntKeyword;
        }
    });
    Object.defineProperty(X2, "TSBooleanKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsBooleanKeyword;
        }
    });
    Object.defineProperty(X2, "TSCallSignatureDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsCallSignatureDeclaration;
        }
    });
    Object.defineProperty(X2, "TSConditionalType", {
        enumerable: true,
        get: function() {
            return e323.tsConditionalType;
        }
    });
    Object.defineProperty(X2, "TSConstructSignatureDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsConstructSignatureDeclaration;
        }
    });
    Object.defineProperty(X2, "TSConstructorType", {
        enumerable: true,
        get: function() {
            return e323.tsConstructorType;
        }
    });
    Object.defineProperty(X2, "TSDeclareFunction", {
        enumerable: true,
        get: function() {
            return e323.tsDeclareFunction;
        }
    });
    Object.defineProperty(X2, "TSDeclareMethod", {
        enumerable: true,
        get: function() {
            return e323.tsDeclareMethod;
        }
    });
    Object.defineProperty(X2, "TSEnumDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsEnumDeclaration;
        }
    });
    Object.defineProperty(X2, "TSEnumMember", {
        enumerable: true,
        get: function() {
            return e323.tsEnumMember;
        }
    });
    Object.defineProperty(X2, "TSExportAssignment", {
        enumerable: true,
        get: function() {
            return e323.tsExportAssignment;
        }
    });
    Object.defineProperty(X2, "TSExpressionWithTypeArguments", {
        enumerable: true,
        get: function() {
            return e323.tsExpressionWithTypeArguments;
        }
    });
    Object.defineProperty(X2, "TSExternalModuleReference", {
        enumerable: true,
        get: function() {
            return e323.tsExternalModuleReference;
        }
    });
    Object.defineProperty(X2, "TSFunctionType", {
        enumerable: true,
        get: function() {
            return e323.tsFunctionType;
        }
    });
    Object.defineProperty(X2, "TSImportEqualsDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsImportEqualsDeclaration;
        }
    });
    Object.defineProperty(X2, "TSImportType", {
        enumerable: true,
        get: function() {
            return e323.tsImportType;
        }
    });
    Object.defineProperty(X2, "TSIndexSignature", {
        enumerable: true,
        get: function() {
            return e323.tsIndexSignature;
        }
    });
    Object.defineProperty(X2, "TSIndexedAccessType", {
        enumerable: true,
        get: function() {
            return e323.tsIndexedAccessType;
        }
    });
    Object.defineProperty(X2, "TSInferType", {
        enumerable: true,
        get: function() {
            return e323.tsInferType;
        }
    });
    Object.defineProperty(X2, "TSInterfaceBody", {
        enumerable: true,
        get: function() {
            return e323.tsInterfaceBody;
        }
    });
    Object.defineProperty(X2, "TSInterfaceDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsInterfaceDeclaration;
        }
    });
    Object.defineProperty(X2, "TSIntersectionType", {
        enumerable: true,
        get: function() {
            return e323.tsIntersectionType;
        }
    });
    Object.defineProperty(X2, "TSIntrinsicKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsIntrinsicKeyword;
        }
    });
    Object.defineProperty(X2, "TSLiteralType", {
        enumerable: true,
        get: function() {
            return e323.tsLiteralType;
        }
    });
    Object.defineProperty(X2, "TSMappedType", {
        enumerable: true,
        get: function() {
            return e323.tsMappedType;
        }
    });
    Object.defineProperty(X2, "TSMethodSignature", {
        enumerable: true,
        get: function() {
            return e323.tsMethodSignature;
        }
    });
    Object.defineProperty(X2, "TSModuleBlock", {
        enumerable: true,
        get: function() {
            return e323.tsModuleBlock;
        }
    });
    Object.defineProperty(X2, "TSModuleDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsModuleDeclaration;
        }
    });
    Object.defineProperty(X2, "TSNamedTupleMember", {
        enumerable: true,
        get: function() {
            return e323.tsNamedTupleMember;
        }
    });
    Object.defineProperty(X2, "TSNamespaceExportDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsNamespaceExportDeclaration;
        }
    });
    Object.defineProperty(X2, "TSNeverKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsNeverKeyword;
        }
    });
    Object.defineProperty(X2, "TSNonNullExpression", {
        enumerable: true,
        get: function() {
            return e323.tsNonNullExpression;
        }
    });
    Object.defineProperty(X2, "TSNullKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsNullKeyword;
        }
    });
    Object.defineProperty(X2, "TSNumberKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsNumberKeyword;
        }
    });
    Object.defineProperty(X2, "TSObjectKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsObjectKeyword;
        }
    });
    Object.defineProperty(X2, "TSOptionalType", {
        enumerable: true,
        get: function() {
            return e323.tsOptionalType;
        }
    });
    Object.defineProperty(X2, "TSParameterProperty", {
        enumerable: true,
        get: function() {
            return e323.tsParameterProperty;
        }
    });
    Object.defineProperty(X2, "TSParenthesizedType", {
        enumerable: true,
        get: function() {
            return e323.tsParenthesizedType;
        }
    });
    Object.defineProperty(X2, "TSPropertySignature", {
        enumerable: true,
        get: function() {
            return e323.tsPropertySignature;
        }
    });
    Object.defineProperty(X2, "TSQualifiedName", {
        enumerable: true,
        get: function() {
            return e323.tsQualifiedName;
        }
    });
    Object.defineProperty(X2, "TSRestType", {
        enumerable: true,
        get: function() {
            return e323.tsRestType;
        }
    });
    Object.defineProperty(X2, "TSStringKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsStringKeyword;
        }
    });
    Object.defineProperty(X2, "TSSymbolKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsSymbolKeyword;
        }
    });
    Object.defineProperty(X2, "TSThisType", {
        enumerable: true,
        get: function() {
            return e323.tsThisType;
        }
    });
    Object.defineProperty(X2, "TSTupleType", {
        enumerable: true,
        get: function() {
            return e323.tsTupleType;
        }
    });
    Object.defineProperty(X2, "TSTypeAliasDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsTypeAliasDeclaration;
        }
    });
    Object.defineProperty(X2, "TSTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.tsTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "TSTypeAssertion", {
        enumerable: true,
        get: function() {
            return e323.tsTypeAssertion;
        }
    });
    Object.defineProperty(X2, "TSTypeLiteral", {
        enumerable: true,
        get: function() {
            return e323.tsTypeLiteral;
        }
    });
    Object.defineProperty(X2, "TSTypeOperator", {
        enumerable: true,
        get: function() {
            return e323.tsTypeOperator;
        }
    });
    Object.defineProperty(X2, "TSTypeParameter", {
        enumerable: true,
        get: function() {
            return e323.tsTypeParameter;
        }
    });
    Object.defineProperty(X2, "TSTypeParameterDeclaration", {
        enumerable: true,
        get: function() {
            return e323.tsTypeParameterDeclaration;
        }
    });
    Object.defineProperty(X2, "TSTypeParameterInstantiation", {
        enumerable: true,
        get: function() {
            return e323.tsTypeParameterInstantiation;
        }
    });
    Object.defineProperty(X2, "TSTypePredicate", {
        enumerable: true,
        get: function() {
            return e323.tsTypePredicate;
        }
    });
    Object.defineProperty(X2, "TSTypeQuery", {
        enumerable: true,
        get: function() {
            return e323.tsTypeQuery;
        }
    });
    Object.defineProperty(X2, "TSTypeReference", {
        enumerable: true,
        get: function() {
            return e323.tsTypeReference;
        }
    });
    Object.defineProperty(X2, "TSUndefinedKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsUndefinedKeyword;
        }
    });
    Object.defineProperty(X2, "TSUnionType", {
        enumerable: true,
        get: function() {
            return e323.tsUnionType;
        }
    });
    Object.defineProperty(X2, "TSUnknownKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsUnknownKeyword;
        }
    });
    Object.defineProperty(X2, "TSVoidKeyword", {
        enumerable: true,
        get: function() {
            return e323.tsVoidKeyword;
        }
    });
    Object.defineProperty(X2, "TaggedTemplateExpression", {
        enumerable: true,
        get: function() {
            return e323.taggedTemplateExpression;
        }
    });
    Object.defineProperty(X2, "TemplateElement", {
        enumerable: true,
        get: function() {
            return e323.templateElement;
        }
    });
    Object.defineProperty(X2, "TemplateLiteral", {
        enumerable: true,
        get: function() {
            return e323.templateLiteral;
        }
    });
    Object.defineProperty(X2, "ThisExpression", {
        enumerable: true,
        get: function() {
            return e323.thisExpression;
        }
    });
    Object.defineProperty(X2, "ThisTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.thisTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "ThrowStatement", {
        enumerable: true,
        get: function() {
            return e323.throwStatement;
        }
    });
    Object.defineProperty(X2, "TopicReference", {
        enumerable: true,
        get: function() {
            return e323.topicReference;
        }
    });
    Object.defineProperty(X2, "TryStatement", {
        enumerable: true,
        get: function() {
            return e323.tryStatement;
        }
    });
    Object.defineProperty(X2, "TupleExpression", {
        enumerable: true,
        get: function() {
            return e323.tupleExpression;
        }
    });
    Object.defineProperty(X2, "TupleTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.tupleTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "TypeAlias", {
        enumerable: true,
        get: function() {
            return e323.typeAlias;
        }
    });
    Object.defineProperty(X2, "TypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.typeAnnotation;
        }
    });
    Object.defineProperty(X2, "TypeCastExpression", {
        enumerable: true,
        get: function() {
            return e323.typeCastExpression;
        }
    });
    Object.defineProperty(X2, "TypeParameter", {
        enumerable: true,
        get: function() {
            return e323.typeParameter;
        }
    });
    Object.defineProperty(X2, "TypeParameterDeclaration", {
        enumerable: true,
        get: function() {
            return e323.typeParameterDeclaration;
        }
    });
    Object.defineProperty(X2, "TypeParameterInstantiation", {
        enumerable: true,
        get: function() {
            return e323.typeParameterInstantiation;
        }
    });
    Object.defineProperty(X2, "TypeofTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.typeofTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "UnaryExpression", {
        enumerable: true,
        get: function() {
            return e323.unaryExpression;
        }
    });
    Object.defineProperty(X2, "UnionTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.unionTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "UpdateExpression", {
        enumerable: true,
        get: function() {
            return e323.updateExpression;
        }
    });
    Object.defineProperty(X2, "V8IntrinsicIdentifier", {
        enumerable: true,
        get: function() {
            return e323.v8IntrinsicIdentifier;
        }
    });
    Object.defineProperty(X2, "VariableDeclaration", {
        enumerable: true,
        get: function() {
            return e323.variableDeclaration;
        }
    });
    Object.defineProperty(X2, "VariableDeclarator", {
        enumerable: true,
        get: function() {
            return e323.variableDeclarator;
        }
    });
    Object.defineProperty(X2, "Variance", {
        enumerable: true,
        get: function() {
            return e323.variance;
        }
    });
    Object.defineProperty(X2, "VoidTypeAnnotation", {
        enumerable: true,
        get: function() {
            return e323.voidTypeAnnotation;
        }
    });
    Object.defineProperty(X2, "WhileStatement", {
        enumerable: true,
        get: function() {
            return e323.whileStatement;
        }
    });
    Object.defineProperty(X2, "WithStatement", {
        enumerable: true,
        get: function() {
            return e323.withStatement;
        }
    });
    Object.defineProperty(X2, "YieldExpression", {
        enumerable: true,
        get: function() {
            return e323.yieldExpression;
        }
    });
    var e323 = dew5();
    return X2;
}
var J2 = {}, k2 = false;
function dew$G() {
    if (k2) return J2;
    k2 = true;
    Object.defineProperty(J2, "__esModule", {
        value: true
    });
    J2.default = cloneNode;
    var t316 = dew3();
    var s10 = dew1();
    const a6 = Function.call.bind(Object.prototype.hasOwnProperty);
    function cloneIfNode(e324, t317, r13) {
        return e324 && "string" === typeof e324.type ? cloneNode(e324, t317, r13) : e324;
    }
    function cloneIfNodeOrArray(e325, t318, r14) {
        return Array.isArray(e325) ? e325.map((e326)=>cloneIfNode(e326, t318, r14)
        ) : cloneIfNode(e325, t318, r14);
    }
    function cloneNode(e327, r15 = true, n510 = false) {
        if (!e327) return e327;
        const { type: i5  } = e327;
        const o211 = {
            type: e327.type
        };
        if ((0, s10.isIdentifier)(e327)) {
            o211.name = e327.name;
            a6(e327, "optional") && "boolean" === typeof e327.optional && (o211.optional = e327.optional);
            a6(e327, "typeAnnotation") && (o211.typeAnnotation = r15 ? cloneIfNodeOrArray(e327.typeAnnotation, true, n510) : e327.typeAnnotation);
        } else {
            if (!a6(t316.NODE_FIELDS, i5)) throw new Error(`Unknown node type: "${i5}"`);
            for (const p112 of Object.keys(t316.NODE_FIELDS[i5]))a6(e327, p112) && (o211[p112] = r15 ? (0, s10.isFile)(e327) && "comments" === p112 ? maybeCloneComments(e327.comments, r15, n510) : cloneIfNodeOrArray(e327[p112], true, n510) : e327[p112]);
        }
        a6(e327, "loc") && (o211.loc = n510 ? null : e327.loc);
        a6(e327, "leadingComments") && (o211.leadingComments = maybeCloneComments(e327.leadingComments, r15, n510));
        a6(e327, "innerComments") && (o211.innerComments = maybeCloneComments(e327.innerComments, r15, n510));
        a6(e327, "trailingComments") && (o211.trailingComments = maybeCloneComments(e327.trailingComments, r15, n510));
        a6(e327, "extra") && (o211.extra = Object.assign({}, e327.extra));
        return o211;
    }
    function maybeCloneComments(e328, t319, r16) {
        return e328 && t319 ? e328.map(({ type: e329 , value: t320 , loc: s11  })=>r16 ? {
                type: e329,
                value: t320,
                loc: null
            } : {
                type: e329,
                value: t320,
                loc: s11
            }
        ) : e328;
    }
    return J2;
}
var $3 = {}, V3 = false;
function dew$F() {
    if (V3) return $3;
    V3 = true;
    Object.defineProperty($3, "__esModule", {
        value: true
    });
    $3.default = clone;
    var e330 = dew$G();
    function clone(t321) {
        return (0, e330.default)(t321, false);
    }
    return $3;
}
var W3 = {}, q2 = false;
function dew$E() {
    if (q2) return W3;
    q2 = true;
    Object.defineProperty(W3, "__esModule", {
        value: true
    });
    W3.default = cloneDeep;
    var e331 = dew$G();
    function cloneDeep(t322) {
        return (0, e331.default)(t322);
    }
    return W3;
}
var Q2 = {}, z2 = false;
function dew$D() {
    if (z2) return Q2;
    z2 = true;
    Object.defineProperty(Q2, "__esModule", {
        value: true
    });
    Q2.default = cloneDeepWithoutLoc;
    var e332 = dew$G();
    function cloneDeepWithoutLoc(t323) {
        return (0, e332.default)(t323, true, true);
    }
    return Q2;
}
var G2 = {}, H2 = false;
function dew$C() {
    if (H2) return G2;
    H2 = true;
    Object.defineProperty(G2, "__esModule", {
        value: true
    });
    G2.default = cloneWithoutLoc;
    var e333 = dew$G();
    function cloneWithoutLoc(t324) {
        return (0, e333.default)(t324, false, true);
    }
    return G2;
}
var Z2 = {}, ee2 = false;
function dew$B() {
    if (ee2) return Z2;
    ee2 = true;
    Object.defineProperty(Z2, "__esModule", {
        value: true
    });
    Z2.default = addComments;
    function addComments(e334, t325, r17) {
        if (!r17 || !e334) return e334;
        const s12 = `${t325}Comments`;
        e334[s12] ? "leading" === t325 ? e334[s12] = r17.concat(e334[s12]) : e334[s12].push(...r17) : e334[s12] = r17;
        return e334;
    }
    return Z2;
}
var te2 = {}, re2 = false;
function dew$A() {
    if (re2) return te2;
    re2 = true;
    Object.defineProperty(te2, "__esModule", {
        value: true
    });
    te2.default = addComment;
    var e335 = dew$B();
    function addComment(t326, r18, s13, a7) {
        return (0, e335.default)(t326, r18, [
            {
                type: a7 ? "CommentLine" : "CommentBlock",
                value: s13
            }
        ]);
    }
    return te2;
}
var se1 = {}, ae2 = false;
function dew$z() {
    if (ae2) return se1;
    ae2 = true;
    Object.defineProperty(se1, "__esModule", {
        value: true
    });
    se1.default = inherit;
    function inherit(e336, t327, r19) {
        t327 && r19 && (t327[e336] = Array.from(new Set([].concat(t327[e336], r19[e336]).filter(Boolean))));
    }
    return se1;
}
var ne2 = {}, ie2 = false;
function dew$y() {
    if (ie2) return ne2;
    ie2 = true;
    Object.defineProperty(ne2, "__esModule", {
        value: true
    });
    ne2.default = inheritInnerComments;
    var e337 = dew$z();
    function inheritInnerComments(t328, r20) {
        (0, e337.default)("innerComments", t328, r20);
    }
    return ne2;
}
var oe2 = {}, pe = false;
function dew$x() {
    if (pe) return oe2;
    pe = true;
    Object.defineProperty(oe2, "__esModule", {
        value: true
    });
    oe2.default = inheritLeadingComments;
    var e338 = dew$z();
    function inheritLeadingComments(t329, r21) {
        (0, e338.default)("leadingComments", t329, r21);
    }
    return oe2;
}
var ue = {}, le = false;
function dew$w() {
    if (le) return ue;
    le = true;
    Object.defineProperty(ue, "__esModule", {
        value: true
    });
    ue.default = inheritTrailingComments;
    var e339 = dew$z();
    function inheritTrailingComments(t330, r22) {
        (0, e339.default)("trailingComments", t330, r22);
    }
    return ue;
}
var ce = {}, Te = false;
function dew$v() {
    if (Te) return ce;
    Te = true;
    Object.defineProperty(ce, "__esModule", {
        value: true
    });
    ce.default = inheritsComments;
    var e340 = dew$w();
    var t331 = dew$x();
    var r23 = dew$y();
    function inheritsComments(s14, a8) {
        (0, e340.default)(s14, a8);
        (0, t331.default)(s14, a8);
        (0, r23.default)(s14, a8);
        return s14;
    }
    return ce;
}
var ye = {}, de = false;
function dew$u() {
    if (de) return ye;
    de = true;
    Object.defineProperty(ye, "__esModule", {
        value: true
    });
    ye.default = removeComments;
    var e341 = dew2();
    function removeComments(t332) {
        e341.COMMENT_KEYS.forEach((e342)=>{
            t332[e342] = null;
        });
        return t332;
    }
    return ye;
}
var Se = {}, me = false;
function dew$t() {
    if (me) return Se;
    me = true;
    Object.defineProperty(Se, "__esModule", {
        value: true
    });
    Se.WHILE_TYPES = Se.USERWHITESPACABLE_TYPES = Se.UNARYLIKE_TYPES = Se.TYPESCRIPT_TYPES = Se.TSTYPE_TYPES = Se.TSTYPEELEMENT_TYPES = Se.TSENTITYNAME_TYPES = Se.TSBASETYPE_TYPES = Se.TERMINATORLESS_TYPES = Se.STATEMENT_TYPES = Se.STANDARDIZED_TYPES = Se.SCOPABLE_TYPES = Se.PUREISH_TYPES = Se.PROPERTY_TYPES = Se.PRIVATE_TYPES = Se.PATTERN_TYPES = Se.PATTERNLIKE_TYPES = Se.OBJECTMEMBER_TYPES = Se.MODULESPECIFIER_TYPES = Se.MODULEDECLARATION_TYPES = Se.MISCELLANEOUS_TYPES = Se.METHOD_TYPES = Se.LVAL_TYPES = Se.LOOP_TYPES = Se.LITERAL_TYPES = Se.JSX_TYPES = Se.IMMUTABLE_TYPES = Se.FUNCTION_TYPES = Se.FUNCTIONPARENT_TYPES = Se.FOR_TYPES = Se.FORXSTATEMENT_TYPES = Se.FLOW_TYPES = Se.FLOWTYPE_TYPES = Se.FLOWPREDICATE_TYPES = Se.FLOWDECLARATION_TYPES = Se.FLOWBASEANNOTATION_TYPES = Se.EXPRESSION_TYPES = Se.EXPRESSIONWRAPPER_TYPES = Se.EXPORTDECLARATION_TYPES = Se.ENUMMEMBER_TYPES = Se.ENUMBODY_TYPES = Se.DECLARATION_TYPES = Se.CONDITIONAL_TYPES = Se.COMPLETIONSTATEMENT_TYPES = Se.CLASS_TYPES = Se.BLOCK_TYPES = Se.BLOCKPARENT_TYPES = Se.BINARY_TYPES = Se.ACCESSOR_TYPES = void 0;
    var e343 = dew3();
    const t333 = e343.FLIPPED_ALIAS_KEYS.Standardized;
    Se.STANDARDIZED_TYPES = t333;
    const s15 = e343.FLIPPED_ALIAS_KEYS.Expression;
    Se.EXPRESSION_TYPES = s15;
    const a9 = e343.FLIPPED_ALIAS_KEYS.Binary;
    Se.BINARY_TYPES = a9;
    const n610 = e343.FLIPPED_ALIAS_KEYS.Scopable;
    Se.SCOPABLE_TYPES = n610;
    const i6 = e343.FLIPPED_ALIAS_KEYS.BlockParent;
    Se.BLOCKPARENT_TYPES = i6;
    const o311 = e343.FLIPPED_ALIAS_KEYS.Block;
    Se.BLOCK_TYPES = o311;
    const p211 = e343.FLIPPED_ALIAS_KEYS.Statement;
    Se.STATEMENT_TYPES = p211;
    const u112 = e343.FLIPPED_ALIAS_KEYS.Terminatorless;
    Se.TERMINATORLESS_TYPES = u112;
    const l113 = e343.FLIPPED_ALIAS_KEYS.CompletionStatement;
    Se.COMPLETIONSTATEMENT_TYPES = l113;
    const c112 = e343.FLIPPED_ALIAS_KEYS.Conditional;
    Se.CONDITIONAL_TYPES = c112;
    const T111 = e343.FLIPPED_ALIAS_KEYS.Loop;
    Se.LOOP_TYPES = T111;
    const y111 = e343.FLIPPED_ALIAS_KEYS.While;
    Se.WHILE_TYPES = y111;
    const d111 = e343.FLIPPED_ALIAS_KEYS.ExpressionWrapper;
    Se.EXPRESSIONWRAPPER_TYPES = d111;
    const S110 = e343.FLIPPED_ALIAS_KEYS.For;
    Se.FOR_TYPES = S110;
    const m110 = e343.FLIPPED_ALIAS_KEYS.ForXStatement;
    Se.FORXSTATEMENT_TYPES = m110;
    const f111 = e343.FLIPPED_ALIAS_KEYS.Function;
    Se.FUNCTION_TYPES = f111;
    const E111 = e343.FLIPPED_ALIAS_KEYS.FunctionParent;
    Se.FUNCTIONPARENT_TYPES = E111;
    const P110 = e343.FLIPPED_ALIAS_KEYS.Pureish;
    Se.PUREISH_TYPES = P110;
    const b110 = e343.FLIPPED_ALIAS_KEYS.Declaration;
    Se.DECLARATION_TYPES = b110;
    const A110 = e343.FLIPPED_ALIAS_KEYS.PatternLike;
    Se.PATTERNLIKE_TYPES = A110;
    const x110 = e343.FLIPPED_ALIAS_KEYS.LVal;
    Se.LVAL_TYPES = x110;
    const O111 = e343.FLIPPED_ALIAS_KEYS.TSEntityName;
    Se.TSENTITYNAME_TYPES = O111;
    const g110 = e343.FLIPPED_ALIAS_KEYS.Literal;
    Se.LITERAL_TYPES = g110;
    const I110 = e343.FLIPPED_ALIAS_KEYS.Immutable;
    Se.IMMUTABLE_TYPES = I110;
    const D19 = e343.FLIPPED_ALIAS_KEYS.UserWhitespacable;
    Se.USERWHITESPACABLE_TYPES = D19;
    const j110 = e343.FLIPPED_ALIAS_KEYS.Method;
    Se.METHOD_TYPES = j110;
    const L18 = e343.FLIPPED_ALIAS_KEYS.ObjectMember;
    Se.OBJECTMEMBER_TYPES = L18;
    const N110 = e343.FLIPPED_ALIAS_KEYS.Property;
    Se.PROPERTY_TYPES = N110;
    const C110 = e343.FLIPPED_ALIAS_KEYS.UnaryLike;
    Se.UNARYLIKE_TYPES = C110;
    const M110 = e343.FLIPPED_ALIAS_KEYS.Pattern;
    Se.PATTERN_TYPES = M110;
    const w110 = e343.FLIPPED_ALIAS_KEYS.Class;
    Se.CLASS_TYPES = w110;
    const _110 = e343.FLIPPED_ALIAS_KEYS.ModuleDeclaration;
    Se.MODULEDECLARATION_TYPES = _110;
    const h110 = e343.FLIPPED_ALIAS_KEYS.ExportDeclaration;
    Se.EXPORTDECLARATION_TYPES = h110;
    const v111 = e343.FLIPPED_ALIAS_KEYS.ModuleSpecifier;
    Se.MODULESPECIFIER_TYPES = v111;
    const B110 = e343.FLIPPED_ALIAS_KEYS.Accessor;
    Se.ACCESSOR_TYPES = B110;
    const F110 = e343.FLIPPED_ALIAS_KEYS.Private;
    Se.PRIVATE_TYPES = F110;
    const R18 = e343.FLIPPED_ALIAS_KEYS.Flow;
    Se.FLOW_TYPES = R18;
    const Y16 = e343.FLIPPED_ALIAS_KEYS.FlowType;
    Se.FLOWTYPE_TYPES = Y16;
    const K15 = e343.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;
    Se.FLOWBASEANNOTATION_TYPES = K15;
    const X15 = e343.FLIPPED_ALIAS_KEYS.FlowDeclaration;
    Se.FLOWDECLARATION_TYPES = X15;
    const U19 = e343.FLIPPED_ALIAS_KEYS.FlowPredicate;
    Se.FLOWPREDICATE_TYPES = U19;
    const J14 = e343.FLIPPED_ALIAS_KEYS.EnumBody;
    Se.ENUMBODY_TYPES = J14;
    const k110 = e343.FLIPPED_ALIAS_KEYS.EnumMember;
    Se.ENUMMEMBER_TYPES = k110;
    const $19 = e343.FLIPPED_ALIAS_KEYS.JSX;
    Se.JSX_TYPES = $19;
    const V110 = e343.FLIPPED_ALIAS_KEYS.Miscellaneous;
    Se.MISCELLANEOUS_TYPES = V110;
    const W17 = e343.FLIPPED_ALIAS_KEYS.TypeScript;
    Se.TYPESCRIPT_TYPES = W17;
    const q16 = e343.FLIPPED_ALIAS_KEYS.TSTypeElement;
    Se.TSTYPEELEMENT_TYPES = q16;
    const Q15 = e343.FLIPPED_ALIAS_KEYS.TSType;
    Se.TSTYPE_TYPES = Q15;
    const z15 = e343.FLIPPED_ALIAS_KEYS.TSBaseType;
    Se.TSBASETYPE_TYPES = z15;
    return Se;
}
var fe = {}, Ee = false;
function dew$s() {
    if (Ee) return fe;
    Ee = true;
    Object.defineProperty(fe, "__esModule", {
        value: true
    });
    fe.default = toBlock;
    var t334 = dew1();
    var r24 = dew5();
    function toBlock(e344, s16) {
        if ((0, t334.isBlockStatement)(e344)) return e344;
        let a10 = [];
        if ((0, t334.isEmptyStatement)(e344)) a10 = [];
        else {
            (0, t334.isStatement)(e344) || (e344 = (0, t334.isFunction)(s16) ? (0, r24.returnStatement)(e344) : (0, r24.expressionStatement)(e344));
            a10 = [
                e344
            ];
        }
        return (0, r24.blockStatement)(a10);
    }
    return fe;
}
var Pe = {}, be = false;
function dew$r() {
    if (be) return Pe;
    be = true;
    Object.defineProperty(Pe, "__esModule", {
        value: true
    });
    Pe.default = ensureBlock;
    var e345 = dew$s();
    function ensureBlock(t335, r25 = "body") {
        return t335[r25] = (0, e345.default)(t335[r25], t335);
    }
    return Pe;
}
var Ae = "default" in mod2 ? mod2.default : mod2;
var xe = {}, Oe = false;
function dew$q() {
    if (Oe) return xe;
    Oe = true;
    Object.defineProperty(xe, "__esModule", {
        value: true
    });
    xe.default = toIdentifier;
    var e346 = dew$a();
    var t336 = Ae;
    function toIdentifier(r26) {
        r26 += "";
        let s17 = "";
        for (const e347 of r26)s17 += (0, t336.isIdentifierChar)(e347.codePointAt(0)) ? e347 : "-";
        s17 = s17.replace(/^[-0-9]+/, "");
        s17 = s17.replace(/[-\s]+(.)?/g, function(e, t337) {
            return t337 ? t337.toUpperCase() : "";
        });
        (0, e346.default)(s17) || (s17 = `_${s17}`);
        return s17 || "_";
    }
    return xe;
}
var ge = {}, Ie = false;
function dew$p() {
    if (Ie) return ge;
    Ie = true;
    Object.defineProperty(ge, "__esModule", {
        value: true
    });
    ge.default = toBindingIdentifierName;
    var e348 = dew$q();
    function toBindingIdentifierName(t338) {
        t338 = (0, e348.default)(t338);
        "eval" !== t338 && "arguments" !== t338 || (t338 = "_" + t338);
        return t338;
    }
    return ge;
}
var De = {}, je = false;
function dew$o() {
    if (je) return De;
    je = true;
    Object.defineProperty(De, "__esModule", {
        value: true
    });
    De.default = toComputedKey;
    var t339 = dew1();
    var r27 = dew5();
    function toComputedKey(e349, s18 = e349.key || e349.property) {
        !e349.computed && (0, t339.isIdentifier)(s18) && (s18 = (0, r27.stringLiteral)(s18.name));
        return s18;
    }
    return De;
}
var Le = {}, Ne = false;
function dew$n() {
    if (Ne) return Le;
    Ne = true;
    Object.defineProperty(Le, "__esModule", {
        value: true
    });
    Le.default = void 0;
    var t340 = dew1();
    var r28 = toExpression;
    Le.default = r28;
    function toExpression(e350) {
        (0, t340.isExpressionStatement)(e350) && (e350 = e350.expression);
        if ((0, t340.isExpression)(e350)) return e350;
        (0, t340.isClass)(e350) ? e350.type = "ClassExpression" : (0, t340.isFunction)(e350) && (e350.type = "FunctionExpression");
        if (!(0, t340.isExpression)(e350)) throw new Error(`cannot turn ${e350.type} to an expression`);
        return e350;
    }
    return Le;
}
var Ce = {}, Me = false;
function dew$m() {
    if (Me) return Ce;
    Me = true;
    Object.defineProperty(Ce, "__esModule", {
        value: true
    });
    Ce.default = traverseFast;
    var e351 = dew3();
    function traverseFast(t341, r29, s19) {
        if (!t341) return;
        const a11 = e351.VISITOR_KEYS[t341.type];
        if (a11) {
            s19 = s19 || {};
            r29(t341, s19);
            for (const e353 of a11){
                const a12 = t341[e353];
                if (Array.isArray(a12)) for (const e352 of a12)traverseFast(e352, r29, s19);
                else traverseFast(a12, r29, s19);
            }
        }
    }
    return Ce;
}
var we = {}, _e = false;
function dew$l() {
    if (_e) return we;
    _e = true;
    Object.defineProperty(we, "__esModule", {
        value: true
    });
    we.default = removeProperties;
    var e354 = dew2();
    const t342 = [
        "tokens",
        "start",
        "end",
        "loc",
        "raw",
        "rawValue"
    ];
    const r30 = e354.COMMENT_KEYS.concat([
        "comments"
    ]).concat(t342);
    function removeProperties(e355, s20 = {}) {
        const a13 = s20.preserveComments ? t342 : r30;
        for (const t345 of a13)null != e355[t345] && (e355[t345] = void 0);
        for (const t343 of Object.keys(e355))"_" === t343[0] && null != e355[t343] && (e355[t343] = void 0);
        const n710 = Object.getOwnPropertySymbols(e355);
        for (const t344 of n710)e355[t344] = null;
    }
    return we;
}
var he = {}, ve1 = false;
function dew$k() {
    if (ve1) return he;
    ve1 = true;
    Object.defineProperty(he, "__esModule", {
        value: true
    });
    he.default = removePropertiesDeep;
    var e356 = dew$m();
    var t346 = dew$l();
    function removePropertiesDeep(r31, s21) {
        (0, e356.default)(r31, t346.default, s21);
        return r31;
    }
    return he;
}
var Be = {}, Fe = false;
function dew$j() {
    if (Fe) return Be;
    Fe = true;
    Object.defineProperty(Be, "__esModule", {
        value: true
    });
    Be.default = toKeyAlias;
    var t347 = dew1();
    var r32 = dew$G();
    var s22 = dew$k();
    function toKeyAlias(e357, a14 = e357.key) {
        let n8;
        if ("method" === e357.kind) return toKeyAlias.increment() + "";
        n8 = (0, t347.isIdentifier)(a14) ? a14.name : (0, t347.isStringLiteral)(a14) ? JSON.stringify(a14.value) : JSON.stringify((0, s22.default)((0, r32.default)(a14)));
        e357.computed && (n8 = `[${n8}]`);
        e357.static && (n8 = `static:${n8}`);
        return n8;
    }
    toKeyAlias.uid = 0;
    toKeyAlias.increment = function() {
        return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
    };
    return Be;
}
var Re = {}, Ye = false;
function dew$i() {
    if (Ye) return Re;
    Ye = true;
    Object.defineProperty(Re, "__esModule", {
        value: true
    });
    Re.default = getBindingIdentifiers;
    var t348 = dew1();
    function getBindingIdentifiers(e358, r33, s23) {
        let a15 = [].concat(e358);
        const n9 = Object.create(null);
        while(a15.length){
            const e359 = a15.shift();
            if (!e359) continue;
            const i7 = getBindingIdentifiers.keys[e359.type];
            if ((0, t348.isIdentifier)(e359)) if (r33) {
                const t349 = n9[e359.name] = n9[e359.name] || [];
                t349.push(e359);
            } else n9[e359.name] = e359;
            else if (!(0, t348.isExportDeclaration)(e359) || (0, t348.isExportAllDeclaration)(e359)) {
                if (s23) {
                    if ((0, t348.isFunctionDeclaration)(e359)) {
                        a15.push(e359.id);
                        continue;
                    }
                    if ((0, t348.isFunctionExpression)(e359)) continue;
                }
                if (i7) for(let t350 = 0; t350 < i7.length; t350++){
                    const r34 = i7[t350];
                    e359[r34] && (a15 = a15.concat(e359[r34]));
                }
            } else (0, t348.isDeclaration)(e359.declaration) && a15.push(e359.declaration);
        }
        return n9;
    }
    getBindingIdentifiers.keys = {
        DeclareClass: [
            "id"
        ],
        DeclareFunction: [
            "id"
        ],
        DeclareModule: [
            "id"
        ],
        DeclareVariable: [
            "id"
        ],
        DeclareInterface: [
            "id"
        ],
        DeclareTypeAlias: [
            "id"
        ],
        DeclareOpaqueType: [
            "id"
        ],
        InterfaceDeclaration: [
            "id"
        ],
        TypeAlias: [
            "id"
        ],
        OpaqueType: [
            "id"
        ],
        CatchClause: [
            "param"
        ],
        LabeledStatement: [
            "label"
        ],
        UnaryExpression: [
            "argument"
        ],
        AssignmentExpression: [
            "left"
        ],
        ImportSpecifier: [
            "local"
        ],
        ImportNamespaceSpecifier: [
            "local"
        ],
        ImportDefaultSpecifier: [
            "local"
        ],
        ImportDeclaration: [
            "specifiers"
        ],
        ExportSpecifier: [
            "exported"
        ],
        ExportNamespaceSpecifier: [
            "exported"
        ],
        ExportDefaultSpecifier: [
            "exported"
        ],
        FunctionDeclaration: [
            "id",
            "params"
        ],
        FunctionExpression: [
            "id",
            "params"
        ],
        ArrowFunctionExpression: [
            "params"
        ],
        ObjectMethod: [
            "params"
        ],
        ClassMethod: [
            "params"
        ],
        ClassPrivateMethod: [
            "params"
        ],
        ForInStatement: [
            "left"
        ],
        ForOfStatement: [
            "left"
        ],
        ClassDeclaration: [
            "id"
        ],
        ClassExpression: [
            "id"
        ],
        RestElement: [
            "argument"
        ],
        UpdateExpression: [
            "argument"
        ],
        ObjectProperty: [
            "value"
        ],
        AssignmentPattern: [
            "left"
        ],
        ArrayPattern: [
            "elements"
        ],
        ObjectPattern: [
            "properties"
        ],
        VariableDeclaration: [
            "declarations"
        ],
        VariableDeclarator: [
            "id"
        ]
    };
    return Re;
}
var Ke = {}, Xe = false;
function dew$h() {
    if (Xe) return Ke;
    Xe = true;
    Object.defineProperty(Ke, "__esModule", {
        value: true
    });
    Ke.default = gatherSequenceExpressions;
    var t351 = dew$i();
    var r35 = dew1();
    var s24 = dew5();
    var a16 = dew$G();
    function gatherSequenceExpressions(e360, n10, i8) {
        const o4 = [];
        let p311 = true;
        for (const u211 of e360){
            (0, r35.isEmptyStatement)(u211) || (p311 = false);
            if ((0, r35.isExpression)(u211)) o4.push(u211);
            else if ((0, r35.isExpressionStatement)(u211)) o4.push(u211.expression);
            else if ((0, r35.isVariableDeclaration)(u211)) {
                if ("var" !== u211.kind) return;
                for (const e362 of u211.declarations){
                    const r36 = (0, t351.default)(e362);
                    for (const e361 of Object.keys(r36))i8.push({
                        kind: u211.kind,
                        id: (0, a16.default)(r36[e361])
                    });
                    e362.init && o4.push((0, s24.assignmentExpression)("=", e362.id, e362.init));
                }
                p311 = true;
            } else if ((0, r35.isIfStatement)(u211)) {
                const e363 = u211.consequent ? gatherSequenceExpressions([
                    u211.consequent
                ], n10, i8) : n10.buildUndefinedNode();
                const t352 = u211.alternate ? gatherSequenceExpressions([
                    u211.alternate
                ], n10, i8) : n10.buildUndefinedNode();
                if (!e363 || !t352) return;
                o4.push((0, s24.conditionalExpression)(u211.test, e363, t352));
            } else if ((0, r35.isBlockStatement)(u211)) {
                const e364 = gatherSequenceExpressions(u211.body, n10, i8);
                if (!e364) return;
                o4.push(e364);
            } else {
                if (!(0, r35.isEmptyStatement)(u211)) return;
                0 === e360.indexOf(u211) && (p311 = true);
            }
        }
        p311 && o4.push(n10.buildUndefinedNode());
        return 1 === o4.length ? o4[0] : (0, s24.sequenceExpression)(o4);
    }
    return Ke;
}
var Ue = {}, Je = false;
function dew$g() {
    if (Je) return Ue;
    Je = true;
    Object.defineProperty(Ue, "__esModule", {
        value: true
    });
    Ue.default = toSequenceExpression;
    var e365 = dew$h();
    function toSequenceExpression(t353, r37) {
        if (!(null != t353 && t353.length)) return;
        const s25 = [];
        const a17 = (0, e365.default)(t353, r37, s25);
        if (a17) {
            for (const e366 of s25)r37.push(e366);
            return a17;
        }
    }
    return Ue;
}
var ke = {}, $e = false;
function dew$f() {
    if ($e) return ke;
    $e = true;
    Object.defineProperty(ke, "__esModule", {
        value: true
    });
    ke.default = void 0;
    var t354 = dew1();
    var r38 = dew5();
    var s26 = toStatement;
    ke.default = s26;
    function toStatement(e367, s27) {
        if ((0, t354.isStatement)(e367)) return e367;
        let a18 = false;
        let n11;
        if ((0, t354.isClass)(e367)) {
            a18 = true;
            n11 = "ClassDeclaration";
        } else if ((0, t354.isFunction)(e367)) {
            a18 = true;
            n11 = "FunctionDeclaration";
        } else if ((0, t354.isAssignmentExpression)(e367)) return (0, r38.expressionStatement)(e367);
        a18 && !e367.id && (n11 = false);
        if (!n11) {
            if (s27) return false;
            throw new Error(`cannot turn ${e367.type} to a statement`);
        }
        e367.type = n11;
        return e367;
    }
    return ke;
}
var Ve = {}, We = false;
function dew$e() {
    if (We) return Ve;
    We = true;
    Object.defineProperty(Ve, "__esModule", {
        value: true
    });
    Ve.default = void 0;
    var e368 = dew$a();
    var t355 = dew5();
    var r39 = valueToNode;
    Ve.default = r39;
    const s28 = Function.call.bind(Object.prototype.toString);
    function isRegExp(e369) {
        return "[object RegExp]" === s28(e369);
    }
    function isPlainObject(e370) {
        if ("object" !== typeof e370 || null === e370 || "[object Object]" !== Object.prototype.toString.call(e370)) return false;
        const t356 = Object.getPrototypeOf(e370);
        return null === t356 || null === Object.getPrototypeOf(t356);
    }
    function valueToNode(r40) {
        if (void 0 === r40) return (0, t355.identifier)("undefined");
        if (true === r40 || false === r40) return (0, t355.booleanLiteral)(r40);
        if (null === r40) return (0, t355.nullLiteral)();
        if ("string" === typeof r40) return (0, t355.stringLiteral)(r40);
        if ("number" === typeof r40) {
            let e371;
            if (Number.isFinite(r40)) e371 = (0, t355.numericLiteral)(Math.abs(r40));
            else {
                let s29;
                s29 = Number.isNaN(r40) ? (0, t355.numericLiteral)(0) : (0, t355.numericLiteral)(1);
                e371 = (0, t355.binaryExpression)("/", s29, (0, t355.numericLiteral)(0));
            }
            (r40 < 0 || Object.is(r40, -0)) && (e371 = (0, t355.unaryExpression)("-", e371));
            return e371;
        }
        if (isRegExp(r40)) {
            const e372 = r40.source;
            const s30 = r40.toString().match(/\/([a-z]+|)$/)[1];
            return (0, t355.regExpLiteral)(e372, s30);
        }
        if (Array.isArray(r40)) return (0, t355.arrayExpression)(r40.map(valueToNode));
        if (isPlainObject(r40)) {
            const s31 = [];
            for (const a19 of Object.keys(r40)){
                let n12;
                n12 = (0, e368.default)(a19) ? (0, t355.identifier)(a19) : (0, t355.stringLiteral)(a19);
                s31.push((0, t355.objectProperty)(n12, valueToNode(r40[a19])));
            }
            return (0, t355.objectExpression)(s31);
        }
        throw new Error("don't know how to turn this value into a node");
    }
    return Ve;
}
var qe = {}, Qe = false;
function dew$d1() {
    if (Qe) return qe;
    Qe = true;
    Object.defineProperty(qe, "__esModule", {
        value: true
    });
    qe.default = appendToMemberExpression;
    var e373 = dew5();
    function appendToMemberExpression(t357, r41, s32 = false) {
        t357.object = (0, e373.memberExpression)(t357.object, t357.property, t357.computed);
        t357.property = r41;
        t357.computed = !!s32;
        return t357;
    }
    return qe;
}
var ze = {}, Ge = false;
function dew$c1() {
    if (Ge) return ze;
    Ge = true;
    Object.defineProperty(ze, "__esModule", {
        value: true
    });
    ze.default = inherits;
    var e375 = dew2();
    var t359 = dew$v();
    function inherits(r42, s33) {
        if (!r42 || !s33) return r42;
        for (const t360 of e375.INHERIT_KEYS.optional)null == r42[t360] && (r42[t360] = s33[t360]);
        for (const e374 of Object.keys(s33))"_" === e374[0] && "__clone" !== e374 && (r42[e374] = s33[e374]);
        for (const t358 of e375.INHERIT_KEYS.force)r42[t358] = s33[t358];
        (0, t359.default)(r42, s33);
        return r42;
    }
    return ze;
}
var He = {}, Ze = false;
function dew$b1() {
    if (Ze) return He;
    Ze = true;
    Object.defineProperty(He, "__esModule", {
        value: true
    });
    He.default = prependToMemberExpression;
    var e376 = dew5();
    function prependToMemberExpression(t361, r43) {
        t361.object = (0, e376.memberExpression)(r43, t361.object);
        return t361;
    }
    return He;
}
var et = {}, tt = false;
function dew$a1() {
    if (tt) return et;
    tt = true;
    Object.defineProperty(et, "__esModule", {
        value: true
    });
    et.default = void 0;
    var e377 = dew$i();
    var t362 = getOuterBindingIdentifiers;
    et.default = t362;
    function getOuterBindingIdentifiers(t363, r44) {
        return (0, e377.default)(t363, r44, true);
    }
    return et;
}
var rt = {}, st = false;
function dew$91() {
    if (st) return rt;
    st = true;
    Object.defineProperty(rt, "__esModule", {
        value: true
    });
    rt.default = traverse;
    var e378 = dew3();
    function traverse(e379, t364, r45) {
        "function" === typeof t364 && (t364 = {
            enter: t364
        });
        const { enter: s34 , exit: a20  } = t364;
        traverseSimpleImpl(e379, s34, a20, r45, []);
    }
    function traverseSimpleImpl(t365, r46, s35, a21, n13) {
        const i9 = e378.VISITOR_KEYS[t365.type];
        if (i9) {
            r46 && r46(t365, n13, a21);
            for (const e380 of i9){
                const i10 = t365[e380];
                if (Array.isArray(i10)) for(let o5 = 0; o5 < i10.length; o5++){
                    const p4 = i10[o5];
                    if (p4) {
                        n13.push({
                            node: t365,
                            key: e380,
                            index: o5
                        });
                        traverseSimpleImpl(p4, r46, s35, a21, n13);
                        n13.pop();
                    }
                }
                else if (i10) {
                    n13.push({
                        node: t365,
                        key: e380
                    });
                    traverseSimpleImpl(i10, r46, s35, a21, n13);
                    n13.pop();
                }
            }
            s35 && s35(t365, n13, a21);
        }
    }
    return rt;
}
var at = {}, nt = false;
function dew$81() {
    if (nt) return at;
    nt = true;
    Object.defineProperty(at, "__esModule", {
        value: true
    });
    at.default = isBinding;
    var e382 = dew$i();
    function isBinding(t366, r47, s36) {
        if (s36 && "Identifier" === t366.type && "ObjectProperty" === r47.type && "ObjectExpression" === s36.type) return false;
        const a22 = e382.default.keys[r47.type];
        if (a22) for(let e381 = 0; e381 < a22.length; e381++){
            const s37 = a22[e381];
            const n14 = r47[s37];
            if (Array.isArray(n14)) {
                if (n14.indexOf(t366) >= 0) return true;
            } else if (n14 === t366) return true;
        }
        return false;
    }
    return at;
}
var it = {}, ot = false;
function dew$71() {
    if (ot) return it;
    ot = true;
    Object.defineProperty(it, "__esModule", {
        value: true
    });
    it.default = isImmutable;
    var t367 = dew$d();
    var r48 = dew1();
    function isImmutable(e383) {
        return !!(0, t367.default)(e383.type, "Immutable") || !!(0, r48.isIdentifier)(e383) && "undefined" === e383.name;
    }
    return it;
}
var pt = {}, ut = false;
function dew$61() {
    if (ut) return pt;
    ut = true;
    Object.defineProperty(pt, "__esModule", {
        value: true
    });
    pt.default = isNodesEquivalent;
    var e385 = dew3();
    function isNodesEquivalent(t368, r49) {
        if ("object" !== typeof t368 || "object" !== typeof r49 || null == t368 || null == r49) return t368 === r49;
        if (t368.type !== r49.type) return false;
        const s38 = Object.keys(e385.NODE_FIELDS[t368.type] || t368.type);
        const a23 = e385.VISITOR_KEYS[t368.type];
        for (const e384 of s38){
            if (typeof t368[e384] !== typeof r49[e384]) return false;
            if (null != t368[e384] || null != r49[e384]) {
                if (null == t368[e384] || null == r49[e384]) return false;
                if (Array.isArray(t368[e384])) {
                    if (!Array.isArray(r49[e384])) return false;
                    if (t368[e384].length !== r49[e384].length) return false;
                    for(let s39 = 0; s39 < t368[e384].length; s39++)if (!isNodesEquivalent(t368[e384][s39], r49[e384][s39])) return false;
                } else if ("object" !== typeof t368[e384] || null != a23 && a23.includes(e384)) {
                    if (!isNodesEquivalent(t368[e384], r49[e384])) return false;
                } else for (const s40 of Object.keys(t368[e384]))if (t368[e384][s40] !== r49[e384][s40]) return false;
            }
        }
        return true;
    }
    return pt;
}
var lt1 = {}, ct = false;
function dew$51() {
    if (ct) return lt1;
    ct = true;
    Object.defineProperty(lt1, "__esModule", {
        value: true
    });
    lt1.default = isScope;
    var t369 = dew1();
    function isScope(e386, r50) {
        return (!(0, t369.isBlockStatement)(e386) || !(0, t369.isFunction)(r50) && !(0, t369.isCatchClause)(r50)) && (!(!(0, t369.isPattern)(e386) || !(0, t369.isFunction)(r50) && !(0, t369.isCatchClause)(r50)) || (0, t369.isScopable)(e386));
    }
    return lt1;
}
var Tt = {}, yt = false;
function dew$41() {
    if (yt) return Tt;
    yt = true;
    Object.defineProperty(Tt, "__esModule", {
        value: true
    });
    Tt.default = isSpecifierDefault;
    var t370 = dew1();
    function isSpecifierDefault(e387) {
        return (0, t370.isImportDefaultSpecifier)(e387) || (0, t370.isIdentifier)(e387.imported || e387.exported, {
            name: "default"
        });
    }
    return Tt;
}
var dt = {}, St = false;
function dew$31() {
    if (St) return dt;
    St = true;
    Object.defineProperty(dt, "__esModule", {
        value: true
    });
    dt.default = isValidES3Identifier;
    var e388 = dew$a();
    const t371 = new Set([
        "abstract",
        "boolean",
        "byte",
        "char",
        "double",
        "enum",
        "final",
        "float",
        "goto",
        "implements",
        "int",
        "interface",
        "long",
        "native",
        "package",
        "private",
        "protected",
        "public",
        "short",
        "static",
        "synchronized",
        "throws",
        "transient",
        "volatile"
    ]);
    function isValidES3Identifier(r51) {
        return (0, e388.default)(r51) && !t371.has(r51);
    }
    return dt;
}
var mt = {}, ft = false;
function dew$21() {
    if (ft) return mt;
    ft = true;
    Object.defineProperty(mt, "__esModule", {
        value: true
    });
    mt.default = isVar;
    var t372 = dew1();
    var r52 = dew2();
    function isVar(e389) {
        return (0, t372.isVariableDeclaration)(e389, {
            kind: "var"
        }) && !e389[r52.BLOCK_SCOPED_SYMBOL];
    }
    return mt;
}
var Et = {}, Pt = false;
function dew$12() {
    if (Pt) return Et;
    Pt = true;
    return Et;
}
var bt = {}, At = false;
function dew9() {
    if (At) return bt;
    At = true;
    Object.defineProperty(bt, "__esModule", {
        value: true
    });
    var t373 = {
        react: true,
        assertNode: true,
        createTypeAnnotationBasedOnTypeof: true,
        createUnionTypeAnnotation: true,
        createFlowUnionType: true,
        createTSUnionType: true,
        cloneNode: true,
        clone: true,
        cloneDeep: true,
        cloneDeepWithoutLoc: true,
        cloneWithoutLoc: true,
        addComment: true,
        addComments: true,
        inheritInnerComments: true,
        inheritLeadingComments: true,
        inheritsComments: true,
        inheritTrailingComments: true,
        removeComments: true,
        ensureBlock: true,
        toBindingIdentifierName: true,
        toBlock: true,
        toComputedKey: true,
        toExpression: true,
        toIdentifier: true,
        toKeyAlias: true,
        toSequenceExpression: true,
        toStatement: true,
        valueToNode: true,
        appendToMemberExpression: true,
        inherits: true,
        prependToMemberExpression: true,
        removeProperties: true,
        removePropertiesDeep: true,
        removeTypeDuplicates: true,
        getBindingIdentifiers: true,
        getOuterBindingIdentifiers: true,
        traverse: true,
        traverseFast: true,
        shallowEqual: true,
        is: true,
        isBinding: true,
        isBlockScoped: true,
        isImmutable: true,
        isLet: true,
        isNode: true,
        isNodesEquivalent: true,
        isPlaceholderType: true,
        isReferenced: true,
        isScope: true,
        isSpecifierDefault: true,
        isType: true,
        isValidES3Identifier: true,
        isValidIdentifier: true,
        isVar: true,
        matchesPattern: true,
        validate: true,
        buildMatchMemberExpression: true
    };
    Object.defineProperty(bt, "addComment", {
        enumerable: true,
        get: function() {
            return N21.default;
        }
    });
    Object.defineProperty(bt, "addComments", {
        enumerable: true,
        get: function() {
            return C26.default;
        }
    });
    Object.defineProperty(bt, "appendToMemberExpression", {
        enumerable: true,
        get: function() {
            return Q21.default;
        }
    });
    Object.defineProperty(bt, "assertNode", {
        enumerable: true,
        get: function() {
            return f210.default;
        }
    });
    Object.defineProperty(bt, "buildMatchMemberExpression", {
        enumerable: true,
        get: function() {
            return Oe1.default;
        }
    });
    Object.defineProperty(bt, "clone", {
        enumerable: true,
        get: function() {
            return I24.default;
        }
    });
    Object.defineProperty(bt, "cloneDeep", {
        enumerable: true,
        get: function() {
            return D21.default;
        }
    });
    Object.defineProperty(bt, "cloneDeepWithoutLoc", {
        enumerable: true,
        get: function() {
            return j21.default;
        }
    });
    Object.defineProperty(bt, "cloneNode", {
        enumerable: true,
        get: function() {
            return g210.default;
        }
    });
    Object.defineProperty(bt, "cloneWithoutLoc", {
        enumerable: true,
        get: function() {
            return L21.default;
        }
    });
    Object.defineProperty(bt, "createFlowUnionType", {
        enumerable: true,
        get: function() {
            return b210.default;
        }
    });
    Object.defineProperty(bt, "createTSUnionType", {
        enumerable: true,
        get: function() {
            return A22.default;
        }
    });
    Object.defineProperty(bt, "createTypeAnnotationBasedOnTypeof", {
        enumerable: true,
        get: function() {
            return P23.default;
        }
    });
    Object.defineProperty(bt, "createUnionTypeAnnotation", {
        enumerable: true,
        get: function() {
            return b210.default;
        }
    });
    Object.defineProperty(bt, "ensureBlock", {
        enumerable: true,
        get: function() {
            return R21.default;
        }
    });
    Object.defineProperty(bt, "getBindingIdentifiers", {
        enumerable: true,
        get: function() {
            return te13.default;
        }
    });
    Object.defineProperty(bt, "getOuterBindingIdentifiers", {
        enumerable: true,
        get: function() {
            return re14.default;
        }
    });
    Object.defineProperty(bt, "inheritInnerComments", {
        enumerable: true,
        get: function() {
            return M22.default;
        }
    });
    Object.defineProperty(bt, "inheritLeadingComments", {
        enumerable: true,
        get: function() {
            return w23.default;
        }
    });
    Object.defineProperty(bt, "inheritTrailingComments", {
        enumerable: true,
        get: function() {
            return h210.default;
        }
    });
    Object.defineProperty(bt, "inherits", {
        enumerable: true,
        get: function() {
            return z21.default;
        }
    });
    Object.defineProperty(bt, "inheritsComments", {
        enumerable: true,
        get: function() {
            return _2.default;
        }
    });
    Object.defineProperty(bt, "is", {
        enumerable: true,
        get: function() {
            return ie13.default;
        }
    });
    Object.defineProperty(bt, "isBinding", {
        enumerable: true,
        get: function() {
            return oe13.default;
        }
    });
    Object.defineProperty(bt, "isBlockScoped", {
        enumerable: true,
        get: function() {
            return pe1.default;
        }
    });
    Object.defineProperty(bt, "isImmutable", {
        enumerable: true,
        get: function() {
            return ue1.default;
        }
    });
    Object.defineProperty(bt, "isLet", {
        enumerable: true,
        get: function() {
            return le1.default;
        }
    });
    Object.defineProperty(bt, "isNode", {
        enumerable: true,
        get: function() {
            return ce1.default;
        }
    });
    Object.defineProperty(bt, "isNodesEquivalent", {
        enumerable: true,
        get: function() {
            return Te1.default;
        }
    });
    Object.defineProperty(bt, "isPlaceholderType", {
        enumerable: true,
        get: function() {
            return ye1.default;
        }
    });
    Object.defineProperty(bt, "isReferenced", {
        enumerable: true,
        get: function() {
            return de1.default;
        }
    });
    Object.defineProperty(bt, "isScope", {
        enumerable: true,
        get: function() {
            return Se1.default;
        }
    });
    Object.defineProperty(bt, "isSpecifierDefault", {
        enumerable: true,
        get: function() {
            return me1.default;
        }
    });
    Object.defineProperty(bt, "isType", {
        enumerable: true,
        get: function() {
            return fe1.default;
        }
    });
    Object.defineProperty(bt, "isValidES3Identifier", {
        enumerable: true,
        get: function() {
            return Ee1.default;
        }
    });
    Object.defineProperty(bt, "isValidIdentifier", {
        enumerable: true,
        get: function() {
            return Pe1.default;
        }
    });
    Object.defineProperty(bt, "isVar", {
        enumerable: true,
        get: function() {
            return be1.default;
        }
    });
    Object.defineProperty(bt, "matchesPattern", {
        enumerable: true,
        get: function() {
            return Ae1.default;
        }
    });
    Object.defineProperty(bt, "prependToMemberExpression", {
        enumerable: true,
        get: function() {
            return G15.default;
        }
    });
    bt.react = void 0;
    Object.defineProperty(bt, "removeComments", {
        enumerable: true,
        get: function() {
            return v210.default;
        }
    });
    Object.defineProperty(bt, "removeProperties", {
        enumerable: true,
        get: function() {
            return H17.default;
        }
    });
    Object.defineProperty(bt, "removePropertiesDeep", {
        enumerable: true,
        get: function() {
            return Z14.default;
        }
    });
    Object.defineProperty(bt, "removeTypeDuplicates", {
        enumerable: true,
        get: function() {
            return ee13.default;
        }
    });
    Object.defineProperty(bt, "shallowEqual", {
        enumerable: true,
        get: function() {
            return ne14.default;
        }
    });
    Object.defineProperty(bt, "toBindingIdentifierName", {
        enumerable: true,
        get: function() {
            return Y21.default;
        }
    });
    Object.defineProperty(bt, "toBlock", {
        enumerable: true,
        get: function() {
            return K21.default;
        }
    });
    Object.defineProperty(bt, "toComputedKey", {
        enumerable: true,
        get: function() {
            return X21.default;
        }
    });
    Object.defineProperty(bt, "toExpression", {
        enumerable: true,
        get: function() {
            return U21.default;
        }
    });
    Object.defineProperty(bt, "toIdentifier", {
        enumerable: true,
        get: function() {
            return J21.default;
        }
    });
    Object.defineProperty(bt, "toKeyAlias", {
        enumerable: true,
        get: function() {
            return k21.default;
        }
    });
    Object.defineProperty(bt, "toSequenceExpression", {
        enumerable: true,
        get: function() {
            return $21.default;
        }
    });
    Object.defineProperty(bt, "toStatement", {
        enumerable: true,
        get: function() {
            return V21.default;
        }
    });
    Object.defineProperty(bt, "traverse", {
        enumerable: true,
        get: function() {
            return se13.default;
        }
    });
    Object.defineProperty(bt, "traverseFast", {
        enumerable: true,
        get: function() {
            return ae13.default;
        }
    });
    Object.defineProperty(bt, "validate", {
        enumerable: true,
        get: function() {
            return xe1.default;
        }
    });
    Object.defineProperty(bt, "valueToNode", {
        enumerable: true,
        get: function() {
            return W21.default;
        }
    });
    var l211 = dew$S();
    var S26 = dew$R();
    var m210 = dew$Q();
    var f210 = dew$O();
    var E24 = dew$N();
    Object.keys(E24).forEach(function(e390) {
        "default" !== e390 && "__esModule" !== e390 && (Object.prototype.hasOwnProperty.call(t373, e390) || e390 in bt && bt[e390] === E24[e390] || Object.defineProperty(bt, e390, {
            enumerable: true,
            get: function() {
                return E24[e390];
            }
        }));
    });
    var P23 = dew$M();
    var b210 = dew$K();
    var A22 = dew$I();
    var x25 = dew5();
    Object.keys(x25).forEach(function(e391) {
        "default" !== e391 && "__esModule" !== e391 && (Object.prototype.hasOwnProperty.call(t373, e391) || e391 in bt && bt[e391] === x25[e391] || Object.defineProperty(bt, e391, {
            enumerable: true,
            get: function() {
                return x25[e391];
            }
        }));
    });
    var O24 = dew$H();
    Object.keys(O24).forEach(function(e392) {
        "default" !== e392 && "__esModule" !== e392 && (Object.prototype.hasOwnProperty.call(t373, e392) || e392 in bt && bt[e392] === O24[e392] || Object.defineProperty(bt, e392, {
            enumerable: true,
            get: function() {
                return O24[e392];
            }
        }));
    });
    var g210 = dew$G();
    var I24 = dew$F();
    var D21 = dew$E();
    var j21 = dew$D();
    var L21 = dew$C();
    var N21 = dew$A();
    var C26 = dew$B();
    var M22 = dew$y();
    var w23 = dew$x();
    var _2 = dew$v();
    var h210 = dew$w();
    var v210 = dew$u();
    var B21 = dew$t();
    Object.keys(B21).forEach(function(e393) {
        "default" !== e393 && "__esModule" !== e393 && (Object.prototype.hasOwnProperty.call(t373, e393) || e393 in bt && bt[e393] === B21[e393] || Object.defineProperty(bt, e393, {
            enumerable: true,
            get: function() {
                return B21[e393];
            }
        }));
    });
    var F22 = dew2();
    Object.keys(F22).forEach(function(e394) {
        "default" !== e394 && "__esModule" !== e394 && (Object.prototype.hasOwnProperty.call(t373, e394) || e394 in bt && bt[e394] === F22[e394] || Object.defineProperty(bt, e394, {
            enumerable: true,
            get: function() {
                return F22[e394];
            }
        }));
    });
    var R21 = dew$r();
    var Y21 = dew$p();
    var K21 = dew$s();
    var X21 = dew$o();
    var U21 = dew$n();
    var J21 = dew$q();
    var k21 = dew$j();
    var $21 = dew$g();
    var V21 = dew$f();
    var W21 = dew$e();
    var q21 = dew3();
    Object.keys(q21).forEach(function(e395) {
        "default" !== e395 && "__esModule" !== e395 && (Object.prototype.hasOwnProperty.call(t373, e395) || e395 in bt && bt[e395] === q21[e395] || Object.defineProperty(bt, e395, {
            enumerable: true,
            get: function() {
                return q21[e395];
            }
        }));
    });
    var Q21 = dew$d1();
    var z21 = dew$c1();
    var G15 = dew$b1();
    var H17 = dew$l();
    var Z14 = dew$k();
    var ee13 = dew$L();
    var te13 = dew$i();
    var re14 = dew$a1();
    var se13 = dew$91();
    Object.keys(se13).forEach(function(e396) {
        "default" !== e396 && "__esModule" !== e396 && (Object.prototype.hasOwnProperty.call(t373, e396) || e396 in bt && bt[e396] === se13[e396] || Object.defineProperty(bt, e396, {
            enumerable: true,
            get: function() {
                return se13[e396];
            }
        }));
    });
    var ae13 = dew$m();
    var ne14 = dew();
    var ie13 = dew$b();
    var oe13 = dew$81();
    var pe1 = dew7();
    var ue1 = dew$71();
    var le1 = dew$11();
    var ce1 = dew$P();
    var Te1 = dew$61();
    var ye1 = dew$c();
    var de1 = dew8();
    var Se1 = dew$51();
    var me1 = dew$41();
    var fe1 = dew$d();
    var Ee1 = dew$31();
    var Pe1 = dew$a();
    var be1 = dew$21();
    var Ae1 = dew$U();
    var xe1 = dew$9();
    var Oe1 = dew$T();
    var ge1 = dew1();
    Object.keys(ge1).forEach(function(e397) {
        "default" !== e397 && "__esModule" !== e397 && (Object.prototype.hasOwnProperty.call(t373, e397) || e397 in bt && bt[e397] === ge1[e397] || Object.defineProperty(bt, e397, {
            enumerable: true,
            get: function() {
                return ge1[e397];
            }
        }));
    });
    var Ie1 = dew$12();
    Object.keys(Ie1).forEach(function(e398) {
        "default" !== e398 && "__esModule" !== e398 && (Object.prototype.hasOwnProperty.call(t373, e398) || e398 in bt && bt[e398] === Ie1[e398] || Object.defineProperty(bt, e398, {
            enumerable: true,
            get: function() {
                return Ie1[e398];
            }
        }));
    });
    const De1 = {
        isReactComponent: l211.default,
        isCompatTag: S26.default,
        buildChildren: m210.default
    };
    bt.react = De1;
    return bt;
}
const xt = dew9();
var Ot = xt.__esModule, gt1 = xt.addComment, It = xt.addComments, Dt = xt.appendToMemberExpression, jt = xt.assertNode, Lt = xt.buildMatchMemberExpression, Nt = xt.clone, Ct = xt.cloneDeep, Mt = xt.cloneDeepWithoutLoc, wt = xt.cloneNode, _t = xt.cloneWithoutLoc, ht = xt.createFlowUnionType, vt = xt.createTSUnionType, Bt = xt.createTypeAnnotationBasedOnTypeof, Ft = xt.createUnionTypeAnnotation, Rt = xt.ensureBlock, Yt = xt.getBindingIdentifiers, Kt = xt.getOuterBindingIdentifiers, Xt = xt.inheritInnerComments, Ut = xt.inheritLeadingComments, Jt = xt.inheritTrailingComments, kt = xt.inherits, $t = xt.inheritsComments, Vt = xt.is, Wt = xt.isBinding, qt = xt.isBlockScoped, Qt = xt.isImmutable, zt = xt.isLet, Gt = xt.isNode, Ht = xt.isNodesEquivalent, Zt = xt.isPlaceholderType, er = xt.isReferenced, tr = xt.isScope, rr = xt.isSpecifierDefault, sr = xt.isType, ar = xt.isValidES3Identifier, nr = xt.isValidIdentifier, ir = xt.isVar, or = xt.matchesPattern, pr = xt.prependToMemberExpression, ur = xt.react, lr = xt.removeComments, cr = xt.removeProperties, Tr = xt.removePropertiesDeep, yr = xt.removeTypeDuplicates, dr = xt.shallowEqual, Sr = xt.toBindingIdentifierName, mr = xt.toBlock, fr = xt.toComputedKey, Er = xt.toExpression, Pr = xt.toIdentifier, br = xt.toKeyAlias, Ar = xt.toSequenceExpression, xr = xt.toStatement, Or = xt.traverse, gr = xt.traverseFast, Ir = xt.validate, Dr = xt.valueToNode, jr = xt.assertAccessor, Lr = xt.assertAnyTypeAnnotation, Nr = xt.assertArgumentPlaceholder, Cr = xt.assertArrayExpression, Mr = xt.assertArrayPattern, wr = xt.assertArrayTypeAnnotation, _r = xt.assertArrowFunctionExpression, hr = xt.assertAssignmentExpression, vr = xt.assertAssignmentPattern, Br = xt.assertAwaitExpression, Fr = xt.assertBigIntLiteral, Rr = xt.assertBinary, Yr = xt.assertBinaryExpression, Kr = xt.assertBindExpression, Xr = xt.assertBlock, Ur = xt.assertBlockParent, Jr = xt.assertBlockStatement, kr = xt.assertBooleanLiteral, $r = xt.assertBooleanLiteralTypeAnnotation, Vr = xt.assertBooleanTypeAnnotation, Wr = xt.assertBreakStatement, qr = xt.assertCallExpression, Qr = xt.assertCatchClause, zr = xt.assertClass, Gr = xt.assertClassAccessorProperty, Hr = xt.assertClassBody, Zr = xt.assertClassDeclaration, es = xt.assertClassExpression, ts = xt.assertClassImplements, rs = xt.assertClassMethod, ss = xt.assertClassPrivateMethod, as = xt.assertClassPrivateProperty, ns = xt.assertClassProperty, is = xt.assertCompletionStatement, os = xt.assertConditional, ps = xt.assertConditionalExpression, us = xt.assertContinueStatement, ls = xt.assertDebuggerStatement, cs = xt.assertDecimalLiteral, Ts = xt.assertDeclaration, ys = xt.assertDeclareClass, ds = xt.assertDeclareExportAllDeclaration, Ss = xt.assertDeclareExportDeclaration, ms = xt.assertDeclareFunction, fs = xt.assertDeclareInterface, Es = xt.assertDeclareModule, Ps = xt.assertDeclareModuleExports, bs = xt.assertDeclareOpaqueType, As = xt.assertDeclareTypeAlias, xs = xt.assertDeclareVariable, Os = xt.assertDeclaredPredicate, gs = xt.assertDecorator, Is = xt.assertDirective, Ds = xt.assertDirectiveLiteral, js = xt.assertDoExpression, Ls = xt.assertDoWhileStatement, Ns = xt.assertEmptyStatement, Cs = xt.assertEmptyTypeAnnotation, Ms = xt.assertEnumBody, ws = xt.assertEnumBooleanBody, _s = xt.assertEnumBooleanMember, hs = xt.assertEnumDeclaration, vs = xt.assertEnumDefaultedMember, Bs = xt.assertEnumMember, Fs = xt.assertEnumNumberBody, Rs = xt.assertEnumNumberMember, Ys = xt.assertEnumStringBody, Ks = xt.assertEnumStringMember, Xs = xt.assertEnumSymbolBody, Us = xt.assertExistsTypeAnnotation, Js = xt.assertExportAllDeclaration, ks = xt.assertExportDeclaration, $s = xt.assertExportDefaultDeclaration, Vs = xt.assertExportDefaultSpecifier, Ws = xt.assertExportNamedDeclaration, qs = xt.assertExportNamespaceSpecifier, Qs = xt.assertExportSpecifier, zs = xt.assertExpression, Gs = xt.assertExpressionStatement, Hs = xt.assertExpressionWrapper, Zs = xt.assertFile, ea = xt.assertFlow, ta = xt.assertFlowBaseAnnotation, ra = xt.assertFlowDeclaration, sa = xt.assertFlowPredicate, aa = xt.assertFlowType, na = xt.assertFor, ia = xt.assertForInStatement, oa = xt.assertForOfStatement, pa = xt.assertForStatement, ua = xt.assertForXStatement, la = xt.assertFunction, ca = xt.assertFunctionDeclaration, Ta = xt.assertFunctionExpression, ya = xt.assertFunctionParent, da = xt.assertFunctionTypeAnnotation, Sa = xt.assertFunctionTypeParam, ma = xt.assertGenericTypeAnnotation, fa = xt.assertIdentifier, Ea = xt.assertIfStatement, Pa = xt.assertImmutable, ba = xt.assertImport, Aa = xt.assertImportAttribute, xa = xt.assertImportDeclaration, Oa = xt.assertImportDefaultSpecifier, ga = xt.assertImportNamespaceSpecifier, Ia = xt.assertImportSpecifier, Da = xt.assertIndexedAccessType, ja = xt.assertInferredPredicate, La = xt.assertInterfaceDeclaration, Na = xt.assertInterfaceExtends, Ca = xt.assertInterfaceTypeAnnotation, Ma = xt.assertInterpreterDirective, wa = xt.assertIntersectionTypeAnnotation, _a = xt.assertJSX, ha = xt.assertJSXAttribute, va = xt.assertJSXClosingElement, Ba = xt.assertJSXClosingFragment, Fa = xt.assertJSXElement, Ra = xt.assertJSXEmptyExpression, Ya = xt.assertJSXExpressionContainer, Ka = xt.assertJSXFragment, Xa = xt.assertJSXIdentifier, Ua = xt.assertJSXMemberExpression, Ja = xt.assertJSXNamespacedName, ka = xt.assertJSXOpeningElement, $a = xt.assertJSXOpeningFragment, Va = xt.assertJSXSpreadAttribute, Wa = xt.assertJSXSpreadChild, qa = xt.assertJSXText, Qa = xt.assertLVal, za = xt.assertLabeledStatement, Ga = xt.assertLiteral, Ha = xt.assertLogicalExpression, Za = xt.assertLoop, en = xt.assertMemberExpression, tn = xt.assertMetaProperty, rn = xt.assertMethod, sn = xt.assertMiscellaneous, an = xt.assertMixedTypeAnnotation, nn = xt.assertModuleDeclaration, on1 = xt.assertModuleExpression, pn = xt.assertModuleSpecifier, un = xt.assertNewExpression, ln = xt.assertNoop, cn = xt.assertNullLiteral, Tn = xt.assertNullLiteralTypeAnnotation, yn = xt.assertNullableTypeAnnotation, dn = xt.assertNumberLiteral, Sn = xt.assertNumberLiteralTypeAnnotation, mn = xt.assertNumberTypeAnnotation, fn = xt.assertNumericLiteral, En = xt.assertObjectExpression, Pn = xt.assertObjectMember, bn = xt.assertObjectMethod, An = xt.assertObjectPattern, xn = xt.assertObjectProperty, On = xt.assertObjectTypeAnnotation, gn = xt.assertObjectTypeCallProperty, In = xt.assertObjectTypeIndexer, Dn = xt.assertObjectTypeInternalSlot, jn = xt.assertObjectTypeProperty, Ln = xt.assertObjectTypeSpreadProperty, Nn = xt.assertOpaqueType, Cn = xt.assertOptionalCallExpression, Mn = xt.assertOptionalIndexedAccessType, wn = xt.assertOptionalMemberExpression, _n = xt.assertParenthesizedExpression, hn = xt.assertPattern, vn = xt.assertPatternLike, Bn = xt.assertPipelineBareFunction, Fn = xt.assertPipelinePrimaryTopicReference, Rn = xt.assertPipelineTopicExpression, Yn = xt.assertPlaceholder, Kn = xt.assertPrivate, Xn = xt.assertPrivateName, Un = xt.assertProgram, Jn = xt.assertProperty, kn = xt.assertPureish, $n = xt.assertQualifiedTypeIdentifier, Vn = xt.assertRecordExpression, Wn = xt.assertRegExpLiteral, qn = xt.assertRegexLiteral, Qn = xt.assertRestElement, zn = xt.assertRestProperty, Gn = xt.assertReturnStatement, Hn = xt.assertScopable, Zn = xt.assertSequenceExpression, ei = xt.assertSpreadElement, ti = xt.assertSpreadProperty, ri = xt.assertStandardized, si = xt.assertStatement, ai = xt.assertStaticBlock, ni = xt.assertStringLiteral, ii = xt.assertStringLiteralTypeAnnotation, oi = xt.assertStringTypeAnnotation, pi = xt.assertSuper, ui = xt.assertSwitchCase, li = xt.assertSwitchStatement, ci = xt.assertSymbolTypeAnnotation, Ti = xt.assertTSAnyKeyword, yi = xt.assertTSArrayType, di = xt.assertTSAsExpression, Si = xt.assertTSBaseType, mi = xt.assertTSBigIntKeyword, fi = xt.assertTSBooleanKeyword, Ei = xt.assertTSCallSignatureDeclaration, Pi = xt.assertTSConditionalType, bi = xt.assertTSConstructSignatureDeclaration, Ai = xt.assertTSConstructorType, xi = xt.assertTSDeclareFunction, Oi = xt.assertTSDeclareMethod, gi = xt.assertTSEntityName, Ii = xt.assertTSEnumDeclaration, Di = xt.assertTSEnumMember, ji = xt.assertTSExportAssignment, Li = xt.assertTSExpressionWithTypeArguments, Ni = xt.assertTSExternalModuleReference, Ci = xt.assertTSFunctionType, Mi = xt.assertTSImportEqualsDeclaration, wi = xt.assertTSImportType, _i = xt.assertTSIndexSignature, hi = xt.assertTSIndexedAccessType, vi = xt.assertTSInferType, Bi = xt.assertTSInterfaceBody, Fi = xt.assertTSInterfaceDeclaration, Ri = xt.assertTSIntersectionType, Yi = xt.assertTSIntrinsicKeyword, Ki = xt.assertTSLiteralType, Xi = xt.assertTSMappedType, Ui = xt.assertTSMethodSignature, Ji = xt.assertTSModuleBlock, ki = xt.assertTSModuleDeclaration, $i = xt.assertTSNamedTupleMember, Vi = xt.assertTSNamespaceExportDeclaration, Wi = xt.assertTSNeverKeyword, qi = xt.assertTSNonNullExpression, Qi = xt.assertTSNullKeyword, zi = xt.assertTSNumberKeyword, Gi = xt.assertTSObjectKeyword, Hi = xt.assertTSOptionalType, Zi = xt.assertTSParameterProperty, eo = xt.assertTSParenthesizedType, to = xt.assertTSPropertySignature, ro = xt.assertTSQualifiedName, so = xt.assertTSRestType, ao = xt.assertTSStringKeyword, no = xt.assertTSSymbolKeyword, io = xt.assertTSThisType, oo = xt.assertTSTupleType, po = xt.assertTSType, uo = xt.assertTSTypeAliasDeclaration, lo = xt.assertTSTypeAnnotation, co = xt.assertTSTypeAssertion, To = xt.assertTSTypeElement, yo = xt.assertTSTypeLiteral, So = xt.assertTSTypeOperator, mo = xt.assertTSTypeParameter, fo = xt.assertTSTypeParameterDeclaration, Eo = xt.assertTSTypeParameterInstantiation, Po = xt.assertTSTypePredicate, bo = xt.assertTSTypeQuery, Ao = xt.assertTSTypeReference, xo = xt.assertTSUndefinedKeyword, Oo = xt.assertTSUnionType, go = xt.assertTSUnknownKeyword, Io = xt.assertTSVoidKeyword, Do = xt.assertTaggedTemplateExpression, jo = xt.assertTemplateElement, Lo = xt.assertTemplateLiteral, No = xt.assertTerminatorless, Co = xt.assertThisExpression, Mo = xt.assertThisTypeAnnotation, wo = xt.assertThrowStatement, _o = xt.assertTopicReference, ho = xt.assertTryStatement, vo = xt.assertTupleExpression, Bo = xt.assertTupleTypeAnnotation, Fo = xt.assertTypeAlias, Ro = xt.assertTypeAnnotation, Yo = xt.assertTypeCastExpression, Ko = xt.assertTypeParameter, Xo = xt.assertTypeParameterDeclaration, Uo = xt.assertTypeParameterInstantiation, Jo = xt.assertTypeScript, ko = xt.assertTypeofTypeAnnotation, $o = xt.assertUnaryExpression, Vo = xt.assertUnaryLike, Wo = xt.assertUnionTypeAnnotation, qo = xt.assertUpdateExpression, Qo = xt.assertUserWhitespacable, zo = xt.assertV8IntrinsicIdentifier, Go = xt.assertVariableDeclaration, Ho = xt.assertVariableDeclarator, Zo = xt.assertVariance, ep = xt.assertVoidTypeAnnotation, tp = xt.assertWhile, rp = xt.assertWhileStatement, sp = xt.assertWithStatement, ap = xt.assertYieldExpression, np = xt.anyTypeAnnotation, ip = xt.argumentPlaceholder, op = xt.arrayExpression, pp = xt.arrayPattern, up = xt.arrayTypeAnnotation, lp = xt.arrowFunctionExpression, cp = xt.assignmentExpression, Tp = xt.assignmentPattern, yp = xt.awaitExpression, dp = xt.bigIntLiteral, Sp = xt.binaryExpression, mp = xt.bindExpression, fp = xt.blockStatement, Ep = xt.booleanLiteral, Pp = xt.booleanLiteralTypeAnnotation, bp = xt.booleanTypeAnnotation, Ap = xt.breakStatement, xp = xt.callExpression, Op = xt.catchClause, gp = xt.classAccessorProperty, Ip = xt.classBody, Dp = xt.classDeclaration, jp = xt.classExpression, Lp = xt.classImplements, Np = xt.classMethod, Cp = xt.classPrivateMethod, Mp = xt.classPrivateProperty, wp = xt.classProperty, _p = xt.conditionalExpression, hp = xt.continueStatement, vp = xt.debuggerStatement, Bp = xt.decimalLiteral, Fp = xt.declareClass, Rp = xt.declareExportAllDeclaration, Yp = xt.declareExportDeclaration, Kp = xt.declareFunction, Xp = xt.declareInterface, Up = xt.declareModule, Jp = xt.declareModuleExports, kp = xt.declareOpaqueType, $p = xt.declareTypeAlias, Vp = xt.declareVariable, Wp = xt.declaredPredicate, qp = xt.decorator, Qp = xt.directive, zp = xt.directiveLiteral, Gp = xt.doExpression, Hp = xt.doWhileStatement, Zp = xt.emptyStatement, eu = xt.emptyTypeAnnotation, tu = xt.enumBooleanBody, ru = xt.enumBooleanMember, su = xt.enumDeclaration, au = xt.enumDefaultedMember, nu = xt.enumNumberBody, iu = xt.enumNumberMember, ou = xt.enumStringBody, pu = xt.enumStringMember, uu = xt.enumSymbolBody, lu = xt.existsTypeAnnotation, cu = xt.exportAllDeclaration, Tu = xt.exportDefaultDeclaration, yu = xt.exportDefaultSpecifier, du = xt.exportNamedDeclaration, Su = xt.exportNamespaceSpecifier, mu = xt.exportSpecifier, fu = xt.expressionStatement, Eu = xt.file, Pu = xt.forInStatement, bu = xt.forOfStatement, Au = xt.forStatement, xu = xt.functionDeclaration, Ou = xt.functionExpression, gu = xt.functionTypeAnnotation, Iu = xt.functionTypeParam, Du = xt.genericTypeAnnotation, ju = xt.identifier, Lu = xt.ifStatement, Nu = xt.import, Cu = xt.importAttribute, Mu = xt.importDeclaration, wu = xt.importDefaultSpecifier, _u = xt.importNamespaceSpecifier, hu = xt.importSpecifier, vu = xt.indexedAccessType, Bu = xt.inferredPredicate, Fu = xt.interfaceDeclaration, Ru = xt.interfaceExtends, Yu = xt.interfaceTypeAnnotation, Ku = xt.interpreterDirective, Xu = xt.intersectionTypeAnnotation, Uu = xt.jSXAttribute, Ju = xt.jsxAttribute, ku = xt.jSXClosingElement, $u = xt.jsxClosingElement, Vu = xt.jSXClosingFragment, Wu = xt.jsxClosingFragment, qu = xt.jSXElement, Qu = xt.jsxElement, zu = xt.jSXEmptyExpression, Gu = xt.jsxEmptyExpression, Hu = xt.jSXExpressionContainer, Zu = xt.jsxExpressionContainer, el = xt.jSXFragment, tl = xt.jsxFragment, rl = xt.jSXIdentifier, sl = xt.jsxIdentifier, al = xt.jSXMemberExpression, nl = xt.jsxMemberExpression, il = xt.jSXNamespacedName, ol = xt.jsxNamespacedName, pl = xt.jSXOpeningElement, ul = xt.jsxOpeningElement, ll = xt.jSXOpeningFragment, cl = xt.jsxOpeningFragment, Tl = xt.jSXSpreadAttribute, yl = xt.jsxSpreadAttribute, dl = xt.jSXSpreadChild, Sl = xt.jsxSpreadChild, ml = xt.jSXText, fl = xt.jsxText, El = xt.labeledStatement, Pl = xt.logicalExpression, bl = xt.memberExpression, Al = xt.metaProperty, xl = xt.mixedTypeAnnotation, Ol = xt.moduleExpression, gl = xt.newExpression, Il = xt.noop, Dl = xt.nullLiteral, jl = xt.nullLiteralTypeAnnotation, Ll = xt.nullableTypeAnnotation, Nl = xt.numberLiteral, Cl = xt.numberLiteralTypeAnnotation, Ml = xt.numberTypeAnnotation, wl = xt.numericLiteral, _l = xt.objectExpression, hl = xt.objectMethod, vl = xt.objectPattern, Bl = xt.objectProperty, Fl = xt.objectTypeAnnotation, Rl = xt.objectTypeCallProperty, Yl = xt.objectTypeIndexer, Kl = xt.objectTypeInternalSlot, Xl = xt.objectTypeProperty, Ul = xt.objectTypeSpreadProperty, Jl = xt.opaqueType, kl = xt.optionalCallExpression, $l = xt.optionalIndexedAccessType, Vl = xt.optionalMemberExpression, Wl = xt.parenthesizedExpression, ql = xt.pipelineBareFunction, Ql = xt.pipelinePrimaryTopicReference, zl = xt.pipelineTopicExpression, Gl = xt.placeholder, Hl = xt.privateName, Zl = xt.program, ec = xt.qualifiedTypeIdentifier, tc = xt.recordExpression, rc = xt.regExpLiteral, sc = xt.regexLiteral, ac = xt.restElement, nc = xt.restProperty, ic = xt.returnStatement, oc = xt.sequenceExpression, pc = xt.spreadElement, uc = xt.spreadProperty, lc = xt.staticBlock, cc = xt.stringLiteral, Tc = xt.stringLiteralTypeAnnotation, yc = xt.stringTypeAnnotation, dc = xt.super, Sc = xt.switchCase, mc = xt.switchStatement, fc = xt.symbolTypeAnnotation, Ec = xt.taggedTemplateExpression, Pc = xt.templateElement, bc = xt.templateLiteral, Ac = xt.thisExpression, xc = xt.thisTypeAnnotation, Oc = xt.throwStatement, gc = xt.topicReference, Ic = xt.tryStatement, Dc = xt.tSAnyKeyword, jc = xt.tsAnyKeyword, Lc = xt.tSArrayType, Nc = xt.tsArrayType, Cc = xt.tSAsExpression, Mc = xt.tsAsExpression, wc = xt.tSBigIntKeyword, _c = xt.tsBigIntKeyword, hc = xt.tSBooleanKeyword, vc = xt.tsBooleanKeyword, Bc = xt.tSCallSignatureDeclaration, Fc = xt.tsCallSignatureDeclaration, Rc = xt.tSConditionalType, Yc = xt.tsConditionalType, Kc = xt.tSConstructSignatureDeclaration, Xc = xt.tsConstructSignatureDeclaration, Uc = xt.tSConstructorType, Jc = xt.tsConstructorType, kc = xt.tSDeclareFunction, $c = xt.tsDeclareFunction, Vc = xt.tSDeclareMethod, Wc = xt.tsDeclareMethod, qc = xt.tSEnumDeclaration, Qc = xt.tsEnumDeclaration, zc = xt.tSEnumMember, Gc = xt.tsEnumMember, Hc = xt.tSExportAssignment, Zc = xt.tsExportAssignment, eT = xt.tSExpressionWithTypeArguments, tT = xt.tsExpressionWithTypeArguments, rT = xt.tSExternalModuleReference, sT = xt.tsExternalModuleReference, aT = xt.tSFunctionType, nT = xt.tsFunctionType, iT = xt.tSImportEqualsDeclaration, oT = xt.tsImportEqualsDeclaration, pT = xt.tSImportType, uT = xt.tsImportType, lT = xt.tSIndexSignature, cT = xt.tsIndexSignature, TT = xt.tSIndexedAccessType, yT = xt.tsIndexedAccessType, dT = xt.tSInferType, ST = xt.tsInferType, mT = xt.tSInterfaceBody, fT = xt.tsInterfaceBody, ET = xt.tSInterfaceDeclaration, PT = xt.tsInterfaceDeclaration, bT = xt.tSIntersectionType, AT = xt.tsIntersectionType, xT = xt.tSIntrinsicKeyword, OT = xt.tsIntrinsicKeyword, gT = xt.tSLiteralType, IT = xt.tsLiteralType, DT = xt.tSMappedType, jT = xt.tsMappedType, LT = xt.tSMethodSignature, NT = xt.tsMethodSignature, CT = xt.tSModuleBlock, MT = xt.tsModuleBlock, wT = xt.tSModuleDeclaration, _T = xt.tsModuleDeclaration, hT = xt.tSNamedTupleMember, vT = xt.tsNamedTupleMember, BT = xt.tSNamespaceExportDeclaration, FT = xt.tsNamespaceExportDeclaration, RT = xt.tSNeverKeyword, YT = xt.tsNeverKeyword, KT = xt.tSNonNullExpression, XT = xt.tsNonNullExpression, UT = xt.tSNullKeyword, JT = xt.tsNullKeyword, kT = xt.tSNumberKeyword, $T = xt.tsNumberKeyword, VT = xt.tSObjectKeyword, WT = xt.tsObjectKeyword, qT = xt.tSOptionalType, QT = xt.tsOptionalType, zT = xt.tSParameterProperty, GT = xt.tsParameterProperty, HT = xt.tSParenthesizedType, ZT = xt.tsParenthesizedType, ey = xt.tSPropertySignature, ty = xt.tsPropertySignature, ry = xt.tSQualifiedName, sy = xt.tsQualifiedName, ay = xt.tSRestType, ny = xt.tsRestType, iy = xt.tSStringKeyword, oy = xt.tsStringKeyword, py = xt.tSSymbolKeyword, uy = xt.tsSymbolKeyword, ly = xt.tSThisType, cy = xt.tsThisType, Ty = xt.tSTupleType, yy = xt.tsTupleType, dy = xt.tSTypeAliasDeclaration, Sy = xt.tsTypeAliasDeclaration, my = xt.tSTypeAnnotation, fy = xt.tsTypeAnnotation, Ey = xt.tSTypeAssertion, Py = xt.tsTypeAssertion, by = xt.tSTypeLiteral, Ay = xt.tsTypeLiteral, xy = xt.tSTypeOperator, Oy = xt.tsTypeOperator, gy = xt.tSTypeParameter, Iy = xt.tsTypeParameter, Dy = xt.tSTypeParameterDeclaration, jy = xt.tsTypeParameterDeclaration, Ly = xt.tSTypeParameterInstantiation, Ny = xt.tsTypeParameterInstantiation, Cy = xt.tSTypePredicate, My = xt.tsTypePredicate, wy = xt.tSTypeQuery, _y = xt.tsTypeQuery, hy = xt.tSTypeReference, vy = xt.tsTypeReference, By = xt.tSUndefinedKeyword, Fy = xt.tsUndefinedKeyword, Ry = xt.tSUnionType, Yy = xt.tsUnionType, Ky = xt.tSUnknownKeyword, Xy = xt.tsUnknownKeyword, Uy = xt.tSVoidKeyword, Jy = xt.tsVoidKeyword, ky = xt.tupleExpression, $y = xt.tupleTypeAnnotation, Vy = xt.typeAlias, Wy = xt.typeAnnotation, qy = xt.typeCastExpression, Qy = xt.typeParameter, zy = xt.typeParameterDeclaration, Gy = xt.typeParameterInstantiation, Hy = xt.typeofTypeAnnotation, Zy = xt.unaryExpression, ed = xt.unionTypeAnnotation, td = xt.updateExpression, rd = xt.v8IntrinsicIdentifier, sd = xt.variableDeclaration, ad = xt.variableDeclarator, nd = xt.variance, id = xt.voidTypeAnnotation, od = xt.whileStatement, pd = xt.withStatement, ud = xt.yieldExpression, ld = xt.AnyTypeAnnotation, cd = xt.ArgumentPlaceholder, Td = xt.ArrayExpression, yd = xt.ArrayPattern, dd = xt.ArrayTypeAnnotation, Sd = xt.ArrowFunctionExpression, md = xt.AssignmentExpression, fd = xt.AssignmentPattern, Ed = xt.AwaitExpression, Pd = xt.BigIntLiteral, bd = xt.BinaryExpression, Ad = xt.BindExpression, xd = xt.BlockStatement, Od = xt.BooleanLiteral, gd = xt.BooleanLiteralTypeAnnotation, Id = xt.BooleanTypeAnnotation, Dd = xt.BreakStatement, jd = xt.CallExpression, Ld = xt.CatchClause, Nd = xt.ClassAccessorProperty, Cd = xt.ClassBody, Md = xt.ClassDeclaration, wd = xt.ClassExpression, _d = xt.ClassImplements, hd = xt.ClassMethod, vd = xt.ClassPrivateMethod, Bd = xt.ClassPrivateProperty, Fd = xt.ClassProperty, Rd = xt.ConditionalExpression, Yd = xt.ContinueStatement, Kd = xt.DebuggerStatement, Xd = xt.DecimalLiteral, Ud = xt.DeclareClass, Jd = xt.DeclareExportAllDeclaration, kd = xt.DeclareExportDeclaration, $d = xt.DeclareFunction, Vd = xt.DeclareInterface, Wd = xt.DeclareModule, qd = xt.DeclareModuleExports, Qd = xt.DeclareOpaqueType, zd = xt.DeclareTypeAlias, Gd = xt.DeclareVariable, Hd = xt.DeclaredPredicate, Zd = xt.Decorator, eS = xt.Directive, tS = xt.DirectiveLiteral, rS = xt.DoExpression, sS = xt.DoWhileStatement, aS = xt.EmptyStatement, nS = xt.EmptyTypeAnnotation, iS = xt.EnumBooleanBody, oS = xt.EnumBooleanMember, pS = xt.EnumDeclaration, uS = xt.EnumDefaultedMember, lS = xt.EnumNumberBody, cS = xt.EnumNumberMember, TS = xt.EnumStringBody, yS = xt.EnumStringMember, dS = xt.EnumSymbolBody, SS = xt.ExistsTypeAnnotation, mS = xt.ExportAllDeclaration, fS = xt.ExportDefaultDeclaration, ES = xt.ExportDefaultSpecifier, PS = xt.ExportNamedDeclaration, bS = xt.ExportNamespaceSpecifier, AS = xt.ExportSpecifier, xS = xt.ExpressionStatement, OS = xt.File, gS = xt.ForInStatement, IS = xt.ForOfStatement, DS = xt.ForStatement, jS = xt.FunctionDeclaration, LS = xt.FunctionExpression, NS = xt.FunctionTypeAnnotation, CS = xt.FunctionTypeParam, MS = xt.GenericTypeAnnotation, wS = xt.Identifier, _S = xt.IfStatement, hS = xt.Import, vS = xt.ImportAttribute, BS = xt.ImportDeclaration, FS = xt.ImportDefaultSpecifier, RS = xt.ImportNamespaceSpecifier, YS = xt.ImportSpecifier, KS = xt.IndexedAccessType, XS = xt.InferredPredicate, US = xt.InterfaceDeclaration, JS = xt.InterfaceExtends, kS = xt.InterfaceTypeAnnotation, $S = xt.InterpreterDirective, VS = xt.IntersectionTypeAnnotation, WS = xt.JSXAttribute, qS = xt.JSXClosingElement, QS = xt.JSXClosingFragment, zS = xt.JSXElement, GS = xt.JSXEmptyExpression, HS = xt.JSXExpressionContainer, ZS = xt.JSXFragment, em = xt.JSXIdentifier, tm = xt.JSXMemberExpression, rm = xt.JSXNamespacedName, sm = xt.JSXOpeningElement, am = xt.JSXOpeningFragment, nm = xt.JSXSpreadAttribute, im = xt.JSXSpreadChild, om = xt.JSXText, pm = xt.LabeledStatement, um = xt.LogicalExpression, lm = xt.MemberExpression, cm = xt.MetaProperty, Tm = xt.MixedTypeAnnotation, ym = xt.ModuleExpression, dm = xt.NewExpression, Sm = xt.Noop, mm = xt.NullLiteral, fm = xt.NullLiteralTypeAnnotation, Em = xt.NullableTypeAnnotation, Pm = xt.NumberLiteral, bm = xt.NumberLiteralTypeAnnotation, Am = xt.NumberTypeAnnotation, xm = xt.NumericLiteral, Om = xt.ObjectExpression, gm = xt.ObjectMethod, Im = xt.ObjectPattern, Dm = xt.ObjectProperty, jm = xt.ObjectTypeAnnotation, Lm = xt.ObjectTypeCallProperty, Nm = xt.ObjectTypeIndexer, Cm = xt.ObjectTypeInternalSlot, Mm = xt.ObjectTypeProperty, wm = xt.ObjectTypeSpreadProperty, _m = xt.OpaqueType, hm = xt.OptionalCallExpression, vm = xt.OptionalIndexedAccessType, Bm = xt.OptionalMemberExpression, Fm = xt.ParenthesizedExpression, Rm = xt.PipelineBareFunction, Ym = xt.PipelinePrimaryTopicReference, Km = xt.PipelineTopicExpression, Xm = xt.Placeholder, Um = xt.PrivateName, Jm = xt.Program, km = xt.QualifiedTypeIdentifier, $m = xt.RecordExpression, Vm = xt.RegExpLiteral, Wm = xt.RegexLiteral, qm = xt.RestElement, Qm = xt.RestProperty, zm = xt.ReturnStatement, Gm = xt.SequenceExpression, Hm = xt.SpreadElement, Zm = xt.SpreadProperty, ef = xt.StaticBlock, tf = xt.StringLiteral, rf = xt.StringLiteralTypeAnnotation, sf = xt.StringTypeAnnotation, af = xt.Super, nf = xt.SwitchCase, of = xt.SwitchStatement, pf = xt.SymbolTypeAnnotation, uf = xt.TSAnyKeyword, lf = xt.TSArrayType, cf = xt.TSAsExpression, Tf = xt.TSBigIntKeyword, yf = xt.TSBooleanKeyword, df = xt.TSCallSignatureDeclaration, Sf = xt.TSConditionalType, mf = xt.TSConstructSignatureDeclaration, ff = xt.TSConstructorType, Ef = xt.TSDeclareFunction, Pf = xt.TSDeclareMethod, bf = xt.TSEnumDeclaration, Af = xt.TSEnumMember, xf = xt.TSExportAssignment, Of = xt.TSExpressionWithTypeArguments, gf = xt.TSExternalModuleReference, If = xt.TSFunctionType, Df = xt.TSImportEqualsDeclaration, jf = xt.TSImportType, Lf = xt.TSIndexSignature, Nf = xt.TSIndexedAccessType, Cf = xt.TSInferType, Mf = xt.TSInterfaceBody, wf = xt.TSInterfaceDeclaration, _f = xt.TSIntersectionType, hf = xt.TSIntrinsicKeyword, vf = xt.TSLiteralType, Bf = xt.TSMappedType, Ff = xt.TSMethodSignature, Rf = xt.TSModuleBlock, Yf = xt.TSModuleDeclaration, Kf = xt.TSNamedTupleMember, Xf = xt.TSNamespaceExportDeclaration, Uf = xt.TSNeverKeyword, Jf = xt.TSNonNullExpression, kf = xt.TSNullKeyword, $f = xt.TSNumberKeyword, Vf = xt.TSObjectKeyword, Wf = xt.TSOptionalType, qf = xt.TSParameterProperty, Qf = xt.TSParenthesizedType, zf = xt.TSPropertySignature, Gf = xt.TSQualifiedName, Hf = xt.TSRestType, Zf = xt.TSStringKeyword, eE = xt.TSSymbolKeyword, tE = xt.TSThisType, rE = xt.TSTupleType, sE = xt.TSTypeAliasDeclaration, aE = xt.TSTypeAnnotation, nE = xt.TSTypeAssertion, iE = xt.TSTypeLiteral, oE = xt.TSTypeOperator, pE = xt.TSTypeParameter, uE = xt.TSTypeParameterDeclaration, lE = xt.TSTypeParameterInstantiation, cE = xt.TSTypePredicate, TE = xt.TSTypeQuery, yE = xt.TSTypeReference, dE = xt.TSUndefinedKeyword, SE = xt.TSUnionType, mE = xt.TSUnknownKeyword, fE = xt.TSVoidKeyword, EE = xt.TaggedTemplateExpression, PE = xt.TemplateElement, bE = xt.TemplateLiteral, AE = xt.ThisExpression, xE = xt.ThisTypeAnnotation, OE = xt.ThrowStatement, gE = xt.TopicReference, IE = xt.TryStatement, DE = xt.TupleExpression, jE = xt.TupleTypeAnnotation, LE = xt.TypeAlias, NE = xt.TypeAnnotation, CE = xt.TypeCastExpression, ME = xt.TypeParameter, wE = xt.TypeParameterDeclaration, _E = xt.TypeParameterInstantiation, hE = xt.TypeofTypeAnnotation, vE = xt.UnaryExpression, BE = xt.UnionTypeAnnotation, FE = xt.UpdateExpression, RE = xt.V8IntrinsicIdentifier, YE = xt.VariableDeclaration, KE = xt.VariableDeclarator, XE = xt.Variance, UE = xt.VoidTypeAnnotation, JE = xt.WhileStatement, kE = xt.WithStatement, $E = xt.YieldExpression, VE = xt.WHILE_TYPES, WE = xt.USERWHITESPACABLE_TYPES, qE = xt.UNARYLIKE_TYPES, QE = xt.TYPESCRIPT_TYPES, zE = xt.TSTYPE_TYPES, GE = xt.TSTYPEELEMENT_TYPES, HE = xt.TSENTITYNAME_TYPES, ZE = xt.TSBASETYPE_TYPES, eP = xt.TERMINATORLESS_TYPES, tP = xt.STATEMENT_TYPES, rP = xt.STANDARDIZED_TYPES, sP = xt.SCOPABLE_TYPES, aP = xt.PUREISH_TYPES, nP = xt.PROPERTY_TYPES, iP = xt.PRIVATE_TYPES, oP = xt.PATTERN_TYPES, pP = xt.PATTERNLIKE_TYPES, uP = xt.OBJECTMEMBER_TYPES, lP = xt.MODULESPECIFIER_TYPES, cP = xt.MODULEDECLARATION_TYPES, TP = xt.MISCELLANEOUS_TYPES, yP = xt.METHOD_TYPES, dP = xt.LVAL_TYPES, SP = xt.LOOP_TYPES, mP = xt.LITERAL_TYPES, fP = xt.JSX_TYPES, EP = xt.IMMUTABLE_TYPES, PP = xt.FUNCTION_TYPES, bP = xt.FUNCTIONPARENT_TYPES, AP = xt.FOR_TYPES, xP = xt.FORXSTATEMENT_TYPES, OP = xt.FLOW_TYPES, gP = xt.FLOWTYPE_TYPES, IP = xt.FLOWPREDICATE_TYPES, DP = xt.FLOWDECLARATION_TYPES, jP = xt.FLOWBASEANNOTATION_TYPES, LP = xt.EXPRESSION_TYPES, NP = xt.EXPRESSIONWRAPPER_TYPES, CP = xt.EXPORTDECLARATION_TYPES, MP = xt.ENUMMEMBER_TYPES, wP = xt.ENUMBODY_TYPES, _P = xt.DECLARATION_TYPES, hP = xt.CONDITIONAL_TYPES, vP = xt.COMPLETIONSTATEMENT_TYPES, BP = xt.CLASS_TYPES, FP = xt.BLOCK_TYPES, RP = xt.BLOCKPARENT_TYPES, YP = xt.BINARY_TYPES, KP = xt.ACCESSOR_TYPES, XP = xt.UPDATE_OPERATORS, UP = xt.UNARY_OPERATORS, JP = xt.STRING_UNARY_OPERATORS, kP = xt.STATEMENT_OR_BLOCK_KEYS, $P = xt.NUMBER_UNARY_OPERATORS, VP = xt.NUMBER_BINARY_OPERATORS, WP = xt.NOT_LOCAL_BINDING, qP = xt.LOGICAL_OPERATORS, QP = xt.INHERIT_KEYS, zP = xt.FOR_INIT_KEYS, GP = xt.FLATTENABLE_KEYS, HP = xt.EQUALITY_BINARY_OPERATORS, ZP = xt.COMPARISON_BINARY_OPERATORS, eb = xt.COMMENT_KEYS, tb = xt.BOOLEAN_UNARY_OPERATORS, rb = xt.BOOLEAN_NUMBER_BINARY_OPERATORS, sb = xt.BOOLEAN_BINARY_OPERATORS, ab = xt.BLOCK_SCOPED_SYMBOL, nb = xt.BINARY_OPERATORS, ib = xt.ASSIGNMENT_OPERATORS, ob = xt.ALIAS_KEYS, pb = xt.BUILDER_KEYS, ub = xt.DEPRECATED_KEYS, lb = xt.FLIPPED_ALIAS_KEYS, cb = xt.NODE_FIELDS, Tb = xt.NODE_PARENT_VALIDATIONS, yb = xt.PLACEHOLDERS, db = xt.PLACEHOLDERS_ALIAS, Sb = xt.PLACEHOLDERS_FLIPPED_ALIAS, mb = xt.TYPES, fb = xt.VISITOR_KEYS, Eb = xt.isAccessor, Pb = xt.isAnyTypeAnnotation, bb = xt.isArgumentPlaceholder, Ab = xt.isArrayExpression, xb = xt.isArrayPattern, Ob = xt.isArrayTypeAnnotation, gb = xt.isArrowFunctionExpression, Ib = xt.isAssignmentExpression, Db = xt.isAssignmentPattern, jb = xt.isAwaitExpression, Lb = xt.isBigIntLiteral, Nb = xt.isBinary, Cb = xt.isBinaryExpression, Mb = xt.isBindExpression, wb = xt.isBlock, _b = xt.isBlockParent, hb = xt.isBlockStatement, vb = xt.isBooleanLiteral, Bb = xt.isBooleanLiteralTypeAnnotation, Fb = xt.isBooleanTypeAnnotation, Rb = xt.isBreakStatement, Yb = xt.isCallExpression, Kb = xt.isCatchClause, Xb = xt.isClass, Ub = xt.isClassAccessorProperty, Jb = xt.isClassBody, kb = xt.isClassDeclaration, $b = xt.isClassExpression, Vb = xt.isClassImplements, Wb = xt.isClassMethod, qb = xt.isClassPrivateMethod, Qb = xt.isClassPrivateProperty, zb = xt.isClassProperty, Gb = xt.isCompletionStatement, Hb = xt.isConditional, Zb = xt.isConditionalExpression, eA = xt.isContinueStatement, tA = xt.isDebuggerStatement, rA = xt.isDecimalLiteral, sA = xt.isDeclaration, aA = xt.isDeclareClass, nA = xt.isDeclareExportAllDeclaration, iA = xt.isDeclareExportDeclaration, oA = xt.isDeclareFunction, pA = xt.isDeclareInterface, uA = xt.isDeclareModule, lA = xt.isDeclareModuleExports, cA = xt.isDeclareOpaqueType, TA = xt.isDeclareTypeAlias, yA = xt.isDeclareVariable, dA = xt.isDeclaredPredicate, SA = xt.isDecorator, mA = xt.isDirective, fA = xt.isDirectiveLiteral, EA = xt.isDoExpression, PA = xt.isDoWhileStatement, bA = xt.isEmptyStatement, AA = xt.isEmptyTypeAnnotation, xA = xt.isEnumBody, OA = xt.isEnumBooleanBody, gA = xt.isEnumBooleanMember, IA = xt.isEnumDeclaration, DA = xt.isEnumDefaultedMember, jA = xt.isEnumMember, LA = xt.isEnumNumberBody, NA = xt.isEnumNumberMember, CA = xt.isEnumStringBody, MA = xt.isEnumStringMember, wA = xt.isEnumSymbolBody, _A = xt.isExistsTypeAnnotation, hA = xt.isExportAllDeclaration, vA = xt.isExportDeclaration, BA = xt.isExportDefaultDeclaration, FA = xt.isExportDefaultSpecifier, RA = xt.isExportNamedDeclaration, YA = xt.isExportNamespaceSpecifier, KA = xt.isExportSpecifier, XA = xt.isExpression, UA = xt.isExpressionStatement, JA = xt.isExpressionWrapper, kA = xt.isFile, $A = xt.isFlow, VA = xt.isFlowBaseAnnotation, WA = xt.isFlowDeclaration, qA = xt.isFlowPredicate, QA = xt.isFlowType, zA = xt.isFor, GA = xt.isForInStatement, HA = xt.isForOfStatement, ZA = xt.isForStatement, ex = xt.isForXStatement, tx = xt.isFunction, rx = xt.isFunctionDeclaration, sx = xt.isFunctionExpression, ax = xt.isFunctionParent, nx = xt.isFunctionTypeAnnotation, ix = xt.isFunctionTypeParam, ox = xt.isGenericTypeAnnotation, px = xt.isIdentifier, ux = xt.isIfStatement, lx = xt.isImport, cx = xt.isImportAttribute, Tx = xt.isImportDeclaration, yx = xt.isImportDefaultSpecifier, dx = xt.isImportNamespaceSpecifier, Sx = xt.isImportSpecifier, mx = xt.isIndexedAccessType, fx = xt.isInferredPredicate, Ex = xt.isInterfaceDeclaration, Px = xt.isInterfaceExtends, bx = xt.isInterfaceTypeAnnotation, Ax = xt.isInterpreterDirective, xx = xt.isIntersectionTypeAnnotation, Ox = xt.isJSX, gx = xt.isJSXAttribute, Ix = xt.isJSXClosingElement, Dx = xt.isJSXClosingFragment, jx = xt.isJSXElement, Lx = xt.isJSXEmptyExpression, Nx = xt.isJSXExpressionContainer, Cx = xt.isJSXFragment, Mx = xt.isJSXIdentifier, wx = xt.isJSXMemberExpression, _x = xt.isJSXNamespacedName, hx = xt.isJSXOpeningElement, vx = xt.isJSXOpeningFragment, Bx = xt.isJSXSpreadAttribute, Fx = xt.isJSXSpreadChild, Rx = xt.isJSXText, Yx = xt.isLVal, Kx = xt.isLabeledStatement, Xx = xt.isLiteral, Ux = xt.isLogicalExpression, Jx = xt.isLoop, kx = xt.isMemberExpression, $x = xt.isMetaProperty, Vx = xt.isMethod, Wx = xt.isMiscellaneous, qx = xt.isMixedTypeAnnotation, Qx = xt.isModuleDeclaration, zx = xt.isModuleExpression, Gx = xt.isModuleSpecifier, Hx = xt.isNewExpression, Zx = xt.isNoop, eO = xt.isNullLiteral, tO = xt.isNullLiteralTypeAnnotation, rO = xt.isNullableTypeAnnotation, sO = xt.isNumberLiteral, aO = xt.isNumberLiteralTypeAnnotation, nO = xt.isNumberTypeAnnotation, iO = xt.isNumericLiteral, oO = xt.isObjectExpression, pO = xt.isObjectMember, uO = xt.isObjectMethod, lO = xt.isObjectPattern, cO = xt.isObjectProperty, TO = xt.isObjectTypeAnnotation, yO = xt.isObjectTypeCallProperty, dO = xt.isObjectTypeIndexer, SO = xt.isObjectTypeInternalSlot, mO = xt.isObjectTypeProperty, fO = xt.isObjectTypeSpreadProperty, EO = xt.isOpaqueType, PO = xt.isOptionalCallExpression, bO = xt.isOptionalIndexedAccessType, AO = xt.isOptionalMemberExpression, xO = xt.isParenthesizedExpression, OO = xt.isPattern, gO = xt.isPatternLike, IO = xt.isPipelineBareFunction, DO = xt.isPipelinePrimaryTopicReference, jO = xt.isPipelineTopicExpression, LO = xt.isPlaceholder, NO = xt.isPrivate, CO = xt.isPrivateName, MO = xt.isProgram, wO = xt.isProperty, _O = xt.isPureish, hO = xt.isQualifiedTypeIdentifier, vO = xt.isRecordExpression, BO = xt.isRegExpLiteral, FO = xt.isRegexLiteral, RO = xt.isRestElement, YO = xt.isRestProperty, KO = xt.isReturnStatement, XO = xt.isScopable, UO = xt.isSequenceExpression, JO = xt.isSpreadElement, kO = xt.isSpreadProperty, $O = xt.isStandardized, VO = xt.isStatement, WO = xt.isStaticBlock, qO = xt.isStringLiteral, QO = xt.isStringLiteralTypeAnnotation, zO = xt.isStringTypeAnnotation, GO = xt.isSuper, HO = xt.isSwitchCase, ZO = xt.isSwitchStatement, eg = xt.isSymbolTypeAnnotation, tg = xt.isTSAnyKeyword, rg = xt.isTSArrayType, sg = xt.isTSAsExpression, ag = xt.isTSBaseType, ng = xt.isTSBigIntKeyword, ig = xt.isTSBooleanKeyword, og = xt.isTSCallSignatureDeclaration, pg = xt.isTSConditionalType, ug = xt.isTSConstructSignatureDeclaration, lg = xt.isTSConstructorType, cg = xt.isTSDeclareFunction, Tg = xt.isTSDeclareMethod, yg = xt.isTSEntityName, dg = xt.isTSEnumDeclaration, Sg = xt.isTSEnumMember, mg = xt.isTSExportAssignment, fg = xt.isTSExpressionWithTypeArguments, Eg = xt.isTSExternalModuleReference, Pg = xt.isTSFunctionType, bg = xt.isTSImportEqualsDeclaration, Ag = xt.isTSImportType, xg = xt.isTSIndexSignature, Og = xt.isTSIndexedAccessType, gg = xt.isTSInferType, Ig = xt.isTSInterfaceBody, Dg = xt.isTSInterfaceDeclaration, jg = xt.isTSIntersectionType, Lg = xt.isTSIntrinsicKeyword, Ng = xt.isTSLiteralType, Cg = xt.isTSMappedType, Mg = xt.isTSMethodSignature, wg = xt.isTSModuleBlock, _g = xt.isTSModuleDeclaration, hg = xt.isTSNamedTupleMember, vg = xt.isTSNamespaceExportDeclaration, Bg = xt.isTSNeverKeyword, Fg = xt.isTSNonNullExpression, Rg = xt.isTSNullKeyword, Yg = xt.isTSNumberKeyword, Kg = xt.isTSObjectKeyword, Xg = xt.isTSOptionalType, Ug = xt.isTSParameterProperty, Jg = xt.isTSParenthesizedType, kg = xt.isTSPropertySignature, $g = xt.isTSQualifiedName, Vg = xt.isTSRestType, Wg = xt.isTSStringKeyword, qg = xt.isTSSymbolKeyword, Qg = xt.isTSThisType, zg = xt.isTSTupleType, Gg = xt.isTSType, Hg = xt.isTSTypeAliasDeclaration, Zg = xt.isTSTypeAnnotation, eI = xt.isTSTypeAssertion, tI = xt.isTSTypeElement, rI = xt.isTSTypeLiteral, sI = xt.isTSTypeOperator, aI = xt.isTSTypeParameter, nI = xt.isTSTypeParameterDeclaration, iI = xt.isTSTypeParameterInstantiation, oI = xt.isTSTypePredicate, pI = xt.isTSTypeQuery, uI = xt.isTSTypeReference, lI = xt.isTSUndefinedKeyword, cI = xt.isTSUnionType, TI = xt.isTSUnknownKeyword, yI = xt.isTSVoidKeyword, dI = xt.isTaggedTemplateExpression, SI = xt.isTemplateElement, mI = xt.isTemplateLiteral, fI = xt.isTerminatorless, EI = xt.isThisExpression, PI = xt.isThisTypeAnnotation, bI = xt.isThrowStatement, AI = xt.isTopicReference, xI = xt.isTryStatement, OI = xt.isTupleExpression, gI = xt.isTupleTypeAnnotation, II = xt.isTypeAlias, DI = xt.isTypeAnnotation, jI = xt.isTypeCastExpression, LI = xt.isTypeParameter, NI = xt.isTypeParameterDeclaration, CI = xt.isTypeParameterInstantiation, MI = xt.isTypeScript, wI = xt.isTypeofTypeAnnotation, _I = xt.isUnaryExpression, hI = xt.isUnaryLike, vI = xt.isUnionTypeAnnotation, BI = xt.isUpdateExpression, FI = xt.isUserWhitespacable, RI = xt.isV8IntrinsicIdentifier, YI = xt.isVariableDeclaration, KI = xt.isVariableDeclarator, XI = xt.isVariance, UI = xt.isVoidTypeAnnotation, JI = xt.isWhile, kI = xt.isWhileStatement, $I = xt.isWithStatement, VI = xt.isYieldExpression;
const mod3 = {
    ACCESSOR_TYPES: KP,
    ALIAS_KEYS: ob,
    ASSIGNMENT_OPERATORS: ib,
    AnyTypeAnnotation: ld,
    ArgumentPlaceholder: cd,
    ArrayExpression: Td,
    ArrayPattern: yd,
    ArrayTypeAnnotation: dd,
    ArrowFunctionExpression: Sd,
    AssignmentExpression: md,
    AssignmentPattern: fd,
    AwaitExpression: Ed,
    BINARY_OPERATORS: nb,
    BINARY_TYPES: YP,
    BLOCKPARENT_TYPES: RP,
    BLOCK_SCOPED_SYMBOL: ab,
    BLOCK_TYPES: FP,
    BOOLEAN_BINARY_OPERATORS: sb,
    BOOLEAN_NUMBER_BINARY_OPERATORS: rb,
    BOOLEAN_UNARY_OPERATORS: tb,
    BUILDER_KEYS: pb,
    BigIntLiteral: Pd,
    BinaryExpression: bd,
    BindExpression: Ad,
    BlockStatement: xd,
    BooleanLiteral: Od,
    BooleanLiteralTypeAnnotation: gd,
    BooleanTypeAnnotation: Id,
    BreakStatement: Dd,
    CLASS_TYPES: BP,
    COMMENT_KEYS: eb,
    COMPARISON_BINARY_OPERATORS: ZP,
    COMPLETIONSTATEMENT_TYPES: vP,
    CONDITIONAL_TYPES: hP,
    CallExpression: jd,
    CatchClause: Ld,
    ClassAccessorProperty: Nd,
    ClassBody: Cd,
    ClassDeclaration: Md,
    ClassExpression: wd,
    ClassImplements: _d,
    ClassMethod: hd,
    ClassPrivateMethod: vd,
    ClassPrivateProperty: Bd,
    ClassProperty: Fd,
    ConditionalExpression: Rd,
    ContinueStatement: Yd,
    DECLARATION_TYPES: _P,
    DEPRECATED_KEYS: ub,
    DebuggerStatement: Kd,
    DecimalLiteral: Xd,
    DeclareClass: Ud,
    DeclareExportAllDeclaration: Jd,
    DeclareExportDeclaration: kd,
    DeclareFunction: $d,
    DeclareInterface: Vd,
    DeclareModule: Wd,
    DeclareModuleExports: qd,
    DeclareOpaqueType: Qd,
    DeclareTypeAlias: zd,
    DeclareVariable: Gd,
    DeclaredPredicate: Hd,
    Decorator: Zd,
    Directive: eS,
    DirectiveLiteral: tS,
    DoExpression: rS,
    DoWhileStatement: sS,
    ENUMBODY_TYPES: wP,
    ENUMMEMBER_TYPES: MP,
    EQUALITY_BINARY_OPERATORS: HP,
    EXPORTDECLARATION_TYPES: CP,
    EXPRESSIONWRAPPER_TYPES: NP,
    EXPRESSION_TYPES: LP,
    EmptyStatement: aS,
    EmptyTypeAnnotation: nS,
    EnumBooleanBody: iS,
    EnumBooleanMember: oS,
    EnumDeclaration: pS,
    EnumDefaultedMember: uS,
    EnumNumberBody: lS,
    EnumNumberMember: cS,
    EnumStringBody: TS,
    EnumStringMember: yS,
    EnumSymbolBody: dS,
    ExistsTypeAnnotation: SS,
    ExportAllDeclaration: mS,
    ExportDefaultDeclaration: fS,
    ExportDefaultSpecifier: ES,
    ExportNamedDeclaration: PS,
    ExportNamespaceSpecifier: bS,
    ExportSpecifier: AS,
    ExpressionStatement: xS,
    FLATTENABLE_KEYS: GP,
    FLIPPED_ALIAS_KEYS: lb,
    FLOWBASEANNOTATION_TYPES: jP,
    FLOWDECLARATION_TYPES: DP,
    FLOWPREDICATE_TYPES: IP,
    FLOWTYPE_TYPES: gP,
    FLOW_TYPES: OP,
    FORXSTATEMENT_TYPES: xP,
    FOR_INIT_KEYS: zP,
    FOR_TYPES: AP,
    FUNCTIONPARENT_TYPES: bP,
    FUNCTION_TYPES: PP,
    File: OS,
    ForInStatement: gS,
    ForOfStatement: IS,
    ForStatement: DS,
    FunctionDeclaration: jS,
    FunctionExpression: LS,
    FunctionTypeAnnotation: NS,
    FunctionTypeParam: CS,
    GenericTypeAnnotation: MS,
    IMMUTABLE_TYPES: EP,
    INHERIT_KEYS: QP,
    Identifier: wS,
    IfStatement: _S,
    Import: hS,
    ImportAttribute: vS,
    ImportDeclaration: BS,
    ImportDefaultSpecifier: FS,
    ImportNamespaceSpecifier: RS,
    ImportSpecifier: YS,
    IndexedAccessType: KS,
    InferredPredicate: XS,
    InterfaceDeclaration: US,
    InterfaceExtends: JS,
    InterfaceTypeAnnotation: kS,
    InterpreterDirective: $S,
    IntersectionTypeAnnotation: VS,
    JSXAttribute: WS,
    JSXClosingElement: qS,
    JSXClosingFragment: QS,
    JSXElement: zS,
    JSXEmptyExpression: GS,
    JSXExpressionContainer: HS,
    JSXFragment: ZS,
    JSXIdentifier: em,
    JSXMemberExpression: tm,
    JSXNamespacedName: rm,
    JSXOpeningElement: sm,
    JSXOpeningFragment: am,
    JSXSpreadAttribute: nm,
    JSXSpreadChild: im,
    JSXText: om,
    JSX_TYPES: fP,
    LITERAL_TYPES: mP,
    LOGICAL_OPERATORS: qP,
    LOOP_TYPES: SP,
    LVAL_TYPES: dP,
    LabeledStatement: pm,
    LogicalExpression: um,
    METHOD_TYPES: yP,
    MISCELLANEOUS_TYPES: TP,
    MODULEDECLARATION_TYPES: cP,
    MODULESPECIFIER_TYPES: lP,
    MemberExpression: lm,
    MetaProperty: cm,
    MixedTypeAnnotation: Tm,
    ModuleExpression: ym,
    NODE_FIELDS: cb,
    NODE_PARENT_VALIDATIONS: Tb,
    NOT_LOCAL_BINDING: WP,
    NUMBER_BINARY_OPERATORS: VP,
    NUMBER_UNARY_OPERATORS: $P,
    NewExpression: dm,
    Noop: Sm,
    NullLiteral: mm,
    NullLiteralTypeAnnotation: fm,
    NullableTypeAnnotation: Em,
    NumberLiteral: Pm,
    NumberLiteralTypeAnnotation: bm,
    NumberTypeAnnotation: Am,
    NumericLiteral: xm,
    OBJECTMEMBER_TYPES: uP,
    ObjectExpression: Om,
    ObjectMethod: gm,
    ObjectPattern: Im,
    ObjectProperty: Dm,
    ObjectTypeAnnotation: jm,
    ObjectTypeCallProperty: Lm,
    ObjectTypeIndexer: Nm,
    ObjectTypeInternalSlot: Cm,
    ObjectTypeProperty: Mm,
    ObjectTypeSpreadProperty: wm,
    OpaqueType: _m,
    OptionalCallExpression: hm,
    OptionalIndexedAccessType: vm,
    OptionalMemberExpression: Bm,
    PATTERNLIKE_TYPES: pP,
    PATTERN_TYPES: oP,
    PLACEHOLDERS: yb,
    PLACEHOLDERS_ALIAS: db,
    PLACEHOLDERS_FLIPPED_ALIAS: Sb,
    PRIVATE_TYPES: iP,
    PROPERTY_TYPES: nP,
    PUREISH_TYPES: aP,
    ParenthesizedExpression: Fm,
    PipelineBareFunction: Rm,
    PipelinePrimaryTopicReference: Ym,
    PipelineTopicExpression: Km,
    Placeholder: Xm,
    PrivateName: Um,
    Program: Jm,
    QualifiedTypeIdentifier: km,
    RecordExpression: $m,
    RegExpLiteral: Vm,
    RegexLiteral: Wm,
    RestElement: qm,
    RestProperty: Qm,
    ReturnStatement: zm,
    SCOPABLE_TYPES: sP,
    STANDARDIZED_TYPES: rP,
    STATEMENT_OR_BLOCK_KEYS: kP,
    STATEMENT_TYPES: tP,
    STRING_UNARY_OPERATORS: JP,
    SequenceExpression: Gm,
    SpreadElement: Hm,
    SpreadProperty: Zm,
    StaticBlock: ef,
    StringLiteral: tf,
    StringLiteralTypeAnnotation: rf,
    StringTypeAnnotation: sf,
    Super: af,
    SwitchCase: nf,
    SwitchStatement: of,
    SymbolTypeAnnotation: pf,
    TERMINATORLESS_TYPES: eP,
    TSAnyKeyword: uf,
    TSArrayType: lf,
    TSAsExpression: cf,
    TSBASETYPE_TYPES: ZE,
    TSBigIntKeyword: Tf,
    TSBooleanKeyword: yf,
    TSCallSignatureDeclaration: df,
    TSConditionalType: Sf,
    TSConstructSignatureDeclaration: mf,
    TSConstructorType: ff,
    TSDeclareFunction: Ef,
    TSDeclareMethod: Pf,
    TSENTITYNAME_TYPES: HE,
    TSEnumDeclaration: bf,
    TSEnumMember: Af,
    TSExportAssignment: xf,
    TSExpressionWithTypeArguments: Of,
    TSExternalModuleReference: gf,
    TSFunctionType: If,
    TSImportEqualsDeclaration: Df,
    TSImportType: jf,
    TSIndexSignature: Lf,
    TSIndexedAccessType: Nf,
    TSInferType: Cf,
    TSInterfaceBody: Mf,
    TSInterfaceDeclaration: wf,
    TSIntersectionType: _f,
    TSIntrinsicKeyword: hf,
    TSLiteralType: vf,
    TSMappedType: Bf,
    TSMethodSignature: Ff,
    TSModuleBlock: Rf,
    TSModuleDeclaration: Yf,
    TSNamedTupleMember: Kf,
    TSNamespaceExportDeclaration: Xf,
    TSNeverKeyword: Uf,
    TSNonNullExpression: Jf,
    TSNullKeyword: kf,
    TSNumberKeyword: $f,
    TSObjectKeyword: Vf,
    TSOptionalType: Wf,
    TSParameterProperty: qf,
    TSParenthesizedType: Qf,
    TSPropertySignature: zf,
    TSQualifiedName: Gf,
    TSRestType: Hf,
    TSStringKeyword: Zf,
    TSSymbolKeyword: eE,
    TSTYPEELEMENT_TYPES: GE,
    TSTYPE_TYPES: zE,
    TSThisType: tE,
    TSTupleType: rE,
    TSTypeAliasDeclaration: sE,
    TSTypeAnnotation: aE,
    TSTypeAssertion: nE,
    TSTypeLiteral: iE,
    TSTypeOperator: oE,
    TSTypeParameter: pE,
    TSTypeParameterDeclaration: uE,
    TSTypeParameterInstantiation: lE,
    TSTypePredicate: cE,
    TSTypeQuery: TE,
    TSTypeReference: yE,
    TSUndefinedKeyword: dE,
    TSUnionType: SE,
    TSUnknownKeyword: mE,
    TSVoidKeyword: fE,
    TYPES: mb,
    TYPESCRIPT_TYPES: QE,
    TaggedTemplateExpression: EE,
    TemplateElement: PE,
    TemplateLiteral: bE,
    ThisExpression: AE,
    ThisTypeAnnotation: xE,
    ThrowStatement: OE,
    TopicReference: gE,
    TryStatement: IE,
    TupleExpression: DE,
    TupleTypeAnnotation: jE,
    TypeAlias: LE,
    TypeAnnotation: NE,
    TypeCastExpression: CE,
    TypeParameter: ME,
    TypeParameterDeclaration: wE,
    TypeParameterInstantiation: _E,
    TypeofTypeAnnotation: hE,
    UNARYLIKE_TYPES: qE,
    UNARY_OPERATORS: UP,
    UPDATE_OPERATORS: XP,
    USERWHITESPACABLE_TYPES: WE,
    UnaryExpression: vE,
    UnionTypeAnnotation: BE,
    UpdateExpression: FE,
    V8IntrinsicIdentifier: RE,
    VISITOR_KEYS: fb,
    VariableDeclaration: YE,
    VariableDeclarator: KE,
    Variance: XE,
    VoidTypeAnnotation: UE,
    WHILE_TYPES: VE,
    WhileStatement: JE,
    WithStatement: kE,
    YieldExpression: $E,
    __esModule: Ot,
    addComment: gt1,
    addComments: It,
    anyTypeAnnotation: np,
    appendToMemberExpression: Dt,
    argumentPlaceholder: ip,
    arrayExpression: op,
    arrayPattern: pp,
    arrayTypeAnnotation: up,
    arrowFunctionExpression: lp,
    assertAccessor: jr,
    assertAnyTypeAnnotation: Lr,
    assertArgumentPlaceholder: Nr,
    assertArrayExpression: Cr,
    assertArrayPattern: Mr,
    assertArrayTypeAnnotation: wr,
    assertArrowFunctionExpression: _r,
    assertAssignmentExpression: hr,
    assertAssignmentPattern: vr,
    assertAwaitExpression: Br,
    assertBigIntLiteral: Fr,
    assertBinary: Rr,
    assertBinaryExpression: Yr,
    assertBindExpression: Kr,
    assertBlock: Xr,
    assertBlockParent: Ur,
    assertBlockStatement: Jr,
    assertBooleanLiteral: kr,
    assertBooleanLiteralTypeAnnotation: $r,
    assertBooleanTypeAnnotation: Vr,
    assertBreakStatement: Wr,
    assertCallExpression: qr,
    assertCatchClause: Qr,
    assertClass: zr,
    assertClassAccessorProperty: Gr,
    assertClassBody: Hr,
    assertClassDeclaration: Zr,
    assertClassExpression: es,
    assertClassImplements: ts,
    assertClassMethod: rs,
    assertClassPrivateMethod: ss,
    assertClassPrivateProperty: as,
    assertClassProperty: ns,
    assertCompletionStatement: is,
    assertConditional: os,
    assertConditionalExpression: ps,
    assertContinueStatement: us,
    assertDebuggerStatement: ls,
    assertDecimalLiteral: cs,
    assertDeclaration: Ts,
    assertDeclareClass: ys,
    assertDeclareExportAllDeclaration: ds,
    assertDeclareExportDeclaration: Ss,
    assertDeclareFunction: ms,
    assertDeclareInterface: fs,
    assertDeclareModule: Es,
    assertDeclareModuleExports: Ps,
    assertDeclareOpaqueType: bs,
    assertDeclareTypeAlias: As,
    assertDeclareVariable: xs,
    assertDeclaredPredicate: Os,
    assertDecorator: gs,
    assertDirective: Is,
    assertDirectiveLiteral: Ds,
    assertDoExpression: js,
    assertDoWhileStatement: Ls,
    assertEmptyStatement: Ns,
    assertEmptyTypeAnnotation: Cs,
    assertEnumBody: Ms,
    assertEnumBooleanBody: ws,
    assertEnumBooleanMember: _s,
    assertEnumDeclaration: hs,
    assertEnumDefaultedMember: vs,
    assertEnumMember: Bs,
    assertEnumNumberBody: Fs,
    assertEnumNumberMember: Rs,
    assertEnumStringBody: Ys,
    assertEnumStringMember: Ks,
    assertEnumSymbolBody: Xs,
    assertExistsTypeAnnotation: Us,
    assertExportAllDeclaration: Js,
    assertExportDeclaration: ks,
    assertExportDefaultDeclaration: $s,
    assertExportDefaultSpecifier: Vs,
    assertExportNamedDeclaration: Ws,
    assertExportNamespaceSpecifier: qs,
    assertExportSpecifier: Qs,
    assertExpression: zs,
    assertExpressionStatement: Gs,
    assertExpressionWrapper: Hs,
    assertFile: Zs,
    assertFlow: ea,
    assertFlowBaseAnnotation: ta,
    assertFlowDeclaration: ra,
    assertFlowPredicate: sa,
    assertFlowType: aa,
    assertFor: na,
    assertForInStatement: ia,
    assertForOfStatement: oa,
    assertForStatement: pa,
    assertForXStatement: ua,
    assertFunction: la,
    assertFunctionDeclaration: ca,
    assertFunctionExpression: Ta,
    assertFunctionParent: ya,
    assertFunctionTypeAnnotation: da,
    assertFunctionTypeParam: Sa,
    assertGenericTypeAnnotation: ma,
    assertIdentifier: fa,
    assertIfStatement: Ea,
    assertImmutable: Pa,
    assertImport: ba,
    assertImportAttribute: Aa,
    assertImportDeclaration: xa,
    assertImportDefaultSpecifier: Oa,
    assertImportNamespaceSpecifier: ga,
    assertImportSpecifier: Ia,
    assertIndexedAccessType: Da,
    assertInferredPredicate: ja,
    assertInterfaceDeclaration: La,
    assertInterfaceExtends: Na,
    assertInterfaceTypeAnnotation: Ca,
    assertInterpreterDirective: Ma,
    assertIntersectionTypeAnnotation: wa,
    assertJSX: _a,
    assertJSXAttribute: ha,
    assertJSXClosingElement: va,
    assertJSXClosingFragment: Ba,
    assertJSXElement: Fa,
    assertJSXEmptyExpression: Ra,
    assertJSXExpressionContainer: Ya,
    assertJSXFragment: Ka,
    assertJSXIdentifier: Xa,
    assertJSXMemberExpression: Ua,
    assertJSXNamespacedName: Ja,
    assertJSXOpeningElement: ka,
    assertJSXOpeningFragment: $a,
    assertJSXSpreadAttribute: Va,
    assertJSXSpreadChild: Wa,
    assertJSXText: qa,
    assertLVal: Qa,
    assertLabeledStatement: za,
    assertLiteral: Ga,
    assertLogicalExpression: Ha,
    assertLoop: Za,
    assertMemberExpression: en,
    assertMetaProperty: tn,
    assertMethod: rn,
    assertMiscellaneous: sn,
    assertMixedTypeAnnotation: an,
    assertModuleDeclaration: nn,
    assertModuleExpression: on1,
    assertModuleSpecifier: pn,
    assertNewExpression: un,
    assertNode: jt,
    assertNoop: ln,
    assertNullLiteral: cn,
    assertNullLiteralTypeAnnotation: Tn,
    assertNullableTypeAnnotation: yn,
    assertNumberLiteral: dn,
    assertNumberLiteralTypeAnnotation: Sn,
    assertNumberTypeAnnotation: mn,
    assertNumericLiteral: fn,
    assertObjectExpression: En,
    assertObjectMember: Pn,
    assertObjectMethod: bn,
    assertObjectPattern: An,
    assertObjectProperty: xn,
    assertObjectTypeAnnotation: On,
    assertObjectTypeCallProperty: gn,
    assertObjectTypeIndexer: In,
    assertObjectTypeInternalSlot: Dn,
    assertObjectTypeProperty: jn,
    assertObjectTypeSpreadProperty: Ln,
    assertOpaqueType: Nn,
    assertOptionalCallExpression: Cn,
    assertOptionalIndexedAccessType: Mn,
    assertOptionalMemberExpression: wn,
    assertParenthesizedExpression: _n,
    assertPattern: hn,
    assertPatternLike: vn,
    assertPipelineBareFunction: Bn,
    assertPipelinePrimaryTopicReference: Fn,
    assertPipelineTopicExpression: Rn,
    assertPlaceholder: Yn,
    assertPrivate: Kn,
    assertPrivateName: Xn,
    assertProgram: Un,
    assertProperty: Jn,
    assertPureish: kn,
    assertQualifiedTypeIdentifier: $n,
    assertRecordExpression: Vn,
    assertRegExpLiteral: Wn,
    assertRegexLiteral: qn,
    assertRestElement: Qn,
    assertRestProperty: zn,
    assertReturnStatement: Gn,
    assertScopable: Hn,
    assertSequenceExpression: Zn,
    assertSpreadElement: ei,
    assertSpreadProperty: ti,
    assertStandardized: ri,
    assertStatement: si,
    assertStaticBlock: ai,
    assertStringLiteral: ni,
    assertStringLiteralTypeAnnotation: ii,
    assertStringTypeAnnotation: oi,
    assertSuper: pi,
    assertSwitchCase: ui,
    assertSwitchStatement: li,
    assertSymbolTypeAnnotation: ci,
    assertTSAnyKeyword: Ti,
    assertTSArrayType: yi,
    assertTSAsExpression: di,
    assertTSBaseType: Si,
    assertTSBigIntKeyword: mi,
    assertTSBooleanKeyword: fi,
    assertTSCallSignatureDeclaration: Ei,
    assertTSConditionalType: Pi,
    assertTSConstructSignatureDeclaration: bi,
    assertTSConstructorType: Ai,
    assertTSDeclareFunction: xi,
    assertTSDeclareMethod: Oi,
    assertTSEntityName: gi,
    assertTSEnumDeclaration: Ii,
    assertTSEnumMember: Di,
    assertTSExportAssignment: ji,
    assertTSExpressionWithTypeArguments: Li,
    assertTSExternalModuleReference: Ni,
    assertTSFunctionType: Ci,
    assertTSImportEqualsDeclaration: Mi,
    assertTSImportType: wi,
    assertTSIndexSignature: _i,
    assertTSIndexedAccessType: hi,
    assertTSInferType: vi,
    assertTSInterfaceBody: Bi,
    assertTSInterfaceDeclaration: Fi,
    assertTSIntersectionType: Ri,
    assertTSIntrinsicKeyword: Yi,
    assertTSLiteralType: Ki,
    assertTSMappedType: Xi,
    assertTSMethodSignature: Ui,
    assertTSModuleBlock: Ji,
    assertTSModuleDeclaration: ki,
    assertTSNamedTupleMember: $i,
    assertTSNamespaceExportDeclaration: Vi,
    assertTSNeverKeyword: Wi,
    assertTSNonNullExpression: qi,
    assertTSNullKeyword: Qi,
    assertTSNumberKeyword: zi,
    assertTSObjectKeyword: Gi,
    assertTSOptionalType: Hi,
    assertTSParameterProperty: Zi,
    assertTSParenthesizedType: eo,
    assertTSPropertySignature: to,
    assertTSQualifiedName: ro,
    assertTSRestType: so,
    assertTSStringKeyword: ao,
    assertTSSymbolKeyword: no,
    assertTSThisType: io,
    assertTSTupleType: oo,
    assertTSType: po,
    assertTSTypeAliasDeclaration: uo,
    assertTSTypeAnnotation: lo,
    assertTSTypeAssertion: co,
    assertTSTypeElement: To,
    assertTSTypeLiteral: yo,
    assertTSTypeOperator: So,
    assertTSTypeParameter: mo,
    assertTSTypeParameterDeclaration: fo,
    assertTSTypeParameterInstantiation: Eo,
    assertTSTypePredicate: Po,
    assertTSTypeQuery: bo,
    assertTSTypeReference: Ao,
    assertTSUndefinedKeyword: xo,
    assertTSUnionType: Oo,
    assertTSUnknownKeyword: go,
    assertTSVoidKeyword: Io,
    assertTaggedTemplateExpression: Do,
    assertTemplateElement: jo,
    assertTemplateLiteral: Lo,
    assertTerminatorless: No,
    assertThisExpression: Co,
    assertThisTypeAnnotation: Mo,
    assertThrowStatement: wo,
    assertTopicReference: _o,
    assertTryStatement: ho,
    assertTupleExpression: vo,
    assertTupleTypeAnnotation: Bo,
    assertTypeAlias: Fo,
    assertTypeAnnotation: Ro,
    assertTypeCastExpression: Yo,
    assertTypeParameter: Ko,
    assertTypeParameterDeclaration: Xo,
    assertTypeParameterInstantiation: Uo,
    assertTypeScript: Jo,
    assertTypeofTypeAnnotation: ko,
    assertUnaryExpression: $o,
    assertUnaryLike: Vo,
    assertUnionTypeAnnotation: Wo,
    assertUpdateExpression: qo,
    assertUserWhitespacable: Qo,
    assertV8IntrinsicIdentifier: zo,
    assertVariableDeclaration: Go,
    assertVariableDeclarator: Ho,
    assertVariance: Zo,
    assertVoidTypeAnnotation: ep,
    assertWhile: tp,
    assertWhileStatement: rp,
    assertWithStatement: sp,
    assertYieldExpression: ap,
    assignmentExpression: cp,
    assignmentPattern: Tp,
    awaitExpression: yp,
    bigIntLiteral: dp,
    binaryExpression: Sp,
    bindExpression: mp,
    blockStatement: fp,
    booleanLiteral: Ep,
    booleanLiteralTypeAnnotation: Pp,
    booleanTypeAnnotation: bp,
    breakStatement: Ap,
    buildMatchMemberExpression: Lt,
    callExpression: xp,
    catchClause: Op,
    classAccessorProperty: gp,
    classBody: Ip,
    classDeclaration: Dp,
    classExpression: jp,
    classImplements: Lp,
    classMethod: Np,
    classPrivateMethod: Cp,
    classPrivateProperty: Mp,
    classProperty: wp,
    clone: Nt,
    cloneDeep: Ct,
    cloneDeepWithoutLoc: Mt,
    cloneNode: wt,
    cloneWithoutLoc: _t,
    conditionalExpression: _p,
    continueStatement: hp,
    createFlowUnionType: ht,
    createTSUnionType: vt,
    createTypeAnnotationBasedOnTypeof: Bt,
    createUnionTypeAnnotation: Ft,
    debuggerStatement: vp,
    decimalLiteral: Bp,
    declareClass: Fp,
    declareExportAllDeclaration: Rp,
    declareExportDeclaration: Yp,
    declareFunction: Kp,
    declareInterface: Xp,
    declareModule: Up,
    declareModuleExports: Jp,
    declareOpaqueType: kp,
    declareTypeAlias: $p,
    declareVariable: Vp,
    declaredPredicate: Wp,
    decorator: qp,
    default: xt,
    directive: Qp,
    directiveLiteral: zp,
    doExpression: Gp,
    doWhileStatement: Hp,
    emptyStatement: Zp,
    emptyTypeAnnotation: eu,
    ensureBlock: Rt,
    enumBooleanBody: tu,
    enumBooleanMember: ru,
    enumDeclaration: su,
    enumDefaultedMember: au,
    enumNumberBody: nu,
    enumNumberMember: iu,
    enumStringBody: ou,
    enumStringMember: pu,
    enumSymbolBody: uu,
    existsTypeAnnotation: lu,
    exportAllDeclaration: cu,
    exportDefaultDeclaration: Tu,
    exportDefaultSpecifier: yu,
    exportNamedDeclaration: du,
    exportNamespaceSpecifier: Su,
    exportSpecifier: mu,
    expressionStatement: fu,
    file: Eu,
    forInStatement: Pu,
    forOfStatement: bu,
    forStatement: Au,
    functionDeclaration: xu,
    functionExpression: Ou,
    functionTypeAnnotation: gu,
    functionTypeParam: Iu,
    genericTypeAnnotation: Du,
    getBindingIdentifiers: Yt,
    getOuterBindingIdentifiers: Kt,
    identifier: ju,
    ifStatement: Lu,
    import: Nu,
    importAttribute: Cu,
    importDeclaration: Mu,
    importDefaultSpecifier: wu,
    importNamespaceSpecifier: _u,
    importSpecifier: hu,
    indexedAccessType: vu,
    inferredPredicate: Bu,
    inheritInnerComments: Xt,
    inheritLeadingComments: Ut,
    inheritTrailingComments: Jt,
    inherits: kt,
    inheritsComments: $t,
    interfaceDeclaration: Fu,
    interfaceExtends: Ru,
    interfaceTypeAnnotation: Yu,
    interpreterDirective: Ku,
    intersectionTypeAnnotation: Xu,
    is: Vt,
    isAccessor: Eb,
    isAnyTypeAnnotation: Pb,
    isArgumentPlaceholder: bb,
    isArrayExpression: Ab,
    isArrayPattern: xb,
    isArrayTypeAnnotation: Ob,
    isArrowFunctionExpression: gb,
    isAssignmentExpression: Ib,
    isAssignmentPattern: Db,
    isAwaitExpression: jb,
    isBigIntLiteral: Lb,
    isBinary: Nb,
    isBinaryExpression: Cb,
    isBindExpression: Mb,
    isBinding: Wt,
    isBlock: wb,
    isBlockParent: _b,
    isBlockScoped: qt,
    isBlockStatement: hb,
    isBooleanLiteral: vb,
    isBooleanLiteralTypeAnnotation: Bb,
    isBooleanTypeAnnotation: Fb,
    isBreakStatement: Rb,
    isCallExpression: Yb,
    isCatchClause: Kb,
    isClass: Xb,
    isClassAccessorProperty: Ub,
    isClassBody: Jb,
    isClassDeclaration: kb,
    isClassExpression: $b,
    isClassImplements: Vb,
    isClassMethod: Wb,
    isClassPrivateMethod: qb,
    isClassPrivateProperty: Qb,
    isClassProperty: zb,
    isCompletionStatement: Gb,
    isConditional: Hb,
    isConditionalExpression: Zb,
    isContinueStatement: eA,
    isDebuggerStatement: tA,
    isDecimalLiteral: rA,
    isDeclaration: sA,
    isDeclareClass: aA,
    isDeclareExportAllDeclaration: nA,
    isDeclareExportDeclaration: iA,
    isDeclareFunction: oA,
    isDeclareInterface: pA,
    isDeclareModule: uA,
    isDeclareModuleExports: lA,
    isDeclareOpaqueType: cA,
    isDeclareTypeAlias: TA,
    isDeclareVariable: yA,
    isDeclaredPredicate: dA,
    isDecorator: SA,
    isDirective: mA,
    isDirectiveLiteral: fA,
    isDoExpression: EA,
    isDoWhileStatement: PA,
    isEmptyStatement: bA,
    isEmptyTypeAnnotation: AA,
    isEnumBody: xA,
    isEnumBooleanBody: OA,
    isEnumBooleanMember: gA,
    isEnumDeclaration: IA,
    isEnumDefaultedMember: DA,
    isEnumMember: jA,
    isEnumNumberBody: LA,
    isEnumNumberMember: NA,
    isEnumStringBody: CA,
    isEnumStringMember: MA,
    isEnumSymbolBody: wA,
    isExistsTypeAnnotation: _A,
    isExportAllDeclaration: hA,
    isExportDeclaration: vA,
    isExportDefaultDeclaration: BA,
    isExportDefaultSpecifier: FA,
    isExportNamedDeclaration: RA,
    isExportNamespaceSpecifier: YA,
    isExportSpecifier: KA,
    isExpression: XA,
    isExpressionStatement: UA,
    isExpressionWrapper: JA,
    isFile: kA,
    isFlow: $A,
    isFlowBaseAnnotation: VA,
    isFlowDeclaration: WA,
    isFlowPredicate: qA,
    isFlowType: QA,
    isFor: zA,
    isForInStatement: GA,
    isForOfStatement: HA,
    isForStatement: ZA,
    isForXStatement: ex,
    isFunction: tx,
    isFunctionDeclaration: rx,
    isFunctionExpression: sx,
    isFunctionParent: ax,
    isFunctionTypeAnnotation: nx,
    isFunctionTypeParam: ix,
    isGenericTypeAnnotation: ox,
    isIdentifier: px,
    isIfStatement: ux,
    isImmutable: Qt,
    isImport: lx,
    isImportAttribute: cx,
    isImportDeclaration: Tx,
    isImportDefaultSpecifier: yx,
    isImportNamespaceSpecifier: dx,
    isImportSpecifier: Sx,
    isIndexedAccessType: mx,
    isInferredPredicate: fx,
    isInterfaceDeclaration: Ex,
    isInterfaceExtends: Px,
    isInterfaceTypeAnnotation: bx,
    isInterpreterDirective: Ax,
    isIntersectionTypeAnnotation: xx,
    isJSX: Ox,
    isJSXAttribute: gx,
    isJSXClosingElement: Ix,
    isJSXClosingFragment: Dx,
    isJSXElement: jx,
    isJSXEmptyExpression: Lx,
    isJSXExpressionContainer: Nx,
    isJSXFragment: Cx,
    isJSXIdentifier: Mx,
    isJSXMemberExpression: wx,
    isJSXNamespacedName: _x,
    isJSXOpeningElement: hx,
    isJSXOpeningFragment: vx,
    isJSXSpreadAttribute: Bx,
    isJSXSpreadChild: Fx,
    isJSXText: Rx,
    isLVal: Yx,
    isLabeledStatement: Kx,
    isLet: zt,
    isLiteral: Xx,
    isLogicalExpression: Ux,
    isLoop: Jx,
    isMemberExpression: kx,
    isMetaProperty: $x,
    isMethod: Vx,
    isMiscellaneous: Wx,
    isMixedTypeAnnotation: qx,
    isModuleDeclaration: Qx,
    isModuleExpression: zx,
    isModuleSpecifier: Gx,
    isNewExpression: Hx,
    isNode: Gt,
    isNodesEquivalent: Ht,
    isNoop: Zx,
    isNullLiteral: eO,
    isNullLiteralTypeAnnotation: tO,
    isNullableTypeAnnotation: rO,
    isNumberLiteral: sO,
    isNumberLiteralTypeAnnotation: aO,
    isNumberTypeAnnotation: nO,
    isNumericLiteral: iO,
    isObjectExpression: oO,
    isObjectMember: pO,
    isObjectMethod: uO,
    isObjectPattern: lO,
    isObjectProperty: cO,
    isObjectTypeAnnotation: TO,
    isObjectTypeCallProperty: yO,
    isObjectTypeIndexer: dO,
    isObjectTypeInternalSlot: SO,
    isObjectTypeProperty: mO,
    isObjectTypeSpreadProperty: fO,
    isOpaqueType: EO,
    isOptionalCallExpression: PO,
    isOptionalIndexedAccessType: bO,
    isOptionalMemberExpression: AO,
    isParenthesizedExpression: xO,
    isPattern: OO,
    isPatternLike: gO,
    isPipelineBareFunction: IO,
    isPipelinePrimaryTopicReference: DO,
    isPipelineTopicExpression: jO,
    isPlaceholder: LO,
    isPlaceholderType: Zt,
    isPrivate: NO,
    isPrivateName: CO,
    isProgram: MO,
    isProperty: wO,
    isPureish: _O,
    isQualifiedTypeIdentifier: hO,
    isRecordExpression: vO,
    isReferenced: er,
    isRegExpLiteral: BO,
    isRegexLiteral: FO,
    isRestElement: RO,
    isRestProperty: YO,
    isReturnStatement: KO,
    isScopable: XO,
    isScope: tr,
    isSequenceExpression: UO,
    isSpecifierDefault: rr,
    isSpreadElement: JO,
    isSpreadProperty: kO,
    isStandardized: $O,
    isStatement: VO,
    isStaticBlock: WO,
    isStringLiteral: qO,
    isStringLiteralTypeAnnotation: QO,
    isStringTypeAnnotation: zO,
    isSuper: GO,
    isSwitchCase: HO,
    isSwitchStatement: ZO,
    isSymbolTypeAnnotation: eg,
    isTSAnyKeyword: tg,
    isTSArrayType: rg,
    isTSAsExpression: sg,
    isTSBaseType: ag,
    isTSBigIntKeyword: ng,
    isTSBooleanKeyword: ig,
    isTSCallSignatureDeclaration: og,
    isTSConditionalType: pg,
    isTSConstructSignatureDeclaration: ug,
    isTSConstructorType: lg,
    isTSDeclareFunction: cg,
    isTSDeclareMethod: Tg,
    isTSEntityName: yg,
    isTSEnumDeclaration: dg,
    isTSEnumMember: Sg,
    isTSExportAssignment: mg,
    isTSExpressionWithTypeArguments: fg,
    isTSExternalModuleReference: Eg,
    isTSFunctionType: Pg,
    isTSImportEqualsDeclaration: bg,
    isTSImportType: Ag,
    isTSIndexSignature: xg,
    isTSIndexedAccessType: Og,
    isTSInferType: gg,
    isTSInterfaceBody: Ig,
    isTSInterfaceDeclaration: Dg,
    isTSIntersectionType: jg,
    isTSIntrinsicKeyword: Lg,
    isTSLiteralType: Ng,
    isTSMappedType: Cg,
    isTSMethodSignature: Mg,
    isTSModuleBlock: wg,
    isTSModuleDeclaration: _g,
    isTSNamedTupleMember: hg,
    isTSNamespaceExportDeclaration: vg,
    isTSNeverKeyword: Bg,
    isTSNonNullExpression: Fg,
    isTSNullKeyword: Rg,
    isTSNumberKeyword: Yg,
    isTSObjectKeyword: Kg,
    isTSOptionalType: Xg,
    isTSParameterProperty: Ug,
    isTSParenthesizedType: Jg,
    isTSPropertySignature: kg,
    isTSQualifiedName: $g,
    isTSRestType: Vg,
    isTSStringKeyword: Wg,
    isTSSymbolKeyword: qg,
    isTSThisType: Qg,
    isTSTupleType: zg,
    isTSType: Gg,
    isTSTypeAliasDeclaration: Hg,
    isTSTypeAnnotation: Zg,
    isTSTypeAssertion: eI,
    isTSTypeElement: tI,
    isTSTypeLiteral: rI,
    isTSTypeOperator: sI,
    isTSTypeParameter: aI,
    isTSTypeParameterDeclaration: nI,
    isTSTypeParameterInstantiation: iI,
    isTSTypePredicate: oI,
    isTSTypeQuery: pI,
    isTSTypeReference: uI,
    isTSUndefinedKeyword: lI,
    isTSUnionType: cI,
    isTSUnknownKeyword: TI,
    isTSVoidKeyword: yI,
    isTaggedTemplateExpression: dI,
    isTemplateElement: SI,
    isTemplateLiteral: mI,
    isTerminatorless: fI,
    isThisExpression: EI,
    isThisTypeAnnotation: PI,
    isThrowStatement: bI,
    isTopicReference: AI,
    isTryStatement: xI,
    isTupleExpression: OI,
    isTupleTypeAnnotation: gI,
    isType: sr,
    isTypeAlias: II,
    isTypeAnnotation: DI,
    isTypeCastExpression: jI,
    isTypeParameter: LI,
    isTypeParameterDeclaration: NI,
    isTypeParameterInstantiation: CI,
    isTypeScript: MI,
    isTypeofTypeAnnotation: wI,
    isUnaryExpression: _I,
    isUnaryLike: hI,
    isUnionTypeAnnotation: vI,
    isUpdateExpression: BI,
    isUserWhitespacable: FI,
    isV8IntrinsicIdentifier: RI,
    isValidES3Identifier: ar,
    isValidIdentifier: nr,
    isVar: ir,
    isVariableDeclaration: YI,
    isVariableDeclarator: KI,
    isVariance: XI,
    isVoidTypeAnnotation: UI,
    isWhile: JI,
    isWhileStatement: kI,
    isWithStatement: $I,
    isYieldExpression: VI,
    jSXAttribute: Uu,
    jSXClosingElement: ku,
    jSXClosingFragment: Vu,
    jSXElement: qu,
    jSXEmptyExpression: zu,
    jSXExpressionContainer: Hu,
    jSXFragment: el,
    jSXIdentifier: rl,
    jSXMemberExpression: al,
    jSXNamespacedName: il,
    jSXOpeningElement: pl,
    jSXOpeningFragment: ll,
    jSXSpreadAttribute: Tl,
    jSXSpreadChild: dl,
    jSXText: ml,
    jsxAttribute: Ju,
    jsxClosingElement: $u,
    jsxClosingFragment: Wu,
    jsxElement: Qu,
    jsxEmptyExpression: Gu,
    jsxExpressionContainer: Zu,
    jsxFragment: tl,
    jsxIdentifier: sl,
    jsxMemberExpression: nl,
    jsxNamespacedName: ol,
    jsxOpeningElement: ul,
    jsxOpeningFragment: cl,
    jsxSpreadAttribute: yl,
    jsxSpreadChild: Sl,
    jsxText: fl,
    labeledStatement: El,
    logicalExpression: Pl,
    matchesPattern: or,
    memberExpression: bl,
    metaProperty: Al,
    mixedTypeAnnotation: xl,
    moduleExpression: Ol,
    newExpression: gl,
    noop: Il,
    nullLiteral: Dl,
    nullLiteralTypeAnnotation: jl,
    nullableTypeAnnotation: Ll,
    numberLiteral: Nl,
    numberLiteralTypeAnnotation: Cl,
    numberTypeAnnotation: Ml,
    numericLiteral: wl,
    objectExpression: _l,
    objectMethod: hl,
    objectPattern: vl,
    objectProperty: Bl,
    objectTypeAnnotation: Fl,
    objectTypeCallProperty: Rl,
    objectTypeIndexer: Yl,
    objectTypeInternalSlot: Kl,
    objectTypeProperty: Xl,
    objectTypeSpreadProperty: Ul,
    opaqueType: Jl,
    optionalCallExpression: kl,
    optionalIndexedAccessType: $l,
    optionalMemberExpression: Vl,
    parenthesizedExpression: Wl,
    pipelineBareFunction: ql,
    pipelinePrimaryTopicReference: Ql,
    pipelineTopicExpression: zl,
    placeholder: Gl,
    prependToMemberExpression: pr,
    privateName: Hl,
    program: Zl,
    qualifiedTypeIdentifier: ec,
    react: ur,
    recordExpression: tc,
    regExpLiteral: rc,
    regexLiteral: sc,
    removeComments: lr,
    removeProperties: cr,
    removePropertiesDeep: Tr,
    removeTypeDuplicates: yr,
    restElement: ac,
    restProperty: nc,
    returnStatement: ic,
    sequenceExpression: oc,
    shallowEqual: dr,
    spreadElement: pc,
    spreadProperty: uc,
    staticBlock: lc,
    stringLiteral: cc,
    stringLiteralTypeAnnotation: Tc,
    stringTypeAnnotation: yc,
    super: dc,
    switchCase: Sc,
    switchStatement: mc,
    symbolTypeAnnotation: fc,
    tSAnyKeyword: Dc,
    tSArrayType: Lc,
    tSAsExpression: Cc,
    tSBigIntKeyword: wc,
    tSBooleanKeyword: hc,
    tSCallSignatureDeclaration: Bc,
    tSConditionalType: Rc,
    tSConstructSignatureDeclaration: Kc,
    tSConstructorType: Uc,
    tSDeclareFunction: kc,
    tSDeclareMethod: Vc,
    tSEnumDeclaration: qc,
    tSEnumMember: zc,
    tSExportAssignment: Hc,
    tSExpressionWithTypeArguments: eT,
    tSExternalModuleReference: rT,
    tSFunctionType: aT,
    tSImportEqualsDeclaration: iT,
    tSImportType: pT,
    tSIndexSignature: lT,
    tSIndexedAccessType: TT,
    tSInferType: dT,
    tSInterfaceBody: mT,
    tSInterfaceDeclaration: ET,
    tSIntersectionType: bT,
    tSIntrinsicKeyword: xT,
    tSLiteralType: gT,
    tSMappedType: DT,
    tSMethodSignature: LT,
    tSModuleBlock: CT,
    tSModuleDeclaration: wT,
    tSNamedTupleMember: hT,
    tSNamespaceExportDeclaration: BT,
    tSNeverKeyword: RT,
    tSNonNullExpression: KT,
    tSNullKeyword: UT,
    tSNumberKeyword: kT,
    tSObjectKeyword: VT,
    tSOptionalType: qT,
    tSParameterProperty: zT,
    tSParenthesizedType: HT,
    tSPropertySignature: ey,
    tSQualifiedName: ry,
    tSRestType: ay,
    tSStringKeyword: iy,
    tSSymbolKeyword: py,
    tSThisType: ly,
    tSTupleType: Ty,
    tSTypeAliasDeclaration: dy,
    tSTypeAnnotation: my,
    tSTypeAssertion: Ey,
    tSTypeLiteral: by,
    tSTypeOperator: xy,
    tSTypeParameter: gy,
    tSTypeParameterDeclaration: Dy,
    tSTypeParameterInstantiation: Ly,
    tSTypePredicate: Cy,
    tSTypeQuery: wy,
    tSTypeReference: hy,
    tSUndefinedKeyword: By,
    tSUnionType: Ry,
    tSUnknownKeyword: Ky,
    tSVoidKeyword: Uy,
    taggedTemplateExpression: Ec,
    templateElement: Pc,
    templateLiteral: bc,
    thisExpression: Ac,
    thisTypeAnnotation: xc,
    throwStatement: Oc,
    toBindingIdentifierName: Sr,
    toBlock: mr,
    toComputedKey: fr,
    toExpression: Er,
    toIdentifier: Pr,
    toKeyAlias: br,
    toSequenceExpression: Ar,
    toStatement: xr,
    topicReference: gc,
    traverse: Or,
    traverseFast: gr,
    tryStatement: Ic,
    tsAnyKeyword: jc,
    tsArrayType: Nc,
    tsAsExpression: Mc,
    tsBigIntKeyword: _c,
    tsBooleanKeyword: vc,
    tsCallSignatureDeclaration: Fc,
    tsConditionalType: Yc,
    tsConstructSignatureDeclaration: Xc,
    tsConstructorType: Jc,
    tsDeclareFunction: $c,
    tsDeclareMethod: Wc,
    tsEnumDeclaration: Qc,
    tsEnumMember: Gc,
    tsExportAssignment: Zc,
    tsExpressionWithTypeArguments: tT,
    tsExternalModuleReference: sT,
    tsFunctionType: nT,
    tsImportEqualsDeclaration: oT,
    tsImportType: uT,
    tsIndexSignature: cT,
    tsIndexedAccessType: yT,
    tsInferType: ST,
    tsInterfaceBody: fT,
    tsInterfaceDeclaration: PT,
    tsIntersectionType: AT,
    tsIntrinsicKeyword: OT,
    tsLiteralType: IT,
    tsMappedType: jT,
    tsMethodSignature: NT,
    tsModuleBlock: MT,
    tsModuleDeclaration: _T,
    tsNamedTupleMember: vT,
    tsNamespaceExportDeclaration: FT,
    tsNeverKeyword: YT,
    tsNonNullExpression: XT,
    tsNullKeyword: JT,
    tsNumberKeyword: $T,
    tsObjectKeyword: WT,
    tsOptionalType: QT,
    tsParameterProperty: GT,
    tsParenthesizedType: ZT,
    tsPropertySignature: ty,
    tsQualifiedName: sy,
    tsRestType: ny,
    tsStringKeyword: oy,
    tsSymbolKeyword: uy,
    tsThisType: cy,
    tsTupleType: yy,
    tsTypeAliasDeclaration: Sy,
    tsTypeAnnotation: fy,
    tsTypeAssertion: Py,
    tsTypeLiteral: Ay,
    tsTypeOperator: Oy,
    tsTypeParameter: Iy,
    tsTypeParameterDeclaration: jy,
    tsTypeParameterInstantiation: Ny,
    tsTypePredicate: My,
    tsTypeQuery: _y,
    tsTypeReference: vy,
    tsUndefinedKeyword: Fy,
    tsUnionType: Yy,
    tsUnknownKeyword: Xy,
    tsVoidKeyword: Jy,
    tupleExpression: ky,
    tupleTypeAnnotation: $y,
    typeAlias: Vy,
    typeAnnotation: Wy,
    typeCastExpression: qy,
    typeParameter: Qy,
    typeParameterDeclaration: zy,
    typeParameterInstantiation: Gy,
    typeofTypeAnnotation: Hy,
    unaryExpression: Zy,
    unionTypeAnnotation: ed,
    updateExpression: td,
    v8IntrinsicIdentifier: rd,
    validate: Ir,
    valueToNode: Dr,
    variableDeclaration: sd,
    variableDeclarator: ad,
    variance: nd,
    voidTypeAnnotation: id,
    whileStatement: od,
    withStatement: pd,
    yieldExpression: ud
};
var e5 = {};
var s4 = 1e3;
var r7 = 60 * s4;
var a4 = 60 * r7;
var n8 = 24 * a4;
var t8 = 7 * n8;
var c4 = 365.25 * n8;
e5 = function(e1, s113) {
    s113 = s113 || {};
    var r119 = typeof e1;
    if ("string" === r119 && e1.length > 0) return parse1(e1);
    if ("number" === r119 && isFinite(e1)) return s113.long ? fmtLong(e1) : fmtShort(e1);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e1));
};
function parse1(e2) {
    e2 = String(e2);
    if (!(e2.length > 100)) {
        var u113 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e2);
        if (u113) {
            var o62 = parseFloat(u113[1]);
            var i56 = (u113[2] || "ms").toLowerCase();
            switch(i56){
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                    return o62 * c4;
                case "weeks":
                case "week":
                case "w":
                    return o62 * t8;
                case "days":
                case "day":
                case "d":
                    return o62 * n8;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                    return o62 * a4;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                    return o62 * r7;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                    return o62 * s4;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                    return o62;
                default:
                    return;
            }
        }
    }
}
function fmtShort(e399) {
    var t1106 = Math.abs(e399);
    return t1106 >= n8 ? Math.round(e399 / n8) + "d" : t1106 >= a4 ? Math.round(e399 / a4) + "h" : t1106 >= r7 ? Math.round(e399 / r7) + "m" : t1106 >= s4 ? Math.round(e399 / s4) + "s" : e399 + "ms";
}
function fmtLong(e411) {
    var t2105 = Math.abs(e411);
    return t2105 >= n8 ? plural(e411, t2105, n8, "day") : t2105 >= a4 ? plural(e411, t2105, a4, "hour") : t2105 >= r7 ? plural(e411, t2105, r7, "minute") : t2105 >= s4 ? plural(e411, t2105, s4, "second") : e411 + " ms";
}
function plural(e510, s212, r213, a114) {
    var n1105 = s212 >= 1.5 * r213;
    return Math.round(e510 / r213) + " " + a114 + (n1105 ? "s" : "");
}
var u4 = e5;
const mod4 = {
    default: u4
};
var r8 = "default" in mod4 ? mod4.default : mod4;
var o4 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var n9 = {};
function setup(e1) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce1;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = r8;
    createDebug.destroy = destroy;
    Object.keys(e1).forEach((t1107)=>{
        createDebug[t1107] = e1[t1107];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(e2) {
        let t2106 = 0;
        for(let r120 = 0; r120 < e2.length; r120++){
            t2106 = (t2106 << 5) - t2106 + e2.charCodeAt(r120);
            t2106 |= 0;
        }
        return createDebug.colors[Math.abs(t2106) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(e3100) {
        let t374;
        let r214 = null;
        let o113;
        let n1106;
        function debug(...e412) {
            if (!debug.enabled) return;
            const r313 = debug;
            const o212 = Number(new Date);
            const n2102 = o212 - (t374 || o212);
            r313.diff = n2102;
            r313.prev = t374;
            r313.curr = o212;
            t374 = o212;
            e412[0] = createDebug.coerce(e412[0]);
            "string" !== typeof e412[0] && e412.unshift("%O");
            let a115 = 0;
            e412[0] = e412[0].replace(/%([a-zA-Z%])/g, (t412, o312)=>{
                if ("%%" === t412) return "%";
                a115++;
                const n312 = createDebug.formatters[o312];
                if ("function" === typeof n312) {
                    const o410 = e412[a115];
                    t412 = n312.call(r313, o410);
                    e412.splice(a115, 1);
                    a115--;
                }
                return t412;
            });
            createDebug.formatArgs.call(r313, e412);
            const s114 = r313.log || createDebug.log;
            s114.apply(r313, e412);
        }
        debug.namespace = e3100;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(e3100);
        debug.extend = extend1;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (null !== r214) return r214;
                if (o113 !== createDebug.namespaces) {
                    o113 = createDebug.namespaces;
                    n1106 = createDebug.enabled(e3100);
                }
                return n1106;
            },
            set: (e511)=>{
                r214 = e511;
            }
        });
        "function" === typeof createDebug.init && createDebug.init(debug);
        return debug;
    }
    function extend1(e6, t511) {
        const r413 = createDebug((this || o4).namespace + ("undefined" === typeof t511 ? ":" : t511) + e6);
        r413.log = (this || o4).log;
        return r413;
    }
    function enable(e7) {
        createDebug.save(e7);
        createDebug.namespaces = e7;
        createDebug.names = [];
        createDebug.skips = [];
        let t611;
        const r511 = ("string" === typeof e7 ? e7 : "").split(/[\s,]+/);
        const o5 = r511.length;
        for(t611 = 0; t611 < o5; t611++)if (r511[t611]) {
            e7 = r511[t611].replace(/\*/g, ".*?");
            "-" === e7[0] ? createDebug.skips.push(new RegExp("^" + e7.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + e7 + "$"));
        }
    }
    function disable() {
        const e8 = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((e9)=>"-" + e9
            )
        ].join(",");
        createDebug.enable("");
        return e8;
    }
    function enabled(e10) {
        if ("*" === e10[e10.length - 1]) return true;
        let t711;
        let r611;
        for(t711 = 0, r611 = createDebug.skips.length; t711 < r611; t711++)if (createDebug.skips[t711].test(e10)) return false;
        for(t711 = 0, r611 = createDebug.names.length; t711 < r611; t711++)if (createDebug.names[t711].test(e10)) return true;
        return false;
    }
    function toNamespace(e11) {
        return e11.toString().substring(2, e11.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function coerce1(e12) {
        return e12 instanceof Error ? e12.stack || e12.message : e12;
    }
    function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
n9 = setup;
var a5 = n9;
var s5 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var c5 = {};
var u5 = se;
c5.formatArgs = formatArgs;
c5.save = save;
c5.load = load;
c5.useColors = useColors;
c5.storage = localstorage();
c5.destroy = (()=>{
    let e13 = false;
    return ()=>{
        if (!e13) {
            e13 = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
c5.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
function useColors() {
    return !("undefined" === typeof window || !window.process || "renderer" !== window.process.type && !window.process.__nwjs) || ("undefined" === typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" !== typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" !== typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" !== typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}
function formatArgs(e14) {
    e14[0] = ((this || s5).useColors ? "%c" : "") + (this || s5).namespace + ((this || s5).useColors ? " %c" : " ") + e14[0] + ((this || s5).useColors ? "%c " : " ") + "+" + c5.humanize((this || s5).diff);
    if (!(this || s5).useColors) return;
    const t810 = "color: " + (this || s5).color;
    e14.splice(1, 0, t810, "color: inherit");
    let r71 = 0;
    let o6 = 0;
    e14[0].replace(/%[a-zA-Z%]/g, (e15)=>{
        if ("%%" !== e15) {
            r71++;
            "%c" === e15 && (o6 = r71);
        }
    });
    e14.splice(o6, 0, t810);
}
c5.log = console.debug || console.log || (()=>{});
function save(e16) {
    try {
        e16 ? c5.storage.setItem("debug", e16) : c5.storage.removeItem("debug");
    } catch (e) {}
}
function load() {
    let e17;
    try {
        e17 = c5.storage.getItem("debug");
    } catch (e) {}
    !e17 && "undefined" !== typeof u5 && "env" in u5 && (e17 = u5.env.DEBUG);
    return e17;
}
function localstorage() {
    try {
        return localStorage;
    } catch (e) {}
}
c5 = a5(c5);
const { formatters: l5  } = c5;
l5.j = function(e18) {
    try {
        return JSON.stringify(e18);
    } catch (e19) {
        return "[UnexpectedJSONParseError]: " + e19.message;
    }
};
var g4 = c5;
const i4 = c5.storage, C3 = c5.destroy, d4 = c5.colors, b5 = c5.log;
const f5 = c5.formatArgs, F4 = c5.save, p4 = c5.load, m5 = c5.useColors;
const mod5 = {
    colors: d4,
    default: g4,
    destroy: C3,
    formatArgs: f5,
    load: p4,
    log: b5,
    save: F4,
    storage: i4,
    useColors: m5
};
var t9 = "default" in mod3 ? mod3.default : mod3;
var r9 = {};
Object.defineProperty(r9, "__esModule", {
    value: true
});
r9.default = splitExportDeclaration;
var i5 = t9;
const { cloneNode: n10 , exportNamedDeclaration: o5 , exportSpecifier: a6 , identifier: s6 , variableDeclaration: l6 , variableDeclarator: c6  } = i5;
function splitExportDeclaration(e1) {
    if (!e1.isExportDeclaration()) throw new Error("Only export declarations can be split.");
    const t1108 = e1.isExportDefaultDeclaration();
    const r121 = e1.get("declaration");
    const i115 = r121.isClassDeclaration();
    if (t1108) {
        const t2107 = r121.isFunctionDeclaration() || i115;
        const p113 = r121.isScope() ? r121.scope.parent : r121.scope;
        let d43 = r121.node.id;
        let f47 = false;
        if (!d43) {
            f47 = true;
            d43 = p113.generateUidIdentifier("default");
            (t2107 || r121.isFunctionExpression() || r121.isClassExpression()) && (r121.node.id = n10(d43));
        }
        const u51 = t2107 ? r121 : l6("var", [
            c6(n10(d43), r121.node)
        ]);
        const x26 = o5(null, [
            a6(n10(d43), s6("default"))
        ]);
        e1.insertAfter(x26);
        e1.replaceWith(u51);
        f47 && p113.registerDeclaration(e1);
        return e1;
    }
    if (e1.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
    const p212 = r121.getOuterBindingIdentifiers();
    const d44 = Object.keys(p212).map((e2)=>a6(s6(e2), s6(e2))
    );
    const f48 = o5(null, d44);
    e1.insertAfter(f48);
    e1.replaceWith(r121.node);
    return e1;
}
const p5 = r9.__esModule;
const mod6 = {
    __esModule: p5,
    default: r9
};
var e6 = {
    builtin: {
        Array: false,
        ArrayBuffer: false,
        Atomics: false,
        BigInt: false,
        BigInt64Array: false,
        BigUint64Array: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        globalThis: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        SharedArrayBuffer: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
    },
    es5: {
        Array: false,
        Boolean: false,
        constructor: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        propertyIsEnumerable: false,
        RangeError: false,
        ReferenceError: false,
        RegExp: false,
        String: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false
    },
    es2015: {
        Array: false,
        ArrayBuffer: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
    },
    es2017: {
        Array: false,
        ArrayBuffer: false,
        Atomics: false,
        Boolean: false,
        constructor: false,
        DataView: false,
        Date: false,
        decodeURI: false,
        decodeURIComponent: false,
        encodeURI: false,
        encodeURIComponent: false,
        Error: false,
        escape: false,
        eval: false,
        EvalError: false,
        Float32Array: false,
        Float64Array: false,
        Function: false,
        hasOwnProperty: false,
        Infinity: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        isFinite: false,
        isNaN: false,
        isPrototypeOf: false,
        JSON: false,
        Map: false,
        Math: false,
        NaN: false,
        Number: false,
        Object: false,
        parseFloat: false,
        parseInt: false,
        Promise: false,
        propertyIsEnumerable: false,
        Proxy: false,
        RangeError: false,
        ReferenceError: false,
        Reflect: false,
        RegExp: false,
        Set: false,
        SharedArrayBuffer: false,
        String: false,
        Symbol: false,
        SyntaxError: false,
        toLocaleString: false,
        toString: false,
        TypeError: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        undefined: false,
        unescape: false,
        URIError: false,
        valueOf: false,
        WeakMap: false,
        WeakSet: false
    },
    browser: {
        AbortController: false,
        AbortSignal: false,
        addEventListener: false,
        alert: false,
        AnalyserNode: false,
        Animation: false,
        AnimationEffectReadOnly: false,
        AnimationEffectTiming: false,
        AnimationEffectTimingReadOnly: false,
        AnimationEvent: false,
        AnimationPlaybackEvent: false,
        AnimationTimeline: false,
        applicationCache: false,
        ApplicationCache: false,
        ApplicationCacheErrorEvent: false,
        atob: false,
        Attr: false,
        Audio: false,
        AudioBuffer: false,
        AudioBufferSourceNode: false,
        AudioContext: false,
        AudioDestinationNode: false,
        AudioListener: false,
        AudioNode: false,
        AudioParam: false,
        AudioProcessingEvent: false,
        AudioScheduledSourceNode: false,
        "AudioWorkletGlobalScope ": false,
        AudioWorkletNode: false,
        AudioWorkletProcessor: false,
        BarProp: false,
        BaseAudioContext: false,
        BatteryManager: false,
        BeforeUnloadEvent: false,
        BiquadFilterNode: false,
        Blob: false,
        BlobEvent: false,
        blur: false,
        BroadcastChannel: false,
        btoa: false,
        BudgetService: false,
        ByteLengthQueuingStrategy: false,
        Cache: false,
        caches: false,
        CacheStorage: false,
        cancelAnimationFrame: false,
        cancelIdleCallback: false,
        CanvasCaptureMediaStreamTrack: false,
        CanvasGradient: false,
        CanvasPattern: false,
        CanvasRenderingContext2D: false,
        ChannelMergerNode: false,
        ChannelSplitterNode: false,
        CharacterData: false,
        clearInterval: false,
        clearTimeout: false,
        clientInformation: false,
        ClipboardEvent: false,
        close: false,
        closed: false,
        CloseEvent: false,
        Comment: false,
        CompositionEvent: false,
        confirm: false,
        console: false,
        ConstantSourceNode: false,
        ConvolverNode: false,
        CountQueuingStrategy: false,
        createImageBitmap: false,
        Credential: false,
        CredentialsContainer: false,
        crypto: false,
        Crypto: false,
        CryptoKey: false,
        CSS: false,
        CSSConditionRule: false,
        CSSFontFaceRule: false,
        CSSGroupingRule: false,
        CSSImportRule: false,
        CSSKeyframeRule: false,
        CSSKeyframesRule: false,
        CSSMediaRule: false,
        CSSNamespaceRule: false,
        CSSPageRule: false,
        CSSRule: false,
        CSSRuleList: false,
        CSSStyleDeclaration: false,
        CSSStyleRule: false,
        CSSStyleSheet: false,
        CSSSupportsRule: false,
        CustomElementRegistry: false,
        customElements: false,
        CustomEvent: false,
        DataTransfer: false,
        DataTransferItem: false,
        DataTransferItemList: false,
        defaultstatus: false,
        defaultStatus: false,
        DelayNode: false,
        DeviceMotionEvent: false,
        DeviceOrientationEvent: false,
        devicePixelRatio: false,
        dispatchEvent: false,
        document: false,
        Document: false,
        DocumentFragment: false,
        DocumentType: false,
        DOMError: false,
        DOMException: false,
        DOMImplementation: false,
        DOMMatrix: false,
        DOMMatrixReadOnly: false,
        DOMParser: false,
        DOMPoint: false,
        DOMPointReadOnly: false,
        DOMQuad: false,
        DOMRect: false,
        DOMRectReadOnly: false,
        DOMStringList: false,
        DOMStringMap: false,
        DOMTokenList: false,
        DragEvent: false,
        DynamicsCompressorNode: false,
        Element: false,
        ErrorEvent: false,
        event: false,
        Event: false,
        EventSource: false,
        EventTarget: false,
        external: false,
        fetch: false,
        File: false,
        FileList: false,
        FileReader: false,
        find: false,
        focus: false,
        FocusEvent: false,
        FontFace: false,
        FontFaceSetLoadEvent: false,
        FormData: false,
        frameElement: false,
        frames: false,
        GainNode: false,
        Gamepad: false,
        GamepadButton: false,
        GamepadEvent: false,
        getComputedStyle: false,
        getSelection: false,
        HashChangeEvent: false,
        Headers: false,
        history: false,
        History: false,
        HTMLAllCollection: false,
        HTMLAnchorElement: false,
        HTMLAreaElement: false,
        HTMLAudioElement: false,
        HTMLBaseElement: false,
        HTMLBodyElement: false,
        HTMLBRElement: false,
        HTMLButtonElement: false,
        HTMLCanvasElement: false,
        HTMLCollection: false,
        HTMLContentElement: false,
        HTMLDataElement: false,
        HTMLDataListElement: false,
        HTMLDetailsElement: false,
        HTMLDialogElement: false,
        HTMLDirectoryElement: false,
        HTMLDivElement: false,
        HTMLDListElement: false,
        HTMLDocument: false,
        HTMLElement: false,
        HTMLEmbedElement: false,
        HTMLFieldSetElement: false,
        HTMLFontElement: false,
        HTMLFormControlsCollection: false,
        HTMLFormElement: false,
        HTMLFrameElement: false,
        HTMLFrameSetElement: false,
        HTMLHeadElement: false,
        HTMLHeadingElement: false,
        HTMLHRElement: false,
        HTMLHtmlElement: false,
        HTMLIFrameElement: false,
        HTMLImageElement: false,
        HTMLInputElement: false,
        HTMLLabelElement: false,
        HTMLLegendElement: false,
        HTMLLIElement: false,
        HTMLLinkElement: false,
        HTMLMapElement: false,
        HTMLMarqueeElement: false,
        HTMLMediaElement: false,
        HTMLMenuElement: false,
        HTMLMetaElement: false,
        HTMLMeterElement: false,
        HTMLModElement: false,
        HTMLObjectElement: false,
        HTMLOListElement: false,
        HTMLOptGroupElement: false,
        HTMLOptionElement: false,
        HTMLOptionsCollection: false,
        HTMLOutputElement: false,
        HTMLParagraphElement: false,
        HTMLParamElement: false,
        HTMLPictureElement: false,
        HTMLPreElement: false,
        HTMLProgressElement: false,
        HTMLQuoteElement: false,
        HTMLScriptElement: false,
        HTMLSelectElement: false,
        HTMLShadowElement: false,
        HTMLSlotElement: false,
        HTMLSourceElement: false,
        HTMLSpanElement: false,
        HTMLStyleElement: false,
        HTMLTableCaptionElement: false,
        HTMLTableCellElement: false,
        HTMLTableColElement: false,
        HTMLTableElement: false,
        HTMLTableRowElement: false,
        HTMLTableSectionElement: false,
        HTMLTemplateElement: false,
        HTMLTextAreaElement: false,
        HTMLTimeElement: false,
        HTMLTitleElement: false,
        HTMLTrackElement: false,
        HTMLUListElement: false,
        HTMLUnknownElement: false,
        HTMLVideoElement: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        IdleDeadline: false,
        IIRFilterNode: false,
        Image: false,
        ImageBitmap: false,
        ImageBitmapRenderingContext: false,
        ImageCapture: false,
        ImageData: false,
        indexedDB: false,
        innerHeight: false,
        innerWidth: false,
        InputEvent: false,
        IntersectionObserver: false,
        IntersectionObserverEntry: false,
        Intl: false,
        isSecureContext: false,
        KeyboardEvent: false,
        KeyframeEffect: false,
        KeyframeEffectReadOnly: false,
        length: false,
        localStorage: false,
        location: true,
        Location: false,
        locationbar: false,
        matchMedia: false,
        MediaDeviceInfo: false,
        MediaDevices: false,
        MediaElementAudioSourceNode: false,
        MediaEncryptedEvent: false,
        MediaError: false,
        MediaKeyMessageEvent: false,
        MediaKeySession: false,
        MediaKeyStatusMap: false,
        MediaKeySystemAccess: false,
        MediaList: false,
        MediaQueryList: false,
        MediaQueryListEvent: false,
        MediaRecorder: false,
        MediaSettingsRange: false,
        MediaSource: false,
        MediaStream: false,
        MediaStreamAudioDestinationNode: false,
        MediaStreamAudioSourceNode: false,
        MediaStreamEvent: false,
        MediaStreamTrack: false,
        MediaStreamTrackEvent: false,
        menubar: false,
        MessageChannel: false,
        MessageEvent: false,
        MessagePort: false,
        MIDIAccess: false,
        MIDIConnectionEvent: false,
        MIDIInput: false,
        MIDIInputMap: false,
        MIDIMessageEvent: false,
        MIDIOutput: false,
        MIDIOutputMap: false,
        MIDIPort: false,
        MimeType: false,
        MimeTypeArray: false,
        MouseEvent: false,
        moveBy: false,
        moveTo: false,
        MutationEvent: false,
        MutationObserver: false,
        MutationRecord: false,
        name: false,
        NamedNodeMap: false,
        NavigationPreloadManager: false,
        navigator: false,
        Navigator: false,
        NetworkInformation: false,
        Node: false,
        NodeFilter: false,
        NodeIterator: false,
        NodeList: false,
        Notification: false,
        OfflineAudioCompletionEvent: false,
        OfflineAudioContext: false,
        offscreenBuffering: false,
        OffscreenCanvas: true,
        onabort: true,
        onafterprint: true,
        onanimationend: true,
        onanimationiteration: true,
        onanimationstart: true,
        onappinstalled: true,
        onauxclick: true,
        onbeforeinstallprompt: true,
        onbeforeprint: true,
        onbeforeunload: true,
        onblur: true,
        oncancel: true,
        oncanplay: true,
        oncanplaythrough: true,
        onchange: true,
        onclick: true,
        onclose: true,
        oncontextmenu: true,
        oncuechange: true,
        ondblclick: true,
        ondevicemotion: true,
        ondeviceorientation: true,
        ondeviceorientationabsolute: true,
        ondrag: true,
        ondragend: true,
        ondragenter: true,
        ondragleave: true,
        ondragover: true,
        ondragstart: true,
        ondrop: true,
        ondurationchange: true,
        onemptied: true,
        onended: true,
        onerror: true,
        onfocus: true,
        ongotpointercapture: true,
        onhashchange: true,
        oninput: true,
        oninvalid: true,
        onkeydown: true,
        onkeypress: true,
        onkeyup: true,
        onlanguagechange: true,
        onload: true,
        onloadeddata: true,
        onloadedmetadata: true,
        onloadstart: true,
        onlostpointercapture: true,
        onmessage: true,
        onmessageerror: true,
        onmousedown: true,
        onmouseenter: true,
        onmouseleave: true,
        onmousemove: true,
        onmouseout: true,
        onmouseover: true,
        onmouseup: true,
        onmousewheel: true,
        onoffline: true,
        ononline: true,
        onpagehide: true,
        onpageshow: true,
        onpause: true,
        onplay: true,
        onplaying: true,
        onpointercancel: true,
        onpointerdown: true,
        onpointerenter: true,
        onpointerleave: true,
        onpointermove: true,
        onpointerout: true,
        onpointerover: true,
        onpointerup: true,
        onpopstate: true,
        onprogress: true,
        onratechange: true,
        onrejectionhandled: true,
        onreset: true,
        onresize: true,
        onscroll: true,
        onsearch: true,
        onseeked: true,
        onseeking: true,
        onselect: true,
        onstalled: true,
        onstorage: true,
        onsubmit: true,
        onsuspend: true,
        ontimeupdate: true,
        ontoggle: true,
        ontransitionend: true,
        onunhandledrejection: true,
        onunload: true,
        onvolumechange: true,
        onwaiting: true,
        onwheel: true,
        open: false,
        openDatabase: false,
        opener: false,
        Option: false,
        origin: false,
        OscillatorNode: false,
        outerHeight: false,
        outerWidth: false,
        PageTransitionEvent: false,
        pageXOffset: false,
        pageYOffset: false,
        PannerNode: false,
        parent: false,
        Path2D: false,
        PaymentAddress: false,
        PaymentRequest: false,
        PaymentRequestUpdateEvent: false,
        PaymentResponse: false,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceLongTaskTiming: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceNavigationTiming: false,
        PerformanceObserver: false,
        PerformanceObserverEntryList: false,
        PerformancePaintTiming: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        PeriodicWave: false,
        Permissions: false,
        PermissionStatus: false,
        personalbar: false,
        PhotoCapabilities: false,
        Plugin: false,
        PluginArray: false,
        PointerEvent: false,
        PopStateEvent: false,
        postMessage: false,
        Presentation: false,
        PresentationAvailability: false,
        PresentationConnection: false,
        PresentationConnectionAvailableEvent: false,
        PresentationConnectionCloseEvent: false,
        PresentationConnectionList: false,
        PresentationReceiver: false,
        PresentationRequest: false,
        print: false,
        ProcessingInstruction: false,
        ProgressEvent: false,
        PromiseRejectionEvent: false,
        prompt: false,
        PushManager: false,
        PushSubscription: false,
        PushSubscriptionOptions: false,
        queueMicrotask: false,
        RadioNodeList: false,
        Range: false,
        ReadableStream: false,
        registerProcessor: false,
        RemotePlayback: false,
        removeEventListener: false,
        Request: false,
        requestAnimationFrame: false,
        requestIdleCallback: false,
        resizeBy: false,
        ResizeObserver: false,
        ResizeObserverEntry: false,
        resizeTo: false,
        Response: false,
        RTCCertificate: false,
        RTCDataChannel: false,
        RTCDataChannelEvent: false,
        RTCDtlsTransport: false,
        RTCIceCandidate: false,
        RTCIceGatherer: false,
        RTCIceTransport: false,
        RTCPeerConnection: false,
        RTCPeerConnectionIceEvent: false,
        RTCRtpContributingSource: false,
        RTCRtpReceiver: false,
        RTCRtpSender: false,
        RTCSctpTransport: false,
        RTCSessionDescription: false,
        RTCStatsReport: false,
        RTCTrackEvent: false,
        screen: false,
        Screen: false,
        screenLeft: false,
        ScreenOrientation: false,
        screenTop: false,
        screenX: false,
        screenY: false,
        ScriptProcessorNode: false,
        scroll: false,
        scrollbars: false,
        scrollBy: false,
        scrollTo: false,
        scrollX: false,
        scrollY: false,
        SecurityPolicyViolationEvent: false,
        Selection: false,
        self: false,
        ServiceWorker: false,
        ServiceWorkerContainer: false,
        ServiceWorkerRegistration: false,
        sessionStorage: false,
        setInterval: false,
        setTimeout: false,
        ShadowRoot: false,
        SharedWorker: false,
        SourceBuffer: false,
        SourceBufferList: false,
        speechSynthesis: false,
        SpeechSynthesisEvent: false,
        SpeechSynthesisUtterance: false,
        StaticRange: false,
        status: false,
        statusbar: false,
        StereoPannerNode: false,
        stop: false,
        Storage: false,
        StorageEvent: false,
        StorageManager: false,
        styleMedia: false,
        StyleSheet: false,
        StyleSheetList: false,
        SubtleCrypto: false,
        SVGAElement: false,
        SVGAngle: false,
        SVGAnimatedAngle: false,
        SVGAnimatedBoolean: false,
        SVGAnimatedEnumeration: false,
        SVGAnimatedInteger: false,
        SVGAnimatedLength: false,
        SVGAnimatedLengthList: false,
        SVGAnimatedNumber: false,
        SVGAnimatedNumberList: false,
        SVGAnimatedPreserveAspectRatio: false,
        SVGAnimatedRect: false,
        SVGAnimatedString: false,
        SVGAnimatedTransformList: false,
        SVGAnimateElement: false,
        SVGAnimateMotionElement: false,
        SVGAnimateTransformElement: false,
        SVGAnimationElement: false,
        SVGCircleElement: false,
        SVGClipPathElement: false,
        SVGComponentTransferFunctionElement: false,
        SVGDefsElement: false,
        SVGDescElement: false,
        SVGDiscardElement: false,
        SVGElement: false,
        SVGEllipseElement: false,
        SVGFEBlendElement: false,
        SVGFEColorMatrixElement: false,
        SVGFEComponentTransferElement: false,
        SVGFECompositeElement: false,
        SVGFEConvolveMatrixElement: false,
        SVGFEDiffuseLightingElement: false,
        SVGFEDisplacementMapElement: false,
        SVGFEDistantLightElement: false,
        SVGFEDropShadowElement: false,
        SVGFEFloodElement: false,
        SVGFEFuncAElement: false,
        SVGFEFuncBElement: false,
        SVGFEFuncGElement: false,
        SVGFEFuncRElement: false,
        SVGFEGaussianBlurElement: false,
        SVGFEImageElement: false,
        SVGFEMergeElement: false,
        SVGFEMergeNodeElement: false,
        SVGFEMorphologyElement: false,
        SVGFEOffsetElement: false,
        SVGFEPointLightElement: false,
        SVGFESpecularLightingElement: false,
        SVGFESpotLightElement: false,
        SVGFETileElement: false,
        SVGFETurbulenceElement: false,
        SVGFilterElement: false,
        SVGForeignObjectElement: false,
        SVGGElement: false,
        SVGGeometryElement: false,
        SVGGradientElement: false,
        SVGGraphicsElement: false,
        SVGImageElement: false,
        SVGLength: false,
        SVGLengthList: false,
        SVGLinearGradientElement: false,
        SVGLineElement: false,
        SVGMarkerElement: false,
        SVGMaskElement: false,
        SVGMatrix: false,
        SVGMetadataElement: false,
        SVGMPathElement: false,
        SVGNumber: false,
        SVGNumberList: false,
        SVGPathElement: false,
        SVGPatternElement: false,
        SVGPoint: false,
        SVGPointList: false,
        SVGPolygonElement: false,
        SVGPolylineElement: false,
        SVGPreserveAspectRatio: false,
        SVGRadialGradientElement: false,
        SVGRect: false,
        SVGRectElement: false,
        SVGScriptElement: false,
        SVGSetElement: false,
        SVGStopElement: false,
        SVGStringList: false,
        SVGStyleElement: false,
        SVGSVGElement: false,
        SVGSwitchElement: false,
        SVGSymbolElement: false,
        SVGTextContentElement: false,
        SVGTextElement: false,
        SVGTextPathElement: false,
        SVGTextPositioningElement: false,
        SVGTitleElement: false,
        SVGTransform: false,
        SVGTransformList: false,
        SVGTSpanElement: false,
        SVGUnitTypes: false,
        SVGUseElement: false,
        SVGViewElement: false,
        TaskAttributionTiming: false,
        Text: false,
        TextDecoder: false,
        TextEncoder: false,
        TextEvent: false,
        TextMetrics: false,
        TextTrack: false,
        TextTrackCue: false,
        TextTrackCueList: false,
        TextTrackList: false,
        TimeRanges: false,
        toolbar: false,
        top: false,
        Touch: false,
        TouchEvent: false,
        TouchList: false,
        TrackEvent: false,
        TransitionEvent: false,
        TreeWalker: false,
        UIEvent: false,
        URL: false,
        URLSearchParams: false,
        ValidityState: false,
        visualViewport: false,
        VisualViewport: false,
        VTTCue: false,
        WaveShaperNode: false,
        WebAssembly: false,
        WebGL2RenderingContext: false,
        WebGLActiveInfo: false,
        WebGLBuffer: false,
        WebGLContextEvent: false,
        WebGLFramebuffer: false,
        WebGLProgram: false,
        WebGLQuery: false,
        WebGLRenderbuffer: false,
        WebGLRenderingContext: false,
        WebGLSampler: false,
        WebGLShader: false,
        WebGLShaderPrecisionFormat: false,
        WebGLSync: false,
        WebGLTexture: false,
        WebGLTransformFeedback: false,
        WebGLUniformLocation: false,
        WebGLVertexArrayObject: false,
        WebSocket: false,
        WheelEvent: false,
        window: false,
        Window: false,
        Worker: false,
        WritableStream: false,
        XMLDocument: false,
        XMLHttpRequest: false,
        XMLHttpRequestEventTarget: false,
        XMLHttpRequestUpload: false,
        XMLSerializer: false,
        XPathEvaluator: false,
        XPathExpression: false,
        XPathResult: false,
        XSLTProcessor: false
    },
    worker: {
        addEventListener: false,
        applicationCache: false,
        atob: false,
        Blob: false,
        BroadcastChannel: false,
        btoa: false,
        Cache: false,
        caches: false,
        clearInterval: false,
        clearTimeout: false,
        close: true,
        console: false,
        fetch: false,
        FileReaderSync: false,
        FormData: false,
        Headers: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        ImageData: false,
        importScripts: true,
        indexedDB: false,
        location: false,
        MessageChannel: false,
        MessagePort: false,
        name: false,
        navigator: false,
        Notification: false,
        onclose: true,
        onconnect: true,
        onerror: true,
        onlanguagechange: true,
        onmessage: true,
        onoffline: true,
        ononline: true,
        onrejectionhandled: true,
        onunhandledrejection: true,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        postMessage: true,
        Promise: false,
        queueMicrotask: false,
        removeEventListener: false,
        Request: false,
        Response: false,
        self: true,
        ServiceWorkerRegistration: false,
        setInterval: false,
        setTimeout: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false,
        WebSocket: false,
        Worker: false,
        WorkerGlobalScope: false,
        XMLHttpRequest: false
    },
    node: {
        __dirname: false,
        __filename: false,
        Buffer: false,
        clearImmediate: false,
        clearInterval: false,
        clearTimeout: false,
        console: false,
        exports: true,
        global: false,
        Intl: false,
        module: false,
        process: false,
        queueMicrotask: false,
        require: false,
        setImmediate: false,
        setInterval: false,
        setTimeout: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false
    },
    commonjs: {
        exports: true,
        global: false,
        module: false,
        require: false
    },
    amd: {
        define: false,
        require: false
    },
    mocha: {
        after: false,
        afterEach: false,
        before: false,
        beforeEach: false,
        context: false,
        describe: false,
        it: false,
        mocha: false,
        run: false,
        setup: false,
        specify: false,
        suite: false,
        suiteSetup: false,
        suiteTeardown: false,
        teardown: false,
        test: false,
        xcontext: false,
        xdescribe: false,
        xit: false,
        xspecify: false
    },
    jasmine: {
        afterAll: false,
        afterEach: false,
        beforeAll: false,
        beforeEach: false,
        describe: false,
        expect: false,
        fail: false,
        fdescribe: false,
        fit: false,
        it: false,
        jasmine: false,
        pending: false,
        runs: false,
        spyOn: false,
        spyOnProperty: false,
        waits: false,
        waitsFor: false,
        xdescribe: false,
        xit: false
    },
    jest: {
        afterAll: false,
        afterEach: false,
        beforeAll: false,
        beforeEach: false,
        describe: false,
        expect: false,
        fdescribe: false,
        fit: false,
        it: false,
        jest: false,
        pit: false,
        require: false,
        test: false,
        xdescribe: false,
        xit: false,
        xtest: false
    },
    qunit: {
        asyncTest: false,
        deepEqual: false,
        equal: false,
        expect: false,
        module: false,
        notDeepEqual: false,
        notEqual: false,
        notOk: false,
        notPropEqual: false,
        notStrictEqual: false,
        ok: false,
        propEqual: false,
        QUnit: false,
        raises: false,
        start: false,
        stop: false,
        strictEqual: false,
        test: false,
        throws: false
    },
    phantomjs: {
        console: true,
        exports: true,
        phantom: true,
        require: true,
        WebPage: true
    },
    couch: {
        emit: false,
        exports: false,
        getRow: false,
        log: false,
        module: false,
        provides: false,
        require: false,
        respond: false,
        send: false,
        start: false,
        sum: false
    },
    rhino: {
        defineClass: false,
        deserialize: false,
        gc: false,
        help: false,
        importClass: false,
        importPackage: false,
        java: false,
        load: false,
        loadClass: false,
        Packages: false,
        print: false,
        quit: false,
        readFile: false,
        readUrl: false,
        runCommand: false,
        seal: false,
        serialize: false,
        spawn: false,
        sync: false,
        toint32: false,
        version: false
    },
    nashorn: {
        __DIR__: false,
        __FILE__: false,
        __LINE__: false,
        com: false,
        edu: false,
        exit: false,
        java: false,
        Java: false,
        javafx: false,
        JavaImporter: false,
        javax: false,
        JSAdapter: false,
        load: false,
        loadWithNewGlobal: false,
        org: false,
        Packages: false,
        print: false,
        quit: false
    },
    wsh: {
        ActiveXObject: true,
        Enumerator: true,
        GetObject: true,
        ScriptEngine: true,
        ScriptEngineBuildVersion: true,
        ScriptEngineMajorVersion: true,
        ScriptEngineMinorVersion: true,
        VBArray: true,
        WScript: true,
        WSH: true,
        XDomainRequest: true
    },
    jquery: {
        $: false,
        jQuery: false
    },
    yui: {
        YAHOO: false,
        YAHOO_config: false,
        YUI: false,
        YUI_config: false
    },
    shelljs: {
        cat: false,
        cd: false,
        chmod: false,
        config: false,
        cp: false,
        dirs: false,
        echo: false,
        env: false,
        error: false,
        exec: false,
        exit: false,
        find: false,
        grep: false,
        ln: false,
        ls: false,
        mkdir: false,
        mv: false,
        popd: false,
        pushd: false,
        pwd: false,
        rm: false,
        sed: false,
        set: false,
        target: false,
        tempdir: false,
        test: false,
        touch: false,
        which: false
    },
    prototypejs: {
        $: false,
        $$: false,
        $A: false,
        $break: false,
        $continue: false,
        $F: false,
        $H: false,
        $R: false,
        $w: false,
        Abstract: false,
        Ajax: false,
        Autocompleter: false,
        Builder: false,
        Class: false,
        Control: false,
        Draggable: false,
        Draggables: false,
        Droppables: false,
        Effect: false,
        Element: false,
        Enumerable: false,
        Event: false,
        Field: false,
        Form: false,
        Hash: false,
        Insertion: false,
        ObjectRange: false,
        PeriodicalExecuter: false,
        Position: false,
        Prototype: false,
        Scriptaculous: false,
        Selector: false,
        Sortable: false,
        SortableObserver: false,
        Sound: false,
        Template: false,
        Toggle: false,
        Try: false
    },
    meteor: {
        _: false,
        $: false,
        Accounts: false,
        AccountsClient: false,
        AccountsCommon: false,
        AccountsServer: false,
        App: false,
        Assets: false,
        Blaze: false,
        check: false,
        Cordova: false,
        DDP: false,
        DDPRateLimiter: false,
        DDPServer: false,
        Deps: false,
        EJSON: false,
        Email: false,
        HTTP: false,
        Log: false,
        Match: false,
        Meteor: false,
        Mongo: false,
        MongoInternals: false,
        Npm: false,
        Package: false,
        Plugin: false,
        process: false,
        Random: false,
        ReactiveDict: false,
        ReactiveVar: false,
        Router: false,
        ServiceConfiguration: false,
        Session: false,
        share: false,
        Spacebars: false,
        Template: false,
        Tinytest: false,
        Tracker: false,
        UI: false,
        Utils: false,
        WebApp: false,
        WebAppInternals: false
    },
    mongo: {
        _isWindows: false,
        _rand: false,
        BulkWriteResult: false,
        cat: false,
        cd: false,
        connect: false,
        db: false,
        getHostName: false,
        getMemInfo: false,
        hostname: false,
        ISODate: false,
        listFiles: false,
        load: false,
        ls: false,
        md5sumFile: false,
        mkdir: false,
        Mongo: false,
        NumberInt: false,
        NumberLong: false,
        ObjectId: false,
        PlanCache: false,
        print: false,
        printjson: false,
        pwd: false,
        quit: false,
        removeFile: false,
        rs: false,
        sh: false,
        UUID: false,
        version: false,
        WriteResult: false
    },
    applescript: {
        $: false,
        Application: false,
        Automation: false,
        console: false,
        delay: false,
        Library: false,
        ObjC: false,
        ObjectSpecifier: false,
        Path: false,
        Progress: false,
        Ref: false
    },
    serviceworker: {
        addEventListener: false,
        applicationCache: false,
        atob: false,
        Blob: false,
        BroadcastChannel: false,
        btoa: false,
        Cache: false,
        caches: false,
        CacheStorage: false,
        clearInterval: false,
        clearTimeout: false,
        Client: false,
        clients: false,
        Clients: false,
        close: true,
        console: false,
        ExtendableEvent: false,
        ExtendableMessageEvent: false,
        fetch: false,
        FetchEvent: false,
        FileReaderSync: false,
        FormData: false,
        Headers: false,
        IDBCursor: false,
        IDBCursorWithValue: false,
        IDBDatabase: false,
        IDBFactory: false,
        IDBIndex: false,
        IDBKeyRange: false,
        IDBObjectStore: false,
        IDBOpenDBRequest: false,
        IDBRequest: false,
        IDBTransaction: false,
        IDBVersionChangeEvent: false,
        ImageData: false,
        importScripts: false,
        indexedDB: false,
        location: false,
        MessageChannel: false,
        MessagePort: false,
        name: false,
        navigator: false,
        Notification: false,
        onclose: true,
        onconnect: true,
        onerror: true,
        onfetch: true,
        oninstall: true,
        onlanguagechange: true,
        onmessage: true,
        onmessageerror: true,
        onnotificationclick: true,
        onnotificationclose: true,
        onoffline: true,
        ononline: true,
        onpush: true,
        onpushsubscriptionchange: true,
        onrejectionhandled: true,
        onsync: true,
        onunhandledrejection: true,
        performance: false,
        Performance: false,
        PerformanceEntry: false,
        PerformanceMark: false,
        PerformanceMeasure: false,
        PerformanceNavigation: false,
        PerformanceResourceTiming: false,
        PerformanceTiming: false,
        postMessage: true,
        Promise: false,
        queueMicrotask: false,
        registration: false,
        removeEventListener: false,
        Request: false,
        Response: false,
        self: false,
        ServiceWorker: false,
        ServiceWorkerContainer: false,
        ServiceWorkerGlobalScope: false,
        ServiceWorkerMessageEvent: false,
        ServiceWorkerRegistration: false,
        setInterval: false,
        setTimeout: false,
        skipWaiting: false,
        TextDecoder: false,
        TextEncoder: false,
        URL: false,
        URLSearchParams: false,
        WebSocket: false,
        WindowClient: false,
        Worker: false,
        WorkerGlobalScope: false,
        XMLHttpRequest: false
    },
    atomtest: {
        advanceClock: false,
        fakeClearInterval: false,
        fakeClearTimeout: false,
        fakeSetInterval: false,
        fakeSetTimeout: false,
        resetTimeouts: false,
        waitsForPromise: false
    },
    embertest: {
        andThen: false,
        click: false,
        currentPath: false,
        currentRouteName: false,
        currentURL: false,
        fillIn: false,
        find: false,
        findAll: false,
        findWithAssert: false,
        keyEvent: false,
        pauseTest: false,
        resumeTest: false,
        triggerEvent: false,
        visit: false,
        wait: false
    },
    protractor: {
        $: false,
        $$: false,
        browser: false,
        by: false,
        By: false,
        DartObject: false,
        element: false,
        protractor: false
    },
    "shared-node-browser": {
        clearInterval: false,
        clearTimeout: false,
        console: false,
        setInterval: false,
        setTimeout: false,
        URL: false,
        URLSearchParams: false
    },
    webextensions: {
        browser: false,
        chrome: false,
        opr: false
    },
    greasemonkey: {
        cloneInto: false,
        createObjectIn: false,
        exportFunction: false,
        GM: false,
        GM_addStyle: false,
        GM_deleteValue: false,
        GM_getResourceText: false,
        GM_getResourceURL: false,
        GM_getValue: false,
        GM_info: false,
        GM_listValues: false,
        GM_log: false,
        GM_openInTab: false,
        GM_registerMenuCommand: false,
        GM_setClipboard: false,
        GM_setValue: false,
        GM_xmlhttpRequest: false,
        unsafeWindow: false
    },
    devtools: {
        $: false,
        $_: false,
        $$: false,
        $0: false,
        $1: false,
        $2: false,
        $3: false,
        $4: false,
        $x: false,
        chrome: false,
        clear: false,
        copy: false,
        debug: false,
        dir: false,
        dirxml: false,
        getEventListeners: false,
        inspect: false,
        keys: false,
        monitor: false,
        monitorEvents: false,
        profile: false,
        profileEnd: false,
        queryObjects: false,
        table: false,
        undebug: false,
        unmonitor: false,
        unmonitorEvents: false,
        values: false
    }
};
const mod7 = {
    default: e6
};
var e7 = {};
(function(t, r122) {
    r122(e7);
})(0, function(e1) {
    e1.get = void 0;
    e1.put = void 0;
    e1.pop = void 0;
    class SetArray {
        constructor(){
            this._indexes = {
                __proto__: null
            };
            this.array = [];
        }
    }
    (()=>{
        e1.get = (e2, t1109)=>e2._indexes[t1109]
        ;
        e1.put = (t2108, r215)=>{
            const o114 = e1.get(t2108, r215);
            if (void 0 !== o114) return o114;
            const { array: n1107 , _indexes: s115  } = t2108;
            return s115[r215] = n1107.push(r215) - 1;
        };
        e1.pop = (e3101)=>{
            const { array: t375 , _indexes: r314  } = e3101;
            if (0 === t375.length) return;
            const o213 = t375.pop();
            r314[o213] = void 0;
        };
    })();
    e1.SetArray = SetArray;
    Object.defineProperty(e1, "__esModule", {
        value: true
    });
});
const t10 = e7.get, r10 = e7.put, o6 = e7.pop, n11 = e7.SetArray, s7 = e7.__esModule;
const mod8 = {
    SetArray: n11,
    __esModule: s7,
    default: e7,
    get: t10,
    pop: o6,
    put: r10
};
var t11 = {}, e8 = false;
function dew$22() {
    if (e8) return t11;
    e8 = true;
    t11.byteLength = byteLength;
    t11.toByteArray = toByteArray;
    t11.fromByteArray = fromByteArray;
    var r123 = [];
    var n1108 = [];
    var f112 = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var i116 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(var o115 = 0, u114 = i116.length; o115 < u114; ++o115){
        r123[o115] = i116[o115];
        n1108[i116.charCodeAt(o115)] = o115;
    }
    n1108["-".charCodeAt(0)] = 62;
    n1108["_".charCodeAt(0)] = 63;
    function getLens(t1110) {
        var e1 = t1110.length;
        if (e1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var r216 = t1110.indexOf("=");
        -1 === r216 && (r216 = e1);
        var n2103 = r216 === e1 ? 0 : 4 - r216 % 4;
        return [
            r216,
            n2103
        ];
    }
    function byteLength(t2109) {
        var e2 = getLens(t2109);
        var r315 = e2[0];
        var n313 = e2[1];
        return 3 * (r315 + n313) / 4 - n313;
    }
    function _byteLength(t, e3102, r414) {
        return 3 * (e3102 + r414) / 4 - r414;
    }
    function toByteArray(t376) {
        var e413;
        var r512 = getLens(t376);
        var i213 = r512[0];
        var o214 = r512[1];
        var u212 = new f112(_byteLength(t376, i213, o214));
        var s116 = 0;
        var a116 = o214 > 0 ? i213 - 4 : i213;
        var h36;
        for(h36 = 0; h36 < a116; h36 += 4){
            e413 = n1108[t376.charCodeAt(h36)] << 18 | n1108[t376.charCodeAt(h36 + 1)] << 12 | n1108[t376.charCodeAt(h36 + 2)] << 6 | n1108[t376.charCodeAt(h36 + 3)];
            u212[s116++] = e413 >> 16 & 255;
            u212[s116++] = e413 >> 8 & 255;
            u212[s116++] = 255 & e413;
        }
        if (2 === o214) {
            e413 = n1108[t376.charCodeAt(h36)] << 2 | n1108[t376.charCodeAt(h36 + 1)] >> 4;
            u212[s116++] = 255 & e413;
        }
        if (1 === o214) {
            e413 = n1108[t376.charCodeAt(h36)] << 10 | n1108[t376.charCodeAt(h36 + 1)] << 4 | n1108[t376.charCodeAt(h36 + 2)] >> 2;
            u212[s116++] = e413 >> 8 & 255;
            u212[s116++] = 255 & e413;
        }
        return u212;
    }
    function tripletToBase64(t413) {
        return r123[t413 >> 18 & 63] + r123[t413 >> 12 & 63] + r123[t413 >> 6 & 63] + r123[63 & t413];
    }
    function encodeChunk(t512, e512, r612) {
        var n412;
        var f211 = [];
        for(var i311 = e512; i311 < r612; i311 += 3){
            n412 = (t512[i311] << 16 & 16711680) + (t512[i311 + 1] << 8 & 65280) + (255 & t512[i311 + 2]);
            f211.push(tripletToBase64(n412));
        }
        return f211.join("");
    }
    function fromByteArray(t612) {
        var e610;
        var n511 = t612.length;
        var f310 = n511 % 3;
        var i410 = [];
        var o313 = 16383;
        for(var u310 = 0, s213 = n511 - f310; u310 < s213; u310 += o313)i410.push(encodeChunk(t612, u310, u310 + o313 > s213 ? s213 : u310 + o313));
        if (1 === f310) {
            e610 = t612[n511 - 1];
            i410.push(r123[e610 >> 2] + r123[e610 << 4 & 63] + "==");
        } else if (2 === f310) {
            e610 = (t612[n511 - 2] << 8) + t612[n511 - 1];
            i410.push(r123[e610 >> 10] + r123[e610 >> 4 & 63] + r123[e610 << 2 & 63] + "=");
        }
        return i410.join("");
    }
    return t11;
}
var r11 = {}, n12 = false;
function dew$13() {
    if (n12) return r11;
    n12 = true;
    r11.read = function(t712, e710, r72, n611, f49) {
        var i57, o411;
        var u410 = 8 * f49 - n611 - 1;
        var s312 = (1 << u410) - 1;
        var a211 = s312 >> 1;
        var h37 = -7;
        var c50 = r72 ? f49 - 1 : 0;
        var l52 = r72 ? -1 : 1;
        var p44 = t712[e710 + c50];
        c50 += l52;
        i57 = p44 & (1 << -h37) - 1;
        p44 >>= -h37;
        h37 += u410;
        for(; h37 > 0; i57 = 256 * i57 + t712[e710 + c50], c50 += l52, h37 -= 8);
        o411 = i57 & (1 << -h37) - 1;
        i57 >>= -h37;
        h37 += n611;
        for(; h37 > 0; o411 = 256 * o411 + t712[e710 + c50], c50 += l52, h37 -= 8);
        if (0 === i57) i57 = 1 - a211;
        else {
            if (i57 === s312) return o411 ? NaN : Infinity * (p44 ? -1 : 1);
            o411 += Math.pow(2, n611);
            i57 -= a211;
        }
        return (p44 ? -1 : 1) * o411 * Math.pow(2, i57 - n611);
    };
    r11.write = function(t811, e810, r81, n711, f51, i6) {
        var o510, u52, s410;
        var a312 = 8 * i6 - f51 - 1;
        var h38 = (1 << a312) - 1;
        var c51 = h38 >> 1;
        var l53 = 23 === f51 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var p45 = n711 ? 0 : i6 - 1;
        var B20 = n711 ? 1 : -1;
        var y29 = e810 < 0 || 0 === e810 && 1 / e810 < 0 ? 1 : 0;
        e810 = Math.abs(e810);
        if (isNaN(e810) || Infinity === e810) {
            u52 = isNaN(e810) ? 1 : 0;
            o510 = h38;
        } else {
            o510 = Math.floor(Math.log(e810) / Math.LN2);
            if (e810 * (s410 = Math.pow(2, -o510)) < 1) {
                o510--;
                s410 *= 2;
            }
            e810 += o510 + c51 >= 1 ? l53 / s410 : l53 * Math.pow(2, 1 - c51);
            if (e810 * s410 >= 2) {
                o510++;
                s410 /= 2;
            }
            if (o510 + c51 >= h38) {
                u52 = 0;
                o510 = h38;
            } else if (o510 + c51 >= 1) {
                u52 = (e810 * s410 - 1) * Math.pow(2, f51);
                o510 += c51;
            } else {
                u52 = e810 * Math.pow(2, c51 - 1) * Math.pow(2, f51);
                o510 = 0;
            }
        }
        for(; f51 >= 8; t811[r81 + p45] = 255 & u52, p45 += B20, u52 /= 256, f51 -= 8);
        o510 = o510 << f51 | u52;
        a312 += f51;
        for(; a312 > 0; t811[r81 + p45] = 255 & o510, p45 += B20, o510 /= 256, a312 -= 8);
        t811[r81 + p45 - B20] |= 128 * y29;
    };
    return r11;
}
var f6 = {}, i6 = false;
function dew10() {
    if (i6) return f6;
    i6 = true;
    const t910 = dew$22();
    const e9 = dew$13();
    const r91 = "function" === typeof Symbol && "function" === typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
    f6.Buffer = Buffer1;
    f6.SlowBuffer = SlowBuffer;
    f6.INSPECT_MAX_BYTES = 50;
    const n810 = 2147483647;
    f6.kMaxLength = n810;
    Buffer1.TYPED_ARRAY_SUPPORT = typedArraySupport();
    Buffer1.TYPED_ARRAY_SUPPORT || "undefined" === typeof console || "function" !== typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function typedArraySupport() {
        try {
            const t1010 = new Uint8Array(1);
            const e10 = {
                foo: function() {
                    return 42;
                }
            };
            Object.setPrototypeOf(e10, Uint8Array.prototype);
            Object.setPrototypeOf(t1010, e10);
            return 42 === t1010.foo();
        } catch (t) {
            return false;
        }
    }
    Object.defineProperty(Buffer1.prototype, "parent", {
        enumerable: true,
        get: function() {
            if (Buffer1.isBuffer(this)) return this.buffer;
        }
    });
    Object.defineProperty(Buffer1.prototype, "offset", {
        enumerable: true,
        get: function() {
            if (Buffer1.isBuffer(this)) return this.byteOffset;
        }
    });
    function createBuffer(t1111) {
        if (t1111 > 2147483647) throw new RangeError('The value "' + t1111 + '" is invalid for option "size"');
        const e11 = new Uint8Array(t1111);
        Object.setPrototypeOf(e11, Buffer1.prototype);
        return e11;
    }
    function Buffer1(t12, e12, r101) {
        if ("number" === typeof t12) {
            if ("string" === typeof e12) throw new TypeError('The "string" argument must be of type string. Received type number');
            return allocUnsafe(t12);
        }
        return from(t12, e12, r101);
    }
    Buffer1.poolSize = 8192;
    function from(t13, e13, r1110) {
        if ("string" === typeof t13) return fromString(t13, e13);
        if (ArrayBuffer.isView(t13)) return fromArrayView(t13);
        if (null == t13) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t13);
        if (isInstance(t13, ArrayBuffer) || t13 && isInstance(t13.buffer, ArrayBuffer)) return fromArrayBuffer(t13, e13, r1110);
        if ("undefined" !== typeof SharedArrayBuffer && (isInstance(t13, SharedArrayBuffer) || t13 && isInstance(t13.buffer, SharedArrayBuffer))) return fromArrayBuffer(t13, e13, r1110);
        if ("number" === typeof t13) throw new TypeError('The "value" argument must not be of type number. Received type number');
        const n910 = t13.valueOf && t13.valueOf();
        if (null != n910 && n910 !== t13) return Buffer1.from(n910, e13, r1110);
        const f61 = fromObject(t13);
        if (f61) return f61;
        if ("undefined" !== typeof Symbol && null != Symbol.toPrimitive && "function" === typeof t13[Symbol.toPrimitive]) return Buffer1.from(t13[Symbol.toPrimitive]("string"), e13, r1110);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t13);
    }
    Buffer1.from = function(t14, e14, r12) {
        return from(t14, e14, r12);
    };
    Object.setPrototypeOf(Buffer1.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer1, Uint8Array);
    function assertSize(t15) {
        if ("number" !== typeof t15) throw new TypeError('"size" argument must be of type number');
        if (t15 < 0) throw new RangeError('The value "' + t15 + '" is invalid for option "size"');
    }
    function alloc(t16, e15, r13) {
        assertSize(t16);
        return t16 <= 0 ? createBuffer(t16) : void 0 !== e15 ? "string" === typeof r13 ? createBuffer(t16).fill(e15, r13) : createBuffer(t16).fill(e15) : createBuffer(t16);
    }
    Buffer1.alloc = function(t17, e16, r14) {
        return alloc(t17, e16, r14);
    };
    function allocUnsafe(t18) {
        assertSize(t18);
        return createBuffer(t18 < 0 ? 0 : 0 | checked(t18));
    }
    Buffer1.allocUnsafe = function(t19) {
        return allocUnsafe(t19);
    };
    Buffer1.allocUnsafeSlow = function(t20) {
        return allocUnsafe(t20);
    };
    function fromString(t21, e17) {
        "string" === typeof e17 && "" !== e17 || (e17 = "utf8");
        if (!Buffer1.isEncoding(e17)) throw new TypeError("Unknown encoding: " + e17);
        const r15 = 0 | byteLength(t21, e17);
        let n1010 = createBuffer(r15);
        const f7 = n1010.write(t21, e17);
        f7 !== r15 && (n1010 = n1010.slice(0, f7));
        return n1010;
    }
    function fromArrayLike(t22) {
        const e18 = t22.length < 0 ? 0 : 0 | checked(t22.length);
        const r16 = createBuffer(e18);
        for(let n1110 = 0; n1110 < e18; n1110 += 1)r16[n1110] = 255 & t22[n1110];
        return r16;
    }
    function fromArrayView(t23) {
        if (isInstance(t23, Uint8Array)) {
            const e19 = new Uint8Array(t23);
            return fromArrayBuffer(e19.buffer, e19.byteOffset, e19.byteLength);
        }
        return fromArrayLike(t23);
    }
    function fromArrayBuffer(t24, e20, r17) {
        if (e20 < 0 || t24.byteLength < e20) throw new RangeError('"offset" is outside of buffer bounds');
        if (t24.byteLength < e20 + (r17 || 0)) throw new RangeError('"length" is outside of buffer bounds');
        let n1210;
        n1210 = void 0 === e20 && void 0 === r17 ? new Uint8Array(t24) : void 0 === r17 ? new Uint8Array(t24, e20) : new Uint8Array(t24, e20, r17);
        Object.setPrototypeOf(n1210, Buffer1.prototype);
        return n1210;
    }
    function fromObject(t25) {
        if (Buffer1.isBuffer(t25)) {
            const e21 = 0 | checked(t25.length);
            const r18 = createBuffer(e21);
            if (0 === r18.length) return r18;
            t25.copy(r18, 0, 0, e21);
            return r18;
        }
        return void 0 !== t25.length ? "number" !== typeof t25.length || numberIsNaN(t25.length) ? createBuffer(0) : fromArrayLike(t25) : "Buffer" === t25.type && Array.isArray(t25.data) ? fromArrayLike(t25.data) : void 0;
    }
    function checked(t26) {
        if (t26 >= 2147483647) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647..toString(16) + " bytes");
        return 0 | t26;
    }
    function SlowBuffer(t27) {
        +t27 != t27 && (t27 = 0);
        return Buffer1.alloc(+t27);
    }
    Buffer1.isBuffer = function isBuffer(t28) {
        return null != t28 && true === t28._isBuffer && t28 !== Buffer1.prototype;
    };
    Buffer1.compare = function compare(t29, e22) {
        isInstance(t29, Uint8Array) && (t29 = Buffer1.from(t29, t29.offset, t29.byteLength));
        isInstance(e22, Uint8Array) && (e22 = Buffer1.from(e22, e22.offset, e22.byteLength));
        if (!Buffer1.isBuffer(t29) || !Buffer1.isBuffer(e22)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (t29 === e22) return 0;
        let r19 = t29.length;
        let n13 = e22.length;
        for(let f8 = 0, i7 = Math.min(r19, n13); f8 < i7; ++f8)if (t29[f8] !== e22[f8]) {
            r19 = t29[f8];
            n13 = e22[f8];
            break;
        }
        return r19 < n13 ? -1 : n13 < r19 ? 1 : 0;
    };
    Buffer1.isEncoding = function isEncoding(t30) {
        switch(String(t30).toLowerCase()){
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return true;
            default:
                return false;
        }
    };
    Buffer1.concat = function concat(t31, e23) {
        if (!Array.isArray(t31)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === t31.length) return Buffer1.alloc(0);
        let r20;
        if (void 0 === e23) {
            e23 = 0;
            for(r20 = 0; r20 < t31.length; ++r20)e23 += t31[r20].length;
        }
        const n14 = Buffer1.allocUnsafe(e23);
        let f9 = 0;
        for(r20 = 0; r20 < t31.length; ++r20){
            let e24 = t31[r20];
            if (isInstance(e24, Uint8Array)) if (f9 + e24.length > n14.length) {
                Buffer1.isBuffer(e24) || (e24 = Buffer1.from(e24));
                e24.copy(n14, f9);
            } else Uint8Array.prototype.set.call(n14, e24, f9);
            else {
                if (!Buffer1.isBuffer(e24)) throw new TypeError('"list" argument must be an Array of Buffers');
                e24.copy(n14, f9);
            }
            f9 += e24.length;
        }
        return n14;
    };
    function byteLength(t32, e25) {
        if (Buffer1.isBuffer(t32)) return t32.length;
        if (ArrayBuffer.isView(t32) || isInstance(t32, ArrayBuffer)) return t32.byteLength;
        if ("string" !== typeof t32) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t32);
        const r21 = t32.length;
        const n15 = arguments.length > 2 && true === arguments[2];
        if (!n15 && 0 === r21) return 0;
        let f10 = false;
        for(;;)switch(e25){
            case "ascii":
            case "latin1":
            case "binary":
                return r21;
            case "utf8":
            case "utf-8":
                return utf8ToBytes(t32).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return 2 * r21;
            case "hex":
                return r21 >>> 1;
            case "base64":
                return base64ToBytes(t32).length;
            default:
                if (f10) return n15 ? -1 : utf8ToBytes(t32).length;
                e25 = ("" + e25).toLowerCase();
                f10 = true;
        }
    }
    Buffer1.byteLength = byteLength;
    function slowToString(t33, e26, r22) {
        let n16 = false;
        (void 0 === e26 || e26 < 0) && (e26 = 0);
        if (e26 > this.length) return "";
        (void 0 === r22 || r22 > this.length) && (r22 = this.length);
        if (r22 <= 0) return "";
        r22 >>>= 0;
        e26 >>>= 0;
        if (r22 <= e26) return "";
        t33 || (t33 = "utf8");
        while(true)switch(t33){
            case "hex":
                return hexSlice(this, e26, r22);
            case "utf8":
            case "utf-8":
                return utf8Slice(this, e26, r22);
            case "ascii":
                return asciiSlice(this, e26, r22);
            case "latin1":
            case "binary":
                return latin1Slice(this, e26, r22);
            case "base64":
                return base64Slice(this, e26, r22);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return utf16leSlice(this, e26, r22);
            default:
                if (n16) throw new TypeError("Unknown encoding: " + t33);
                t33 = (t33 + "").toLowerCase();
                n16 = true;
        }
    }
    Buffer1.prototype._isBuffer = true;
    function swap(t34, e27, r23) {
        const n17 = t34[e27];
        t34[e27] = t34[r23];
        t34[r23] = n17;
    }
    Buffer1.prototype.swap16 = function swap16() {
        const t35 = this.length;
        if (t35 % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for(let e28 = 0; e28 < t35; e28 += 2)swap(this, e28, e28 + 1);
        return this;
    };
    Buffer1.prototype.swap32 = function swap32() {
        const t36 = this.length;
        if (t36 % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for(let e29 = 0; e29 < t36; e29 += 4){
            swap(this, e29, e29 + 3);
            swap(this, e29 + 1, e29 + 2);
        }
        return this;
    };
    Buffer1.prototype.swap64 = function swap64() {
        const t37 = this.length;
        if (t37 % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for(let e30 = 0; e30 < t37; e30 += 8){
            swap(this, e30, e30 + 7);
            swap(this, e30 + 1, e30 + 6);
            swap(this, e30 + 2, e30 + 5);
            swap(this, e30 + 3, e30 + 4);
        }
        return this;
    };
    Buffer1.prototype.toString = function toString() {
        const t38 = this.length;
        return 0 === t38 ? "" : 0 === arguments.length ? utf8Slice(this, 0, t38) : slowToString.apply(this, arguments);
    };
    Buffer1.prototype.toLocaleString = Buffer1.prototype.toString;
    Buffer1.prototype.equals = function equals(t39) {
        if (!Buffer1.isBuffer(t39)) throw new TypeError("Argument must be a Buffer");
        return this === t39 || 0 === Buffer1.compare(this, t39);
    };
    Buffer1.prototype.inspect = function inspect() {
        let t40 = "";
        const e31 = f6.INSPECT_MAX_BYTES;
        t40 = this.toString("hex", 0, e31).replace(/(.{2})/g, "$1 ").trim();
        this.length > e31 && (t40 += " ... ");
        return "<Buffer " + t40 + ">";
    };
    r91 && (Buffer1.prototype[r91] = Buffer1.prototype.inspect);
    Buffer1.prototype.compare = function compare(t42, e32, r24, n18, f11) {
        isInstance(t42, Uint8Array) && (t42 = Buffer1.from(t42, t42.offset, t42.byteLength));
        if (!Buffer1.isBuffer(t42)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t42);
        void 0 === e32 && (e32 = 0);
        void 0 === r24 && (r24 = t42 ? t42.length : 0);
        void 0 === n18 && (n18 = 0);
        void 0 === f11 && (f11 = this.length);
        if (e32 < 0 || r24 > t42.length || n18 < 0 || f11 > this.length) throw new RangeError("out of range index");
        if (n18 >= f11 && e32 >= r24) return 0;
        if (n18 >= f11) return -1;
        if (e32 >= r24) return 1;
        e32 >>>= 0;
        r24 >>>= 0;
        n18 >>>= 0;
        f11 >>>= 0;
        if (this === t42) return 0;
        let i8 = f11 - n18;
        let o7 = r24 - e32;
        const u7 = Math.min(i8, o7);
        const s61 = this.slice(n18, f11);
        const a54 = t42.slice(e32, r24);
        for(let t41 = 0; t41 < u7; ++t41)if (s61[t41] !== a54[t41]) {
            i8 = s61[t41];
            o7 = a54[t41];
            break;
        }
        return i8 < o7 ? -1 : o7 < i8 ? 1 : 0;
    };
    function bidirectionalIndexOf(t43, e33, r25, n19, f12) {
        if (0 === t43.length) return -1;
        if ("string" === typeof r25) {
            n19 = r25;
            r25 = 0;
        } else r25 > 2147483647 ? r25 = 2147483647 : r25 < -2147483648 && (r25 = -2147483648);
        r25 = +r25;
        numberIsNaN(r25) && (r25 = f12 ? 0 : t43.length - 1);
        r25 < 0 && (r25 = t43.length + r25);
        if (r25 >= t43.length) {
            if (f12) return -1;
            r25 = t43.length - 1;
        } else if (r25 < 0) {
            if (!f12) return -1;
            r25 = 0;
        }
        "string" === typeof e33 && (e33 = Buffer1.from(e33, n19));
        if (Buffer1.isBuffer(e33)) return 0 === e33.length ? -1 : arrayIndexOf(t43, e33, r25, n19, f12);
        if ("number" === typeof e33) {
            e33 &= 255;
            return "function" === typeof Uint8Array.prototype.indexOf ? f12 ? Uint8Array.prototype.indexOf.call(t43, e33, r25) : Uint8Array.prototype.lastIndexOf.call(t43, e33, r25) : arrayIndexOf(t43, [
                e33
            ], r25, n19, f12);
        }
        throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(t44, e34, r26, n20, f13) {
        let i9 = 1;
        let o8 = t44.length;
        let u8 = e34.length;
        if (void 0 !== n20) {
            n20 = String(n20).toLowerCase();
            if ("ucs2" === n20 || "ucs-2" === n20 || "utf16le" === n20 || "utf-16le" === n20) {
                if (t44.length < 2 || e34.length < 2) return -1;
                i9 = 2;
                o8 /= 2;
                u8 /= 2;
                r26 /= 2;
            }
        }
        function read(t45, e35) {
            return 1 === i9 ? t45[e35] : t45.readUInt16BE(e35 * i9);
        }
        let s71;
        if (f13) {
            let n21 = -1;
            for(s71 = r26; s71 < o8; s71++)if (read(t44, s71) === read(e34, -1 === n21 ? 0 : s71 - n21)) {
                -1 === n21 && (n21 = s71);
                if (s71 - n21 + 1 === u8) return n21 * i9;
            } else {
                -1 !== n21 && (s71 -= s71 - n21);
                n21 = -1;
            }
        } else {
            r26 + u8 > o8 && (r26 = o8 - u8);
            for(s71 = r26; s71 >= 0; s71--){
                let r27 = true;
                for(let n22 = 0; n22 < u8; n22++)if (read(t44, s71 + n22) !== read(e34, n22)) {
                    r27 = false;
                    break;
                }
                if (r27) return s71;
            }
        }
        return -1;
    }
    Buffer1.prototype.includes = function includes(t46, e36, r28) {
        return -1 !== this.indexOf(t46, e36, r28);
    };
    Buffer1.prototype.indexOf = function indexOf(t47, e37, r29) {
        return bidirectionalIndexOf(this, t47, e37, r29, true);
    };
    Buffer1.prototype.lastIndexOf = function lastIndexOf(t48, e38, r30) {
        return bidirectionalIndexOf(this, t48, e38, r30, false);
    };
    function hexWrite(t49, e39, r31, n23) {
        r31 = Number(r31) || 0;
        const f14 = t49.length - r31;
        if (n23) {
            n23 = Number(n23);
            n23 > f14 && (n23 = f14);
        } else n23 = f14;
        const i10 = e39.length;
        n23 > i10 / 2 && (n23 = i10 / 2);
        let o9;
        for(o9 = 0; o9 < n23; ++o9){
            const n24 = parseInt(e39.substr(2 * o9, 2), 16);
            if (numberIsNaN(n24)) return o9;
            t49[r31 + o9] = n24;
        }
        return o9;
    }
    function utf8Write(t50, e40, r32, n25) {
        return blitBuffer(utf8ToBytes(e40, t50.length - r32), t50, r32, n25);
    }
    function asciiWrite(t51, e41, r33, n26) {
        return blitBuffer(asciiToBytes(e41), t51, r33, n26);
    }
    function base64Write(t52, e42, r34, n27) {
        return blitBuffer(base64ToBytes(e42), t52, r34, n27);
    }
    function ucs2Write(t53, e43, r35, n28) {
        return blitBuffer(utf16leToBytes(e43, t53.length - r35), t53, r35, n28);
    }
    Buffer1.prototype.write = function write(t54, e44, r36, n29) {
        if (void 0 === e44) {
            n29 = "utf8";
            r36 = this.length;
            e44 = 0;
        } else if (void 0 === r36 && "string" === typeof e44) {
            n29 = e44;
            r36 = this.length;
            e44 = 0;
        } else {
            if (!isFinite(e44)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            e44 >>>= 0;
            if (isFinite(r36)) {
                r36 >>>= 0;
                void 0 === n29 && (n29 = "utf8");
            } else {
                n29 = r36;
                r36 = void 0;
            }
        }
        const f15 = this.length - e44;
        (void 0 === r36 || r36 > f15) && (r36 = f15);
        if (t54.length > 0 && (r36 < 0 || e44 < 0) || e44 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        n29 || (n29 = "utf8");
        let i11 = false;
        for(;;)switch(n29){
            case "hex":
                return hexWrite(this, t54, e44, r36);
            case "utf8":
            case "utf-8":
                return utf8Write(this, t54, e44, r36);
            case "ascii":
            case "latin1":
            case "binary":
                return asciiWrite(this, t54, e44, r36);
            case "base64":
                return base64Write(this, t54, e44, r36);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return ucs2Write(this, t54, e44, r36);
            default:
                if (i11) throw new TypeError("Unknown encoding: " + n29);
                n29 = ("" + n29).toLowerCase();
                i11 = true;
        }
    };
    Buffer1.prototype.toJSON = function toJSON() {
        return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
        };
    };
    function base64Slice(e45, r37, n30) {
        return 0 === r37 && n30 === e45.length ? t910.fromByteArray(e45) : t910.fromByteArray(e45.slice(r37, n30));
    }
    function utf8Slice(t55, e46, r38) {
        r38 = Math.min(t55.length, r38);
        const n32 = [];
        let f16 = e46;
        while(f16 < r38){
            const e47 = t55[f16];
            let i12 = null;
            let o10 = e47 > 239 ? 4 : e47 > 223 ? 3 : e47 > 191 ? 2 : 1;
            if (f16 + o10 <= r38) {
                let r39, n31, u9, s8;
                switch(o10){
                    case 1:
                        e47 < 128 && (i12 = e47);
                        break;
                    case 2:
                        r39 = t55[f16 + 1];
                        if (128 === (192 & r39)) {
                            s8 = (31 & e47) << 6 | 63 & r39;
                            s8 > 127 && (i12 = s8);
                        }
                        break;
                    case 3:
                        r39 = t55[f16 + 1];
                        n31 = t55[f16 + 2];
                        if (128 === (192 & r39) && 128 === (192 & n31)) {
                            s8 = (15 & e47) << 12 | (63 & r39) << 6 | 63 & n31;
                            s8 > 2047 && (s8 < 55296 || s8 > 57343) && (i12 = s8);
                        }
                        break;
                    case 4:
                        r39 = t55[f16 + 1];
                        n31 = t55[f16 + 2];
                        u9 = t55[f16 + 3];
                        if (128 === (192 & r39) && 128 === (192 & n31) && 128 === (192 & u9)) {
                            s8 = (15 & e47) << 18 | (63 & r39) << 12 | (63 & n31) << 6 | 63 & u9;
                            s8 > 65535 && s8 < 1114112 && (i12 = s8);
                        }
                }
            }
            if (null === i12) {
                i12 = 65533;
                o10 = 1;
            } else if (i12 > 65535) {
                i12 -= 65536;
                n32.push(i12 >>> 10 & 1023 | 55296);
                i12 = 56320 | 1023 & i12;
            }
            n32.push(i12);
            f16 += o10;
        }
        return decodeCodePointsArray(n32);
    }
    const o63 = 4096;
    function decodeCodePointsArray(t56) {
        const e48 = t56.length;
        if (e48 <= 4096) return String.fromCharCode.apply(String, t56);
        let r40 = "";
        let n33 = 0;
        while(n33 < e48)r40 += String.fromCharCode.apply(String, t56.slice(n33, n33 += o63));
        return r40;
    }
    function asciiSlice(t57, e49, r41) {
        let n34 = "";
        r41 = Math.min(t57.length, r41);
        for(let f17 = e49; f17 < r41; ++f17)n34 += String.fromCharCode(127 & t57[f17]);
        return n34;
    }
    function latin1Slice(t58, e50, r42) {
        let n35 = "";
        r42 = Math.min(t58.length, r42);
        for(let f18 = e50; f18 < r42; ++f18)n35 += String.fromCharCode(t58[f18]);
        return n35;
    }
    function hexSlice(t59, e51, r43) {
        const n37 = t59.length;
        (!e51 || e51 < 0) && (e51 = 0);
        (!r43 || r43 < 0 || r43 > n37) && (r43 = n37);
        let f19 = "";
        for(let n36 = e51; n36 < r43; ++n36)f19 += a410[t59[n36]];
        return f19;
    }
    function utf16leSlice(t61, e52, r44) {
        const n38 = t61.slice(e52, r44);
        let f20 = "";
        for(let t60 = 0; t60 < n38.length - 1; t60 += 2)f20 += String.fromCharCode(n38[t60] + 256 * n38[t60 + 1]);
        return f20;
    }
    Buffer1.prototype.slice = function slice(t62, e53) {
        const r45 = this.length;
        t62 = ~~t62;
        e53 = void 0 === e53 ? r45 : ~~e53;
        if (t62 < 0) {
            t62 += r45;
            t62 < 0 && (t62 = 0);
        } else t62 > r45 && (t62 = r45);
        if (e53 < 0) {
            e53 += r45;
            e53 < 0 && (e53 = 0);
        } else e53 > r45 && (e53 = r45);
        e53 < t62 && (e53 = t62);
        const n39 = this.subarray(t62, e53);
        Object.setPrototypeOf(n39, Buffer1.prototype);
        return n39;
    };
    function checkOffset(t63, e54, r46) {
        if (t63 % 1 !== 0 || t63 < 0) throw new RangeError("offset is not uint");
        if (t63 + e54 > r46) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer1.prototype.readUintLE = Buffer1.prototype.readUIntLE = function readUIntLE(t64, e55, r47) {
        t64 >>>= 0;
        e55 >>>= 0;
        r47 || checkOffset(t64, e55, this.length);
        let n40 = this[t64];
        let f21 = 1;
        let i13 = 0;
        while(++i13 < e55 && (f21 *= 256))n40 += this[t64 + i13] * f21;
        return n40;
    };
    Buffer1.prototype.readUintBE = Buffer1.prototype.readUIntBE = function readUIntBE(t65, e56, r48) {
        t65 >>>= 0;
        e56 >>>= 0;
        r48 || checkOffset(t65, e56, this.length);
        let n41 = this[t65 + --e56];
        let f22 = 1;
        while(e56 > 0 && (f22 *= 256))n41 += this[t65 + --e56] * f22;
        return n41;
    };
    Buffer1.prototype.readUint8 = Buffer1.prototype.readUInt8 = function readUInt8(t66, e57) {
        t66 >>>= 0;
        e57 || checkOffset(t66, 1, this.length);
        return this[t66];
    };
    Buffer1.prototype.readUint16LE = Buffer1.prototype.readUInt16LE = function readUInt16LE(t67, e58) {
        t67 >>>= 0;
        e58 || checkOffset(t67, 2, this.length);
        return this[t67] | this[t67 + 1] << 8;
    };
    Buffer1.prototype.readUint16BE = Buffer1.prototype.readUInt16BE = function readUInt16BE(t68, e59) {
        t68 >>>= 0;
        e59 || checkOffset(t68, 2, this.length);
        return this[t68] << 8 | this[t68 + 1];
    };
    Buffer1.prototype.readUint32LE = Buffer1.prototype.readUInt32LE = function readUInt32LE(t69, e60) {
        t69 >>>= 0;
        e60 || checkOffset(t69, 4, this.length);
        return (this[t69] | this[t69 + 1] << 8 | this[t69 + 2] << 16) + 16777216 * this[t69 + 3];
    };
    Buffer1.prototype.readUint32BE = Buffer1.prototype.readUInt32BE = function readUInt32BE(t70, e61) {
        t70 >>>= 0;
        e61 || checkOffset(t70, 4, this.length);
        return 16777216 * this[t70] + (this[t70 + 1] << 16 | this[t70 + 2] << 8 | this[t70 + 3]);
    };
    Buffer1.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(t71) {
        t71 >>>= 0;
        validateNumber(t71, "offset");
        const e62 = this[t71];
        const r49 = this[t71 + 7];
        void 0 !== e62 && void 0 !== r49 || boundsError(t71, this.length - 8);
        const n42 = e62 + 256 * this[++t71] + 65536 * this[++t71] + this[++t71] * 2 ** 24;
        const f23 = this[++t71] + 256 * this[++t71] + 65536 * this[++t71] + r49 * 2 ** 24;
        return BigInt(n42) + (BigInt(f23) << BigInt(32));
    });
    Buffer1.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(t72) {
        t72 >>>= 0;
        validateNumber(t72, "offset");
        const e63 = this[t72];
        const r50 = this[t72 + 7];
        void 0 !== e63 && void 0 !== r50 || boundsError(t72, this.length - 8);
        const n43 = e63 * 2 ** 24 + 65536 * this[++t72] + 256 * this[++t72] + this[++t72];
        const f24 = this[++t72] * 2 ** 24 + 65536 * this[++t72] + 256 * this[++t72] + r50;
        return (BigInt(n43) << BigInt(32)) + BigInt(f24);
    });
    Buffer1.prototype.readIntLE = function readIntLE(t73, e64, r51) {
        t73 >>>= 0;
        e64 >>>= 0;
        r51 || checkOffset(t73, e64, this.length);
        let n44 = this[t73];
        let f25 = 1;
        let i14 = 0;
        while(++i14 < e64 && (f25 *= 256))n44 += this[t73 + i14] * f25;
        f25 *= 128;
        n44 >= f25 && (n44 -= Math.pow(2, 8 * e64));
        return n44;
    };
    Buffer1.prototype.readIntBE = function readIntBE(t74, e65, r52) {
        t74 >>>= 0;
        e65 >>>= 0;
        r52 || checkOffset(t74, e65, this.length);
        let n45 = e65;
        let f26 = 1;
        let i15 = this[t74 + --n45];
        while(n45 > 0 && (f26 *= 256))i15 += this[t74 + --n45] * f26;
        f26 *= 128;
        i15 >= f26 && (i15 -= Math.pow(2, 8 * e65));
        return i15;
    };
    Buffer1.prototype.readInt8 = function readInt8(t75, e66) {
        t75 >>>= 0;
        e66 || checkOffset(t75, 1, this.length);
        return 128 & this[t75] ? -1 * (255 - this[t75] + 1) : this[t75];
    };
    Buffer1.prototype.readInt16LE = function readInt16LE(t76, e67) {
        t76 >>>= 0;
        e67 || checkOffset(t76, 2, this.length);
        const r53 = this[t76] | this[t76 + 1] << 8;
        return 32768 & r53 ? 4294901760 | r53 : r53;
    };
    Buffer1.prototype.readInt16BE = function readInt16BE(t77, e68) {
        t77 >>>= 0;
        e68 || checkOffset(t77, 2, this.length);
        const r54 = this[t77 + 1] | this[t77] << 8;
        return 32768 & r54 ? 4294901760 | r54 : r54;
    };
    Buffer1.prototype.readInt32LE = function readInt32LE(t78, e69) {
        t78 >>>= 0;
        e69 || checkOffset(t78, 4, this.length);
        return this[t78] | this[t78 + 1] << 8 | this[t78 + 2] << 16 | this[t78 + 3] << 24;
    };
    Buffer1.prototype.readInt32BE = function readInt32BE(t79, e70) {
        t79 >>>= 0;
        e70 || checkOffset(t79, 4, this.length);
        return this[t79] << 24 | this[t79 + 1] << 16 | this[t79 + 2] << 8 | this[t79 + 3];
    };
    Buffer1.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(t80) {
        t80 >>>= 0;
        validateNumber(t80, "offset");
        const e71 = this[t80];
        const r55 = this[t80 + 7];
        void 0 !== e71 && void 0 !== r55 || boundsError(t80, this.length - 8);
        const n46 = this[t80 + 4] + 256 * this[t80 + 5] + 65536 * this[t80 + 6] + (r55 << 24);
        return (BigInt(n46) << BigInt(32)) + BigInt(e71 + 256 * this[++t80] + 65536 * this[++t80] + this[++t80] * 2 ** 24);
    });
    Buffer1.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(t81) {
        t81 >>>= 0;
        validateNumber(t81, "offset");
        const e72 = this[t81];
        const r56 = this[t81 + 7];
        void 0 !== e72 && void 0 !== r56 || boundsError(t81, this.length - 8);
        const n47 = (e72 << 24) + 65536 * this[++t81] + 256 * this[++t81] + this[++t81];
        return (BigInt(n47) << BigInt(32)) + BigInt(this[++t81] * 2 ** 24 + 65536 * this[++t81] + 256 * this[++t81] + r56);
    });
    Buffer1.prototype.readFloatLE = function readFloatLE(t82, r57) {
        t82 >>>= 0;
        r57 || checkOffset(t82, 4, this.length);
        return e9.read(this, t82, true, 23, 4);
    };
    Buffer1.prototype.readFloatBE = function readFloatBE(t83, r58) {
        t83 >>>= 0;
        r58 || checkOffset(t83, 4, this.length);
        return e9.read(this, t83, false, 23, 4);
    };
    Buffer1.prototype.readDoubleLE = function readDoubleLE(t84, r59) {
        t84 >>>= 0;
        r59 || checkOffset(t84, 8, this.length);
        return e9.read(this, t84, true, 52, 8);
    };
    Buffer1.prototype.readDoubleBE = function readDoubleBE(t85, r60) {
        t85 >>>= 0;
        r60 || checkOffset(t85, 8, this.length);
        return e9.read(this, t85, false, 52, 8);
    };
    function checkInt(t86, e73, r61, n48, f27, i16) {
        if (!Buffer1.isBuffer(t86)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (e73 > f27 || e73 < i16) throw new RangeError('"value" argument is out of bounds');
        if (r61 + n48 > t86.length) throw new RangeError("Index out of range");
    }
    Buffer1.prototype.writeUintLE = Buffer1.prototype.writeUIntLE = function writeUIntLE(t87, e74, r62, n49) {
        t87 = +t87;
        e74 >>>= 0;
        r62 >>>= 0;
        if (!n49) {
            const n50 = Math.pow(2, 8 * r62) - 1;
            checkInt(this, t87, e74, r62, n50, 0);
        }
        let f28 = 1;
        let i17 = 0;
        this[e74] = 255 & t87;
        while(++i17 < r62 && (f28 *= 256))this[e74 + i17] = t87 / f28 & 255;
        return e74 + r62;
    };
    Buffer1.prototype.writeUintBE = Buffer1.prototype.writeUIntBE = function writeUIntBE(t88, e75, r63, n51) {
        t88 = +t88;
        e75 >>>= 0;
        r63 >>>= 0;
        if (!n51) {
            const n52 = Math.pow(2, 8 * r63) - 1;
            checkInt(this, t88, e75, r63, n52, 0);
        }
        let f29 = r63 - 1;
        let i18 = 1;
        this[e75 + f29] = 255 & t88;
        while(--f29 >= 0 && (i18 *= 256))this[e75 + f29] = t88 / i18 & 255;
        return e75 + r63;
    };
    Buffer1.prototype.writeUint8 = Buffer1.prototype.writeUInt8 = function writeUInt8(t89, e76, r64) {
        t89 = +t89;
        e76 >>>= 0;
        r64 || checkInt(this, t89, e76, 1, 255, 0);
        this[e76] = 255 & t89;
        return e76 + 1;
    };
    Buffer1.prototype.writeUint16LE = Buffer1.prototype.writeUInt16LE = function writeUInt16LE(t90, e77, r65) {
        t90 = +t90;
        e77 >>>= 0;
        r65 || checkInt(this, t90, e77, 2, 65535, 0);
        this[e77] = 255 & t90;
        this[e77 + 1] = t90 >>> 8;
        return e77 + 2;
    };
    Buffer1.prototype.writeUint16BE = Buffer1.prototype.writeUInt16BE = function writeUInt16BE(t91, e78, r66) {
        t91 = +t91;
        e78 >>>= 0;
        r66 || checkInt(this, t91, e78, 2, 65535, 0);
        this[e78] = t91 >>> 8;
        this[e78 + 1] = 255 & t91;
        return e78 + 2;
    };
    Buffer1.prototype.writeUint32LE = Buffer1.prototype.writeUInt32LE = function writeUInt32LE(t92, e79, r67) {
        t92 = +t92;
        e79 >>>= 0;
        r67 || checkInt(this, t92, e79, 4, 4294967295, 0);
        this[e79 + 3] = t92 >>> 24;
        this[e79 + 2] = t92 >>> 16;
        this[e79 + 1] = t92 >>> 8;
        this[e79] = 255 & t92;
        return e79 + 4;
    };
    Buffer1.prototype.writeUint32BE = Buffer1.prototype.writeUInt32BE = function writeUInt32BE(t93, e80, r68) {
        t93 = +t93;
        e80 >>>= 0;
        r68 || checkInt(this, t93, e80, 4, 4294967295, 0);
        this[e80] = t93 >>> 24;
        this[e80 + 1] = t93 >>> 16;
        this[e80 + 2] = t93 >>> 8;
        this[e80 + 3] = 255 & t93;
        return e80 + 4;
    };
    function wrtBigUInt64LE(t94, e81, r69, n53, f30) {
        checkIntBI(e81, n53, f30, t94, r69, 7);
        let i19 = Number(e81 & BigInt(4294967295));
        t94[r69++] = i19;
        i19 >>= 8;
        t94[r69++] = i19;
        i19 >>= 8;
        t94[r69++] = i19;
        i19 >>= 8;
        t94[r69++] = i19;
        let o11 = Number(e81 >> BigInt(32) & BigInt(4294967295));
        t94[r69++] = o11;
        o11 >>= 8;
        t94[r69++] = o11;
        o11 >>= 8;
        t94[r69++] = o11;
        o11 >>= 8;
        t94[r69++] = o11;
        return r69;
    }
    function wrtBigUInt64BE(t95, e82, r70, n54, f31) {
        checkIntBI(e82, n54, f31, t95, r70, 7);
        let i20 = Number(e82 & BigInt(4294967295));
        t95[r70 + 7] = i20;
        i20 >>= 8;
        t95[r70 + 6] = i20;
        i20 >>= 8;
        t95[r70 + 5] = i20;
        i20 >>= 8;
        t95[r70 + 4] = i20;
        let o12 = Number(e82 >> BigInt(32) & BigInt(4294967295));
        t95[r70 + 3] = o12;
        o12 >>= 8;
        t95[r70 + 2] = o12;
        o12 >>= 8;
        t95[r70 + 1] = o12;
        o12 >>= 8;
        t95[r70] = o12;
        return r70 + 8;
    }
    Buffer1.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(t96, e83 = 0) {
        return wrtBigUInt64LE(this, t96, e83, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer1.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(t97, e84 = 0) {
        return wrtBigUInt64BE(this, t97, e84, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer1.prototype.writeIntLE = function writeIntLE(t98, e85, r71, n55) {
        t98 = +t98;
        e85 >>>= 0;
        if (!n55) {
            const n56 = Math.pow(2, 8 * r71 - 1);
            checkInt(this, t98, e85, r71, n56 - 1, -n56);
        }
        let f32 = 0;
        let i21 = 1;
        let o13 = 0;
        this[e85] = 255 & t98;
        while(++f32 < r71 && (i21 *= 256)){
            t98 < 0 && 0 === o13 && 0 !== this[e85 + f32 - 1] && (o13 = 1);
            this[e85 + f32] = (t98 / i21 >> 0) - o13 & 255;
        }
        return e85 + r71;
    };
    Buffer1.prototype.writeIntBE = function writeIntBE(t99, e86, r72, n57) {
        t99 = +t99;
        e86 >>>= 0;
        if (!n57) {
            const n58 = Math.pow(2, 8 * r72 - 1);
            checkInt(this, t99, e86, r72, n58 - 1, -n58);
        }
        let f33 = r72 - 1;
        let i22 = 1;
        let o14 = 0;
        this[e86 + f33] = 255 & t99;
        while(--f33 >= 0 && (i22 *= 256)){
            t99 < 0 && 0 === o14 && 0 !== this[e86 + f33 + 1] && (o14 = 1);
            this[e86 + f33] = (t99 / i22 >> 0) - o14 & 255;
        }
        return e86 + r72;
    };
    Buffer1.prototype.writeInt8 = function writeInt8(t100, e87, r73) {
        t100 = +t100;
        e87 >>>= 0;
        r73 || checkInt(this, t100, e87, 1, 127, -128);
        t100 < 0 && (t100 = 255 + t100 + 1);
        this[e87] = 255 & t100;
        return e87 + 1;
    };
    Buffer1.prototype.writeInt16LE = function writeInt16LE(t101, e88, r74) {
        t101 = +t101;
        e88 >>>= 0;
        r74 || checkInt(this, t101, e88, 2, 32767, -32768);
        this[e88] = 255 & t101;
        this[e88 + 1] = t101 >>> 8;
        return e88 + 2;
    };
    Buffer1.prototype.writeInt16BE = function writeInt16BE(t102, e89, r75) {
        t102 = +t102;
        e89 >>>= 0;
        r75 || checkInt(this, t102, e89, 2, 32767, -32768);
        this[e89] = t102 >>> 8;
        this[e89 + 1] = 255 & t102;
        return e89 + 2;
    };
    Buffer1.prototype.writeInt32LE = function writeInt32LE(t103, e90, r76) {
        t103 = +t103;
        e90 >>>= 0;
        r76 || checkInt(this, t103, e90, 4, 2147483647, -2147483648);
        this[e90] = 255 & t103;
        this[e90 + 1] = t103 >>> 8;
        this[e90 + 2] = t103 >>> 16;
        this[e90 + 3] = t103 >>> 24;
        return e90 + 4;
    };
    Buffer1.prototype.writeInt32BE = function writeInt32BE(t104, e91, r77) {
        t104 = +t104;
        e91 >>>= 0;
        r77 || checkInt(this, t104, e91, 4, 2147483647, -2147483648);
        t104 < 0 && (t104 = 4294967295 + t104 + 1);
        this[e91] = t104 >>> 24;
        this[e91 + 1] = t104 >>> 16;
        this[e91 + 2] = t104 >>> 8;
        this[e91 + 3] = 255 & t104;
        return e91 + 4;
    };
    Buffer1.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(t105, e92 = 0) {
        return wrtBigUInt64LE(this, t105, e92, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer1.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(t106, e93 = 0) {
        return wrtBigUInt64BE(this, t106, e93, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(t107, e, r78, n59, f, i) {
        if (r78 + n59 > t107.length) throw new RangeError("Index out of range");
        if (r78 < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(t108, r79, n60, f34, i23) {
        r79 = +r79;
        n60 >>>= 0;
        i23 || checkIEEE754(t108, r79, n60, 4);
        e9.write(t108, r79, n60, f34, 23, 4);
        return n60 + 4;
    }
    Buffer1.prototype.writeFloatLE = function writeFloatLE(t109, e94, r80) {
        return writeFloat(this, t109, e94, true, r80);
    };
    Buffer1.prototype.writeFloatBE = function writeFloatBE(t110, e95, r81) {
        return writeFloat(this, t110, e95, false, r81);
    };
    function writeDouble(t111, r82, n61, f35, i24) {
        r82 = +r82;
        n61 >>>= 0;
        i24 || checkIEEE754(t111, r82, n61, 8);
        e9.write(t111, r82, n61, f35, 52, 8);
        return n61 + 8;
    }
    Buffer1.prototype.writeDoubleLE = function writeDoubleLE(t112, e96, r83) {
        return writeDouble(this, t112, e96, true, r83);
    };
    Buffer1.prototype.writeDoubleBE = function writeDoubleBE(t113, e97, r84) {
        return writeDouble(this, t113, e97, false, r84);
    };
    Buffer1.prototype.copy = function copy(t114, e98, r85, n62) {
        if (!Buffer1.isBuffer(t114)) throw new TypeError("argument should be a Buffer");
        r85 || (r85 = 0);
        n62 || 0 === n62 || (n62 = this.length);
        e98 >= t114.length && (e98 = t114.length);
        e98 || (e98 = 0);
        n62 > 0 && n62 < r85 && (n62 = r85);
        if (n62 === r85) return 0;
        if (0 === t114.length || 0 === this.length) return 0;
        if (e98 < 0) throw new RangeError("targetStart out of bounds");
        if (r85 < 0 || r85 >= this.length) throw new RangeError("Index out of range");
        if (n62 < 0) throw new RangeError("sourceEnd out of bounds");
        n62 > this.length && (n62 = this.length);
        t114.length - e98 < n62 - r85 && (n62 = t114.length - e98 + r85);
        const f36 = n62 - r85;
        this === t114 && "function" === typeof Uint8Array.prototype.copyWithin ? this.copyWithin(e98, r85, n62) : Uint8Array.prototype.set.call(t114, this.subarray(r85, n62), e98);
        return f36;
    };
    Buffer1.prototype.fill = function fill(t115, e99, r86, n63) {
        if ("string" === typeof t115) {
            if ("string" === typeof e99) {
                n63 = e99;
                e99 = 0;
                r86 = this.length;
            } else if ("string" === typeof r86) {
                n63 = r86;
                r86 = this.length;
            }
            if (void 0 !== n63 && "string" !== typeof n63) throw new TypeError("encoding must be a string");
            if ("string" === typeof n63 && !Buffer1.isEncoding(n63)) throw new TypeError("Unknown encoding: " + n63);
            if (1 === t115.length) {
                const e100 = t115.charCodeAt(0);
                ("utf8" === n63 && e100 < 128 || "latin1" === n63) && (t115 = e100);
            }
        } else "number" === typeof t115 ? t115 &= 255 : "boolean" === typeof t115 && (t115 = Number(t115));
        if (e99 < 0 || this.length < e99 || this.length < r86) throw new RangeError("Out of range index");
        if (r86 <= e99) return this;
        e99 >>>= 0;
        r86 = void 0 === r86 ? this.length : r86 >>> 0;
        t115 || (t115 = 0);
        let f37;
        if ("number" === typeof t115) for(f37 = e99; f37 < r86; ++f37)this[f37] = t115;
        else {
            const i25 = Buffer1.isBuffer(t115) ? t115 : Buffer1.from(t115, n63);
            const o15 = i25.length;
            if (0 === o15) throw new TypeError('The value "' + t115 + '" is invalid for argument "value"');
            for(f37 = 0; f37 < r86 - e99; ++f37)this[f37 + e99] = i25[f37 % o15];
        }
        return this;
    };
    const u6 = {};
    function E25(t116, e101, r87) {
        u6[t116] = class NodeError extends r87 {
            constructor(){
                super();
                Object.defineProperty(this, "message", {
                    value: e101.apply(this, arguments),
                    writable: true,
                    configurable: true
                });
                this.name = `${this.name} [${t116}]`;
                this.stack;
                delete this.name;
            }
            get code() {
                return t116;
            }
            set code(t117) {
                Object.defineProperty(this, "code", {
                    configurable: true,
                    enumerable: true,
                    value: t117,
                    writable: true
                });
            }
            toString() {
                return `${this.name} [${t116}]: ${this.message}`;
            }
        };
    }
    E25("ERR_BUFFER_OUT_OF_BOUNDS", function(t118) {
        return t118 ? `${t118} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    E25("ERR_INVALID_ARG_TYPE", function(t119, e102) {
        return `The "${t119}" argument must be of type number. Received type ${typeof e102}`;
    }, TypeError);
    E25("ERR_OUT_OF_RANGE", function(t120, e103, r88) {
        let n64 = `The value of "${t120}" is out of range.`;
        let f38 = r88;
        if (Number.isInteger(r88) && Math.abs(r88) > 2 ** 32) f38 = addNumericalSeparator(String(r88));
        else if ("bigint" === typeof r88) {
            f38 = String(r88);
            (r88 > BigInt(2) ** BigInt(32) || r88 < -(BigInt(2) ** BigInt(32))) && (f38 = addNumericalSeparator(f38));
            f38 += "n";
        }
        n64 += ` It must be ${e103}. Received ${f38}`;
        return n64;
    }, RangeError);
    function addNumericalSeparator(t121) {
        let e104 = "";
        let r89 = t121.length;
        const n65 = "-" === t121[0] ? 1 : 0;
        for(; r89 >= n65 + 4; r89 -= 3)e104 = `_${t121.slice(r89 - 3, r89)}${e104}`;
        return `${t121.slice(0, r89)}${e104}`;
    }
    function checkBounds(t122, e105, r90) {
        validateNumber(e105, "offset");
        void 0 !== t122[e105] && void 0 !== t122[e105 + r90] || boundsError(e105, t122.length - (r90 + 1));
    }
    function checkIntBI(t123, e106, r91, n67, f40, i26) {
        if (t123 > r91 || t123 < e106) {
            const n66 = "bigint" === typeof e106 ? "n" : "";
            let f39;
            f39 = i26 > 3 ? 0 === e106 || e106 === BigInt(0) ? `>= 0${n66} and < 2${n66} ** ${8 * (i26 + 1)}${n66}` : `>= -(2${n66} ** ${8 * (i26 + 1) - 1}${n66}) and < 2 ** ${8 * (i26 + 1) - 1}${n66}` : `>= ${e106}${n66} and <= ${r91}${n66}`;
            throw new u6.ERR_OUT_OF_RANGE("value", f39, t123);
        }
        checkBounds(n67, f40, i26);
    }
    function validateNumber(t124, e107) {
        if ("number" !== typeof t124) throw new u6.ERR_INVALID_ARG_TYPE(e107, "number", t124);
    }
    function boundsError(t125, e108, r92) {
        if (Math.floor(t125) !== t125) {
            validateNumber(t125, r92);
            throw new u6.ERR_OUT_OF_RANGE(r92 || "offset", "an integer", t125);
        }
        if (e108 < 0) throw new u6.ERR_BUFFER_OUT_OF_BOUNDS;
        throw new u6.ERR_OUT_OF_RANGE(r92 || "offset", `>= ${r92 ? 1 : 0} and <= ${e108}`, t125);
    }
    const s54 = /[^+/0-9A-Za-z-_]/g;
    function base64clean(t126) {
        t126 = t126.split("=")[0];
        t126 = t126.trim().replace(s54, "");
        if (t126.length < 2) return "";
        while(t126.length % 4 !== 0)t126 += "=";
        return t126;
    }
    function utf8ToBytes(t127, e109) {
        e109 = e109 || Infinity;
        let r93;
        const n68 = t127.length;
        let f41 = null;
        const i27 = [];
        for(let o16 = 0; o16 < n68; ++o16){
            r93 = t127.charCodeAt(o16);
            if (r93 > 55295 && r93 < 57344) {
                if (!f41) {
                    if (r93 > 56319) {
                        (e109 -= 3) > -1 && i27.push(239, 191, 189);
                        continue;
                    }
                    if (o16 + 1 === n68) {
                        (e109 -= 3) > -1 && i27.push(239, 191, 189);
                        continue;
                    }
                    f41 = r93;
                    continue;
                }
                if (r93 < 56320) {
                    (e109 -= 3) > -1 && i27.push(239, 191, 189);
                    f41 = r93;
                    continue;
                }
                r93 = 65536 + (f41 - 55296 << 10 | r93 - 56320);
            } else f41 && (e109 -= 3) > -1 && i27.push(239, 191, 189);
            f41 = null;
            if (r93 < 128) {
                if ((e109 -= 1) < 0) break;
                i27.push(r93);
            } else if (r93 < 2048) {
                if ((e109 -= 2) < 0) break;
                i27.push(r93 >> 6 | 192, 63 & r93 | 128);
            } else if (r93 < 65536) {
                if ((e109 -= 3) < 0) break;
                i27.push(r93 >> 12 | 224, r93 >> 6 & 63 | 128, 63 & r93 | 128);
            } else {
                if (!(r93 < 1114112)) throw new Error("Invalid code point");
                if ((e109 -= 4) < 0) break;
                i27.push(r93 >> 18 | 240, r93 >> 12 & 63 | 128, r93 >> 6 & 63 | 128, 63 & r93 | 128);
            }
        }
        return i27;
    }
    function asciiToBytes(t128) {
        const e110 = [];
        for(let r94 = 0; r94 < t128.length; ++r94)e110.push(255 & t128.charCodeAt(r94));
        return e110;
    }
    function utf16leToBytes(t129, e111) {
        let r95, n69, f42;
        const i28 = [];
        for(let o17 = 0; o17 < t129.length; ++o17){
            if ((e111 -= 2) < 0) break;
            r95 = t129.charCodeAt(o17);
            n69 = r95 >> 8;
            f42 = r95 % 256;
            i28.push(f42);
            i28.push(n69);
        }
        return i28;
    }
    function base64ToBytes(e112) {
        return t910.toByteArray(base64clean(e112));
    }
    function blitBuffer(t130, e113, r96, n70) {
        let f43;
        for(f43 = 0; f43 < n70; ++f43){
            if (f43 + r96 >= e113.length || f43 >= t130.length) break;
            e113[f43 + r96] = t130[f43];
        }
        return f43;
    }
    function isInstance(t131, e114) {
        return t131 instanceof e114 || null != t131 && null != t131.constructor && null != t131.constructor.name && t131.constructor.name === e114.name;
    }
    function numberIsNaN(t132) {
        return t132 !== t132;
    }
    const a410 = function() {
        const t133 = "0123456789abcdef";
        const e115 = new Array(256);
        for(let r97 = 0; r97 < 16; ++r97){
            const n71 = 16 * r97;
            for(let f44 = 0; f44 < 16; ++f44)e115[n71 + f44] = t133[r97] + t133[f44];
        }
        return e115;
    }();
    function defineBigIntMethod(t134) {
        return "undefined" === typeof BigInt ? BufferBigIntNotDefined : t134;
    }
    function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
    }
    return f6;
}
const o7 = dew10();
o7.Buffer;
o7.SlowBuffer;
o7.INSPECT_MAX_BYTES;
o7.kMaxLength;
var u6 = o7.Buffer;
o7.INSPECT_MAX_BYTES;
o7.kMaxLength;
var t12 = {};
var n13 = o7.Buffer;
(function(e, n1109) {
    n1109(t12);
})(0, function(e2) {
    const t2110 = ",".charCodeAt(0);
    const o116 = ";".charCodeAt(0);
    const r124 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    const c113 = new Uint8Array(64);
    const d112 = new Uint8Array(128);
    for(let e1 = 0; e1 < r124.length; e1++){
        const t1112 = r124.charCodeAt(e1);
        c113[e1] = t1112;
        d112[t1112] = e1;
    }
    const s117 = "undefined" !== typeof TextDecoder ? new TextDecoder : "undefined" !== typeof n13 ? {
        decode (e3103) {
            const t377 = n13.from(e3103.buffer, e3103.byteOffset, e3103.byteLength);
            return t377.toString();
        }
    } : {
        decode (e414) {
            let t414 = "";
            for(let n2104 = 0; n2104 < e414.length; n2104++)t414 += String.fromCharCode(e414[n2104]);
            return t414;
        }
    };
    function decode(e513) {
        const t513 = new Int32Array(5);
        const n413 = [];
        let o215 = 0;
        do {
            const r217 = indexOf(e513, o215);
            const c211 = [];
            let d45 = true;
            let s55 = 0;
            t513[0] = 0;
            for(let n314 = o215; n314 < r217; n314++){
                let o314;
                n314 = decodeInteger(e513, n314, t513, 0);
                const f50 = t513[0];
                f50 < s55 && (d45 = false);
                s55 = f50;
                if (hasMoreVlq(e513, n314, r217)) {
                    n314 = decodeInteger(e513, n314, t513, 1);
                    n314 = decodeInteger(e513, n314, t513, 2);
                    n314 = decodeInteger(e513, n314, t513, 3);
                    if (hasMoreVlq(e513, n314, r217)) {
                        n314 = decodeInteger(e513, n314, t513, 4);
                        o314 = [
                            f50,
                            t513[1],
                            t513[2],
                            t513[3],
                            t513[4]
                        ];
                    } else o314 = [
                        f50,
                        t513[1],
                        t513[2],
                        t513[3]
                    ];
                } else o314 = [
                    f50
                ];
                c211.push(o314);
            }
            d45 || sort1(c211);
            n413.push(c211);
            o215 = r217 + 1;
        }while (o215 <= e513.length)
        return n413;
    }
    function indexOf(e611, t613) {
        const n512 = e611.length;
        const o412 = t613 < n512 ? e611.indexOf(";", t613) : t613;
        return -1 === o412 ? n512 : o412;
    }
    function decodeInteger(e711, t713, n712, o511) {
        let r316 = 0;
        let c310 = 0;
        let s56 = 0;
        do {
            const n612 = e711.charCodeAt(t713++);
            s56 = d112[n612];
            r316 |= (31 & s56) << c310;
            c310 += 5;
        }while (32 & s56)
        const f52 = 1 & r316;
        r316 >>>= 1;
        f52 && (r316 = -2147483648 | -r316);
        n712[o511] += r316;
        return t713;
    }
    function hasMoreVlq(e811, n811, o64) {
        return !(n811 >= o64) && e811.charCodeAt(n811) !== t2110;
    }
    function sort1(e9) {
        e9.sort(sortComparator);
    }
    function sortComparator(e10, t812) {
        return e10[0] - t812[0];
    }
    function encode(e11) {
        const n911 = new Int32Array(5);
        const c410 = 16384 - 36;
        const d46 = new Uint8Array(16384);
        const f53 = d46.subarray(0, c410);
        let l54 = 0;
        let i58 = "";
        for(let u53 = 0; u53 < e11.length; u53++){
            const a = e11[u53];
            if (u53 > 0) {
                if (l54 === 16384) {
                    i58 += s117.decode(d46);
                    l54 = 0;
                }
                d46[l54++] = o116;
            }
            if (0 !== a.length) {
                n911[0] = 0;
                for(let e12 = 0; e12 < a.length; e12++){
                    const o71 = a[e12];
                    if (l54 > c410) {
                        i58 += s117.decode(f53);
                        d46.copyWithin(0, c410, l54);
                        l54 -= c410;
                    }
                    e12 > 0 && (d46[l54++] = t2110);
                    l54 = encodeInteger(d46, l54, n911, o71, 0);
                    if (1 !== o71.length) {
                        l54 = encodeInteger(d46, l54, n911, o71, 1);
                        l54 = encodeInteger(d46, l54, n911, o71, 2);
                        l54 = encodeInteger(d46, l54, n911, o71, 3);
                        4 !== o71.length && (l54 = encodeInteger(d46, l54, n911, o71, 4));
                    }
                }
            }
        }
        return i58 + s117.decode(d46.subarray(0, l54));
    }
    function encodeInteger(e13, t911, n1011, o8, r513) {
        const d47 = o8[r513];
        let s57 = d47 - n1011[r513];
        n1011[r513] = d47;
        s57 = s57 < 0 ? -s57 << 1 | 1 : s57 << 1;
        do {
            let n1111 = 31 & s57;
            s57 >>>= 5;
            s57 > 0 && (n1111 |= 32);
            e13[t911++] = c113[n1111];
        }while (s57 > 0)
        return t911;
    }
    e2.decode = decode;
    e2.encode = encode;
    Object.defineProperty(e2, "__esModule", {
        value: true
    });
});
const o8 = t12.decode, r12 = t12.encode, c7 = t12.__esModule;
const mod9 = {
    __esModule: c7,
    decode: o8,
    default: t12,
    encode: r12
};
var t13 = "default" in mod8 ? mod8.default : mod8;
var o9 = "default" in mod9 ? mod9.default : mod9;
var r13 = {};
(function(e, n1112) {
    n1112(r13, t13, o9);
})(0, function(e1, n2105, t1113) {
    e1.addSegment = void 0;
    e1.addMapping = void 0;
    e1.setSourceContent = void 0;
    e1.decodedMap = void 0;
    e1.encodedMap = void 0;
    e1.allMappings = void 0;
    class GenMapping {
        constructor({ file: e2 , sourceRoot: t2111  } = {}){
            this._names = new n2105.SetArray;
            this._sources = new n2105.SetArray;
            this._sourcesContent = [];
            this._mappings = [];
            this.file = e2;
            this.sourceRoot = t2111;
        }
    }
    (()=>{
        e1.addSegment = (e3104, t378, o117, r125, s118, a117, i117)=>{
            const { _mappings: c114 , _sources: u115 , _sourcesContent: l114 , _names: d113  } = e3104;
            const p114 = getLine(c114, t378);
            if (null == r125) {
                const e415 = [
                    o117
                ];
                const n315 = getColumnIndex(p114, o117, e415);
                return insert(p114, n315, e415);
            }
            const g35 = n2105.put(u115, r125);
            const m38 = i117 ? [
                o117,
                g35,
                s118,
                a117,
                n2105.put(d113, i117)
            ] : [
                o117,
                g35,
                s118,
                a117
            ];
            const f54 = getColumnIndex(p114, o117, m38);
            g35 === l114.length && (l114[g35] = null);
            insert(p114, f54, m38);
        };
        e1.addMapping = (n414, t415)=>{
            const { generated: o216 , source: r218 , original: s214 , name: a212  } = t415;
            return e1.addSegment(n414, o216.line - 1, o216.column, r218, null == s214 ? void 0 : s214.line - 1, null === s214 || void 0 === s214 ? void 0 : s214.column, a212);
        };
        e1.setSourceContent = (e514, t514, o315)=>{
            const { _sources: r317 , _sourcesContent: s313  } = e514;
            s313[n2105.put(r317, t514)] = o315;
        };
        e1.decodedMap = (e612)=>{
            const { file: n513 , sourceRoot: t614 , _mappings: o413 , _sources: r415 , _sourcesContent: s411 , _names: a313  } = e612;
            return {
                version: 3,
                file: n513,
                names: a313.array,
                sourceRoot: t614 || void 0,
                sources: r415.array,
                sourcesContent: s411,
                mappings: o413
            };
        };
        e1.encodedMap = (n613)=>{
            const o512 = e1.decodedMap(n613);
            return Object.assign(Object.assign({}, o512), {
                mappings: t1113.encode(o512.mappings)
            });
        };
        e1.allMappings = (e812)=>{
            const n713 = [];
            const { _mappings: t714 , _sources: o65 , _names: r514  } = e812;
            for(let e712 = 0; e712 < t714.length; e712++){
                const s58 = t714[e712];
                for(let t813 = 0; t813 < s58.length; t813++){
                    const a411 = s58[t813];
                    const i214 = {
                        line: e712 + 1,
                        column: a411[0]
                    };
                    let c212;
                    let u213;
                    let l212;
                    if (1 !== a411.length) {
                        c212 = o65.array[a411[1]];
                        u213 = {
                            line: a411[2] + 1,
                            column: a411[3]
                        };
                        5 === a411.length && (l212 = r514.array[a411[4]]);
                    }
                    n713.push({
                        generated: i214,
                        source: c212,
                        original: u213,
                        name: l212
                    });
                }
            }
            return n713;
        };
    })();
    function getLine(e9, n812) {
        for(let t912 = e9.length; t912 <= n812; t912++)e9[t912] = [];
        return e9[n812];
    }
    function getColumnIndex(e10, n912, t1011) {
        let o72 = e10.length;
        for(let r613 = o72 - 1; r613 >= 0; r613--, o72--){
            const s62 = e10[r613];
            const a55 = s62[0];
            if (a55 > n912) continue;
            if (a55 < n912) break;
            const i312 = compare2(s62, t1011);
            if (0 === i312) return o72;
            if (i312 < 0) break;
        }
        return o72;
    }
    function compare2(e11, n1012) {
        let t1114 = compareNum(e11.length, n1012.length);
        if (0 !== t1114) return t1114;
        if (1 === e11.length) return 0;
        t1114 = compareNum(e11[1], n1012[1]);
        if (0 !== t1114) return t1114;
        t1114 = compareNum(e11[2], n1012[2]);
        if (0 !== t1114) return t1114;
        t1114 = compareNum(e11[3], n1012[3]);
        return 0 !== t1114 ? t1114 : 4 === e11.length ? 0 : compareNum(e11[4], n1012[4]);
    }
    function compareNum(e12, n1113) {
        return e12 - n1113;
    }
    function insert(e13, n1211, t1310) {
        if (-1 !== n1211) {
            for(let t1210 = e13.length; t1210 > n1211; t1210--)e13[t1210] = e13[t1210 - 1];
            e13[n1211] = t1310;
        }
    }
    e1.GenMapping = GenMapping;
    Object.defineProperty(e1, "__esModule", {
        value: true
    });
});
const s8 = r13.addSegment, a7 = r13.addMapping, i7 = r13.setSourceContent, c8 = r13.decodedMap, u7 = r13.encodedMap, l7 = r13.allMappings, d5 = r13.GenMapping, p6 = r13.__esModule;
const mod10 = {
    GenMapping: d5,
    __esModule: p6,
    addMapping: a7,
    addSegment: s8,
    allMappings: l7,
    decodedMap: c8,
    default: r13,
    encodedMap: u7,
    setSourceContent: i7
};
var t14 = {};
var n14 = o7.Buffer;
const r14 = {};
const i8 = r14.hasOwnProperty;
const forOwn = (e1, t1115)=>{
    for(const n1114 in e1)i8.call(e1, n1114) && t1115(n1114, e1[n1114]);
};
const extend = (e2, t2112)=>{
    if (!t2112) return e2;
    forOwn(t2112, (t379, n2106)=>{
        e2[t379] = n2106;
    });
    return e2;
};
const forEach = (e3105, t416)=>{
    const n316 = e3105.length;
    let r126 = -1;
    while(++r126 < n316)t416(e3105[r126]);
};
const o10 = r14.toString;
const s9 = Array.isArray;
const c9 = n14.isBuffer;
const isObject = (e416)=>"[object Object]" == o10.call(e416)
;
const isString = (e515)=>"string" == typeof e515 || "[object String]" == o10.call(e515)
;
const isNumber = (e613)=>"number" == typeof e613 || "[object Number]" == o10.call(e613)
;
const isFunction = (e713)=>"function" == typeof e713
;
const isMap = (e813)=>"[object Map]" == o10.call(e813)
;
const isSet = (e9)=>"[object Set]" == o10.call(e9)
;
const l8 = {
    '"': '\\"',
    "'": "\\'",
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t"
};
const f7 = /["'\\\b\f\n\r\t]/;
const a8 = /[0-9]/;
const u8 = /[ !#-&\(-\[\]-_a-~]/;
const jsesc = (e10, t515)=>{
    const increaseIndentation = ()=>{
        b31 = p46;
        ++t515.indentLevel;
        p46 = t515.indent.repeat(t515.indentLevel);
    };
    const n415 = {
        escapeEverything: false,
        minimal: false,
        isScriptContext: false,
        quotes: "single",
        wrap: false,
        es6: false,
        json: false,
        compact: true,
        lowercaseHex: false,
        numbers: "decimal",
        indent: "\t",
        indentLevel: 0,
        __inline1__: false,
        __inline2__: false
    };
    const r219 = t515 && t515.json;
    if (r219) {
        n415.quotes = "double";
        n415.wrap = true;
    }
    t515 = extend(n415, t515);
    "single" != t515.quotes && "double" != t515.quotes && "backtick" != t515.quotes && (t515.quotes = "single");
    const i118 = "double" == t515.quotes ? '"' : "backtick" == t515.quotes ? "`" : "'";
    const o118 = t515.compact;
    const _111 = t515.lowercaseHex;
    let p46 = t515.indent.repeat(t515.indentLevel);
    let b31 = "";
    const g36 = t515.__inline1__;
    const m39 = t515.__inline2__;
    const S27 = o118 ? "" : "\n";
    let d48;
    let h39 = true;
    const y30 = "binary" == t515.numbers;
    const w24 = "octal" == t515.numbers;
    const j20 = "decimal" == t515.numbers;
    const v33 = "hexadecimal" == t515.numbers;
    r219 && e10 && isFunction(e10.toJSON) && (e10 = e10.toJSON());
    if (!isString(e10)) {
        if (isMap(e10)) {
            if (0 == e10.size) return "new Map()";
            if (!o118) {
                t515.__inline1__ = true;
                t515.__inline2__ = false;
            }
            return "new Map(" + jsesc(Array.from(e10), t515) + ")";
        }
        if (isSet(e10)) return 0 == e10.size ? "new Set()" : "new Set(" + jsesc(Array.from(e10), t515) + ")";
        if (c9(e10)) return 0 == e10.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(e10), t515) + ")";
        if (s9(e10)) {
            d48 = [];
            t515.wrap = true;
            if (g36) {
                t515.__inline1__ = false;
                t515.__inline2__ = true;
            }
            m39 || increaseIndentation();
            forEach(e10, (e11)=>{
                h39 = false;
                m39 && (t515.__inline2__ = false);
                d48.push((o118 || m39 ? "" : p46) + jsesc(e11, t515));
            });
            return h39 ? "[]" : m39 ? "[" + d48.join(", ") + "]" : "[" + S27 + d48.join("," + S27) + S27 + (o118 ? "" : b31) + "]";
        }
        if (!isNumber(e10)) {
            if (isObject(e10)) {
                d48 = [];
                t515.wrap = true;
                increaseIndentation();
                forOwn(e10, (e12, n514)=>{
                    h39 = false;
                    d48.push((o118 ? "" : p46) + jsesc(e12, t515) + ":" + (o118 ? "" : " ") + jsesc(n514, t515));
                });
                return h39 ? "{}" : "{" + S27 + d48.join("," + S27) + S27 + (o118 ? "" : b31) + "}";
            }
            return r219 ? JSON.stringify(e10) || "null" : String(e10);
        }
        if (r219) return JSON.stringify(e10);
        if (j20) return String(e10);
        if (v33) {
            let t615 = e10.toString(16);
            _111 || (t615 = t615.toUpperCase());
            return "0x" + t615;
        }
        if (y30) return "0b" + e10.toString(2);
        if (w24) return "0o" + e10.toString(8);
    }
    const A23 = e10;
    let C27 = -1;
    const x27 = A23.length;
    d48 = "";
    while(++C27 < x27){
        const e14 = A23.charAt(C27);
        if (t515.es6) {
            const e13 = A23.charCodeAt(C27);
            if (e13 >= 55296 && e13 <= 56319 && x27 > C27 + 1) {
                const t715 = A23.charCodeAt(C27 + 1);
                if (t715 >= 56320 && t715 <= 57343) {
                    const n614 = 1024 * (e13 - 55296) + t715 - 56320 + 65536;
                    let r318 = n614.toString(16);
                    _111 || (r318 = r318.toUpperCase());
                    d48 += "\\u{" + r318 + "}";
                    ++C27;
                    continue;
                }
            }
        }
        if (!t515.escapeEverything) {
            if (u8.test(e14)) {
                d48 += e14;
                continue;
            }
            if ('"' == e14) {
                d48 += i118 == e14 ? '\\"' : e14;
                continue;
            }
            if ("`" == e14) {
                d48 += i118 == e14 ? "\\`" : e14;
                continue;
            }
            if ("'" == e14) {
                d48 += i118 == e14 ? "\\'" : e14;
                continue;
            }
        }
        if ("\0" == e14 && !r219 && !a8.test(A23.charAt(C27 + 1))) {
            d48 += "\\0";
            continue;
        }
        if (f7.test(e14)) {
            d48 += l8[e14];
            continue;
        }
        const n714 = e14.charCodeAt(0);
        if (t515.minimal && 8232 != n714 && 8233 != n714) {
            d48 += e14;
            continue;
        }
        let o217 = n714.toString(16);
        _111 || (o217 = o217.toUpperCase());
        const s119 = o217.length > 2 || r219;
        const c115 = "\\" + (s119 ? "u" : "x") + ("0000" + o217).slice(s119 ? -4 : -2);
        d48 += c115;
        continue;
    }
    t515.wrap && (d48 = i118 + d48 + i118);
    "`" == i118 && (d48 = d48.replace(/\$\{/g, "\\${"));
    return t515.isScriptContext ? d48.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, r219 ? "\\u003C!--" : "\\x3C!--") : d48;
};
jsesc.version = "2.5.2";
t14 = jsesc;
var _4 = t14;
const mod11 = {
    default: _4
};
var i9 = "default" in mod3 ? mod3.default : mod3;
var n15 = {};
Object.defineProperty(n15, "__esModule", {
    value: true
});
n15.nodes = n15.list = void 0;
var s10 = i9;
const { FLIPPED_ALIAS_KEYS: r15 , isArrayExpression: o11 , isAssignmentExpression: a9 , isBinary: p7 , isBlockStatement: c10 , isCallExpression: h5 , isFunction: l9 , isIdentifier: u9 , isLiteral: d6 , isMemberExpression: f8 , isObjectExpression: y4 , isOptionalCallExpression: m6 , isOptionalMemberExpression: T3 , isStringLiteral: S5  } = s10;
function crawl(t1116, e1 = {}) {
    if (f8(t1116) || T3(t1116)) {
        crawl(t1116.object, e1);
        t1116.computed && crawl(t1116.property, e1);
    } else if (p7(t1116) || a9(t1116)) {
        crawl(t1116.left, e1);
        crawl(t1116.right, e1);
    } else if (h5(t1116) || m6(t1116)) {
        e1.hasCall = true;
        crawl(t1116.callee, e1);
    } else l9(t1116) ? e1.hasFunction = true : u9(t1116) && (e1.hasHelper = e1.hasHelper || isHelper(t1116.callee));
    return e1;
}
function isHelper(t2113) {
    return f8(t2113) ? isHelper(t2113.object) || isHelper(t2113.property) : u9(t2113) ? "require" === t2113.name || "_" === t2113.name[0] : h5(t2113) ? isHelper(t2113.callee) : !(!p7(t2113) && !a9(t2113)) && (u9(t2113.left) && isHelper(t2113.left) || isHelper(t2113.right));
}
function isType(t380) {
    return d6(t380) || y4(t380) || o11(t380) || u9(t380) || f8(t380);
}
const $4 = {
    AssignmentExpression (t417) {
        const e2 = crawl(t417.right);
        if (e2.hasCall && e2.hasHelper || e2.hasFunction) return {
            before: e2.hasFunction,
            after: true
        };
    },
    SwitchCase (t516, e3106) {
        return {
            before: !!t516.consequent.length || e3106.cases[0] === t516,
            after: !t516.consequent.length && e3106.cases[e3106.cases.length - 1] === t516
        };
    },
    LogicalExpression (t616) {
        if (l9(t616.left) || l9(t616.right)) return {
            after: true
        };
    },
    Literal (t716) {
        if (S5(t716) && "use strict" === t716.value) return {
            after: true
        };
    },
    CallExpression (t814) {
        if (l9(t814.callee) || isHelper(t814)) return {
            before: true,
            after: true
        };
    },
    OptionalCallExpression (t913) {
        if (l9(t913.callee)) return {
            before: true,
            after: true
        };
    },
    VariableDeclaration (t1012) {
        for(let e417 = 0; e417 < t1012.declarations.length; e417++){
            const i119 = t1012.declarations[e417];
            let n1115 = isHelper(i119.id) && !isType(i119.init);
            if (!n1115) {
                const t1117 = crawl(i119.init);
                n1115 = isHelper(i119.init) && t1117.hasCall || t1117.hasFunction;
            }
            if (n1115) return {
                before: true,
                after: true
            };
        }
    },
    IfStatement (t1211) {
        if (c10(t1211.consequent)) return {
            before: true,
            after: true
        };
    }
};
n15.nodes = $4;
$4.ObjectProperty = $4.ObjectTypeProperty = $4.ObjectMethod = function(t1311, e516) {
    if (e516.properties[0] === t1311) return {
        before: true
    };
};
$4.ObjectTypeCallProperty = function(t1410, e614) {
    var i215;
    if (e614.callProperties[0] === t1410 && !(null != (i215 = e614.properties) && i215.length)) return {
        before: true
    };
};
$4.ObjectTypeIndexer = function(t15, e714) {
    var i313, n2107;
    if (e714.indexers[0] === t15 && !(null != (i313 = e714.properties) && i313.length) && !(null != (n2107 = e714.callProperties) && n2107.length)) return {
        before: true
    };
};
$4.ObjectTypeInternalSlot = function(t16, e814) {
    var i411, n317, s120;
    if (e814.internalSlots[0] === t16 && !(null != (i411 = e814.properties) && i411.length) && !(null != (n317 = e814.callProperties) && n317.length) && !(null != (s120 = e814.indexers) && s120.length)) return {
        before: true
    };
};
const b6 = {
    VariableDeclaration (t17) {
        return t17.declarations.map((t18)=>t18.init
        );
    },
    ArrayExpression (t19) {
        return t19.elements;
    },
    ObjectExpression (t20) {
        return t20.properties;
    }
};
n15.list = b6;
[
    [
        "Function",
        true
    ],
    [
        "Class",
        true
    ],
    [
        "Loop",
        true
    ],
    [
        "LabeledStatement",
        true
    ],
    [
        "SwitchStatement",
        true
    ],
    [
        "TryStatement",
        true
    ]
].forEach(function([t21, e9]) {
    "boolean" === typeof e9 && (e9 = {
        after: e9,
        before: e9
    });
    [
        t21
    ].concat(r15[t21] || []).forEach(function(t22) {
        $4[t22] = function() {
            return e9;
        };
    });
});
var x4 = "default" in mod3 ? mod3.default : mod3;
var E4 = {};
Object.defineProperty(E4, "__esModule", {
    value: true
});
E4.ArrowFunctionExpression = ArrowFunctionExpression$2;
E4.AssignmentExpression = AssignmentExpression$2;
E4.Binary = Binary;
E4.BinaryExpression = BinaryExpression$1;
E4.ClassExpression = ClassExpression$1;
E4.ConditionalExpression = ConditionalExpression$2;
E4.DoExpression = DoExpression$2;
E4.FunctionExpression = FunctionExpression$2;
E4.FunctionTypeAnnotation = FunctionTypeAnnotation$2;
E4.Identifier = Identifier$2;
E4.LogicalExpression = LogicalExpression$1;
E4.NullableTypeAnnotation = NullableTypeAnnotation$2;
E4.ObjectExpression = ObjectExpression$2;
E4.OptionalIndexedAccessType = OptionalIndexedAccessType$2;
E4.OptionalCallExpression = E4.OptionalMemberExpression = OptionalMemberExpression$2;
E4.SequenceExpression = SequenceExpression$2;
E4.TSAsExpression = TSAsExpression$2;
E4.TSInferType = TSInferType$2;
E4.TSTypeAssertion = TSTypeAssertion$2;
E4.TSIntersectionType = E4.TSUnionType = TSUnionType$2;
E4.UnaryLike = UnaryLike;
E4.IntersectionTypeAnnotation = E4.UnionTypeAnnotation = UnionTypeAnnotation$2;
E4.UpdateExpression = UpdateExpression$2;
E4.AwaitExpression = E4.YieldExpression = YieldExpression$2;
var k3 = x4;
const { isArrayTypeAnnotation: w4 , isArrowFunctionExpression: A4 , isAssignmentExpression: g5 , isAwaitExpression: P4 , isBinary: D4 , isBinaryExpression: I5 , isCallExpression: O5 , isClassDeclaration: C4 , isClassExpression: v5 , isConditional: M3 , isConditionalExpression: B4 , isExportDeclaration: j3 , isExportDefaultDeclaration: L4 , isExpressionStatement: _5 , isFor: N4 , isForInStatement: F5 , isForOfStatement: J3 , isForStatement: K3 , isIfStatement: X3 , isIndexedAccessType: q3 , isIntersectionTypeAnnotation: U3 , isLogicalExpression: R5 , isMemberExpression: H3 , isNewExpression: W4 , isNullableTypeAnnotation: V4 , isObjectPattern: z3 , isOptionalCallExpression: Q3 , isOptionalMemberExpression: Y3 , isReturnStatement: G3 , isSequenceExpression: Z3 , isSwitchStatement: tt1 , isTSArrayType: et1 , isTSAsExpression: it1 , isTSIntersectionType: nt1 , isTSNonNullExpression: st1 , isTSOptionalType: rt1 , isTSRestType: ot1 , isTSTypeAssertion: at1 , isTSUnionType: pt1 , isTaggedTemplateExpression: ct1 , isThrowStatement: ht1 , isTypeAnnotation: lt2 , isUnaryLike: ut1 , isUnionTypeAnnotation: dt1 , isVariableDeclarator: ft1 , isWhileStatement: yt1 , isYieldExpression: mt1  } = k3;
const Tt1 = {
    "||": 0,
    "??": 0,
    "&&": 1,
    "|": 2,
    "^": 3,
    "&": 4,
    "==": 5,
    "===": 5,
    "!=": 5,
    "!==": 5,
    "<": 6,
    ">": 6,
    "<=": 6,
    ">=": 6,
    in: 6,
    instanceof: 6,
    ">>": 7,
    "<<": 7,
    ">>>": 7,
    "+": 8,
    "-": 8,
    "*": 9,
    "/": 9,
    "%": 9,
    "**": 10
};
const isClassExtendsClause = (t23, e10)=>(C4(e10) || v5(e10)) && e10.superClass === t23
;
const hasPostfixPart = (t24, e11)=>(H3(e11) || Y3(e11)) && e11.object === t24 || (O5(e11) || Q3(e11) || W4(e11)) && e11.callee === t24 || ct1(e11) && e11.tag === t24 || st1(e11)
;
function NullableTypeAnnotation$2(t, e12) {
    return w4(e12);
}
function FunctionTypeAnnotation$2(t, e13, i59) {
    return dt1(e13) || U3(e13) || w4(e13) || lt2(e13) && A4(i59[i59.length - 3]);
}
function UpdateExpression$2(t25, e14) {
    return hasPostfixPart(t25, e14) || isClassExtendsClause(t25, e14);
}
function ObjectExpression$2(t, e, i61) {
    return isFirstInContext(i61, {
        expressionStatement: true,
        arrowBody: true
    });
}
function DoExpression$2(t26, e, i71) {
    return !t26.async && isFirstInContext(i71, {
        expressionStatement: true
    });
}
function Binary(t27, e15) {
    if ("**" === t27.operator && I5(e15, {
        operator: "**"
    })) return e15.left === t27;
    if (isClassExtendsClause(t27, e15)) return true;
    if (hasPostfixPart(t27, e15) || ut1(e15) || P4(e15)) return true;
    if (D4(e15)) {
        const i81 = e15.operator;
        const n416 = Tt1[i81];
        const s215 = t27.operator;
        const r127 = Tt1[s215];
        if (n416 === r127 && e15.right === t27 && !R5(e15) || n416 > r127) return true;
    }
}
function UnionTypeAnnotation$2(t, e16) {
    return w4(e16) || V4(e16) || U3(e16) || dt1(e16);
}
function OptionalIndexedAccessType$2(t28, e17) {
    return q3(e17, {
        objectType: t28
    });
}
function TSAsExpression$2() {
    return true;
}
function TSTypeAssertion$2() {
    return true;
}
function TSUnionType$2(t, e18) {
    return et1(e18) || rt1(e18) || nt1(e18) || pt1(e18) || ot1(e18);
}
function TSInferType$2(t, e19) {
    return et1(e19) || rt1(e19);
}
function BinaryExpression$1(t29, e20) {
    return "in" === t29.operator && (ft1(e20) || N4(e20));
}
function SequenceExpression$2(t30, e21) {
    return !(K3(e21) || ht1(e21) || G3(e21) || X3(e21) && e21.test === t30 || yt1(e21) && e21.test === t30 || F5(e21) && e21.right === t30 || tt1(e21) && e21.discriminant === t30 || _5(e21) && e21.expression === t30);
}
function YieldExpression$2(t31, e22) {
    return D4(e22) || ut1(e22) || hasPostfixPart(t31, e22) || P4(e22) && mt1(t31) || B4(e22) && t31 === e22.test || isClassExtendsClause(t31, e22);
}
function ClassExpression$1(t, e, i91) {
    return isFirstInContext(i91, {
        expressionStatement: true,
        exportDefault: true
    });
}
function UnaryLike(t32, e23) {
    return hasPostfixPart(t32, e23) || I5(e23, {
        operator: "**",
        left: t32
    }) || isClassExtendsClause(t32, e23);
}
function FunctionExpression$2(t, e, i10) {
    return isFirstInContext(i10, {
        expressionStatement: true,
        exportDefault: true
    });
}
function ArrowFunctionExpression$2(t33, e24) {
    return j3(e24) || ConditionalExpression$2(t33, e24);
}
function ConditionalExpression$2(t34, e25) {
    return !!(ut1(e25) || D4(e25) || B4(e25, {
        test: t34
    }) || P4(e25) || at1(e25) || it1(e25)) || UnaryLike(t34, e25);
}
function OptionalMemberExpression$2(t35, e26) {
    return O5(e26, {
        callee: t35
    }) || H3(e26, {
        object: t35
    });
}
function AssignmentExpression$2(t36, e27) {
    return !!z3(t36.left) || ConditionalExpression$2(t36, e27);
}
function LogicalExpression$1(t37, e28) {
    switch(t37.operator){
        case "||":
            return !!R5(e28) && ("??" === e28.operator || "&&" === e28.operator);
        case "&&":
            return R5(e28, {
                operator: "??"
            });
        case "??":
            return R5(e28) && "??" !== e28.operator;
    }
}
function Identifier$2(t38, e29, i11) {
    if ("let" === t38.name) {
        const n515 = H3(e29, {
            object: t38,
            computed: true
        }) || Y3(e29, {
            object: t38,
            computed: true,
            optional: false
        });
        return isFirstInContext(i11, {
            expressionStatement: n515,
            forHead: n515,
            forInHead: n515,
            forOfHead: true
        });
    }
    return "async" === t38.name && J3(e29) && t38 === e29.left;
}
function isFirstInContext(t39, { expressionStatement: e30 = false , arrowBody: i12 = false , exportDefault: n615 = false , forHead: s314 = false , forInHead: r220 = false , forOfHead: o119 = false  }) {
    let a118 = t39.length - 1;
    let p115 = t39[a118];
    a118--;
    let c116 = t39[a118];
    while(a118 >= 0){
        if (e30 && _5(c116, {
            expression: p115
        }) || n615 && L4(c116, {
            declaration: p115
        }) || i12 && A4(c116, {
            body: p115
        }) || s314 && K3(c116, {
            init: p115
        }) || r220 && F5(c116, {
            left: p115
        }) || o119 && J3(c116, {
            left: p115
        })) return true;
        if (!(hasPostfixPart(p115, c116) && !W4(c116) || Z3(c116) && c116.expressions[0] === p115 || M3(c116, {
            test: p115
        }) || D4(c116, {
            left: p115
        }) || g5(c116, {
            left: p115
        }))) return false;
        p115 = c116;
        a118--;
        c116 = t39[a118];
    }
    return false;
}
var St1 = "default" in mod3 ? mod3.default : mod3;
var $t1 = {};
Object.defineProperty($t1, "__esModule", {
    value: true
});
$t1.needsParens = needsParens;
$t1.needsWhitespace = needsWhitespace;
$t1.needsWhitespaceAfter = needsWhitespaceAfter;
$t1.needsWhitespaceBefore = needsWhitespaceBefore;
var bt1 = n15;
var xt1 = E4;
var Et1 = St1;
const { FLIPPED_ALIAS_KEYS: kt1 , isCallExpression: wt1 , isExpressionStatement: At1 , isMemberExpression: gt2 , isNewExpression: Pt1  } = Et1;
function expandAliases(t40) {
    const e32 = {};
    function add(t41, i13) {
        const n715 = e32[t41];
        e32[t41] = n715 ? function(t42, e33, s412) {
            const r319 = n715(t42, e33, s412);
            return null == r319 ? i13(t42, e33, s412) : r319;
        } : i13;
    }
    for (const e31 of Object.keys(t40)){
        const i14 = kt1[e31];
        if (i14) for (const n813 of i14)add(n813, t40[e31]);
        else add(e31, t40[e31]);
    }
    return e32;
}
const Dt1 = expandAliases(xt1);
const It1 = expandAliases(bt1.nodes);
const Ot1 = expandAliases(bt1.list);
function find(t43, e34, i15, n913) {
    const s59 = t43[e34.type];
    return s59 ? s59(e34, i15, n913) : null;
}
function isOrHasCallExpression(t44) {
    return !!wt1(t44) || gt2(t44) && isOrHasCallExpression(t44.object);
}
function needsWhitespace(t45, e35, i16) {
    if (!t45) return 0;
    At1(t45) && (t45 = t45.expression);
    let n1013 = find(It1, t45, e35);
    if (!n1013) {
        const s63 = find(Ot1, t45, e35);
        if (s63) for(let e36 = 0; e36 < s63.length; e36++){
            n1013 = needsWhitespace(s63[e36], t45, i16);
            if (n1013) break;
        }
    }
    return "object" === typeof n1013 && null !== n1013 && n1013[i16] || 0;
}
function needsWhitespaceBefore(t46, e37) {
    return needsWhitespace(t46, e37, "before");
}
function needsWhitespaceAfter(t47, e38) {
    return needsWhitespace(t47, e38, "after");
}
function needsParens(t48, e39, i17) {
    return !!e39 && (!(!Pt1(e39) || e39.callee !== t48 || !isOrHasCallExpression(t48)) || find(Dt1, t48, e39, i17));
}
var Ct1 = {};
Object.defineProperty(Ct1, "__esModule", {
    value: true
});
Ct1.TaggedTemplateExpression = TaggedTemplateExpression$1;
Ct1.TemplateElement = TemplateElement$1;
Ct1.TemplateLiteral = TemplateLiteral$1;
function TaggedTemplateExpression$1(t49) {
    this.print(t49.tag, t49);
    this.print(t49.typeParameters, t49);
    this.print(t49.quasi, t49);
}
function TemplateElement$1(t50, e40) {
    const i18 = e40.quasis[0] === t50;
    const n1116 = e40.quasis[e40.quasis.length - 1] === t50;
    const s72 = (i18 ? "`" : "}") + t50.value.raw + (n1116 ? "`" : "${");
    this.token(s72);
}
function TemplateLiteral$1(t51) {
    const e41 = t51.quasis;
    for(let i19 = 0; i19 < e41.length; i19++){
        this.print(e41[i19], t51);
        i19 + 1 < e41.length && this.print(t51.expressions[i19], t51);
    }
}
var vt1 = "default" in mod3 ? mod3.default : mod3;
var Mt1 = {};
Object.defineProperty(Mt1, "__esModule", {
    value: true
});
Mt1.LogicalExpression = Mt1.BinaryExpression = Mt1.AssignmentExpression = AssignmentExpression$1;
Mt1.AssignmentPattern = AssignmentPattern$1;
Mt1.AwaitExpression = void 0;
Mt1.BindExpression = BindExpression$1;
Mt1.CallExpression = CallExpression$1;
Mt1.ConditionalExpression = ConditionalExpression$1;
Mt1.Decorator = Decorator$1;
Mt1.DoExpression = DoExpression$1;
Mt1.EmptyStatement = EmptyStatement$1;
Mt1.ExpressionStatement = ExpressionStatement$1;
Mt1.Import = Import$1;
Mt1.MemberExpression = MemberExpression$1;
Mt1.MetaProperty = MetaProperty$1;
Mt1.ModuleExpression = ModuleExpression$1;
Mt1.NewExpression = NewExpression$1;
Mt1.OptionalCallExpression = OptionalCallExpression$1;
Mt1.OptionalMemberExpression = OptionalMemberExpression$1;
Mt1.ParenthesizedExpression = ParenthesizedExpression$1;
Mt1.PrivateName = PrivateName$1;
Mt1.SequenceExpression = SequenceExpression$1;
Mt1.Super = Super$1;
Mt1.ThisExpression = ThisExpression$1;
Mt1.UnaryExpression = UnaryExpression$1;
Mt1.UpdateExpression = UpdateExpression$1;
Mt1.V8IntrinsicIdentifier = V8IntrinsicIdentifier$1;
Mt1.YieldExpression = void 0;
var Bt1 = vt1;
var jt1 = $t1;
const { isCallExpression: Lt1 , isLiteral: _t1 , isMemberExpression: Nt1 , isNewExpression: Ft1  } = Bt1;
function UnaryExpression$1(t52) {
    if ("void" === t52.operator || "delete" === t52.operator || "typeof" === t52.operator || "throw" === t52.operator) {
        this.word(t52.operator);
        this.space();
    } else this.token(t52.operator);
    this.print(t52.argument, t52);
}
function DoExpression$1(t53) {
    if (t53.async) {
        this.word("async");
        this.space();
    }
    this.word("do");
    this.space();
    this.print(t53.body, t53);
}
function ParenthesizedExpression$1(t54) {
    this.token("(");
    this.print(t54.expression, t54);
    this.token(")");
}
function UpdateExpression$1(t55) {
    if (t55.prefix) {
        this.token(t55.operator);
        this.print(t55.argument, t55);
    } else {
        this.startTerminatorless(true);
        this.print(t55.argument, t55);
        this.endTerminatorless();
        this.token(t55.operator);
    }
}
function ConditionalExpression$1(t56) {
    this.print(t56.test, t56);
    this.space();
    this.token("?");
    this.space();
    this.print(t56.consequent, t56);
    this.space();
    this.token(":");
    this.space();
    this.print(t56.alternate, t56);
}
function NewExpression$1(t57, e42) {
    this.word("new");
    this.space();
    this.print(t57.callee, t57);
    if (!this.format.minified || 0 !== t57.arguments.length || t57.optional || Lt1(e42, {
        callee: t57
    }) || Nt1(e42) || Ft1(e42)) {
        this.print(t57.typeArguments, t57);
        this.print(t57.typeParameters, t57);
        t57.optional && this.token("?.");
        this.token("(");
        this.printList(t57.arguments, t57);
        this.token(")");
    }
}
function SequenceExpression$1(t58) {
    this.printList(t58.expressions, t58);
}
function ThisExpression$1() {
    this.word("this");
}
function Super$1() {
    this.word("super");
}
function isDecoratorMemberExpression(t59) {
    switch(t59.type){
        case "Identifier":
            return true;
        case "MemberExpression":
            return !t59.computed && "Identifier" === t59.property.type && isDecoratorMemberExpression(t59.object);
        default:
            return false;
    }
}
function shouldParenthesizeDecoratorExpression(t60) {
    "CallExpression" === t60.type && (t60 = t60.callee);
    return "ParenthesizedExpression" !== t60.type && !isDecoratorMemberExpression(t60);
}
function Decorator$1(t61) {
    this.token("@");
    const { expression: e43  } = t61;
    if (shouldParenthesizeDecoratorExpression(e43)) {
        this.token("(");
        this.print(e43, t61);
        this.token(")");
    } else this.print(e43, t61);
    this.newline();
}
function OptionalMemberExpression$1(t62) {
    this.print(t62.object, t62);
    if (!t62.computed && Nt1(t62.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
    let e44 = t62.computed;
    _t1(t62.property) && "number" === typeof t62.property.value && (e44 = true);
    t62.optional && this.token("?.");
    if (e44) {
        this.token("[");
        this.print(t62.property, t62);
        this.token("]");
    } else {
        t62.optional || this.token(".");
        this.print(t62.property, t62);
    }
}
function OptionalCallExpression$1(t63) {
    this.print(t63.callee, t63);
    this.print(t63.typeArguments, t63);
    this.print(t63.typeParameters, t63);
    t63.optional && this.token("?.");
    this.token("(");
    this.printList(t63.arguments, t63);
    this.token(")");
}
function CallExpression$1(t64) {
    this.print(t64.callee, t64);
    this.print(t64.typeArguments, t64);
    this.print(t64.typeParameters, t64);
    this.token("(");
    this.printList(t64.arguments, t64);
    this.token(")");
}
function Import$1() {
    this.word("import");
}
function buildYieldAwait(t65) {
    return function(e45) {
        this.word(t65);
        e45.delegate && this.token("*");
        if (e45.argument) {
            this.space();
            const t66 = this.startTerminatorless();
            this.print(e45.argument, e45);
            this.endTerminatorless(t66);
        }
    };
}
const Jt1 = buildYieldAwait("yield");
Mt1.YieldExpression = Jt1;
const Kt1 = buildYieldAwait("await");
Mt1.AwaitExpression = Kt1;
function EmptyStatement$1() {
    this.semicolon(true);
}
function ExpressionStatement$1(t67) {
    this.print(t67.expression, t67);
    this.semicolon();
}
function AssignmentPattern$1(t68) {
    this.print(t68.left, t68);
    t68.left.optional && this.token("?");
    this.print(t68.left.typeAnnotation, t68);
    this.space();
    this.token("=");
    this.space();
    this.print(t68.right, t68);
}
function AssignmentExpression$1(t69, e46) {
    const i20 = this.inForStatementInitCounter && "in" === t69.operator && !jt1.needsParens(t69, e46);
    i20 && this.token("(");
    this.print(t69.left, t69);
    this.space();
    "in" === t69.operator || "instanceof" === t69.operator ? this.word(t69.operator) : this.token(t69.operator);
    this.space();
    this.print(t69.right, t69);
    i20 && this.token(")");
}
function BindExpression$1(t70) {
    this.print(t70.object, t70);
    this.token("::");
    this.print(t70.callee, t70);
}
function MemberExpression$1(t71) {
    this.print(t71.object, t71);
    if (!t71.computed && Nt1(t71.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
    let e47 = t71.computed;
    _t1(t71.property) && "number" === typeof t71.property.value && (e47 = true);
    if (e47) {
        this.token("[");
        this.print(t71.property, t71);
        this.token("]");
    } else {
        this.token(".");
        this.print(t71.property, t71);
    }
}
function MetaProperty$1(t72) {
    this.print(t72.meta, t72);
    this.token(".");
    this.print(t72.property, t72);
}
function PrivateName$1(t73) {
    this.token("#");
    this.print(t73.id, t73);
}
function V8IntrinsicIdentifier$1(t74) {
    this.token("%");
    this.word(t74.name);
}
function ModuleExpression$1(t75) {
    this.word("module");
    this.space();
    this.token("{");
    if (0 === t75.body.body.length) this.token("}");
    else {
        this.newline();
        this.printSequence(t75.body.body, t75, {
            indent: true
        });
        this.rightBrace();
    }
}
var Xt1 = "default" in mod3 ? mod3.default : mod3;
var qt1 = {};
Object.defineProperty(qt1, "__esModule", {
    value: true
});
qt1.BreakStatement = void 0;
qt1.CatchClause = CatchClause$1;
qt1.ContinueStatement = void 0;
qt1.DebuggerStatement = DebuggerStatement$1;
qt1.DoWhileStatement = DoWhileStatement$1;
qt1.ForOfStatement = qt1.ForInStatement = void 0;
qt1.ForStatement = ForStatement$1;
qt1.IfStatement = IfStatement$1;
qt1.LabeledStatement = LabeledStatement$1;
qt1.ReturnStatement = void 0;
qt1.SwitchCase = SwitchCase$1;
qt1.SwitchStatement = SwitchStatement$1;
qt1.ThrowStatement = void 0;
qt1.TryStatement = TryStatement$1;
qt1.VariableDeclaration = VariableDeclaration$1;
qt1.VariableDeclarator = VariableDeclarator$1;
qt1.WhileStatement = WhileStatement$1;
qt1.WithStatement = WithStatement$1;
var Ut1 = Xt1;
const { isFor: Rt1 , isForStatement: Ht1 , isIfStatement: Wt1 , isStatement: Vt1  } = Ut1;
function WithStatement$1(t76) {
    this.word("with");
    this.space();
    this.token("(");
    this.print(t76.object, t76);
    this.token(")");
    this.printBlock(t76);
}
function IfStatement$1(t77) {
    this.word("if");
    this.space();
    this.token("(");
    this.print(t77.test, t77);
    this.token(")");
    this.space();
    const e48 = t77.alternate && Wt1(getLastStatement(t77.consequent));
    if (e48) {
        this.token("{");
        this.newline();
        this.indent();
    }
    this.printAndIndentOnComments(t77.consequent, t77);
    if (e48) {
        this.dedent();
        this.newline();
        this.token("}");
    }
    if (t77.alternate) {
        this.endsWith(125) && this.space();
        this.word("else");
        this.space();
        this.printAndIndentOnComments(t77.alternate, t77);
    }
}
function getLastStatement(t78) {
    return Vt1(t78.body) ? getLastStatement(t78.body) : t78;
}
function ForStatement$1(t79) {
    this.word("for");
    this.space();
    this.token("(");
    this.inForStatementInitCounter++;
    this.print(t79.init, t79);
    this.inForStatementInitCounter--;
    this.token(";");
    if (t79.test) {
        this.space();
        this.print(t79.test, t79);
    }
    this.token(";");
    if (t79.update) {
        this.space();
        this.print(t79.update, t79);
    }
    this.token(")");
    this.printBlock(t79);
}
function WhileStatement$1(t80) {
    this.word("while");
    this.space();
    this.token("(");
    this.print(t80.test, t80);
    this.token(")");
    this.printBlock(t80);
}
const buildForXStatement = function(t81) {
    return function(e49) {
        this.word("for");
        this.space();
        if ("of" === t81 && e49.await) {
            this.word("await");
            this.space();
        }
        this.token("(");
        this.print(e49.left, e49);
        this.space();
        this.word(t81);
        this.space();
        this.print(e49.right, e49);
        this.token(")");
        this.printBlock(e49);
    };
};
const zt1 = buildForXStatement("in");
qt1.ForInStatement = zt1;
const Qt1 = buildForXStatement("of");
qt1.ForOfStatement = Qt1;
function DoWhileStatement$1(t82) {
    this.word("do");
    this.space();
    this.print(t82.body, t82);
    this.space();
    this.word("while");
    this.space();
    this.token("(");
    this.print(t82.test, t82);
    this.token(")");
    this.semicolon();
}
function buildLabelStatement(t83, e50 = "label") {
    return function(i21) {
        this.word(t83);
        const n1212 = i21[e50];
        if (n1212) {
            this.space();
            const t84 = "label" == e50;
            const s81 = this.startTerminatorless(t84);
            this.print(n1212, i21);
            this.endTerminatorless(s81);
        }
        this.semicolon();
    };
}
const Yt1 = buildLabelStatement("continue");
qt1.ContinueStatement = Yt1;
const Gt1 = buildLabelStatement("return", "argument");
qt1.ReturnStatement = Gt1;
const Zt1 = buildLabelStatement("break");
qt1.BreakStatement = Zt1;
const te3 = buildLabelStatement("throw", "argument");
qt1.ThrowStatement = te3;
function LabeledStatement$1(t85) {
    this.print(t85.label, t85);
    this.token(":");
    this.space();
    this.print(t85.body, t85);
}
function TryStatement$1(t86) {
    this.word("try");
    this.space();
    this.print(t86.block, t86);
    this.space();
    t86.handlers ? this.print(t86.handlers[0], t86) : this.print(t86.handler, t86);
    if (t86.finalizer) {
        this.space();
        this.word("finally");
        this.space();
        this.print(t86.finalizer, t86);
    }
}
function CatchClause$1(t87) {
    this.word("catch");
    this.space();
    if (t87.param) {
        this.token("(");
        this.print(t87.param, t87);
        this.print(t87.param.typeAnnotation, t87);
        this.token(")");
        this.space();
    }
    this.print(t87.body, t87);
}
function SwitchStatement$1(t88) {
    this.word("switch");
    this.space();
    this.token("(");
    this.print(t88.discriminant, t88);
    this.token(")");
    this.space();
    this.token("{");
    this.printSequence(t88.cases, t88, {
        indent: true,
        addNewlines (e51, i22) {
            if (!e51 && t88.cases[t88.cases.length - 1] === i22) return -1;
        }
    });
    this.token("}");
}
function SwitchCase$1(t89) {
    if (t89.test) {
        this.word("case");
        this.space();
        this.print(t89.test, t89);
        this.token(":");
    } else {
        this.word("default");
        this.token(":");
    }
    if (t89.consequent.length) {
        this.newline();
        this.printSequence(t89.consequent, t89, {
            indent: true
        });
    }
}
function DebuggerStatement$1() {
    this.word("debugger");
    this.semicolon();
}
function variableDeclarationIndent() {
    this.token(",");
    this.newline();
    if (this.endsWith(10)) for(let t90 = 0; t90 < 4; t90++)this.space(true);
}
function constDeclarationIndent() {
    this.token(",");
    this.newline();
    if (this.endsWith(10)) for(let t91 = 0; t91 < 6; t91++)this.space(true);
}
function VariableDeclaration$1(t92, e53) {
    if (t92.declare) {
        this.word("declare");
        this.space();
    }
    this.word(t92.kind);
    this.space();
    let i23 = false;
    if (!Rt1(e53)) for (const e52 of t92.declarations)e52.init && (i23 = true);
    let n1310;
    i23 && (n1310 = "const" === t92.kind ? constDeclarationIndent : variableDeclarationIndent);
    this.printList(t92.declarations, t92, {
        separator: n1310
    });
    if (Rt1(e53)) {
        if (Ht1(e53)) {
            if (e53.init === t92) return;
        } else if (e53.left === t92) return;
    }
    this.semicolon();
}
function VariableDeclarator$1(t93) {
    this.print(t93.id, t93);
    t93.definite && this.token("!");
    this.print(t93.id.typeAnnotation, t93);
    if (t93.init) {
        this.space();
        this.token("=");
        this.space();
        this.print(t93.init, t93);
    }
}
var ee3 = "default" in mod3 ? mod3.default : mod3;
var ie3 = {};
Object.defineProperty(ie3, "__esModule", {
    value: true
});
ie3.ClassAccessorProperty = ClassAccessorProperty$1;
ie3.ClassBody = ClassBody$1;
ie3.ClassExpression = ie3.ClassDeclaration = ClassDeclaration$1;
ie3.ClassMethod = ClassMethod$1;
ie3.ClassPrivateMethod = ClassPrivateMethod$1;
ie3.ClassPrivateProperty = ClassPrivateProperty$1;
ie3.ClassProperty = ClassProperty$1;
ie3.StaticBlock = StaticBlock$1;
ie3._classMethodHead = _classMethodHead$1;
var ne3 = ee3;
const { isExportDefaultDeclaration: se2 , isExportNamedDeclaration: re3  } = ne3;
function ClassDeclaration$1(t94, e54) {
    this.format.decoratorsBeforeExport && (se2(e54) || re3(e54)) || this.printJoin(t94.decorators, t94);
    if (t94.declare) {
        this.word("declare");
        this.space();
    }
    if (t94.abstract) {
        this.word("abstract");
        this.space();
    }
    this.word("class");
    this.printInnerComments(t94);
    if (t94.id) {
        this.space();
        this.print(t94.id, t94);
    }
    this.print(t94.typeParameters, t94);
    if (t94.superClass) {
        this.space();
        this.word("extends");
        this.space();
        this.print(t94.superClass, t94);
        this.print(t94.superTypeParameters, t94);
    }
    if (t94.implements) {
        this.space();
        this.word("implements");
        this.space();
        this.printList(t94.implements, t94);
    }
    this.space();
    this.print(t94.body, t94);
}
function ClassBody$1(t95) {
    this.token("{");
    this.printInnerComments(t95);
    if (0 === t95.body.length) this.token("}");
    else {
        this.newline();
        this.indent();
        this.printSequence(t95.body, t95);
        this.dedent();
        this.endsWith(10) || this.newline();
        this.rightBrace();
    }
}
function ClassProperty$1(t96) {
    this.printJoin(t96.decorators, t96);
    this.source("end", t96.key.loc);
    this.tsPrintClassMemberModifiers(t96, true);
    if (t96.computed) {
        this.token("[");
        this.print(t96.key, t96);
        this.token("]");
    } else {
        this._variance(t96);
        this.print(t96.key, t96);
    }
    t96.optional && this.token("?");
    t96.definite && this.token("!");
    this.print(t96.typeAnnotation, t96);
    if (t96.value) {
        this.space();
        this.token("=");
        this.space();
        this.print(t96.value, t96);
    }
    this.semicolon();
}
function ClassAccessorProperty$1(t97) {
    this.printJoin(t97.decorators, t97);
    this.source("end", t97.key.loc);
    this.tsPrintClassMemberModifiers(t97, true);
    this.word("accessor");
    this.printInnerComments(t97);
    this.space();
    if (t97.computed) {
        this.token("[");
        this.print(t97.key, t97);
        this.token("]");
    } else {
        this._variance(t97);
        this.print(t97.key, t97);
    }
    t97.optional && this.token("?");
    t97.definite && this.token("!");
    this.print(t97.typeAnnotation, t97);
    if (t97.value) {
        this.space();
        this.token("=");
        this.space();
        this.print(t97.value, t97);
    }
    this.semicolon();
}
function ClassPrivateProperty$1(t98) {
    this.printJoin(t98.decorators, t98);
    if (t98.static) {
        this.word("static");
        this.space();
    }
    this.print(t98.key, t98);
    this.print(t98.typeAnnotation, t98);
    if (t98.value) {
        this.space();
        this.token("=");
        this.space();
        this.print(t98.value, t98);
    }
    this.semicolon();
}
function ClassMethod$1(t99) {
    this._classMethodHead(t99);
    this.space();
    this.print(t99.body, t99);
}
function ClassPrivateMethod$1(t100) {
    this._classMethodHead(t100);
    this.space();
    this.print(t100.body, t100);
}
function _classMethodHead$1(t101) {
    this.printJoin(t101.decorators, t101);
    this.source("end", t101.key.loc);
    this.tsPrintClassMemberModifiers(t101, false);
    this._methodHead(t101);
}
function StaticBlock$1(t102) {
    this.word("static");
    this.space();
    this.token("{");
    if (0 === t102.body.length) this.token("}");
    else {
        this.newline();
        this.printSequence(t102.body, t102, {
            indent: true
        });
        this.rightBrace();
    }
}
var oe3 = "default" in mod3 ? mod3.default : mod3;
var ae3 = {};
Object.defineProperty(ae3, "__esModule", {
    value: true
});
ae3.ArrowFunctionExpression = ArrowFunctionExpression$1;
ae3.FunctionDeclaration = ae3.FunctionExpression = FunctionExpression$1;
ae3._functionHead = _functionHead$1;
ae3._methodHead = _methodHead$1;
ae3._param = _param$1;
ae3._parameters = _parameters$1;
ae3._params = _params$1;
ae3._predicate = _predicate$1;
var pe1 = oe3;
const { isIdentifier: ce1  } = pe1;
function _params$1(t103) {
    this.print(t103.typeParameters, t103);
    this.token("(");
    this._parameters(t103.params, t103);
    this.token(")");
    this.print(t103.returnType, t103);
}
function _parameters$1(t104, e55) {
    for(let i24 = 0; i24 < t104.length; i24++){
        this._param(t104[i24], e55);
        if (i24 < t104.length - 1) {
            this.token(",");
            this.space();
        }
    }
}
function _param$1(t105, e56) {
    this.printJoin(t105.decorators, t105);
    this.print(t105, e56);
    t105.optional && this.token("?");
    this.print(t105.typeAnnotation, t105);
}
function _methodHead$1(t106) {
    const e57 = t106.kind;
    const i25 = t106.key;
    if ("get" === e57 || "set" === e57) {
        this.word(e57);
        this.space();
    }
    if (t106.async) {
        this._catchUp("start", i25.loc);
        this.word("async");
        this.space();
    }
    "method" !== e57 && "init" !== e57 || t106.generator && this.token("*");
    if (t106.computed) {
        this.token("[");
        this.print(i25, t106);
        this.token("]");
    } else this.print(i25, t106);
    t106.optional && this.token("?");
    this._params(t106);
}
function _predicate$1(t107) {
    if (t107.predicate) {
        t107.returnType || this.token(":");
        this.space();
        this.print(t107.predicate, t107);
    }
}
function _functionHead$1(t108) {
    if (t108.async) {
        this.word("async");
        this.space();
    }
    this.word("function");
    t108.generator && this.token("*");
    this.printInnerComments(t108);
    this.space();
    t108.id && this.print(t108.id, t108);
    this._params(t108);
    this._predicate(t108);
}
function FunctionExpression$1(t109) {
    this._functionHead(t109);
    this.space();
    this.print(t109.body, t109);
}
function ArrowFunctionExpression$1(t110) {
    if (t110.async) {
        this.word("async");
        this.space();
    }
    const e58 = t110.params[0];
    this.format.retainLines || this.format.auxiliaryCommentBefore || this.format.auxiliaryCommentAfter || 1 !== t110.params.length || !ce1(e58) || hasTypesOrComments(t110, e58) ? this._params(t110) : this.print(e58, t110);
    this._predicate(t110);
    this.space();
    this.token("=>");
    this.space();
    this.print(t110.body, t110);
}
function hasTypesOrComments(t111, e59) {
    var i26, n1410;
    return !!(t111.typeParameters || t111.returnType || t111.predicate || e59.typeAnnotation || e59.optional || null != (i26 = e59.leadingComments) && i26.length || null != (n1410 = e59.trailingComments) && n1410.length);
}
var he1 = "default" in mod3 ? mod3.default : mod3;
var le1 = {};
Object.defineProperty(le1, "__esModule", {
    value: true
});
le1.ExportAllDeclaration = ExportAllDeclaration$1;
le1.ExportDefaultDeclaration = ExportDefaultDeclaration$1;
le1.ExportDefaultSpecifier = ExportDefaultSpecifier$1;
le1.ExportNamedDeclaration = ExportNamedDeclaration$1;
le1.ExportNamespaceSpecifier = ExportNamespaceSpecifier$1;
le1.ExportSpecifier = ExportSpecifier$1;
le1.ImportAttribute = ImportAttribute$1;
le1.ImportDeclaration = ImportDeclaration$1;
le1.ImportDefaultSpecifier = ImportDefaultSpecifier$1;
le1.ImportNamespaceSpecifier = ImportNamespaceSpecifier$1;
le1.ImportSpecifier = ImportSpecifier$1;
var ue1 = he1;
const { isClassDeclaration: de1 , isExportDefaultSpecifier: fe1 , isExportNamespaceSpecifier: ye1 , isImportDefaultSpecifier: me1 , isImportNamespaceSpecifier: Te1 , isStatement: Se1  } = ue1;
function ImportSpecifier$1(t112) {
    if ("type" === t112.importKind || "typeof" === t112.importKind) {
        this.word(t112.importKind);
        this.space();
    }
    this.print(t112.imported, t112);
    if (t112.local && t112.local.name !== t112.imported.name) {
        this.space();
        this.word("as");
        this.space();
        this.print(t112.local, t112);
    }
}
function ImportDefaultSpecifier$1(t113) {
    this.print(t113.local, t113);
}
function ExportDefaultSpecifier$1(t114) {
    this.print(t114.exported, t114);
}
function ExportSpecifier$1(t115) {
    if ("type" === t115.exportKind) {
        this.word("type");
        this.space();
    }
    this.print(t115.local, t115);
    if (t115.exported && t115.local.name !== t115.exported.name) {
        this.space();
        this.word("as");
        this.space();
        this.print(t115.exported, t115);
    }
}
function ExportNamespaceSpecifier$1(t116) {
    this.token("*");
    this.space();
    this.word("as");
    this.space();
    this.print(t116.exported, t116);
}
function ExportAllDeclaration$1(t117) {
    this.word("export");
    this.space();
    if ("type" === t117.exportKind) {
        this.word("type");
        this.space();
    }
    this.token("*");
    this.space();
    this.word("from");
    this.space();
    this.print(t117.source, t117);
    this.printAssertions(t117);
    this.semicolon();
}
function ExportNamedDeclaration$1(t118) {
    this.format.decoratorsBeforeExport && de1(t118.declaration) && this.printJoin(t118.declaration.decorators, t118);
    this.word("export");
    this.space();
    ExportDeclaration.apply(this, arguments);
}
function ExportDefaultDeclaration$1(t119) {
    this.format.decoratorsBeforeExport && de1(t119.declaration) && this.printJoin(t119.declaration.decorators, t119);
    this.word("export");
    this.space();
    this.word("default");
    this.space();
    ExportDeclaration.apply(this, arguments);
}
function ExportDeclaration(t120) {
    if (t120.declaration) {
        const e60 = t120.declaration;
        this.print(e60, t120);
        Se1(e60) || this.semicolon();
    } else {
        if ("type" === t120.exportKind) {
            this.word("type");
            this.space();
        }
        const e61 = t120.specifiers.slice(0);
        let i27 = false;
        for(;;){
            const n1510 = e61[0];
            if (!fe1(n1510) && !ye1(n1510)) break;
            i27 = true;
            this.print(e61.shift(), t120);
            if (e61.length) {
                this.token(",");
                this.space();
            }
        }
        if (e61.length || !e61.length && !i27) {
            this.token("{");
            if (e61.length) {
                this.space();
                this.printList(e61, t120);
                this.space();
            }
            this.token("}");
        }
        if (t120.source) {
            this.space();
            this.word("from");
            this.space();
            this.print(t120.source, t120);
            this.printAssertions(t120);
        }
        this.semicolon();
    }
}
function ImportDeclaration$1(t121) {
    this.word("import");
    this.space();
    const e62 = "type" === t121.importKind || "typeof" === t121.importKind;
    if (e62) {
        this.word(t121.importKind);
        this.space();
    }
    const i28 = t121.specifiers.slice(0);
    const n16 = !!i28.length;
    while(n16){
        const e63 = i28[0];
        if (!me1(e63) && !Te1(e63)) break;
        this.print(i28.shift(), t121);
        if (i28.length) {
            this.token(",");
            this.space();
        }
    }
    if (i28.length) {
        this.token("{");
        this.space();
        this.printList(i28, t121);
        this.space();
        this.token("}");
    } else if (e62 && !n16) {
        this.token("{");
        this.token("}");
    }
    if (n16 || e62) {
        this.space();
        this.word("from");
        this.space();
    }
    this.print(t121.source, t121);
    this.printAssertions(t121);
    var s91;
    if (null != (s91 = t121.attributes) && s91.length) {
        this.space();
        this.word("with");
        this.space();
        this.printList(t121.attributes, t121);
    }
    this.semicolon();
}
function ImportAttribute$1(t122) {
    this.print(t122.key);
    this.token(":");
    this.space();
    this.print(t122.value);
}
function ImportNamespaceSpecifier$1(t123) {
    this.token("*");
    this.space();
    this.word("as");
    this.space();
    this.print(t123.local, t123);
}
var $e1 = "default" in mod3 ? mod3.default : mod3;
var be1 = "default" in mod11 ? mod11.default : mod11;
var xe1 = {};
Object.defineProperty(xe1, "__esModule", {
    value: true
});
xe1.ArgumentPlaceholder = ArgumentPlaceholder$1;
xe1.ArrayPattern = xe1.ArrayExpression = ArrayExpression$1;
xe1.BigIntLiteral = BigIntLiteral$1;
xe1.BooleanLiteral = BooleanLiteral$1;
xe1.DecimalLiteral = DecimalLiteral$1;
xe1.Identifier = Identifier$1;
xe1.NullLiteral = NullLiteral$1;
xe1.NumericLiteral = NumericLiteral$1;
xe1.ObjectPattern = xe1.ObjectExpression = ObjectExpression$1;
xe1.ObjectMethod = ObjectMethod$1;
xe1.ObjectProperty = ObjectProperty$1;
xe1.PipelineBareFunction = PipelineBareFunction$1;
xe1.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference$1;
xe1.PipelineTopicExpression = PipelineTopicExpression$1;
xe1.RecordExpression = RecordExpression$1;
xe1.RegExpLiteral = RegExpLiteral$1;
xe1.SpreadElement = xe1.RestElement = RestElement$1;
xe1.StringLiteral = StringLiteral$1;
xe1.TopicReference = TopicReference$1;
xe1.TupleExpression = TupleExpression$1;
var Ee1 = $e1;
var ke1 = be1;
const { isAssignmentPattern: we1 , isIdentifier: Ae1  } = Ee1;
function Identifier$1(t124) {
    this.exactSource(t124.loc, ()=>{
        this.word(t124.name);
    });
}
function ArgumentPlaceholder$1() {
    this.token("?");
}
function RestElement$1(t125) {
    this.token("...");
    this.print(t125.argument, t125);
}
function ObjectExpression$1(t126) {
    const e64 = t126.properties;
    this.token("{");
    this.printInnerComments(t126);
    if (e64.length) {
        this.space();
        this.printList(e64, t126, {
            indent: true,
            statement: true
        });
        this.space();
    }
    this.token("}");
}
function ObjectMethod$1(t127) {
    this.printJoin(t127.decorators, t127);
    this._methodHead(t127);
    this.space();
    this.print(t127.body, t127);
}
function ObjectProperty$1(t128) {
    this.printJoin(t128.decorators, t128);
    if (t128.computed) {
        this.token("[");
        this.print(t128.key, t128);
        this.token("]");
    } else {
        if (we1(t128.value) && Ae1(t128.key) && t128.key.name === t128.value.left.name) {
            this.print(t128.value, t128);
            return;
        }
        this.print(t128.key, t128);
        if (t128.shorthand && Ae1(t128.key) && Ae1(t128.value) && t128.key.name === t128.value.name) return;
    }
    this.token(":");
    this.space();
    this.print(t128.value, t128);
}
function ArrayExpression$1(t129) {
    const e65 = t129.elements;
    const i29 = e65.length;
    this.token("[");
    this.printInnerComments(t129);
    for(let n17 = 0; n17 < e65.length; n17++){
        const s101 = e65[n17];
        if (s101) {
            n17 > 0 && this.space();
            this.print(s101, t129);
            n17 < i29 - 1 && this.token(",");
        } else this.token(",");
    }
    this.token("]");
}
function RecordExpression$1(t130) {
    const e66 = t130.properties;
    let i30;
    let n18;
    if ("bar" === this.format.recordAndTupleSyntaxType) {
        i30 = "{|";
        n18 = "|}";
    } else {
        if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
        i30 = "#{";
        n18 = "}";
    }
    this.token(i30);
    this.printInnerComments(t130);
    if (e66.length) {
        this.space();
        this.printList(e66, t130, {
            indent: true,
            statement: true
        });
        this.space();
    }
    this.token(n18);
}
function TupleExpression$1(t131) {
    const e67 = t131.elements;
    const i31 = e67.length;
    let n20;
    let s11;
    if ("bar" === this.format.recordAndTupleSyntaxType) {
        n20 = "[|";
        s11 = "|]";
    } else {
        if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
        n20 = "#[";
        s11 = "]";
    }
    this.token(n20);
    this.printInnerComments(t131);
    for(let n19 = 0; n19 < e67.length; n19++){
        const s12 = e67[n19];
        if (s12) {
            n19 > 0 && this.space();
            this.print(s12, t131);
            n19 < i31 - 1 && this.token(",");
        }
    }
    this.token(s11);
}
function RegExpLiteral$1(t132) {
    this.word(`/${t132.pattern}/${t132.flags}`);
}
function BooleanLiteral$1(t133) {
    this.word(t133.value ? "true" : "false");
}
function NullLiteral$1() {
    this.word("null");
}
function NumericLiteral$1(t134) {
    const e68 = this.getPossibleRaw(t134);
    const i32 = this.format.jsescOption;
    const n21 = t134.value + "";
    i32.numbers ? this.number(ke1(t134.value, i32)) : null == e68 ? this.number(n21) : this.format.minified ? this.number(e68.length < n21.length ? e68 : n21) : this.number(e68);
}
function StringLiteral$1(t135) {
    const e69 = this.getPossibleRaw(t135);
    if (!this.format.minified && null != e69) {
        this.token(e69);
        return;
    }
    const i33 = ke1(t135.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {
        json: true
    }));
    return this.token(i33);
}
function BigIntLiteral$1(t136) {
    const e70 = this.getPossibleRaw(t136);
    this.format.minified || null == e70 ? this.word(t136.value + "n") : this.word(e70);
}
function DecimalLiteral$1(t137) {
    const e71 = this.getPossibleRaw(t137);
    this.format.minified || null == e71 ? this.word(t137.value + "m") : this.word(e71);
}
const ge1 = new Set([
    "^^",
    "@@",
    "^",
    "%",
    "#"
]);
function TopicReference$1() {
    const { topicToken: t138  } = this.format;
    if (!ge1.has(t138)) {
        const e72 = JSON.stringify(t138);
        const i34 = Array.from(ge1, (t139)=>JSON.stringify(t139)
        );
        throw new Error(`The "topicToken" generator option must be one of ${i34.join(", ")} (${e72} received instead).`);
    }
    this.token(t138);
}
function PipelineTopicExpression$1(t140) {
    this.print(t140.expression, t140);
}
function PipelineBareFunction$1(t141) {
    this.print(t141.callee, t141);
}
function PipelinePrimaryTopicReference$1() {
    this.token("#");
}
var Pe1 = "default" in mod3 ? mod3.default : mod3;
var De1 = {};
Object.defineProperty(De1, "__esModule", {
    value: true
});
De1.AnyTypeAnnotation = AnyTypeAnnotation$1;
De1.ArrayTypeAnnotation = ArrayTypeAnnotation$1;
De1.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation$1;
De1.BooleanTypeAnnotation = BooleanTypeAnnotation$1;
De1.DeclareClass = DeclareClass$1;
De1.DeclareExportAllDeclaration = DeclareExportAllDeclaration$1;
De1.DeclareExportDeclaration = DeclareExportDeclaration$1;
De1.DeclareFunction = DeclareFunction$1;
De1.DeclareInterface = DeclareInterface$1;
De1.DeclareModule = DeclareModule$1;
De1.DeclareModuleExports = DeclareModuleExports$1;
De1.DeclareOpaqueType = DeclareOpaqueType$1;
De1.DeclareTypeAlias = DeclareTypeAlias$1;
De1.DeclareVariable = DeclareVariable$1;
De1.DeclaredPredicate = DeclaredPredicate$1;
De1.EmptyTypeAnnotation = EmptyTypeAnnotation$1;
De1.EnumBooleanBody = EnumBooleanBody$1;
De1.EnumBooleanMember = EnumBooleanMember$1;
De1.EnumDeclaration = EnumDeclaration$1;
De1.EnumDefaultedMember = EnumDefaultedMember$1;
De1.EnumNumberBody = EnumNumberBody$1;
De1.EnumNumberMember = EnumNumberMember$1;
De1.EnumStringBody = EnumStringBody$1;
De1.EnumStringMember = EnumStringMember$1;
De1.EnumSymbolBody = EnumSymbolBody$1;
De1.ExistsTypeAnnotation = ExistsTypeAnnotation$1;
De1.FunctionTypeAnnotation = FunctionTypeAnnotation$1;
De1.FunctionTypeParam = FunctionTypeParam$1;
De1.IndexedAccessType = IndexedAccessType$1;
De1.InferredPredicate = InferredPredicate$1;
De1.InterfaceDeclaration = InterfaceDeclaration$1;
De1.GenericTypeAnnotation = De1.ClassImplements = De1.InterfaceExtends = InterfaceExtends$1;
De1.InterfaceTypeAnnotation = InterfaceTypeAnnotation$1;
De1.IntersectionTypeAnnotation = IntersectionTypeAnnotation$1;
De1.MixedTypeAnnotation = MixedTypeAnnotation$1;
De1.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation$1;
De1.NullableTypeAnnotation = NullableTypeAnnotation$1;
Object.defineProperty(De1, "NumberLiteralTypeAnnotation", {
    enumerable: true,
    get: function() {
        return Ce1.NumericLiteral;
    }
});
De1.NumberTypeAnnotation = NumberTypeAnnotation$1;
De1.ObjectTypeAnnotation = ObjectTypeAnnotation$1;
De1.ObjectTypeCallProperty = ObjectTypeCallProperty$1;
De1.ObjectTypeIndexer = ObjectTypeIndexer$1;
De1.ObjectTypeInternalSlot = ObjectTypeInternalSlot$1;
De1.ObjectTypeProperty = ObjectTypeProperty$1;
De1.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty$1;
De1.OpaqueType = OpaqueType$1;
De1.OptionalIndexedAccessType = OptionalIndexedAccessType$1;
De1.QualifiedTypeIdentifier = QualifiedTypeIdentifier$1;
Object.defineProperty(De1, "StringLiteralTypeAnnotation", {
    enumerable: true,
    get: function() {
        return Ce1.StringLiteral;
    }
});
De1.StringTypeAnnotation = StringTypeAnnotation$1;
De1.SymbolTypeAnnotation = SymbolTypeAnnotation$1;
De1.ThisTypeAnnotation = ThisTypeAnnotation$1;
De1.TupleTypeAnnotation = TupleTypeAnnotation$1;
De1.TypeAlias = TypeAlias$1;
De1.TypeAnnotation = TypeAnnotation$1;
De1.TypeCastExpression = TypeCastExpression$1;
De1.TypeParameter = TypeParameter$1;
De1.TypeParameterDeclaration = De1.TypeParameterInstantiation = TypeParameterInstantiation$1;
De1.TypeofTypeAnnotation = TypeofTypeAnnotation$1;
De1.UnionTypeAnnotation = UnionTypeAnnotation$1;
De1.Variance = Variance$1;
De1.VoidTypeAnnotation = VoidTypeAnnotation$1;
De1._interfaceish = _interfaceish$1;
De1._variance = _variance$1;
var Ie1 = Pe1;
var Oe1 = le1;
var Ce1 = xe1;
const { isDeclareExportDeclaration: ve2 , isStatement: Me1  } = Ie1;
function AnyTypeAnnotation$1() {
    this.word("any");
}
function ArrayTypeAnnotation$1(t142) {
    this.print(t142.elementType, t142);
    this.token("[");
    this.token("]");
}
function BooleanTypeAnnotation$1() {
    this.word("boolean");
}
function BooleanLiteralTypeAnnotation$1(t143) {
    this.word(t143.value ? "true" : "false");
}
function NullLiteralTypeAnnotation$1() {
    this.word("null");
}
function DeclareClass$1(t144, e73) {
    if (!ve2(e73)) {
        this.word("declare");
        this.space();
    }
    this.word("class");
    this.space();
    this._interfaceish(t144);
}
function DeclareFunction$1(t145, e74) {
    if (!ve2(e74)) {
        this.word("declare");
        this.space();
    }
    this.word("function");
    this.space();
    this.print(t145.id, t145);
    this.print(t145.id.typeAnnotation.typeAnnotation, t145);
    if (t145.predicate) {
        this.space();
        this.print(t145.predicate, t145);
    }
    this.semicolon();
}
function InferredPredicate$1() {
    this.token("%");
    this.word("checks");
}
function DeclaredPredicate$1(t146) {
    this.token("%");
    this.word("checks");
    this.token("(");
    this.print(t146.value, t146);
    this.token(")");
}
function DeclareInterface$1(t147) {
    this.word("declare");
    this.space();
    this.InterfaceDeclaration(t147);
}
function DeclareModule$1(t148) {
    this.word("declare");
    this.space();
    this.word("module");
    this.space();
    this.print(t148.id, t148);
    this.space();
    this.print(t148.body, t148);
}
function DeclareModuleExports$1(t149) {
    this.word("declare");
    this.space();
    this.word("module");
    this.token(".");
    this.word("exports");
    this.print(t149.typeAnnotation, t149);
}
function DeclareTypeAlias$1(t150) {
    this.word("declare");
    this.space();
    this.TypeAlias(t150);
}
function DeclareOpaqueType$1(t151, e75) {
    if (!ve2(e75)) {
        this.word("declare");
        this.space();
    }
    this.OpaqueType(t151);
}
function DeclareVariable$1(t152, e76) {
    if (!ve2(e76)) {
        this.word("declare");
        this.space();
    }
    this.word("var");
    this.space();
    this.print(t152.id, t152);
    this.print(t152.id.typeAnnotation, t152);
    this.semicolon();
}
function DeclareExportDeclaration$1(t153) {
    this.word("declare");
    this.space();
    this.word("export");
    this.space();
    if (t153.default) {
        this.word("default");
        this.space();
    }
    FlowExportDeclaration.apply(this, arguments);
}
function DeclareExportAllDeclaration$1() {
    this.word("declare");
    this.space();
    Oe1.ExportAllDeclaration.apply(this, arguments);
}
function EnumDeclaration$1(t154) {
    const { id: e77 , body: i35  } = t154;
    this.word("enum");
    this.space();
    this.print(e77, t154);
    this.print(i35, t154);
}
function enumExplicitType(t155, e78, i36) {
    if (i36) {
        t155.space();
        t155.word("of");
        t155.space();
        t155.word(e78);
    }
    t155.space();
}
function enumBody(t156, e79) {
    const { members: i37  } = e79;
    t156.token("{");
    t156.indent();
    t156.newline();
    for (const n22 of i37){
        t156.print(n22, e79);
        t156.newline();
    }
    if (e79.hasUnknownMembers) {
        t156.token("...");
        t156.newline();
    }
    t156.dedent();
    t156.token("}");
}
function EnumBooleanBody$1(t157) {
    const { explicitType: e80  } = t157;
    enumExplicitType(this, "boolean", e80);
    enumBody(this, t157);
}
function EnumNumberBody$1(t158) {
    const { explicitType: e81  } = t158;
    enumExplicitType(this, "number", e81);
    enumBody(this, t158);
}
function EnumStringBody$1(t159) {
    const { explicitType: e82  } = t159;
    enumExplicitType(this, "string", e82);
    enumBody(this, t159);
}
function EnumSymbolBody$1(t160) {
    enumExplicitType(this, "symbol", true);
    enumBody(this, t160);
}
function EnumDefaultedMember$1(t161) {
    const { id: e83  } = t161;
    this.print(e83, t161);
    this.token(",");
}
function enumInitializedMember(t162, e84) {
    const { id: i38 , init: n23  } = e84;
    t162.print(i38, e84);
    t162.space();
    t162.token("=");
    t162.space();
    t162.print(n23, e84);
    t162.token(",");
}
function EnumBooleanMember$1(t163) {
    enumInitializedMember(this, t163);
}
function EnumNumberMember$1(t164) {
    enumInitializedMember(this, t164);
}
function EnumStringMember$1(t165) {
    enumInitializedMember(this, t165);
}
function FlowExportDeclaration(t166) {
    if (t166.declaration) {
        const e85 = t166.declaration;
        this.print(e85, t166);
        Me1(e85) || this.semicolon();
    } else {
        this.token("{");
        if (t166.specifiers.length) {
            this.space();
            this.printList(t166.specifiers, t166);
            this.space();
        }
        this.token("}");
        if (t166.source) {
            this.space();
            this.word("from");
            this.space();
            this.print(t166.source, t166);
        }
        this.semicolon();
    }
}
function ExistsTypeAnnotation$1() {
    this.token("*");
}
function FunctionTypeAnnotation$1(t167, e86) {
    this.print(t167.typeParameters, t167);
    this.token("(");
    if (t167.this) {
        this.word("this");
        this.token(":");
        this.space();
        this.print(t167.this.typeAnnotation, t167);
        if (t167.params.length || t167.rest) {
            this.token(",");
            this.space();
        }
    }
    this.printList(t167.params, t167);
    if (t167.rest) {
        if (t167.params.length) {
            this.token(",");
            this.space();
        }
        this.token("...");
        this.print(t167.rest, t167);
    }
    this.token(")");
    if (e86 && ("ObjectTypeCallProperty" === e86.type || "DeclareFunction" === e86.type || "ObjectTypeProperty" === e86.type && e86.method)) this.token(":");
    else {
        this.space();
        this.token("=>");
    }
    this.space();
    this.print(t167.returnType, t167);
}
function FunctionTypeParam$1(t168) {
    this.print(t168.name, t168);
    t168.optional && this.token("?");
    if (t168.name) {
        this.token(":");
        this.space();
    }
    this.print(t168.typeAnnotation, t168);
}
function InterfaceExtends$1(t169) {
    this.print(t169.id, t169);
    this.print(t169.typeParameters, t169);
}
function _interfaceish$1(t170) {
    var e87;
    this.print(t170.id, t170);
    this.print(t170.typeParameters, t170);
    if (null != (e87 = t170.extends) && e87.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(t170.extends, t170);
    }
    if (t170.mixins && t170.mixins.length) {
        this.space();
        this.word("mixins");
        this.space();
        this.printList(t170.mixins, t170);
    }
    if (t170.implements && t170.implements.length) {
        this.space();
        this.word("implements");
        this.space();
        this.printList(t170.implements, t170);
    }
    this.space();
    this.print(t170.body, t170);
}
function _variance$1(t171) {
    t171.variance && ("plus" === t171.variance.kind ? this.token("+") : "minus" === t171.variance.kind && this.token("-"));
}
function InterfaceDeclaration$1(t172) {
    this.word("interface");
    this.space();
    this._interfaceish(t172);
}
function andSeparator() {
    this.space();
    this.token("&");
    this.space();
}
function InterfaceTypeAnnotation$1(t173) {
    this.word("interface");
    if (t173.extends && t173.extends.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(t173.extends, t173);
    }
    this.space();
    this.print(t173.body, t173);
}
function IntersectionTypeAnnotation$1(t174) {
    this.printJoin(t174.types, t174, {
        separator: andSeparator
    });
}
function MixedTypeAnnotation$1() {
    this.word("mixed");
}
function EmptyTypeAnnotation$1() {
    this.word("empty");
}
function NullableTypeAnnotation$1(t175) {
    this.token("?");
    this.print(t175.typeAnnotation, t175);
}
function NumberTypeAnnotation$1() {
    this.word("number");
}
function StringTypeAnnotation$1() {
    this.word("string");
}
function ThisTypeAnnotation$1() {
    this.word("this");
}
function TupleTypeAnnotation$1(t176) {
    this.token("[");
    this.printList(t176.types, t176);
    this.token("]");
}
function TypeofTypeAnnotation$1(t177) {
    this.word("typeof");
    this.space();
    this.print(t177.argument, t177);
}
function TypeAlias$1(t178) {
    this.word("type");
    this.space();
    this.print(t178.id, t178);
    this.print(t178.typeParameters, t178);
    this.space();
    this.token("=");
    this.space();
    this.print(t178.right, t178);
    this.semicolon();
}
function TypeAnnotation$1(t179) {
    this.token(":");
    this.space();
    t179.optional && this.token("?");
    this.print(t179.typeAnnotation, t179);
}
function TypeParameterInstantiation$1(t180) {
    this.token("<");
    this.printList(t180.params, t180, {});
    this.token(">");
}
function TypeParameter$1(t181) {
    this._variance(t181);
    this.word(t181.name);
    t181.bound && this.print(t181.bound, t181);
    if (t181.default) {
        this.space();
        this.token("=");
        this.space();
        this.print(t181.default, t181);
    }
}
function OpaqueType$1(t182) {
    this.word("opaque");
    this.space();
    this.word("type");
    this.space();
    this.print(t182.id, t182);
    this.print(t182.typeParameters, t182);
    if (t182.supertype) {
        this.token(":");
        this.space();
        this.print(t182.supertype, t182);
    }
    if (t182.impltype) {
        this.space();
        this.token("=");
        this.space();
        this.print(t182.impltype, t182);
    }
    this.semicolon();
}
function ObjectTypeAnnotation$1(t183) {
    t183.exact ? this.token("{|") : this.token("{");
    const e88 = [
        ...t183.properties,
        ...t183.callProperties || [],
        ...t183.indexers || [],
        ...t183.internalSlots || []
    ];
    if (e88.length) {
        this.space();
        this.printJoin(e88, t183, {
            addNewlines (t184) {
                if (t184 && !e88[0]) return 1;
            },
            indent: true,
            statement: true,
            iterator: ()=>{
                if (1 !== e88.length || t183.inexact) {
                    this.token(",");
                    this.space();
                }
            }
        });
        this.space();
    }
    if (t183.inexact) {
        this.indent();
        this.token("...");
        e88.length && this.newline();
        this.dedent();
    }
    t183.exact ? this.token("|}") : this.token("}");
}
function ObjectTypeInternalSlot$1(t185) {
    if (t185.static) {
        this.word("static");
        this.space();
    }
    this.token("[");
    this.token("[");
    this.print(t185.id, t185);
    this.token("]");
    this.token("]");
    t185.optional && this.token("?");
    if (!t185.method) {
        this.token(":");
        this.space();
    }
    this.print(t185.value, t185);
}
function ObjectTypeCallProperty$1(t186) {
    if (t186.static) {
        this.word("static");
        this.space();
    }
    this.print(t186.value, t186);
}
function ObjectTypeIndexer$1(t187) {
    if (t187.static) {
        this.word("static");
        this.space();
    }
    this._variance(t187);
    this.token("[");
    if (t187.id) {
        this.print(t187.id, t187);
        this.token(":");
        this.space();
    }
    this.print(t187.key, t187);
    this.token("]");
    this.token(":");
    this.space();
    this.print(t187.value, t187);
}
function ObjectTypeProperty$1(t188) {
    if (t188.proto) {
        this.word("proto");
        this.space();
    }
    if (t188.static) {
        this.word("static");
        this.space();
    }
    if ("get" === t188.kind || "set" === t188.kind) {
        this.word(t188.kind);
        this.space();
    }
    this._variance(t188);
    this.print(t188.key, t188);
    t188.optional && this.token("?");
    if (!t188.method) {
        this.token(":");
        this.space();
    }
    this.print(t188.value, t188);
}
function ObjectTypeSpreadProperty$1(t189) {
    this.token("...");
    this.print(t189.argument, t189);
}
function QualifiedTypeIdentifier$1(t190) {
    this.print(t190.qualification, t190);
    this.token(".");
    this.print(t190.id, t190);
}
function SymbolTypeAnnotation$1() {
    this.word("symbol");
}
function orSeparator() {
    this.space();
    this.token("|");
    this.space();
}
function UnionTypeAnnotation$1(t191) {
    this.printJoin(t191.types, t191, {
        separator: orSeparator
    });
}
function TypeCastExpression$1(t192) {
    this.token("(");
    this.print(t192.expression, t192);
    this.print(t192.typeAnnotation, t192);
    this.token(")");
}
function Variance$1(t193) {
    "plus" === t193.kind ? this.token("+") : this.token("-");
}
function VoidTypeAnnotation$1() {
    this.word("void");
}
function IndexedAccessType$1(t194) {
    this.print(t194.objectType, t194);
    this.token("[");
    this.print(t194.indexType, t194);
    this.token("]");
}
function OptionalIndexedAccessType$1(t195) {
    this.print(t195.objectType, t195);
    t195.optional && this.token("?.");
    this.token("[");
    this.print(t195.indexType, t195);
    this.token("]");
}
var Be1 = {};
Object.defineProperty(Be1, "__esModule", {
    value: true
});
Be1.BlockStatement = BlockStatement$1;
Be1.Directive = Directive$1;
Be1.DirectiveLiteral = DirectiveLiteral$1;
Be1.File = File$1;
Be1.InterpreterDirective = InterpreterDirective$1;
Be1.Placeholder = Placeholder$1;
Be1.Program = Program$1;
function File$1(t196) {
    t196.program && this.print(t196.program.interpreter, t196);
    this.print(t196.program, t196);
}
function Program$1(t197) {
    this.printInnerComments(t197, false);
    this.printSequence(t197.directives, t197);
    t197.directives && t197.directives.length && this.newline();
    this.printSequence(t197.body, t197);
}
function BlockStatement$1(t198) {
    var e89;
    this.token("{");
    this.printInnerComments(t198);
    const i39 = null == (e89 = t198.directives) ? void 0 : e89.length;
    if (t198.body.length || i39) {
        this.newline();
        this.printSequence(t198.directives, t198, {
            indent: true
        });
        i39 && this.newline();
        this.printSequence(t198.body, t198, {
            indent: true
        });
        this.removeTrailingNewline();
        this.source("end", t198.loc);
        this.endsWith(10) || this.newline();
        this.rightBrace();
    } else {
        this.source("end", t198.loc);
        this.token("}");
    }
}
function Directive$1(t199) {
    this.print(t199.value, t199);
    this.semicolon();
}
const je1 = /(?:^|[^\\])(?:\\\\)*'/;
const Le1 = /(?:^|[^\\])(?:\\\\)*"/;
function DirectiveLiteral$1(t200) {
    const e90 = this.getPossibleRaw(t200);
    if (!this.format.minified && null != e90) {
        this.token(e90);
        return;
    }
    const { value: i40  } = t200;
    if (Le1.test(i40)) {
        if (je1.test(i40)) throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
        this.token(`'${i40}'`);
    } else this.token(`"${i40}"`);
}
function InterpreterDirective$1(t201) {
    this.token(`#!${t201.value}\n`);
}
function Placeholder$1(t202) {
    this.token("%%");
    this.print(t202.name);
    this.token("%%");
    "Statement" === t202.expectedNode && this.semicolon();
}
var _e1 = {};
Object.defineProperty(_e1, "__esModule", {
    value: true
});
_e1.JSXAttribute = JSXAttribute$1;
_e1.JSXClosingElement = JSXClosingElement$1;
_e1.JSXClosingFragment = JSXClosingFragment$1;
_e1.JSXElement = JSXElement$1;
_e1.JSXEmptyExpression = JSXEmptyExpression$1;
_e1.JSXExpressionContainer = JSXExpressionContainer$1;
_e1.JSXFragment = JSXFragment$1;
_e1.JSXIdentifier = JSXIdentifier$1;
_e1.JSXMemberExpression = JSXMemberExpression$1;
_e1.JSXNamespacedName = JSXNamespacedName$1;
_e1.JSXOpeningElement = JSXOpeningElement$1;
_e1.JSXOpeningFragment = JSXOpeningFragment$1;
_e1.JSXSpreadAttribute = JSXSpreadAttribute$1;
_e1.JSXSpreadChild = JSXSpreadChild$1;
_e1.JSXText = JSXText$1;
function JSXAttribute$1(t203) {
    this.print(t203.name, t203);
    if (t203.value) {
        this.token("=");
        this.print(t203.value, t203);
    }
}
function JSXIdentifier$1(t204) {
    this.word(t204.name);
}
function JSXNamespacedName$1(t205) {
    this.print(t205.namespace, t205);
    this.token(":");
    this.print(t205.name, t205);
}
function JSXMemberExpression$1(t206) {
    this.print(t206.object, t206);
    this.token(".");
    this.print(t206.property, t206);
}
function JSXSpreadAttribute$1(t207) {
    this.token("{");
    this.token("...");
    this.print(t207.argument, t207);
    this.token("}");
}
function JSXExpressionContainer$1(t208) {
    this.token("{");
    this.print(t208.expression, t208);
    this.token("}");
}
function JSXSpreadChild$1(t209) {
    this.token("{");
    this.token("...");
    this.print(t209.expression, t209);
    this.token("}");
}
function JSXText$1(t210) {
    const e91 = this.getPossibleRaw(t210);
    null != e91 ? this.token(e91) : this.token(t210.value);
}
function JSXElement$1(t211) {
    const e92 = t211.openingElement;
    this.print(e92, t211);
    if (!e92.selfClosing) {
        this.indent();
        for (const e93 of t211.children)this.print(e93, t211);
        this.dedent();
        this.print(t211.closingElement, t211);
    }
}
function spaceSeparator() {
    this.space();
}
function JSXOpeningElement$1(t212) {
    this.token("<");
    this.print(t212.name, t212);
    this.print(t212.typeParameters, t212);
    if (t212.attributes.length > 0) {
        this.space();
        this.printJoin(t212.attributes, t212, {
            separator: spaceSeparator
        });
    }
    if (t212.selfClosing) {
        this.space();
        this.token("/>");
    } else this.token(">");
}
function JSXClosingElement$1(t213) {
    this.token("</");
    this.print(t213.name, t213);
    this.token(">");
}
function JSXEmptyExpression$1(t214) {
    this.printInnerComments(t214);
}
function JSXFragment$1(t215) {
    this.print(t215.openingFragment, t215);
    this.indent();
    for (const e94 of t215.children)this.print(e94, t215);
    this.dedent();
    this.print(t215.closingFragment, t215);
}
function JSXOpeningFragment$1() {
    this.token("<");
    this.token(">");
}
function JSXClosingFragment$1() {
    this.token("</");
    this.token(">");
}
var Ne1 = {};
Object.defineProperty(Ne1, "__esModule", {
    value: true
});
Ne1.TSAnyKeyword = TSAnyKeyword$1;
Ne1.TSArrayType = TSArrayType$1;
Ne1.TSAsExpression = TSAsExpression$1;
Ne1.TSBigIntKeyword = TSBigIntKeyword$1;
Ne1.TSBooleanKeyword = TSBooleanKeyword$1;
Ne1.TSCallSignatureDeclaration = TSCallSignatureDeclaration$1;
Ne1.TSConditionalType = TSConditionalType$1;
Ne1.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration$1;
Ne1.TSConstructorType = TSConstructorType$1;
Ne1.TSDeclareFunction = TSDeclareFunction$1;
Ne1.TSDeclareMethod = TSDeclareMethod$1;
Ne1.TSEnumDeclaration = TSEnumDeclaration$1;
Ne1.TSEnumMember = TSEnumMember$1;
Ne1.TSExportAssignment = TSExportAssignment$1;
Ne1.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments$1;
Ne1.TSExternalModuleReference = TSExternalModuleReference$1;
Ne1.TSFunctionType = TSFunctionType$1;
Ne1.TSImportEqualsDeclaration = TSImportEqualsDeclaration$1;
Ne1.TSImportType = TSImportType$1;
Ne1.TSIndexSignature = TSIndexSignature$1;
Ne1.TSIndexedAccessType = TSIndexedAccessType$1;
Ne1.TSInferType = TSInferType$1;
Ne1.TSInterfaceBody = TSInterfaceBody$1;
Ne1.TSInterfaceDeclaration = TSInterfaceDeclaration$1;
Ne1.TSIntersectionType = TSIntersectionType$1;
Ne1.TSIntrinsicKeyword = TSIntrinsicKeyword$1;
Ne1.TSLiteralType = TSLiteralType$1;
Ne1.TSMappedType = TSMappedType$1;
Ne1.TSMethodSignature = TSMethodSignature$1;
Ne1.TSModuleBlock = TSModuleBlock$1;
Ne1.TSModuleDeclaration = TSModuleDeclaration$1;
Ne1.TSNamedTupleMember = TSNamedTupleMember$1;
Ne1.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration$1;
Ne1.TSNeverKeyword = TSNeverKeyword$1;
Ne1.TSNonNullExpression = TSNonNullExpression$1;
Ne1.TSNullKeyword = TSNullKeyword$1;
Ne1.TSNumberKeyword = TSNumberKeyword$1;
Ne1.TSObjectKeyword = TSObjectKeyword$1;
Ne1.TSOptionalType = TSOptionalType$1;
Ne1.TSParameterProperty = TSParameterProperty$1;
Ne1.TSParenthesizedType = TSParenthesizedType$1;
Ne1.TSPropertySignature = TSPropertySignature$1;
Ne1.TSQualifiedName = TSQualifiedName$1;
Ne1.TSRestType = TSRestType$1;
Ne1.TSStringKeyword = TSStringKeyword$1;
Ne1.TSSymbolKeyword = TSSymbolKeyword$1;
Ne1.TSThisType = TSThisType$1;
Ne1.TSTupleType = TSTupleType$1;
Ne1.TSTypeAliasDeclaration = TSTypeAliasDeclaration$1;
Ne1.TSTypeAnnotation = TSTypeAnnotation$1;
Ne1.TSTypeAssertion = TSTypeAssertion$1;
Ne1.TSTypeLiteral = TSTypeLiteral$1;
Ne1.TSTypeOperator = TSTypeOperator$1;
Ne1.TSTypeParameter = TSTypeParameter$1;
Ne1.TSTypeParameterDeclaration = Ne1.TSTypeParameterInstantiation = TSTypeParameterInstantiation$1;
Ne1.TSTypePredicate = TSTypePredicate$1;
Ne1.TSTypeQuery = TSTypeQuery$1;
Ne1.TSTypeReference = TSTypeReference$1;
Ne1.TSUndefinedKeyword = TSUndefinedKeyword$1;
Ne1.TSUnionType = TSUnionType$1;
Ne1.TSUnknownKeyword = TSUnknownKeyword$1;
Ne1.TSVoidKeyword = TSVoidKeyword$1;
Ne1.tsPrintBraced = tsPrintBraced$1;
Ne1.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers$1;
Ne1.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType$1;
Ne1.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName$1;
Ne1.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase$1;
Ne1.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody$1;
Ne1.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType$1;
function TSTypeAnnotation$1(t216) {
    this.token(":");
    this.space();
    t216.optional && this.token("?");
    this.print(t216.typeAnnotation, t216);
}
function TSTypeParameterInstantiation$1(t217, e95) {
    this.token("<");
    this.printList(t217.params, t217, {});
    "ArrowFunctionExpression" === e95.type && 1 === t217.params.length && this.token(",");
    this.token(">");
}
function TSTypeParameter$1(t218) {
    this.word(t218.name);
    if (t218.constraint) {
        this.space();
        this.word("extends");
        this.space();
        this.print(t218.constraint, t218);
    }
    if (t218.default) {
        this.space();
        this.token("=");
        this.space();
        this.print(t218.default, t218);
    }
}
function TSParameterProperty$1(t219) {
    if (t219.accessibility) {
        this.word(t219.accessibility);
        this.space();
    }
    if (t219.readonly) {
        this.word("readonly");
        this.space();
    }
    this._param(t219.parameter);
}
function TSDeclareFunction$1(t220) {
    if (t220.declare) {
        this.word("declare");
        this.space();
    }
    this._functionHead(t220);
    this.token(";");
}
function TSDeclareMethod$1(t221) {
    this._classMethodHead(t221);
    this.token(";");
}
function TSQualifiedName$1(t222) {
    this.print(t222.left, t222);
    this.token(".");
    this.print(t222.right, t222);
}
function TSCallSignatureDeclaration$1(t223) {
    this.tsPrintSignatureDeclarationBase(t223);
    this.token(";");
}
function TSConstructSignatureDeclaration$1(t224) {
    this.word("new");
    this.space();
    this.tsPrintSignatureDeclarationBase(t224);
    this.token(";");
}
function TSPropertySignature$1(t225) {
    const { readonly: e96 , initializer: i41  } = t225;
    if (e96) {
        this.word("readonly");
        this.space();
    }
    this.tsPrintPropertyOrMethodName(t225);
    this.print(t225.typeAnnotation, t225);
    if (i41) {
        this.space();
        this.token("=");
        this.space();
        this.print(i41, t225);
    }
    this.token(";");
}
function tsPrintPropertyOrMethodName$1(t226) {
    t226.computed && this.token("[");
    this.print(t226.key, t226);
    t226.computed && this.token("]");
    t226.optional && this.token("?");
}
function TSMethodSignature$1(t227) {
    const { kind: e97  } = t227;
    if ("set" === e97 || "get" === e97) {
        this.word(e97);
        this.space();
    }
    this.tsPrintPropertyOrMethodName(t227);
    this.tsPrintSignatureDeclarationBase(t227);
    this.token(";");
}
function TSIndexSignature$1(t228) {
    const { readonly: e98 , static: i42  } = t228;
    if (i42) {
        this.word("static");
        this.space();
    }
    if (e98) {
        this.word("readonly");
        this.space();
    }
    this.token("[");
    this._parameters(t228.parameters, t228);
    this.token("]");
    this.print(t228.typeAnnotation, t228);
    this.token(";");
}
function TSAnyKeyword$1() {
    this.word("any");
}
function TSBigIntKeyword$1() {
    this.word("bigint");
}
function TSUnknownKeyword$1() {
    this.word("unknown");
}
function TSNumberKeyword$1() {
    this.word("number");
}
function TSObjectKeyword$1() {
    this.word("object");
}
function TSBooleanKeyword$1() {
    this.word("boolean");
}
function TSStringKeyword$1() {
    this.word("string");
}
function TSSymbolKeyword$1() {
    this.word("symbol");
}
function TSVoidKeyword$1() {
    this.word("void");
}
function TSUndefinedKeyword$1() {
    this.word("undefined");
}
function TSNullKeyword$1() {
    this.word("null");
}
function TSNeverKeyword$1() {
    this.word("never");
}
function TSIntrinsicKeyword$1() {
    this.word("intrinsic");
}
function TSThisType$1() {
    this.word("this");
}
function TSFunctionType$1(t229) {
    this.tsPrintFunctionOrConstructorType(t229);
}
function TSConstructorType$1(t230) {
    if (t230.abstract) {
        this.word("abstract");
        this.space();
    }
    this.word("new");
    this.space();
    this.tsPrintFunctionOrConstructorType(t230);
}
function tsPrintFunctionOrConstructorType$1(t231) {
    const { typeParameters: e99  } = t231;
    const i43 = t231.parameters;
    this.print(e99, t231);
    this.token("(");
    this._parameters(i43, t231);
    this.token(")");
    this.space();
    this.token("=>");
    this.space();
    const n24 = t231.typeAnnotation;
    this.print(n24.typeAnnotation, t231);
}
function TSTypeReference$1(t232) {
    this.print(t232.typeName, t232);
    this.print(t232.typeParameters, t232);
}
function TSTypePredicate$1(t233) {
    if (t233.asserts) {
        this.word("asserts");
        this.space();
    }
    this.print(t233.parameterName);
    if (t233.typeAnnotation) {
        this.space();
        this.word("is");
        this.space();
        this.print(t233.typeAnnotation.typeAnnotation);
    }
}
function TSTypeQuery$1(t234) {
    this.word("typeof");
    this.space();
    this.print(t234.exprName);
}
function TSTypeLiteral$1(t235) {
    this.tsPrintTypeLiteralOrInterfaceBody(t235.members, t235);
}
function tsPrintTypeLiteralOrInterfaceBody$1(t236, e100) {
    this.tsPrintBraced(t236, e100);
}
function tsPrintBraced$1(t237, e101) {
    this.token("{");
    if (t237.length) {
        this.indent();
        this.newline();
        for (const i44 of t237){
            this.print(i44, e101);
            this.newline();
        }
        this.dedent();
        this.rightBrace();
    } else this.token("}");
}
function TSArrayType$1(t238) {
    this.print(t238.elementType, t238);
    this.token("[]");
}
function TSTupleType$1(t239) {
    this.token("[");
    this.printList(t239.elementTypes, t239);
    this.token("]");
}
function TSOptionalType$1(t240) {
    this.print(t240.typeAnnotation, t240);
    this.token("?");
}
function TSRestType$1(t241) {
    this.token("...");
    this.print(t241.typeAnnotation, t241);
}
function TSNamedTupleMember$1(t242) {
    this.print(t242.label, t242);
    t242.optional && this.token("?");
    this.token(":");
    this.space();
    this.print(t242.elementType, t242);
}
function TSUnionType$1(t243) {
    this.tsPrintUnionOrIntersectionType(t243, "|");
}
function TSIntersectionType$1(t244) {
    this.tsPrintUnionOrIntersectionType(t244, "&");
}
function tsPrintUnionOrIntersectionType$1(t245, e102) {
    this.printJoin(t245.types, t245, {
        separator () {
            this.space();
            this.token(e102);
            this.space();
        }
    });
}
function TSConditionalType$1(t246) {
    this.print(t246.checkType);
    this.space();
    this.word("extends");
    this.space();
    this.print(t246.extendsType);
    this.space();
    this.token("?");
    this.space();
    this.print(t246.trueType);
    this.space();
    this.token(":");
    this.space();
    this.print(t246.falseType);
}
function TSInferType$1(t247) {
    this.token("infer");
    this.space();
    this.print(t247.typeParameter);
}
function TSParenthesizedType$1(t248) {
    this.token("(");
    this.print(t248.typeAnnotation, t248);
    this.token(")");
}
function TSTypeOperator$1(t249) {
    this.word(t249.operator);
    this.space();
    this.print(t249.typeAnnotation, t249);
}
function TSIndexedAccessType$1(t250) {
    this.print(t250.objectType, t250);
    this.token("[");
    this.print(t250.indexType, t250);
    this.token("]");
}
function TSMappedType$1(t251) {
    const { nameType: e103 , optional: i45 , readonly: n25 , typeParameter: s13  } = t251;
    this.token("{");
    this.space();
    if (n25) {
        tokenIfPlusMinus(this, n25);
        this.word("readonly");
        this.space();
    }
    this.token("[");
    this.word(s13.name);
    this.space();
    this.word("in");
    this.space();
    this.print(s13.constraint, s13);
    if (e103) {
        this.space();
        this.word("as");
        this.space();
        this.print(e103, t251);
    }
    this.token("]");
    if (i45) {
        tokenIfPlusMinus(this, i45);
        this.token("?");
    }
    this.token(":");
    this.space();
    this.print(t251.typeAnnotation, t251);
    this.space();
    this.token("}");
}
function tokenIfPlusMinus(t252, e104) {
    true !== e104 && t252.token(e104);
}
function TSLiteralType$1(t253) {
    this.print(t253.literal, t253);
}
function TSExpressionWithTypeArguments$1(t254) {
    this.print(t254.expression, t254);
    this.print(t254.typeParameters, t254);
}
function TSInterfaceDeclaration$1(t255) {
    const { declare: e105 , id: i46 , typeParameters: n26 , extends: s14 , body: r416  } = t255;
    if (e105) {
        this.word("declare");
        this.space();
    }
    this.word("interface");
    this.space();
    this.print(i46, t255);
    this.print(n26, t255);
    if (null != s14 && s14.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(s14, t255);
    }
    this.space();
    this.print(r416, t255);
}
function TSInterfaceBody$1(t256) {
    this.tsPrintTypeLiteralOrInterfaceBody(t256.body, t256);
}
function TSTypeAliasDeclaration$1(t257) {
    const { declare: e106 , id: i47 , typeParameters: n27 , typeAnnotation: s15  } = t257;
    if (e106) {
        this.word("declare");
        this.space();
    }
    this.word("type");
    this.space();
    this.print(i47, t257);
    this.print(n27, t257);
    this.space();
    this.token("=");
    this.space();
    this.print(s15, t257);
    this.token(";");
}
function TSAsExpression$1(t258) {
    const { expression: e107 , typeAnnotation: i48  } = t258;
    this.print(e107, t258);
    this.space();
    this.word("as");
    this.space();
    this.print(i48, t258);
}
function TSTypeAssertion$1(t259) {
    const { typeAnnotation: e108 , expression: i49  } = t259;
    this.token("<");
    this.print(e108, t259);
    this.token(">");
    this.space();
    this.print(i49, t259);
}
function TSEnumDeclaration$1(t260) {
    const { declare: e109 , const: i50 , id: n28 , members: s16  } = t260;
    if (e109) {
        this.word("declare");
        this.space();
    }
    if (i50) {
        this.word("const");
        this.space();
    }
    this.word("enum");
    this.space();
    this.print(n28, t260);
    this.space();
    this.tsPrintBraced(s16, t260);
}
function TSEnumMember$1(t261) {
    const { id: e110 , initializer: i51  } = t261;
    this.print(e110, t261);
    if (i51) {
        this.space();
        this.token("=");
        this.space();
        this.print(i51, t261);
    }
    this.token(",");
}
function TSModuleDeclaration$1(t262) {
    const { declare: e111 , id: i52  } = t262;
    if (e111) {
        this.word("declare");
        this.space();
    }
    if (!t262.global) {
        this.word("Identifier" === i52.type ? "namespace" : "module");
        this.space();
    }
    this.print(i52, t262);
    if (!t262.body) {
        this.token(";");
        return;
    }
    let n29 = t262.body;
    while("TSModuleDeclaration" === n29.type){
        this.token(".");
        this.print(n29.id, n29);
        n29 = n29.body;
    }
    this.space();
    this.print(n29, t262);
}
function TSModuleBlock$1(t263) {
    this.tsPrintBraced(t263.body, t263);
}
function TSImportType$1(t264) {
    const { argument: e112 , qualifier: i53 , typeParameters: n30  } = t264;
    this.word("import");
    this.token("(");
    this.print(e112, t264);
    this.token(")");
    if (i53) {
        this.token(".");
        this.print(i53, t264);
    }
    n30 && this.print(n30, t264);
}
function TSImportEqualsDeclaration$1(t265) {
    const { isExport: e113 , id: i54 , moduleReference: n31  } = t265;
    if (e113) {
        this.word("export");
        this.space();
    }
    this.word("import");
    this.space();
    this.print(i54, t265);
    this.space();
    this.token("=");
    this.space();
    this.print(n31, t265);
    this.token(";");
}
function TSExternalModuleReference$1(t266) {
    this.token("require(");
    this.print(t266.expression, t266);
    this.token(")");
}
function TSNonNullExpression$1(t267) {
    this.print(t267.expression, t267);
    this.token("!");
}
function TSExportAssignment$1(t268) {
    this.word("export");
    this.space();
    this.token("=");
    this.space();
    this.print(t268.expression, t268);
    this.token(";");
}
function TSNamespaceExportDeclaration$1(t269) {
    this.word("export");
    this.space();
    this.word("as");
    this.space();
    this.word("namespace");
    this.space();
    this.print(t269.id, t269);
}
function tsPrintSignatureDeclarationBase$1(t270) {
    const { typeParameters: e114  } = t270;
    const i55 = t270.parameters;
    this.print(e114, t270);
    this.token("(");
    this._parameters(i55, t270);
    this.token(")");
    const n32 = t270.typeAnnotation;
    this.print(n32, t270);
}
function tsPrintClassMemberModifiers$1(t271, e115) {
    if (e115 && t271.declare) {
        this.word("declare");
        this.space();
    }
    if (t271.accessibility) {
        this.word(t271.accessibility);
        this.space();
    }
    if (t271.static) {
        this.word("static");
        this.space();
    }
    if (t271.override) {
        this.word("override");
        this.space();
    }
    if (t271.abstract) {
        this.word("abstract");
        this.space();
    }
    if (e115 && t271.readonly) {
        this.word("readonly");
        this.space();
    }
}
var Fe1 = {};
Object.defineProperty(Fe1, "__esModule", {
    value: true
});
var Je1 = Ct1;
Object.keys(Je1).forEach(function(t272) {
    "default" !== t272 && "__esModule" !== t272 && (t272 in Fe1 && Fe1[t272] === Je1[t272] || Object.defineProperty(Fe1, t272, {
        enumerable: true,
        get: function() {
            return Je1[t272];
        }
    }));
});
var Ke1 = Mt1;
Object.keys(Ke1).forEach(function(t273) {
    "default" !== t273 && "__esModule" !== t273 && (t273 in Fe1 && Fe1[t273] === Ke1[t273] || Object.defineProperty(Fe1, t273, {
        enumerable: true,
        get: function() {
            return Ke1[t273];
        }
    }));
});
var Xe1 = qt1;
Object.keys(Xe1).forEach(function(t274) {
    "default" !== t274 && "__esModule" !== t274 && (t274 in Fe1 && Fe1[t274] === Xe1[t274] || Object.defineProperty(Fe1, t274, {
        enumerable: true,
        get: function() {
            return Xe1[t274];
        }
    }));
});
var qe1 = ie3;
Object.keys(qe1).forEach(function(t275) {
    "default" !== t275 && "__esModule" !== t275 && (t275 in Fe1 && Fe1[t275] === qe1[t275] || Object.defineProperty(Fe1, t275, {
        enumerable: true,
        get: function() {
            return qe1[t275];
        }
    }));
});
var Ue1 = ae3;
Object.keys(Ue1).forEach(function(t276) {
    "default" !== t276 && "__esModule" !== t276 && (t276 in Fe1 && Fe1[t276] === Ue1[t276] || Object.defineProperty(Fe1, t276, {
        enumerable: true,
        get: function() {
            return Ue1[t276];
        }
    }));
});
var Re1 = le1;
Object.keys(Re1).forEach(function(t277) {
    "default" !== t277 && "__esModule" !== t277 && (t277 in Fe1 && Fe1[t277] === Re1[t277] || Object.defineProperty(Fe1, t277, {
        enumerable: true,
        get: function() {
            return Re1[t277];
        }
    }));
});
var He1 = xe1;
Object.keys(He1).forEach(function(t278) {
    "default" !== t278 && "__esModule" !== t278 && (t278 in Fe1 && Fe1[t278] === He1[t278] || Object.defineProperty(Fe1, t278, {
        enumerable: true,
        get: function() {
            return He1[t278];
        }
    }));
});
var We1 = De1;
Object.keys(We1).forEach(function(t279) {
    "default" !== t279 && "__esModule" !== t279 && (t279 in Fe1 && Fe1[t279] === We1[t279] || Object.defineProperty(Fe1, t279, {
        enumerable: true,
        get: function() {
            return We1[t279];
        }
    }));
});
var Ve1 = Be1;
Object.keys(Ve1).forEach(function(t280) {
    "default" !== t280 && "__esModule" !== t280 && (t280 in Fe1 && Fe1[t280] === Ve1[t280] || Object.defineProperty(Fe1, t280, {
        enumerable: true,
        get: function() {
            return Ve1[t280];
        }
    }));
});
var ze1 = _e1;
Object.keys(ze1).forEach(function(t281) {
    "default" !== t281 && "__esModule" !== t281 && (t281 in Fe1 && Fe1[t281] === ze1[t281] || Object.defineProperty(Fe1, t281, {
        enumerable: true,
        get: function() {
            return ze1[t281];
        }
    }));
});
var Qe1 = Ne1;
Object.keys(Qe1).forEach(function(t282) {
    "default" !== t282 && "__esModule" !== t282 && (t282 in Fe1 && Fe1[t282] === Qe1[t282] || Object.defineProperty(Fe1, t282, {
        enumerable: true,
        get: function() {
            return Qe1[t282];
        }
    }));
});
Fe1.__esModule, Fe1.TaggedTemplateExpression, Fe1.TemplateElement, Fe1.TemplateLiteral, Fe1.LogicalExpression, Fe1.BinaryExpression, Fe1.AssignmentExpression, Fe1.AssignmentPattern, Fe1.AwaitExpression, Fe1.BindExpression, Fe1.CallExpression, Fe1.ConditionalExpression, Fe1.Decorator, Fe1.DoExpression, Fe1.EmptyStatement, Fe1.ExpressionStatement, Fe1.Import, Fe1.MemberExpression, Fe1.MetaProperty, Fe1.ModuleExpression, Fe1.NewExpression, Fe1.OptionalCallExpression, Fe1.OptionalMemberExpression, Fe1.ParenthesizedExpression, Fe1.PrivateName, Fe1.SequenceExpression, Fe1.Super, Fe1.ThisExpression, Fe1.UnaryExpression, Fe1.UpdateExpression, Fe1.V8IntrinsicIdentifier, Fe1.YieldExpression, Fe1.BreakStatement, Fe1.CatchClause, Fe1.ContinueStatement, Fe1.DebuggerStatement, Fe1.DoWhileStatement, Fe1.ForOfStatement, Fe1.ForInStatement, Fe1.ForStatement, Fe1.IfStatement, Fe1.LabeledStatement, Fe1.ReturnStatement, Fe1.SwitchCase, Fe1.SwitchStatement, Fe1.ThrowStatement, Fe1.TryStatement, Fe1.VariableDeclaration, Fe1.VariableDeclarator, Fe1.WhileStatement, Fe1.WithStatement, Fe1.ClassAccessorProperty, Fe1.ClassBody, Fe1.ClassExpression, Fe1.ClassDeclaration, Fe1.ClassMethod, Fe1.ClassPrivateMethod, Fe1.ClassPrivateProperty, Fe1.ClassProperty, Fe1.StaticBlock, Fe1._classMethodHead, Fe1.ArrowFunctionExpression, Fe1.FunctionDeclaration, Fe1.FunctionExpression, Fe1._functionHead, Fe1._methodHead, Fe1._param, Fe1._parameters, Fe1._params, Fe1._predicate, Fe1.ExportAllDeclaration, Fe1.ExportDefaultDeclaration, Fe1.ExportDefaultSpecifier, Fe1.ExportNamedDeclaration, Fe1.ExportNamespaceSpecifier, Fe1.ExportSpecifier, Fe1.ImportAttribute, Fe1.ImportDeclaration, Fe1.ImportDefaultSpecifier, Fe1.ImportNamespaceSpecifier, Fe1.ImportSpecifier, Fe1.ArgumentPlaceholder, Fe1.ArrayPattern, Fe1.ArrayExpression, Fe1.BigIntLiteral, Fe1.BooleanLiteral, Fe1.DecimalLiteral, Fe1.Identifier, Fe1.NullLiteral, Fe1.NumericLiteral, Fe1.ObjectPattern, Fe1.ObjectExpression, Fe1.ObjectMethod, Fe1.ObjectProperty, Fe1.PipelineBareFunction, Fe1.PipelinePrimaryTopicReference, Fe1.PipelineTopicExpression, Fe1.RecordExpression, Fe1.RegExpLiteral, Fe1.SpreadElement, Fe1.RestElement, Fe1.StringLiteral, Fe1.TopicReference, Fe1.TupleExpression, Fe1.AnyTypeAnnotation, Fe1.ArrayTypeAnnotation, Fe1.BooleanLiteralTypeAnnotation, Fe1.BooleanTypeAnnotation, Fe1.DeclareClass, Fe1.DeclareExportAllDeclaration, Fe1.DeclareExportDeclaration, Fe1.DeclareFunction, Fe1.DeclareInterface, Fe1.DeclareModule, Fe1.DeclareModuleExports, Fe1.DeclareOpaqueType, Fe1.DeclareTypeAlias, Fe1.DeclareVariable, Fe1.DeclaredPredicate, Fe1.EmptyTypeAnnotation, Fe1.EnumBooleanBody, Fe1.EnumBooleanMember, Fe1.EnumDeclaration, Fe1.EnumDefaultedMember, Fe1.EnumNumberBody, Fe1.EnumNumberMember, Fe1.EnumStringBody, Fe1.EnumStringMember, Fe1.EnumSymbolBody, Fe1.ExistsTypeAnnotation, Fe1.FunctionTypeAnnotation, Fe1.FunctionTypeParam, Fe1.IndexedAccessType, Fe1.InferredPredicate, Fe1.InterfaceDeclaration, Fe1.GenericTypeAnnotation, Fe1.ClassImplements, Fe1.InterfaceExtends, Fe1.InterfaceTypeAnnotation, Fe1.IntersectionTypeAnnotation, Fe1.MixedTypeAnnotation, Fe1.NullLiteralTypeAnnotation, Fe1.NullableTypeAnnotation, Fe1.NumberLiteralTypeAnnotation, Fe1.NumberTypeAnnotation, Fe1.ObjectTypeAnnotation, Fe1.ObjectTypeCallProperty, Fe1.ObjectTypeIndexer, Fe1.ObjectTypeInternalSlot, Fe1.ObjectTypeProperty, Fe1.ObjectTypeSpreadProperty, Fe1.OpaqueType, Fe1.OptionalIndexedAccessType, Fe1.QualifiedTypeIdentifier, Fe1.StringLiteralTypeAnnotation, Fe1.StringTypeAnnotation, Fe1.SymbolTypeAnnotation, Fe1.ThisTypeAnnotation, Fe1.TupleTypeAnnotation, Fe1.TypeAlias, Fe1.TypeAnnotation, Fe1.TypeCastExpression, Fe1.TypeParameter, Fe1.TypeParameterDeclaration, Fe1.TypeParameterInstantiation, Fe1.TypeofTypeAnnotation, Fe1.UnionTypeAnnotation, Fe1.Variance, Fe1.VoidTypeAnnotation, Fe1._interfaceish, Fe1._variance, Fe1.BlockStatement, Fe1.Directive, Fe1.DirectiveLiteral, Fe1.File, Fe1.InterpreterDirective, Fe1.Placeholder, Fe1.Program, Fe1.JSXAttribute, Fe1.JSXClosingElement, Fe1.JSXClosingFragment, Fe1.JSXElement, Fe1.JSXEmptyExpression, Fe1.JSXExpressionContainer, Fe1.JSXFragment, Fe1.JSXIdentifier, Fe1.JSXMemberExpression, Fe1.JSXNamespacedName, Fe1.JSXOpeningElement, Fe1.JSXOpeningFragment, Fe1.JSXSpreadAttribute, Fe1.JSXSpreadChild, Fe1.JSXText, Fe1.TSAnyKeyword, Fe1.TSArrayType, Fe1.TSAsExpression, Fe1.TSBigIntKeyword, Fe1.TSBooleanKeyword, Fe1.TSCallSignatureDeclaration, Fe1.TSConditionalType, Fe1.TSConstructSignatureDeclaration, Fe1.TSConstructorType, Fe1.TSDeclareFunction, Fe1.TSDeclareMethod, Fe1.TSEnumDeclaration, Fe1.TSEnumMember, Fe1.TSExportAssignment, Fe1.TSExpressionWithTypeArguments, Fe1.TSExternalModuleReference, Fe1.TSFunctionType, Fe1.TSImportEqualsDeclaration, Fe1.TSImportType, Fe1.TSIndexSignature, Fe1.TSIndexedAccessType, Fe1.TSInferType, Fe1.TSInterfaceBody, Fe1.TSInterfaceDeclaration, Fe1.TSIntersectionType, Fe1.TSIntrinsicKeyword, Fe1.TSLiteralType, Fe1.TSMappedType, Fe1.TSMethodSignature, Fe1.TSModuleBlock, Fe1.TSModuleDeclaration, Fe1.TSNamedTupleMember, Fe1.TSNamespaceExportDeclaration, Fe1.TSNeverKeyword, Fe1.TSNonNullExpression, Fe1.TSNullKeyword, Fe1.TSNumberKeyword, Fe1.TSObjectKeyword, Fe1.TSOptionalType, Fe1.TSParameterProperty, Fe1.TSParenthesizedType, Fe1.TSPropertySignature, Fe1.TSQualifiedName, Fe1.TSRestType, Fe1.TSStringKeyword, Fe1.TSSymbolKeyword, Fe1.TSThisType, Fe1.TSTupleType, Fe1.TSTypeAliasDeclaration, Fe1.TSTypeAnnotation, Fe1.TSTypeAssertion, Fe1.TSTypeLiteral, Fe1.TSTypeOperator, Fe1.TSTypeParameter, Fe1.TSTypeParameterDeclaration, Fe1.TSTypeParameterInstantiation, Fe1.TSTypePredicate, Fe1.TSTypeQuery, Fe1.TSTypeReference, Fe1.TSUndefinedKeyword, Fe1.TSUnionType, Fe1.TSUnknownKeyword, Fe1.TSVoidKeyword, Fe1.tsPrintBraced, Fe1.tsPrintClassMemberModifiers, Fe1.tsPrintFunctionOrConstructorType, Fe1.tsPrintPropertyOrMethodName, Fe1.tsPrintSignatureDeclarationBase, Fe1.tsPrintTypeLiteralOrInterfaceBody, Fe1.tsPrintUnionOrIntersectionType;
var n16 = {};
Object.defineProperty(n16, "__esModule", {
    value: true
});
n16.default = void 0;
function SourcePos() {
    return {
        identifierName: void 0,
        line: void 0,
        column: void 0,
        filename: void 0,
        force: false
    };
}
const s11 = /^[ \t]+$/;
class Buffer {
    constructor(t1118){
        this._map = null;
        this._buf = "";
        this._last = 0;
        this._queue = [];
        this._position = {
            line: 1,
            column: 0
        };
        this._sourcePosition = SourcePos();
        this._disallowedPop = null;
        this._map = t1118;
    }
    get() {
        this._flush();
        const t2114 = this._map;
        const e1 = {
            code: this._buf.trimRight(),
            decodedMap: null == t2114 ? void 0 : t2114.getDecoded(),
            get map () {
                return e1.map = t2114 ? t2114.get() : null;
            },
            set map (t){
                Object.defineProperty(e1, "map", {
                    value: t,
                    writable: true
                });
            },
            get rawMappings () {
                return e1.rawMappings = null == t2114 ? void 0 : t2114.getRawMappings();
            },
            set rawMappings (t){
                Object.defineProperty(e1, "rawMappings", {
                    value: t,
                    writable: true
                });
            }
        };
        return e1;
    }
    append(t) {
        this._flush();
        const { line: e2 , column: i120 , filename: n1117 , identifierName: s121 , force: r128  } = this._sourcePosition;
        this._append(t, e2, i120, s121, n1117, r128);
    }
    queue(t) {
        if ("\n" === t) while(this._queue.length > 0 && s11.test(this._queue[0][0]))this._queue.shift();
        const { line: e3107 , column: i216 , filename: n2108 , identifierName: r221 , force: o120  } = this._sourcePosition;
        this._queue.unshift([
            t,
            e3107,
            i216,
            r221,
            n2108,
            o120
        ]);
    }
    queueIndentation(t) {
        this._queue.unshift([
            t,
            void 0,
            void 0,
            void 0,
            void 0,
            false
        ]);
    }
    _flush() {
        let t;
        while(t = this._queue.pop())this._append(...t);
    }
    _append(t, e418, i314, n318, s216, r320) {
        this._buf += t;
        this._last = t.charCodeAt(t.length - 1);
        let o218 = t.indexOf("\n");
        let h111 = 0;
        0 !== o218 && this._mark(e418, i314, n318, s216, r320);
        while(-1 !== o218){
            this._position.line++;
            this._position.column = 0;
            h111 = o218 + 1;
            h111 < t.length && this._mark(++e418, 0, n318, s216, r320);
            o218 = t.indexOf("\n", h111);
        }
        this._position.column += t.length - h111;
    }
    _mark(t, e517, i412, n417, s315) {
        var r417;
        null == (r417 = this._map) ? void 0 : r417.mark(this._position, t, e517, i412, n417, s315);
    }
    removeTrailingNewline() {
        this._queue.length > 0 && "\n" === this._queue[0][0] && this._queue.shift();
    }
    removeLastSemicolon() {
        this._queue.length > 0 && ";" === this._queue[0][0] && this._queue.shift();
    }
    getLastChar() {
        let t;
        if (this._queue.length > 0) {
            const e615 = this._queue[0][0];
            t = e615.charCodeAt(0);
        } else t = this._last;
        return t;
    }
    endsWithCharAndNewline() {
        const t = this._queue;
        if (t.length > 0) {
            const e715 = t[0][0];
            const i510 = e715.charCodeAt(0);
            if (10 !== i510) return;
            if (t.length > 1) {
                const e815 = t[1][0];
                return e815.charCodeAt(0);
            }
            return this._last;
        }
    }
    hasContent() {
        return this._queue.length > 0 || !!this._last;
    }
    exactSource(t, e9) {
        this.source("start", t, true);
        e9();
        this.source("end", t);
        this._disallowPop("start", t);
    }
    source(t, e10, i62) {
        t && !e10 || this._normalizePosition(t, e10, this._sourcePosition, i62);
    }
    withSource(t, e11, i72) {
        if (!this._map) return i72();
        const n516 = this._sourcePosition.line;
        const s413 = this._sourcePosition.column;
        const r515 = this._sourcePosition.filename;
        const o316 = this._sourcePosition.identifierName;
        this.source(t, e11);
        i72();
        if ((!this._sourcePosition.force || this._sourcePosition.line !== n516 || this._sourcePosition.column !== s413 || this._sourcePosition.filename !== r515) && (!this._disallowedPop || this._disallowedPop.line !== n516 || this._disallowedPop.column !== s413 || this._disallowedPop.filename !== r515)) {
            this._sourcePosition.line = n516;
            this._sourcePosition.column = s413;
            this._sourcePosition.filename = r515;
            this._sourcePosition.identifierName = o316;
            this._sourcePosition.force = false;
            this._disallowedPop = null;
        }
    }
    _disallowPop(t, e12) {
        t && !e12 || (this._disallowedPop = this._normalizePosition(t, e12, SourcePos(), false));
    }
    _normalizePosition(t, e13, i82, n616) {
        const s510 = e13 ? e13[t] : null;
        const r614 = i82.line;
        const o414 = i82.column;
        const h211 = i82.filename;
        i82.identifierName = "start" === t && (null == e13 ? void 0 : e13.identifierName) || null;
        i82.line = null == s510 ? void 0 : s510.line;
        i82.column = null == s510 ? void 0 : s510.column;
        i82.filename = null == e13 ? void 0 : e13.filename;
        (n616 || i82.line !== r614 || i82.column !== o414 || i82.filename !== h211) && (i82.force = n616);
        return i82;
    }
    getCurrentColumn() {
        const t418 = this._queue.reduce((t, e15)=>e15[0] + t
        , "");
        const e14 = t418.lastIndexOf("\n");
        return -1 === e14 ? this._position.column + t418.length : t418.length - 1 - e14;
    }
    getCurrentLine() {
        const t517 = this._queue.reduce((t, e17)=>e17[0] + t
        , "");
        let e16 = 0;
        for(let i92 = 0; i92 < t517.length; i92++)"\n" === t517[i92] && e16++;
        return this._position.line + e16;
    }
}
n16.default = Buffer;
var r16 = "default" in mod3 ? mod3.default : mod3;
var o12 = {};
Object.defineProperty(o12, "__esModule", {
    value: true
});
o12.default = void 0;
var h6 = n16;
var a10 = $t1;
var l10 = r16;
var u10 = Fe1;
const { isProgram: c11 , isFile: m7 , isEmptyStatement: d7  } = l10;
const _6 = /e/i;
const f9 = /\.0+$/;
const p8 = /^0[box]/;
const g6 = /^\s*[@#]__PURE__\s*$/;
const { needsParens: C5 , needsWhitespaceAfter: w5 , needsWhitespaceBefore: P5  } = a10;
class Printer {
    constructor(t, e18){
        this.inForStatementInitCounter = 0;
        this._printStack = [];
        this._indent = 0;
        this._insideAux = false;
        this._parenPushNewlineState = null;
        this._noLineTerminator = false;
        this._printAuxAfterOnNextUserNode = false;
        this._printedComments = new WeakSet;
        this._endsWithInteger = false;
        this._endsWithWord = false;
        this.format = t;
        this._buf = new h6.default(e18);
    }
    generate(t) {
        this.print(t);
        this._maybeAddAuxComment();
        return this._buf.get();
    }
    indent() {
        this.format.compact || this.format.concise || this._indent++;
    }
    dedent() {
        this.format.compact || this.format.concise || this._indent--;
    }
    semicolon(t = false) {
        this._maybeAddAuxComment();
        this._append(";", !t);
    }
    rightBrace() {
        this.format.minified && this._buf.removeLastSemicolon();
        this.token("}");
    }
    space(t = false) {
        if (!this.format.compact) {
            if (t) this._space();
            else if (this._buf.hasContent()) {
                const t = this.getLastChar();
                32 !== t && 10 !== t && this._space();
            }
        }
    }
    word(t) {
        (this._endsWithWord || this.endsWith(47) && 47 === t.charCodeAt(0)) && this._space();
        this._maybeAddAuxComment();
        this._append(t);
        this._endsWithWord = true;
    }
    number(t) {
        this.word(t);
        this._endsWithInteger = Number.isInteger(+t) && !p8.test(t) && !_6.test(t) && !f9.test(t) && 46 !== t.charCodeAt(t.length - 1);
    }
    token(t) {
        const e19 = this.getLastChar();
        const i10 = t.charCodeAt(0);
        ("--" === t && 33 === e19 || 43 === i10 && 43 === e19 || 45 === i10 && 45 === e19 || 46 === i10 && this._endsWithInteger) && this._space();
        this._maybeAddAuxComment();
        this._append(t);
    }
    newline(t = 1) {
        if (this.format.retainLines || this.format.compact) return;
        if (this.format.concise) {
            this.space();
            return;
        }
        const e20 = this.endsWithCharAndNewline();
        if (10 !== e20) {
            123 !== e20 && 58 !== e20 || t--;
            if (!(t <= 0)) for(let e21 = 0; e21 < t; e21++)this._newline();
        }
    }
    endsWith(t) {
        return this.getLastChar() === t;
    }
    getLastChar() {
        return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
        return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
        this._buf.removeTrailingNewline();
    }
    exactSource(t, e22) {
        this._catchUp("start", t);
        this._buf.exactSource(t, e22);
    }
    source(t, e23) {
        this._catchUp(t, e23);
        this._buf.source(t, e23);
    }
    withSource(t, e24, i11) {
        this._catchUp(t, e24);
        this._buf.withSource(t, e24, i11);
    }
    _space() {
        this._append(" ", true);
    }
    _newline() {
        this._append("\n", true);
    }
    _append(t, e25 = false) {
        this._maybeAddParen(t);
        this._maybeIndent(t);
        e25 ? this._buf.queue(t) : this._buf.append(t);
        this._endsWithWord = false;
        this._endsWithInteger = false;
    }
    _maybeIndent(t) {
        this._indent && this.endsWith(10) && 10 !== t.charCodeAt(0) && this._buf.queueIndentation(this._getIndent());
    }
    _maybeAddParen(t) {
        const e26 = this._parenPushNewlineState;
        if (!e26) return;
        let i12;
        for(i12 = 0; i12 < t.length && " " === t[i12]; i12++)continue;
        if (i12 === t.length) return;
        const n716 = t[i12];
        if ("\n" !== n716) {
            if ("/" !== n716 || i12 + 1 === t.length) {
                this._parenPushNewlineState = null;
                return;
            }
            const e27 = t[i12 + 1];
            if ("*" === e27) {
                if (g6.test(t.slice(i12 + 2, t.length - 2))) return;
            } else if ("/" !== e27) {
                this._parenPushNewlineState = null;
                return;
            }
        }
        this.token("(");
        this.indent();
        e26.printed = true;
    }
    _catchUp(t, e28) {
        if (!this.format.retainLines) return;
        const i13 = e28 ? e28[t] : null;
        if (null != (null == i13 ? void 0 : i13.line)) {
            const t = i13.line - this._buf.getCurrentLine();
            for(let e29 = 0; e29 < t; e29++)this._newline();
        }
    }
    _getIndent() {
        return this.format.indent.style.repeat(this._indent);
    }
    startTerminatorless(t = false) {
        if (t) {
            this._noLineTerminator = true;
            return null;
        }
        return this._parenPushNewlineState = {
            printed: false
        };
    }
    endTerminatorless(t) {
        this._noLineTerminator = false;
        if (null != t && t.printed) {
            this.dedent();
            this.newline();
            this.token(")");
        }
    }
    print(t, e30) {
        if (!t) return;
        const i14 = this.format.concise;
        t._compact && (this.format.concise = true);
        const n814 = this[t.type];
        if (!n814) throw new ReferenceError(`unknown node of type ${JSON.stringify(t.type)} with constructor ${JSON.stringify(null == t ? void 0 : t.constructor.name)}`);
        this._printStack.push(t);
        const s64 = this._insideAux;
        this._insideAux = !t.loc;
        this._maybeAddAuxComment(this._insideAux && !s64);
        let r710 = C5(t, e30, this._printStack);
        this.format.retainFunctionParens && "FunctionExpression" === t.type && t.extra && t.extra.parenthesized && (r710 = true);
        r710 && this.token("(");
        this._printLeadingComments(t);
        const o513 = c11(t) || m7(t) ? null : t.loc;
        this.withSource("start", o513, ()=>{
            n814.call(this, t, e30);
        });
        this._printTrailingComments(t);
        r710 && this.token(")");
        this._printStack.pop();
        this.format.concise = i14;
        this._insideAux = s64;
    }
    _maybeAddAuxComment(t) {
        t && this._printAuxBeforeComment();
        this._insideAux || this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
        if (this._printAuxAfterOnNextUserNode) return;
        this._printAuxAfterOnNextUserNode = true;
        const t = this.format.auxiliaryCommentBefore;
        t && this._printComment({
            type: "CommentBlock",
            value: t
        });
    }
    _printAuxAfterComment() {
        if (!this._printAuxAfterOnNextUserNode) return;
        this._printAuxAfterOnNextUserNode = false;
        const t = this.format.auxiliaryCommentAfter;
        t && this._printComment({
            type: "CommentBlock",
            value: t
        });
    }
    getPossibleRaw(t) {
        const e31 = t.extra;
        if (e31 && null != e31.raw && null != e31.rawValue && t.value === e31.rawValue) return e31.raw;
    }
    printJoin(t, e32, i15 = {}) {
        if (!(null != t && t.length)) return;
        i15.indent && this.indent();
        const n914 = {
            addNewlines: i15.addNewlines
        };
        for(let s73 = 0; s73 < t.length; s73++){
            const r810 = t[s73];
            if (r810) {
                i15.statement && this._printNewline(true, r810, e32, n914);
                this.print(r810, e32);
                i15.iterator && i15.iterator(r810, s73);
                i15.separator && s73 < t.length - 1 && i15.separator.call(this);
                i15.statement && this._printNewline(false, r810, e32, n914);
            }
        }
        i15.indent && this.dedent();
    }
    printAndIndentOnComments(t, e33) {
        const i16 = t.leadingComments && t.leadingComments.length > 0;
        i16 && this.indent();
        this.print(t, e33);
        i16 && this.dedent();
    }
    printBlock(t) {
        const e34 = t.body;
        d7(e34) || this.space();
        this.print(e34, t);
    }
    _printTrailingComments(t) {
        this._printComments(this._getComments(false, t));
    }
    _printLeadingComments(t) {
        this._printComments(this._getComments(true, t), true);
    }
    printInnerComments(t, e35 = true) {
        var i17;
        if (null != (i17 = t.innerComments) && i17.length) {
            e35 && this.indent();
            this._printComments(t.innerComments);
            e35 && this.dedent();
        }
    }
    printSequence(t, e36, i18 = {}) {
        i18.statement = true;
        return this.printJoin(t, e36, i18);
    }
    printList(t, e37, i19 = {}) {
        null == i19.separator && (i19.separator = commaSeparator);
        return this.printJoin(t, e37, i19);
    }
    _printNewline(t, e38, i20, n1014) {
        if (this.format.retainLines || this.format.compact) return;
        if (this.format.concise) {
            this.space();
            return;
        }
        let s82 = 0;
        if (this._buf.hasContent()) {
            t || s82++;
            n1014.addNewlines && (s82 += n1014.addNewlines(t, e38) || 0);
            const r98 = t ? P5 : w5;
            r98(e38, i20) && s82++;
        }
        this.newline(Math.min(2, s82));
    }
    _getComments(t, e39) {
        return e39 && (t ? e39.leadingComments : e39.trailingComments) || [];
    }
    _printComment(t, e40) {
        if (!this.format.shouldPrintComment(t.value)) return;
        if (t.ignore) return;
        if (this._printedComments.has(t)) return;
        this._printedComments.add(t);
        const i21 = "CommentBlock" === t.type;
        const n1118 = i21 && !e40 && !this._noLineTerminator;
        n1118 && this._buf.hasContent() && this.newline(1);
        const s92 = this.getLastChar();
        91 !== s92 && 123 !== s92 && this.space();
        let r102 = i21 || this._noLineTerminator ? `/*${t.value}*/` : `//${t.value}\n`;
        if (i21 && this.format.indent.adjustMultilineComment) {
            var o66;
            const e41 = null == (o66 = t.loc) ? void 0 : o66.start.column;
            if (e41) {
                const t = new RegExp("\\n\\s{1," + e41 + "}", "g");
                r102 = r102.replace(t, "\n");
            }
            const i22 = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());
            r102 = r102.replace(/\n(?!$)/g, `\n${" ".repeat(i22)}`);
        }
        this.endsWith(47) && this._space();
        this.withSource("start", t.loc, ()=>{
            this._append(r102);
        });
        n1118 && this.newline(1);
    }
    _printComments(t, e43) {
        if (null != t && t.length) if (e43 && 1 === t.length && g6.test(t[0].value)) this._printComment(t[0], this._buf.hasContent() && !this.endsWith(10));
        else for (const e42 of t)this._printComment(e42);
    }
    printAssertions(t) {
        var e44;
        if (null != (e44 = t.assertions) && e44.length) {
            this.space();
            this.word("assert");
            this.space();
            this.token("{");
            this.space();
            this.printList(t.assertions, t);
            this.space();
            this.token("}");
        }
    }
}
Object.assign(Printer.prototype, u10);
Printer.prototype.Noop = function Noop() {};
var A5 = Printer;
o12.default = A5;
function commaSeparator() {
    this.token(",");
    this.space();
}
o12.__esModule;
var o13 = "default" in mod10 ? mod10.default : mod10;
var n17 = {};
Object.defineProperty(n17, "__esModule", {
    value: true
});
n17.default = void 0;
var r17 = o13;
class SourceMap {
    constructor(e1, t1119){
        var o121;
        this._map = void 0;
        this._rawMappings = void 0;
        this._sourceFileName = void 0;
        this._lastGenLine = 0;
        this._lastSourceLine = 0;
        this._lastSourceColumn = 0;
        const n1119 = this._map = new r17.GenMapping({
            sourceRoot: e1.sourceRoot
        });
        this._sourceFileName = null == (o121 = e1.sourceFileName) ? void 0 : o121.replace(/\\/g, "/");
        this._rawMappings = void 0;
        "string" === typeof t1119 ? (0, r17.setSourceContent)(n1119, this._sourceFileName, t1119) : "object" === typeof t1119 && Object.keys(t1119).forEach((e2)=>{
            (0, r17.setSourceContent)(n1119, e2.replace(/\\/g, "/"), t1119[e2]);
        });
    }
    get() {
        return (0, r17.encodedMap)(this._map);
    }
    getDecoded() {
        return (0, r17.decodedMap)(this._map);
    }
    getRawMappings() {
        return this._rawMappings || (this._rawMappings = (0, r17.allMappings)(this._map));
    }
    mark(e3108, t2115, o219, n2109, i121, s122) {
        const a119 = e3108.line;
        if ((this._lastGenLine === a119 || null != t2115) && (s122 || this._lastGenLine !== a119 || this._lastSourceLine !== t2115 || this._lastSourceColumn !== o219)) {
            this._rawMappings = void 0;
            this._lastGenLine = a119;
            this._lastSourceLine = t2115;
            this._lastSourceColumn = o219;
            (0, r17.addMapping)(this._map, {
                name: n2109,
                generated: e3108,
                source: null == t2115 ? void 0 : (null == i121 ? void 0 : i121.replace(/\\/g, "/")) || this._sourceFileName,
                original: null == t2115 ? void 0 : {
                    line: t2115,
                    column: o219
                }
            });
        }
    }
}
n17.default = SourceMap;
var i10 = {};
Object.defineProperty(i10, "__esModule", {
    value: true
});
i10.CodeGenerator = void 0;
i10.default = generate;
var s12 = n17;
var a11 = o12;
class Generator extends a11.default {
    constructor(e419, t382 = {}, o317){
        const n319 = normalizeOptions(o317, t382);
        const r129 = t382.sourceMaps ? new s12.default(t382, o317) : null;
        super(n319, r129);
        this.ast = void 0;
        this.ast = e419;
    }
    generate() {
        return super.generate(this.ast);
    }
}
function normalizeOptions(e518, t419) {
    const o415 = {
        auxiliaryCommentBefore: t419.auxiliaryCommentBefore,
        auxiliaryCommentAfter: t419.auxiliaryCommentAfter,
        shouldPrintComment: t419.shouldPrintComment,
        retainLines: t419.retainLines,
        retainFunctionParens: t419.retainFunctionParens,
        comments: null == t419.comments || t419.comments,
        compact: t419.compact,
        minified: t419.minified,
        concise: t419.concise,
        indent: {
            adjustMultilineComment: true,
            style: "  ",
            base: 0
        },
        decoratorsBeforeExport: !!t419.decoratorsBeforeExport,
        jsescOption: Object.assign({
            quotes: "double",
            wrap: true,
            minimal: false
        }, t419.jsescOption),
        recordAndTupleSyntaxType: t419.recordAndTupleSyntaxType,
        topicToken: t419.topicToken
    };
    o415.jsonCompatibleStrings = t419.jsonCompatibleStrings;
    if (o415.minified) {
        o415.compact = true;
        o415.shouldPrintComment = o415.shouldPrintComment || (()=>o415.comments
        );
    } else o415.shouldPrintComment = o415.shouldPrintComment || ((e616)=>o415.comments || e616.indexOf("@license") >= 0 || e616.indexOf("@preserve") >= 0
    );
    if ("auto" === o415.compact) {
        o415.compact = e518.length > 5e5;
        o415.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${t419.filename} as it exceeds the max of 500KB.`);
    }
    o415.compact && (o415.indent.adjustMultilineComment = false);
    return o415;
}
class CodeGenerator {
    constructor(e716, t518, o514){
        this._generator = void 0;
        this._generator = new Generator(e716, t518, o514);
    }
    generate() {
        return this._generator.generate();
    }
}
i10.CodeGenerator = CodeGenerator;
function generate(e816, t617, o67) {
    const n418 = new Generator(e816, t617, o67);
    return n418.generate();
}
const l11 = i10.__esModule;
const c12 = i10.CodeGenerator;
const mod12 = {
    CodeGenerator: c12,
    __esModule: l11,
    default: i10
};
var e9 = {};
Object.defineProperty(e9, "__esModule", {
    value: true
});
e9.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
e9.matchToToken = function(e1) {
    var t1120 = {
        type: "invalid",
        value: e1[0],
        closed: void 0
    };
    e1[1] ? (t1120.type = "string", t1120.closed = !!(e1[3] || e1[4])) : e1[5] ? t1120.type = "comment" : e1[6] ? (t1120.type = "comment", t1120.closed = !!e1[7]) : e1[8] ? t1120.type = "regex" : e1[9] ? t1120.type = "number" : e1[10] ? t1120.type = "name" : e1[11] ? t1120.type = "punctuator" : e1[12] && (t1120.type = "whitespace");
    return t1120;
};
const t15 = e9.__esModule, u11 = e9.matchToToken;
const mod13 = {
    __esModule: t15,
    matchToToken: u11,
    default: e9
};
var r18 = {};
var e10 = /[|\\{}()[\]^$+*?.]/g;
r18 = function(r130) {
    if ("string" !== typeof r130) throw new TypeError("Expected a string");
    return r130.replace(e10, "\\$&");
};
var t16 = r18;
var e11 = {};
e11 = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    grey: [
        128,
        128,
        128
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    rebeccapurple: [
        102,
        51,
        153
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};
var r19 = e11;
var a12 = {};
var n18 = r19;
var v6 = {};
for(var t17 in n18)n18.hasOwnProperty(t17) && (v6[n18[t17]] = t17);
var e12 = a12 = {
    rgb: {
        channels: 3,
        labels: "rgb"
    },
    hsl: {
        channels: 3,
        labels: "hsl"
    },
    hsv: {
        channels: 3,
        labels: "hsv"
    },
    hwb: {
        channels: 3,
        labels: "hwb"
    },
    cmyk: {
        channels: 4,
        labels: "cmyk"
    },
    xyz: {
        channels: 3,
        labels: "xyz"
    },
    lab: {
        channels: 3,
        labels: "lab"
    },
    lch: {
        channels: 3,
        labels: "lch"
    },
    hex: {
        channels: 1,
        labels: [
            "hex"
        ]
    },
    keyword: {
        channels: 1,
        labels: [
            "keyword"
        ]
    },
    ansi16: {
        channels: 1,
        labels: [
            "ansi16"
        ]
    },
    ansi256: {
        channels: 1,
        labels: [
            "ansi256"
        ]
    },
    hcg: {
        channels: 3,
        labels: [
            "h",
            "c",
            "g"
        ]
    },
    apple: {
        channels: 3,
        labels: [
            "r16",
            "g16",
            "b16"
        ]
    },
    gray: {
        channels: 1,
        labels: [
            "gray"
        ]
    }
};
for(var h7 in e12)if (e12.hasOwnProperty(h7)) {
    if (!("channels" in e12[h7])) throw new Error("missing channels property: " + h7);
    if (!("labels" in e12[h7])) throw new Error("missing channel labels property: " + h7);
    if (e12[h7].labels.length !== e12[h7].channels) throw new Error("channel and label counts mismatch: " + h7);
    var u12 = e12[h7].channels;
    var o14 = e12[h7].labels;
    delete e12[h7].channels;
    delete e12[h7].labels;
    Object.defineProperty(e12[h7], "channels", {
        value: u12
    });
    Object.defineProperty(e12[h7], "labels", {
        value: o14
    });
}
e12.rgb.hsl = function(r131) {
    var a120 = r131[0] / 255;
    var n1120 = r131[1] / 255;
    var v112 = r131[2] / 255;
    var t1121 = Math.min(a120, n1120, v112);
    var e1 = Math.max(a120, n1120, v112);
    var h112 = e1 - t1121;
    var u54;
    var o68;
    var c117;
    e1 === t1121 ? u54 = 0 : a120 === e1 ? u54 = (n1120 - v112) / h112 : n1120 === e1 ? u54 = 2 + (v112 - a120) / h112 : v112 === e1 && (u54 = 4 + (a120 - n1120) / h112);
    u54 = Math.min(60 * u54, 360);
    u54 < 0 && (u54 += 360);
    c117 = (t1121 + e1) / 2;
    o68 = e1 === t1121 ? 0 : c117 <= .5 ? h112 / (e1 + t1121) : h112 / (2 - e1 - t1121);
    return [
        u54,
        100 * o68,
        100 * c117
    ];
};
e12.rgb.hsv = function(r222) {
    var a213;
    var n2110;
    var v211;
    var t2116;
    var e2;
    var h212 = r222[0] / 255;
    var u55 = r222[1] / 255;
    var o69 = r222[2] / 255;
    var c213 = Math.max(h212, u55, o69);
    var i60 = c213 - Math.min(h212, u55, o69);
    var diffc = function(r321) {
        return (c213 - r321) / 6 / i60 + 1 / 2;
    };
    if (0 === i60) t2116 = e2 = 0;
    else {
        e2 = i60 / c213;
        a213 = diffc(h212);
        n2110 = diffc(u55);
        v211 = diffc(o69);
        h212 === c213 ? t2116 = v211 - n2110 : u55 === c213 ? t2116 = 1 / 3 + a213 - v211 : o69 === c213 && (t2116 = 2 / 3 + n2110 - a213);
        t2116 < 0 ? t2116 += 1 : t2116 > 1 && (t2116 -= 1);
    }
    return [
        360 * t2116,
        100 * e2,
        100 * c213
    ];
};
e12.rgb.hwb = function(r418) {
    var a314 = r418[0];
    var n320 = r418[1];
    var v34 = r418[2];
    var t383 = e12.rgb.hsl(r418)[0];
    var h310 = 1 / 255 * Math.min(a314, Math.min(n320, v34));
    v34 = 1 - 1 / 255 * Math.max(a314, Math.max(n320, v34));
    return [
        t383,
        100 * h310,
        100 * v34
    ];
};
e12.rgb.cmyk = function(r516) {
    var a412 = r516[0] / 255;
    var n419 = r516[1] / 255;
    var v41 = r516[2] / 255;
    var t420;
    var e3109;
    var h41;
    var u56;
    u56 = Math.min(1 - a412, 1 - n419, 1 - v41);
    t420 = (1 - a412 - u56) / (1 - u56) || 0;
    e3109 = (1 - n419 - u56) / (1 - u56) || 0;
    h41 = (1 - v41 - u56) / (1 - u56) || 0;
    return [
        100 * t420,
        100 * e3109,
        100 * h41,
        100 * u56
    ];
};
function comparativeDistance(r615, a56) {
    return Math.pow(r615[0] - a56[0], 2) + Math.pow(r615[1] - a56[1], 2) + Math.pow(r615[2] - a56[2], 2);
}
e12.rgb.keyword = function(r711) {
    var a61 = v6[r711];
    if (a61) return a61;
    var t519 = Infinity;
    var e420;
    for(var h51 in n18)if (n18.hasOwnProperty(h51)) {
        var u57 = n18[h51];
        var o70 = comparativeDistance(r711, u57);
        if (o70 < t519) {
            t519 = o70;
            e420 = h51;
        }
    }
    return e420;
};
e12.keyword.rgb = function(r811) {
    return n18[r811];
};
e12.rgb.xyz = function(r99) {
    var a71 = r99[0] / 255;
    var n517 = r99[1] / 255;
    var v51 = r99[2] / 255;
    a71 = a71 > .04045 ? Math.pow((a71 + .055) / 1.055, 2.4) : a71 / 12.92;
    n517 = n517 > .04045 ? Math.pow((n517 + .055) / 1.055, 2.4) : n517 / 12.92;
    v51 = v51 > .04045 ? Math.pow((v51 + .055) / 1.055, 2.4) : v51 / 12.92;
    var t618 = .4124 * a71 + .3576 * n517 + .1805 * v51;
    var e519 = .2126 * a71 + .7152 * n517 + .0722 * v51;
    var h61 = .0193 * a71 + .1192 * n517 + .9505 * v51;
    return [
        100 * t618,
        100 * e519,
        100 * h61
    ];
};
e12.rgb.lab = function(r103) {
    var a81 = e12.rgb.xyz(r103);
    var n617 = a81[0];
    var v61 = a81[1];
    var t717 = a81[2];
    var h71;
    var u58;
    var o73;
    n617 /= 95.047;
    v61 /= 100;
    t717 /= 108.883;
    n617 = n617 > .008856 ? Math.pow(n617, 1 / 3) : 7.787 * n617 + 16 / 116;
    v61 = v61 > .008856 ? Math.pow(v61, 1 / 3) : 7.787 * v61 + 16 / 116;
    t717 = t717 > .008856 ? Math.pow(t717, 1 / 3) : 7.787 * t717 + 16 / 116;
    h71 = 116 * v61 - 16;
    u58 = 500 * (n617 - v61);
    o73 = 200 * (v61 - t717);
    return [
        h71,
        u58,
        o73
    ];
};
e12.hsl.rgb = function(r1111) {
    var a91 = r1111[0] / 360;
    var n717 = r1111[1] / 100;
    var v7 = r1111[2] / 100;
    var t815;
    var e617;
    var h8;
    var u59;
    var o74;
    if (0 === n717) {
        o74 = 255 * v7;
        return [
            o74,
            o74,
            o74
        ];
    }
    e617 = v7 < .5 ? v7 * (1 + n717) : v7 + n717 - v7 * n717;
    t815 = 2 * v7 - e617;
    u59 = [
        0,
        0,
        0
    ];
    for(var c311 = 0; c311 < 3; c311++){
        h8 = a91 + 1 / 3 * -(c311 - 1);
        h8 < 0 && h8++;
        h8 > 1 && h8--;
        o74 = 6 * h8 < 1 ? t815 + 6 * (e617 - t815) * h8 : 2 * h8 < 1 ? e617 : 3 * h8 < 2 ? t815 + (e617 - t815) * (2 / 3 - h8) * 6 : t815;
        u59[c311] = 255 * o74;
    }
    return u59;
};
e12.hsl.hsv = function(r1210) {
    var a101 = r1210[0];
    var n815 = r1210[1] / 100;
    var v8 = r1210[2] / 100;
    var t914 = n815;
    var e717 = Math.max(v8, .01);
    var h9;
    var u60;
    v8 *= 2;
    n815 *= v8 <= 1 ? v8 : 2 - v8;
    t914 *= e717 <= 1 ? e717 : 2 - e717;
    u60 = (v8 + n815) / 2;
    h9 = 0 === v8 ? 2 * t914 / (e717 + t914) : 2 * n815 / (v8 + n815);
    return [
        a101,
        100 * h9,
        100 * u60
    ];
};
e12.hsv.rgb = function(r132) {
    var a1110 = r132[0] / 60;
    var n915 = r132[1] / 100;
    var v9 = r132[2] / 100;
    var t1013 = Math.floor(a1110) % 6;
    var e817 = a1110 - Math.floor(a1110);
    var h10 = 255 * v9 * (1 - n915);
    var u61 = 255 * v9 * (1 - n915 * e817);
    var o75 = 255 * v9 * (1 - n915 * (1 - e817));
    v9 *= 255;
    switch(t1013){
        case 0:
            return [
                v9,
                o75,
                h10
            ];
        case 1:
            return [
                u61,
                v9,
                h10
            ];
        case 2:
            return [
                h10,
                v9,
                o75
            ];
        case 3:
            return [
                h10,
                u61,
                v9
            ];
        case 4:
            return [
                o75,
                h10,
                v9
            ];
        case 5:
            return [
                v9,
                h10,
                u61
            ];
    }
};
e12.hsv.hsl = function(r141) {
    var a121 = r141[0];
    var n1015 = r141[1] / 100;
    var v10 = r141[2] / 100;
    var t1122 = Math.max(v10, .01);
    var e910;
    var h11;
    var u62;
    u62 = (2 - n1015) * v10;
    e910 = (2 - n1015) * t1122;
    h11 = n1015 * t1122;
    h11 /= e910 <= 1 ? e910 : 2 - e910;
    h11 = h11 || 0;
    u62 /= 2;
    return [
        a121,
        100 * h11,
        100 * u62
    ];
};
e12.hwb.rgb = function(r151) {
    var a13 = r151[0] / 360;
    var n1121 = r151[1] / 100;
    var v11 = r151[2] / 100;
    var t1212 = n1121 + v11;
    var e1010;
    var h12;
    var u63;
    var o76;
    if (t1212 > 1) {
        n1121 /= t1212;
        v11 /= t1212;
    }
    e1010 = Math.floor(6 * a13);
    h12 = 1 - v11;
    u63 = 6 * a13 - e1010;
    0 !== (1 & e1010) && (u63 = 1 - u63);
    o76 = n1121 + u63 * (h12 - n1121);
    var c411;
    var i63;
    var s60;
    switch(e1010){
        default:
        case 6:
        case 0:
            c411 = h12;
            i63 = o76;
            s60 = n1121;
            break;
        case 1:
            c411 = o76;
            i63 = h12;
            s60 = n1121;
            break;
        case 2:
            c411 = n1121;
            i63 = h12;
            s60 = o76;
            break;
        case 3:
            c411 = n1121;
            i63 = o76;
            s60 = h12;
            break;
        case 4:
            c411 = o76;
            i63 = n1121;
            s60 = h12;
            break;
        case 5:
            c411 = h12;
            i63 = n1121;
            s60 = o76;
            break;
    }
    return [
        255 * c411,
        255 * i63,
        255 * s60
    ];
};
e12.cmyk.rgb = function(r161) {
    var a14 = r161[0] / 100;
    var n1213 = r161[1] / 100;
    var v12 = r161[2] / 100;
    var t1312 = r161[3] / 100;
    var e1110;
    var h13;
    var u64;
    e1110 = 1 - Math.min(1, a14 * (1 - t1312) + t1312);
    h13 = 1 - Math.min(1, n1213 * (1 - t1312) + t1312);
    u64 = 1 - Math.min(1, v12 * (1 - t1312) + t1312);
    return [
        255 * e1110,
        255 * h13,
        255 * u64
    ];
};
e12.xyz.rgb = function(r171) {
    var a15 = r171[0] / 100;
    var n1311 = r171[1] / 100;
    var v13 = r171[2] / 100;
    var t1411;
    var e1210;
    var h14;
    t1411 = 3.2406 * a15 + -1.5372 * n1311 + -.4986 * v13;
    e1210 = -.9689 * a15 + 1.8758 * n1311 + .0415 * v13;
    h14 = .0557 * a15 + -.204 * n1311 + 1.057 * v13;
    t1411 = t1411 > .0031308 ? 1.055 * Math.pow(t1411, 1 / 2.4) - .055 : 12.92 * t1411;
    e1210 = e1210 > .0031308 ? 1.055 * Math.pow(e1210, 1 / 2.4) - .055 : 12.92 * e1210;
    h14 = h14 > .0031308 ? 1.055 * Math.pow(h14, 1 / 2.4) - .055 : 12.92 * h14;
    t1411 = Math.min(Math.max(0, t1411), 1);
    e1210 = Math.min(Math.max(0, e1210), 1);
    h14 = Math.min(Math.max(0, h14), 1);
    return [
        255 * t1411,
        255 * e1210,
        255 * h14
    ];
};
e12.xyz.lab = function(r181) {
    var a16 = r181[0];
    var n1411 = r181[1];
    var v14 = r181[2];
    var t1510;
    var e13;
    var h15;
    a16 /= 95.047;
    n1411 /= 100;
    v14 /= 108.883;
    a16 = a16 > .008856 ? Math.pow(a16, 1 / 3) : 7.787 * a16 + 16 / 116;
    n1411 = n1411 > .008856 ? Math.pow(n1411, 1 / 3) : 7.787 * n1411 + 16 / 116;
    v14 = v14 > .008856 ? Math.pow(v14, 1 / 3) : 7.787 * v14 + 16 / 116;
    t1510 = 116 * n1411 - 16;
    e13 = 500 * (a16 - n1411);
    h15 = 200 * (n1411 - v14);
    return [
        t1510,
        e13,
        h15
    ];
};
e12.lab.xyz = function(r191) {
    var a17 = r191[0];
    var n1511 = r191[1];
    var v15 = r191[2];
    var t1610;
    var e14;
    var h16;
    e14 = (a17 + 16) / 116;
    t1610 = n1511 / 500 + e14;
    h16 = e14 - v15 / 200;
    var u65 = Math.pow(e14, 3);
    var o77 = Math.pow(t1610, 3);
    var c52 = Math.pow(h16, 3);
    e14 = u65 > .008856 ? u65 : (e14 - 16 / 116) / 7.787;
    t1610 = o77 > .008856 ? o77 : (t1610 - 16 / 116) / 7.787;
    h16 = c52 > .008856 ? c52 : (h16 - 16 / 116) / 7.787;
    t1610 *= 95.047;
    e14 *= 100;
    h16 *= 108.883;
    return [
        t1610,
        e14,
        h16
    ];
};
e12.lab.lch = function(r20) {
    var a18 = r20[0];
    var n1610 = r20[1];
    var v16 = r20[2];
    var t1710;
    var e15;
    var h17;
    t1710 = Math.atan2(v16, n1610);
    e15 = 360 * t1710 / 2 / Math.PI;
    e15 < 0 && (e15 += 360);
    h17 = Math.sqrt(n1610 * n1610 + v16 * v16);
    return [
        a18,
        h17,
        e15
    ];
};
e12.lch.lab = function(r21) {
    var a19 = r21[0];
    var n1710 = r21[1];
    var v17 = r21[2];
    var t18;
    var e16;
    var h18;
    h18 = v17 / 360 * 2 * Math.PI;
    t18 = n1710 * Math.cos(h18);
    e16 = n1710 * Math.sin(h18);
    return [
        a19,
        t18,
        e16
    ];
};
e12.rgb.ansi16 = function(r22) {
    var a20 = r22[0];
    var n1810 = r22[1];
    var v18 = r22[2];
    var t19 = 1 in arguments ? arguments[1] : e12.rgb.hsv(r22)[2];
    t19 = Math.round(t19 / 50);
    if (0 === t19) return 30;
    var h19 = 30 + (Math.round(v18 / 255) << 2 | Math.round(n1810 / 255) << 1 | Math.round(a20 / 255));
    2 === t19 && (h19 += 60);
    return h19;
};
e12.hsv.ansi16 = function(r23) {
    return e12.rgb.ansi16(e12.hsv.rgb(r23), r23[2]);
};
e12.rgb.ansi256 = function(r24) {
    var a21 = r24[0];
    var n19 = r24[1];
    var v19 = r24[2];
    if (a21 === n19 && n19 === v19) return a21 < 8 ? 16 : a21 > 248 ? 231 : Math.round((a21 - 8) / 247 * 24) + 232;
    var t20 = 16 + 36 * Math.round(a21 / 255 * 5) + 6 * Math.round(n19 / 255 * 5) + Math.round(v19 / 255 * 5);
    return t20;
};
e12.ansi16.rgb = function(r25) {
    var a22 = r25 % 10;
    if (0 === a22 || 7 === a22) {
        r25 > 50 && (a22 += 3.5);
        a22 = a22 / 10.5 * 255;
        return [
            a22,
            a22,
            a22
        ];
    }
    var n20 = .5 * (~~(r25 > 50) + 1);
    var v20 = (1 & a22) * n20 * 255;
    var t21 = (a22 >> 1 & 1) * n20 * 255;
    var e17 = (a22 >> 2 & 1) * n20 * 255;
    return [
        v20,
        t21,
        e17
    ];
};
e12.ansi256.rgb = function(r26) {
    if (r26 >= 232) {
        var a23 = 10 * (r26 - 232) + 8;
        return [
            a23,
            a23,
            a23
        ];
    }
    r26 -= 16;
    var n21;
    var v21 = Math.floor(r26 / 36) / 5 * 255;
    var t22 = Math.floor((n21 = r26 % 36) / 6) / 5 * 255;
    var e18 = n21 % 6 / 5 * 255;
    return [
        v21,
        t22,
        e18
    ];
};
e12.rgb.hex = function(r27) {
    var a24 = ((255 & Math.round(r27[0])) << 16) + ((255 & Math.round(r27[1])) << 8) + (255 & Math.round(r27[2]));
    var n22 = a24.toString(16).toUpperCase();
    return "000000".substring(n22.length) + n22;
};
e12.hex.rgb = function(r28) {
    var a25 = r28.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!a25) return [
        0,
        0,
        0
    ];
    var n23 = a25[0];
    3 === a25[0].length && (n23 = n23.split("").map(function(r29) {
        return r29 + r29;
    }).join(""));
    var v22 = parseInt(n23, 16);
    var t23 = v22 >> 16 & 255;
    var e19 = v22 >> 8 & 255;
    var h20 = 255 & v22;
    return [
        t23,
        e19,
        h20
    ];
};
e12.rgb.hcg = function(r30) {
    var a26 = r30[0] / 255;
    var n24 = r30[1] / 255;
    var v23 = r30[2] / 255;
    var t24 = Math.max(Math.max(a26, n24), v23);
    var e20 = Math.min(Math.min(a26, n24), v23);
    var h21 = t24 - e20;
    var u66;
    var o78;
    u66 = h21 < 1 ? e20 / (1 - h21) : 0;
    o78 = h21 <= 0 ? 0 : t24 === a26 ? (n24 - v23) / h21 % 6 : t24 === n24 ? 2 + (v23 - a26) / h21 : 4 + (a26 - n24) / h21 + 4;
    o78 /= 6;
    o78 %= 1;
    return [
        360 * o78,
        100 * h21,
        100 * u66
    ];
};
e12.hsl.hcg = function(r31) {
    var a27 = r31[1] / 100;
    var n25 = r31[2] / 100;
    var v24 = 1;
    var t25 = 0;
    v24 = n25 < .5 ? 2 * a27 * n25 : 2 * a27 * (1 - n25);
    v24 < 1 && (t25 = (n25 - .5 * v24) / (1 - v24));
    return [
        r31[0],
        100 * v24,
        100 * t25
    ];
};
e12.hsv.hcg = function(r32) {
    var a28 = r32[1] / 100;
    var n26 = r32[2] / 100;
    var v25 = a28 * n26;
    var t26 = 0;
    v25 < 1 && (t26 = (n26 - v25) / (1 - v25));
    return [
        r32[0],
        100 * v25,
        100 * t26
    ];
};
e12.hcg.rgb = function(r33) {
    var a29 = r33[0] / 360;
    var n27 = r33[1] / 100;
    var v26 = r33[2] / 100;
    if (0 === n27) return [
        255 * v26,
        255 * v26,
        255 * v26
    ];
    var t27 = [
        0,
        0,
        0
    ];
    var e21 = a29 % 1 * 6;
    var h22 = e21 % 1;
    var u67 = 1 - h22;
    var o79 = 0;
    switch(Math.floor(e21)){
        case 0:
            t27[0] = 1;
            t27[1] = h22;
            t27[2] = 0;
            break;
        case 1:
            t27[0] = u67;
            t27[1] = 1;
            t27[2] = 0;
            break;
        case 2:
            t27[0] = 0;
            t27[1] = 1;
            t27[2] = h22;
            break;
        case 3:
            t27[0] = 0;
            t27[1] = u67;
            t27[2] = 1;
            break;
        case 4:
            t27[0] = h22;
            t27[1] = 0;
            t27[2] = 1;
            break;
        default:
            t27[0] = 1;
            t27[1] = 0;
            t27[2] = u67;
    }
    o79 = (1 - n27) * v26;
    return [
        255 * (n27 * t27[0] + o79),
        255 * (n27 * t27[1] + o79),
        255 * (n27 * t27[2] + o79)
    ];
};
e12.hcg.hsv = function(r34) {
    var a30 = r34[1] / 100;
    var n28 = r34[2] / 100;
    var v27 = a30 + n28 * (1 - a30);
    var t28 = 0;
    v27 > 0 && (t28 = a30 / v27);
    return [
        r34[0],
        100 * t28,
        100 * v27
    ];
};
e12.hcg.hsl = function(r35) {
    var a31 = r35[1] / 100;
    var n29 = r35[2] / 100;
    var v28 = n29 * (1 - a31) + .5 * a31;
    var t29 = 0;
    v28 > 0 && v28 < .5 ? t29 = a31 / (2 * v28) : v28 >= .5 && v28 < 1 && (t29 = a31 / (2 * (1 - v28)));
    return [
        r35[0],
        100 * t29,
        100 * v28
    ];
};
e12.hcg.hwb = function(r36) {
    var a32 = r36[1] / 100;
    var n30 = r36[2] / 100;
    var v29 = a32 + n30 * (1 - a32);
    return [
        r36[0],
        100 * (v29 - a32),
        100 * (1 - v29)
    ];
};
e12.hwb.hcg = function(r37) {
    var a33 = r37[1] / 100;
    var n31 = r37[2] / 100;
    var v30 = 1 - n31;
    var t30 = v30 - a33;
    var e22 = 0;
    t30 < 1 && (e22 = (v30 - t30) / (1 - t30));
    return [
        r37[0],
        100 * t30,
        100 * e22
    ];
};
e12.apple.rgb = function(r38) {
    return [
        r38[0] / 65535 * 255,
        r38[1] / 65535 * 255,
        r38[2] / 65535 * 255
    ];
};
e12.rgb.apple = function(r39) {
    return [
        r39[0] / 255 * 65535,
        r39[1] / 255 * 65535,
        r39[2] / 255 * 65535
    ];
};
e12.gray.rgb = function(r40) {
    return [
        r40[0] / 100 * 255,
        r40[0] / 100 * 255,
        r40[0] / 100 * 255
    ];
};
e12.gray.hsl = e12.gray.hsv = function(r41) {
    return [
        0,
        0,
        r41[0]
    ];
};
e12.gray.hwb = function(r42) {
    return [
        0,
        100,
        r42[0]
    ];
};
e12.gray.cmyk = function(r43) {
    return [
        0,
        0,
        0,
        r43[0]
    ];
};
e12.gray.lab = function(r44) {
    return [
        r44[0],
        0,
        0
    ];
};
e12.gray.hex = function(r45) {
    var a34 = 255 & Math.round(r45[0] / 100 * 255);
    var n32 = (a34 << 16) + (a34 << 8) + a34;
    var v31 = n32.toString(16).toUpperCase();
    return "000000".substring(v31.length) + v31;
};
e12.rgb.gray = function(r46) {
    var a35 = (r46[0] + r46[1] + r46[2]) / 3;
    return [
        a35 / 255 * 100
    ];
};
var c13 = a12;
var n19 = {};
var e13 = c13;
function buildGraph() {
    var r133 = {};
    var n1122 = Object.keys(e13);
    for(var a122 = n1122.length, t1123 = 0; t1123 < a122; t1123++)r133[n1122[t1123]] = {
        distance: -1,
        parent: null
    };
    return r133;
}
function deriveBFS(r223) {
    var n2111 = buildGraph();
    var a214 = [
        r223
    ];
    n2111[r223].distance = 0;
    while(a214.length){
        var t2117 = a214.pop();
        var o122 = Object.keys(e13[t2117]);
        for(var i122 = o122.length, v113 = 0; v113 < i122; v113++){
            var c118 = o122[v113];
            var u116 = n2111[c118];
            if (-1 === u116.distance) {
                u116.distance = n2111[t2117].distance + 1;
                u116.parent = t2117;
                a214.unshift(c118);
            }
        }
    }
    return n2111;
}
function link(r322, n321) {
    return function(e1) {
        return n321(r322(e1));
    };
}
function wrapConversion(r419, n420) {
    var a315 = [
        n420[r419].parent,
        r419
    ];
    var t384 = e13[n420[r419].parent][r419];
    var o220 = n420[r419].parent;
    while(n420[o220].parent){
        a315.unshift(n420[o220].parent);
        t384 = link(e13[n420[o220].parent][o220], t384);
        o220 = n420[o220].parent;
    }
    t384.conversion = a315;
    return t384;
}
n19 = function(r517) {
    var n518 = deriveBFS(r517);
    var e2 = {};
    var a413 = Object.keys(n518);
    for(var t421 = a413.length, o318 = 0; o318 < t421; o318++){
        var i217 = a413[o318];
        var v212 = n518[i217];
        null !== v212.parent && (e2[i217] = wrapConversion(i217, n518));
    }
    return e2;
};
var a13 = n19;
var t18 = {};
var o15 = c13;
var i11 = a13;
var v7 = {};
var c14 = Object.keys(o15);
function wrapRaw(r616) {
    var wrappedFn = function(n618) {
        if (void 0 === n618 || null === n618) return n618;
        arguments.length > 1 && (n618 = Array.prototype.slice.call(arguments));
        return r616(n618);
    };
    "conversion" in r616 && (wrappedFn.conversion = r616.conversion);
    return wrappedFn;
}
function wrapRounded(r712) {
    var wrappedFn = function(n718) {
        if (void 0 === n718 || null === n718) return n718;
        arguments.length > 1 && (n718 = Array.prototype.slice.call(arguments));
        var e3110 = r712(n718);
        if ("object" === typeof e3110) for(var a57 = e3110.length, t520 = 0; t520 < a57; t520++)e3110[t520] = Math.round(e3110[t520]);
        return e3110;
    };
    "conversion" in r712 && (wrappedFn.conversion = r712.conversion);
    return wrappedFn;
}
c14.forEach(function(r812) {
    v7[r812] = {};
    Object.defineProperty(v7[r812], "channels", {
        value: o15[r812].channels
    });
    Object.defineProperty(v7[r812], "labels", {
        value: o15[r812].labels
    });
    var n816 = i11(r812);
    var e421 = Object.keys(n816);
    e421.forEach(function(e520) {
        var a62 = n816[e520];
        v7[r812][e520] = wrapRounded(a62);
        v7[r812][e520].raw = wrapRaw(a62);
    });
});
t18 = v7;
var u13 = t18;
var o16 = {};
var r20 = {
    exports: o16
};
const wrapAnsi16 = (e1, o123)=>function() {
        const r134 = e1.apply(u13, arguments);
        return `[${r134 + o123}m`;
    }
;
const wrapAnsi256 = (e2, o221)=>function() {
        const r224 = e2.apply(u13, arguments);
        return `[${38 + o221};5;${r224}m`;
    }
;
const wrapAnsi16m = (e3111, o319)=>function() {
        const r323 = e3111.apply(u13, arguments);
        return `[${38 + o319};2;${r323[0]};${r323[1]};${r323[2]}m`;
    }
;
function assembleStyles() {
    const e521 = new Map;
    const o416 = {
        modifier: {
            reset: [
                0,
                0
            ],
            bold: [
                1,
                22
            ],
            dim: [
                2,
                22
            ],
            italic: [
                3,
                23
            ],
            underline: [
                4,
                24
            ],
            inverse: [
                7,
                27
            ],
            hidden: [
                8,
                28
            ],
            strikethrough: [
                9,
                29
            ]
        },
        color: {
            black: [
                30,
                39
            ],
            red: [
                31,
                39
            ],
            green: [
                32,
                39
            ],
            yellow: [
                33,
                39
            ],
            blue: [
                34,
                39
            ],
            magenta: [
                35,
                39
            ],
            cyan: [
                36,
                39
            ],
            white: [
                37,
                39
            ],
            gray: [
                90,
                39
            ],
            redBright: [
                91,
                39
            ],
            greenBright: [
                92,
                39
            ],
            yellowBright: [
                93,
                39
            ],
            blueBright: [
                94,
                39
            ],
            magentaBright: [
                95,
                39
            ],
            cyanBright: [
                96,
                39
            ],
            whiteBright: [
                97,
                39
            ]
        },
        bgColor: {
            bgBlack: [
                40,
                49
            ],
            bgRed: [
                41,
                49
            ],
            bgGreen: [
                42,
                49
            ],
            bgYellow: [
                43,
                49
            ],
            bgBlue: [
                44,
                49
            ],
            bgMagenta: [
                45,
                49
            ],
            bgCyan: [
                46,
                49
            ],
            bgWhite: [
                47,
                49
            ],
            bgBlackBright: [
                100,
                49
            ],
            bgRedBright: [
                101,
                49
            ],
            bgGreenBright: [
                102,
                49
            ],
            bgYellowBright: [
                103,
                49
            ],
            bgBlueBright: [
                104,
                49
            ],
            bgMagentaBright: [
                105,
                49
            ],
            bgCyanBright: [
                106,
                49
            ],
            bgWhiteBright: [
                107,
                49
            ]
        }
    };
    o416.color.grey = o416.color.gray;
    for (const r518 of Object.keys(o416)){
        const n1123 = o416[r518];
        for (const r420 of Object.keys(n1123)){
            const t1124 = n1123[r420];
            o416[r420] = {
                open: `[${t1124[0]}m`,
                close: `[${t1124[1]}m`
            };
            n1123[r420] = o416[r420];
            e521.set(t1124[0], t1124[1]);
        }
        Object.defineProperty(o416, r518, {
            value: n1123,
            enumerable: false
        });
        Object.defineProperty(o416, "codes", {
            value: e521,
            enumerable: false
        });
    }
    const ansi2ansi = (e618)=>e618
    ;
    const rgb2rgb = (e718, o515, r617)=>[
            e718,
            o515,
            r617
        ]
    ;
    o416.color.close = "[39m";
    o416.bgColor.close = "[49m";
    o416.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
    };
    o416.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    o416.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    o416.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
    };
    o416.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    o416.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let e422 of Object.keys(u13)){
        if ("object" !== typeof u13[e422]) continue;
        const r713 = u13[e422];
        "ansi16" === e422 && (e422 = "ansi");
        if ("ansi16" in r713) {
            o416.color.ansi[e422] = wrapAnsi16(r713.ansi16, 0);
            o416.bgColor.ansi[e422] = wrapAnsi16(r713.ansi16, 10);
        }
        if ("ansi256" in r713) {
            o416.color.ansi256[e422] = wrapAnsi256(r713.ansi256, 0);
            o416.bgColor.ansi256[e422] = wrapAnsi256(r713.ansi256, 10);
        }
        if ("rgb" in r713) {
            o416.color.ansi16m[e422] = wrapAnsi16m(r713.rgb, 0);
            o416.bgColor.ansi16m[e422] = wrapAnsi16m(r713.rgb, 10);
        }
    }
    return o416;
}
Object.defineProperty(r20, "exports", {
    enumerable: true,
    get: assembleStyles
});
var t19 = r20.exports;
var t20 = {};
t20 = {
    stdout: false,
    stderr: false
};
var r21 = t20;
t20.stdout, t20.stderr;
var e14 = {};
const t21 = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const n20 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const s13 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const r22 = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
const l12 = new Map([
    [
        "n",
        "\n"
    ],
    [
        "r",
        "\r"
    ],
    [
        "t",
        "\t"
    ],
    [
        "b",
        "\b"
    ],
    [
        "f",
        "\f"
    ],
    [
        "v",
        "\v"
    ],
    [
        "0",
        "\0"
    ],
    [
        "\\",
        "\\"
    ],
    [
        "e",
        ""
    ],
    [
        "a",
        ""
    ]
]);
function unescape(e1) {
    return "u" === e1[0] && 5 === e1.length || "x" === e1[0] && 3 === e1.length ? String.fromCharCode(parseInt(e1.slice(1), 16)) : l12.get(e1) || e1;
}
function parseArguments(e2, t2118) {
    const n1124 = [];
    const l115 = t2118.trim().split(/\s*,\s*/g);
    let o124;
    for (const t1125 of l115)if (isNaN(t1125)) {
        if (!(o124 = t1125.match(s13))) throw new Error(`Invalid Chalk template style argument: ${t1125} (in style '${e2}')`);
        n1124.push(o124[2].replace(r22, (e, t385, n2112)=>t385 ? unescape(t385) : n2112
        ));
    } else n1124.push(Number(t1125));
    return n1124;
}
function parseStyle(e3112) {
    n20.lastIndex = 0;
    const t422 = [];
    let s123;
    while(null !== (s123 = n20.exec(e3112))){
        const e423 = s123[1];
        if (s123[2]) {
            const n322 = parseArguments(e423, s123[2]);
            t422.push([
                e423
            ].concat(n322));
        } else t422.push([
            e423
        ]);
    }
    return t422;
}
function buildStyle(e719, t619) {
    const n421 = {};
    for (const e522 of t619)for (const t521 of e522.styles)n421[t521[0]] = e522.inverse ? null : t521.slice(1);
    let s217 = e719;
    for (const e619 of Object.keys(n421))if (Array.isArray(n421[e619])) {
        if (!(e619 in s217)) throw new Error(`Unknown Chalk style: ${e619}`);
        s217 = n421[e619].length > 0 ? s217[e619].apply(s217, n421[e619]) : s217[e619];
    }
    return s217;
}
e14 = (e818, n519)=>{
    const s316 = [];
    const r135 = [];
    let l213 = [];
    n519.replace(t21, (t, n619, o222, i64, a, c53)=>{
        if (n619) l213.push(unescape(n619));
        else if (i64) {
            const t718 = l213.join("");
            l213 = [];
            r135.push(0 === s316.length ? t718 : buildStyle(e818, s316)(t718));
            s316.push({
                inverse: o222,
                styles: parseStyle(i64)
            });
        } else if (a) {
            if (0 === s316.length) throw new Error("Found extraneous } in Chalk template literal");
            r135.push(buildStyle(e818, s316)(l213.join("")));
            l213 = [];
            s316.pop();
        } else l213.push(c53);
    });
    r135.push(l213.join(""));
    if (s316.length > 0) {
        const e911 = `Chalk template literal is missing ${s316.length} closing bracket${1 === s316.length ? "" : "s"} (\`}\`)`;
        throw new Error(e911);
    }
    return r135.join("");
};
var o17 = e14;
var n21 = {};
var r23 = se;
const c15 = t16;
const i12 = t19;
const p9 = r21.stdout;
const u14 = "win32" === r23.platform && !(r23.env.TERM || "").toLowerCase().startsWith("xterm");
const h8 = [
    "ansi",
    "ansi",
    "ansi256",
    "ansi16m"
];
const y5 = new Set([
    "gray"
]);
const f10 = Object.create(null);
function applyOptions(e424, t1126) {
    t1126 = t1126 || {};
    const o125 = p9 ? p9.level : 0;
    e424.level = void 0 === t1126.level ? o125 : t1126.level;
    e424.enabled = "enabled" in t1126 ? t1126.enabled : e424.level > 0;
}
function Chalk(e523) {
    if (!this || !(this instanceof Chalk) || this.template) {
        const t2119 = {};
        applyOptions(t2119, e523);
        t2119.template = function() {
            const e620 = [].slice.call(arguments);
            return chalkTag.apply(null, [
                t2119.template
            ].concat(e620));
        };
        Object.setPrototypeOf(t2119, Chalk.prototype);
        Object.setPrototypeOf(t2119.template, t2119);
        t2119.template.constructor = Chalk;
        return t2119.template;
    }
    applyOptions(this, e523);
}
u14 && (i12.blue.open = "[94m");
for (const e15 of Object.keys(t19)){
    i12[e15].closeRe = new RegExp(c15(i12[e15].close), "g");
    f10[e15] = {
        get () {
            const t386 = i12[e15];
            return build.call(this, this._styles ? this._styles.concat(t386) : [
                t386
            ], this._empty, e15);
        }
    };
}
f10.visible = {
    get () {
        return build.call(this, this._styles || [], true, "visible");
    }
};
i12.color.closeRe = new RegExp(c15(i12.color.close), "g");
for (const e113 of Object.keys(t19.color.ansi))y5.has(e113) || (f10[e113] = {
    get () {
        const t423 = this.level;
        return function() {
            const o223 = i12.color[h8[t423]][e113].apply(null, arguments);
            const s124 = {
                open: o223,
                close: i12.color.close,
                closeRe: i12.color.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(s124) : [
                s124
            ], this._empty, e113);
        };
    }
});
i12.bgColor.closeRe = new RegExp(c15(i12.bgColor.close), "g");
for (const e2101 of Object.keys(t19.bgColor.ansi)){
    if (y5.has(e2101)) continue;
    const t5 = "bg" + e2101[0].toUpperCase() + e2101.slice(1);
    f10[t5] = {
        get () {
            const t = this.level;
            return function() {
                const o320 = i12.bgColor[h8[t]][e2101].apply(null, arguments);
                const s218 = {
                    open: o320,
                    close: i12.bgColor.close,
                    closeRe: i12.bgColor.closeRe
                };
                return build.call(this, this._styles ? this._styles.concat(s218) : [
                    s218
                ], this._empty, e2101);
            };
        }
    };
}
const b7 = Object.defineProperties(()=>{}, f10);
function build(e720, t620, o417) {
    const builder = function() {
        return applyStyle.apply(builder, arguments);
    };
    builder._styles = e720;
    builder._empty = t620;
    const s317 = this;
    Object.defineProperty(builder, "level", {
        enumerable: true,
        get () {
            return s317.level;
        },
        set (e819) {
            s317.level = e819;
        }
    });
    Object.defineProperty(builder, "enabled", {
        enumerable: true,
        get () {
            return s317.enabled;
        },
        set (e912) {
            s317.enabled = e912;
        }
    });
    builder.hasGrey = this.hasGrey || "gray" === o417 || "grey" === o417;
    builder.__proto__ = b7;
    return builder;
}
function applyStyle() {
    const e1111 = arguments;
    const t719 = e1111.length;
    let o516 = String(arguments[0]);
    if (0 === t719) return "";
    if (t719 > 1) for(let s511 = 1; s511 < t719; s511++)o516 += " " + e1111[s511];
    if (!this.enabled || this.level <= 0 || !o516) return this._empty ? "" : o516;
    const s414 = t19.dim.open;
    u14 && this.hasGrey && (i12.dim.open = "");
    for (const e1011 of this._styles.slice().reverse()){
        o516 = e1011.open + o516.replace(e1011.closeRe, e1011.open) + e1011.close;
        o516 = o516.replace(/\r?\n/g, `${e1011.close}$&${e1011.open}`);
    }
    i12.dim.open = s414;
    return o516;
}
function chalkTag(e1310, t816) {
    if (!Array.isArray(t816)) return [].slice.call(arguments, 1).join(" ");
    const o610 = [].slice.call(arguments, 2);
    const s65 = [
        t816.raw[0]
    ];
    for(let e1211 = 1; e1211 < t816.length; e1211++){
        s65.push(String(o610[e1211 - 1]).replace(/[{}\\]/g, "\\$&"));
        s65.push(String(t816.raw[e1211]));
    }
    return o17(e1310, s65.join(""));
}
Object.defineProperties(Chalk.prototype, f10);
n21 = Chalk();
n21.supportsColor = p9;
n21.default = n21;
var g7 = n21;
const m8 = n21.supportsColor;
const mod14 = {
    supportsColor: m8,
    default: g7
};
var r24 = "default" in mod13 ? mod13.default : mod13;
var o18 = "default" in mod2 ? mod2.default : mod2;
var n22 = "default" in mod14 ? mod14.default : mod14;
var a14 = {};
Object.defineProperty(a14, "__esModule", {
    value: true
});
a14.default = highlight;
a14.getChalk = getChalk;
a14.shouldHighlight = shouldHighlight;
var i13 = r24;
var u15 = o18;
var s14 = n22;
const h9 = new Set([
    "as",
    "async",
    "from",
    "get",
    "of",
    "set"
]);
function getDefs(e1) {
    return {
        keyword: e1.cyan,
        capitalized: e1.yellow,
        jsxIdentifier: e1.yellow,
        punctuator: e1.yellow,
        number: e1.magenta,
        string: e1.green,
        regex: e1.magenta,
        comment: e1.grey,
        invalid: e1.white.bgRed.bold
    };
}
const c16 = /\r\n|[\n\r\u2028\u2029]/;
const d8 = /^[()[\]{}]$/;
let f11;
{
    const e2 = /^[a-z][\w-]*$/i;
    const getTokenType = function(t1127, l116, r136) {
        if ("name" === t1127.type) {
            if ((0, u15.isKeyword)(t1127.value) || (0, u15.isStrictReservedWord)(t1127.value, true) || h9.has(t1127.value)) return "keyword";
            if (e2.test(t1127.value) && ("<" === r136[l116 - 1] || "</" == r136.slice(l116 - 2, l116))) return "jsxIdentifier";
            if (t1127.value[0] !== t1127.value[0].toLowerCase()) return "capitalized";
        }
        return "punctuator" === t1127.type && d8.test(t1127.value) ? "bracket" : "invalid" !== t1127.type || "@" !== t1127.value && "#" !== t1127.value ? t1127.type : "punctuator";
    };
    f11 = function*(e3113) {
        let t2120;
        while(t2120 = i13.default.exec(e3113)){
            const l214 = i13.matchToToken(t2120);
            yield {
                type: getTokenType(l214, t2120.index, e3113),
                value: l214.value
            };
        }
    };
}function highlightTokens(e425, t387) {
    let l311 = "";
    for (const { type: r225 , value: o126  } of f11(t387)){
        const t424 = e425[r225];
        l311 += t424 ? o126.split(c16).map((e524)=>t424(e524)
        ).join("\n") : o126;
    }
    return l311;
}
function shouldHighlight(e621) {
    return !!s14.supportsColor || e621.forceColor;
}
function getChalk(e721) {
    return e721.forceColor ? new s14.constructor({
        enabled: true,
        level: 1
    }) : s14;
}
function highlight(e820, t522 = {}) {
    if ("" !== e820 && shouldHighlight(t522)) {
        const l410 = getChalk(t522);
        const r324 = getDefs(l410);
        return highlightTokens(r324, e820);
    }
    return e820;
}
const g8 = a14.__esModule;
const v8 = a14.getChalk, p10 = a14.shouldHighlight;
const mod15 = {
    __esModule: g8,
    default: a14,
    getChalk: v8,
    shouldHighlight: p10
};
var n23 = "default" in mod15 ? mod15.default : mod15;
var s15 = {};
var r25 = se;
Object.defineProperty(s15, "__esModule", {
    value: true
});
s15.codeFrameColumns = codeFrameColumns;
s15.default = _default;
var o19 = n23;
let a15 = false;
function getDefs1(e1) {
    return {
        gutter: e1.grey,
        marker: e1.red.bold,
        message: e1.red.bold
    };
}
const l13 = /\r\n|[\n\r\u2028\u2029]/;
function getMarkerLines(e3114, t1128, n1125) {
    const s125 = Object.assign({
        column: 0,
        line: -1
    }, e3114.start);
    const r137 = Object.assign({}, s125, e3114.end);
    const { linesAbove: o127 = 2 , linesBelow: a123 = 3  } = n1125 || {};
    const l117 = s125.line;
    const c119 = s125.column;
    const i123 = r137.line;
    const m40 = r137.column;
    let u68 = Math.max(l117 - (o127 + 1), 0);
    let g37 = Math.min(t1128.length, i123 + a123);
    -1 === l117 && (u68 = 0);
    -1 === i123 && (g37 = t1128.length);
    const d49 = i123 - l117;
    const f55 = {};
    if (d49) for(let e2 = 0; e2 <= d49; e2++){
        const n2113 = e2 + l117;
        if (c119) if (0 === e2) {
            const e426 = t1128[n2113 - 1].length;
            f55[n2113] = [
                c119,
                e426 - c119 + 1
            ];
        } else if (e2 === d49) f55[n2113] = [
            0,
            m40
        ];
        else {
            const s219 = t1128[n2113 - e2].length;
            f55[n2113] = [
                0,
                s219
            ];
        }
        else f55[n2113] = true;
    }
    else f55[l117] = c119 === m40 ? !c119 || [
        c119,
        0
    ] : [
        c119,
        m40 - c119
    ];
    return {
        start: u68,
        end: g37,
        markerLines: f55
    };
}
function codeFrameColumns(e525, t2121, n323 = {}) {
    const s318 = (n323.highlightCode || n323.forceColor) && (0, o19.shouldHighlight)(n323);
    const r226 = (0, o19.getChalk)(n323);
    const a215 = getDefs1(r226);
    const maybeHighlight = (e622, t388)=>s318 ? e622(t388) : t388
    ;
    const c214 = e525.split(l13);
    const { start: i218 , end: m41 , markerLines: u69  } = getMarkerLines(t2121, c214, n323);
    const g38 = t2121.start && "number" === typeof t2121.start.column;
    const d50 = String(m41).length;
    const f56 = s318 ? (0, o19.default)(e525, n323) : e525;
    let h40 = f56.split(l13, m41).slice(i218, m41).map((e722, t425)=>{
        const s415 = i218 + 1 + t425;
        const r325 = ` ${s415}`.slice(-d50);
        const o224 = ` ${r325} |`;
        const l215 = u69[s415];
        const c312 = !u69[s415 + 1];
        if (l215) {
            let t523 = "";
            if (Array.isArray(l215)) {
                const s512 = e722.slice(0, Math.max(l215[0] - 1, 0)).replace(/[^\t]/g, " ");
                const r421 = l215[1] || 1;
                t523 = [
                    "\n ",
                    maybeHighlight(a215.gutter, o224.replace(/\d/g, " ")),
                    " ",
                    s512,
                    maybeHighlight(a215.marker, "^").repeat(r421)
                ].join("");
                c312 && n323.message && (t523 += " " + maybeHighlight(a215.message, n323.message));
            }
            return [
                maybeHighlight(a215.marker, ">"),
                maybeHighlight(a215.gutter, o224),
                e722.length > 0 ? ` ${e722}` : "",
                t523
            ].join("");
        }
        return ` ${maybeHighlight(a215.gutter, o224)}${e722.length > 0 ? ` ${e722}` : ""}`;
    }).join("\n");
    n323.message && !g38 && (h40 = `${" ".repeat(d50 + 1)}${n323.message}\n${h40}`);
    return s318 ? r226.reset(h40) : h40;
}
function _default(e913, t720, n422, s66 = {}) {
    if (!a15) {
        a15 = true;
        const e821 = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
        if (r25.emitWarning) r25.emitWarning(e821, "DeprecationWarning");
        else {
            const t621 = new Error(e821);
            t621.name = "DeprecationWarning";
            console.warn(new Error(e821));
        }
    }
    n422 = Math.max(n422, 0);
    const o321 = {
        start: {
            column: n422,
            line: t720
        }
    };
    return codeFrameColumns(e913, o321, s66);
}
const c17 = s15.__esModule;
const i14 = s15.codeFrameColumns;
const mod16 = {
    __esModule: c17,
    codeFrameColumns: i14,
    default: s15
};
var e16 = {};
Object.defineProperty(e16, "__esModule", {
    value: true
});
function _objectWithoutPropertiesLoose(e1, t1129) {
    if (null == e1) return {};
    var s126 = {};
    var i124 = Object.keys(e1);
    var r138, a124;
    for(a124 = 0; a124 < i124.length; a124++){
        r138 = i124[a124];
        t1129.indexOf(r138) >= 0 || (s126[r138] = e1[r138]);
    }
    return s126;
}
class Position {
    constructor(e2, t2122, s220){
        this.line = void 0;
        this.column = void 0;
        this.index = void 0;
        this.line = e2;
        this.column = t2122;
        this.index = s220;
    }
}
class SourceLocation {
    constructor(e3115, t389){
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = e3115;
        this.end = t389;
    }
}
function createPositionWithColumnOffset(e427, t426) {
    const { line: s319 , column: i219 , index: r227  } = e427;
    return new Position(s319, i219 + t426, r227 + t426);
}
const t22 = Object.freeze({
    SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
    SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
});
const reflect = (e526, t524 = e526.length - 1)=>({
        get () {
            return e526.reduce((e623, t622)=>e623[t622]
            , this);
        },
        set (s416) {
            e526.reduce((e723, i315, r326)=>r326 === t524 ? e723[i315] = s416 : e723[i315]
            , this);
        }
    })
;
const instantiate = (e822, t721, s513)=>Object.keys(s513).map((e914)=>[
            e914,
            s513[e914]
        ]
    ).filter(([, e1012])=>!!e1012
    ).map(([e1112, t817])=>[
            e1112,
            "function" === typeof t817 ? {
                value: t817,
                enumerable: false
            } : "string" === typeof t817.reflect ? Object.assign({}, t817, reflect(t817.reflect.split("."))) : t817
        ]
    ).reduce((e1212, [t915, s67])=>Object.defineProperty(e1212, t915, Object.assign({
            configurable: true
        }, s67))
    , Object.assign(new e822, t721))
;
var ModuleErrors = (e1311)=>({
        ImportMetaOutsideModule: e1311("import.meta may appear only with 'sourceType: \"module\"'", {
            code: t22.SourceTypeModuleError
        }),
        ImportOutsideModule: e1311("'import' and 'export' may appear only with 'sourceType: \"module\"'", {
            code: t22.SourceTypeModuleError
        })
    })
;
const s16 = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
        true: "prefix operation",
        false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
};
const toNodeDescription = ({ type: e1410 , prefix: t1014  })=>"UpdateExpression" === e1410 ? s16.UpdateExpression[String(t1014)] : s16[e1410]
;
var StandardErrors = (e1510)=>({
        AccessorIsGenerator: e1510(({ kind: e1610  })=>`A ${e1610}ter cannot be a generator.`
        ),
        ArgumentsInClass: e1510("'arguments' is only allowed in functions and class methods."),
        AsyncFunctionInSingleStatementContext: e1510("Async functions can only be declared at the top level or inside a block."),
        AwaitBindingIdentifier: e1510("Can not use 'await' as identifier inside an async function."),
        AwaitBindingIdentifierInStaticBlock: e1510("Can not use 'await' as identifier inside a static block."),
        AwaitExpressionFormalParameter: e1510("'await' is not allowed in async function parameters."),
        AwaitNotInAsyncContext: e1510("'await' is only allowed within async functions and at the top levels of modules."),
        AwaitNotInAsyncFunction: e1510("'await' is only allowed within async functions."),
        BadGetterArity: e1510("A 'get' accesor must not have any formal parameters."),
        BadSetterArity: e1510("A 'set' accesor must have exactly one formal parameter."),
        BadSetterRestParameter: e1510("A 'set' accesor function argument must not be a rest parameter."),
        ConstructorClassField: e1510("Classes may not have a field named 'constructor'."),
        ConstructorClassPrivateField: e1510("Classes may not have a private field named '#constructor'."),
        ConstructorIsAccessor: e1510("Class constructor may not be an accessor."),
        ConstructorIsAsync: e1510("Constructor can't be an async function."),
        ConstructorIsGenerator: e1510("Constructor can't be a generator."),
        DeclarationMissingInitializer: e1510(({ kind: e17  })=>`Missing initializer in ${e17} declaration.`
        ),
        DecoratorBeforeExport: e1510("Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax."),
        DecoratorConstructor: e1510("Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?"),
        DecoratorExportClass: e1510("Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead."),
        DecoratorSemicolon: e1510("Decorators must not be followed by a semicolon."),
        DecoratorStaticBlock: e1510("Decorators can't be used with a static block."),
        DeletePrivateField: e1510("Deleting a private field is not allowed."),
        DestructureNamedImport: e1510("ES2015 named imports do not destructure. Use another statement for destructuring after the import."),
        DuplicateConstructor: e1510("Duplicate constructor in the same class."),
        DuplicateDefaultExport: e1510("Only one default export allowed per module."),
        DuplicateExport: e1510(({ exportName: e18  })=>`\`${e18}\` has already been exported. Exported identifiers must be unique.`
        ),
        DuplicateProto: e1510("Redefinition of __proto__ property."),
        DuplicateRegExpFlags: e1510("Duplicate regular expression flag."),
        ElementAfterRest: e1510("Rest element must be last element."),
        EscapedCharNotAnIdentifier: e1510("Invalid Unicode escape."),
        ExportBindingIsString: e1510(({ localName: e19 , exportName: t1130  })=>`A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${e19}' as '${t1130}' } from 'some-module'\`?`
        ),
        ExportDefaultFromAsIdentifier: e1510("'from' is not allowed as an identifier after 'export default'."),
        ForInOfLoopInitializer: e1510(({ type: e20  })=>`'${"ForInStatement" === e20 ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`
        ),
        ForOfAsync: e1510("The left-hand side of a for-of loop may not be 'async'."),
        ForOfLet: e1510("The left-hand side of a for-of loop may not start with 'let'."),
        GeneratorInSingleStatementContext: e1510("Generators can only be declared at the top level or inside a block."),
        IllegalBreakContinue: e1510(({ type: e21  })=>`Unsyntactic ${"BreakStatement" === e21 ? "break" : "continue"}.`
        ),
        IllegalLanguageModeDirective: e1510("Illegal 'use strict' directive in function with non-simple parameter list."),
        IllegalReturn: e1510("'return' outside of function."),
        ImportBindingIsString: e1510(({ importName: e22  })=>`A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${e22}" as foo }\`?`
        ),
        ImportCallArgumentTrailingComma: e1510("Trailing comma is disallowed inside import(...) arguments."),
        ImportCallArity: e1510(({ maxArgumentCount: e23  })=>`\`import()\` requires exactly ${1 === e23 ? "one argument" : "one or two arguments"}.`
        ),
        ImportCallNotNewExpression: e1510("Cannot use new with import(...)."),
        ImportCallSpreadArgument: e1510("`...` is not allowed in `import()`."),
        IncompatibleRegExpUVFlags: e1510("The 'u' and 'v' regular expression flags cannot be enabled at the same time."),
        InvalidBigIntLiteral: e1510("Invalid BigIntLiteral."),
        InvalidCodePoint: e1510("Code point out of bounds."),
        InvalidCoverInitializedName: e1510("Invalid shorthand property initializer."),
        InvalidDecimal: e1510("Invalid decimal."),
        InvalidDigit: e1510(({ radix: e24  })=>`Expected number in radix ${e24}.`
        ),
        InvalidEscapeSequence: e1510("Bad character escape sequence."),
        InvalidEscapeSequenceTemplate: e1510("Invalid escape sequence in template."),
        InvalidEscapedReservedWord: e1510(({ reservedWord: e25  })=>`Escape sequence in keyword ${e25}.`
        ),
        InvalidIdentifier: e1510(({ identifierName: e26  })=>`Invalid identifier ${e26}.`
        ),
        InvalidLhs: e1510(({ ancestor: e27  })=>`Invalid left-hand side in ${toNodeDescription(e27)}.`
        ),
        InvalidLhsBinding: e1510(({ ancestor: e28  })=>`Binding invalid left-hand side in ${toNodeDescription(e28)}.`
        ),
        InvalidNumber: e1510("Invalid number."),
        InvalidOrMissingExponent: e1510("Floating-point numbers require a valid exponent after the 'e'."),
        InvalidOrUnexpectedToken: e1510(({ unexpected: e29  })=>`Unexpected character '${e29}'.`
        ),
        InvalidParenthesizedAssignment: e1510("Invalid parenthesized assignment pattern."),
        InvalidPrivateFieldResolution: e1510(({ identifierName: e30  })=>`Private name #${e30} is not defined.`
        ),
        InvalidPropertyBindingPattern: e1510("Binding member expression."),
        InvalidRecordProperty: e1510("Only properties and spread elements are allowed in record definitions."),
        InvalidRestAssignmentPattern: e1510("Invalid rest operator's argument."),
        LabelRedeclaration: e1510(({ labelName: e31  })=>`Label '${e31}' is already declared.`
        ),
        LetInLexicalBinding: e1510("'let' is not allowed to be used as a name in 'let' or 'const' declarations."),
        LineTerminatorBeforeArrow: e1510("No line break is allowed before '=>'."),
        MalformedRegExpFlags: e1510("Invalid regular expression flag."),
        MissingClassName: e1510("A class name is required."),
        MissingEqInAssignment: e1510("Only '=' operator can be used for specifying default value."),
        MissingSemicolon: e1510("Missing semicolon."),
        MissingPlugin: e1510(({ missingPlugin: e32  })=>`This experimental syntax requires enabling the parser plugin: ${e32.map((e33)=>JSON.stringify(e33)
            ).join(", ")}.`
        ),
        MissingOneOfPlugins: e1510(({ missingPlugin: e34  })=>`This experimental syntax requires enabling one of the following parser plugin(s): ${e34.map((e35)=>JSON.stringify(e35)
            ).join(", ")}.`
        ),
        MissingUnicodeEscape: e1510("Expecting Unicode escape sequence \\uXXXX."),
        MixingCoalesceWithLogical: e1510("Nullish coalescing operator(??) requires parens when mixing with logical operators."),
        ModuleAttributeDifferentFromType: e1510("The only accepted module attribute is `type`."),
        ModuleAttributeInvalidValue: e1510("Only string literals are allowed as module attribute values."),
        ModuleAttributesWithDuplicateKeys: e1510(({ key: e36  })=>`Duplicate key "${e36}" is not allowed in module attributes.`
        ),
        ModuleExportNameHasLoneSurrogate: e1510(({ surrogateCharCode: e37  })=>`An export name cannot include a lone surrogate, found '\\u${e37.toString(16)}'.`
        ),
        ModuleExportUndefined: e1510(({ localName: e38  })=>`Export '${e38}' is not defined.`
        ),
        MultipleDefaultsInSwitch: e1510("Multiple default clauses."),
        NewlineAfterThrow: e1510("Illegal newline after throw."),
        NoCatchOrFinally: e1510("Missing catch or finally clause."),
        NumberIdentifier: e1510("Identifier directly after number."),
        NumericSeparatorInEscapeSequence: e1510("Numeric separators are not allowed inside unicode escape sequences or hex escape sequences."),
        ObsoleteAwaitStar: e1510("'await*' has been removed from the async functions proposal. Use Promise.all() instead."),
        OptionalChainingNoNew: e1510("Constructors in/after an Optional Chain are not allowed."),
        OptionalChainingNoTemplate: e1510("Tagged Template Literals are not allowed in optionalChain."),
        OverrideOnConstructor: e1510("'override' modifier cannot appear on a constructor declaration."),
        ParamDupe: e1510("Argument name clash."),
        PatternHasAccessor: e1510("Object pattern can't contain getter or setter."),
        PatternHasMethod: e1510("Object pattern can't contain methods."),
        PrivateInExpectedIn: e1510(({ identifierName: e39  })=>`Private names are only allowed in property accesses (\`obj.#${e39}\`) or in \`in\` expressions (\`#${e39} in obj\`).`
        ),
        PrivateNameRedeclaration: e1510(({ identifierName: e40  })=>`Duplicate private name #${e40}.`
        ),
        RecordExpressionBarIncorrectEndSyntaxType: e1510("Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
        RecordExpressionBarIncorrectStartSyntaxType: e1510("Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
        RecordExpressionHashIncorrectStartSyntaxType: e1510("Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."),
        RecordNoProto: e1510("'__proto__' is not allowed in Record expressions."),
        RestTrailingComma: e1510("Unexpected trailing comma after rest element."),
        SloppyFunction: e1510("In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement."),
        StaticPrototype: e1510("Classes may not have static property named prototype."),
        SuperNotAllowed: e1510("`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?"),
        SuperPrivateField: e1510("Private fields can't be accessed on super."),
        TrailingDecorator: e1510("Decorators must be attached to a class element."),
        TupleExpressionBarIncorrectEndSyntaxType: e1510("Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
        TupleExpressionBarIncorrectStartSyntaxType: e1510("Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
        TupleExpressionHashIncorrectStartSyntaxType: e1510("Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."),
        UnexpectedArgumentPlaceholder: e1510("Unexpected argument placeholder."),
        UnexpectedAwaitAfterPipelineBody: e1510('Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.'),
        UnexpectedDigitAfterHash: e1510("Unexpected digit after hash token."),
        UnexpectedImportExport: e1510("'import' and 'export' may only appear at the top level."),
        UnexpectedKeyword: e1510(({ keyword: e41  })=>`Unexpected keyword '${e41}'.`
        ),
        UnexpectedLeadingDecorator: e1510("Leading decorators must be attached to a class declaration."),
        UnexpectedLexicalDeclaration: e1510("Lexical declaration cannot appear in a single-statement context."),
        UnexpectedNewTarget: e1510("`new.target` can only be used in functions or class properties."),
        UnexpectedNumericSeparator: e1510("A numeric separator is only allowed between two digits."),
        UnexpectedPrivateField: e1510("Unexpected private name."),
        UnexpectedReservedWord: e1510(({ reservedWord: e42  })=>`Unexpected reserved word '${e42}'.`
        ),
        UnexpectedSuper: e1510("'super' is only allowed in object methods and classes."),
        UnexpectedToken: e1510(({ expected: e43 , unexpected: t1213  })=>`Unexpected token${t1213 ? ` '${t1213}'.` : ""}${e43 ? `, expected "${e43}"` : ""}`
        ),
        UnexpectedTokenUnaryExponentiation: e1510("Illegal expression. Wrap left hand side or entire exponentiation in parentheses."),
        UnsupportedBind: e1510("Binding should be performed on object property."),
        UnsupportedDecoratorExport: e1510("A decorated export must export a class declaration."),
        UnsupportedDefaultExport: e1510("Only expressions, functions or classes are allowed as the `default` export."),
        UnsupportedImport: e1510("`import` can only be used in `import()` or `import.meta`."),
        UnsupportedMetaProperty: e1510(({ target: e44 , onlyValidPropertyName: t1313  })=>`The only valid meta property for ${e44} is ${e44}.${t1313}.`
        ),
        UnsupportedParameterDecorator: e1510("Decorators cannot be used to decorate parameters."),
        UnsupportedPropertyDecorator: e1510("Decorators cannot be used to decorate object literal properties."),
        UnsupportedSuper: e1510("'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])."),
        UnterminatedComment: e1510("Unterminated comment."),
        UnterminatedRegExp: e1510("Unterminated regular expression."),
        UnterminatedString: e1510("Unterminated string constant."),
        UnterminatedTemplate: e1510("Unterminated template."),
        VarRedeclaration: e1510(({ identifierName: e45  })=>`Identifier '${e45}' has already been declared.`
        ),
        YieldBindingIdentifier: e1510("Can not use 'yield' as identifier inside a generator."),
        YieldInParameter: e1510("Yield expression is not allowed in formal parameters."),
        ZeroDigitNumericSeparator: e1510("Numeric separator can not be used after leading 0.")
    })
;
var StrictModeErrors = (e46)=>({
        StrictDelete: e46("Deleting local variable in strict mode."),
        StrictEvalArguments: e46(({ referenceName: e47  })=>`Assigning to '${e47}' in strict mode.`
        ),
        StrictEvalArgumentsBinding: e46(({ bindingName: e48  })=>`Binding '${e48}' in strict mode.`
        ),
        StrictFunction: e46("In strict mode code, functions can only be declared at top level or inside a block."),
        StrictNumericEscape: e46("The only valid numeric escape in strict mode is '\\0'."),
        StrictOctalLiteral: e46("Legacy octal literals are not allowed in strict mode."),
        StrictWith: e46("'with' in strict mode.")
    })
;
const i15 = new Set([
    "ArrowFunctionExpression",
    "AssignmentExpression",
    "ConditionalExpression",
    "YieldExpression"
]);
var PipelineOperatorErrors = (e49)=>({
        PipeBodyIsTighter: e49("Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence."),
        PipeTopicRequiresHackPipes: e49('Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'),
        PipeTopicUnbound: e49("Topic reference is unbound; it must be inside a pipe body."),
        PipeTopicUnconfiguredToken: e49(({ token: e50  })=>`Invalid topic token ${e50}. In order to use ${e50} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${e50}" }.`
        ),
        PipeTopicUnused: e49("Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once."),
        PipeUnparenthesizedBody: e49(({ type: e51  })=>`Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
                type: e51
            })}; please wrap it in parentheses.`
        ),
        PipelineBodyNoArrow: e49('Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.'),
        PipelineBodySequenceExpression: e49("Pipeline body may not be a comma-separated sequence expression."),
        PipelineHeadSequenceExpression: e49("Pipeline head should not be a comma-separated sequence expression."),
        PipelineTopicUnused: e49("Pipeline is in topic style but does not use topic reference."),
        PrimaryTopicNotAllowed: e49("Topic reference was used in a lexical context without topic binding."),
        PrimaryTopicRequiresSmartPipeline: e49('Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.')
    })
;
const r26 = [
    "toMessage"
];
function toParseErrorConstructor(e52) {
    let { toMessage: t1412  } = e52, s74 = _objectWithoutPropertiesLoose(e52, r26);
    return function constructor({ loc: e53 , details: i413  }) {
        return instantiate(SyntaxError, Object.assign({}, s74, {
            loc: e53
        }), {
            clone (e54 = {}) {
                const t1511 = e54.loc || {};
                return constructor({
                    loc: new Position("line" in t1511 ? t1511.line : this.loc.line, "column" in t1511 ? t1511.column : this.loc.column, "index" in t1511 ? t1511.index : this.loc.index),
                    details: Object.assign({}, this.details, e54.details)
                });
            },
            details: {
                value: i413,
                enumerable: false
            },
            message: {
                get () {
                    return `${t1412(this.details)} (${this.loc.line}:${this.loc.column})`;
                },
                set (e55) {
                    Object.defineProperty(this, "message", {
                        value: e55
                    });
                }
            },
            pos: {
                reflect: "loc.index",
                enumerable: true
            },
            missingPlugin: "missingPlugin" in i413 && {
                reflect: "details.missingPlugin",
                enumerable: true
            }
        });
    };
}
function toParseErrorCredentials(e56, t1611) {
    return Object.assign({
        toMessage: "string" === typeof e56 ? ()=>e56
         : e56
    }, t1611);
}
function ParseErrorEnum(e58, s83) {
    if (Array.isArray(e58)) return (t1711)=>ParseErrorEnum(t1711, e58[0])
    ;
    const i511 = e58(toParseErrorCredentials);
    const r422 = {};
    for (const e57 of Object.keys(i511))r422[e57] = toParseErrorConstructor(Object.assign({
        code: t22.SyntaxError,
        reasonCode: e57
    }, s83 ? {
        syntaxPlugin: s83
    } : {}, i511[e57]));
    return r422;
}
const a16 = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
const { defineProperty: n24  } = Object;
const toUnenumerable = (e59, t1810)=>n24(e59, t1810, {
        enumerable: false,
        value: e59[t1810]
    })
;
function toESTreeLocation(e60) {
    toUnenumerable(e60.loc.start, "index");
    toUnenumerable(e60.loc.end, "index");
    return e60;
}
var estree = (e61)=>class extends e61 {
        parse() {
            const e62 = toESTreeLocation(super.parse());
            this.options.tokens && (e62.tokens = e62.tokens.map(toESTreeLocation));
            return e62;
        }
        parseRegExpLiteral({ pattern: e63 , flags: t1910  }) {
            let s93 = null;
            try {
                s93 = new RegExp(e63, t1910);
            } catch (e) {}
            const i65 = this.estreeParseLiteral(s93);
            i65.regex = {
                pattern: e63,
                flags: t1910
            };
            return i65;
        }
        parseBigIntLiteral(e64) {
            let t2010;
            try {
                t2010 = BigInt(e64);
            } catch (e) {
                t2010 = null;
            }
            const s102 = this.estreeParseLiteral(t2010);
            s102.bigint = String(s102.value || e64);
            return s102;
        }
        parseDecimalLiteral(e65) {
            const s1110 = this.estreeParseLiteral(null);
            s1110.decimal = String(s1110.value || e65);
            return s1110;
        }
        estreeParseLiteral(e66) {
            return this.parseLiteral(e66, "Literal");
        }
        parseStringLiteral(e67) {
            return this.estreeParseLiteral(e67);
        }
        parseNumericLiteral(e68) {
            return this.estreeParseLiteral(e68);
        }
        parseNullLiteral() {
            return this.estreeParseLiteral(null);
        }
        parseBooleanLiteral(e69) {
            return this.estreeParseLiteral(e69);
        }
        directiveToStmt(e70) {
            const t2210 = e70.value;
            const s127 = this.startNodeAt(e70.start, e70.loc.start);
            const i73 = this.startNodeAt(t2210.start, t2210.loc.start);
            i73.value = t2210.extra.expressionValue;
            i73.raw = t2210.extra.raw;
            s127.expression = this.finishNodeAt(i73, "Literal", t2210.loc.end);
            s127.directive = t2210.extra.raw.slice(1, -1);
            return this.finishNodeAt(s127, "ExpressionStatement", e70.loc.end);
        }
        initFunction(e71, t23) {
            super.initFunction(e71, t23);
            e71.expression = false;
        }
        checkDeclaration(e72) {
            null != e72 && this.isObjectProperty(e72) ? this.checkDeclaration(e72.value) : super.checkDeclaration(e72);
        }
        getObjectOrClassMethodParams(e73) {
            return e73.value.params;
        }
        isValidDirective(e74) {
            var t24;
            return "ExpressionStatement" === e74.type && "Literal" === e74.expression.type && "string" === typeof e74.expression.value && !(null != (t24 = e74.expression.extra) && t24.parenthesized);
        }
        parseBlockBody(e75, ...t25) {
            super.parseBlockBody(e75, ...t25);
            const s131 = e75.directives.map((e76)=>this.directiveToStmt(e76)
            );
            e75.body = s131.concat(e75.body);
            delete e75.directives;
        }
        pushClassMethod(e77, t26, s141, i83, r519, a216) {
            this.parseMethod(t26, s141, i83, r519, a216, "ClassMethod", true);
            if (t26.typeParameters) {
                t26.value.typeParameters = t26.typeParameters;
                delete t26.typeParameters;
            }
            e77.body.push(t26);
        }
        parsePrivateName() {
            const e78 = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(e78) : e78;
        }
        convertPrivateNameToPrivateIdentifier(e79) {
            const t27 = super.getPrivateNameSV(e79);
            e79 = e79;
            delete e79.id;
            e79.name = t27;
            e79.type = "PrivateIdentifier";
            return e79;
        }
        isPrivateName(e80) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === e80.type : super.isPrivateName(e80);
        }
        getPrivateNameSV(e81) {
            return this.getPluginOption("estree", "classFeatures") ? e81.name : super.getPrivateNameSV(e81);
        }
        parseLiteral(e82, t28) {
            const s151 = super.parseLiteral(e82, t28);
            s151.raw = s151.extra.raw;
            delete s151.extra;
            return s151;
        }
        parseFunctionBody(e83, t29, s161 = false) {
            super.parseFunctionBody(e83, t29, s161);
            e83.expression = "BlockStatement" !== e83.body.type;
        }
        parseMethod(e84, t30, s17, i93, r618, a316, n1126 = false) {
            let o128 = this.startNode();
            o128.kind = e84.kind;
            o128 = super.parseMethod(o128, t30, s17, i93, r618, a316, n1126);
            o128.type = "FunctionExpression";
            delete o128.kind;
            e84.value = o128;
            "ClassPrivateMethod" === a316 && (e84.computed = false);
            a316 = "MethodDefinition";
            return this.finishNode(e84, a316);
        }
        parseClassProperty(...e85) {
            const t31 = super.parseClassProperty(...e85);
            if (!this.getPluginOption("estree", "classFeatures")) return t31;
            t31.type = "PropertyDefinition";
            return t31;
        }
        parseClassPrivateProperty(...e86) {
            const t32 = super.parseClassPrivateProperty(...e86);
            if (!this.getPluginOption("estree", "classFeatures")) return t32;
            t32.type = "PropertyDefinition";
            t32.computed = false;
            return t32;
        }
        parseObjectMethod(e87, t33, s18, i101, r714) {
            const a414 = super.parseObjectMethod(e87, t33, s18, i101, r714);
            if (a414) {
                a414.type = "Property";
                "method" === a414.kind && (a414.kind = "init");
                a414.shorthand = false;
            }
            return a414;
        }
        parseObjectProperty(e88, t34, s19, i1110, r813) {
            const a58 = super.parseObjectProperty(e88, t34, s19, i1110, r813);
            if (a58) {
                a58.kind = "init";
                a58.type = "Property";
            }
            return a58;
        }
        isValidLVal(e89, ...t35) {
            return "Property" === e89 ? "value" : super.isValidLVal(e89, ...t35);
        }
        isAssignable(e90, t36) {
            return null != e90 && this.isObjectProperty(e90) ? this.isAssignable(e90.value, t36) : super.isAssignable(e90, t36);
        }
        toAssignable(e91, t37 = false) {
            if (null != e91 && this.isObjectProperty(e91)) {
                const { key: s20 , value: i125  } = e91;
                this.isPrivateName(s20) && this.classScope.usePrivateName(this.getPrivateNameSV(s20), s20.loc.start);
                this.toAssignable(i125, t37);
                return e91;
            }
            return super.toAssignable(e91, t37);
        }
        toAssignableObjectExpressionProp(e92, ...t38) {
            "get" === e92.kind || "set" === e92.kind ? this.raise(a16.PatternHasAccessor, {
                at: e92.key
            }) : e92.method ? this.raise(a16.PatternHasMethod, {
                at: e92.key
            }) : super.toAssignableObjectExpressionProp(e92, ...t38);
        }
        finishCallExpression(e93, t39) {
            super.finishCallExpression(e93, t39);
            if ("Import" === e93.callee.type) {
                e93.type = "ImportExpression";
                e93.source = e93.arguments[0];
                if (this.hasPlugin("importAssertions")) {
                    var s21;
                    e93.attributes = null != (s21 = e93.arguments[1]) ? s21 : null;
                }
                delete e93.arguments;
                delete e93.callee;
            }
            return e93;
        }
        toReferencedArguments(e94) {
            "ImportExpression" !== e94.type && super.toReferencedArguments(e94);
        }
        parseExport(e95) {
            super.parseExport(e95);
            switch(e95.type){
                case "ExportAllDeclaration":
                    e95.exported = null;
                    break;
                case "ExportNamedDeclaration":
                    if (1 === e95.specifiers.length && "ExportNamespaceSpecifier" === e95.specifiers[0].type) {
                        e95.type = "ExportAllDeclaration";
                        e95.exported = e95.specifiers[0].exported;
                        delete e95.specifiers;
                    }
                    break;
            }
            return e95;
        }
        parseSubscript(e96, t40, s22, i131, r910) {
            const a63 = super.parseSubscript(e96, t40, s22, i131, r910);
            if (r910.optionalChainMember) {
                "OptionalMemberExpression" !== a63.type && "OptionalCallExpression" !== a63.type || (a63.type = a63.type.substring(8));
                if (r910.stop) {
                    const e97 = this.startNodeAtNode(a63);
                    e97.expression = a63;
                    return this.finishNode(e97, "ChainExpression");
                }
            } else "MemberExpression" !== a63.type && "CallExpression" !== a63.type || (a63.optional = false);
            return a63;
        }
        hasPropertyAsPrivateName(e98) {
            "ChainExpression" === e98.type && (e98 = e98.expression);
            return super.hasPropertyAsPrivateName(e98);
        }
        isOptionalChain(e99) {
            return "ChainExpression" === e99.type;
        }
        isObjectProperty(e100) {
            return "Property" === e100.type && "init" === e100.kind && !e100.method;
        }
        isObjectMethod(e101) {
            return e101.method || "get" === e101.kind || "set" === e101.kind;
        }
        finishNodeAt(e102, t41, s23) {
            return toESTreeLocation(super.finishNodeAt(e102, t41, s23));
        }
        resetEndLocation(e103, t42 = this.state.lastTokEndLoc) {
            super.resetEndLocation(e103, t42);
            toESTreeLocation(e103);
        }
    }
;
class TokContext {
    constructor(e104, t43){
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = e104;
        this.preserveSpace = !!t43;
    }
}
const o20 = {
    brace: new TokContext("{"),
    j_oTag: new TokContext("<tag"),
    j_cTag: new TokContext("</tag"),
    j_expr: new TokContext("<tag>...</tag>", true)
};
o20.template = new TokContext("`", true);
class ExportedTokenType {
    constructor(e105, t44 = {}){
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = e105;
        this.keyword = t44.keyword;
        this.beforeExpr = !!t44.beforeExpr;
        this.startsExpr = !!t44.startsExpr;
        this.rightAssociative = !!t44.rightAssociative;
        this.isLoop = !!t44.isLoop;
        this.isAssign = !!t44.isAssign;
        this.prefix = !!t44.prefix;
        this.postfix = !!t44.postfix;
        this.binop = null != t44.binop ? t44.binop : null;
        this.updateContext = null;
    }
}
const m9 = new Map;
function createKeyword(e106, t45 = {}) {
    t45.keyword = e106;
    const s24 = createToken(e106, t45);
    m9.set(e106, s24);
    return s24;
}
function createBinop(e107, t46) {
    return createToken(e107, {
        beforeExpr: true,
        binop: t46
    });
}
let f12 = -1;
const y6 = [];
const x5 = [];
const P6 = [];
const g9 = [];
const T4 = [];
const b8 = [];
function createToken(e108, t47 = {}) {
    var s25, i141, r104, a72;
    ++f12;
    x5.push(e108);
    P6.push(null != (s25 = t47.binop) ? s25 : -1);
    g9.push(null != (i141 = t47.beforeExpr) && i141);
    T4.push(null != (r104 = t47.startsExpr) && r104);
    b8.push(null != (a72 = t47.prefix) && a72);
    y6.push(new ExportedTokenType(e108, t47));
    return f12;
}
function createKeywordLike(e109, t48 = {}) {
    var s26, i151, r1112, a82;
    ++f12;
    m9.set(e109, f12);
    x5.push(e109);
    P6.push(null != (s26 = t48.binop) ? s26 : -1);
    g9.push(null != (i151 = t48.beforeExpr) && i151);
    T4.push(null != (r1112 = t48.startsExpr) && r1112);
    b8.push(null != (a82 = t48.prefix) && a82);
    y6.push(new ExportedTokenType("name", t48));
    return f12;
}
const A6 = {
    bracketL: createToken("[", {
        beforeExpr: true,
        startsExpr: true
    }),
    bracketHashL: createToken("#[", {
        beforeExpr: true,
        startsExpr: true
    }),
    bracketBarL: createToken("[|", {
        beforeExpr: true,
        startsExpr: true
    }),
    bracketR: createToken("]"),
    bracketBarR: createToken("|]"),
    braceL: createToken("{", {
        beforeExpr: true,
        startsExpr: true
    }),
    braceBarL: createToken("{|", {
        beforeExpr: true,
        startsExpr: true
    }),
    braceHashL: createToken("#{", {
        beforeExpr: true,
        startsExpr: true
    }),
    braceR: createToken("}", {
        beforeExpr: true
    }),
    braceBarR: createToken("|}"),
    parenL: createToken("(", {
        beforeExpr: true,
        startsExpr: true
    }),
    parenR: createToken(")"),
    comma: createToken(",", {
        beforeExpr: true
    }),
    semi: createToken(";", {
        beforeExpr: true
    }),
    colon: createToken(":", {
        beforeExpr: true
    }),
    doubleColon: createToken("::", {
        beforeExpr: true
    }),
    dot: createToken("."),
    question: createToken("?", {
        beforeExpr: true
    }),
    questionDot: createToken("?."),
    arrow: createToken("=>", {
        beforeExpr: true
    }),
    template: createToken("template"),
    ellipsis: createToken("...", {
        beforeExpr: true
    }),
    backQuote: createToken("`", {
        startsExpr: true
    }),
    dollarBraceL: createToken("${", {
        beforeExpr: true,
        startsExpr: true
    }),
    templateTail: createToken("...`", {
        startsExpr: true
    }),
    templateNonTail: createToken("...${", {
        beforeExpr: true,
        startsExpr: true
    }),
    at: createToken("@"),
    hash: createToken("#", {
        startsExpr: true
    }),
    interpreterDirective: createToken("#!..."),
    eq: createToken("=", {
        beforeExpr: true,
        isAssign: true
    }),
    assign: createToken("_=", {
        beforeExpr: true,
        isAssign: true
    }),
    slashAssign: createToken("_=", {
        beforeExpr: true,
        isAssign: true
    }),
    xorAssign: createToken("_=", {
        beforeExpr: true,
        isAssign: true
    }),
    moduloAssign: createToken("_=", {
        beforeExpr: true,
        isAssign: true
    }),
    incDec: createToken("++/--", {
        prefix: true,
        postfix: true,
        startsExpr: true
    }),
    bang: createToken("!", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    tilde: createToken("~", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    doubleCaret: createToken("^^", {
        startsExpr: true
    }),
    doubleAt: createToken("@@", {
        startsExpr: true
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    lt: createBinop("</>/<=/>=", 7),
    gt: createBinop("</>/<=/>=", 7),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    bitShiftL: createBinop("<</>>/>>>", 8),
    bitShiftR: createBinop("<</>>/>>>", 8),
    plusMin: createToken("+/-", {
        beforeExpr: true,
        binop: 9,
        prefix: true,
        startsExpr: true
    }),
    modulo: createToken("%", {
        binop: 10,
        startsExpr: true
    }),
    star: createToken("*", {
        binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: createToken("**", {
        beforeExpr: true,
        binop: 11,
        rightAssociative: true
    }),
    _in: createKeyword("in", {
        beforeExpr: true,
        binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
        beforeExpr: true,
        binop: 7
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
        beforeExpr: true
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
        beforeExpr: true
    }),
    _else: createKeyword("else", {
        beforeExpr: true
    }),
    _finally: createKeyword("finally"),
    _function: createKeyword("function", {
        startsExpr: true
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
        beforeExpr: true
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
        beforeExpr: true,
        startsExpr: true
    }),
    _this: createKeyword("this", {
        startsExpr: true
    }),
    _super: createKeyword("super", {
        startsExpr: true
    }),
    _class: createKeyword("class", {
        startsExpr: true
    }),
    _extends: createKeyword("extends", {
        beforeExpr: true
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
        startsExpr: true
    }),
    _null: createKeyword("null", {
        startsExpr: true
    }),
    _true: createKeyword("true", {
        startsExpr: true
    }),
    _false: createKeyword("false", {
        startsExpr: true
    }),
    _typeof: createKeyword("typeof", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _void: createKeyword("void", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _delete: createKeyword("delete", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _do: createKeyword("do", {
        isLoop: true,
        beforeExpr: true
    }),
    _for: createKeyword("for", {
        isLoop: true
    }),
    _while: createKeyword("while", {
        isLoop: true
    }),
    _as: createKeywordLike("as", {
        startsExpr: true
    }),
    _assert: createKeywordLike("assert", {
        startsExpr: true
    }),
    _async: createKeywordLike("async", {
        startsExpr: true
    }),
    _await: createKeywordLike("await", {
        startsExpr: true
    }),
    _from: createKeywordLike("from", {
        startsExpr: true
    }),
    _get: createKeywordLike("get", {
        startsExpr: true
    }),
    _let: createKeywordLike("let", {
        startsExpr: true
    }),
    _meta: createKeywordLike("meta", {
        startsExpr: true
    }),
    _of: createKeywordLike("of", {
        startsExpr: true
    }),
    _sent: createKeywordLike("sent", {
        startsExpr: true
    }),
    _set: createKeywordLike("set", {
        startsExpr: true
    }),
    _static: createKeywordLike("static", {
        startsExpr: true
    }),
    _yield: createKeywordLike("yield", {
        startsExpr: true
    }),
    _asserts: createKeywordLike("asserts", {
        startsExpr: true
    }),
    _checks: createKeywordLike("checks", {
        startsExpr: true
    }),
    _exports: createKeywordLike("exports", {
        startsExpr: true
    }),
    _global: createKeywordLike("global", {
        startsExpr: true
    }),
    _implements: createKeywordLike("implements", {
        startsExpr: true
    }),
    _intrinsic: createKeywordLike("intrinsic", {
        startsExpr: true
    }),
    _infer: createKeywordLike("infer", {
        startsExpr: true
    }),
    _is: createKeywordLike("is", {
        startsExpr: true
    }),
    _mixins: createKeywordLike("mixins", {
        startsExpr: true
    }),
    _proto: createKeywordLike("proto", {
        startsExpr: true
    }),
    _require: createKeywordLike("require", {
        startsExpr: true
    }),
    _keyof: createKeywordLike("keyof", {
        startsExpr: true
    }),
    _readonly: createKeywordLike("readonly", {
        startsExpr: true
    }),
    _unique: createKeywordLike("unique", {
        startsExpr: true
    }),
    _abstract: createKeywordLike("abstract", {
        startsExpr: true
    }),
    _declare: createKeywordLike("declare", {
        startsExpr: true
    }),
    _enum: createKeywordLike("enum", {
        startsExpr: true
    }),
    _module: createKeywordLike("module", {
        startsExpr: true
    }),
    _namespace: createKeywordLike("namespace", {
        startsExpr: true
    }),
    _interface: createKeywordLike("interface", {
        startsExpr: true
    }),
    _type: createKeywordLike("type", {
        startsExpr: true
    }),
    _opaque: createKeywordLike("opaque", {
        startsExpr: true
    }),
    name: createToken("name", {
        startsExpr: true
    }),
    string: createToken("string", {
        startsExpr: true
    }),
    num: createToken("num", {
        startsExpr: true
    }),
    bigint: createToken("bigint", {
        startsExpr: true
    }),
    decimal: createToken("decimal", {
        startsExpr: true
    }),
    regexp: createToken("regexp", {
        startsExpr: true
    }),
    privateName: createToken("#name", {
        startsExpr: true
    }),
    eof: createToken("eof"),
    jsxName: createToken("jsxName"),
    jsxText: createToken("jsxText", {
        beforeExpr: true
    }),
    jsxTagStart: createToken("jsxTagStart", {
        startsExpr: true
    }),
    jsxTagEnd: createToken("jsxTagEnd"),
    placeholder: createToken("%%", {
        startsExpr: true
    })
};
function tokenIsIdentifier(e110) {
    return e110 >= 93 && e110 <= 128;
}
function tokenKeywordOrIdentifierIsKeyword(e111) {
    return e111 <= 92;
}
function tokenIsKeywordOrIdentifier(e112) {
    return e112 >= 58 && e112 <= 128;
}
function tokenIsLiteralPropertyName(e1131) {
    return e1131 >= 58 && e1131 <= 132;
}
function tokenComesBeforeExpression(e114) {
    return g9[e114];
}
function tokenCanStartExpression(e115) {
    return T4[e115];
}
function tokenIsAssignment(e116) {
    return e116 >= 29 && e116 <= 33;
}
function tokenIsFlowInterfaceOrTypeOrOpaque(e117) {
    return e117 >= 125 && e117 <= 127;
}
function tokenIsLoop(e118) {
    return e118 >= 90 && e118 <= 92;
}
function tokenIsKeyword(e119) {
    return e119 >= 58 && e119 <= 92;
}
function tokenIsOperator(e120) {
    return e120 >= 39 && e120 <= 59;
}
function tokenIsPostfix(e121) {
    return 34 === e121;
}
function tokenIsPrefix(e122) {
    return b8[e122];
}
function tokenIsTSTypeOperator(e123) {
    return e123 >= 117 && e123 <= 119;
}
function tokenIsTSDeclarationStart(e124) {
    return e124 >= 120 && e124 <= 126;
}
function tokenLabelName(e125) {
    return x5[e125];
}
function tokenOperatorPrecedence(e126) {
    return P6[e126];
}
function tokenIsRightAssociative(e127) {
    return 57 === e127;
}
function tokenIsTemplate(e128) {
    return e128 >= 24 && e128 <= 25;
}
function getExportedToken(e129) {
    return y6[e129];
}
y6[8].updateContext = (e130)=>{
    e130.pop();
};
y6[5].updateContext = y6[7].updateContext = y6[23].updateContext = (e131)=>{
    e131.push(o20.brace);
};
y6[22].updateContext = (e132)=>{
    e132[e132.length - 1] === o20.template ? e132.pop() : e132.push(o20.template);
};
y6[138].updateContext = (e133)=>{
    e133.push(o20.j_expr, o20.j_oTag);
};
let w6 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
let E5 = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
const S6 = new RegExp("[" + w6 + "]");
const I6 = new RegExp("[" + w6 + E5 + "]");
w6 = E5 = null;
const k4 = [
    0,
    11,
    2,
    25,
    2,
    18,
    2,
    1,
    2,
    14,
    3,
    13,
    35,
    122,
    70,
    52,
    268,
    28,
    4,
    48,
    48,
    31,
    14,
    29,
    6,
    37,
    11,
    29,
    3,
    35,
    5,
    7,
    2,
    4,
    43,
    157,
    19,
    35,
    5,
    35,
    5,
    39,
    9,
    51,
    13,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    2,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    68,
    310,
    10,
    21,
    11,
    7,
    25,
    5,
    2,
    41,
    2,
    8,
    70,
    5,
    3,
    0,
    2,
    43,
    2,
    1,
    4,
    0,
    3,
    22,
    11,
    22,
    10,
    30,
    66,
    18,
    2,
    1,
    11,
    21,
    11,
    25,
    71,
    55,
    7,
    1,
    65,
    0,
    16,
    3,
    2,
    2,
    2,
    28,
    43,
    28,
    4,
    28,
    36,
    7,
    2,
    27,
    28,
    53,
    11,
    21,
    11,
    18,
    14,
    17,
    111,
    72,
    56,
    50,
    14,
    50,
    14,
    35,
    349,
    41,
    7,
    1,
    79,
    28,
    11,
    0,
    9,
    21,
    43,
    17,
    47,
    20,
    28,
    22,
    13,
    52,
    58,
    1,
    3,
    0,
    14,
    44,
    33,
    24,
    27,
    35,
    30,
    0,
    3,
    0,
    9,
    34,
    4,
    0,
    13,
    47,
    15,
    3,
    22,
    0,
    2,
    0,
    36,
    17,
    2,
    24,
    85,
    6,
    2,
    0,
    2,
    3,
    2,
    14,
    2,
    9,
    8,
    46,
    39,
    7,
    3,
    1,
    3,
    21,
    2,
    6,
    2,
    1,
    2,
    4,
    4,
    0,
    19,
    0,
    13,
    4,
    159,
    52,
    19,
    3,
    21,
    2,
    31,
    47,
    21,
    1,
    2,
    0,
    185,
    46,
    42,
    3,
    37,
    47,
    21,
    0,
    60,
    42,
    14,
    0,
    72,
    26,
    38,
    6,
    186,
    43,
    117,
    63,
    32,
    7,
    3,
    0,
    3,
    7,
    2,
    1,
    2,
    23,
    16,
    0,
    2,
    0,
    95,
    7,
    3,
    38,
    17,
    0,
    2,
    0,
    29,
    0,
    11,
    39,
    8,
    0,
    22,
    0,
    12,
    45,
    20,
    0,
    19,
    72,
    264,
    8,
    2,
    36,
    18,
    0,
    50,
    29,
    113,
    6,
    2,
    1,
    2,
    37,
    22,
    0,
    26,
    5,
    2,
    1,
    2,
    31,
    15,
    0,
    328,
    18,
    190,
    0,
    80,
    921,
    103,
    110,
    18,
    195,
    2637,
    96,
    16,
    1070,
    4050,
    582,
    8634,
    568,
    8,
    30,
    18,
    78,
    18,
    29,
    19,
    47,
    17,
    3,
    32,
    20,
    6,
    18,
    689,
    63,
    129,
    74,
    6,
    0,
    67,
    12,
    65,
    1,
    2,
    0,
    29,
    6135,
    9,
    1237,
    43,
    8,
    8936,
    3,
    2,
    6,
    2,
    1,
    2,
    290,
    46,
    2,
    18,
    3,
    9,
    395,
    2309,
    106,
    6,
    12,
    4,
    8,
    8,
    9,
    5991,
    84,
    2,
    70,
    2,
    1,
    3,
    0,
    3,
    1,
    3,
    3,
    2,
    11,
    2,
    0,
    2,
    6,
    2,
    64,
    2,
    3,
    3,
    7,
    2,
    6,
    2,
    27,
    2,
    3,
    2,
    4,
    2,
    0,
    4,
    6,
    2,
    339,
    3,
    24,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    7,
    1845,
    30,
    482,
    44,
    11,
    6,
    17,
    0,
    322,
    29,
    19,
    43,
    1269,
    6,
    2,
    3,
    2,
    1,
    2,
    14,
    2,
    196,
    60,
    67,
    8,
    0,
    1205,
    3,
    2,
    26,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    9,
    2,
    3,
    2,
    0,
    2,
    0,
    7,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    2,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    2,
    0,
    3,
    3,
    2,
    6,
    2,
    3,
    2,
    3,
    2,
    0,
    2,
    9,
    2,
    16,
    6,
    2,
    2,
    4,
    2,
    16,
    4421,
    42719,
    33,
    4152,
    8,
    221,
    3,
    5761,
    15,
    7472,
    3104,
    541,
    1507,
    4938
];
const C6 = [
    509,
    0,
    227,
    0,
    150,
    4,
    294,
    9,
    1368,
    2,
    2,
    1,
    6,
    3,
    41,
    2,
    5,
    0,
    166,
    1,
    574,
    3,
    9,
    9,
    370,
    1,
    154,
    10,
    50,
    3,
    123,
    2,
    54,
    14,
    32,
    10,
    3,
    1,
    11,
    3,
    46,
    10,
    8,
    0,
    46,
    9,
    7,
    2,
    37,
    13,
    2,
    9,
    6,
    1,
    45,
    0,
    13,
    2,
    49,
    13,
    9,
    3,
    2,
    11,
    83,
    11,
    7,
    0,
    161,
    11,
    6,
    9,
    7,
    3,
    56,
    1,
    2,
    6,
    3,
    1,
    3,
    2,
    10,
    0,
    11,
    1,
    3,
    6,
    4,
    4,
    193,
    17,
    10,
    9,
    5,
    0,
    82,
    19,
    13,
    9,
    214,
    6,
    3,
    8,
    28,
    1,
    83,
    16,
    16,
    9,
    82,
    12,
    9,
    9,
    84,
    14,
    5,
    9,
    243,
    14,
    166,
    9,
    71,
    5,
    2,
    1,
    3,
    3,
    2,
    0,
    2,
    1,
    13,
    9,
    120,
    6,
    3,
    6,
    4,
    0,
    29,
    9,
    41,
    6,
    2,
    3,
    9,
    0,
    10,
    10,
    47,
    15,
    406,
    7,
    2,
    7,
    17,
    9,
    57,
    21,
    2,
    13,
    123,
    5,
    4,
    0,
    2,
    1,
    2,
    6,
    2,
    0,
    9,
    9,
    49,
    4,
    2,
    1,
    2,
    4,
    9,
    9,
    330,
    3,
    19306,
    9,
    87,
    9,
    39,
    4,
    60,
    6,
    26,
    9,
    1014,
    0,
    2,
    54,
    8,
    3,
    82,
    0,
    12,
    1,
    19628,
    1,
    4706,
    45,
    3,
    22,
    543,
    4,
    4,
    5,
    9,
    7,
    3,
    6,
    31,
    3,
    149,
    2,
    1418,
    49,
    513,
    54,
    5,
    49,
    9,
    0,
    15,
    0,
    23,
    4,
    2,
    14,
    1361,
    6,
    2,
    16,
    3,
    6,
    2,
    1,
    2,
    4,
    262,
    6,
    10,
    9,
    357,
    0,
    62,
    13,
    1495,
    6,
    110,
    6,
    6,
    9,
    4759,
    9,
    787719,
    239
];
function isInAstralSet1(e134, t49) {
    let s27 = 65536;
    for(let i16 = 0, r1211 = t49.length; i16 < r1211; i16 += 2){
        s27 += t49[i16];
        if (s27 > e134) return false;
        s27 += t49[i16 + 1];
        if (s27 >= e134) return true;
    }
    return false;
}
function isIdentifierStart(e135) {
    return e135 < 65 ? 36 === e135 : e135 <= 90 || (e135 < 97 ? 95 === e135 : e135 <= 122 || (e135 <= 65535 ? e135 >= 170 && S6.test(String.fromCharCode(e135)) : isInAstralSet1(e135, k4)));
}
function isIdentifierChar(e136) {
    return e136 < 48 ? 36 === e136 : e136 < 58 || !(e136 < 65) && (e136 <= 90 || (e136 < 97 ? 95 === e136 : e136 <= 122 || (e136 <= 65535 ? e136 >= 170 && I6.test(String.fromCharCode(e136)) : isInAstralSet1(e136, k4) || isInAstralSet1(e136, C6))));
}
const N5 = {
    keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "default",
        "do",
        "else",
        "finally",
        "for",
        "function",
        "if",
        "return",
        "switch",
        "throw",
        "try",
        "var",
        "const",
        "while",
        "with",
        "new",
        "this",
        "super",
        "class",
        "extends",
        "export",
        "import",
        "null",
        "true",
        "false",
        "in",
        "instanceof",
        "typeof",
        "void",
        "delete"
    ],
    strict: [
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "yield"
    ],
    strictBind: [
        "eval",
        "arguments"
    ]
};
const v9 = new Set(N5.keyword);
const L5 = new Set(N5.strict);
const M4 = new Set(N5.strictBind);
function isReservedWord(e137, t50) {
    return t50 && "await" === e137 || "enum" === e137;
}
function isStrictReservedWord(e138, t51) {
    return isReservedWord(e138, t51) || L5.has(e138);
}
function isStrictBindOnlyReservedWord(e139) {
    return M4.has(e139);
}
function isStrictBindReservedWord(e140, t52) {
    return isStrictReservedWord(e140, t52) || isStrictBindOnlyReservedWord(e140);
}
function isKeyword(e141) {
    return v9.has(e141);
}
function isIteratorStart(e142, t53, s28) {
    return 64 === e142 && 64 === t53 && isIdentifierStart(s28);
}
const O6 = new Set([
    "break",
    "case",
    "catch",
    "continue",
    "debugger",
    "default",
    "do",
    "else",
    "finally",
    "for",
    "function",
    "if",
    "return",
    "switch",
    "throw",
    "try",
    "var",
    "const",
    "while",
    "with",
    "new",
    "this",
    "super",
    "class",
    "extends",
    "export",
    "import",
    "null",
    "true",
    "false",
    "in",
    "instanceof",
    "typeof",
    "void",
    "delete",
    "implements",
    "interface",
    "let",
    "package",
    "private",
    "protected",
    "public",
    "static",
    "yield",
    "eval",
    "arguments",
    "enum",
    "await"
]);
function canBeReservedWord(e143) {
    return O6.has(e143);
}
const F6 = 1, B5 = 2, z4 = 256, V5 = F6 | B5 | z4;
const se3 = 1 | 2 | 8 | 128, ie4 = 0 | 1 | 8 | 0, re4 = 0 | 1 | 4 | 0, ae4 = 0 | 1 | 16 | 0, ne4 = 0 | 2 | 128, oe4 = 0 | 2, he2 = 1 | 2 | 8 | 256, ce2 = 0 | 1024, pe2 = 0 | 64, le2 = 0 | 1 | 64, ue2 = he2 | 512, de2 = 0 | 1024;
const ye2 = 2, xe2 = 1, Pe2 = ye2 | xe2;
const ge2 = 2 | 4, Te2 = 1 | 4;
class BaseParser {
    constructor(){
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
    }
    hasPlugin(e144) {
        if ("string" === typeof e144) return this.plugins.has(e144);
        {
            const [t54, s29] = e144;
            if (!this.hasPlugin(t54)) return false;
            const i17 = this.plugins.get(t54);
            for (const e145 of Object.keys(s29))if ((null == i17 ? void 0 : i17[e145]) !== s29[e145]) return false;
            return true;
        }
    }
    getPluginOption(e146, t55) {
        var s30;
        return null == (s30 = this.plugins.get(e146)) ? void 0 : s30[t55];
    }
}
function setTrailingComments(e147, t56) {
    void 0 === e147.trailingComments ? e147.trailingComments = t56 : e147.trailingComments.unshift(...t56);
}
function setLeadingComments(e148, t57) {
    void 0 === e148.leadingComments ? e148.leadingComments = t57 : e148.leadingComments.unshift(...t57);
}
function setInnerComments(e149, t58) {
    void 0 === e149.innerComments ? e149.innerComments = t58 : e149.innerComments.unshift(...t58);
}
function adjustInnerComments(e150, t59, s31) {
    let i18 = null;
    let r139 = t59.length;
    while(null === i18 && r139 > 0)i18 = t59[--r139];
    null === i18 || i18.start > s31.start ? setInnerComments(e150, s31.comments) : setTrailingComments(i18, s31.comments);
}
class CommentsParser extends BaseParser {
    addComment(e151) {
        this.filename && (e151.loc.filename = this.filename);
        this.state.comments.push(e151);
    }
    processComment(e152) {
        const { commentStack: t60  } = this.state;
        const s32 = t60.length;
        if (0 === s32) return;
        let i19 = s32 - 1;
        const r142 = t60[i19];
        if (r142.start === e152.end) {
            r142.leadingNode = e152;
            i19--;
        }
        const { start: a92  } = e152;
        for(; i19 >= 0; i19--){
            const s33 = t60[i19];
            const r152 = s33.end;
            if (!(r152 > a92)) {
                r152 === a92 && (s33.trailingNode = e152);
                break;
            }
            s33.containingNode = e152;
            this.finalizeComment(s33);
            t60.splice(i19, 1);
        }
    }
    finalizeComment(e153) {
        const { comments: t61  } = e153;
        if (null !== e153.leadingNode || null !== e153.trailingNode) {
            null !== e153.leadingNode && setTrailingComments(e153.leadingNode, t61);
            null !== e153.trailingNode && setLeadingComments(e153.trailingNode, t61);
        } else {
            const { containingNode: s34 , start: i20  } = e153;
            if (44 === this.input.charCodeAt(i20 - 1)) switch(s34.type){
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                    adjustInnerComments(s34, s34.properties, e153);
                    break;
                case "CallExpression":
                case "OptionalCallExpression":
                    adjustInnerComments(s34, s34.arguments, e153);
                    break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                    adjustInnerComments(s34, s34.params, e153);
                    break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                    adjustInnerComments(s34, s34.elements, e153);
                    break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                    adjustInnerComments(s34, s34.specifiers, e153);
                    break;
                default:
                    setInnerComments(s34, t61);
            }
            else setInnerComments(s34, t61);
        }
    }
    finalizeRemainingComments() {
        const { commentStack: e154  } = this.state;
        for(let t62 = e154.length - 1; t62 >= 0; t62--)this.finalizeComment(e154[t62]);
        this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(e155) {
        const { commentStack: t63  } = this.state;
        const { length: s35  } = t63;
        if (0 === s35) return;
        const i21 = t63[s35 - 1];
        i21.leadingNode === e155 && (i21.leadingNode = null);
    }
    takeSurroundingComments(e156, t64, s36) {
        const { commentStack: i22  } = this.state;
        const r162 = i22.length;
        if (0 === r162) return;
        let a102 = r162 - 1;
        for(; a102 >= 0; a102--){
            const r172 = i22[a102];
            const n2114 = r172.end;
            const o225 = r172.start;
            if (o225 === s36) r172.leadingNode = e156;
            else if (n2114 === t64) r172.trailingNode = e156;
            else if (n2114 < t64) break;
        }
    }
}
const Ee2 = /\r\n?|[\n\u2028\u2029]/;
const Se2 = new RegExp(Ee2.source, "g");
function isNewLine(e157) {
    switch(e157){
        case 10:
        case 13:
        case 8232:
        case 8233:
            return true;
        default:
            return false;
    }
}
const Ie2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
const ke2 = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
const Ce2 = new RegExp("(?=(" + ke2.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
function isWhitespace(e158) {
    switch(e158){
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
            return true;
        default:
            return false;
    }
}
class State {
    constructor(){
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.decoratorStack = [
            []
        ];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 135;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.context = [
            o20.brace
        ];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.strictErrors = new Map;
        this.tokensLength = 0;
    }
    init({ strictMode: e159 , sourceType: t65 , startLine: s37 , startColumn: i23  }) {
        this.strict = false !== e159 && (true === e159 || "module" === t65);
        this.curLine = s37;
        this.lineStart = -i23;
        this.startLoc = this.endLoc = new Position(s37, i23, 0);
    }
    curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart, this.pos);
    }
    clone(e160) {
        const t66 = new State;
        const s38 = Object.keys(this);
        for(let i24 = 0, r182 = s38.length; i24 < r182; i24++){
            const r192 = s38[i24];
            let a1111 = this[r192];
            !e160 && Array.isArray(a1111) && (a1111 = a1111.slice());
            t66[r192] = a1111;
        }
        return t66;
    }
}
const Ne2 = [
    "at"
], ve3 = [
    "at"
];
var Le2 = function isDigit(e161) {
    return e161 >= 48 && e161 <= 57;
};
const Me2 = new Set([
    103,
    109,
    115,
    105,
    121,
    117,
    100,
    118
]);
const Oe2 = {
    decBinOct: new Set([
        46,
        66,
        69,
        79,
        95,
        98,
        101,
        111
    ]),
    hex: new Set([
        46,
        88,
        95,
        120
    ])
};
const De2 = {
    bin: (e162)=>48 === e162 || 49 === e162
    ,
    oct: (e163)=>e163 >= 48 && e163 <= 55
    ,
    dec: (e164)=>e164 >= 48 && e164 <= 57
    ,
    hex: (e165)=>e165 >= 48 && e165 <= 57 || e165 >= 65 && e165 <= 70 || e165 >= 97 && e165 <= 102
};
class Token {
    constructor(e166){
        this.type = e166.type;
        this.value = e166.value;
        this.start = e166.start;
        this.end = e166.end;
        this.loc = new SourceLocation(e166.startLoc, e166.endLoc);
    }
}
class Tokenizer extends CommentsParser {
    constructor(e167, t67){
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.state = new State;
        this.state.init(e167);
        this.input = t67;
        this.length = t67.length;
        this.isLookahead = false;
    }
    pushToken(e168) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(e168);
        ++this.state.tokensLength;
    }
    next() {
        this.checkKeywordEscapes();
        this.options.tokens && this.pushToken(new Token(this.state));
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
    }
    eat(e169) {
        if (this.match(e169)) {
            this.next();
            return true;
        }
        return false;
    }
    match(e170) {
        return this.state.type === e170;
    }
    createLookaheadState(e171) {
        return {
            pos: e171.pos,
            value: null,
            type: e171.type,
            start: e171.start,
            end: e171.end,
            context: [
                this.curContext()
            ],
            inType: e171.inType,
            startLoc: e171.startLoc,
            lastTokEndLoc: e171.lastTokEndLoc,
            curLine: e171.curLine,
            lineStart: e171.lineStart,
            curPosition: e171.curPosition
        };
    }
    lookahead() {
        const e172 = this.state;
        this.state = this.createLookaheadState(e172);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const t68 = this.state;
        this.state = e172;
        return t68;
    }
    nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(e173) {
        Ie2.lastIndex = e173;
        return Ie2.test(this.input) ? Ie2.lastIndex : e173;
    }
    lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
    }
    codePointAtPos(e174) {
        let t69 = this.input.charCodeAt(e174);
        if (55296 === (64512 & t69) && ++e174 < this.input.length) {
            const s39 = this.input.charCodeAt(e174);
            56320 === (64512 & s39) && (t69 = 65536 + ((1023 & t69) << 10) + (1023 & s39));
        }
        return t69;
    }
    setStrict(e175) {
        this.state.strict = e175;
        if (e175) {
            this.state.strictErrors.forEach(([e176, t70])=>this.raise(e176, {
                    at: t70
                })
            );
            this.state.strictErrors.clear();
        }
    }
    curContext() {
        return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
        this.skipSpace();
        this.state.start = this.state.pos;
        this.isLookahead || (this.state.startLoc = this.state.curPosition());
        this.state.pos >= this.length ? this.finishToken(135) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment() {
        let e177;
        this.isLookahead || (e177 = this.state.curPosition());
        const t71 = this.state.pos;
        const s40 = this.input.indexOf("*/", t71 + 2);
        if (-1 === s40) throw this.raise(a16.UnterminatedComment, {
            at: this.state.curPosition()
        });
        this.state.pos = s40 + 2;
        Se2.lastIndex = t71 + 2;
        while(Se2.test(this.input) && Se2.lastIndex <= s40){
            ++this.state.curLine;
            this.state.lineStart = Se2.lastIndex;
        }
        if (this.isLookahead) return;
        const i25 = {
            type: "CommentBlock",
            value: this.input.slice(t71 + 2, s40),
            start: t71,
            end: s40 + 2,
            loc: new SourceLocation(e177, this.state.curPosition())
        };
        this.options.tokens && this.pushToken(i25);
        return i25;
    }
    skipLineComment(e178) {
        const t72 = this.state.pos;
        let s41;
        this.isLookahead || (s41 = this.state.curPosition());
        let i26 = this.input.charCodeAt(this.state.pos += e178);
        if (this.state.pos < this.length) while(!isNewLine(i26) && ++this.state.pos < this.length)i26 = this.input.charCodeAt(this.state.pos);
        if (this.isLookahead) return;
        const r201 = this.state.pos;
        const a125 = this.input.slice(t72 + e178, r201);
        const n324 = {
            type: "CommentLine",
            value: a125,
            start: t72,
            end: r201,
            loc: new SourceLocation(s41, this.state.curPosition())
        };
        this.options.tokens && this.pushToken(n324);
        return n324;
    }
    skipSpace() {
        const e183 = this.state.pos;
        const t73 = [];
        e: while(this.state.pos < this.length){
            const s42 = this.input.charCodeAt(this.state.pos);
            switch(s42){
                case 32:
                case 160:
                case 9:
                    ++this.state.pos;
                    break;
                case 13:
                    10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                    ++this.state.pos;
                    ++this.state.curLine;
                    this.state.lineStart = this.state.pos;
                    break;
                case 47:
                    switch(this.input.charCodeAt(this.state.pos + 1)){
                        case 42:
                            {
                                const e179 = this.skipBlockComment();
                                if (void 0 !== e179) {
                                    this.addComment(e179);
                                    this.options.attachComment && t73.push(e179);
                                }
                                break;
                            }
                        case 47:
                            {
                                const e180 = this.skipLineComment(2);
                                if (void 0 !== e180) {
                                    this.addComment(e180);
                                    this.options.attachComment && t73.push(e180);
                                }
                                break;
                            }
                        default:
                            break e;
                    }
                    break;
                default:
                    if (isWhitespace(s42)) ++this.state.pos;
                    else if (45 !== s42 || this.inModule) {
                        if (60 !== s42 || this.inModule) break e;
                        {
                            const e181 = this.state.pos;
                            if (33 !== this.input.charCodeAt(e181 + 1) || 45 !== this.input.charCodeAt(e181 + 2) || 45 !== this.input.charCodeAt(e181 + 3)) break e;
                            {
                                const e182 = this.skipLineComment(4);
                                if (void 0 !== e182) {
                                    this.addComment(e182);
                                    this.options.attachComment && t73.push(e182);
                                }
                            }
                        }
                    } else {
                        const s43 = this.state.pos;
                        if (45 !== this.input.charCodeAt(s43 + 1) || 62 !== this.input.charCodeAt(s43 + 2) || !(0 === e183 || this.state.lineStart > e183)) break e;
                        {
                            const e184 = this.skipLineComment(3);
                            if (void 0 !== e184) {
                                this.addComment(e184);
                                this.options.attachComment && t73.push(e184);
                            }
                        }
                    }
            }
        }
        if (t73.length > 0) {
            const s44 = this.state.pos;
            const i27 = {
                start: e183,
                end: s44,
                comments: t73,
                leadingNode: null,
                trailingNode: null,
                containingNode: null
            };
            this.state.commentStack.push(i27);
        }
    }
    finishToken(e185, t74) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        const s45 = this.state.type;
        this.state.type = e185;
        this.state.value = t74;
        this.isLookahead || this.updateContext(s45);
    }
    replaceToken(e186) {
        this.state.type = e186;
        this.updateContext();
    }
    readToken_numberSign() {
        if (0 === this.state.pos && this.readToken_interpreter()) return;
        const e187 = this.state.pos + 1;
        const t75 = this.codePointAtPos(e187);
        if (t75 >= 48 && t75 <= 57) throw this.raise(a16.UnexpectedDigitAfterHash, {
            at: this.state.curPosition()
        });
        if (123 === t75 || 91 === t75 && this.hasPlugin("recordAndTuple")) {
            this.expectPlugin("recordAndTuple");
            if ("hash" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(123 === t75 ? a16.RecordExpressionHashIncorrectStartSyntaxType : a16.TupleExpressionHashIncorrectStartSyntaxType, {
                at: this.state.curPosition()
            });
            this.state.pos += 2;
            123 === t75 ? this.finishToken(7) : this.finishToken(1);
        } else if (isIdentifierStart(t75)) {
            ++this.state.pos;
            this.finishToken(134, this.readWord1(t75));
        } else if (92 === t75) {
            ++this.state.pos;
            this.finishToken(134, this.readWord1());
        } else this.finishOp(27, 1);
    }
    readToken_dot() {
        const e188 = this.input.charCodeAt(this.state.pos + 1);
        if (e188 >= 48 && e188 <= 57) this.readNumber(true);
        else if (46 === e188 && 46 === this.input.charCodeAt(this.state.pos + 2)) {
            this.state.pos += 3;
            this.finishToken(21);
        } else {
            ++this.state.pos;
            this.finishToken(16);
        }
    }
    readToken_slash() {
        const e189 = this.input.charCodeAt(this.state.pos + 1);
        61 === e189 ? this.finishOp(31, 2) : this.finishOp(56, 1);
    }
    readToken_interpreter() {
        if (0 !== this.state.pos || this.length < 2) return false;
        let e190 = this.input.charCodeAt(this.state.pos + 1);
        if (33 !== e190) return false;
        const t76 = this.state.pos;
        this.state.pos += 1;
        while(!isNewLine(e190) && ++this.state.pos < this.length)e190 = this.input.charCodeAt(this.state.pos);
        const s46 = this.input.slice(t76 + 2, this.state.pos);
        this.finishToken(28, s46);
        return true;
    }
    readToken_mult_modulo(e191) {
        let t77 = 42 === e191 ? 55 : 54;
        let s47 = 1;
        let i28 = this.input.charCodeAt(this.state.pos + 1);
        if (42 === e191 && 42 === i28) {
            s47++;
            i28 = this.input.charCodeAt(this.state.pos + 2);
            t77 = 57;
        }
        if (61 === i28 && !this.state.inType) {
            s47++;
            t77 = 37 === e191 ? 33 : 30;
        }
        this.finishOp(t77, s47);
    }
    readToken_pipe_amp(e192) {
        const t78 = this.input.charCodeAt(this.state.pos + 1);
        if (t78 !== e192) {
            if (124 === e192) {
                if (62 === t78) {
                    this.finishOp(39, 2);
                    return;
                }
                if (this.hasPlugin("recordAndTuple") && 125 === t78) {
                    if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(a16.RecordExpressionBarIncorrectEndSyntaxType, {
                        at: this.state.curPosition()
                    });
                    this.state.pos += 2;
                    this.finishToken(9);
                    return;
                }
                if (this.hasPlugin("recordAndTuple") && 93 === t78) {
                    if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(a16.TupleExpressionBarIncorrectEndSyntaxType, {
                        at: this.state.curPosition()
                    });
                    this.state.pos += 2;
                    this.finishToken(4);
                    return;
                }
            }
            61 !== t78 ? this.finishOp(124 === e192 ? 43 : 45, 1) : this.finishOp(30, 2);
        } else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === e192 ? 41 : 42, 2);
    }
    readToken_caret() {
        const e193 = this.input.charCodeAt(this.state.pos + 1);
        if (61 !== e193 || this.state.inType) if (94 === e193 && this.hasPlugin([
            "pipelineOperator",
            {
                proposal: "hack",
                topicToken: "^^"
            }
        ])) {
            this.finishOp(37, 2);
            const e194 = this.input.codePointAt(this.state.pos);
            if (94 === e194) throw this.unexpected();
        } else this.finishOp(44, 1);
        else this.finishOp(32, 2);
    }
    readToken_atSign() {
        const e195 = this.input.charCodeAt(this.state.pos + 1);
        64 === e195 && this.hasPlugin([
            "pipelineOperator",
            {
                proposal: "hack",
                topicToken: "@@"
            }
        ]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
    }
    readToken_plus_min(e196) {
        const t79 = this.input.charCodeAt(this.state.pos + 1);
        t79 !== e196 ? 61 === t79 ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
    }
    readToken_lt() {
        const { pos: e197  } = this.state;
        const t80 = this.input.charCodeAt(e197 + 1);
        if (60 !== t80) 61 !== t80 ? this.finishOp(47, 1) : this.finishOp(49, 2);
        else {
            if (61 === this.input.charCodeAt(e197 + 2)) {
                this.finishOp(30, 3);
                return;
            }
            this.finishOp(51, 2);
        }
    }
    readToken_gt() {
        const { pos: e198  } = this.state;
        const t81 = this.input.charCodeAt(e198 + 1);
        if (62 !== t81) 61 !== t81 ? this.finishOp(48, 1) : this.finishOp(49, 2);
        else {
            const t82 = 62 === this.input.charCodeAt(e198 + 2) ? 3 : 2;
            if (61 === this.input.charCodeAt(e198 + t82)) {
                this.finishOp(30, t82 + 1);
                return;
            }
            this.finishOp(52, t82);
        }
    }
    readToken_eq_excl(e199) {
        const t83 = this.input.charCodeAt(this.state.pos + 1);
        if (61 !== t83) if (61 !== e199 || 62 !== t83) this.finishOp(61 === e199 ? 29 : 35, 1);
        else {
            this.state.pos += 2;
            this.finishToken(19);
        }
        else this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
    }
    readToken_question() {
        const e200 = this.input.charCodeAt(this.state.pos + 1);
        const t84 = this.input.charCodeAt(this.state.pos + 2);
        if (63 === e200) 61 === t84 ? this.finishOp(30, 3) : this.finishOp(40, 2);
        else if (46 !== e200 || t84 >= 48 && t84 <= 57) {
            ++this.state.pos;
            this.finishToken(17);
        } else {
            this.state.pos += 2;
            this.finishToken(18);
        }
    }
    getTokenFromCode(e201) {
        switch(e201){
            case 46:
                this.readToken_dot();
                return;
            case 40:
                ++this.state.pos;
                this.finishToken(10);
                return;
            case 41:
                ++this.state.pos;
                this.finishToken(11);
                return;
            case 59:
                ++this.state.pos;
                this.finishToken(13);
                return;
            case 44:
                ++this.state.pos;
                this.finishToken(12);
                return;
            case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                    if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(a16.TupleExpressionBarIncorrectStartSyntaxType, {
                        at: this.state.curPosition()
                    });
                    this.state.pos += 2;
                    this.finishToken(2);
                } else {
                    ++this.state.pos;
                    this.finishToken(0);
                }
                return;
            case 93:
                ++this.state.pos;
                this.finishToken(3);
                return;
            case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                    if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(a16.RecordExpressionBarIncorrectStartSyntaxType, {
                        at: this.state.curPosition()
                    });
                    this.state.pos += 2;
                    this.finishToken(6);
                } else {
                    ++this.state.pos;
                    this.finishToken(5);
                }
                return;
            case 125:
                ++this.state.pos;
                this.finishToken(8);
                return;
            case 58:
                if (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1)) this.finishOp(15, 2);
                else {
                    ++this.state.pos;
                    this.finishToken(14);
                }
                return;
            case 63:
                this.readToken_question();
                return;
            case 96:
                this.readTemplateToken();
                return;
            case 48:
                {
                    const e202 = this.input.charCodeAt(this.state.pos + 1);
                    if (120 === e202 || 88 === e202) {
                        this.readRadixNumber(16);
                        return;
                    }
                    if (111 === e202 || 79 === e202) {
                        this.readRadixNumber(8);
                        return;
                    }
                    if (98 === e202 || 66 === e202) {
                        this.readRadixNumber(2);
                        return;
                    }
                }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                this.readNumber(false);
                return;
            case 34:
            case 39:
                this.readString(e201);
                return;
            case 47:
                this.readToken_slash();
                return;
            case 37:
            case 42:
                this.readToken_mult_modulo(e201);
                return;
            case 124:
            case 38:
                this.readToken_pipe_amp(e201);
                return;
            case 94:
                this.readToken_caret();
                return;
            case 43:
            case 45:
                this.readToken_plus_min(e201);
                return;
            case 60:
                this.readToken_lt();
                return;
            case 62:
                this.readToken_gt();
                return;
            case 61:
            case 33:
                this.readToken_eq_excl(e201);
                return;
            case 126:
                this.finishOp(36, 1);
                return;
            case 64:
                this.readToken_atSign();
                return;
            case 35:
                this.readToken_numberSign();
                return;
            case 92:
                this.readWord();
                return;
            default:
                if (isIdentifierStart(e201)) {
                    this.readWord(e201);
                    return;
                }
        }
        throw this.raise(a16.InvalidOrUnexpectedToken, {
            at: this.state.curPosition(),
            unexpected: String.fromCodePoint(e201)
        });
    }
    finishOp(e203, t85) {
        const s48 = this.input.slice(this.state.pos, this.state.pos + t85);
        this.state.pos += t85;
        this.finishToken(e203, s48);
    }
    readRegexp() {
        const e204 = this.state.startLoc;
        const t87 = this.state.start + 1;
        let s49, i29;
        let { pos: r2110  } = this.state;
        for(;; ++r2110){
            if (r2110 >= this.length) throw this.raise(a16.UnterminatedRegExp, {
                at: createPositionWithColumnOffset(e204, 1)
            });
            const t86 = this.input.charCodeAt(r2110);
            if (isNewLine(t86)) throw this.raise(a16.UnterminatedRegExp, {
                at: createPositionWithColumnOffset(e204, 1)
            });
            if (s49) s49 = false;
            else {
                if (91 === t86) i29 = true;
                else if (93 === t86 && i29) i29 = false;
                else if (47 === t86 && !i29) break;
                s49 = 92 === t86;
            }
        }
        const n423 = this.input.slice(t87, r2110);
        ++r2110;
        let o322 = "";
        const nextPos = ()=>createPositionWithColumnOffset(e204, r2110 + 2 - t87)
        ;
        while(r2110 < this.length){
            const e205 = this.codePointAtPos(r2110);
            const t88 = String.fromCharCode(e205);
            if (Me2.has(e205)) {
                if (118 === e205) {
                    this.expectPlugin("regexpUnicodeSets", nextPos());
                    o322.includes("u") && this.raise(a16.IncompatibleRegExpUVFlags, {
                        at: nextPos()
                    });
                } else 117 === e205 && o322.includes("v") && this.raise(a16.IncompatibleRegExpUVFlags, {
                    at: nextPos()
                });
                o322.includes(t88) && this.raise(a16.DuplicateRegExpFlags, {
                    at: nextPos()
                });
            } else {
                if (!isIdentifierChar(e205) && 92 !== e205) break;
                this.raise(a16.MalformedRegExpFlags, {
                    at: nextPos()
                });
            }
            ++r2110;
            o322 += t88;
        }
        this.state.pos = r2110;
        this.finishToken(133, {
            pattern: n423,
            flags: o322
        });
    }
    readInt(e206, t89, s50, i30 = true) {
        const r241 = this.state.pos;
        const n520 = 16 === e206 ? Oe2.hex : Oe2.decBinOct;
        const o418 = 16 === e206 ? De2.hex : 10 === e206 ? De2.dec : 8 === e206 ? De2.oct : De2.bin;
        let h113 = false;
        let c120 = 0;
        for(let r228 = 0, p116 = null == t89 ? Infinity : t89; r228 < p116; ++r228){
            const t90 = this.input.charCodeAt(this.state.pos);
            let r231;
            if (95 !== t90 || "bail" === i30) {
                r231 = t90 >= 97 ? t90 - 97 + 10 : t90 >= 65 ? t90 - 65 + 10 : Le2(t90) ? t90 - 48 : Infinity;
                if (r231 >= e206) if (this.options.errorRecovery && r231 <= 9) {
                    r231 = 0;
                    this.raise(a16.InvalidDigit, {
                        at: this.state.curPosition(),
                        radix: e206
                    });
                } else {
                    if (!s50) break;
                    r231 = 0;
                    h113 = true;
                }
                ++this.state.pos;
                c120 = c120 * e206 + r231;
            } else {
                const e207 = this.input.charCodeAt(this.state.pos - 1);
                const t91 = this.input.charCodeAt(this.state.pos + 1);
                i30 ? (Number.isNaN(t91) || !o418(t91) || n520.has(e207) || n520.has(t91)) && this.raise(a16.UnexpectedNumericSeparator, {
                    at: this.state.curPosition()
                }) : this.raise(a16.NumericSeparatorInEscapeSequence, {
                    at: this.state.curPosition()
                });
                ++this.state.pos;
            }
        }
        return this.state.pos === r241 || null != t89 && this.state.pos - r241 !== t89 || h113 ? null : c120;
    }
    readRadixNumber(e208) {
        const t92 = this.state.curPosition();
        let s51 = false;
        this.state.pos += 2;
        const i31 = this.readInt(e208);
        null == i31 && this.raise(a16.InvalidDigit, {
            at: createPositionWithColumnOffset(t92, 2),
            radix: e208
        });
        const r251 = this.input.charCodeAt(this.state.pos);
        if (110 === r251) {
            ++this.state.pos;
            s51 = true;
        } else if (109 === r251) throw this.raise(a16.InvalidDecimal, {
            at: t92
        });
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(a16.NumberIdentifier, {
            at: this.state.curPosition()
        });
        if (s51) {
            const e209 = this.input.slice(t92.index, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(131, e209);
        } else this.finishToken(130, i31);
    }
    readNumber(e210) {
        const t93 = this.state.pos;
        const s52 = this.state.curPosition();
        let i32 = false;
        let r261 = false;
        let n620 = false;
        let o517 = false;
        let h213 = false;
        e210 || null !== this.readInt(10) || this.raise(a16.InvalidNumber, {
            at: this.state.curPosition()
        });
        const c215 = this.state.pos - t93 >= 2 && 48 === this.input.charCodeAt(t93);
        if (c215) {
            const e211 = this.input.slice(t93, this.state.pos);
            this.recordStrictModeErrors(a16.StrictOctalLiteral, {
                at: s52
            });
            if (!this.state.strict) {
                const t94 = e211.indexOf("_");
                t94 > 0 && this.raise(a16.ZeroDigitNumericSeparator, {
                    at: createPositionWithColumnOffset(s52, t94)
                });
            }
            h213 = c215 && !/[89]/.test(e211);
        }
        let p213 = this.input.charCodeAt(this.state.pos);
        if (46 === p213 && !h213) {
            ++this.state.pos;
            this.readInt(10);
            i32 = true;
            p213 = this.input.charCodeAt(this.state.pos);
        }
        if ((69 === p213 || 101 === p213) && !h213) {
            p213 = this.input.charCodeAt(++this.state.pos);
            43 !== p213 && 45 !== p213 || ++this.state.pos;
            null === this.readInt(10) && this.raise(a16.InvalidOrMissingExponent, {
                at: s52
            });
            i32 = true;
            o517 = true;
            p213 = this.input.charCodeAt(this.state.pos);
        }
        if (110 === p213) {
            (i32 || c215) && this.raise(a16.InvalidBigIntLiteral, {
                at: s52
            });
            ++this.state.pos;
            r261 = true;
        }
        if (109 === p213) {
            this.expectPlugin("decimal", this.state.curPosition());
            (o517 || c215) && this.raise(a16.InvalidDecimal, {
                at: s52
            });
            ++this.state.pos;
            n620 = true;
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(a16.NumberIdentifier, {
            at: this.state.curPosition()
        });
        const l118 = this.input.slice(t93, this.state.pos).replace(/[_mn]/g, "");
        if (r261) {
            this.finishToken(131, l118);
            return;
        }
        if (n620) {
            this.finishToken(132, l118);
            return;
        }
        const u117 = h213 ? parseInt(l118, 8) : parseFloat(l118);
        this.finishToken(130, u117);
    }
    readCodePoint(e212) {
        const t95 = this.input.charCodeAt(this.state.pos);
        let s53;
        if (123 === t95) {
            ++this.state.pos;
            s53 = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, e212);
            ++this.state.pos;
            if (null !== s53 && s53 > 1114111) {
                if (!e212) return null;
                this.raise(a16.InvalidCodePoint, {
                    at: this.state.curPosition()
                });
            }
        } else s53 = this.readHexChar(4, false, e212);
        return s53;
    }
    readString(e213) {
        let t96 = "", s54 = ++this.state.pos;
        for(;;){
            if (this.state.pos >= this.length) throw this.raise(a16.UnterminatedString, {
                at: this.state.startLoc
            });
            const i33 = this.input.charCodeAt(this.state.pos);
            if (i33 === e213) break;
            if (92 === i33) {
                t96 += this.input.slice(s54, this.state.pos);
                t96 += this.readEscapedChar(false);
                s54 = this.state.pos;
            } else if (8232 === i33 || 8233 === i33) {
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
            } else {
                if (isNewLine(i33)) throw this.raise(a16.UnterminatedString, {
                    at: this.state.startLoc
                });
                ++this.state.pos;
            }
        }
        t96 += this.input.slice(s54, this.state.pos++);
        this.finishToken(129, t96);
    }
    readTemplateContinuation() {
        this.match(8) || this.unexpected(null, 8);
        this.state.pos--;
        this.readTemplateToken();
    }
    readTemplateToken() {
        let e214 = "", t97 = this.state.pos, s55 = false;
        ++this.state.pos;
        for(;;){
            if (this.state.pos >= this.length) throw this.raise(a16.UnterminatedTemplate, {
                at: createPositionWithColumnOffset(this.state.startLoc, 1)
            });
            const i34 = this.input.charCodeAt(this.state.pos);
            if (96 === i34) {
                ++this.state.pos;
                e214 += this.input.slice(t97, this.state.pos);
                this.finishToken(24, s55 ? null : e214);
                return;
            }
            if (36 === i34 && 123 === this.input.charCodeAt(this.state.pos + 1)) {
                this.state.pos += 2;
                e214 += this.input.slice(t97, this.state.pos);
                this.finishToken(25, s55 ? null : e214);
                return;
            }
            if (92 === i34) {
                e214 += this.input.slice(t97, this.state.pos);
                const i35 = this.readEscapedChar(true);
                null === i35 ? s55 = true : e214 += i35;
                t97 = this.state.pos;
            } else if (isNewLine(i34)) {
                e214 += this.input.slice(t97, this.state.pos);
                ++this.state.pos;
                switch(i34){
                    case 13:
                        10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos;
                    case 10:
                        e214 += "\n";
                        break;
                    default:
                        e214 += String.fromCharCode(i34);
                        break;
                }
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                t97 = this.state.pos;
            } else ++this.state.pos;
        }
    }
    recordStrictModeErrors(e215, { at: t98  }) {
        const s56 = t98.index;
        this.state.strict && !this.state.strictErrors.has(s56) ? this.raise(e215, {
            at: t98
        }) : this.state.strictErrors.set(s56, [
            e215,
            t98
        ]);
    }
    readEscapedChar(e216) {
        const t99 = !e216;
        const s57 = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch(s57){
            case 110:
                return "\n";
            case 114:
                return "\r";
            case 120:
                {
                    const e217 = this.readHexChar(2, false, t99);
                    return null === e217 ? null : String.fromCharCode(e217);
                }
            case 117:
                {
                    const e218 = this.readCodePoint(t99);
                    return null === e218 ? null : String.fromCodePoint(e218);
                }
            case 116:
                return "\t";
            case 98:
                return "\b";
            case 118:
                return "\v";
            case 102:
                return "\f";
            case 13:
                10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos;
            case 10:
                this.state.lineStart = this.state.pos;
                ++this.state.curLine;
            case 8232:
            case 8233:
                return "";
            case 56:
            case 57:
                if (e216) return null;
                this.recordStrictModeErrors(a16.StrictNumericEscape, {
                    at: createPositionWithColumnOffset(this.state.curPosition(), -1)
                });
            default:
                if (s57 >= 48 && s57 <= 55) {
                    const t100 = createPositionWithColumnOffset(this.state.curPosition(), -1);
                    const s58 = this.input.slice(this.state.pos - 1, this.state.pos + 2).match(/^[0-7]+/);
                    let i36 = s58[0];
                    let r27 = parseInt(i36, 8);
                    if (r27 > 255) {
                        i36 = i36.slice(0, -1);
                        r27 = parseInt(i36, 8);
                    }
                    this.state.pos += i36.length - 1;
                    const n719 = this.input.charCodeAt(this.state.pos);
                    if ("0" !== i36 || 56 === n719 || 57 === n719) {
                        if (e216) return null;
                        this.recordStrictModeErrors(a16.StrictNumericEscape, {
                            at: t100
                        });
                    }
                    return String.fromCharCode(r27);
                }
                return String.fromCharCode(s57);
        }
    }
    readHexChar(e219, t101, s59) {
        const i37 = this.state.curPosition();
        const r28 = this.readInt(16, e219, t101, false);
        null === r28 && (s59 ? this.raise(a16.InvalidEscapeSequence, {
            at: i37
        }) : this.state.pos = i37.index - 1);
        return r28;
    }
    readWord1(e220) {
        this.state.containsEsc = false;
        let t102 = "";
        const s60 = this.state.pos;
        let i38 = this.state.pos;
        void 0 !== e220 && (this.state.pos += e220 <= 65535 ? 1 : 2);
        while(this.state.pos < this.length){
            const e221 = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar(e221)) this.state.pos += e221 <= 65535 ? 1 : 2;
            else {
                if (92 !== e221) break;
                {
                    this.state.containsEsc = true;
                    t102 += this.input.slice(i38, this.state.pos);
                    const e222 = this.state.curPosition();
                    const r29 = this.state.pos === s60 ? isIdentifierStart : isIdentifierChar;
                    if (117 !== this.input.charCodeAt(++this.state.pos)) {
                        this.raise(a16.MissingUnicodeEscape, {
                            at: this.state.curPosition()
                        });
                        i38 = this.state.pos - 1;
                        continue;
                    }
                    ++this.state.pos;
                    const n817 = this.readCodePoint(true);
                    if (null !== n817) {
                        r29(n817) || this.raise(a16.EscapedCharNotAnIdentifier, {
                            at: e222
                        });
                        t102 += String.fromCodePoint(n817);
                    }
                    i38 = this.state.pos;
                }
            }
        }
        return t102 + this.input.slice(i38, this.state.pos);
    }
    readWord(e223) {
        const t103 = this.readWord1(e223);
        const s61 = m9.get(t103);
        void 0 !== s61 ? this.finishToken(s61, tokenLabelName(s61)) : this.finishToken(128, t103);
    }
    checkKeywordEscapes() {
        const { type: e224  } = this.state;
        tokenIsKeyword(e224) && this.state.containsEsc && this.raise(a16.InvalidEscapedReservedWord, {
            at: this.state.startLoc,
            reservedWord: tokenLabelName(e224)
        });
    }
    raise(e225, t104) {
        const { at: s62  } = t104, i39 = _objectWithoutPropertiesLoose(t104, Ne2);
        const r30 = s62 instanceof Position ? s62 : s62.loc.start;
        const a131 = e225({
            loc: r30,
            details: i39
        });
        if (!this.options.errorRecovery) throw a131;
        this.isLookahead || this.state.errors.push(a131);
        return a131;
    }
    raiseOverwrite(e226, t106) {
        const { at: s63  } = t106, i40 = _objectWithoutPropertiesLoose(t106, ve3);
        const r31 = s63 instanceof Position ? s63 : s63.loc.start;
        const a141 = r31.index;
        const n916 = this.state.errors;
        for(let t105 = n916.length - 1; t105 >= 0; t105--){
            const s64 = n916[t105];
            if (s64.loc.index === a141) return n916[t105] = e226({
                loc: r31,
                details: i40
            });
            if (s64.loc.index < a141) break;
        }
        return this.raise(e226, t106);
    }
    updateContext(e) {}
    unexpected(e227, t107) {
        throw this.raise(a16.UnexpectedToken, {
            expected: t107 ? tokenLabelName(t107) : null,
            at: null != e227 ? e227 : this.state.startLoc
        });
    }
    expectPlugin(e228, t108) {
        if (this.hasPlugin(e228)) return true;
        throw this.raise(a16.MissingPlugin, {
            at: null != t108 ? t108 : this.state.startLoc,
            missingPlugin: [
                e228
            ]
        });
    }
    expectOnePlugin(e229) {
        if (!e229.some((e230)=>this.hasPlugin(e230)
        )) throw this.raise(a16.MissingOneOfPlugins, {
            at: this.state.startLoc,
            missingPlugin: e229
        });
    }
}
class Scope {
    constructor(e231){
        this.var = new Set;
        this.lexical = new Set;
        this.functions = new Set;
        this.flags = e231;
    }
}
class ScopeHandler {
    constructor(e232, t109){
        this.parser = void 0;
        this.scopeStack = [];
        this.inModule = void 0;
        this.undefinedExports = new Map;
        this.parser = e232;
        this.inModule = t109;
    }
    get inFunction() {
        return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
        return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
        return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
        return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
        const e233 = this.currentThisScopeFlags();
        return (e233 & 64) > 0 && 0 === (e233 & 2);
    }
    get inStaticBlock() {
        for(let e234 = this.scopeStack.length - 1;; e234--){
            const { flags: t110  } = this.scopeStack[e234];
            if (t110 & 128) return true;
            if (t110 & (V5 | 64)) return false;
        }
    }
    get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(e235) {
        return new Scope(e235);
    }
    enter(e236) {
        this.scopeStack.push(this.createScope(e236));
    }
    exit() {
        this.scopeStack.pop();
    }
    treatFunctionsAsVarInScope(e237) {
        return !!(e237.flags & (2 | 128) || !this.parser.inModule && e237.flags & 1);
    }
    declareName(e238, t111, s65) {
        let i41 = this.currentScope();
        if (t111 & 8 || t111 & 16) {
            this.checkRedeclarationInScope(i41, e238, t111, s65);
            t111 & 16 ? i41.functions.add(e238) : i41.lexical.add(e238);
            t111 & 8 && this.maybeExportDefined(i41, e238);
        } else if (t111 & 4) for(let r32 = this.scopeStack.length - 1; r32 >= 0; --r32){
            i41 = this.scopeStack[r32];
            this.checkRedeclarationInScope(i41, e238, t111, s65);
            i41.var.add(e238);
            this.maybeExportDefined(i41, e238);
            if (i41.flags & V5) break;
        }
        this.parser.inModule && i41.flags & 1 && this.undefinedExports.delete(e238);
    }
    maybeExportDefined(e239, t112) {
        this.parser.inModule && e239.flags & 1 && this.undefinedExports.delete(t112);
    }
    checkRedeclarationInScope(e240, t113, s66, i42) {
        this.isRedeclaredInScope(e240, t113, s66) && this.parser.raise(a16.VarRedeclaration, {
            at: i42,
            identifierName: t113
        });
    }
    isRedeclaredInScope(e241, t114, s67) {
        return !!(s67 & 1) && (s67 & 8 ? e241.lexical.has(t114) || e241.functions.has(t114) || e241.var.has(t114) : s67 & 16 ? e241.lexical.has(t114) || !this.treatFunctionsAsVarInScope(e241) && e241.var.has(t114) : e241.lexical.has(t114) && !(e241.flags & 8 && e241.lexical.values().next().value === t114) || !this.treatFunctionsAsVarInScope(e241) && e241.functions.has(t114));
    }
    checkLocalExport(e242) {
        const { name: t115  } = e242;
        const s68 = this.scopeStack[0];
        s68.lexical.has(t115) || s68.var.has(t115) || s68.functions.has(t115) || this.undefinedExports.set(t115, e242.loc.start);
    }
    currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
        for(let e243 = this.scopeStack.length - 1;; e243--){
            const { flags: t116  } = this.scopeStack[e243];
            if (t116 & V5) return t116;
        }
    }
    currentThisScopeFlags() {
        for(let e244 = this.scopeStack.length - 1;; e244--){
            const { flags: t117  } = this.scopeStack[e244];
            if (t117 & (V5 | 64) && !(t117 & 4)) return t117;
        }
    }
}
class FlowScope extends Scope {
    constructor(...e245){
        super(...e245);
        this.declareFunctions = new Set;
    }
}
class FlowScopeHandler extends ScopeHandler {
    createScope(e246) {
        return new FlowScope(e246);
    }
    declareName(e247, t118, s69) {
        const i43 = this.currentScope();
        if (t118 & 2048) {
            this.checkRedeclarationInScope(i43, e247, t118, s69);
            this.maybeExportDefined(i43, e247);
            i43.declareFunctions.add(e247);
        } else super.declareName(...arguments);
    }
    isRedeclaredInScope(e248, t119, s70) {
        return !!super.isRedeclaredInScope(...arguments) || !!(s70 & 2048) && !e248.declareFunctions.has(t119) && (e248.lexical.has(t119) || e248.functions.has(t119));
    }
    checkLocalExport(e249) {
        this.scopeStack[0].declareFunctions.has(e249.name) || super.checkLocalExport(e249);
    }
}
class ClassScope {
    constructor(){
        this.privateNames = new Set;
        this.loneAccessors = new Map;
        this.undefinedPrivateNames = new Map;
    }
}
class ClassScopeHandler {
    constructor(e250){
        this.parser = void 0;
        this.stack = [];
        this.undefinedPrivateNames = new Map;
        this.parser = e250;
    }
    current() {
        return this.stack[this.stack.length - 1];
    }
    enter() {
        this.stack.push(new ClassScope);
    }
    exit() {
        const e251 = this.stack.pop();
        const t120 = this.current();
        for (const [s71, i44] of Array.from(e251.undefinedPrivateNames))t120 ? t120.undefinedPrivateNames.has(s71) || t120.undefinedPrivateNames.set(s71, i44) : this.parser.raise(a16.InvalidPrivateFieldResolution, {
            at: i44,
            identifierName: s71
        });
    }
    declarePrivateName(e252, t121, s73) {
        const { privateNames: i45 , loneAccessors: r33 , undefinedPrivateNames: n1127  } = this.current();
        let o611 = i45.has(e252);
        if (t121 & Pe2) {
            const s72 = o611 && r33.get(e252);
            if (s72) {
                const i46 = s72 & 4;
                const a151 = t121 & 4;
                const n1016 = s72 & Pe2;
                const h311 = t121 & Pe2;
                o611 = n1016 === h311 || i46 !== a151;
                o611 || r33.delete(e252);
            } else o611 || r33.set(e252, t121);
        }
        o611 && this.parser.raise(a16.PrivateNameRedeclaration, {
            at: s73,
            identifierName: e252
        });
        i45.add(e252);
        n1127.delete(e252);
    }
    usePrivateName(e253, t122) {
        let s74;
        for (s74 of this.stack)if (s74.privateNames.has(e253)) return;
        s74 ? s74.undefinedPrivateNames.set(e253, t122) : this.parser.raise(a16.InvalidPrivateFieldResolution, {
            at: t122,
            identifierName: e253
        });
    }
}
class ExpressionScope {
    constructor(e254 = 0){
        this.type = void 0;
        this.type = e254;
    }
    canBeArrowParameterDeclaration() {
        return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
        return this.type === 3;
    }
}
class ArrowHeadParsingScope extends ExpressionScope {
    constructor(e255){
        super(e255);
        this.declarationErrors = new Map;
    }
    recordDeclarationError(e256, { at: t123  }) {
        const s75 = t123.index;
        this.declarationErrors.set(s75, [
            e256,
            t123
        ]);
    }
    clearDeclarationError(e257) {
        this.declarationErrors.delete(e257);
    }
    iterateErrors(e258) {
        this.declarationErrors.forEach(e258);
    }
}
class ExpressionScopeHandler {
    constructor(e259){
        this.parser = void 0;
        this.stack = [
            new ExpressionScope
        ];
        this.parser = e259;
    }
    enter(e260) {
        this.stack.push(e260);
    }
    exit() {
        this.stack.pop();
    }
    recordParameterInitializerError(e261, { at: t124  }) {
        const s76 = {
            at: t124.loc.start
        };
        const { stack: i47  } = this;
        let r34 = i47.length - 1;
        let a161 = i47[r34];
        while(!a161.isCertainlyParameterDeclaration()){
            if (!a161.canBeArrowParameterDeclaration()) return;
            a161.recordDeclarationError(e261, s76);
            a161 = i47[--r34];
        }
        this.parser.raise(e261, s76);
    }
    recordParenthesizedIdentifierError({ at: e262  }) {
        const { stack: t125  } = this;
        const s77 = t125[t125.length - 1];
        const i48 = {
            at: e262.loc.start
        };
        if (s77.isCertainlyParameterDeclaration()) this.parser.raise(a16.InvalidParenthesizedAssignment, i48);
        else {
            if (!s77.canBeArrowParameterDeclaration()) return;
            s77.recordDeclarationError(a16.InvalidParenthesizedAssignment, i48);
        }
    }
    recordAsyncArrowParametersError({ at: e263  }) {
        const { stack: t126  } = this;
        let s78 = t126.length - 1;
        let i49 = t126[s78];
        while(i49.canBeArrowParameterDeclaration()){
            i49.type === 2 && i49.recordDeclarationError(a16.AwaitBindingIdentifier, {
                at: e263
            });
            i49 = t126[--s78];
        }
    }
    validateAsPattern() {
        const { stack: e264  } = this;
        const t127 = e264[e264.length - 1];
        t127.canBeArrowParameterDeclaration() && t127.iterateErrors(([t128, s79])=>{
            this.parser.raise(t128, {
                at: s79
            });
            let i50 = e264.length - 2;
            let r35 = e264[i50];
            while(r35.canBeArrowParameterDeclaration()){
                r35.clearDeclarationError(s79.index);
                r35 = e264[--i50];
            }
        });
    }
}
function newParameterDeclarationScope() {
    return new ExpressionScope(3);
}
function newArrowHeadScope() {
    return new ArrowHeadParsingScope(1);
}
function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(2);
}
function newExpressionScope() {
    return new ExpressionScope;
}
const Ke2 = 2, ze2 = 8;
class ProductionParameterHandler {
    constructor(){
        this.stacks = [];
    }
    enter(e265) {
        this.stacks.push(e265);
    }
    exit() {
        this.stacks.pop();
    }
    currentFlags() {
        return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
        return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
        return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
        return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
        return (this.currentFlags() & 8) > 0;
    }
}
function functionFlags(e266, t129) {
    return (e266 ? 2 : 0) | (t129 ? 1 : 0);
}
class UtilParser extends Tokenizer {
    addExtra(e267, t130, s80, i51 = true) {
        if (!e267) return;
        const r36 = e267.extra = e267.extra || {};
        i51 ? r36[t130] = s80 : Object.defineProperty(r36, t130, {
            enumerable: i51,
            value: s80
        });
    }
    isContextual(e268) {
        return this.state.type === e268 && !this.state.containsEsc;
    }
    isUnparsedContextual(e269, t131) {
        const s81 = e269 + t131.length;
        if (this.input.slice(e269, s81) === t131) {
            const e270 = this.input.charCodeAt(s81);
            return !(isIdentifierChar(e270) || 55296 === (64512 & e270));
        }
        return false;
    }
    isLookaheadContextual(e271) {
        const t132 = this.nextTokenStart();
        return this.isUnparsedContextual(t132, e271);
    }
    eatContextual(e272) {
        if (this.isContextual(e272)) {
            this.next();
            return true;
        }
        return false;
    }
    expectContextual(e273, t133) {
        if (!this.eatContextual(e273)) {
            if (null != t133) throw this.raise(t133, {
                at: this.state.startLoc
            });
            throw this.unexpected(null, e273);
        }
    }
    canInsertSemicolon() {
        return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
        return Ee2.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
    }
    hasFollowingLineBreak() {
        Ce2.lastIndex = this.state.end;
        return Ce2.test(this.input);
    }
    isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(e274 = true) {
        (e274 ? this.isLineTerminator() : this.eat(13)) || this.raise(a16.MissingSemicolon, {
            at: this.state.lastTokEndLoc
        });
    }
    expect(e275, t134) {
        this.eat(e275) || this.unexpected(t134, e275);
    }
    tryParse(e276, t135 = this.state.clone()) {
        const s82 = {
            node: null
        };
        try {
            const i52 = e276((e277 = null)=>{
                s82.node = e277;
                throw s82;
            });
            if (this.state.errors.length > t135.errors.length) {
                const e278 = this.state;
                this.state = t135;
                this.state.tokensLength = e278.tokensLength;
                return {
                    node: i52,
                    error: e278.errors[t135.errors.length],
                    thrown: false,
                    aborted: false,
                    failState: e278
                };
            }
            return {
                node: i52,
                error: null,
                thrown: false,
                aborted: false,
                failState: null
            };
        } catch (e279) {
            const i53 = this.state;
            this.state = t135;
            if (e279 instanceof SyntaxError) return {
                node: null,
                error: e279,
                thrown: true,
                aborted: false,
                failState: i53
            };
            if (e279 === s82) return {
                node: s82.node,
                error: null,
                thrown: false,
                aborted: true,
                failState: i53
            };
            throw e279;
        }
    }
    checkExpressionErrors(e280, t136) {
        if (!e280) return false;
        const { shorthandAssignLoc: s83 , doubleProtoLoc: i54 , privateKeyLoc: r37 , optionalParametersLoc: n1214  } = e280;
        const o710 = !!s83 || !!i54 || !!n1214 || !!r37;
        if (!t136) return o710;
        null != s83 && this.raise(a16.InvalidCoverInitializedName, {
            at: s83
        });
        null != i54 && this.raise(a16.DuplicateProto, {
            at: i54
        });
        null != r37 && this.raise(a16.UnexpectedPrivateField, {
            at: r37
        });
        null != n1214 && this.unexpected(n1214);
    }
    isLiteralPropertyName() {
        return tokenIsLiteralPropertyName(this.state.type);
    }
    isPrivateName(e281) {
        return "PrivateName" === e281.type;
    }
    getPrivateNameSV(e282) {
        return e282.id.name;
    }
    hasPropertyAsPrivateName(e283) {
        return ("MemberExpression" === e283.type || "OptionalMemberExpression" === e283.type) && this.isPrivateName(e283.property);
    }
    isOptionalChain(e284) {
        return "OptionalMemberExpression" === e284.type || "OptionalCallExpression" === e284.type;
    }
    isObjectProperty(e285) {
        return "ObjectProperty" === e285.type;
    }
    isObjectMethod(e286) {
        return "ObjectMethod" === e286.type;
    }
    initializeScopes(e287 = "module" === this.options.sourceType) {
        const t137 = this.state.labels;
        this.state.labels = [];
        const s84 = this.exportedIdentifiers;
        this.exportedIdentifiers = new Set;
        const i55 = this.inModule;
        this.inModule = e287;
        const r38 = this.scope;
        const a17 = this.getScopeHandler();
        this.scope = new a17(this, e287);
        const n1312 = this.prodParam;
        this.prodParam = new ProductionParameterHandler;
        const o81 = this.classScope;
        this.classScope = new ClassScopeHandler(this);
        const h42 = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this);
        return ()=>{
            this.state.labels = t137;
            this.exportedIdentifiers = s84;
            this.inModule = i55;
            this.scope = r38;
            this.prodParam = n1312;
            this.classScope = o81;
            this.expressionScope = h42;
        };
    }
    enterInitialScopes() {
        let e288 = 0;
        this.inModule && (e288 |= Ke2);
        this.scope.enter(1);
        this.prodParam.enter(e288);
    }
    checkDestructuringPrivate(e289) {
        const { privateKeyLoc: t138  } = e289;
        null !== t138 && this.expectPlugin("destructuringPrivate", t138);
    }
}
class ExpressionErrors {
    constructor(){
        this.shorthandAssignLoc = null;
        this.doubleProtoLoc = null;
        this.privateKeyLoc = null;
        this.optionalParametersLoc = null;
    }
}
class Node {
    constructor(e290, t139, s85){
        this.type = "";
        this.start = t139;
        this.end = 0;
        this.loc = new SourceLocation(s85);
        null != e290 && e290.options.ranges && (this.range = [
            t139,
            0
        ]);
        null != e290 && e290.filename && (this.loc.filename = e290.filename);
    }
}
const Ve2 = Node.prototype;
Ve2.__clone = function() {
    const e291 = new Node;
    const t140 = Object.keys(this);
    for(let s86 = 0, i56 = t140.length; s86 < i56; s86++){
        const i57 = t140[s86];
        "leadingComments" !== i57 && "trailingComments" !== i57 && "innerComments" !== i57 && (e291[i57] = this[i57]);
    }
    return e291;
};
function clonePlaceholder(e292) {
    return cloneIdentifier(e292);
}
function cloneIdentifier(e293) {
    const { type: t141 , start: s87 , end: i58 , loc: r39 , range: a18 , extra: n1412 , name: o91  } = e293;
    const h52 = Object.create(Ve2);
    h52.type = t141;
    h52.start = s87;
    h52.end = i58;
    h52.loc = r39;
    h52.range = a18;
    h52.extra = n1412;
    h52.name = o91;
    "Placeholder" === t141 && (h52.expectedNode = e293.expectedNode);
    return h52;
}
function cloneStringLiteral(e294) {
    const { type: t142 , start: s88 , end: i59 , loc: r40 , range: a19 , extra: n1512  } = e294;
    if ("Placeholder" === t142) return clonePlaceholder(e294);
    const o101 = Object.create(Ve2);
    o101.type = t142;
    o101.start = s88;
    o101.end = i59;
    o101.loc = r40;
    o101.range = a19;
    void 0 !== e294.raw ? o101.raw = e294.raw : o101.extra = n1512;
    o101.value = e294.value;
    return o101;
}
class NodeUtils extends UtilParser {
    startNode() {
        return new Node(this, this.state.start, this.state.startLoc);
    }
    startNodeAt(e295, t143) {
        return new Node(this, e295, t143);
    }
    startNodeAtNode(e296) {
        return this.startNodeAt(e296.start, e296.loc.start);
    }
    finishNode(e297, t144) {
        return this.finishNodeAt(e297, t144, this.state.lastTokEndLoc);
    }
    finishNodeAt(e298, t145, s89) {
        e298.type = t145;
        e298.end = s89.index;
        e298.loc.end = s89;
        this.options.ranges && (e298.range[1] = s89.index);
        this.options.attachComment && this.processComment(e298);
        return e298;
    }
    resetStartLocation(e299, t146, s90) {
        e299.start = t146;
        e299.loc.start = s90;
        this.options.ranges && (e299.range[0] = t146);
    }
    resetEndLocation(e300, t147 = this.state.lastTokEndLoc) {
        e300.end = t147.index;
        e300.loc.end = t147;
        this.options.ranges && (e300.range[1] = t147.index);
    }
    resetStartLocationFromNode(e301, t148) {
        this.resetStartLocation(e301, t148.start, t148.loc.start);
    }
}
const qe2 = new Set([
    "_",
    "any",
    "bool",
    "boolean",
    "empty",
    "extends",
    "false",
    "interface",
    "mixed",
    "null",
    "number",
    "static",
    "string",
    "true",
    "typeof",
    "void"
]);
const $e2 = ParseErrorEnum`flow`((e302)=>({
        AmbiguousConditionalArrow: e302("Ambiguous expression: wrap the arrow functions in parentheses to disambiguate."),
        AmbiguousDeclareModuleKind: e302("Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module."),
        AssignReservedType: e302(({ reservedType: e303  })=>`Cannot overwrite reserved type ${e303}.`
        ),
        DeclareClassElement: e302("The `declare` modifier can only appear on class fields."),
        DeclareClassFieldInitializer: e302("Initializers are not allowed in fields with the `declare` modifier."),
        DuplicateDeclareModuleExports: e302("Duplicate `declare module.exports` statement."),
        EnumBooleanMemberNotInitialized: e302(({ memberName: e304 , enumName: t149  })=>`Boolean enum members need to be initialized. Use either \`${e304} = true,\` or \`${e304} = false,\` in enum \`${t149}\`.`
        ),
        EnumDuplicateMemberName: e302(({ memberName: e305 , enumName: t150  })=>`Enum member names need to be unique, but the name \`${e305}\` has already been used before in enum \`${t150}\`.`
        ),
        EnumInconsistentMemberValues: e302(({ enumName: e306  })=>`Enum \`${e306}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`
        ),
        EnumInvalidExplicitType: e302(({ invalidEnumType: e307 , enumName: t151  })=>`Enum type \`${e307}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t151}\`.`
        ),
        EnumInvalidExplicitTypeUnknownSupplied: e302(({ enumName: e308  })=>`Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${e308}\`.`
        ),
        EnumInvalidMemberInitializerPrimaryType: e302(({ enumName: e309 , memberName: t152 , explicitType: s91  })=>`Enum \`${e309}\` has type \`${s91}\`, so the initializer of \`${t152}\` needs to be a ${s91} literal.`
        ),
        EnumInvalidMemberInitializerSymbolType: e302(({ enumName: e310 , memberName: t153  })=>`Symbol enum members cannot be initialized. Use \`${t153},\` in enum \`${e310}\`.`
        ),
        EnumInvalidMemberInitializerUnknownType: e302(({ enumName: e311 , memberName: t154  })=>`The enum member initializer for \`${t154}\` needs to be a literal (either a boolean, number, or string) in enum \`${e311}\`.`
        ),
        EnumInvalidMemberName: e302(({ enumName: e312 , memberName: t155 , suggestion: s92  })=>`Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t155}\`, consider using \`${s92}\`, in enum \`${e312}\`.`
        ),
        EnumNumberMemberNotInitialized: e302(({ enumName: e313 , memberName: t156  })=>`Number enum members need to be initialized, e.g. \`${t156} = 1\` in enum \`${e313}\`.`
        ),
        EnumStringMemberInconsistentlyInitailized: e302(({ enumName: e314  })=>`String enum members need to consistently either all use initializers, or use no initializers, in enum \`${e314}\`.`
        ),
        GetterMayNotHaveThisParam: e302("A getter cannot have a `this` parameter."),
        ImportTypeShorthandOnlyInPureImport: e302("The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements."),
        InexactInsideExact: e302("Explicit inexact syntax cannot appear inside an explicit exact object type."),
        InexactInsideNonObject: e302("Explicit inexact syntax cannot appear in class or interface definitions."),
        InexactVariance: e302("Explicit inexact syntax cannot have variance."),
        InvalidNonTypeImportInDeclareModule: e302("Imports within a `declare module` body must always be `import type` or `import typeof`."),
        MissingTypeParamDefault: e302("Type parameter declaration needs a default, since a preceding type parameter declaration has a default."),
        NestedDeclareModule: e302("`declare module` cannot be used inside another `declare module`."),
        NestedFlowComment: e302("Cannot have a flow comment inside another flow comment."),
        PatternIsOptional: e302("A binding pattern parameter cannot be optional in an implementation signature.", {
            reasonCode: "OptionalBindingPattern"
        }),
        SetterMayNotHaveThisParam: e302("A setter cannot have a `this` parameter."),
        SpreadVariance: e302("Spread properties cannot have variance."),
        ThisParamAnnotationRequired: e302("A type annotation is required for the `this` parameter."),
        ThisParamBannedInConstructor: e302("Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions."),
        ThisParamMayNotBeOptional: e302("The `this` parameter cannot be optional."),
        ThisParamMustBeFirst: e302("The `this` parameter must be the first function parameter."),
        ThisParamNoDefault: e302("The `this` parameter may not have a default value."),
        TypeBeforeInitializer: e302("Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`."),
        TypeCastInPattern: e302("The type cast expression is expected to be wrapped with parenthesis."),
        UnexpectedExplicitInexactInObject: e302("Explicit inexact syntax must appear at the end of an inexact object."),
        UnexpectedReservedType: e302(({ reservedType: e315  })=>`Unexpected reserved type ${e315}.`
        ),
        UnexpectedReservedUnderscore: e302("`_` is only allowed as a type argument to call or new."),
        UnexpectedSpaceBetweenModuloChecks: e302("Spaces between `%` and `checks` are not allowed here."),
        UnexpectedSpreadType: e302("Spread operator cannot appear in class or interface definitions."),
        UnexpectedSubtractionOperand: e302('Unexpected token, expected "number" or "bigint".'),
        UnexpectedTokenAfterTypeParameter: e302("Expected an arrow function after this type parameter declaration."),
        UnexpectedTypeParameterBeforeAsyncArrowFunction: e302("Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`."),
        UnsupportedDeclareExportKind: e302(({ unsupportedExportKind: e316 , suggestion: t157  })=>`\`declare export ${e316}\` is not supported. Use \`${t157}\` instead.`
        ),
        UnsupportedStatementInDeclareModule: e302("Only declares and type imports are allowed inside declare module."),
        UnterminatedFlowComment: e302("Unterminated flow-comment.")
    })
);
function isEsModuleType(e317) {
    return "DeclareExportAllDeclaration" === e317.type || "DeclareExportDeclaration" === e317.type && (!e317.declaration || "TypeAlias" !== e317.declaration.type && "InterfaceDeclaration" !== e317.declaration.type);
}
function hasTypeImportKind(e318) {
    return "type" === e318.importKind || "typeof" === e318.importKind;
}
function isMaybeDefaultImport(e319) {
    return tokenIsKeywordOrIdentifier(e319) && 97 !== e319;
}
const We2 = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
};
function partition(e320, t158) {
    const s93 = [];
    const i60 = [];
    for(let r41 = 0; r41 < e320.length; r41++)(t158(e320[r41], r41, e320) ? s93 : i60).push(e320[r41]);
    return [
        s93,
        i60
    ];
}
const Je2 = /\*?\s*@((?:no)?flow)\b/;
var flow = (e321)=>class extends e321 {
        constructor(...e322){
            super(...e322);
            this.flowPragma = void 0;
        }
        getScopeHandler() {
            return FlowScopeHandler;
        }
        shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
        }
        shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
        }
        finishToken(e323, t159) {
            129 !== e323 && 13 !== e323 && 28 !== e323 && void 0 === this.flowPragma && (this.flowPragma = null);
            return super.finishToken(e323, t159);
        }
        addComment(e324) {
            if (void 0 === this.flowPragma) {
                const t160 = Je2.exec(e324.value);
                if (t160) if ("flow" === t160[1]) this.flowPragma = "flow";
                else {
                    if ("noflow" !== t160[1]) throw new Error("Unexpected flow pragma");
                    this.flowPragma = "noflow";
                }
                else ;
            }
            return super.addComment(e324);
        }
        flowParseTypeInitialiser(e325) {
            const t161 = this.state.inType;
            this.state.inType = true;
            this.expect(e325 || 14);
            const s94 = this.flowParseType();
            this.state.inType = t161;
            return s94;
        }
        flowParsePredicate() {
            const e326 = this.startNode();
            const t162 = this.state.startLoc;
            this.next();
            this.expectContextual(107);
            this.state.lastTokStart > t162.index + 1 && this.raise($e2.UnexpectedSpaceBetweenModuloChecks, {
                at: t162
            });
            if (this.eat(10)) {
                e326.value = this.parseExpression();
                this.expect(11);
                return this.finishNode(e326, "DeclaredPredicate");
            }
            return this.finishNode(e326, "InferredPredicate");
        }
        flowParseTypeAndPredicateInitialiser() {
            const e327 = this.state.inType;
            this.state.inType = true;
            this.expect(14);
            let t163 = null;
            let s95 = null;
            if (this.match(54)) {
                this.state.inType = e327;
                s95 = this.flowParsePredicate();
            } else {
                t163 = this.flowParseType();
                this.state.inType = e327;
                this.match(54) && (s95 = this.flowParsePredicate());
            }
            return [
                t163,
                s95
            ];
        }
        flowParseDeclareClass(e328) {
            this.next();
            this.flowParseInterfaceish(e328, true);
            return this.finishNode(e328, "DeclareClass");
        }
        flowParseDeclareFunction(e329) {
            this.next();
            const t164 = e329.id = this.parseIdentifier();
            const s96 = this.startNode();
            const i61 = this.startNode();
            this.match(47) ? s96.typeParameters = this.flowParseTypeParameterDeclaration() : s96.typeParameters = null;
            this.expect(10);
            const r42 = this.flowParseFunctionTypeParams();
            s96.params = r42.params;
            s96.rest = r42.rest;
            s96.this = r42._this;
            this.expect(11);
            [s96.returnType, e329.predicate] = this.flowParseTypeAndPredicateInitialiser();
            i61.typeAnnotation = this.finishNode(s96, "FunctionTypeAnnotation");
            t164.typeAnnotation = this.finishNode(i61, "TypeAnnotation");
            this.resetEndLocation(t164);
            this.semicolon();
            this.scope.declareName(e329.id.name, 2048, e329.id.loc.start);
            return this.finishNode(e329, "DeclareFunction");
        }
        flowParseDeclare(e330, t165) {
            if (this.match(80)) return this.flowParseDeclareClass(e330);
            if (this.match(68)) return this.flowParseDeclareFunction(e330);
            if (this.match(74)) return this.flowParseDeclareVariable(e330);
            if (this.eatContextual(123)) {
                if (this.match(16)) return this.flowParseDeclareModuleExports(e330);
                t165 && this.raise($e2.NestedDeclareModule, {
                    at: this.state.lastTokStartLoc
                });
                return this.flowParseDeclareModule(e330);
            }
            if (this.isContextual(126)) return this.flowParseDeclareTypeAlias(e330);
            if (this.isContextual(127)) return this.flowParseDeclareOpaqueType(e330);
            if (this.isContextual(125)) return this.flowParseDeclareInterface(e330);
            if (this.match(82)) return this.flowParseDeclareExportDeclaration(e330, t165);
            throw this.unexpected();
        }
        flowParseDeclareVariable(e331) {
            this.next();
            e331.id = this.flowParseTypeAnnotatableIdentifier(true);
            this.scope.declareName(e331.id.name, re4, e331.id.loc.start);
            this.semicolon();
            return this.finishNode(e331, "DeclareVariable");
        }
        flowParseDeclareModule(e332) {
            this.scope.enter(0);
            this.match(129) ? e332.id = this.parseExprAtom() : e332.id = this.parseIdentifier();
            const t166 = e332.body = this.startNode();
            const s97 = t166.body = [];
            this.expect(5);
            while(!this.match(8)){
                let e333 = this.startNode();
                if (this.match(83)) {
                    this.next();
                    this.isContextual(126) || this.match(87) || this.raise($e2.InvalidNonTypeImportInDeclareModule, {
                        at: this.state.lastTokStartLoc
                    });
                    this.parseImport(e333);
                } else {
                    this.expectContextual(121, $e2.UnsupportedStatementInDeclareModule);
                    e333 = this.flowParseDeclare(e333, true);
                }
                s97.push(e333);
            }
            this.scope.exit();
            this.expect(8);
            this.finishNode(t166, "BlockStatement");
            let i62 = null;
            let r43 = false;
            s97.forEach((e334)=>{
                if (isEsModuleType(e334)) {
                    "CommonJS" === i62 && this.raise($e2.AmbiguousDeclareModuleKind, {
                        at: e334
                    });
                    i62 = "ES";
                } else if ("DeclareModuleExports" === e334.type) {
                    r43 && this.raise($e2.DuplicateDeclareModuleExports, {
                        at: e334
                    });
                    "ES" === i62 && this.raise($e2.AmbiguousDeclareModuleKind, {
                        at: e334
                    });
                    i62 = "CommonJS";
                    r43 = true;
                }
            });
            e332.kind = i62 || "CommonJS";
            return this.finishNode(e332, "DeclareModule");
        }
        flowParseDeclareExportDeclaration(e335, t167) {
            this.expect(82);
            if (this.eat(65)) {
                if (this.match(68) || this.match(80)) e335.declaration = this.flowParseDeclare(this.startNode());
                else {
                    e335.declaration = this.flowParseType();
                    this.semicolon();
                }
                e335.default = true;
                return this.finishNode(e335, "DeclareExportDeclaration");
            }
            if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !t167) {
                const e336 = this.state.value;
                throw this.raise($e2.UnsupportedDeclareExportKind, {
                    at: this.state.startLoc,
                    unsupportedExportKind: e336,
                    suggestion: We2[e336]
                });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {
                e335.declaration = this.flowParseDeclare(this.startNode());
                e335.default = false;
                return this.finishNode(e335, "DeclareExportDeclaration");
            }
            if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {
                e335 = this.parseExport(e335);
                if ("ExportNamedDeclaration" === e335.type) {
                    e335.type = "ExportDeclaration";
                    e335.default = false;
                    delete e335.exportKind;
                }
                e335.type = "Declare" + e335.type;
                return e335;
            }
            throw this.unexpected();
        }
        flowParseDeclareModuleExports(e337) {
            this.next();
            this.expectContextual(108);
            e337.typeAnnotation = this.flowParseTypeAnnotation();
            this.semicolon();
            return this.finishNode(e337, "DeclareModuleExports");
        }
        flowParseDeclareTypeAlias(e338) {
            this.next();
            this.flowParseTypeAlias(e338);
            e338.type = "DeclareTypeAlias";
            return e338;
        }
        flowParseDeclareOpaqueType(e339) {
            this.next();
            this.flowParseOpaqueType(e339, true);
            e339.type = "DeclareOpaqueType";
            return e339;
        }
        flowParseDeclareInterface(e340) {
            this.next();
            this.flowParseInterfaceish(e340);
            return this.finishNode(e340, "DeclareInterface");
        }
        flowParseInterfaceish(e341, t168 = false) {
            e341.id = this.flowParseRestrictedIdentifier(!t168, true);
            this.scope.declareName(e341.id.name, t168 ? ae4 : ie4, e341.id.loc.start);
            this.match(47) ? e341.typeParameters = this.flowParseTypeParameterDeclaration() : e341.typeParameters = null;
            e341.extends = [];
            e341.implements = [];
            e341.mixins = [];
            if (this.eat(81)) do {
                e341.extends.push(this.flowParseInterfaceExtends());
            }while (!t168 && this.eat(12))
            if (this.isContextual(114)) {
                this.next();
                do {
                    e341.mixins.push(this.flowParseInterfaceExtends());
                }while (this.eat(12))
            }
            if (this.isContextual(110)) {
                this.next();
                do {
                    e341.implements.push(this.flowParseInterfaceExtends());
                }while (this.eat(12))
            }
            e341.body = this.flowParseObjectType({
                allowStatic: t168,
                allowExact: false,
                allowSpread: false,
                allowProto: t168,
                allowInexact: false
            });
        }
        flowParseInterfaceExtends() {
            const e342 = this.startNode();
            e342.id = this.flowParseQualifiedTypeIdentifier();
            this.match(47) ? e342.typeParameters = this.flowParseTypeParameterInstantiation() : e342.typeParameters = null;
            return this.finishNode(e342, "InterfaceExtends");
        }
        flowParseInterface(e343) {
            this.flowParseInterfaceish(e343);
            return this.finishNode(e343, "InterfaceDeclaration");
        }
        checkNotUnderscore(e344) {
            "_" === e344 && this.raise($e2.UnexpectedReservedUnderscore, {
                at: this.state.startLoc
            });
        }
        checkReservedType(e345, t169, s98) {
            qe2.has(e345) && this.raise(s98 ? $e2.AssignReservedType : $e2.UnexpectedReservedType, {
                at: t169,
                reservedType: e345
            });
        }
        flowParseRestrictedIdentifier(e346, t170) {
            this.checkReservedType(this.state.value, this.state.startLoc, t170);
            return this.parseIdentifier(e346);
        }
        flowParseTypeAlias(e347) {
            e347.id = this.flowParseRestrictedIdentifier(false, true);
            this.scope.declareName(e347.id.name, ie4, e347.id.loc.start);
            this.match(47) ? e347.typeParameters = this.flowParseTypeParameterDeclaration() : e347.typeParameters = null;
            e347.right = this.flowParseTypeInitialiser(29);
            this.semicolon();
            return this.finishNode(e347, "TypeAlias");
        }
        flowParseOpaqueType(e348, t171) {
            this.expectContextual(126);
            e348.id = this.flowParseRestrictedIdentifier(true, true);
            this.scope.declareName(e348.id.name, ie4, e348.id.loc.start);
            this.match(47) ? e348.typeParameters = this.flowParseTypeParameterDeclaration() : e348.typeParameters = null;
            e348.supertype = null;
            this.match(14) && (e348.supertype = this.flowParseTypeInitialiser(14));
            e348.impltype = null;
            t171 || (e348.impltype = this.flowParseTypeInitialiser(29));
            this.semicolon();
            return this.finishNode(e348, "OpaqueType");
        }
        flowParseTypeParameter(e349 = false) {
            const t172 = this.state.startLoc;
            const s99 = this.startNode();
            const i63 = this.flowParseVariance();
            const r44 = this.flowParseTypeAnnotatableIdentifier();
            s99.name = r44.name;
            s99.variance = i63;
            s99.bound = r44.typeAnnotation;
            if (this.match(29)) {
                this.eat(29);
                s99.default = this.flowParseType();
            } else e349 && this.raise($e2.MissingTypeParamDefault, {
                at: t172
            });
            return this.finishNode(s99, "TypeParameter");
        }
        flowParseTypeParameterDeclaration() {
            const e351 = this.state.inType;
            const t173 = this.startNode();
            t173.params = [];
            this.state.inType = true;
            this.match(47) || this.match(138) ? this.next() : this.unexpected();
            let s100 = false;
            do {
                const e350 = this.flowParseTypeParameter(s100);
                t173.params.push(e350);
                e350.default && (s100 = true);
                this.match(48) || this.expect(12);
            }while (!this.match(48))
            this.expect(48);
            this.state.inType = e351;
            return this.finishNode(t173, "TypeParameterDeclaration");
        }
        flowParseTypeParameterInstantiation() {
            const e352 = this.startNode();
            const t174 = this.state.inType;
            e352.params = [];
            this.state.inType = true;
            this.expect(47);
            const s101 = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = false;
            while(!this.match(48)){
                e352.params.push(this.flowParseType());
                this.match(48) || this.expect(12);
            }
            this.state.noAnonFunctionType = s101;
            this.expect(48);
            this.state.inType = t174;
            return this.finishNode(e352, "TypeParameterInstantiation");
        }
        flowParseTypeParameterInstantiationCallOrNew() {
            const e353 = this.startNode();
            const t175 = this.state.inType;
            e353.params = [];
            this.state.inType = true;
            this.expect(47);
            while(!this.match(48)){
                e353.params.push(this.flowParseTypeOrImplicitInstantiation());
                this.match(48) || this.expect(12);
            }
            this.expect(48);
            this.state.inType = t175;
            return this.finishNode(e353, "TypeParameterInstantiation");
        }
        flowParseInterfaceType() {
            const e354 = this.startNode();
            this.expectContextual(125);
            e354.extends = [];
            if (this.eat(81)) do {
                e354.extends.push(this.flowParseInterfaceExtends());
            }while (this.eat(12))
            e354.body = this.flowParseObjectType({
                allowStatic: false,
                allowExact: false,
                allowSpread: false,
                allowProto: false,
                allowInexact: false
            });
            return this.finishNode(e354, "InterfaceTypeAnnotation");
        }
        flowParseObjectPropertyKey() {
            return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);
        }
        flowParseObjectTypeIndexer(e355, t176, s102) {
            e355.static = t176;
            if (14 === this.lookahead().type) {
                e355.id = this.flowParseObjectPropertyKey();
                e355.key = this.flowParseTypeInitialiser();
            } else {
                e355.id = null;
                e355.key = this.flowParseType();
            }
            this.expect(3);
            e355.value = this.flowParseTypeInitialiser();
            e355.variance = s102;
            return this.finishNode(e355, "ObjectTypeIndexer");
        }
        flowParseObjectTypeInternalSlot(e356, t177) {
            e356.static = t177;
            e356.id = this.flowParseObjectPropertyKey();
            this.expect(3);
            this.expect(3);
            if (this.match(47) || this.match(10)) {
                e356.method = true;
                e356.optional = false;
                e356.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e356.start, e356.loc.start));
            } else {
                e356.method = false;
                this.eat(17) && (e356.optional = true);
                e356.value = this.flowParseTypeInitialiser();
            }
            return this.finishNode(e356, "ObjectTypeInternalSlot");
        }
        flowParseObjectTypeMethodish(e357) {
            e357.params = [];
            e357.rest = null;
            e357.typeParameters = null;
            e357.this = null;
            this.match(47) && (e357.typeParameters = this.flowParseTypeParameterDeclaration());
            this.expect(10);
            if (this.match(78)) {
                e357.this = this.flowParseFunctionTypeParam(true);
                e357.this.name = null;
                this.match(11) || this.expect(12);
            }
            while(!this.match(11) && !this.match(21)){
                e357.params.push(this.flowParseFunctionTypeParam(false));
                this.match(11) || this.expect(12);
            }
            this.eat(21) && (e357.rest = this.flowParseFunctionTypeParam(false));
            this.expect(11);
            e357.returnType = this.flowParseTypeInitialiser();
            return this.finishNode(e357, "FunctionTypeAnnotation");
        }
        flowParseObjectTypeCallProperty(e358, t178) {
            const s103 = this.startNode();
            e358.static = t178;
            e358.value = this.flowParseObjectTypeMethodish(s103);
            return this.finishNode(e358, "ObjectTypeCallProperty");
        }
        flowParseObjectType({ allowStatic: e359 , allowExact: t179 , allowSpread: s104 , allowProto: i64 , allowInexact: r45  }) {
            const a21 = this.state.inType;
            this.state.inType = true;
            const n1611 = this.startNode();
            n1611.callProperties = [];
            n1611.properties = [];
            n1611.indexers = [];
            n1611.internalSlots = [];
            let o1110;
            let h62;
            let c313 = false;
            if (t179 && this.match(6)) {
                this.expect(6);
                o1110 = 9;
                h62 = true;
            } else {
                this.expect(5);
                o1110 = 8;
                h62 = false;
            }
            n1611.exact = h62;
            while(!this.match(o1110)){
                let t181 = false;
                let a20 = null;
                let o129 = null;
                const p312 = this.startNode();
                if (i64 && this.isContextual(115)) {
                    const t180 = this.lookahead();
                    if (14 !== t180.type && 17 !== t180.type) {
                        this.next();
                        a20 = this.state.startLoc;
                        e359 = false;
                    }
                }
                if (e359 && this.isContextual(104)) {
                    const e360 = this.lookahead();
                    if (14 !== e360.type && 17 !== e360.type) {
                        this.next();
                        t181 = true;
                    }
                }
                const l216 = this.flowParseVariance();
                if (this.eat(0)) {
                    null != a20 && this.unexpected(a20);
                    if (this.eat(0)) {
                        l216 && this.unexpected(l216.loc.start);
                        n1611.internalSlots.push(this.flowParseObjectTypeInternalSlot(p312, t181));
                    } else n1611.indexers.push(this.flowParseObjectTypeIndexer(p312, t181, l216));
                } else if (this.match(10) || this.match(47)) {
                    null != a20 && this.unexpected(a20);
                    l216 && this.unexpected(l216.loc.start);
                    n1611.callProperties.push(this.flowParseObjectTypeCallProperty(p312, t181));
                } else {
                    let e361 = "init";
                    if (this.isContextual(98) || this.isContextual(103)) {
                        const t182 = this.lookahead();
                        if (tokenIsLiteralPropertyName(t182.type)) {
                            e361 = this.state.value;
                            this.next();
                        }
                    }
                    const i65 = this.flowParseObjectTypeProperty(p312, t181, a20, l216, e361, s104, null != r45 ? r45 : !h62);
                    if (null === i65) {
                        c313 = true;
                        o129 = this.state.lastTokStartLoc;
                    } else n1611.properties.push(i65);
                }
                this.flowObjectTypeSemicolon();
                !o129 || this.match(8) || this.match(9) || this.raise($e2.UnexpectedExplicitInexactInObject, {
                    at: o129
                });
            }
            this.expect(o1110);
            s104 && (n1611.inexact = c313);
            const p47 = this.finishNode(n1611, "ObjectTypeAnnotation");
            this.state.inType = a21;
            return p47;
        }
        flowParseObjectTypeProperty(e362, t184, s105, i66, r46, a22, n1711) {
            if (this.eat(21)) {
                const t183 = this.match(12) || this.match(13) || this.match(8) || this.match(9);
                if (t183) {
                    a22 ? n1711 || this.raise($e2.InexactInsideExact, {
                        at: this.state.lastTokStartLoc
                    }) : this.raise($e2.InexactInsideNonObject, {
                        at: this.state.lastTokStartLoc
                    });
                    i66 && this.raise($e2.InexactVariance, {
                        at: i66
                    });
                    return null;
                }
                a22 || this.raise($e2.UnexpectedSpreadType, {
                    at: this.state.lastTokStartLoc
                });
                null != s105 && this.unexpected(s105);
                i66 && this.raise($e2.SpreadVariance, {
                    at: i66
                });
                e362.argument = this.flowParseType();
                return this.finishNode(e362, "ObjectTypeSpreadProperty");
            }
            {
                e362.key = this.flowParseObjectPropertyKey();
                e362.static = t184;
                e362.proto = null != s105;
                e362.kind = r46;
                let n1811 = false;
                if (this.match(47) || this.match(10)) {
                    e362.method = true;
                    null != s105 && this.unexpected(s105);
                    i66 && this.unexpected(i66.loc.start);
                    e362.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e362.start, e362.loc.start));
                    "get" !== r46 && "set" !== r46 || this.flowCheckGetterSetterParams(e362);
                    !a22 && "constructor" === e362.key.name && e362.value.this && this.raise($e2.ThisParamBannedInConstructor, {
                        at: e362.value.this
                    });
                } else {
                    "init" !== r46 && this.unexpected();
                    e362.method = false;
                    this.eat(17) && (n1811 = true);
                    e362.value = this.flowParseTypeInitialiser();
                    e362.variance = i66;
                }
                e362.optional = n1811;
                return this.finishNode(e362, "ObjectTypeProperty");
            }
        }
        flowCheckGetterSetterParams(e363) {
            const t185 = "get" === e363.kind ? 0 : 1;
            const s106 = e363.value.params.length + (e363.value.rest ? 1 : 0);
            e363.value.this && this.raise("get" === e363.kind ? $e2.GetterMayNotHaveThisParam : $e2.SetterMayNotHaveThisParam, {
                at: e363.value.this
            });
            s106 !== t185 && this.raise("get" === e363.kind ? a16.BadGetterArity : a16.BadSetterArity, {
                at: e363
            });
            "set" === e363.kind && e363.value.rest && this.raise(a16.BadSetterRestParameter, {
                at: e363
            });
        }
        flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
        }
        flowParseQualifiedTypeIdentifier(e364, t186, s107) {
            e364 = e364 || this.state.start;
            t186 = t186 || this.state.startLoc;
            let i67 = s107 || this.flowParseRestrictedIdentifier(true);
            while(this.eat(16)){
                const s108 = this.startNodeAt(e364, t186);
                s108.qualification = i67;
                s108.id = this.flowParseRestrictedIdentifier(true);
                i67 = this.finishNode(s108, "QualifiedTypeIdentifier");
            }
            return i67;
        }
        flowParseGenericType(e365, t187, s109) {
            const i68 = this.startNodeAt(e365, t187);
            i68.typeParameters = null;
            i68.id = this.flowParseQualifiedTypeIdentifier(e365, t187, s109);
            this.match(47) && (i68.typeParameters = this.flowParseTypeParameterInstantiation());
            return this.finishNode(i68, "GenericTypeAnnotation");
        }
        flowParseTypeofType() {
            const e366 = this.startNode();
            this.expect(87);
            e366.argument = this.flowParsePrimaryType();
            return this.finishNode(e366, "TypeofTypeAnnotation");
        }
        flowParseTupleType() {
            const e367 = this.startNode();
            e367.types = [];
            this.expect(0);
            while(this.state.pos < this.length && !this.match(3)){
                e367.types.push(this.flowParseType());
                if (this.match(3)) break;
                this.expect(12);
            }
            this.expect(3);
            return this.finishNode(e367, "TupleTypeAnnotation");
        }
        flowParseFunctionTypeParam(e368) {
            let t188 = null;
            let s110 = false;
            let i69 = null;
            const r47 = this.startNode();
            const a23 = this.lookahead();
            const n1910 = 78 === this.state.type;
            if (14 === a23.type || 17 === a23.type) {
                n1910 && !e368 && this.raise($e2.ThisParamMustBeFirst, {
                    at: r47
                });
                t188 = this.parseIdentifier(n1910);
                if (this.eat(17)) {
                    s110 = true;
                    n1910 && this.raise($e2.ThisParamMayNotBeOptional, {
                        at: r47
                    });
                }
                i69 = this.flowParseTypeInitialiser();
            } else i69 = this.flowParseType();
            r47.name = t188;
            r47.optional = s110;
            r47.typeAnnotation = i69;
            return this.finishNode(r47, "FunctionTypeParam");
        }
        reinterpretTypeAsFunctionTypeParam(e369) {
            const t189 = this.startNodeAt(e369.start, e369.loc.start);
            t189.name = null;
            t189.optional = false;
            t189.typeAnnotation = e369;
            return this.finishNode(t189, "FunctionTypeParam");
        }
        flowParseFunctionTypeParams(e370 = []) {
            let t190 = null;
            let s111 = null;
            if (this.match(78)) {
                s111 = this.flowParseFunctionTypeParam(true);
                s111.name = null;
                this.match(11) || this.expect(12);
            }
            while(!this.match(11) && !this.match(21)){
                e370.push(this.flowParseFunctionTypeParam(false));
                this.match(11) || this.expect(12);
            }
            this.eat(21) && (t190 = this.flowParseFunctionTypeParam(false));
            return {
                params: e370,
                rest: t190,
                _this: s111
            };
        }
        flowIdentToTypeAnnotation(e371, t191, s112, i70) {
            switch(i70.name){
                case "any":
                    return this.finishNode(s112, "AnyTypeAnnotation");
                case "bool":
                case "boolean":
                    return this.finishNode(s112, "BooleanTypeAnnotation");
                case "mixed":
                    return this.finishNode(s112, "MixedTypeAnnotation");
                case "empty":
                    return this.finishNode(s112, "EmptyTypeAnnotation");
                case "number":
                    return this.finishNode(s112, "NumberTypeAnnotation");
                case "string":
                    return this.finishNode(s112, "StringTypeAnnotation");
                case "symbol":
                    return this.finishNode(s112, "SymbolTypeAnnotation");
                default:
                    this.checkNotUnderscore(i70.name);
                    return this.flowParseGenericType(e371, t191, i70);
            }
        }
        flowParsePrimaryType() {
            const e374 = this.state.start;
            const t192 = this.state.startLoc;
            const s113 = this.startNode();
            let i71;
            let r48;
            let a24 = false;
            const n2010 = this.state.noAnonFunctionType;
            switch(this.state.type){
                case 5:
                    return this.flowParseObjectType({
                        allowStatic: false,
                        allowExact: false,
                        allowSpread: true,
                        allowProto: false,
                        allowInexact: true
                    });
                case 6:
                    return this.flowParseObjectType({
                        allowStatic: false,
                        allowExact: true,
                        allowSpread: true,
                        allowProto: false,
                        allowInexact: false
                    });
                case 0:
                    this.state.noAnonFunctionType = false;
                    r48 = this.flowParseTupleType();
                    this.state.noAnonFunctionType = n2010;
                    return r48;
                case 47:
                    s113.typeParameters = this.flowParseTypeParameterDeclaration();
                    this.expect(10);
                    i71 = this.flowParseFunctionTypeParams();
                    s113.params = i71.params;
                    s113.rest = i71.rest;
                    s113.this = i71._this;
                    this.expect(11);
                    this.expect(19);
                    s113.returnType = this.flowParseType();
                    return this.finishNode(s113, "FunctionTypeAnnotation");
                case 10:
                    this.next();
                    if (!this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                        const e372 = this.lookahead().type;
                        a24 = 17 !== e372 && 14 !== e372;
                    } else a24 = true;
                    if (a24) {
                        this.state.noAnonFunctionType = false;
                        r48 = this.flowParseType();
                        this.state.noAnonFunctionType = n2010;
                        if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type)) {
                            this.expect(11);
                            return r48;
                        }
                        this.eat(12);
                    }
                    i71 = r48 ? this.flowParseFunctionTypeParams([
                        this.reinterpretTypeAsFunctionTypeParam(r48)
                    ]) : this.flowParseFunctionTypeParams();
                    s113.params = i71.params;
                    s113.rest = i71.rest;
                    s113.this = i71._this;
                    this.expect(11);
                    this.expect(19);
                    s113.returnType = this.flowParseType();
                    s113.typeParameters = null;
                    return this.finishNode(s113, "FunctionTypeAnnotation");
                case 129:
                    return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
                case 85:
                case 86:
                    s113.value = this.match(85);
                    this.next();
                    return this.finishNode(s113, "BooleanLiteralTypeAnnotation");
                case 53:
                    if ("-" === this.state.value) {
                        this.next();
                        if (this.match(130)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", s113);
                        if (this.match(131)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", s113);
                        throw this.raise($e2.UnexpectedSubtractionOperand, {
                            at: this.state.startLoc
                        });
                    }
                    throw this.unexpected();
                case 130:
                    return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
                case 131:
                    return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
                case 88:
                    this.next();
                    return this.finishNode(s113, "VoidTypeAnnotation");
                case 84:
                    this.next();
                    return this.finishNode(s113, "NullLiteralTypeAnnotation");
                case 78:
                    this.next();
                    return this.finishNode(s113, "ThisTypeAnnotation");
                case 55:
                    this.next();
                    return this.finishNode(s113, "ExistsTypeAnnotation");
                case 87:
                    return this.flowParseTypeofType();
                default:
                    if (tokenIsKeyword(this.state.type)) {
                        const e373 = tokenLabelName(this.state.type);
                        this.next();
                        return super.createIdentifier(s113, e373);
                    }
                    if (tokenIsIdentifier(this.state.type)) return this.isContextual(125) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(e374, t192, s113, this.parseIdentifier());
            }
            throw this.unexpected();
        }
        flowParsePostfixType() {
            const e375 = this.state.start;
            const t193 = this.state.startLoc;
            let s114 = this.flowParsePrimaryType();
            let i72 = false;
            while((this.match(0) || this.match(18)) && !this.canInsertSemicolon()){
                const r49 = this.startNodeAt(e375, t193);
                const a25 = this.eat(18);
                i72 = i72 || a25;
                this.expect(0);
                if (!a25 && this.match(3)) {
                    r49.elementType = s114;
                    this.next();
                    s114 = this.finishNode(r49, "ArrayTypeAnnotation");
                } else {
                    r49.objectType = s114;
                    r49.indexType = this.flowParseType();
                    this.expect(3);
                    if (i72) {
                        r49.optional = a25;
                        s114 = this.finishNode(r49, "OptionalIndexedAccessType");
                    } else s114 = this.finishNode(r49, "IndexedAccessType");
                }
            }
            return s114;
        }
        flowParsePrefixType() {
            const e376 = this.startNode();
            if (this.eat(17)) {
                e376.typeAnnotation = this.flowParsePrefixType();
                return this.finishNode(e376, "NullableTypeAnnotation");
            }
            return this.flowParsePostfixType();
        }
        flowParseAnonFunctionWithoutParens() {
            const e377 = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
                const t194 = this.startNodeAt(e377.start, e377.loc.start);
                t194.params = [
                    this.reinterpretTypeAsFunctionTypeParam(e377)
                ];
                t194.rest = null;
                t194.this = null;
                t194.returnType = this.flowParseType();
                t194.typeParameters = null;
                return this.finishNode(t194, "FunctionTypeAnnotation");
            }
            return e377;
        }
        flowParseIntersectionType() {
            const e378 = this.startNode();
            this.eat(45);
            const t195 = this.flowParseAnonFunctionWithoutParens();
            e378.types = [
                t195
            ];
            while(this.eat(45))e378.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === e378.types.length ? t195 : this.finishNode(e378, "IntersectionTypeAnnotation");
        }
        flowParseUnionType() {
            const e379 = this.startNode();
            this.eat(43);
            const t196 = this.flowParseIntersectionType();
            e379.types = [
                t196
            ];
            while(this.eat(43))e379.types.push(this.flowParseIntersectionType());
            return 1 === e379.types.length ? t196 : this.finishNode(e379, "UnionTypeAnnotation");
        }
        flowParseType() {
            const e380 = this.state.inType;
            this.state.inType = true;
            const t197 = this.flowParseUnionType();
            this.state.inType = e380;
            return t197;
        }
        flowParseTypeOrImplicitInstantiation() {
            if (128 === this.state.type && "_" === this.state.value) {
                const e381 = this.state.start;
                const t198 = this.state.startLoc;
                const s115 = this.parseIdentifier();
                return this.flowParseGenericType(e381, t198, s115);
            }
            return this.flowParseType();
        }
        flowParseTypeAnnotation() {
            const e382 = this.startNode();
            e382.typeAnnotation = this.flowParseTypeInitialiser();
            return this.finishNode(e382, "TypeAnnotation");
        }
        flowParseTypeAnnotatableIdentifier(e383) {
            const t199 = e383 ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            if (this.match(14)) {
                t199.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(t199);
            }
            return t199;
        }
        typeCastToParameter(e384) {
            e384.expression.typeAnnotation = e384.typeAnnotation;
            this.resetEndLocation(e384.expression, e384.typeAnnotation.loc.end);
            return e384.expression;
        }
        flowParseVariance() {
            let e385 = null;
            if (this.match(53)) {
                e385 = this.startNode();
                "+" === this.state.value ? e385.kind = "plus" : e385.kind = "minus";
                this.next();
                this.finishNode(e385, "Variance");
            }
            return e385;
        }
        parseFunctionBody(e386, t200, s116 = false) {
            return t200 ? this.forwardNoArrowParamsConversionAt(e386, ()=>super.parseFunctionBody(e386, true, s116)
            ) : super.parseFunctionBody(e386, false, s116);
        }
        parseFunctionBodyAndFinish(e387, t202, s117 = false) {
            if (this.match(14)) {
                const t201 = this.startNode();
                [t201.typeAnnotation, e387.predicate] = this.flowParseTypeAndPredicateInitialiser();
                e387.returnType = t201.typeAnnotation ? this.finishNode(t201, "TypeAnnotation") : null;
            }
            super.parseFunctionBodyAndFinish(e387, t202, s117);
        }
        parseStatement(e391, t203) {
            if (this.state.strict && this.isContextual(125)) {
                const e388 = this.lookahead();
                if (tokenIsKeywordOrIdentifier(e388.type)) {
                    const e389 = this.startNode();
                    this.next();
                    return this.flowParseInterface(e389);
                }
            } else if (this.shouldParseEnums() && this.isContextual(122)) {
                const e390 = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(e390);
            }
            const s118 = super.parseStatement(e391, t203);
            void 0 !== this.flowPragma || this.isValidDirective(s118) || (this.flowPragma = null);
            return s118;
        }
        parseExpressionStatement(e392, t204) {
            if ("Identifier" === t204.type) {
                if ("declare" === t204.name) {
                    if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(e392);
                } else if (tokenIsIdentifier(this.state.type)) {
                    if ("interface" === t204.name) return this.flowParseInterface(e392);
                    if ("type" === t204.name) return this.flowParseTypeAlias(e392);
                    if ("opaque" === t204.name) return this.flowParseOpaqueType(e392, false);
                }
            }
            return super.parseExpressionStatement(e392, t204);
        }
        shouldParseExportDeclaration() {
            const { type: e393  } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(e393) || this.shouldParseEnums() && 122 === e393 ? !this.state.containsEsc : super.shouldParseExportDeclaration();
        }
        isExportDefaultSpecifier() {
            const { type: e394  } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(e394) || this.shouldParseEnums() && 122 === e394 ? this.state.containsEsc : super.isExportDefaultSpecifier();
        }
        parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(122)) {
                const e395 = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(e395);
            }
            return super.parseExportDefaultExpression();
        }
        parseConditional(e396, t206, s119, i73) {
            if (!this.match(17)) return e396;
            if (this.state.maybeInArrowParameters) {
                const t205 = this.lookaheadCharCode();
                if (44 === t205 || 61 === t205 || 58 === t205 || 41 === t205) {
                    this.setOptionalParametersError(i73);
                    return e396;
                }
            }
            this.expect(17);
            const r50 = this.state.clone();
            const a26 = this.state.noArrowAt;
            const n2115 = this.startNodeAt(t206, s119);
            let { consequent: o131 , failed: h72  } = this.tryParseConditionalConsequent();
            let [c412, p51] = this.getArrowLikeExpressions(o131);
            if (h72 || p51.length > 0) {
                const e397 = [
                    ...a26
                ];
                if (p51.length > 0) {
                    this.state = r50;
                    this.state.noArrowAt = e397;
                    for(let t207 = 0; t207 < p51.length; t207++)e397.push(p51[t207].start);
                    ({ consequent: o131 , failed: h72  } = this.tryParseConditionalConsequent());
                    [c412, p51] = this.getArrowLikeExpressions(o131);
                }
                h72 && c412.length > 1 && this.raise($e2.AmbiguousConditionalArrow, {
                    at: r50.startLoc
                });
                if (h72 && 1 === c412.length) {
                    this.state = r50;
                    e397.push(c412[0].start);
                    this.state.noArrowAt = e397;
                    ({ consequent: o131 , failed: h72  } = this.tryParseConditionalConsequent());
                }
            }
            this.getArrowLikeExpressions(o131, true);
            this.state.noArrowAt = a26;
            this.expect(14);
            n2115.test = e396;
            n2115.consequent = o131;
            n2115.alternate = this.forwardNoArrowParamsConversionAt(n2115, ()=>this.parseMaybeAssign(void 0, void 0)
            );
            return this.finishNode(n2115, "ConditionalExpression");
        }
        tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const e398 = this.parseMaybeAssignAllowIn();
            const t208 = !this.match(14);
            this.state.noArrowParamsConversionAt.pop();
            return {
                consequent: e398,
                failed: t208
            };
        }
        getArrowLikeExpressions(e399, t209) {
            const s120 = [
                e399
            ];
            const i74 = [];
            while(0 !== s120.length){
                const e400 = s120.pop();
                if ("ArrowFunctionExpression" === e400.type) {
                    e400.typeParameters || !e400.returnType ? this.finishArrowValidation(e400) : i74.push(e400);
                    s120.push(e400.body);
                } else if ("ConditionalExpression" === e400.type) {
                    s120.push(e400.consequent);
                    s120.push(e400.alternate);
                }
            }
            if (t209) {
                i74.forEach((e401)=>this.finishArrowValidation(e401)
                );
                return [
                    i74,
                    []
                ];
            }
            return partition(i74, (e402)=>e402.params.every((e403)=>this.isAssignable(e403, true)
                )
            );
        }
        finishArrowValidation(e404) {
            var t210;
            this.toAssignableList(e404.params, null == (t210 = e404.extra) ? void 0 : t210.trailingCommaLoc, false);
            this.scope.enter(2 | 4);
            super.checkParams(e404, false, true);
            this.scope.exit();
        }
        forwardNoArrowParamsConversionAt(e405, t211) {
            let s121;
            if (-1 !== this.state.noArrowParamsConversionAt.indexOf(e405.start)) {
                this.state.noArrowParamsConversionAt.push(this.state.start);
                s121 = t211();
                this.state.noArrowParamsConversionAt.pop();
            } else s121 = t211();
            return s121;
        }
        parseParenItem(e406, t212, s122) {
            e406 = super.parseParenItem(e406, t212, s122);
            if (this.eat(17)) {
                e406.optional = true;
                this.resetEndLocation(e406);
            }
            if (this.match(14)) {
                const i75 = this.startNodeAt(t212, s122);
                i75.expression = e406;
                i75.typeAnnotation = this.flowParseTypeAnnotation();
                return this.finishNode(i75, "TypeCastExpression");
            }
            return e406;
        }
        assertModuleNodeAllowed(e407) {
            "ImportDeclaration" === e407.type && ("type" === e407.importKind || "typeof" === e407.importKind) || "ExportNamedDeclaration" === e407.type && "type" === e407.exportKind || "ExportAllDeclaration" === e407.type && "type" === e407.exportKind || super.assertModuleNodeAllowed(e407);
        }
        parseExport(e408) {
            const t213 = super.parseExport(e408);
            "ExportNamedDeclaration" !== t213.type && "ExportAllDeclaration" !== t213.type || (t213.exportKind = t213.exportKind || "value");
            return t213;
        }
        parseExportDeclaration(e409) {
            if (this.isContextual(126)) {
                e409.exportKind = "type";
                const t214 = this.startNode();
                this.next();
                if (this.match(5)) {
                    e409.specifiers = this.parseExportSpecifiers(true);
                    this.parseExportFrom(e409);
                    return null;
                }
                return this.flowParseTypeAlias(t214);
            }
            if (this.isContextual(127)) {
                e409.exportKind = "type";
                const t215 = this.startNode();
                this.next();
                return this.flowParseOpaqueType(t215, false);
            }
            if (this.isContextual(125)) {
                e409.exportKind = "type";
                const t216 = this.startNode();
                this.next();
                return this.flowParseInterface(t216);
            }
            if (this.shouldParseEnums() && this.isContextual(122)) {
                e409.exportKind = "value";
                const t217 = this.startNode();
                this.next();
                return this.flowParseEnumDeclaration(t217);
            }
            return super.parseExportDeclaration(e409);
        }
        eatExportStar(e410) {
            if (super.eatExportStar(...arguments)) return true;
            if (this.isContextual(126) && 55 === this.lookahead().type) {
                e410.exportKind = "type";
                this.next();
                this.next();
                return true;
            }
            return false;
        }
        maybeParseExportNamespaceSpecifier(e411) {
            const { startLoc: t218  } = this.state;
            const s123 = super.maybeParseExportNamespaceSpecifier(e411);
            s123 && "type" === e411.exportKind && this.unexpected(t218);
            return s123;
        }
        parseClassId(e412, t219, s124) {
            super.parseClassId(e412, t219, s124);
            this.match(47) && (e412.typeParameters = this.flowParseTypeParameterDeclaration());
        }
        parseClassMember(e413, t220, s125) {
            const { startLoc: i76  } = this.state;
            if (this.isContextual(121)) {
                if (this.parseClassMemberFromModifier(e413, t220)) return;
                t220.declare = true;
            }
            super.parseClassMember(e413, t220, s125);
            t220.declare && ("ClassProperty" !== t220.type && "ClassPrivateProperty" !== t220.type && "PropertyDefinition" !== t220.type ? this.raise($e2.DeclareClassElement, {
                at: i76
            }) : t220.value && this.raise($e2.DeclareClassFieldInitializer, {
                at: t220.value
            }));
        }
        isIterator(e414) {
            return "iterator" === e414 || "asyncIterator" === e414;
        }
        readIterator() {
            const e415 = super.readWord1();
            const t221 = "@@" + e415;
            this.isIterator(e415) && this.state.inType || this.raise(a16.InvalidIdentifier, {
                at: this.state.curPosition(),
                identifierName: t221
            });
            this.finishToken(128, t221);
        }
        getTokenFromCode(e416) {
            const t222 = this.input.charCodeAt(this.state.pos + 1);
            if (123 === e416 && 124 === t222) return this.finishOp(6, 2);
            if (!this.state.inType || 62 !== e416 && 60 !== e416) {
                if (this.state.inType && 63 === e416) return 46 === t222 ? this.finishOp(18, 2) : this.finishOp(17, 1);
                if (isIteratorStart(e416, t222, this.input.charCodeAt(this.state.pos + 2))) {
                    this.state.pos += 2;
                    return this.readIterator();
                }
                return super.getTokenFromCode(e416);
            }
            return this.finishOp(62 === e416 ? 48 : 47, 1);
        }
        isAssignable(e417, t223) {
            return "TypeCastExpression" === e417.type ? this.isAssignable(e417.expression, t223) : super.isAssignable(e417, t223);
        }
        toAssignable(e418, t224 = false) {
            return "TypeCastExpression" === e418.type ? super.toAssignable(this.typeCastToParameter(e418), t224) : super.toAssignable(e418, t224);
        }
        toAssignableList(e419, t226, s127) {
            for(let t225 = 0; t225 < e419.length; t225++){
                const s126 = e419[t225];
                "TypeCastExpression" === (null == s126 ? void 0 : s126.type) && (e419[t225] = this.typeCastToParameter(s126));
            }
            return super.toAssignableList(e419, t226, s127);
        }
        toReferencedList(e420, t227) {
            for(let i77 = 0; i77 < e420.length; i77++){
                var s128;
                const r51 = e420[i77];
                !r51 || "TypeCastExpression" !== r51.type || null != (s128 = r51.extra) && s128.parenthesized || !(e420.length > 1) && t227 || this.raise($e2.TypeCastInPattern, {
                    at: r51.typeAnnotation
                });
            }
            return e420;
        }
        parseArrayLike(e421, t228, s129, i78) {
            const r52 = super.parseArrayLike(e421, t228, s129, i78);
            t228 && !this.state.maybeInArrowParameters && this.toReferencedList(r52.elements);
            return r52;
        }
        isValidLVal(e422, ...t229) {
            return "TypeCastExpression" === e422 || super.isValidLVal(e422, ...t229);
        }
        parseClassProperty(e423) {
            this.match(14) && (e423.typeAnnotation = this.flowParseTypeAnnotation());
            return super.parseClassProperty(e423);
        }
        parseClassPrivateProperty(e424) {
            this.match(14) && (e424.typeAnnotation = this.flowParseTypeAnnotation());
            return super.parseClassPrivateProperty(e424);
        }
        isClassMethod() {
            return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
            return this.match(14) || super.isClassProperty();
        }
        isNonstaticConstructor(e425) {
            return !this.match(14) && super.isNonstaticConstructor(e425);
        }
        pushClassMethod(e426, t230, s130, i79, r53, a27) {
            t230.variance && this.unexpected(t230.variance.loc.start);
            delete t230.variance;
            this.match(47) && (t230.typeParameters = this.flowParseTypeParameterDeclaration());
            super.pushClassMethod(e426, t230, s130, i79, r53, a27);
            if (t230.params && r53) {
                const e427 = t230.params;
                e427.length > 0 && this.isThisParam(e427[0]) && this.raise($e2.ThisParamBannedInConstructor, {
                    at: t230
                });
            } else if ("MethodDefinition" === t230.type && r53 && t230.value.params) {
                const e428 = t230.value.params;
                e428.length > 0 && this.isThisParam(e428[0]) && this.raise($e2.ThisParamBannedInConstructor, {
                    at: t230
                });
            }
        }
        pushClassPrivateMethod(e429, t231, s131, i80) {
            t231.variance && this.unexpected(t231.variance.loc.start);
            delete t231.variance;
            this.match(47) && (t231.typeParameters = this.flowParseTypeParameterDeclaration());
            super.pushClassPrivateMethod(e429, t231, s131, i80);
        }
        parseClassSuper(e430) {
            super.parseClassSuper(e430);
            e430.superClass && this.match(47) && (e430.superTypeParameters = this.flowParseTypeParameterInstantiation());
            if (this.isContextual(110)) {
                this.next();
                const t232 = e430.implements = [];
                do {
                    const e431 = this.startNode();
                    e431.id = this.flowParseRestrictedIdentifier(true);
                    this.match(47) ? e431.typeParameters = this.flowParseTypeParameterInstantiation() : e431.typeParameters = null;
                    t232.push(this.finishNode(e431, "ClassImplements"));
                }while (this.eat(12))
            }
        }
        checkGetterSetterParams(e432) {
            super.checkGetterSetterParams(e432);
            const t233 = this.getObjectOrClassMethodParams(e432);
            if (t233.length > 0) {
                const s132 = t233[0];
                this.isThisParam(s132) && "get" === e432.kind ? this.raise($e2.GetterMayNotHaveThisParam, {
                    at: s132
                }) : this.isThisParam(s132) && this.raise($e2.SetterMayNotHaveThisParam, {
                    at: s132
                });
            }
        }
        parsePropertyNamePrefixOperator(e433) {
            e433.variance = this.flowParseVariance();
        }
        parseObjPropValue(e434, t234, s133, i81, r54, a28, n2210, o14) {
            e434.variance && this.unexpected(e434.variance.loc.start);
            delete e434.variance;
            let h81;
            if (this.match(47) && !n2210) {
                h81 = this.flowParseTypeParameterDeclaration();
                this.match(10) || this.unexpected();
            }
            super.parseObjPropValue(e434, t234, s133, i81, r54, a28, n2210, o14);
            h81 && ((e434.value || e434).typeParameters = h81);
        }
        parseAssignableListItemTypes(e435) {
            if (this.eat(17)) {
                "Identifier" !== e435.type && this.raise($e2.PatternIsOptional, {
                    at: e435
                });
                this.isThisParam(e435) && this.raise($e2.ThisParamMayNotBeOptional, {
                    at: e435
                });
                e435.optional = true;
            }
            this.match(14) ? e435.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(e435) && this.raise($e2.ThisParamAnnotationRequired, {
                at: e435
            });
            this.match(29) && this.isThisParam(e435) && this.raise($e2.ThisParamNoDefault, {
                at: e435
            });
            this.resetEndLocation(e435);
            return e435;
        }
        parseMaybeDefault(e436, t235, s134) {
            const i82 = super.parseMaybeDefault(e436, t235, s134);
            "AssignmentPattern" === i82.type && i82.typeAnnotation && i82.right.start < i82.typeAnnotation.start && this.raise($e2.TypeBeforeInitializer, {
                at: i82.typeAnnotation
            });
            return i82;
        }
        shouldParseDefaultImport(e437) {
            return hasTypeImportKind(e437) ? isMaybeDefaultImport(this.state.type) : super.shouldParseDefaultImport(e437);
        }
        parseImportSpecifierLocal(e438, t236, s135) {
            t236.local = hasTypeImportKind(e438) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
            e438.specifiers.push(this.finishImportSpecifier(t236, s135));
        }
        maybeParseDefaultImportSpecifier(e439) {
            e439.importKind = "value";
            let t237 = null;
            this.match(87) ? t237 = "typeof" : this.isContextual(126) && (t237 = "type");
            if (t237) {
                const s136 = this.lookahead();
                const { type: i83  } = s136;
                "type" === t237 && 55 === i83 && this.unexpected(null, s136.type);
                if (isMaybeDefaultImport(i83) || 5 === i83 || 55 === i83) {
                    this.next();
                    e439.importKind = t237;
                }
            }
            return super.maybeParseDefaultImportSpecifier(e439);
        }
        parseImportSpecifier(e440, t239, s137, i) {
            const r55 = e440.imported;
            let n2310 = null;
            "Identifier" === r55.type && ("type" === r55.name ? n2310 = "type" : "typeof" === r55.name && (n2310 = "typeof"));
            let o151 = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
                const t238 = this.parseIdentifier(true);
                if (null === n2310 || tokenIsKeywordOrIdentifier(this.state.type)) {
                    e440.imported = r55;
                    e440.importKind = null;
                    e440.local = this.parseIdentifier();
                } else {
                    e440.imported = t238;
                    e440.importKind = n2310;
                    e440.local = cloneIdentifier(t238);
                }
            } else {
                if (null !== n2310 && tokenIsKeywordOrIdentifier(this.state.type)) {
                    e440.imported = this.parseIdentifier(true);
                    e440.importKind = n2310;
                } else {
                    if (t239) throw this.raise(a16.ImportBindingIsString, {
                        at: e440,
                        importName: r55.value
                    });
                    e440.imported = r55;
                    e440.importKind = null;
                }
                if (this.eatContextual(93)) e440.local = this.parseIdentifier();
                else {
                    o151 = true;
                    e440.local = cloneIdentifier(e440.imported);
                }
            }
            const h91 = hasTypeImportKind(e440);
            s137 && h91 && this.raise($e2.ImportTypeShorthandOnlyInPureImport, {
                at: e440
            });
            (s137 || h91) && this.checkReservedType(e440.local.name, e440.local.loc.start, true);
            !o151 || s137 || h91 || this.checkReservedWord(e440.local.name, e440.loc.start, true, true);
            return this.finishImportSpecifier(e440, "ImportSpecifier");
        }
        parseBindingAtom() {
            switch(this.state.type){
                case 78:
                    return this.parseIdentifier(true);
                default:
                    return super.parseBindingAtom();
            }
        }
        parseFunctionParams(e441, t240) {
            const s138 = e441.kind;
            "get" !== s138 && "set" !== s138 && this.match(47) && (e441.typeParameters = this.flowParseTypeParameterDeclaration());
            super.parseFunctionParams(e441, t240);
        }
        parseVarId(e442, t241) {
            super.parseVarId(e442, t241);
            if (this.match(14)) {
                e442.id.typeAnnotation = this.flowParseTypeAnnotation();
                this.resetEndLocation(e442.id);
            }
        }
        parseAsyncArrowFromCallExpression(e443, t243) {
            if (this.match(14)) {
                const t242 = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                e443.returnType = this.flowParseTypeAnnotation();
                this.state.noAnonFunctionType = t242;
            }
            return super.parseAsyncArrowFromCallExpression(e443, t243);
        }
        shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
        }
        parseMaybeAssign(e444, t244) {
            var s140;
            let i84 = null;
            let r56;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
                i84 = this.state.clone();
                r56 = this.tryParse(()=>super.parseMaybeAssign(e444, t244)
                , i84);
                if (!r56.error) return r56.node;
                const { context: s139  } = this.state;
                const a29 = s139[s139.length - 1];
                a29 !== o20.j_oTag && a29 !== o20.j_expr || s139.pop();
            }
            if (null != (s140 = r56) && s140.error || this.match(47)) {
                var a30, n2410;
                i84 = i84 || this.state.clone();
                let s141;
                const o161 = this.tryParse((i85)=>{
                    var r57;
                    s141 = this.flowParseTypeParameterDeclaration();
                    const a32 = this.forwardNoArrowParamsConversionAt(s141, ()=>{
                        const i86 = super.parseMaybeAssign(e444, t244);
                        this.resetStartLocationFromNode(i86, s141);
                        return i86;
                    });
                    null != (r57 = a32.extra) && r57.parenthesized && i85();
                    const n26 = this.maybeUnwrapTypeCastExpression(a32);
                    "ArrowFunctionExpression" !== n26.type && i85();
                    n26.typeParameters = s141;
                    this.resetStartLocationFromNode(n26, s141);
                    return a32;
                }, i84);
                let h10 = null;
                if (o161.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(o161.node).type) {
                    if (!o161.error && !o161.aborted) {
                        o161.node.async && this.raise($e2.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                            at: s141
                        });
                        return o161.node;
                    }
                    h10 = o161.node;
                }
                if (null != (a30 = r56) && a30.node) {
                    this.state = r56.failState;
                    return r56.node;
                }
                if (h10) {
                    this.state = o161.failState;
                    return h10;
                }
                if (null != (n2410 = r56) && n2410.thrown) throw r56.error;
                if (o161.thrown) throw o161.error;
                throw this.raise($e2.UnexpectedTokenAfterTypeParameter, {
                    at: s141
                });
            }
            return super.parseMaybeAssign(e444, t244);
        }
        parseArrow(e445) {
            if (this.match(14)) {
                const t245 = this.tryParse(()=>{
                    const t247 = this.state.noAnonFunctionType;
                    this.state.noAnonFunctionType = true;
                    const s142 = this.startNode();
                    [s142.typeAnnotation, e445.predicate] = this.flowParseTypeAndPredicateInitialiser();
                    this.state.noAnonFunctionType = t247;
                    this.canInsertSemicolon() && this.unexpected();
                    this.match(19) || this.unexpected();
                    return s142;
                });
                if (t245.thrown) return null;
                t245.error && (this.state = t245.failState);
                e445.returnType = t245.node.typeAnnotation ? this.finishNode(t245.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(e445);
        }
        shouldParseArrow(e446) {
            return this.match(14) || super.shouldParseArrow(e446);
        }
        setArrowFunctionParameters(e447, t248) {
            -1 !== this.state.noArrowParamsConversionAt.indexOf(e447.start) ? e447.params = t248 : super.setArrowFunctionParameters(e447, t248);
        }
        checkParams(e448, t, s143) {
            if (!s143 || -1 === this.state.noArrowParamsConversionAt.indexOf(e448.start)) {
                for(let t249 = 0; t249 < e448.params.length; t249++)this.isThisParam(e448.params[t249]) && t249 > 0 && this.raise($e2.ThisParamMustBeFirst, {
                    at: e448.params[t249]
                });
                return super.checkParams(...arguments);
            }
        }
        parseParenAndDistinguishExpression(e449) {
            return super.parseParenAndDistinguishExpression(e449 && -1 === this.state.noArrowAt.indexOf(this.state.start));
        }
        parseSubscripts(e450, t250, s144, i88) {
            if ("Identifier" === e450.type && "async" === e450.name && -1 !== this.state.noArrowAt.indexOf(t250)) {
                this.next();
                const i87 = this.startNodeAt(t250, s144);
                i87.callee = e450;
                i87.arguments = this.parseCallExpressionArguments(11, false);
                e450 = this.finishNode(i87, "CallExpression");
            } else if ("Identifier" === e450.type && "async" === e450.name && this.match(47)) {
                const r58 = this.state.clone();
                const a33 = this.tryParse((e451)=>this.parseAsyncArrowWithTypeParameters(t250, s144) || e451()
                , r58);
                if (!a33.error && !a33.aborted) return a33.node;
                const n27 = this.tryParse(()=>super.parseSubscripts(e450, t250, s144, i88)
                , r58);
                if (n27.node && !n27.error) return n27.node;
                if (a33.node) {
                    this.state = a33.failState;
                    return a33.node;
                }
                if (n27.node) {
                    this.state = n27.failState;
                    return n27.node;
                }
                throw a33.error || n27.error;
            }
            return super.parseSubscripts(e450, t250, s144, i88);
        }
        parseSubscript(e452, t251, s145, i89, r59) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
                r59.optionalChainMember = true;
                if (i89) {
                    r59.stop = true;
                    return e452;
                }
                this.next();
                const a34 = this.startNodeAt(t251, s145);
                a34.callee = e452;
                a34.typeArguments = this.flowParseTypeParameterInstantiation();
                this.expect(10);
                a34.arguments = this.parseCallExpressionArguments(11, false);
                a34.optional = true;
                return this.finishCallExpression(a34, true);
            }
            if (!i89 && this.shouldParseTypes() && this.match(47)) {
                const i90 = this.startNodeAt(t251, s145);
                i90.callee = e452;
                const a35 = this.tryParse(()=>{
                    i90.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
                    this.expect(10);
                    i90.arguments = this.parseCallExpressionArguments(11, false);
                    r59.optionalChainMember && (i90.optional = false);
                    return this.finishCallExpression(i90, r59.optionalChainMember);
                });
                if (a35.node) {
                    a35.error && (this.state = a35.failState);
                    return a35.node;
                }
            }
            return super.parseSubscript(e452, t251, s145, i89, r59);
        }
        parseNewArguments(e453) {
            let t252 = null;
            this.shouldParseTypes() && this.match(47) && (t252 = this.tryParse(()=>this.flowParseTypeParameterInstantiationCallOrNew()
            ).node);
            e453.typeArguments = t252;
            super.parseNewArguments(e453);
        }
        parseAsyncArrowWithTypeParameters(e454, t253) {
            const s146 = this.startNodeAt(e454, t253);
            this.parseFunctionParams(s146);
            if (this.parseArrow(s146)) return this.parseArrowExpression(s146, void 0, true);
        }
        readToken_mult_modulo(e455) {
            const t254 = this.input.charCodeAt(this.state.pos + 1);
            if (42 === e455 && 47 === t254 && this.state.hasFlowComment) {
                this.state.hasFlowComment = false;
                this.state.pos += 2;
                this.nextToken();
            } else super.readToken_mult_modulo(e455);
        }
        readToken_pipe_amp(e456) {
            const t255 = this.input.charCodeAt(this.state.pos + 1);
            124 !== e456 || 125 !== t255 ? super.readToken_pipe_amp(e456) : this.finishOp(9, 2);
        }
        parseTopLevel(e457, t256) {
            const s147 = super.parseTopLevel(e457, t256);
            this.state.hasFlowComment && this.raise($e2.UnterminatedFlowComment, {
                at: this.state.curPosition()
            });
            return s147;
        }
        skipBlockComment() {
            if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
                if (this.state.hasFlowComment) throw this.raise($e2.NestedFlowComment, {
                    at: this.state.startLoc
                });
                this.hasFlowCommentCompletion();
                this.state.pos += this.skipFlowComment();
                this.state.hasFlowComment = true;
            } else {
                if (!this.state.hasFlowComment) return super.skipBlockComment();
                {
                    const e458 = this.input.indexOf("*-/", this.state.pos + 2);
                    if (-1 === e458) throw this.raise(a16.UnterminatedComment, {
                        at: this.state.curPosition()
                    });
                    this.state.pos = e458 + 2 + 3;
                }
            }
        }
        skipFlowComment() {
            const { pos: e459  } = this.state;
            let t257 = 2;
            while([
                32,
                9
            ].includes(this.input.charCodeAt(e459 + t257)))t257++;
            const s148 = this.input.charCodeAt(t257 + e459);
            const i91 = this.input.charCodeAt(t257 + e459 + 1);
            return 58 === s148 && 58 === i91 ? t257 + 2 : "flow-include" === this.input.slice(t257 + e459, t257 + e459 + 12) ? t257 + 12 : 58 === s148 && 58 !== i91 && t257;
        }
        hasFlowCommentCompletion() {
            const e460 = this.input.indexOf("*/", this.state.pos);
            if (-1 === e460) throw this.raise(a16.UnterminatedComment, {
                at: this.state.curPosition()
            });
        }
        flowEnumErrorBooleanMemberNotInitialized(e461, { enumName: t258 , memberName: s149  }) {
            this.raise($e2.EnumBooleanMemberNotInitialized, {
                at: e461,
                memberName: s149,
                enumName: t258
            });
        }
        flowEnumErrorInvalidMemberInitializer(e462, t259) {
            return this.raise(t259.explicitType ? "symbol" === t259.explicitType ? $e2.EnumInvalidMemberInitializerSymbolType : $e2.EnumInvalidMemberInitializerPrimaryType : $e2.EnumInvalidMemberInitializerUnknownType, Object.assign({
                at: e462
            }, t259));
        }
        flowEnumErrorNumberMemberNotInitialized(e463, { enumName: t260 , memberName: s150  }) {
            this.raise($e2.EnumNumberMemberNotInitialized, {
                at: e463,
                enumName: t260,
                memberName: s150
            });
        }
        flowEnumErrorStringMemberInconsistentlyInitailized(e464, { enumName: t261  }) {
            this.raise($e2.EnumStringMemberInconsistentlyInitailized, {
                at: e464,
                enumName: t261
            });
        }
        flowEnumMemberInit() {
            const e465 = this.state.startLoc;
            const endOfInit = ()=>this.match(12) || this.match(8)
            ;
            switch(this.state.type){
                case 130:
                    {
                        const t262 = this.parseNumericLiteral(this.state.value);
                        return endOfInit() ? {
                            type: "number",
                            loc: t262.loc.start,
                            value: t262
                        } : {
                            type: "invalid",
                            loc: e465
                        };
                    }
                case 129:
                    {
                        const t263 = this.parseStringLiteral(this.state.value);
                        return endOfInit() ? {
                            type: "string",
                            loc: t263.loc.start,
                            value: t263
                        } : {
                            type: "invalid",
                            loc: e465
                        };
                    }
                case 85:
                case 86:
                    {
                        const t264 = this.parseBooleanLiteral(this.match(85));
                        return endOfInit() ? {
                            type: "boolean",
                            loc: t264.loc.start,
                            value: t264
                        } : {
                            type: "invalid",
                            loc: e465
                        };
                    }
                default:
                    return {
                        type: "invalid",
                        loc: e465
                    };
            }
        }
        flowEnumMemberRaw() {
            const e466 = this.state.startLoc;
            const t265 = this.parseIdentifier(true);
            const s151 = this.eat(29) ? this.flowEnumMemberInit() : {
                type: "none",
                loc: e466
            };
            return {
                id: t265,
                init: s151
            };
        }
        flowEnumCheckExplicitTypeMismatch(e467, t266, s152) {
            const { explicitType: i92  } = t266;
            null !== i92 && i92 !== s152 && this.flowEnumErrorInvalidMemberInitializer(e467, t266);
        }
        flowEnumMembers({ enumName: e468 , explicitType: t267  }) {
            const s153 = new Set;
            const i93 = {
                booleanMembers: [],
                numberMembers: [],
                stringMembers: [],
                defaultedMembers: []
            };
            let r60 = false;
            while(!this.match(8)){
                if (this.eat(21)) {
                    r60 = true;
                    break;
                }
                const a36 = this.startNode();
                const { id: n28 , init: o171  } = this.flowEnumMemberRaw();
                const h11 = n28.name;
                if ("" === h11) continue;
                /^[a-z]/.test(h11) && this.raise($e2.EnumInvalidMemberName, {
                    at: n28,
                    memberName: h11,
                    suggestion: h11[0].toUpperCase() + h11.slice(1),
                    enumName: e468
                });
                s153.has(h11) && this.raise($e2.EnumDuplicateMemberName, {
                    at: n28,
                    memberName: h11,
                    enumName: e468
                });
                s153.add(h11);
                const c54 = {
                    enumName: e468,
                    explicitType: t267,
                    memberName: h11
                };
                a36.id = n28;
                switch(o171.type){
                    case "boolean":
                        this.flowEnumCheckExplicitTypeMismatch(o171.loc, c54, "boolean");
                        a36.init = o171.value;
                        i93.booleanMembers.push(this.finishNode(a36, "EnumBooleanMember"));
                        break;
                    case "number":
                        this.flowEnumCheckExplicitTypeMismatch(o171.loc, c54, "number");
                        a36.init = o171.value;
                        i93.numberMembers.push(this.finishNode(a36, "EnumNumberMember"));
                        break;
                    case "string":
                        this.flowEnumCheckExplicitTypeMismatch(o171.loc, c54, "string");
                        a36.init = o171.value;
                        i93.stringMembers.push(this.finishNode(a36, "EnumStringMember"));
                        break;
                    case "invalid":
                        throw this.flowEnumErrorInvalidMemberInitializer(o171.loc, c54);
                    case "none":
                        switch(t267){
                            case "boolean":
                                this.flowEnumErrorBooleanMemberNotInitialized(o171.loc, c54);
                                break;
                            case "number":
                                this.flowEnumErrorNumberMemberNotInitialized(o171.loc, c54);
                                break;
                            default:
                                i93.defaultedMembers.push(this.finishNode(a36, "EnumDefaultedMember"));
                        }
                }
                this.match(8) || this.expect(12);
            }
            return {
                members: i93,
                hasUnknownMembers: r60
            };
        }
        flowEnumStringMembers(e470, t268, { enumName: s154  }) {
            if (0 === e470.length) return t268;
            if (0 === t268.length) return e470;
            if (t268.length > e470.length) {
                for (const t269 of e470)this.flowEnumErrorStringMemberInconsistentlyInitailized(t269, {
                    enumName: s154
                });
                return t268;
            }
            for (const e469 of t268)this.flowEnumErrorStringMemberInconsistentlyInitailized(e469, {
                enumName: s154
            });
            return e470;
        }
        flowEnumParseExplicitType({ enumName: e471  }) {
            if (!this.eatContextual(101)) return null;
            if (!tokenIsIdentifier(this.state.type)) throw this.raise($e2.EnumInvalidExplicitTypeUnknownSupplied, {
                at: this.state.startLoc,
                enumName: e471
            });
            const { value: t270  } = this.state;
            this.next();
            "boolean" !== t270 && "number" !== t270 && "string" !== t270 && "symbol" !== t270 && this.raise($e2.EnumInvalidExplicitType, {
                at: this.state.startLoc,
                enumName: e471,
                invalidEnumType: t270
            });
            return t270;
        }
        flowEnumBody(e472, t271) {
            const s155 = t271.name;
            const i94 = t271.loc.start;
            const r61 = this.flowEnumParseExplicitType({
                enumName: s155
            });
            this.expect(5);
            const { members: a37 , hasUnknownMembers: n29  } = this.flowEnumMembers({
                enumName: s155,
                explicitType: r61
            });
            e472.hasUnknownMembers = n29;
            switch(r61){
                case "boolean":
                    e472.explicitType = true;
                    e472.members = a37.booleanMembers;
                    this.expect(8);
                    return this.finishNode(e472, "EnumBooleanBody");
                case "number":
                    e472.explicitType = true;
                    e472.members = a37.numberMembers;
                    this.expect(8);
                    return this.finishNode(e472, "EnumNumberBody");
                case "string":
                    e472.explicitType = true;
                    e472.members = this.flowEnumStringMembers(a37.stringMembers, a37.defaultedMembers, {
                        enumName: s155
                    });
                    this.expect(8);
                    return this.finishNode(e472, "EnumStringBody");
                case "symbol":
                    e472.members = a37.defaultedMembers;
                    this.expect(8);
                    return this.finishNode(e472, "EnumSymbolBody");
                default:
                    {
                        const empty = ()=>{
                            e472.members = [];
                            this.expect(8);
                            return this.finishNode(e472, "EnumStringBody");
                        };
                        e472.explicitType = false;
                        const t272 = a37.booleanMembers.length;
                        const r62 = a37.numberMembers.length;
                        const n30 = a37.stringMembers.length;
                        const o181 = a37.defaultedMembers.length;
                        if (t272 || r62 || n30 || o181) {
                            if (t272 || r62) {
                                if (!r62 && !n30 && t272 >= o181) {
                                    for (const e473 of a37.defaultedMembers)this.flowEnumErrorBooleanMemberNotInitialized(e473.loc.start, {
                                        enumName: s155,
                                        memberName: e473.id.name
                                    });
                                    e472.members = a37.booleanMembers;
                                    this.expect(8);
                                    return this.finishNode(e472, "EnumBooleanBody");
                                }
                                if (!t272 && !n30 && r62 >= o181) {
                                    for (const e474 of a37.defaultedMembers)this.flowEnumErrorNumberMemberNotInitialized(e474.loc.start, {
                                        enumName: s155,
                                        memberName: e474.id.name
                                    });
                                    e472.members = a37.numberMembers;
                                    this.expect(8);
                                    return this.finishNode(e472, "EnumNumberBody");
                                }
                                this.raise($e2.EnumInconsistentMemberValues, {
                                    at: i94,
                                    enumName: s155
                                });
                                return empty();
                            }
                            e472.members = this.flowEnumStringMembers(a37.stringMembers, a37.defaultedMembers, {
                                enumName: s155
                            });
                            this.expect(8);
                            return this.finishNode(e472, "EnumStringBody");
                        }
                        return empty();
                    }
            }
        }
        flowParseEnumDeclaration(e475) {
            const t273 = this.parseIdentifier();
            e475.id = t273;
            e475.body = this.flowEnumBody(this.startNode(), t273);
            return this.finishNode(e475, "EnumDeclaration");
        }
        isLookaheadToken_lt() {
            const e476 = this.nextTokenStart();
            if (60 === this.input.charCodeAt(e476)) {
                const t274 = this.input.charCodeAt(e476 + 1);
                return 60 !== t274 && 61 !== t274;
            }
            return false;
        }
        maybeUnwrapTypeCastExpression(e477) {
            return "TypeCastExpression" === e477.type ? e477.expression : e477;
        }
    }
;
const Xe2 = {
    __proto__: null,
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    int: "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
};
const Ge1 = ParseErrorEnum`jsx`((e478)=>({
        AttributeIsEmpty: e478("JSX attributes must only be assigned a non-empty expression."),
        MissingClosingTagElement: e478(({ openingTagName: e479  })=>`Expected corresponding JSX closing tag for <${e479}>.`
        ),
        MissingClosingTagFragment: e478("Expected corresponding JSX closing tag for <>."),
        UnexpectedSequenceExpression: e478("Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?"),
        UnexpectedToken: e478(({ unexpected: e480 , HTMLEntity: t275  })=>`Unexpected token \`${e480}\`. Did you mean \`${t275}\` or \`{'${e480}'}\`?`
        ),
        UnsupportedJsxValue: e478("JSX value should be either an expression or a quoted JSX text."),
        UnterminatedJsxContent: e478("Unterminated JSX contents."),
        UnwrappedAdjacentJSXElements: e478("Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?")
    })
);
function isFragment(e481) {
    return !!e481 && ("JSXOpeningFragment" === e481.type || "JSXClosingFragment" === e481.type);
}
function getQualifiedJSXName(e482) {
    if ("JSXIdentifier" === e482.type) return e482.name;
    if ("JSXNamespacedName" === e482.type) return e482.namespace.name + ":" + e482.name.name;
    if ("JSXMemberExpression" === e482.type) return getQualifiedJSXName(e482.object) + "." + getQualifiedJSXName(e482.property);
    throw new Error("Node had unexpected type: " + e482.type);
}
var jsx = (e483)=>class extends e483 {
        jsxReadToken() {
            let e484 = "";
            let t276 = this.state.pos;
            for(;;){
                if (this.state.pos >= this.length) throw this.raise(Ge1.UnterminatedJsxContent, {
                    at: this.state.startLoc
                });
                const s156 = this.input.charCodeAt(this.state.pos);
                switch(s156){
                    case 60:
                    case 123:
                        if (this.state.pos === this.state.start) {
                            if (60 === s156 && this.state.canStartJSXElement) {
                                ++this.state.pos;
                                return this.finishToken(138);
                            }
                            return super.getTokenFromCode(s156);
                        }
                        e484 += this.input.slice(t276, this.state.pos);
                        return this.finishToken(137, e484);
                    case 38:
                        e484 += this.input.slice(t276, this.state.pos);
                        e484 += this.jsxReadEntity();
                        t276 = this.state.pos;
                        break;
                    case 62:
                    case 125:
                    default:
                        if (isNewLine(s156)) {
                            e484 += this.input.slice(t276, this.state.pos);
                            e484 += this.jsxReadNewLine(true);
                            t276 = this.state.pos;
                        } else ++this.state.pos;
                }
            }
        }
        jsxReadNewLine(e485) {
            const t277 = this.input.charCodeAt(this.state.pos);
            let s157;
            ++this.state.pos;
            if (13 === t277 && 10 === this.input.charCodeAt(this.state.pos)) {
                ++this.state.pos;
                s157 = e485 ? "\n" : "\r\n";
            } else s157 = String.fromCharCode(t277);
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            return s157;
        }
        jsxReadString(e486) {
            let t278 = "";
            let s158 = ++this.state.pos;
            for(;;){
                if (this.state.pos >= this.length) throw this.raise(a16.UnterminatedString, {
                    at: this.state.startLoc
                });
                const i95 = this.input.charCodeAt(this.state.pos);
                if (i95 === e486) break;
                if (38 === i95) {
                    t278 += this.input.slice(s158, this.state.pos);
                    t278 += this.jsxReadEntity();
                    s158 = this.state.pos;
                } else if (isNewLine(i95)) {
                    t278 += this.input.slice(s158, this.state.pos);
                    t278 += this.jsxReadNewLine(false);
                    s158 = this.state.pos;
                } else ++this.state.pos;
            }
            t278 += this.input.slice(s158, this.state.pos++);
            return this.finishToken(129, t278);
        }
        jsxReadEntity() {
            const e488 = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
                ++this.state.pos;
                let e487 = 10;
                if (120 === this.codePointAtPos(this.state.pos)) {
                    e487 = 16;
                    ++this.state.pos;
                }
                const t279 = this.readInt(e487, void 0, false, "bail");
                if (null !== t279 && 59 === this.codePointAtPos(this.state.pos)) {
                    ++this.state.pos;
                    return String.fromCodePoint(t279);
                }
            } else {
                let t280 = 0;
                let s159 = false;
                while(t280++ < 10 && this.state.pos < this.length && !(s159 = 59 == this.codePointAtPos(this.state.pos)))++this.state.pos;
                if (s159) {
                    const t281 = this.input.slice(e488, this.state.pos);
                    const s160 = Xe2[t281];
                    ++this.state.pos;
                    if (s160) return s160;
                }
            }
            this.state.pos = e488;
            return "&";
        }
        jsxReadWord() {
            let e489;
            const t282 = this.state.pos;
            do {
                e489 = this.input.charCodeAt(++this.state.pos);
            }while (isIdentifierChar(e489) || 45 === e489)
            return this.finishToken(136, this.input.slice(t282, this.state.pos));
        }
        jsxParseIdentifier() {
            const e490 = this.startNode();
            this.match(136) ? e490.name = this.state.value : tokenIsKeyword(this.state.type) ? e490.name = tokenLabelName(this.state.type) : this.unexpected();
            this.next();
            return this.finishNode(e490, "JSXIdentifier");
        }
        jsxParseNamespacedName() {
            const e491 = this.state.start;
            const t283 = this.state.startLoc;
            const s161 = this.jsxParseIdentifier();
            if (!this.eat(14)) return s161;
            const i96 = this.startNodeAt(e491, t283);
            i96.namespace = s161;
            i96.name = this.jsxParseIdentifier();
            return this.finishNode(i96, "JSXNamespacedName");
        }
        jsxParseElementName() {
            const e492 = this.state.start;
            const t284 = this.state.startLoc;
            let s162 = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === s162.type) return s162;
            while(this.eat(16)){
                const i97 = this.startNodeAt(e492, t284);
                i97.object = s162;
                i97.property = this.jsxParseIdentifier();
                s162 = this.finishNode(i97, "JSXMemberExpression");
            }
            return s162;
        }
        jsxParseAttributeValue() {
            let e493;
            switch(this.state.type){
                case 5:
                    e493 = this.startNode();
                    this.setContext(o20.brace);
                    this.next();
                    e493 = this.jsxParseExpressionContainer(e493, o20.j_oTag);
                    "JSXEmptyExpression" === e493.expression.type && this.raise(Ge1.AttributeIsEmpty, {
                        at: e493
                    });
                    return e493;
                case 138:
                case 129:
                    return this.parseExprAtom();
                default:
                    throw this.raise(Ge1.UnsupportedJsxValue, {
                        at: this.state.startLoc
                    });
            }
        }
        jsxParseEmptyExpression() {
            const e494 = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);
            return this.finishNodeAt(e494, "JSXEmptyExpression", this.state.startLoc);
        }
        jsxParseSpreadChild(e495) {
            this.next();
            e495.expression = this.parseExpression();
            this.setContext(o20.j_oTag);
            this.expect(8);
            return this.finishNode(e495, "JSXSpreadChild");
        }
        jsxParseExpressionContainer(e496, t286) {
            if (this.match(8)) e496.expression = this.jsxParseEmptyExpression();
            else {
                const t285 = this.parseExpression();
                e496.expression = t285;
            }
            this.setContext(t286);
            this.expect(8);
            return this.finishNode(e496, "JSXExpressionContainer");
        }
        jsxParseAttribute() {
            const e497 = this.startNode();
            if (this.match(5)) {
                this.setContext(o20.brace);
                this.next();
                this.expect(21);
                e497.argument = this.parseMaybeAssignAllowIn();
                this.setContext(o20.j_oTag);
                this.expect(8);
                return this.finishNode(e497, "JSXSpreadAttribute");
            }
            e497.name = this.jsxParseNamespacedName();
            e497.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
            return this.finishNode(e497, "JSXAttribute");
        }
        jsxParseOpeningElementAt(e498, t287) {
            const s163 = this.startNodeAt(e498, t287);
            if (this.match(139)) {
                this.expect(139);
                return this.finishNode(s163, "JSXOpeningFragment");
            }
            s163.name = this.jsxParseElementName();
            return this.jsxParseOpeningElementAfterName(s163);
        }
        jsxParseOpeningElementAfterName(e499) {
            const t288 = [];
            while(!this.match(56) && !this.match(139))t288.push(this.jsxParseAttribute());
            e499.attributes = t288;
            e499.selfClosing = this.eat(56);
            this.expect(139);
            return this.finishNode(e499, "JSXOpeningElement");
        }
        jsxParseClosingElementAt(e500, t289) {
            const s164 = this.startNodeAt(e500, t289);
            if (this.match(139)) {
                this.expect(139);
                return this.finishNode(s164, "JSXClosingFragment");
            }
            s164.name = this.jsxParseElementName();
            this.expect(139);
            return this.finishNode(s164, "JSXClosingElement");
        }
        jsxParseElementAt(e501, t290) {
            const s165 = this.startNodeAt(e501, t290);
            const i98 = [];
            const r63 = this.jsxParseOpeningElementAt(e501, t290);
            let a38 = null;
            if (!r63.selfClosing) {
                e: for(;;)switch(this.state.type){
                    case 138:
                        e501 = this.state.start;
                        t290 = this.state.startLoc;
                        this.next();
                        if (this.eat(56)) {
                            a38 = this.jsxParseClosingElementAt(e501, t290);
                            break e;
                        }
                        i98.push(this.jsxParseElementAt(e501, t290));
                        break;
                    case 137:
                        i98.push(this.parseExprAtom());
                        break;
                    case 5:
                        {
                            const e502 = this.startNode();
                            this.setContext(o20.brace);
                            this.next();
                            this.match(21) ? i98.push(this.jsxParseSpreadChild(e502)) : i98.push(this.jsxParseExpressionContainer(e502, o20.j_expr));
                            break;
                        }
                    default:
                        throw this.unexpected();
                }
                isFragment(r63) && !isFragment(a38) && null !== a38 ? this.raise(Ge1.MissingClosingTagFragment, {
                    at: a38
                }) : !isFragment(r63) && isFragment(a38) ? this.raise(Ge1.MissingClosingTagElement, {
                    at: a38,
                    openingTagName: getQualifiedJSXName(r63.name)
                }) : isFragment(r63) || isFragment(a38) || getQualifiedJSXName(a38.name) !== getQualifiedJSXName(r63.name) && this.raise(Ge1.MissingClosingTagElement, {
                    at: a38,
                    openingTagName: getQualifiedJSXName(r63.name)
                });
            }
            if (isFragment(r63)) {
                s165.openingFragment = r63;
                s165.closingFragment = a38;
            } else {
                s165.openingElement = r63;
                s165.closingElement = a38;
            }
            s165.children = i98;
            if (this.match(47)) throw this.raise(Ge1.UnwrappedAdjacentJSXElements, {
                at: this.state.startLoc
            });
            return isFragment(r63) ? this.finishNode(s165, "JSXFragment") : this.finishNode(s165, "JSXElement");
        }
        jsxParseElement() {
            const e503 = this.state.start;
            const t291 = this.state.startLoc;
            this.next();
            return this.jsxParseElementAt(e503, t291);
        }
        setContext(e504) {
            const { context: t292  } = this.state;
            t292[t292.length - 1] = e504;
        }
        parseExprAtom(e505) {
            if (this.match(137)) return this.parseLiteral(this.state.value, "JSXText");
            if (this.match(138)) return this.jsxParseElement();
            if (this.match(47) && 33 !== this.input.charCodeAt(this.state.pos)) {
                this.replaceToken(138);
                return this.jsxParseElement();
            }
            return super.parseExprAtom(e505);
        }
        skipSpace() {
            const e506 = this.curContext();
            e506.preserveSpace || super.skipSpace();
        }
        getTokenFromCode(e507) {
            const t293 = this.curContext();
            if (t293 === o20.j_expr) return this.jsxReadToken();
            if (t293 === o20.j_oTag || t293 === o20.j_cTag) {
                if (isIdentifierStart(e507)) return this.jsxReadWord();
                if (62 === e507) {
                    ++this.state.pos;
                    return this.finishToken(139);
                }
                if ((34 === e507 || 39 === e507) && t293 === o20.j_oTag) return this.jsxReadString(e507);
            }
            if (60 === e507 && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1)) {
                ++this.state.pos;
                return this.finishToken(138);
            }
            return super.getTokenFromCode(e507);
        }
        updateContext(e508) {
            const { context: t294 , type: s166  } = this.state;
            if (56 === s166 && 138 === e508) {
                t294.splice(-2, 2, o20.j_cTag);
                this.state.canStartJSXElement = false;
            } else if (138 === s166) t294.push(o20.j_oTag);
            else if (139 === s166) {
                const s167 = t294[t294.length - 1];
                if (s167 === o20.j_oTag && 56 === e508 || s167 === o20.j_cTag) {
                    t294.pop();
                    this.state.canStartJSXElement = t294[t294.length - 1] === o20.j_expr;
                } else {
                    this.setContext(o20.j_expr);
                    this.state.canStartJSXElement = true;
                }
            } else this.state.canStartJSXElement = tokenComesBeforeExpression(s166);
        }
    }
;
class TypeScriptScope extends Scope {
    constructor(...e509){
        super(...e509);
        this.types = new Set;
        this.enums = new Set;
        this.constEnums = new Set;
        this.classes = new Set;
        this.exportOnlyBindings = new Set;
    }
}
class TypeScriptScopeHandler extends ScopeHandler {
    createScope(e510) {
        return new TypeScriptScope(e510);
    }
    declareName(e511, t295, s168) {
        const i99 = this.currentScope();
        if (t295 & 1024) {
            this.maybeExportDefined(i99, e511);
            i99.exportOnlyBindings.add(e511);
        } else {
            super.declareName(...arguments);
            if (t295 & 2) {
                if (!(t295 & 1)) {
                    this.checkRedeclarationInScope(i99, e511, t295, s168);
                    this.maybeExportDefined(i99, e511);
                }
                i99.types.add(e511);
            }
            t295 & 256 && i99.enums.add(e511);
            t295 & 512 && i99.constEnums.add(e511);
            t295 & 128 && i99.classes.add(e511);
        }
    }
    isRedeclaredInScope(e512, t296, s169) {
        if (e512.enums.has(t296)) {
            if (s169 & 256) {
                const i100 = !!(s169 & 512);
                const r64 = e512.constEnums.has(t296);
                return i100 !== r64;
            }
            return true;
        }
        return s169 & 128 && e512.classes.has(t296) ? !!e512.lexical.has(t296) && !!(s169 & 1) : !!(s169 & 2 && e512.types.has(t296)) || super.isRedeclaredInScope(...arguments);
    }
    checkLocalExport(e513) {
        const t297 = this.scopeStack[0];
        const { name: s170  } = e513;
        t297.types.has(s170) || t297.exportOnlyBindings.has(s170) || super.checkLocalExport(e513);
    }
}
const getOwn$1 = (e514, t298)=>Object.hasOwnProperty.call(e514, t298) && e514[t298]
;
function nonNull(e515) {
    if (null == e515) throw new Error(`Unexpected ${e515} value.`);
    return e515;
}
function assert1(e516) {
    if (!e516) throw new Error("Assert fail");
}
const Ye1 = ParseErrorEnum`typescript`((e517)=>({
        AbstractMethodHasImplementation: e517(({ methodName: e518  })=>`Method '${e518}' cannot have an implementation because it is marked abstract.`
        ),
        AbstractPropertyHasInitializer: e517(({ propertyName: e519  })=>`Property '${e519}' cannot have an initializer because it is marked abstract.`
        ),
        AccesorCannotDeclareThisParameter: e517("'get' and 'set' accessors cannot declare 'this' parameters."),
        AccesorCannotHaveTypeParameters: e517("An accessor cannot have type parameters."),
        CannotFindName: e517(({ name: e520  })=>`Cannot find name '${e520}'.`
        ),
        ClassMethodHasDeclare: e517("Class methods cannot have the 'declare' modifier."),
        ClassMethodHasReadonly: e517("Class methods cannot have the 'readonly' modifier."),
        ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: e517("A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."),
        ConstructorHasTypeParameters: e517("Type parameters cannot appear on a constructor declaration."),
        DeclareAccessor: e517(({ kind: e521  })=>`'declare' is not allowed in ${e521}ters.`
        ),
        DeclareClassFieldHasInitializer: e517("Initializers are not allowed in ambient contexts."),
        DeclareFunctionHasImplementation: e517("An implementation cannot be declared in ambient contexts."),
        DuplicateAccessibilityModifier: e517(({ modifier: e  })=>"Accessibility modifier already seen."
        ),
        DuplicateModifier: e517(({ modifier: e522  })=>`Duplicate modifier: '${e522}'.`
        ),
        EmptyHeritageClauseType: e517(({ token: e523  })=>`'${e523}' list cannot be empty.`
        ),
        EmptyTypeArguments: e517("Type argument list cannot be empty."),
        EmptyTypeParameters: e517("Type parameter list cannot be empty."),
        ExpectedAmbientAfterExportDeclare: e517("'export declare' must be followed by an ambient declaration."),
        ImportAliasHasImportType: e517("An import alias can not use 'import type'."),
        IncompatibleModifiers: e517(({ modifiers: e524  })=>`'${e524[0]}' modifier cannot be used with '${e524[1]}' modifier.`
        ),
        IndexSignatureHasAbstract: e517("Index signatures cannot have the 'abstract' modifier."),
        IndexSignatureHasAccessibility: e517(({ modifier: e525  })=>`Index signatures cannot have an accessibility modifier ('${e525}').`
        ),
        IndexSignatureHasDeclare: e517("Index signatures cannot have the 'declare' modifier."),
        IndexSignatureHasOverride: e517("'override' modifier cannot appear on an index signature."),
        IndexSignatureHasStatic: e517("Index signatures cannot have the 'static' modifier."),
        InitializerNotAllowedInAmbientContext: e517("Initializers are not allowed in ambient contexts."),
        InvalidModifierOnTypeMember: e517(({ modifier: e526  })=>`'${e526}' modifier cannot appear on a type member.`
        ),
        InvalidModifiersOrder: e517(({ orderedModifiers: e527  })=>`'${e527[0]}' modifier must precede '${e527[1]}' modifier.`
        ),
        InvalidTupleMemberLabel: e517("Tuple members must be labeled with a simple identifier."),
        MissingInterfaceName: e517("'interface' declarations must be followed by an identifier."),
        MixedLabeledAndUnlabeledElements: e517("Tuple members must all have names or all not have names."),
        NonAbstractClassHasAbstractMethod: e517("Abstract methods can only appear within an abstract class."),
        NonClassMethodPropertyHasAbstractModifer: e517("'abstract' modifier can only appear on a class, method, or property declaration."),
        OptionalTypeBeforeRequired: e517("A required element cannot follow an optional element."),
        OverrideNotInSubClass: e517("This member cannot have an 'override' modifier because its containing class does not extend another class."),
        PatternIsOptional: e517("A binding pattern parameter cannot be optional in an implementation signature."),
        PrivateElementHasAbstract: e517("Private elements cannot have the 'abstract' modifier."),
        PrivateElementHasAccessibility: e517(({ modifier: e528  })=>`Private elements cannot have an accessibility modifier ('${e528}').`
        ),
        ReadonlyForMethodSignature: e517("'readonly' modifier can only appear on a property declaration or index signature."),
        ReservedArrowTypeParam: e517("This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`."),
        ReservedTypeAssertion: e517("This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead."),
        SetAccesorCannotHaveOptionalParameter: e517("A 'set' accessor cannot have an optional parameter."),
        SetAccesorCannotHaveRestParameter: e517("A 'set' accessor cannot have rest parameter."),
        SetAccesorCannotHaveReturnType: e517("A 'set' accessor cannot have a return type annotation."),
        SingleTypeParameterWithoutTrailingComma: e517(({ typeParameterName: e529  })=>`Single type parameter ${e529} should have a trailing comma. Example usage: <${e529},>.`
        ),
        StaticBlockCannotHaveModifier: e517("Static class blocks cannot have any modifier."),
        TypeAnnotationAfterAssign: e517("Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`."),
        TypeImportCannotSpecifyDefaultAndNamed: e517("A type-only import can specify a default import or named bindings, but not both."),
        TypeModifierIsUsedInTypeExports: e517("The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement."),
        TypeModifierIsUsedInTypeImports: e517("The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement."),
        UnexpectedParameterModifier: e517("A parameter property is only allowed in a constructor implementation."),
        UnexpectedReadonly: e517("'readonly' type modifier is only permitted on array and tuple literal types."),
        UnexpectedTypeAnnotation: e517("Did not expect a type annotation here."),
        UnexpectedTypeCastInParameter: e517("Unexpected type cast in parameter position."),
        UnsupportedImportTypeArgument: e517("Argument in a type import must be a string literal."),
        UnsupportedParameterPropertyKind: e517("A parameter property may not be declared using a binding pattern."),
        UnsupportedSignatureParameterKind: e517(({ type: e530  })=>`Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${e530}.`
        )
    })
);
function keywordTypeFromName(e531) {
    switch(e531){
        case "any":
            return "TSAnyKeyword";
        case "boolean":
            return "TSBooleanKeyword";
        case "bigint":
            return "TSBigIntKeyword";
        case "never":
            return "TSNeverKeyword";
        case "number":
            return "TSNumberKeyword";
        case "object":
            return "TSObjectKeyword";
        case "string":
            return "TSStringKeyword";
        case "symbol":
            return "TSSymbolKeyword";
        case "undefined":
            return "TSUndefinedKeyword";
        case "unknown":
            return "TSUnknownKeyword";
        default:
            return;
    }
}
function tsIsAccessModifier(e532) {
    return "private" === e532 || "public" === e532 || "protected" === e532;
}
var typescript = (e533)=>class extends e533 {
        getScopeHandler() {
            return TypeScriptScopeHandler;
        }
        tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
        }
        tsTokenCanFollowModifier() {
            return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
        }
        tsNextTokenCanFollowModifier() {
            this.next();
            return this.tsTokenCanFollowModifier();
        }
        tsParseModifier(e534, t299) {
            if (!tokenIsIdentifier(this.state.type)) return;
            const s171 = this.state.value;
            if (-1 !== e534.indexOf(s171)) {
                if (t299 && this.tsIsStartOfStaticBlocks()) return;
                if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return s171;
            }
        }
        tsParseModifiers({ modified: e535 , allowedModifiers: t300 , disallowedModifiers: s172 , stopOnStartOfClassStaticBlock: i101  }) {
            const enforceOrder = (t301, s173, i102, r65)=>{
                s173 === i102 && e535[r65] && this.raise(Ye1.InvalidModifiersOrder, {
                    at: t301,
                    orderedModifiers: [
                        i102,
                        r65
                    ]
                });
            };
            const incompatible = (t302, s174, i103, r66)=>{
                (e535[i103] && s174 === r66 || e535[r66] && s174 === i103) && this.raise(Ye1.IncompatibleModifiers, {
                    at: t302,
                    modifiers: [
                        i103,
                        r66
                    ]
                });
            };
            for(;;){
                const { startLoc: r67  } = this.state;
                const a39 = this.tsParseModifier(t300.concat(null != s172 ? s172 : []), i101);
                if (!a39) break;
                if (tsIsAccessModifier(a39)) if (e535.accessibility) this.raise(Ye1.DuplicateAccessibilityModifier, {
                    at: r67,
                    modifier: a39
                });
                else {
                    enforceOrder(r67, a39, a39, "override");
                    enforceOrder(r67, a39, a39, "static");
                    enforceOrder(r67, a39, a39, "readonly");
                    e535.accessibility = a39;
                }
                else {
                    if (Object.hasOwnProperty.call(e535, a39)) this.raise(Ye1.DuplicateModifier, {
                        at: r67,
                        modifier: a39
                    });
                    else {
                        enforceOrder(r67, a39, "static", "readonly");
                        enforceOrder(r67, a39, "static", "override");
                        enforceOrder(r67, a39, "override", "readonly");
                        enforceOrder(r67, a39, "abstract", "override");
                        incompatible(r67, a39, "declare", "override");
                        incompatible(r67, a39, "static", "abstract");
                    }
                    e535[a39] = true;
                }
                null != s172 && s172.includes(a39) && this.raise(Ye1.InvalidModifierOnTypeMember, {
                    at: r67,
                    modifier: a39
                });
            }
        }
        tsIsListTerminator(e536) {
            switch(e536){
                case "EnumMembers":
                case "TypeMembers":
                    return this.match(8);
                case "HeritageClauseElement":
                    return this.match(5);
                case "TupleElementTypes":
                    return this.match(3);
                case "TypeParametersOrArguments":
                    return this.match(48);
            }
            throw new Error("Unreachable");
        }
        tsParseList(e537, t303) {
            const s175 = [];
            while(!this.tsIsListTerminator(e537))s175.push(t303());
            return s175;
        }
        tsParseDelimitedList(e538, t304, s176) {
            return nonNull(this.tsParseDelimitedListWorker(e538, t304, true, s176));
        }
        tsParseDelimitedListWorker(e539, t305, s177, i105) {
            const r68 = [];
            let a40 = -1;
            for(;;){
                if (this.tsIsListTerminator(e539)) break;
                a40 = -1;
                const i104 = t305();
                if (null == i104) return;
                r68.push(i104);
                if (!this.eat(12)) {
                    if (this.tsIsListTerminator(e539)) break;
                    s177 && this.expect(12);
                    return;
                }
                a40 = this.state.lastTokStart;
            }
            i105 && (i105.value = a40);
            return r68;
        }
        tsParseBracketedList(e540, t306, s178, i106, r69) {
            i106 || (s178 ? this.expect(0) : this.expect(47));
            const a41 = this.tsParseDelimitedList(e540, t306, r69);
            s178 ? this.expect(3) : this.expect(48);
            return a41;
        }
        tsParseImportType() {
            const e541 = this.startNode();
            this.expect(83);
            this.expect(10);
            this.match(129) || this.raise(Ye1.UnsupportedImportTypeArgument, {
                at: this.state.startLoc
            });
            e541.argument = this.parseExprAtom();
            this.expect(11);
            this.eat(16) && (e541.qualifier = this.tsParseEntityName());
            this.match(47) && (e541.typeParameters = this.tsParseTypeArguments());
            return this.finishNode(e541, "TSImportType");
        }
        tsParseEntityName(e542 = true) {
            let t307 = this.parseIdentifier(e542);
            while(this.eat(16)){
                const s179 = this.startNodeAtNode(t307);
                s179.left = t307;
                s179.right = this.parseIdentifier(e542);
                t307 = this.finishNode(s179, "TSQualifiedName");
            }
            return t307;
        }
        tsParseTypeReference() {
            const e543 = this.startNode();
            e543.typeName = this.tsParseEntityName();
            !this.hasPrecedingLineBreak() && this.match(47) && (e543.typeParameters = this.tsParseTypeArguments());
            return this.finishNode(e543, "TSTypeReference");
        }
        tsParseThisTypePredicate(e544) {
            this.next();
            const t308 = this.startNodeAtNode(e544);
            t308.parameterName = e544;
            t308.typeAnnotation = this.tsParseTypeAnnotation(false);
            t308.asserts = false;
            return this.finishNode(t308, "TSTypePredicate");
        }
        tsParseThisTypeNode() {
            const e545 = this.startNode();
            this.next();
            return this.finishNode(e545, "TSThisType");
        }
        tsParseTypeQuery() {
            const e546 = this.startNode();
            this.expect(87);
            this.match(83) ? e546.exprName = this.tsParseImportType() : e546.exprName = this.tsParseEntityName();
            return this.finishNode(e546, "TSTypeQuery");
        }
        tsParseTypeParameter() {
            const e547 = this.startNode();
            e547.name = this.tsParseTypeParameterName();
            e547.constraint = this.tsEatThenParseType(81);
            e547.default = this.tsEatThenParseType(29);
            return this.finishNode(e547, "TSTypeParameter");
        }
        tsTryParseTypeParameters() {
            if (this.match(47)) return this.tsParseTypeParameters();
        }
        tsParseTypeParameters() {
            const e548 = this.startNode();
            this.match(47) || this.match(138) ? this.next() : this.unexpected();
            const t309 = {
                value: -1
            };
            e548.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true, t309);
            0 === e548.params.length && this.raise(Ye1.EmptyTypeParameters, {
                at: e548
            });
            -1 !== t309.value && this.addExtra(e548, "trailingComma", t309.value);
            return this.finishNode(e548, "TSTypeParameterDeclaration");
        }
        tsTryNextParseConstantContext() {
            if (75 !== this.lookahead().type) return null;
            this.next();
            const e549 = this.tsParseTypeReference();
            e549.typeParameters && this.raise(Ye1.CannotFindName, {
                at: e549.typeName,
                name: "const"
            });
            return e549;
        }
        tsFillSignature(e550, t310) {
            const s180 = 19 === e550;
            const i107 = "parameters";
            const r70 = "typeAnnotation";
            t310.typeParameters = this.tsTryParseTypeParameters();
            this.expect(10);
            t310[i107] = this.tsParseBindingListForSignature();
            (s180 || this.match(e550)) && (t310[r70] = this.tsParseTypeOrTypePredicateAnnotation(e550));
        }
        tsParseBindingListForSignature() {
            return this.parseBindingList(11, 41).map((e551)=>{
                "Identifier" !== e551.type && "RestElement" !== e551.type && "ObjectPattern" !== e551.type && "ArrayPattern" !== e551.type && this.raise(Ye1.UnsupportedSignatureParameterKind, {
                    at: e551,
                    type: e551.type
                });
                return e551;
            });
        }
        tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
        }
        tsParseSignatureMember(e552, t311) {
            this.tsFillSignature(14, t311);
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(t311, e552);
        }
        tsIsUnambiguouslyIndexSignature() {
            this.next();
            if (tokenIsIdentifier(this.state.type)) {
                this.next();
                return this.match(14);
            }
            return false;
        }
        tsTryParseIndexSignature(e553) {
            if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) return;
            this.expect(0);
            const t312 = this.parseIdentifier();
            t312.typeAnnotation = this.tsParseTypeAnnotation();
            this.resetEndLocation(t312);
            this.expect(3);
            e553.parameters = [
                t312
            ];
            const s181 = this.tsTryParseTypeAnnotation();
            s181 && (e553.typeAnnotation = s181);
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(e553, "TSIndexSignature");
        }
        tsParsePropertyOrMethodSignature(e554, t313) {
            this.eat(17) && (e554.optional = true);
            const s182 = e554;
            if (this.match(10) || this.match(47)) {
                t313 && this.raise(Ye1.ReadonlyForMethodSignature, {
                    at: e554
                });
                const i108 = s182;
                i108.kind && this.match(47) && this.raise(Ye1.AccesorCannotHaveTypeParameters, {
                    at: this.state.curPosition()
                });
                this.tsFillSignature(14, i108);
                this.tsParseTypeMemberSemicolon();
                const r71 = "parameters";
                const n31 = "typeAnnotation";
                if ("get" === i108.kind) {
                    if (i108[r71].length > 0) {
                        this.raise(a16.BadGetterArity, {
                            at: this.state.curPosition()
                        });
                        this.isThisParam(i108[r71][0]) && this.raise(Ye1.AccesorCannotDeclareThisParameter, {
                            at: this.state.curPosition()
                        });
                    }
                } else if ("set" === i108.kind) {
                    if (1 !== i108[r71].length) this.raise(a16.BadSetterArity, {
                        at: this.state.curPosition()
                    });
                    else {
                        const e555 = i108[r71][0];
                        this.isThisParam(e555) && this.raise(Ye1.AccesorCannotDeclareThisParameter, {
                            at: this.state.curPosition()
                        });
                        "Identifier" === e555.type && e555.optional && this.raise(Ye1.SetAccesorCannotHaveOptionalParameter, {
                            at: this.state.curPosition()
                        });
                        "RestElement" === e555.type && this.raise(Ye1.SetAccesorCannotHaveRestParameter, {
                            at: this.state.curPosition()
                        });
                    }
                    i108[n31] && this.raise(Ye1.SetAccesorCannotHaveReturnType, {
                        at: i108[n31]
                    });
                } else i108.kind = "method";
                return this.finishNode(i108, "TSMethodSignature");
            }
            {
                const e556 = s182;
                t313 && (e556.readonly = true);
                const i109 = this.tsTryParseTypeAnnotation();
                i109 && (e556.typeAnnotation = i109);
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(e556, "TSPropertySignature");
            }
        }
        tsParseTypeMember() {
            const e557 = this.startNode();
            if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", e557);
            if (this.match(77)) {
                const t314 = this.startNode();
                this.next();
                if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSConstructSignatureDeclaration", e557);
                e557.key = this.createIdentifier(t314, "new");
                return this.tsParsePropertyOrMethodSignature(e557, false);
            }
            this.tsParseModifiers({
                modified: e557,
                allowedModifiers: [
                    "readonly"
                ],
                disallowedModifiers: [
                    "declare",
                    "abstract",
                    "private",
                    "protected",
                    "public",
                    "static",
                    "override"
                ]
            });
            const t315 = this.tsTryParseIndexSignature(e557);
            if (t315) return t315;
            this.parsePropertyName(e557);
            if (!e557.computed && "Identifier" === e557.key.type && ("get" === e557.key.name || "set" === e557.key.name) && this.tsTokenCanFollowModifier()) {
                e557.kind = e557.key.name;
                this.parsePropertyName(e557);
            }
            return this.tsParsePropertyOrMethodSignature(e557, !!e557.readonly);
        }
        tsParseTypeLiteral() {
            const e558 = this.startNode();
            e558.members = this.tsParseObjectTypeMembers();
            return this.finishNode(e558, "TSTypeLiteral");
        }
        tsParseObjectTypeMembers() {
            this.expect(5);
            const e559 = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            this.expect(8);
            return e559;
        }
        tsIsStartOfMappedType() {
            this.next();
            if (this.eat(53)) return this.isContextual(118);
            this.isContextual(118) && this.next();
            if (!this.match(0)) return false;
            this.next();
            if (!this.tsIsIdentifier()) return false;
            this.next();
            return this.match(58);
        }
        tsParseMappedTypeParameter() {
            const e560 = this.startNode();
            e560.name = this.tsParseTypeParameterName();
            e560.constraint = this.tsExpectThenParseType(58);
            return this.finishNode(e560, "TSTypeParameter");
        }
        tsParseMappedType() {
            const e561 = this.startNode();
            this.expect(5);
            if (this.match(53)) {
                e561.readonly = this.state.value;
                this.next();
                this.expectContextual(118);
            } else this.eatContextual(118) && (e561.readonly = true);
            this.expect(0);
            e561.typeParameter = this.tsParseMappedTypeParameter();
            e561.nameType = this.eatContextual(93) ? this.tsParseType() : null;
            this.expect(3);
            if (this.match(53)) {
                e561.optional = this.state.value;
                this.next();
                this.expect(17);
            } else this.eat(17) && (e561.optional = true);
            e561.typeAnnotation = this.tsTryParseType();
            this.semicolon();
            this.expect(8);
            return this.finishNode(e561, "TSMappedType");
        }
        tsParseTupleType() {
            const e562 = this.startNode();
            e562.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let t316 = false;
            let s183 = null;
            e562.elementTypes.forEach((e563)=>{
                var i110;
                let { type: r72  } = e563;
                !t316 || "TSRestType" === r72 || "TSOptionalType" === r72 || "TSNamedTupleMember" === r72 && e563.optional || this.raise(Ye1.OptionalTypeBeforeRequired, {
                    at: e563
                });
                t316 = t316 || "TSNamedTupleMember" === r72 && e563.optional || "TSOptionalType" === r72;
                if ("TSRestType" === r72) {
                    e563 = e563.typeAnnotation;
                    r72 = e563.type;
                }
                const a42 = "TSNamedTupleMember" === r72;
                s183 = null != (i110 = s183) ? i110 : a42;
                s183 !== a42 && this.raise(Ye1.MixedLabeledAndUnlabeledElements, {
                    at: e563
                });
            });
            return this.finishNode(e562, "TSTupleType");
        }
        tsParseTupleElementType() {
            const { start: e566 , startLoc: t317  } = this.state;
            const s184 = this.eat(21);
            let i111 = this.tsParseType();
            const r73 = this.eat(17);
            const a43 = this.eat(14);
            if (a43) {
                const e564 = this.startNodeAtNode(i111);
                e564.optional = r73;
                if ("TSTypeReference" !== i111.type || i111.typeParameters || "Identifier" !== i111.typeName.type) {
                    this.raise(Ye1.InvalidTupleMemberLabel, {
                        at: i111
                    });
                    e564.label = i111;
                } else e564.label = i111.typeName;
                e564.elementType = this.tsParseType();
                i111 = this.finishNode(e564, "TSNamedTupleMember");
            } else if (r73) {
                const e565 = this.startNodeAtNode(i111);
                e565.typeAnnotation = i111;
                i111 = this.finishNode(e565, "TSOptionalType");
            }
            if (s184) {
                const s185 = this.startNodeAt(e566, t317);
                s185.typeAnnotation = i111;
                i111 = this.finishNode(s185, "TSRestType");
            }
            return i111;
        }
        tsParseParenthesizedType() {
            const e567 = this.startNode();
            this.expect(10);
            e567.typeAnnotation = this.tsParseType();
            this.expect(11);
            return this.finishNode(e567, "TSParenthesizedType");
        }
        tsParseFunctionOrConstructorType(e568, t318) {
            const s186 = this.startNode();
            if ("TSConstructorType" === e568) {
                s186.abstract = !!t318;
                t318 && this.next();
                this.next();
            }
            this.tsFillSignature(19, s186);
            return this.finishNode(s186, e568);
        }
        tsParseLiteralTypeNode() {
            const e569 = this.startNode();
            e569.literal = (()=>{
                switch(this.state.type){
                    case 130:
                    case 131:
                    case 129:
                    case 85:
                    case 86:
                        return this.parseExprAtom();
                    default:
                        throw this.unexpected();
                }
            })();
            return this.finishNode(e569, "TSLiteralType");
        }
        tsParseTemplateLiteralType() {
            const e570 = this.startNode();
            e570.literal = this.parseTemplate(false);
            return this.finishNode(e570, "TSLiteralType");
        }
        parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
        }
        tsParseThisTypeOrThisTypePredicate() {
            const e571 = this.tsParseThisTypeNode();
            return this.isContextual(113) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(e571) : e571;
        }
        tsParseNonArrayType() {
            switch(this.state.type){
                case 129:
                case 130:
                case 131:
                case 85:
                case 86:
                    return this.tsParseLiteralTypeNode();
                case 53:
                    if ("-" === this.state.value) {
                        const e572 = this.startNode();
                        const t319 = this.lookahead();
                        if (130 !== t319.type && 131 !== t319.type) throw this.unexpected();
                        e572.literal = this.parseMaybeUnary();
                        return this.finishNode(e572, "TSLiteralType");
                    }
                    break;
                case 78:
                    return this.tsParseThisTypeOrThisTypePredicate();
                case 87:
                    return this.tsParseTypeQuery();
                case 83:
                    return this.tsParseImportType();
                case 5:
                    return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
                case 0:
                    return this.tsParseTupleType();
                case 10:
                    return this.tsParseParenthesizedType();
                case 25:
                case 24:
                    return this.tsParseTemplateLiteralType();
                default:
                    {
                        const { type: e573  } = this.state;
                        if (tokenIsIdentifier(e573) || 88 === e573 || 84 === e573) {
                            const t320 = 88 === e573 ? "TSVoidKeyword" : 84 === e573 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
                            if (void 0 !== t320 && 46 !== this.lookaheadCharCode()) {
                                const e574 = this.startNode();
                                this.next();
                                return this.finishNode(e574, t320);
                            }
                            return this.tsParseTypeReference();
                        }
                    }
            }
            throw this.unexpected();
        }
        tsParseArrayTypeOrHigher() {
            let e575 = this.tsParseNonArrayType();
            while(!this.hasPrecedingLineBreak() && this.eat(0))if (this.match(3)) {
                const t321 = this.startNodeAtNode(e575);
                t321.elementType = e575;
                this.expect(3);
                e575 = this.finishNode(t321, "TSArrayType");
            } else {
                const t322 = this.startNodeAtNode(e575);
                t322.objectType = e575;
                t322.indexType = this.tsParseType();
                this.expect(3);
                e575 = this.finishNode(t322, "TSIndexedAccessType");
            }
            return e575;
        }
        tsParseTypeOperator() {
            const e576 = this.startNode();
            const t323 = this.state.value;
            this.next();
            e576.operator = t323;
            e576.typeAnnotation = this.tsParseTypeOperatorOrHigher();
            "readonly" === t323 && this.tsCheckTypeAnnotationForReadOnly(e576);
            return this.finishNode(e576, "TSTypeOperator");
        }
        tsCheckTypeAnnotationForReadOnly(e577) {
            switch(e577.typeAnnotation.type){
                case "TSTupleType":
                case "TSArrayType":
                    return;
                default:
                    this.raise(Ye1.UnexpectedReadonly, {
                        at: e577
                    });
            }
        }
        tsParseInferType() {
            const e578 = this.startNode();
            this.expectContextual(112);
            const t324 = this.startNode();
            t324.name = this.tsParseTypeParameterName();
            e578.typeParameter = this.finishNode(t324, "TSTypeParameter");
            return this.finishNode(e578, "TSInferType");
        }
        tsParseTypeOperatorOrHigher() {
            const e579 = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
            return e579 ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
        }
        tsParseUnionOrIntersectionType(e580, t325, s187) {
            const i112 = this.startNode();
            const r74 = this.eat(s187);
            const a44 = [];
            do {
                a44.push(t325());
            }while (this.eat(s187))
            if (1 === a44.length && !r74) return a44[0];
            i112.types = a44;
            return this.finishNode(i112, e580);
        }
        tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
        }
        tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
        }
        tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
        }
        tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                this.next();
                return true;
            }
            if (this.match(5)) {
                const { errors: e581  } = this.state;
                const t326 = e581.length;
                try {
                    this.parseObjectLike(8, true);
                    return e581.length === t326;
                } catch (e) {
                    return false;
                }
            }
            if (this.match(0)) {
                this.next();
                const { errors: e582  } = this.state;
                const t327 = e582.length;
                try {
                    this.parseBindingList(3, 93, true);
                    return e582.length === t327;
                } catch (e) {
                    return false;
                }
            }
            return false;
        }
        tsIsUnambiguouslyStartOfFunctionType() {
            this.next();
            if (this.match(11) || this.match(21)) return true;
            if (this.tsSkipParameterStart()) {
                if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return true;
                if (this.match(11)) {
                    this.next();
                    if (this.match(19)) return true;
                }
            }
            return false;
        }
        tsParseTypeOrTypePredicateAnnotation(e583) {
            return this.tsInType(()=>{
                const t328 = this.startNode();
                this.expect(e583);
                const s188 = this.startNode();
                const i113 = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
                if (i113 && this.match(78)) {
                    let e584 = this.tsParseThisTypeOrThisTypePredicate();
                    if ("TSThisType" === e584.type) {
                        s188.parameterName = e584;
                        s188.asserts = true;
                        s188.typeAnnotation = null;
                        e584 = this.finishNode(s188, "TSTypePredicate");
                    } else {
                        this.resetStartLocationFromNode(e584, s188);
                        e584.asserts = true;
                    }
                    t328.typeAnnotation = e584;
                    return this.finishNode(t328, "TSTypeAnnotation");
                }
                const r75 = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
                if (!r75) {
                    if (!i113) return this.tsParseTypeAnnotation(false, t328);
                    s188.parameterName = this.parseIdentifier();
                    s188.asserts = i113;
                    s188.typeAnnotation = null;
                    t328.typeAnnotation = this.finishNode(s188, "TSTypePredicate");
                    return this.finishNode(t328, "TSTypeAnnotation");
                }
                const a45 = this.tsParseTypeAnnotation(false);
                s188.parameterName = r75;
                s188.typeAnnotation = a45;
                s188.asserts = i113;
                t328.typeAnnotation = this.finishNode(s188, "TSTypePredicate");
                return this.finishNode(t328, "TSTypeAnnotation");
            });
        }
        tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
        }
        tsTryParseTypeAnnotation() {
            return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
        }
        tsTryParseType() {
            return this.tsEatThenParseType(14);
        }
        tsParseTypePredicatePrefix() {
            const e585 = this.parseIdentifier();
            if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {
                this.next();
                return e585;
            }
        }
        tsParseTypePredicateAsserts() {
            if (106 !== this.state.type) return false;
            const e586 = this.state.containsEsc;
            this.next();
            if (!tokenIsIdentifier(this.state.type) && !this.match(78)) return false;
            e586 && this.raise(a16.InvalidEscapedReservedWord, {
                at: this.state.lastTokStartLoc,
                reservedWord: "asserts"
            });
            return true;
        }
        tsParseTypeAnnotation(e587 = true, t329 = this.startNode()) {
            this.tsInType(()=>{
                e587 && this.expect(14);
                t329.typeAnnotation = this.tsParseType();
            });
            return this.finishNode(t329, "TSTypeAnnotation");
        }
        tsParseType() {
            assert1(this.state.inType);
            const e588 = this.tsParseNonConditionalType();
            if (this.hasPrecedingLineBreak() || !this.eat(81)) return e588;
            const t330 = this.startNodeAtNode(e588);
            t330.checkType = e588;
            t330.extendsType = this.tsParseNonConditionalType();
            this.expect(17);
            t330.trueType = this.tsParseType();
            this.expect(14);
            t330.falseType = this.tsParseType();
            return this.finishNode(t330, "TSConditionalType");
        }
        isAbstractConstructorSignature() {
            return this.isContextual(120) && 77 === this.lookahead().type;
        }
        tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
        }
        tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(Ye1.ReservedTypeAssertion, {
                at: this.state.startLoc
            });
            const e589 = this.startNode();
            const t331 = this.tsTryNextParseConstantContext();
            e589.typeAnnotation = t331 || this.tsNextThenParseType();
            this.expect(48);
            e589.expression = this.parseMaybeUnary();
            return this.finishNode(e589, "TSTypeAssertion");
        }
        tsParseHeritageClause(e590) {
            const t332 = this.state.startLoc;
            const s189 = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));
            s189.length || this.raise(Ye1.EmptyHeritageClauseType, {
                at: t332,
                token: e590
            });
            return s189;
        }
        tsParseExpressionWithTypeArguments() {
            const e591 = this.startNode();
            e591.expression = this.tsParseEntityName();
            this.match(47) && (e591.typeParameters = this.tsParseTypeArguments());
            return this.finishNode(e591, "TSExpressionWithTypeArguments");
        }
        tsParseInterfaceDeclaration(e592, t333 = {}) {
            if (this.hasFollowingLineBreak()) return null;
            this.expectContextual(125);
            t333.declare && (e592.declare = true);
            if (tokenIsIdentifier(this.state.type)) {
                e592.id = this.parseIdentifier();
                this.checkIdentifier(e592.id, ne4);
            } else {
                e592.id = null;
                this.raise(Ye1.MissingInterfaceName, {
                    at: this.state.startLoc
                });
            }
            e592.typeParameters = this.tsTryParseTypeParameters();
            this.eat(81) && (e592.extends = this.tsParseHeritageClause("extends"));
            const s190 = this.startNode();
            s190.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
            e592.body = this.finishNode(s190, "TSInterfaceBody");
            return this.finishNode(e592, "TSInterfaceDeclaration");
        }
        tsParseTypeAliasDeclaration(e593) {
            e593.id = this.parseIdentifier();
            this.checkIdentifier(e593.id, oe4);
            e593.typeAnnotation = this.tsInType(()=>{
                e593.typeParameters = this.tsTryParseTypeParameters();
                this.expect(29);
                if (this.isContextual(111) && 16 !== this.lookahead().type) {
                    const e594 = this.startNode();
                    this.next();
                    return this.finishNode(e594, "TSIntrinsicKeyword");
                }
                return this.tsParseType();
            });
            this.semicolon();
            return this.finishNode(e593, "TSTypeAliasDeclaration");
        }
        tsInNoContext(e595) {
            const t334 = this.state.context;
            this.state.context = [
                t334[0]
            ];
            try {
                return e595();
            } finally{
                this.state.context = t334;
            }
        }
        tsInType(e596) {
            const t335 = this.state.inType;
            this.state.inType = true;
            try {
                return e596();
            } finally{
                this.state.inType = t335;
            }
        }
        tsEatThenParseType(e597) {
            return this.match(e597) ? this.tsNextThenParseType() : void 0;
        }
        tsExpectThenParseType(e598) {
            return this.tsDoThenParseType(()=>this.expect(e598)
            );
        }
        tsNextThenParseType() {
            return this.tsDoThenParseType(()=>this.next()
            );
        }
        tsDoThenParseType(e599) {
            return this.tsInType(()=>{
                e599();
                return this.tsParseType();
            });
        }
        tsParseEnumMember() {
            const e600 = this.startNode();
            e600.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);
            this.eat(29) && (e600.initializer = this.parseMaybeAssignAllowIn());
            return this.finishNode(e600, "TSEnumMember");
        }
        tsParseEnumDeclaration(e601, t336 = {}) {
            t336.const && (e601.const = true);
            t336.declare && (e601.declare = true);
            this.expectContextual(122);
            e601.id = this.parseIdentifier();
            this.checkIdentifier(e601.id, e601.const ? ue2 : he2);
            this.expect(5);
            e601.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
            this.expect(8);
            return this.finishNode(e601, "TSEnumDeclaration");
        }
        tsParseModuleBlock() {
            const e602 = this.startNode();
            this.scope.enter(0);
            this.expect(5);
            this.parseBlockOrModuleBlockBody(e602.body = [], void 0, true, 8);
            this.scope.exit();
            return this.finishNode(e602, "TSModuleBlock");
        }
        tsParseModuleOrNamespaceDeclaration(e603, t337 = false) {
            e603.id = this.parseIdentifier();
            t337 || this.checkIdentifier(e603.id, de2);
            if (this.eat(16)) {
                const t338 = this.startNode();
                this.tsParseModuleOrNamespaceDeclaration(t338, true);
                e603.body = t338;
            } else {
                this.scope.enter(256);
                this.prodParam.enter(0);
                e603.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
            }
            return this.finishNode(e603, "TSModuleDeclaration");
        }
        tsParseAmbientExternalModuleDeclaration(e604) {
            if (this.isContextual(109)) {
                e604.global = true;
                e604.id = this.parseIdentifier();
            } else this.match(129) ? e604.id = this.parseExprAtom() : this.unexpected();
            if (this.match(5)) {
                this.scope.enter(256);
                this.prodParam.enter(0);
                e604.body = this.tsParseModuleBlock();
                this.prodParam.exit();
                this.scope.exit();
            } else this.semicolon();
            return this.finishNode(e604, "TSModuleDeclaration");
        }
        tsParseImportEqualsDeclaration(e605, t339) {
            e605.isExport = t339 || false;
            e605.id = this.parseIdentifier();
            this.checkIdentifier(e605.id, ie4);
            this.expect(29);
            const s191 = this.tsParseModuleReference();
            "type" === e605.importKind && "TSExternalModuleReference" !== s191.type && this.raise(Ye1.ImportAliasHasImportType, {
                at: s191
            });
            e605.moduleReference = s191;
            this.semicolon();
            return this.finishNode(e605, "TSImportEqualsDeclaration");
        }
        tsIsExternalModuleReference() {
            return this.isContextual(116) && 40 === this.lookaheadCharCode();
        }
        tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
        }
        tsParseExternalModuleReference() {
            const e606 = this.startNode();
            this.expectContextual(116);
            this.expect(10);
            if (!this.match(129)) throw this.unexpected();
            e606.expression = this.parseExprAtom();
            this.expect(11);
            return this.finishNode(e606, "TSExternalModuleReference");
        }
        tsLookAhead(e607) {
            const t340 = this.state.clone();
            const s192 = e607();
            this.state = t340;
            return s192;
        }
        tsTryParseAndCatch(e608) {
            const t341 = this.tryParse((t342)=>e608() || t342()
            );
            if (!t341.aborted && t341.node) {
                t341.error && (this.state = t341.failState);
                return t341.node;
            }
        }
        tsTryParse(e609) {
            const t343 = this.state.clone();
            const s193 = e609();
            if (void 0 !== s193 && false !== s193) return s193;
            this.state = t343;
        }
        tsTryParseDeclare(e610) {
            if (this.isLineTerminator()) return;
            let t344 = this.state.type;
            let s194;
            if (this.isContextual(99)) {
                t344 = 74;
                s194 = "let";
            }
            return this.tsInAmbientContext(()=>{
                if (68 === t344) {
                    e610.declare = true;
                    return this.parseFunctionStatement(e610, false, true);
                }
                if (80 === t344) {
                    e610.declare = true;
                    return this.parseClass(e610, true, false);
                }
                if (122 === t344) return this.tsParseEnumDeclaration(e610, {
                    declare: true
                });
                if (109 === t344) return this.tsParseAmbientExternalModuleDeclaration(e610);
                if (75 === t344 || 74 === t344) {
                    if (!this.match(75) || !this.isLookaheadContextual("enum")) {
                        e610.declare = true;
                        return this.parseVarStatement(e610, s194 || this.state.value, true);
                    }
                    this.expect(75);
                    return this.tsParseEnumDeclaration(e610, {
                        const: true,
                        declare: true
                    });
                }
                if (125 === t344) {
                    const t345 = this.tsParseInterfaceDeclaration(e610, {
                        declare: true
                    });
                    if (t345) return t345;
                }
                return tokenIsIdentifier(t344) ? this.tsParseDeclaration(e610, this.state.value, true) : void 0;
            });
        }
        tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true);
        }
        tsParseExpressionStatement(e611, t346) {
            switch(t346.name){
                case "declare":
                    {
                        const t347 = this.tsTryParseDeclare(e611);
                        if (t347) {
                            t347.declare = true;
                            return t347;
                        }
                        break;
                    }
                case "global":
                    if (this.match(5)) {
                        this.scope.enter(256);
                        this.prodParam.enter(0);
                        const s195 = e611;
                        s195.global = true;
                        s195.id = t346;
                        s195.body = this.tsParseModuleBlock();
                        this.scope.exit();
                        this.prodParam.exit();
                        return this.finishNode(s195, "TSModuleDeclaration");
                    }
                    break;
                default:
                    return this.tsParseDeclaration(e611, t346.name, false);
            }
        }
        tsParseDeclaration(e612, t348, s196) {
            switch(t348){
                case "abstract":
                    if (this.tsCheckLineTerminator(s196) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(e612);
                    break;
                case "module":
                    if (this.tsCheckLineTerminator(s196)) {
                        if (this.match(129)) return this.tsParseAmbientExternalModuleDeclaration(e612);
                        if (tokenIsIdentifier(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(e612);
                    }
                    break;
                case "namespace":
                    if (this.tsCheckLineTerminator(s196) && tokenIsIdentifier(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(e612);
                    break;
                case "type":
                    if (this.tsCheckLineTerminator(s196) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(e612);
                    break;
            }
        }
        tsCheckLineTerminator(e613) {
            if (e613) {
                if (this.hasFollowingLineBreak()) return false;
                this.next();
                return true;
            }
            return !this.isLineTerminator();
        }
        tsTryParseGenericAsyncArrowFunction(e614, t349) {
            if (!this.match(47)) return;
            const s197 = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const i114 = this.tsTryParseAndCatch(()=>{
                const s198 = this.startNodeAt(e614, t349);
                s198.typeParameters = this.tsParseTypeParameters();
                super.parseFunctionParams(s198);
                s198.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
                this.expect(19);
                return s198;
            });
            this.state.maybeInArrowParameters = s197;
            return i114 ? this.parseArrowExpression(i114, null, true) : void 0;
        }
        tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt()) return this.tsParseTypeArguments();
        }
        tsParseTypeArguments() {
            const e615 = this.startNode();
            e615.params = this.tsInType(()=>this.tsInNoContext(()=>{
                    this.expect(47);
                    return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
                })
            );
            0 === e615.params.length && this.raise(Ye1.EmptyTypeArguments, {
                at: e615
            });
            this.expect(48);
            return this.finishNode(e615, "TSTypeParameterInstantiation");
        }
        tsIsDeclarationStart() {
            return tokenIsTSDeclarationStart(this.state.type);
        }
        isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
        }
        parseAssignableListItem(e616, t351) {
            const s199 = this.state.start;
            const i115 = this.state.startLoc;
            let r76;
            let a46 = false;
            let n32 = false;
            if (void 0 !== e616) {
                const t350 = {};
                this.tsParseModifiers({
                    modified: t350,
                    allowedModifiers: [
                        "public",
                        "private",
                        "protected",
                        "override",
                        "readonly"
                    ]
                });
                r76 = t350.accessibility;
                n32 = t350.override;
                a46 = t350.readonly;
                false === e616 && (r76 || a46 || n32) && this.raise(Ye1.UnexpectedParameterModifier, {
                    at: i115
                });
            }
            const o191 = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(o191);
            const h12 = this.parseMaybeDefault(o191.start, o191.loc.start, o191);
            if (r76 || a46 || n32) {
                const e617 = this.startNodeAt(s199, i115);
                t351.length && (e617.decorators = t351);
                r76 && (e617.accessibility = r76);
                a46 && (e617.readonly = a46);
                n32 && (e617.override = n32);
                "Identifier" !== h12.type && "AssignmentPattern" !== h12.type && this.raise(Ye1.UnsupportedParameterPropertyKind, {
                    at: e617
                });
                e617.parameter = h12;
                return this.finishNode(e617, "TSParameterProperty");
            }
            t351.length && (o191.decorators = t351);
            return h12;
        }
        isSimpleParameter(e618) {
            return "TSParameterProperty" === e618.type && super.isSimpleParameter(e618.parameter) || super.isSimpleParameter(e618);
        }
        parseFunctionBodyAndFinish(e619, t352, s200 = false) {
            this.match(14) && (e619.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const i116 = "FunctionDeclaration" === t352 ? "TSDeclareFunction" : "ClassMethod" === t352 || "ClassPrivateMethod" === t352 ? "TSDeclareMethod" : void 0;
            if (i116 && !this.match(5) && this.isLineTerminator()) this.finishNode(e619, i116);
            else {
                if ("TSDeclareFunction" === i116 && this.state.isAmbientContext) {
                    this.raise(Ye1.DeclareFunctionHasImplementation, {
                        at: e619
                    });
                    if (e619.declare) {
                        super.parseFunctionBodyAndFinish(e619, i116, s200);
                        return;
                    }
                }
                super.parseFunctionBodyAndFinish(e619, t352, s200);
            }
        }
        registerFunctionStatementId(e620) {
            !e620.body && e620.id ? this.checkIdentifier(e620.id, ce2) : super.registerFunctionStatementId(...arguments);
        }
        tsCheckForInvalidTypeCasts(e621) {
            e621.forEach((e622)=>{
                "TSTypeCastExpression" === (null == e622 ? void 0 : e622.type) && this.raise(Ye1.UnexpectedTypeAnnotation, {
                    at: e622.typeAnnotation
                });
            });
        }
        toReferencedList(e623, t) {
            this.tsCheckForInvalidTypeCasts(e623);
            return e623;
        }
        parseArrayLike(...e624) {
            const t353 = super.parseArrayLike(...e624);
            "ArrayExpression" === t353.type && this.tsCheckForInvalidTypeCasts(t353.elements);
            return t353;
        }
        parseSubscript(e625, t354, s201, i118, r77) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
                this.state.canStartJSXElement = false;
                this.next();
                const i117 = this.startNodeAt(t354, s201);
                i117.expression = e625;
                return this.finishNode(i117, "TSNonNullExpression");
            }
            let a47 = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
                if (i118) {
                    r77.stop = true;
                    return e625;
                }
                r77.optionalChainMember = a47 = true;
                this.next();
            }
            if (this.match(47) || this.match(51)) {
                let n33;
                const o201 = this.tsTryParseAndCatch(()=>{
                    if (!i118 && this.atPossibleAsyncArrow(e625)) {
                        const e626 = this.tsTryParseGenericAsyncArrowFunction(t354, s201);
                        if (e626) return e626;
                    }
                    const o22 = this.startNodeAt(t354, s201);
                    o22.callee = e625;
                    const h13 = this.tsParseTypeArgumentsInExpression();
                    if (h13) {
                        if (a47 && !this.match(10)) {
                            n33 = this.state.curPosition();
                            this.unexpected();
                        }
                        if (!i118 && this.eat(10)) {
                            o22.arguments = this.parseCallExpressionArguments(11, false);
                            this.tsCheckForInvalidTypeCasts(o22.arguments);
                            o22.typeParameters = h13;
                            r77.optionalChainMember && (o22.optional = a47);
                            return this.finishCallExpression(o22, r77.optionalChainMember);
                        }
                        if (tokenIsTemplate(this.state.type)) {
                            const i119 = this.parseTaggedTemplateExpression(e625, t354, s201, r77);
                            i119.typeParameters = h13;
                            return i119;
                        }
                    }
                    this.unexpected();
                });
                n33 && this.unexpected(n33, 10);
                if (o201) return o201;
            }
            return super.parseSubscript(e625, t354, s201, i118, r77);
        }
        parseNewArguments(e627) {
            if (this.match(47) || this.match(51)) {
                const t355 = this.tsTryParseAndCatch(()=>{
                    const e628 = this.tsParseTypeArgumentsInExpression();
                    this.match(10) || this.unexpected();
                    return e628;
                });
                t355 && (e627.typeParameters = t355);
            }
            super.parseNewArguments(e627);
        }
        parseExprOp(e629, t356, s202, i120) {
            if (tokenOperatorPrecedence(58) > i120 && !this.hasPrecedingLineBreak() && this.isContextual(93)) {
                const r78 = this.startNodeAt(t356, s202);
                r78.expression = e629;
                const a48 = this.tsTryNextParseConstantContext();
                r78.typeAnnotation = a48 || this.tsNextThenParseType();
                this.finishNode(r78, "TSAsExpression");
                this.reScan_lt_gt();
                return this.parseExprOp(r78, t356, s202, i120);
            }
            return super.parseExprOp(e629, t356, s202, i120);
        }
        checkReservedWord(e630, t357, s203, i121) {
            this.state.isAmbientContext || super.checkReservedWord(e630, t357, s203, i121);
        }
        checkDuplicateExports() {}
        parseImport(e631) {
            e631.importKind = "value";
            if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
                let t358 = this.lookahead();
                if (this.isContextual(126) && 12 !== t358.type && 97 !== t358.type && 29 !== t358.type) {
                    e631.importKind = "type";
                    this.next();
                    t358 = this.lookahead();
                }
                if (tokenIsIdentifier(this.state.type) && 29 === t358.type) return this.tsParseImportEqualsDeclaration(e631);
            }
            const t359 = super.parseImport(e631);
            "type" === t359.importKind && t359.specifiers.length > 1 && "ImportDefaultSpecifier" === t359.specifiers[0].type && this.raise(Ye1.TypeImportCannotSpecifyDefaultAndNamed, {
                at: t359
            });
            return t359;
        }
        parseExport(e632) {
            if (this.match(83)) {
                this.next();
                if (this.isContextual(126) && 61 !== this.lookaheadCharCode()) {
                    e632.importKind = "type";
                    this.next();
                } else e632.importKind = "value";
                return this.tsParseImportEqualsDeclaration(e632, true);
            }
            if (this.eat(29)) {
                const t360 = e632;
                t360.expression = this.parseExpression();
                this.semicolon();
                return this.finishNode(t360, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
                const t361 = e632;
                this.expectContextual(124);
                t361.id = this.parseIdentifier();
                this.semicolon();
                return this.finishNode(t361, "TSNamespaceExportDeclaration");
            }
            if (this.isContextual(126) && 5 === this.lookahead().type) {
                this.next();
                e632.exportKind = "type";
            } else e632.exportKind = "value";
            return super.parseExport(e632);
        }
        isAbstractClass() {
            return this.isContextual(120) && 80 === this.lookahead().type;
        }
        parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
                const e633 = this.startNode();
                this.next();
                e633.abstract = true;
                this.parseClass(e633, true, true);
                return e633;
            }
            if (this.match(125)) {
                const e634 = this.tsParseInterfaceDeclaration(this.startNode());
                if (e634) return e634;
            }
            return super.parseExportDefaultExpression();
        }
        parseVarStatement(e636, t362, s205 = false) {
            const { isAmbientContext: i122  } = this.state;
            const r79 = super.parseVarStatement(e636, t362, s205 || i122);
            if (!i122) return r79;
            for (const { id: e635 , init: s204  } of r79.declarations)s204 && ("const" !== t362 || e635.typeAnnotation ? this.raise(Ye1.InitializerNotAllowedInAmbientContext, {
                at: s204
            }) : "StringLiteral" !== s204.type && "BooleanLiteral" !== s204.type && "NumericLiteral" !== s204.type && "BigIntLiteral" !== s204.type && ("TemplateLiteral" !== s204.type || s204.expressions.length > 0) && !isPossiblyLiteralEnum(s204) && this.raise(Ye1.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
                at: s204
            }));
            return r79;
        }
        parseStatementContent(e639, t363) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
                const e637 = this.startNode();
                this.expect(75);
                return this.tsParseEnumDeclaration(e637, {
                    const: true
                });
            }
            if (this.isContextual(122)) return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(125)) {
                const e638 = this.tsParseInterfaceDeclaration(this.startNode());
                if (e638) return e638;
            }
            return super.parseStatementContent(e639, t363);
        }
        parseAccessModifier() {
            return this.tsParseModifier([
                "public",
                "protected",
                "private"
            ]);
        }
        tsHasSomeModifiers(e640, t364) {
            return t364.some((t365)=>tsIsAccessModifier(t365) ? e640.accessibility === t365 : !!e640[t365]
            );
        }
        tsIsStartOfStaticBlocks() {
            return this.isContextual(104) && 123 === this.lookaheadCharCode();
        }
        parseClassMember(e641, t366, s206) {
            const i123 = [
                "declare",
                "private",
                "public",
                "protected",
                "override",
                "abstract",
                "readonly",
                "static"
            ];
            this.tsParseModifiers({
                modified: t366,
                allowedModifiers: i123,
                stopOnStartOfClassStaticBlock: true
            });
            const callParseClassMemberWithIsStatic = ()=>{
                if (this.tsIsStartOfStaticBlocks()) {
                    this.next();
                    this.next();
                    this.tsHasSomeModifiers(t366, i123) && this.raise(Ye1.StaticBlockCannotHaveModifier, {
                        at: this.state.curPosition()
                    });
                    this.parseClassStaticBlock(e641, t366);
                } else this.parseClassMemberWithIsStatic(e641, t366, s206, !!t366.static);
            };
            t366.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
        }
        parseClassMemberWithIsStatic(e642, t367, s207, i124) {
            const r80 = this.tsTryParseIndexSignature(t367);
            if (r80) {
                e642.body.push(r80);
                t367.abstract && this.raise(Ye1.IndexSignatureHasAbstract, {
                    at: t367
                });
                t367.accessibility && this.raise(Ye1.IndexSignatureHasAccessibility, {
                    at: t367,
                    modifier: t367.accessibility
                });
                t367.declare && this.raise(Ye1.IndexSignatureHasDeclare, {
                    at: t367
                });
                t367.override && this.raise(Ye1.IndexSignatureHasOverride, {
                    at: t367
                });
            } else {
                !this.state.inAbstractClass && t367.abstract && this.raise(Ye1.NonAbstractClassHasAbstractMethod, {
                    at: t367
                });
                t367.override && (s207.hadSuperClass || this.raise(Ye1.OverrideNotInSubClass, {
                    at: t367
                }));
                super.parseClassMemberWithIsStatic(e642, t367, s207, i124);
            }
        }
        parsePostMemberNameModifiers(e643) {
            const t368 = this.eat(17);
            t368 && (e643.optional = true);
            e643.readonly && this.match(10) && this.raise(Ye1.ClassMethodHasReadonly, {
                at: e643
            });
            e643.declare && this.match(10) && this.raise(Ye1.ClassMethodHasDeclare, {
                at: e643
            });
        }
        parseExpressionStatement(e644, t369) {
            const s208 = "Identifier" === t369.type ? this.tsParseExpressionStatement(e644, t369) : void 0;
            return s208 || super.parseExpressionStatement(e644, t369);
        }
        shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
        }
        parseConditional(e645, t370, s209, i125) {
            if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(e645, t370, s209, i125);
            const r81 = this.tryParse(()=>super.parseConditional(e645, t370, s209)
            );
            if (!r81.node) {
                r81.error && super.setOptionalParametersError(i125, r81.error);
                return e645;
            }
            r81.error && (this.state = r81.failState);
            return r81.node;
        }
        parseParenItem(e646, t371, s210) {
            e646 = super.parseParenItem(e646, t371, s210);
            if (this.eat(17)) {
                e646.optional = true;
                this.resetEndLocation(e646);
            }
            if (this.match(14)) {
                const i126 = this.startNodeAt(t371, s210);
                i126.expression = e646;
                i126.typeAnnotation = this.tsParseTypeAnnotation();
                return this.finishNode(i126, "TSTypeCastExpression");
            }
            return e646;
        }
        parseExportDeclaration(e647) {
            if (!this.state.isAmbientContext && this.isContextual(121)) return this.tsInAmbientContext(()=>this.parseExportDeclaration(e647)
            );
            const t372 = this.state.start;
            const s211 = this.state.startLoc;
            const i127 = this.eatContextual(121);
            if (i127 && (this.isContextual(121) || !this.shouldParseExportDeclaration())) throw this.raise(Ye1.ExpectedAmbientAfterExportDeclare, {
                at: this.state.startLoc
            });
            const r82 = tokenIsIdentifier(this.state.type);
            const a49 = r82 && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(e647);
            if (!a49) return null;
            ("TSInterfaceDeclaration" === a49.type || "TSTypeAliasDeclaration" === a49.type || i127) && (e647.exportKind = "type");
            if (i127) {
                this.resetStartLocation(a49, t372, s211);
                a49.declare = true;
            }
            return a49;
        }
        parseClassId(e648, t373, s212) {
            if ((!t373 || s212) && this.isContextual(110)) return;
            super.parseClassId(e648, t373, s212, e648.declare ? ce2 : se3);
            const i128 = this.tsTryParseTypeParameters();
            i128 && (e648.typeParameters = i128);
        }
        parseClassPropertyAnnotation(e649) {
            !e649.optional && this.eat(35) && (e649.definite = true);
            const t374 = this.tsTryParseTypeAnnotation();
            t374 && (e649.typeAnnotation = t374);
        }
        parseClassProperty(e650) {
            this.parseClassPropertyAnnotation(e650);
            this.state.isAmbientContext && this.match(29) && this.raise(Ye1.DeclareClassFieldHasInitializer, {
                at: this.state.startLoc
            });
            if (e650.abstract && this.match(29)) {
                const { key: t375  } = e650;
                this.raise(Ye1.AbstractPropertyHasInitializer, {
                    at: this.state.startLoc,
                    propertyName: "Identifier" !== t375.type || e650.computed ? `[${this.input.slice(t375.start, t375.end)}]` : t375.name
                });
            }
            return super.parseClassProperty(e650);
        }
        parseClassPrivateProperty(e651) {
            e651.abstract && this.raise(Ye1.PrivateElementHasAbstract, {
                at: e651
            });
            e651.accessibility && this.raise(Ye1.PrivateElementHasAccessibility, {
                at: e651,
                modifier: e651.accessibility
            });
            this.parseClassPropertyAnnotation(e651);
            return super.parseClassPrivateProperty(e651);
        }
        pushClassMethod(e652, t376, s213, i129, r83, a50) {
            const n34 = this.tsTryParseTypeParameters();
            n34 && r83 && this.raise(Ye1.ConstructorHasTypeParameters, {
                at: n34
            });
            const { declare: o23 = false , kind: h14  } = t376;
            !o23 || "get" !== h14 && "set" !== h14 || this.raise(Ye1.DeclareAccessor, {
                at: t376,
                kind: h14
            });
            n34 && (t376.typeParameters = n34);
            super.pushClassMethod(e652, t376, s213, i129, r83, a50);
        }
        pushClassPrivateMethod(e653, t377, s214, i130) {
            const r84 = this.tsTryParseTypeParameters();
            r84 && (t377.typeParameters = r84);
            super.pushClassPrivateMethod(e653, t377, s214, i130);
        }
        declareClassPrivateMethodInScope(e654, t378) {
            "TSDeclareMethod" !== e654.type && ("MethodDefinition" !== e654.type || e654.value.body) && super.declareClassPrivateMethodInScope(e654, t378);
        }
        parseClassSuper(e655) {
            super.parseClassSuper(e655);
            e655.superClass && (this.match(47) || this.match(51)) && (e655.superTypeParameters = this.tsParseTypeArgumentsInExpression());
            this.eatContextual(110) && (e655.implements = this.tsParseHeritageClause("implements"));
        }
        parseObjPropValue(e656, ...t379) {
            const s215 = this.tsTryParseTypeParameters();
            s215 && (e656.typeParameters = s215);
            super.parseObjPropValue(e656, ...t379);
        }
        parseFunctionParams(e657, t380) {
            const s216 = this.tsTryParseTypeParameters();
            s216 && (e657.typeParameters = s216);
            super.parseFunctionParams(e657, t380);
        }
        parseVarId(e658, t381) {
            super.parseVarId(e658, t381);
            "Identifier" === e658.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (e658.definite = true);
            const s217 = this.tsTryParseTypeAnnotation();
            if (s217) {
                e658.id.typeAnnotation = s217;
                this.resetEndLocation(e658.id);
            }
        }
        parseAsyncArrowFromCallExpression(e659, t382) {
            this.match(14) && (e659.returnType = this.tsParseTypeAnnotation());
            return super.parseAsyncArrowFromCallExpression(e659, t382);
        }
        parseMaybeAssign(...e660) {
            var t384, s219, i131, r85, a51, n35, h15;
            let c61;
            let p61;
            let l312;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
                c61 = this.state.clone();
                p61 = this.tryParse(()=>super.parseMaybeAssign(...e660)
                , c61);
                if (!p61.error) return p61.node;
                const { context: t383  } = this.state;
                const s218 = t383[t383.length - 1];
                s218 !== o20.j_oTag && s218 !== o20.j_expr || t383.pop();
            }
            if (!(null != (t384 = p61) && t384.error) && !this.match(47)) return super.parseMaybeAssign(...e660);
            let u214;
            c61 = c61 || this.state.clone();
            const d114 = this.tryParse((t385)=>{
                var s220, i132, r86;
                u214 = this.tsParseTypeParameters();
                const a52 = super.parseMaybeAssign(...e660);
                ("ArrowFunctionExpression" !== a52.type || null != (s220 = a52.extra) && s220.parenthesized) && t385();
                0 !== (null == (i132 = u214) ? void 0 : i132.params.length) && this.resetStartLocationFromNode(a52, u214);
                a52.typeParameters = u214;
                if (this.hasPlugin("jsx") && 1 === a52.typeParameters.params.length && !(null != (r86 = a52.typeParameters.extra) && r86.trailingComma)) {
                    const e661 = a52.typeParameters.params[0];
                    !e661.constraint;
                }
                return a52;
            }, c61);
            if (!d114.error && !d114.aborted) {
                u214 && this.reportReservedArrowTypeParam(u214);
                return d114.node;
            }
            if (!p61) {
                assert1(!this.hasPlugin("jsx"));
                l312 = this.tryParse(()=>super.parseMaybeAssign(...e660)
                , c61);
                if (!l312.error) return l312.node;
            }
            if (null != (s219 = p61) && s219.node) {
                this.state = p61.failState;
                return p61.node;
            }
            if (d114.node) {
                this.state = d114.failState;
                u214 && this.reportReservedArrowTypeParam(u214);
                return d114.node;
            }
            if (null != (i131 = l312) && i131.node) {
                this.state = l312.failState;
                return l312.node;
            }
            if (null != (r85 = p61) && r85.thrown) throw p61.error;
            if (d114.thrown) throw d114.error;
            if (null != (a51 = l312) && a51.thrown) throw l312.error;
            throw (null == (n35 = p61) ? void 0 : n35.error) || d114.error || (null == (h15 = l312) ? void 0 : h15.error);
        }
        reportReservedArrowTypeParam(e662) {
            var t386;
            1 !== e662.params.length || null != (t386 = e662.extra) && t386.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(Ye1.ReservedArrowTypeParam, {
                at: e662
            });
        }
        parseMaybeUnary(e663) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(e663);
        }
        parseArrow(e664) {
            if (this.match(14)) {
                const t387 = this.tryParse((e665)=>{
                    const t389 = this.tsParseTypeOrTypePredicateAnnotation(14);
                    !this.canInsertSemicolon() && this.match(19) || e665();
                    return t389;
                });
                if (t387.aborted) return;
                if (!t387.thrown) {
                    t387.error && (this.state = t387.failState);
                    e664.returnType = t387.node;
                }
            }
            return super.parseArrow(e664);
        }
        parseAssignableListItemTypes(e666) {
            if (this.eat(17)) {
                "Identifier" === e666.type || this.state.isAmbientContext || this.state.inType || this.raise(Ye1.PatternIsOptional, {
                    at: e666
                });
                e666.optional = true;
            }
            const t390 = this.tsTryParseTypeAnnotation();
            t390 && (e666.typeAnnotation = t390);
            this.resetEndLocation(e666);
            return e666;
        }
        isAssignable(e667, t391) {
            switch(e667.type){
                case "TSTypeCastExpression":
                    return this.isAssignable(e667.expression, t391);
                case "TSParameterProperty":
                    return true;
                default:
                    return super.isAssignable(e667, t391);
            }
        }
        toAssignable(e668, t392 = false) {
            switch(e668.type){
                case "TSTypeCastExpression":
                    return super.toAssignable(this.typeCastToParameter(e668), t392);
                case "TSParameterProperty":
                    return super.toAssignable(e668, t392);
                case "ParenthesizedExpression":
                    return this.toAssignableParenthesizedExpression(e668, t392);
                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                    e668.expression = this.toAssignable(e668.expression, t392);
                    return e668;
                default:
                    return super.toAssignable(e668, t392);
            }
        }
        toAssignableParenthesizedExpression(e669, t393) {
            switch(e669.expression.type){
                case "TSAsExpression":
                case "TSNonNullExpression":
                case "TSTypeAssertion":
                case "ParenthesizedExpression":
                    e669.expression = this.toAssignable(e669.expression, t393);
                    return e669;
                default:
                    return super.toAssignable(e669, t393);
            }
        }
        isValidLVal(e670, t394, s221) {
            return getOwn$1({
                TSTypeCastExpression: true,
                TSParameterProperty: "parameter",
                TSNonNullExpression: "expression",
                TSAsExpression: (s221 !== pe2 || t394) && [
                    "expression",
                    true
                ],
                TSTypeAssertion: (s221 !== pe2 || t394) && [
                    "expression",
                    true
                ]
            }, e670) || super.isValidLVal(e670, t394, s221);
        }
        parseBindingAtom() {
            switch(this.state.type){
                case 78:
                    return this.parseIdentifier(true);
                default:
                    return super.parseBindingAtom();
            }
        }
        parseMaybeDecoratorArguments(e671) {
            if (this.match(47) || this.match(51)) {
                const t395 = this.tsParseTypeArgumentsInExpression();
                if (this.match(10)) {
                    const s222 = super.parseMaybeDecoratorArguments(e671);
                    s222.typeParameters = t395;
                    return s222;
                }
                this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(e671);
        }
        checkCommaAfterRest(e672) {
            if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === e672) {
                this.next();
                return false;
            }
            return super.checkCommaAfterRest(e672);
        }
        isClassMethod() {
            return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
        }
        parseMaybeDefault(...e673) {
            const t396 = super.parseMaybeDefault(...e673);
            "AssignmentPattern" === t396.type && t396.typeAnnotation && t396.right.start < t396.typeAnnotation.start && this.raise(Ye1.TypeAnnotationAfterAssign, {
                at: t396.typeAnnotation
            });
            return t396;
        }
        getTokenFromCode(e674) {
            if (this.state.inType) {
                if (62 === e674) return this.finishOp(48, 1);
                if (60 === e674) return this.finishOp(47, 1);
            }
            return super.getTokenFromCode(e674);
        }
        reScan_lt_gt() {
            const { type: e675  } = this.state;
            if (47 === e675) {
                this.state.pos -= 1;
                this.readToken_lt();
            } else if (48 === e675) {
                this.state.pos -= 1;
                this.readToken_gt();
            }
        }
        reScan_lt() {
            const { type: e676  } = this.state;
            if (51 === e676) {
                this.state.pos -= 2;
                this.finishOp(47, 1);
                return 47;
            }
            return e676;
        }
        toAssignableList(e677) {
            for(let t397 = 0; t397 < e677.length; t397++){
                const s223 = e677[t397];
                if (s223) switch(s223.type){
                    case "TSTypeCastExpression":
                        e677[t397] = this.typeCastToParameter(s223);
                        break;
                    case "TSAsExpression":
                    case "TSTypeAssertion":
                        this.state.maybeInArrowParameters ? this.raise(Ye1.UnexpectedTypeCastInParameter, {
                            at: s223
                        }) : e677[t397] = this.typeCastToParameter(s223);
                        break;
                }
            }
            return super.toAssignableList(...arguments);
        }
        typeCastToParameter(e678) {
            e678.expression.typeAnnotation = e678.typeAnnotation;
            this.resetEndLocation(e678.expression, e678.typeAnnotation.loc.end);
            return e678.expression;
        }
        shouldParseArrow(e679) {
            return this.match(14) ? e679.every((e680)=>this.isAssignable(e680, true)
            ) : super.shouldParseArrow(e679);
        }
        shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
        }
        canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
        }
        jsxParseOpeningElementAfterName(e681) {
            if (this.match(47) || this.match(51)) {
                const t398 = this.tsTryParseAndCatch(()=>this.tsParseTypeArgumentsInExpression()
                );
                t398 && (e681.typeParameters = t398);
            }
            return super.jsxParseOpeningElementAfterName(e681);
        }
        getGetterSetterExpectedParamCount(e682) {
            const t399 = super.getGetterSetterExpectedParamCount(e682);
            const s224 = this.getObjectOrClassMethodParams(e682);
            const i133 = s224[0];
            const r87 = i133 && this.isThisParam(i133);
            return r87 ? t399 + 1 : t399;
        }
        parseCatchClauseParam() {
            const e683 = super.parseCatchClauseParam();
            const t400 = this.tsTryParseTypeAnnotation();
            if (t400) {
                e683.typeAnnotation = t400;
                this.resetEndLocation(e683);
            }
            return e683;
        }
        tsInAmbientContext(e684) {
            const t401 = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
                return e684();
            } finally{
                this.state.isAmbientContext = t401;
            }
        }
        parseClass(e685, ...t402) {
            const s225 = this.state.inAbstractClass;
            this.state.inAbstractClass = !!e685.abstract;
            try {
                return super.parseClass(e685, ...t402);
            } finally{
                this.state.inAbstractClass = s225;
            }
        }
        tsParseAbstractDeclaration(e686) {
            if (this.match(80)) {
                e686.abstract = true;
                return this.parseClass(e686, true, false);
            }
            if (this.isContextual(125)) {
                if (!this.hasFollowingLineBreak()) {
                    e686.abstract = true;
                    this.raise(Ye1.NonClassMethodPropertyHasAbstractModifer, {
                        at: e686
                    });
                    return this.tsParseInterfaceDeclaration(e686);
                }
            } else this.unexpected(null, 80);
        }
        parseMethod(...e687) {
            const t403 = super.parseMethod(...e687);
            if (t403.abstract) {
                const e688 = this.hasPlugin("estree") ? !!t403.value.body : !!t403.body;
                if (e688) {
                    const { key: e689  } = t403;
                    this.raise(Ye1.AbstractMethodHasImplementation, {
                        at: t403,
                        methodName: "Identifier" !== e689.type || t403.computed ? `[${this.input.slice(e689.start, e689.end)}]` : e689.name
                    });
                }
            }
            return t403;
        }
        tsParseTypeParameterName() {
            const e690 = this.parseIdentifier();
            return e690.name;
        }
        shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
        }
        parse() {
            this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true);
            return super.parse();
        }
        getExpression() {
            this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true);
            return super.getExpression();
        }
        parseExportSpecifier(e691, t404, s226, i134) {
            if (!t404 && i134) {
                this.parseTypeOnlyImportExportSpecifier(e691, false, s226);
                return this.finishNode(e691, "ExportSpecifier");
            }
            e691.exportKind = "value";
            return super.parseExportSpecifier(e691, t404, s226, i134);
        }
        parseImportSpecifier(e692, t405, s227, i135) {
            if (!t405 && i135) {
                this.parseTypeOnlyImportExportSpecifier(e692, true, s227);
                return this.finishNode(e692, "ImportSpecifier");
            }
            e692.importKind = "value";
            return super.parseImportSpecifier(e692, t405, s227, i135);
        }
        parseTypeOnlyImportExportSpecifier(e693, t406, s229) {
            const i136 = t406 ? "imported" : "local";
            const r88 = t406 ? "local" : "exported";
            let a53 = e693[i136];
            let n36;
            let o24 = false;
            let h16 = true;
            const c71 = a53.loc.start;
            if (this.isContextual(93)) {
                const e694 = this.parseIdentifier();
                if (this.isContextual(93)) {
                    const s228 = this.parseIdentifier();
                    if (tokenIsKeywordOrIdentifier(this.state.type)) {
                        o24 = true;
                        a53 = e694;
                        n36 = t406 ? this.parseIdentifier() : this.parseModuleExportName();
                        h16 = false;
                    } else {
                        n36 = s228;
                        h16 = false;
                    }
                } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
                    h16 = false;
                    n36 = t406 ? this.parseIdentifier() : this.parseModuleExportName();
                } else {
                    o24 = true;
                    a53 = e694;
                }
            } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
                o24 = true;
                a53 = t406 ? this.parseIdentifier() : this.parseModuleExportName();
            }
            o24 && s229 && this.raise(t406 ? Ye1.TypeModifierIsUsedInTypeImports : Ye1.TypeModifierIsUsedInTypeExports, {
                at: c71
            });
            e693[i136] = a53;
            e693[r88] = n36;
            const p71 = t406 ? "importKind" : "exportKind";
            e693[p71] = o24 ? "type" : "value";
            h16 && this.eatContextual(93) && (e693[r88] = t406 ? this.parseIdentifier() : this.parseModuleExportName());
            e693[r88] || (e693[r88] = cloneIdentifier(e693[i136]));
            t406 && this.checkIdentifier(e693[r88], ie4);
        }
    }
;
function isPossiblyLiteralEnum(e695) {
    if ("MemberExpression" !== e695.type) return false;
    const { computed: t407 , property: s230  } = e695;
    return (!t407 || "StringLiteral" === s230.type || !("TemplateLiteral" !== s230.type || s230.expressions.length > 0)) && isUncomputedMemberExpressionChain(e695.object);
}
function isUncomputedMemberExpressionChain(e696) {
    return "Identifier" === e696.type || "MemberExpression" === e696.type && !e696.computed && isUncomputedMemberExpressionChain(e696.object);
}
const Qe2 = ParseErrorEnum`placeholders`((e697)=>({
        ClassNameIsRequired: e697("A class name is required."),
        UnexpectedSpace: e697("Unexpected space in placeholder.")
    })
);
var placeholders = (e698)=>class extends e698 {
        parsePlaceholder(e699) {
            if (this.match(140)) {
                const t408 = this.startNode();
                this.next();
                this.assertNoSpace();
                t408.name = super.parseIdentifier(true);
                this.assertNoSpace();
                this.expect(140);
                return this.finishPlaceholder(t408, e699);
            }
        }
        finishPlaceholder(e700, t409) {
            const s231 = !!(e700.expectedNode && "Placeholder" === e700.type);
            e700.expectedNode = t409;
            return s231 ? e700 : this.finishNode(e700, "Placeholder");
        }
        getTokenFromCode(e701) {
            return 37 === e701 && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(140, 2) : super.getTokenFromCode(...arguments);
        }
        parseExprAtom() {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
        }
        parseIdentifier() {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
        }
        checkReservedWord(e702) {
            void 0 !== e702 && super.checkReservedWord(...arguments);
        }
        parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
        }
        isValidLVal(e703, ...t410) {
            return "Placeholder" === e703 || super.isValidLVal(e703, ...t410);
        }
        toAssignable(e704) {
            if (e704 && "Placeholder" === e704.type && "Expression" === e704.expectedNode) {
                e704.expectedNode = "Pattern";
                return e704;
            }
            return super.toAssignable(...arguments);
        }
        isLet(e705) {
            if (super.isLet(e705)) return true;
            if (!this.isContextual(99)) return false;
            if (e705) return false;
            const t411 = this.lookahead();
            return 140 === t411.type;
        }
        verifyBreakContinue(e706) {
            e706.label && "Placeholder" === e706.label.type || super.verifyBreakContinue(...arguments);
        }
        parseExpressionStatement(e707, t412) {
            if ("Placeholder" !== t412.type || t412.extra && t412.extra.parenthesized) return super.parseExpressionStatement(...arguments);
            if (this.match(14)) {
                const s232 = e707;
                s232.label = this.finishPlaceholder(t412, "Identifier");
                this.next();
                s232.body = this.parseStatement("label");
                return this.finishNode(s232, "LabeledStatement");
            }
            this.semicolon();
            e707.name = t412.name;
            return this.finishPlaceholder(e707, "Statement");
        }
        parseBlock() {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
        }
        parseFunctionId() {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
        }
        parseClass(e708, t413, s233) {
            const i137 = t413 ? "ClassDeclaration" : "ClassExpression";
            this.next();
            this.takeDecorators(e708);
            const r89 = this.state.strict;
            const a54 = this.parsePlaceholder("Identifier");
            if (a54) {
                if (!(this.match(81) || this.match(140) || this.match(5))) {
                    if (s233 || !t413) {
                        e708.id = null;
                        e708.body = this.finishPlaceholder(a54, "ClassBody");
                        return this.finishNode(e708, i137);
                    }
                    throw this.raise(Qe2.ClassNameIsRequired, {
                        at: this.state.startLoc
                    });
                }
                e708.id = a54;
            } else this.parseClassId(e708, t413, s233);
            this.parseClassSuper(e708);
            e708.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!e708.superClass, r89);
            return this.finishNode(e708, i137);
        }
        parseExport(e709) {
            const t414 = this.parsePlaceholder("Identifier");
            if (!t414) return super.parseExport(...arguments);
            if (!this.isContextual(97) && !this.match(12)) {
                e709.specifiers = [];
                e709.source = null;
                e709.declaration = this.finishPlaceholder(t414, "Declaration");
                return this.finishNode(e709, "ExportNamedDeclaration");
            }
            this.expectPlugin("exportDefaultFrom");
            const s234 = this.startNode();
            s234.exported = t414;
            e709.specifiers = [
                this.finishNode(s234, "ExportDefaultSpecifier")
            ];
            return super.parseExport(e709);
        }
        isExportDefaultSpecifier() {
            if (this.match(65)) {
                const e710 = this.nextTokenStart();
                if (this.isUnparsedContextual(e710, "from") && this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(e710 + 4))) return true;
            }
            return super.isExportDefaultSpecifier();
        }
        maybeParseExportDefaultSpecifier(e711) {
            return !!(e711.specifiers && e711.specifiers.length > 0) || super.maybeParseExportDefaultSpecifier(...arguments);
        }
        checkExport(e712) {
            const { specifiers: t415  } = e712;
            null != t415 && t415.length && (e712.specifiers = t415.filter((e713)=>"Placeholder" === e713.exported.type
            ));
            super.checkExport(e712);
            e712.specifiers = t415;
        }
        parseImport(e714) {
            const t416 = this.parsePlaceholder("Identifier");
            if (!t416) return super.parseImport(...arguments);
            e714.specifiers = [];
            if (!this.isContextual(97) && !this.match(12)) {
                e714.source = this.finishPlaceholder(t416, "StringLiteral");
                this.semicolon();
                return this.finishNode(e714, "ImportDeclaration");
            }
            const s235 = this.startNodeAtNode(t416);
            s235.local = t416;
            this.finishNode(s235, "ImportDefaultSpecifier");
            e714.specifiers.push(s235);
            if (this.eat(12)) {
                const t417 = this.maybeParseStarImportSpecifier(e714);
                t417 || this.parseNamedImportSpecifiers(e714);
            }
            this.expectContextual(97);
            e714.source = this.parseImportSource();
            this.semicolon();
            return this.finishNode(e714, "ImportDeclaration");
        }
        parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
        }
        assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index && this.raise(Qe2.UnexpectedSpace, {
                at: this.state.lastTokEndLoc
            });
        }
    }
;
var v8intrinsic = (e715)=>class extends e715 {
        parseV8Intrinsic() {
            if (this.match(54)) {
                const e717 = this.state.startLoc;
                const t418 = this.startNode();
                this.next();
                if (tokenIsIdentifier(this.state.type)) {
                    const e716 = this.parseIdentifierName(this.state.start);
                    const s236 = this.createIdentifier(t418, e716);
                    s236.type = "V8IntrinsicIdentifier";
                    if (this.match(10)) return s236;
                }
                this.unexpected(e717);
            }
        }
        parseExprAtom() {
            return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
        }
    }
;
function hasPlugin(e718, t419) {
    const [s237, i138] = "string" === typeof t419 ? [
        t419,
        {}
    ] : t419;
    const r90 = Object.keys(i138);
    const a55 = 0 === r90.length;
    return e718.some((e719)=>{
        if ("string" === typeof e719) return a55 && e719 === s237;
        {
            const [t420, a56] = e719;
            if (t420 !== s237) return false;
            for (const e720 of r90)if (a56[e720] !== i138[e720]) return false;
            return true;
        }
    });
}
function getPluginOption(e721, t421, s238) {
    const i139 = e721.find((e722)=>Array.isArray(e722) ? e722[0] === t421 : e722 === t421
    );
    return i139 && Array.isArray(i139) ? i139[1][s238] : null;
}
const Ze1 = [
    "minimal",
    "fsharp",
    "hack",
    "smart"
];
const et2 = [
    "^^",
    "@@",
    "^",
    "%",
    "#"
];
const tt2 = [
    "hash",
    "bar"
];
function validatePlugins(e723) {
    if (hasPlugin(e723, "decorators")) {
        if (hasPlugin(e723, "decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        const t422 = getPluginOption(e723, "decorators", "decoratorsBeforeExport");
        if (null == t422) throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
        if ("boolean" !== typeof t422) throw new Error("'decoratorsBeforeExport' must be a boolean.");
    }
    if (hasPlugin(e723, "flow") && hasPlugin(e723, "typescript")) throw new Error("Cannot combine flow and typescript plugins.");
    if (hasPlugin(e723, "placeholders") && hasPlugin(e723, "v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    if (hasPlugin(e723, "pipelineOperator")) {
        const t423 = getPluginOption(e723, "pipelineOperator", "proposal");
        if (!Ze1.includes(t423)) {
            const e724 = Ze1.map((e727)=>`"${e727}"`
            ).join(", ");
            throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${e724}.`);
        }
        const s239 = hasPlugin(e723, [
            "recordAndTuple",
            {
                syntaxType: "hash"
            }
        ]);
        if ("hack" === t423) {
            if (hasPlugin(e723, "placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
            if (hasPlugin(e723, "v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
            const t424 = getPluginOption(e723, "pipelineOperator", "topicToken");
            if (!et2.includes(t424)) {
                const e728 = et2.map((e732)=>`"${e732}"`
                ).join(", ");
                throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${e728}.`);
            }
            if ("#" === t424 && s239) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
        } else if ("smart" === t423 && s239) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
    }
    if (hasPlugin(e723, "moduleAttributes")) {
        if (hasPlugin(e723, "importAssertions")) throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
        const t425 = getPluginOption(e723, "moduleAttributes", "version");
        if ("may-2020" !== t425) throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
    }
    if (hasPlugin(e723, "recordAndTuple") && !tt2.includes(getPluginOption(e723, "recordAndTuple", "syntaxType"))) throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + tt2.map((e733)=>`'${e733}'`
    ).join(", "));
    if (hasPlugin(e723, "asyncDoExpressions") && !hasPlugin(e723, "doExpressions")) {
        const e734 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        e734.missingPlugins = "doExpressions";
        throw e734;
    }
}
const st2 = {
    estree: estree,
    jsx: jsx,
    flow: flow,
    typescript: typescript,
    v8intrinsic: v8intrinsic,
    placeholders: placeholders
};
const it2 = Object.keys(st2);
const rt2 = {
    sourceType: "script",
    sourceFilename: void 0,
    startColumn: 0,
    startLine: 1,
    allowAwaitOutsideFunction: false,
    allowReturnOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    allowUndeclaredExports: false,
    plugins: [],
    strictMode: null,
    ranges: false,
    tokens: false,
    createParenthesizedExpressions: false,
    errorRecovery: false,
    attachComment: true
};
function getOptions(e735) {
    const t426 = {};
    for (const s240 of Object.keys(rt2))t426[s240] = e735 && null != e735[s240] ? e735[s240] : rt2[s240];
    return t426;
}
const getOwn = (e736, t427)=>Object.hasOwnProperty.call(e736, t427) && e736[t427]
;
const unwrapParenthesizedExpression = (e737)=>"ParenthesizedExpression" === e737.type ? unwrapParenthesizedExpression(e737.expression) : e737
;
class LValParser extends NodeUtils {
    toAssignable(e738, t428 = false) {
        var s242, i143;
        let r92;
        if ("ParenthesizedExpression" === e738.type || null != (s242 = e738.extra) && s242.parenthesized) {
            r92 = unwrapParenthesizedExpression(e738);
            t428 ? "Identifier" === r92.type ? this.expressionScope.recordParenthesizedIdentifierError({
                at: e738
            }) : "MemberExpression" !== r92.type && this.raise(a16.InvalidParenthesizedAssignment, {
                at: e738
            }) : this.raise(a16.InvalidParenthesizedAssignment, {
                at: e738
            });
        }
        switch(e738.type){
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
                break;
            case "ObjectExpression":
                e738.type = "ObjectPattern";
                for(let s241 = 0, i140 = e738.properties.length, r91 = i140 - 1; s241 < i140; s241++){
                    var n37;
                    const i141 = e738.properties[s241];
                    const o25 = s241 === r91;
                    this.toAssignableObjectExpressionProp(i141, o25, t428);
                    o25 && "RestElement" === i141.type && null != (n37 = e738.extra) && n37.trailingCommaLoc && this.raise(a16.RestTrailingComma, {
                        at: e738.extra.trailingCommaLoc
                    });
                }
                break;
            case "ObjectProperty":
                {
                    const { key: s243 , value: i142  } = e738;
                    this.isPrivateName(s243) && this.classScope.usePrivateName(this.getPrivateNameSV(s243), s243.loc.start);
                    this.toAssignable(i142, t428);
                    break;
                }
            case "SpreadElement":
                {
                    this.checkToRestConversion(e738);
                    e738.type = "RestElement";
                    const s244 = e738.argument;
                    this.toAssignable(s244, t428);
                    break;
                }
            case "ArrayExpression":
                e738.type = "ArrayPattern";
                this.toAssignableList(e738.elements, null == (i143 = e738.extra) ? void 0 : i143.trailingCommaLoc, t428);
                break;
            case "AssignmentExpression":
                "=" !== e738.operator && this.raise(a16.MissingEqInAssignment, {
                    at: e738.left.loc.end
                });
                e738.type = "AssignmentPattern";
                delete e738.operator;
                this.toAssignable(e738.left, t428);
                break;
            case "ParenthesizedExpression":
                this.toAssignable(r92, t428);
                break;
        }
        return e738;
    }
    toAssignableObjectExpressionProp(e739, t429, s245) {
        "ObjectMethod" === e739.type ? this.raise("get" === e739.kind || "set" === e739.kind ? a16.PatternHasAccessor : a16.PatternHasMethod, {
            at: e739.key
        }) : "SpreadElement" !== e739.type || t429 ? this.toAssignable(e739, s245) : this.raise(a16.RestTrailingComma, {
            at: e739
        });
    }
    toAssignableList(e740, t431, s246) {
        let i144 = e740.length;
        if (i144) {
            const r93 = e740[i144 - 1];
            if ("RestElement" === (null == r93 ? void 0 : r93.type)) --i144;
            else if ("SpreadElement" === (null == r93 ? void 0 : r93.type)) {
                r93.type = "RestElement";
                let e741 = r93.argument;
                this.toAssignable(e741, s246);
                e741 = unwrapParenthesizedExpression(e741);
                "Identifier" !== e741.type && "MemberExpression" !== e741.type && "ArrayPattern" !== e741.type && "ObjectPattern" !== e741.type && this.unexpected(e741.start);
                t431 && this.raise(a16.RestTrailingComma, {
                    at: t431
                });
                --i144;
            }
        }
        for(let t430 = 0; t430 < i144; t430++){
            const i145 = e740[t430];
            if (i145) {
                this.toAssignable(i145, s246);
                "RestElement" === i145.type && this.raise(a16.RestTrailingComma, {
                    at: i145
                });
            }
        }
        return e740;
    }
    isAssignable(e742, t433) {
        switch(e742.type){
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
                return true;
            case "ObjectExpression":
                {
                    const t432 = e742.properties.length - 1;
                    return e742.properties.every((e743, s247)=>"ObjectMethod" !== e743.type && (s247 === t432 || "SpreadElement" !== e743.type) && this.isAssignable(e743)
                    );
                }
            case "ObjectProperty":
                return this.isAssignable(e742.value);
            case "SpreadElement":
                return this.isAssignable(e742.argument);
            case "ArrayExpression":
                return e742.elements.every((e744)=>null === e744 || this.isAssignable(e744)
                );
            case "AssignmentExpression":
                return "=" === e742.operator;
            case "ParenthesizedExpression":
                return this.isAssignable(e742.expression);
            case "MemberExpression":
            case "OptionalMemberExpression":
                return !t433;
            default:
                return false;
        }
    }
    toReferencedList(e745, t) {
        return e745;
    }
    toReferencedListDeep(e746, t435) {
        this.toReferencedList(e746, t435);
        for (const t434 of e746)"ArrayExpression" === (null == t434 ? void 0 : t434.type) && this.toReferencedListDeep(t434.elements);
    }
    parseSpread(e747, t436) {
        const s248 = this.startNode();
        this.next();
        s248.argument = this.parseMaybeAssignAllowIn(e747, void 0, t436);
        return this.finishNode(s248, "SpreadElement");
    }
    parseRestBinding() {
        const e748 = this.startNode();
        this.next();
        e748.argument = this.parseBindingAtom();
        return this.finishNode(e748, "RestElement");
    }
    parseBindingAtom() {
        switch(this.state.type){
            case 0:
                {
                    const e749 = this.startNode();
                    this.next();
                    e749.elements = this.parseBindingList(3, 93, true);
                    return this.finishNode(e749, "ArrayPattern");
                }
            case 5:
                return this.parseObjectLike(8, true);
        }
        return this.parseIdentifier();
    }
    parseBindingList(e750, t437, s249, i146) {
        const r94 = [];
        let n38 = true;
        while(!this.eat(e750)){
            n38 ? n38 = false : this.expect(12);
            if (s249 && this.match(12)) r94.push(null);
            else {
                if (this.eat(e750)) break;
                if (this.match(21)) {
                    r94.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
                    if (!this.checkCommaAfterRest(t437)) {
                        this.expect(e750);
                        break;
                    }
                } else {
                    const e751 = [];
                    this.match(26) && this.hasPlugin("decorators") && this.raise(a16.UnsupportedParameterDecorator, {
                        at: this.state.startLoc
                    });
                    while(this.match(26))e751.push(this.parseDecorator());
                    r94.push(this.parseAssignableListItem(i146, e751));
                }
            }
        }
        return r94;
    }
    parseBindingRestProperty(e752) {
        this.next();
        e752.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(e752, "RestElement");
    }
    parseBindingProperty() {
        const e753 = this.startNode();
        const { type: t438 , start: s250 , startLoc: i147  } = this.state;
        if (21 === t438) return this.parseBindingRestProperty(e753);
        if (134 === t438) {
            this.expectPlugin("destructuringPrivate", i147);
            this.classScope.usePrivateName(this.state.value, i147);
            e753.key = this.parsePrivateName();
        } else this.parsePropertyName(e753);
        e753.method = false;
        this.parseObjPropValue(e753, s250, i147, false, false, true, false);
        return e753;
    }
    parseAssignableListItem(e, t439) {
        const s251 = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(s251);
        const i148 = this.parseMaybeDefault(s251.start, s251.loc.start, s251);
        t439.length && (s251.decorators = t439);
        return i148;
    }
    parseAssignableListItemTypes(e754) {
        return e754;
    }
    parseMaybeDefault(e755, t440, s252) {
        var i149, r95, a57;
        t440 = null != (i149 = t440) ? i149 : this.state.startLoc;
        e755 = null != (r95 = e755) ? r95 : this.state.start;
        s252 = null != (a57 = s252) ? a57 : this.parseBindingAtom();
        if (!this.eat(29)) return s252;
        const n39 = this.startNodeAt(e755, t440);
        n39.left = s252;
        n39.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(n39, "AssignmentPattern");
    }
    isValidLVal(e756, t, s) {
        return getOwn({
            AssignmentPattern: "left",
            RestElement: "argument",
            ObjectProperty: "value",
            ParenthesizedExpression: "expression",
            ArrayPattern: "elements",
            ObjectPattern: "properties"
        }, e756);
    }
    checkLVal(e757, { in: t443 , binding: s253 = pe2 , checkClashes: i150 = false , strictModeChanged: r96 = false , allowingSloppyLetBinding: n40 = !(s253 & 8) , hasParenthesizedAncestor: o26 = false  }) {
        var h17;
        const c81 = e757.type;
        if (this.isObjectMethod(e757)) return;
        if ("MemberExpression" === c81) {
            s253 !== pe2 && this.raise(a16.InvalidPropertyBindingPattern, {
                at: e757
            });
            return;
        }
        if ("Identifier" === e757.type) {
            this.checkIdentifier(e757, s253, r96, n40);
            const { name: t442  } = e757;
            i150 && (i150.has(t442) ? this.raise(a16.ParamDupe, {
                at: e757
            }) : i150.add(t442));
            return;
        }
        const p81 = this.isValidLVal(e757.type, o26 || (null == (h17 = e757.extra) ? void 0 : h17.parenthesized), s253);
        if (true === p81) return;
        if (false === p81) {
            const i151 = s253 === pe2 ? a16.InvalidLhs : a16.InvalidLhsBinding;
            this.raise(i151, {
                at: e757,
                ancestor: "UpdateExpression" === t443.type ? {
                    type: "UpdateExpression",
                    prefix: t443.prefix
                } : {
                    type: t443.type
                }
            });
            return;
        }
        const [l411, u311] = Array.isArray(p81) ? p81 : [
            p81,
            "ParenthesizedExpression" === c81
        ];
        const d211 = "ArrayPattern" === e757.type || "ObjectPattern" === e757.type || "ParenthesizedExpression" === e757.type ? e757 : t443;
        for (const t441 of [].concat(e757[l411]))t441 && this.checkLVal(t441, {
            in: d211,
            binding: s253,
            checkClashes: i150,
            allowingSloppyLetBinding: n40,
            strictModeChanged: r96,
            hasParenthesizedAncestor: u311
        });
    }
    checkIdentifier(e758, t444, s254 = false, i152 = !(t444 & 8)) {
        this.state.strict && (s254 ? isStrictBindReservedWord(e758.name, this.inModule) : isStrictBindOnlyReservedWord(e758.name)) && (t444 === pe2 ? this.raise(a16.StrictEvalArguments, {
            at: e758,
            referenceName: e758.name
        }) : this.raise(a16.StrictEvalArgumentsBinding, {
            at: e758,
            bindingName: e758.name
        }));
        i152 || "let" !== e758.name || this.raise(a16.LetInLexicalBinding, {
            at: e758
        });
        t444 & pe2 || this.declareNameFromIdentifier(e758, t444);
    }
    declareNameFromIdentifier(e759, t445) {
        this.scope.declareName(e759.name, t445, e759.loc.start);
    }
    checkToRestConversion(e760) {
        "Identifier" !== e760.argument.type && "MemberExpression" !== e760.argument.type && this.raise(a16.InvalidRestAssignmentPattern, {
            at: e760.argument
        });
    }
    checkCommaAfterRest(e761) {
        if (!this.match(12)) return false;
        this.raise(this.lookaheadCharCode() === e761 ? a16.RestTrailingComma : a16.ElementAfterRest, {
            at: this.state.startLoc
        });
        return true;
    }
}
class ExpressionParser extends LValParser {
    checkProto(e762, t446, s255, i153) {
        if ("SpreadElement" === e762.type || this.isObjectMethod(e762) || e762.computed || e762.shorthand) return;
        const r97 = e762.key;
        const n41 = "Identifier" === r97.type ? r97.name : r97.value;
        if ("__proto__" === n41) {
            if (t446) {
                this.raise(a16.RecordNoProto, {
                    at: r97
                });
                return;
            }
            s255.used && (i153 ? null === i153.doubleProtoLoc && (i153.doubleProtoLoc = r97.loc.start) : this.raise(a16.DuplicateProto, {
                at: r97
            }));
            s255.used = true;
        }
    }
    shouldExitDescending(e763, t447) {
        return "ArrowFunctionExpression" === e763.type && e763.start === t447;
    }
    getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const e764 = this.parseExpression();
        this.match(135) || this.unexpected();
        this.finalizeRemainingComments();
        e764.comments = this.state.comments;
        e764.errors = this.state.errors;
        this.options.tokens && (e764.tokens = this.tokens);
        return e764;
    }
    parseExpression(e765, t448) {
        return e765 ? this.disallowInAnd(()=>this.parseExpressionBase(t448)
        ) : this.allowInAnd(()=>this.parseExpressionBase(t448)
        );
    }
    parseExpressionBase(e766) {
        const t449 = this.state.start;
        const s256 = this.state.startLoc;
        const i154 = this.parseMaybeAssign(e766);
        if (this.match(12)) {
            const r98 = this.startNodeAt(t449, s256);
            r98.expressions = [
                i154
            ];
            while(this.eat(12))r98.expressions.push(this.parseMaybeAssign(e766));
            this.toReferencedList(r98.expressions);
            return this.finishNode(r98, "SequenceExpression");
        }
        return i154;
    }
    parseMaybeAssignDisallowIn(e767, t450) {
        return this.disallowInAnd(()=>this.parseMaybeAssign(e767, t450)
        );
    }
    parseMaybeAssignAllowIn(e768, t451) {
        return this.allowInAnd(()=>this.parseMaybeAssign(e768, t451)
        );
    }
    setOptionalParametersError(e769, t452) {
        var s257;
        e769.optionalParametersLoc = null != (s257 = null == t452 ? void 0 : t452.loc) ? s257 : this.state.startLoc;
    }
    parseMaybeAssign(e771, t453) {
        const s258 = this.state.start;
        const i155 = this.state.startLoc;
        if (this.isContextual(105) && this.prodParam.hasYield) {
            let e770 = this.parseYield();
            t453 && (e770 = t453.call(this, e770, s258, i155));
            return e770;
        }
        let r99;
        if (e771) r99 = false;
        else {
            e771 = new ExpressionErrors;
            r99 = true;
        }
        const { type: a58  } = this.state;
        (10 === a58 || tokenIsIdentifier(a58)) && (this.state.potentialArrowAt = this.state.start);
        let n42 = this.parseMaybeConditional(e771);
        t453 && (n42 = t453.call(this, n42, s258, i155));
        if (tokenIsAssignment(this.state.type)) {
            const t454 = this.startNodeAt(s258, i155);
            const r100 = this.state.value;
            t454.operator = r100;
            if (this.match(29)) {
                t454.left = this.toAssignable(n42, true);
                null != e771.doubleProtoLoc && e771.doubleProtoLoc.index >= s258 && (e771.doubleProtoLoc = null);
                null != e771.shorthandAssignLoc && e771.shorthandAssignLoc.index >= s258 && (e771.shorthandAssignLoc = null);
                if (null != e771.privateKeyLoc && e771.privateKeyLoc.index >= s258) {
                    this.checkDestructuringPrivate(e771);
                    e771.privateKeyLoc = null;
                }
            } else t454.left = n42;
            this.next();
            t454.right = this.parseMaybeAssign();
            this.checkLVal(n42, {
                in: this.finishNode(t454, "AssignmentExpression")
            });
            return t454;
        }
        r99 && this.checkExpressionErrors(e771, true);
        return n42;
    }
    parseMaybeConditional(e772) {
        const t455 = this.state.start;
        const s259 = this.state.startLoc;
        const i156 = this.state.potentialArrowAt;
        const r101 = this.parseExprOps(e772);
        return this.shouldExitDescending(r101, i156) ? r101 : this.parseConditional(r101, t455, s259, e772);
    }
    parseConditional(e773, t456, s260, i) {
        if (this.eat(17)) {
            const i157 = this.startNodeAt(t456, s260);
            i157.test = e773;
            i157.consequent = this.parseMaybeAssignAllowIn();
            this.expect(14);
            i157.alternate = this.parseMaybeAssign();
            return this.finishNode(i157, "ConditionalExpression");
        }
        return e773;
    }
    parseMaybeUnaryOrPrivate(e774) {
        return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(e774);
    }
    parseExprOps(e775) {
        const t457 = this.state.start;
        const s261 = this.state.startLoc;
        const i158 = this.state.potentialArrowAt;
        const r102 = this.parseMaybeUnaryOrPrivate(e775);
        return this.shouldExitDescending(r102, i158) ? r102 : this.parseExprOp(r102, t457, s261, -1);
    }
    parseExprOp(e776, t459, s262, i159) {
        if (this.isPrivateName(e776)) {
            const t458 = this.getPrivateNameSV(e776);
            (i159 >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(a16.PrivateInExpectedIn, {
                at: e776,
                identifierName: t458
            });
            this.classScope.usePrivateName(t458, e776.loc.start);
        }
        const r103 = this.state.type;
        if (tokenIsOperator(r103) && (this.prodParam.hasIn || !this.match(58))) {
            let n43 = tokenOperatorPrecedence(r103);
            if (n43 > i159) {
                if (39 === r103) {
                    this.expectPlugin("pipelineOperator");
                    if (this.state.inFSharpPipelineDirectBody) return e776;
                    this.checkPipelineAtInfixOperator(e776, s262);
                }
                const o27 = this.startNodeAt(t459, s262);
                o27.left = e776;
                o27.operator = this.state.value;
                const h18 = 41 === r103 || 42 === r103;
                const c91 = 40 === r103;
                c91 && (n43 = tokenOperatorPrecedence(42));
                this.next();
                if (39 === r103 && this.hasPlugin([
                    "pipelineOperator",
                    {
                        proposal: "minimal"
                    }
                ]) && 96 === this.state.type && this.prodParam.hasAwait) throw this.raise(a16.UnexpectedAwaitAfterPipelineBody, {
                    at: this.state.startLoc
                });
                o27.right = this.parseExprOpRightExpr(r103, n43);
                this.finishNode(o27, h18 || c91 ? "LogicalExpression" : "BinaryExpression");
                const p91 = this.state.type;
                if (c91 && (41 === p91 || 42 === p91) || h18 && 40 === p91) throw this.raise(a16.MixingCoalesceWithLogical, {
                    at: this.state.startLoc
                });
                return this.parseExprOp(o27, t459, s262, i159);
            }
        }
        return e776;
    }
    parseExprOpRightExpr(e777, t460) {
        const s263 = this.state.start;
        const i160 = this.state.startLoc;
        switch(e777){
            case 39:
                switch(this.getPluginOption("pipelineOperator", "proposal")){
                    case "hack":
                        return this.withTopicBindingContext(()=>this.parseHackPipeBody()
                        );
                    case "smart":
                        return this.withTopicBindingContext(()=>{
                            if (this.prodParam.hasYield && this.isContextual(105)) throw this.raise(a16.PipeBodyIsTighter, {
                                at: this.state.startLoc
                            });
                            return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(e777, t460), s263, i160);
                        });
                    case "fsharp":
                        return this.withSoloAwaitPermittingContext(()=>this.parseFSharpPipelineBody(t460)
                        );
                }
            default:
                return this.parseExprOpBaseRightExpr(e777, t460);
        }
    }
    parseExprOpBaseRightExpr(e778, t461) {
        const s264 = this.state.start;
        const i161 = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), s264, i161, tokenIsRightAssociative(e778) ? t461 - 1 : t461);
    }
    parseHackPipeBody() {
        var e779;
        const { startLoc: t462  } = this.state;
        const s265 = this.parseMaybeAssign();
        const r104 = i15.has(s265.type);
        !r104 || null != (e779 = s265.extra) && e779.parenthesized || this.raise(a16.PipeUnparenthesizedBody, {
            at: t462,
            type: s265.type
        });
        this.topicReferenceWasUsedInCurrentContext() || this.raise(a16.PipeTopicUnused, {
            at: t462
        });
        return s265;
    }
    checkExponentialAfterUnary(e780) {
        this.match(57) && this.raise(a16.UnexpectedTokenUnaryExponentiation, {
            at: e780.argument
        });
    }
    parseMaybeUnary(e782, t463) {
        const s266 = this.state.start;
        const i162 = this.state.startLoc;
        const r105 = this.isContextual(96);
        if (r105 && this.isAwaitAllowed()) {
            this.next();
            const e781 = this.parseAwait(s266, i162);
            t463 || this.checkExponentialAfterUnary(e781);
            return e781;
        }
        const n44 = this.match(34);
        const o28 = this.startNode();
        if (tokenIsPrefix(this.state.type)) {
            o28.operator = this.state.value;
            o28.prefix = true;
            this.match(72) && this.expectPlugin("throwExpressions");
            const s267 = this.match(89);
            this.next();
            o28.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(e782, true);
            if (this.state.strict && s267) {
                const e783 = o28.argument;
                "Identifier" === e783.type ? this.raise(a16.StrictDelete, {
                    at: o28
                }) : this.hasPropertyAsPrivateName(e783) && this.raise(a16.DeletePrivateField, {
                    at: o28
                });
            }
            if (!n44) {
                t463 || this.checkExponentialAfterUnary(o28);
                return this.finishNode(o28, "UnaryExpression");
            }
        }
        const h19 = this.parseUpdate(o28, n44, e782);
        if (r105) {
            const { type: e784  } = this.state;
            const t464 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(e784) : tokenCanStartExpression(e784) && !this.match(54);
            if (t464 && !this.isAmbiguousAwait()) {
                this.raiseOverwrite(a16.AwaitNotInAsyncContext, {
                    at: i162
                });
                return this.parseAwait(s266, i162);
            }
        }
        return h19;
    }
    parseUpdate(e785, t465, s268) {
        if (t465) {
            this.checkLVal(e785.argument, {
                in: this.finishNode(e785, "UpdateExpression")
            });
            return e785;
        }
        const i163 = this.state.start;
        const r106 = this.state.startLoc;
        let a59 = this.parseExprSubscripts(s268);
        if (this.checkExpressionErrors(s268, false)) return a59;
        while(tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()){
            const e786 = this.startNodeAt(i163, r106);
            e786.operator = this.state.value;
            e786.prefix = false;
            e786.argument = a59;
            this.next();
            this.checkLVal(a59, {
                in: a59 = this.finishNode(e786, "UpdateExpression")
            });
        }
        return a59;
    }
    parseExprSubscripts(e787) {
        const t466 = this.state.start;
        const s269 = this.state.startLoc;
        const i164 = this.state.potentialArrowAt;
        const r107 = this.parseExprAtom(e787);
        return this.shouldExitDescending(r107, i164) ? r107 : this.parseSubscripts(r107, t466, s269);
    }
    parseSubscripts(e788, t467, s270, i165) {
        const r108 = {
            optionalChainMember: false,
            maybeAsyncArrow: this.atPossibleAsyncArrow(e788),
            stop: false
        };
        do {
            e788 = this.parseSubscript(e788, t467, s270, i165, r108);
            r108.maybeAsyncArrow = false;
        }while (!r108.stop)
        return e788;
    }
    parseSubscript(e789, t468, s271, i166, r109) {
        const { type: a60  } = this.state;
        if (!i166 && 15 === a60) return this.parseBind(e789, t468, s271, i166, r109);
        if (tokenIsTemplate(a60)) return this.parseTaggedTemplateExpression(e789, t468, s271, r109);
        let n45 = false;
        if (18 === a60) {
            if (i166 && 40 === this.lookaheadCharCode()) {
                r109.stop = true;
                return e789;
            }
            r109.optionalChainMember = n45 = true;
            this.next();
        }
        if (!i166 && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(e789, t468, s271, r109, n45);
        {
            const i167 = this.eat(0);
            if (i167 || n45 || this.eat(16)) return this.parseMember(e789, t468, s271, r109, i167, n45);
            r109.stop = true;
            return e789;
        }
    }
    parseMember(e790, t469, s272, i168, r110, n46) {
        const o29 = this.startNodeAt(t469, s272);
        o29.object = e790;
        o29.computed = r110;
        if (r110) {
            o29.property = this.parseExpression();
            this.expect(3);
        } else if (this.match(134)) {
            "Super" === e790.type && this.raise(a16.SuperPrivateField, {
                at: s272
            });
            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
            o29.property = this.parsePrivateName();
        } else o29.property = this.parseIdentifier(true);
        if (i168.optionalChainMember) {
            o29.optional = n46;
            return this.finishNode(o29, "OptionalMemberExpression");
        }
        return this.finishNode(o29, "MemberExpression");
    }
    parseBind(e791, t470, s273, i169, r111) {
        const a61 = this.startNodeAt(t470, s273);
        a61.object = e791;
        this.next();
        a61.callee = this.parseNoCallExpr();
        r111.stop = true;
        return this.parseSubscripts(this.finishNode(a61, "BindExpression"), t470, s273, i169);
    }
    parseCoverCallAndAsyncArrowHead(e792, t471, s274, i170, r112) {
        const a62 = this.state.maybeInArrowParameters;
        let n47 = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        let o30 = this.startNodeAt(t471, s274);
        o30.callee = e792;
        const { maybeAsyncArrow: h20 , optionalChainMember: c101  } = i170;
        if (h20) {
            this.expressionScope.enter(newAsyncArrowScope());
            n47 = new ExpressionErrors;
        }
        c101 && (o30.optional = r112);
        o30.arguments = r112 ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Import" === e792.type, "Super" !== e792.type, o30, n47);
        this.finishCallExpression(o30, c101);
        if (h20 && this.shouldParseAsyncArrow() && !r112) {
            i170.stop = true;
            this.checkDestructuringPrivate(n47);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            o30 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(t471, s274), o30);
        } else {
            if (h20) {
                this.checkExpressionErrors(n47, true);
                this.expressionScope.exit();
            }
            this.toReferencedArguments(o30);
        }
        this.state.maybeInArrowParameters = a62;
        return o30;
    }
    toReferencedArguments(e793, t472) {
        this.toReferencedListDeep(e793.arguments, t472);
    }
    parseTaggedTemplateExpression(e794, t473, s275, i171) {
        const r113 = this.startNodeAt(t473, s275);
        r113.tag = e794;
        r113.quasi = this.parseTemplate(true);
        i171.optionalChainMember && this.raise(a16.OptionalChainingNoTemplate, {
            at: s275
        });
        return this.finishNode(r113, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(e795) {
        return "Identifier" === e795.type && "async" === e795.name && this.state.lastTokEndLoc.index === e795.end && !this.canInsertSemicolon() && e795.end - e795.start === 5 && e795.start === this.state.potentialArrowAt;
    }
    finishCallExpression(e796, t475) {
        if ("Import" === e796.callee.type) {
            2 === e796.arguments.length && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions"));
            if (0 === e796.arguments.length || e796.arguments.length > 2) this.raise(a16.ImportCallArity, {
                at: e796,
                maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
            });
            else for (const t474 of e796.arguments)"SpreadElement" === t474.type && this.raise(a16.ImportCallSpreadArgument, {
                at: t474
            });
        }
        return this.finishNode(e796, t475 ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(e797, t476, s276, i172, r114) {
        const n48 = [];
        let o31 = true;
        const h21 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while(!this.eat(e797)){
            if (o31) o31 = false;
            else {
                this.expect(12);
                if (this.match(e797)) {
                    !t476 || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(a16.ImportCallArgumentTrailingComma, {
                        at: this.state.lastTokStartLoc
                    });
                    i172 && this.addTrailingCommaExtraToNode(i172);
                    this.next();
                    break;
                }
            }
            n48.push(this.parseExprListItem(false, r114, s276));
        }
        this.state.inFSharpPipelineDirectBody = h21;
        return n48;
    }
    shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(e798, t477) {
        var s277;
        this.resetPreviousNodeTrailingComments(t477);
        this.expect(19);
        this.parseArrowExpression(e798, t477.arguments, true, null == (s277 = t477.extra) ? void 0 : s277.trailingCommaLoc);
        t477.innerComments && setInnerComments(e798, t477.innerComments);
        t477.callee.trailingComments && setInnerComments(e798, t477.callee.trailingComments);
        return e798;
    }
    parseNoCallExpr() {
        const e799 = this.state.start;
        const t478 = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), e799, t478, true);
    }
    parseExprAtom(e801) {
        let t479;
        const { type: s278  } = this.state;
        switch(s278){
            case 79:
                return this.parseSuper();
            case 83:
                t479 = this.startNode();
                this.next();
                if (this.match(16)) return this.parseImportMetaProperty(t479);
                this.match(10) || this.raise(a16.UnsupportedImport, {
                    at: this.state.lastTokStartLoc
                });
                return this.finishNode(t479, "Import");
            case 78:
                t479 = this.startNode();
                this.next();
                return this.finishNode(t479, "ThisExpression");
            case 90:
                return this.parseDo(this.startNode(), false);
            case 56:
            case 31:
                this.readRegexp();
                return this.parseRegExpLiteral(this.state.value);
            case 130:
                return this.parseNumericLiteral(this.state.value);
            case 131:
                return this.parseBigIntLiteral(this.state.value);
            case 132:
                return this.parseDecimalLiteral(this.state.value);
            case 129:
                return this.parseStringLiteral(this.state.value);
            case 84:
                return this.parseNullLiteral();
            case 85:
                return this.parseBooleanLiteral(true);
            case 86:
                return this.parseBooleanLiteral(false);
            case 10:
                {
                    const e800 = this.state.potentialArrowAt === this.state.start;
                    return this.parseParenAndDistinguishExpression(e800);
                }
            case 2:
            case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
            case 0:
                return this.parseArrayLike(3, true, false, e801);
            case 6:
            case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
            case 5:
                return this.parseObjectLike(8, false, false, e801);
            case 68:
                return this.parseFunctionOrFunctionSent();
            case 26:
                this.parseDecorators();
            case 80:
                t479 = this.startNode();
                this.takeDecorators(t479);
                return this.parseClass(t479, false);
            case 77:
                return this.parseNewOrNewTarget();
            case 25:
            case 24:
                return this.parseTemplate(false);
            case 15:
                {
                    t479 = this.startNode();
                    this.next();
                    t479.object = null;
                    const e802 = t479.callee = this.parseNoCallExpr();
                    if ("MemberExpression" === e802.type) return this.finishNode(t479, "BindExpression");
                    throw this.raise(a16.UnsupportedBind, {
                        at: e802
                    });
                }
            case 134:
                this.raise(a16.PrivateInExpectedIn, {
                    at: this.state.startLoc,
                    identifierName: this.state.value
                });
                return this.parsePrivateName();
            case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
            case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
            case 37:
            case 38:
                return this.parseTopicReference("hack");
            case 44:
            case 54:
            case 27:
                {
                    const e803 = this.getPluginOption("pipelineOperator", "proposal");
                    if (e803) return this.parseTopicReference(e803);
                    throw this.unexpected();
                }
            case 47:
                {
                    const e804 = this.input.codePointAt(this.nextTokenStart());
                    if (isIdentifierStart(e804) || 62 === e804) {
                        this.expectOnePlugin([
                            "jsx",
                            "flow",
                            "typescript"
                        ]);
                        break;
                    }
                    throw this.unexpected();
                }
            default:
                if (tokenIsIdentifier(s278)) {
                    if (this.isContextual(123) && 123 === this.lookaheadCharCode() && !this.hasFollowingLineBreak()) return this.parseModuleExpression();
                    const e806 = this.state.potentialArrowAt === this.state.start;
                    const t480 = this.state.containsEsc;
                    const s279 = this.parseIdentifier();
                    if (!t480 && "async" === s279.name && !this.canInsertSemicolon()) {
                        const { type: e805  } = this.state;
                        if (68 === e805) {
                            this.resetPreviousNodeTrailingComments(s279);
                            this.next();
                            return this.parseFunction(this.startNodeAtNode(s279), void 0, true);
                        }
                        if (tokenIsIdentifier(e805)) return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(s279)) : s279;
                        if (90 === e805) {
                            this.resetPreviousNodeTrailingComments(s279);
                            return this.parseDo(this.startNodeAtNode(s279), true);
                        }
                    }
                    if (e806 && this.match(19) && !this.canInsertSemicolon()) {
                        this.next();
                        return this.parseArrowExpression(this.startNodeAtNode(s279), [
                            s279
                        ], false);
                    }
                    return s279;
                }
                throw this.unexpected();
        }
    }
    parseTopicReferenceThenEqualsSign(e807, t481) {
        const s280 = this.getPluginOption("pipelineOperator", "proposal");
        if (s280) {
            this.state.type = e807;
            this.state.value = t481;
            this.state.pos--;
            this.state.end--;
            this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
            return this.parseTopicReference(s280);
        }
        throw this.unexpected();
    }
    parseTopicReference(e808) {
        const t482 = this.startNode();
        const s281 = this.state.startLoc;
        const i173 = this.state.type;
        this.next();
        return this.finishTopicReference(t482, s281, e808, i173);
    }
    finishTopicReference(e809, t483, s282, i174) {
        if (this.testTopicReferenceConfiguration(s282, t483, i174)) {
            const i175 = "smart" === s282 ? "PipelinePrimaryTopicReference" : "TopicReference";
            this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === s282 ? a16.PrimaryTopicNotAllowed : a16.PipeTopicUnbound, {
                at: t483
            });
            this.registerTopicReference();
            return this.finishNode(e809, i175);
        }
        throw this.raise(a16.PipeTopicUnconfiguredToken, {
            at: t483,
            token: tokenLabelName(i174)
        });
    }
    testTopicReferenceConfiguration(e810, t484, s283) {
        switch(e810){
            case "hack":
                return this.hasPlugin([
                    "pipelineOperator",
                    {
                        topicToken: tokenLabelName(s283)
                    }
                ]);
            case "smart":
                return 27 === s283;
            default:
                throw this.raise(a16.PipeTopicRequiresHackPipes, {
                    at: t484
                });
        }
    }
    parseAsyncArrowUnaryFunction(e811) {
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const t485 = [
            this.parseIdentifier()
        ];
        this.prodParam.exit();
        this.hasPrecedingLineBreak() && this.raise(a16.LineTerminatorBeforeArrow, {
            at: this.state.curPosition()
        });
        this.expect(19);
        this.parseArrowExpression(e811, t485, true);
        return e811;
    }
    parseDo(e812, t486) {
        this.expectPlugin("doExpressions");
        t486 && this.expectPlugin("asyncDoExpressions");
        e812.async = t486;
        this.next();
        const s284 = this.state.labels;
        this.state.labels = [];
        if (t486) {
            this.prodParam.enter(2);
            e812.body = this.parseBlock();
            this.prodParam.exit();
        } else e812.body = this.parseBlock();
        this.state.labels = s284;
        return this.finishNode(e812, "DoExpression");
    }
    parseSuper() {
        const e813 = this.startNode();
        this.next();
        !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(a16.UnexpectedSuper, {
            at: e813
        }) : this.raise(a16.SuperNotAllowed, {
            at: e813
        });
        this.match(10) || this.match(0) || this.match(16) || this.raise(a16.UnsupportedSuper, {
            at: e813
        });
        return this.finishNode(e813, "Super");
    }
    parsePrivateName() {
        const e814 = this.startNode();
        const t487 = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));
        const s285 = this.state.value;
        this.next();
        e814.id = this.createIdentifier(t487, s285);
        return this.finishNode(e814, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
        const e815 = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(16)) {
            const t488 = this.createIdentifier(this.startNodeAtNode(e815), "function");
            this.next();
            this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected();
            return this.parseMetaProperty(e815, t488, "sent");
        }
        return this.parseFunction(e815);
    }
    parseMetaProperty(e816, t489, s286) {
        e816.meta = t489;
        const i176 = this.state.containsEsc;
        e816.property = this.parseIdentifier(true);
        (e816.property.name !== s286 || i176) && this.raise(a16.UnsupportedMetaProperty, {
            at: e816.property,
            target: t489.name,
            onlyValidPropertyName: s286
        });
        return this.finishNode(e816, "MetaProperty");
    }
    parseImportMetaProperty(e817) {
        const t490 = this.createIdentifier(this.startNodeAtNode(e817), "import");
        this.next();
        if (this.isContextual(100)) {
            this.inModule || this.raise(a16.ImportMetaOutsideModule, {
                at: t490
            });
            this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(e817, t490, "meta");
    }
    parseLiteralAtNode(e818, t491, s287) {
        this.addExtra(s287, "rawValue", e818);
        this.addExtra(s287, "raw", this.input.slice(s287.start, this.state.end));
        s287.value = e818;
        this.next();
        return this.finishNode(s287, t491);
    }
    parseLiteral(e819, t492) {
        const s288 = this.startNode();
        return this.parseLiteralAtNode(e819, t492, s288);
    }
    parseStringLiteral(e820) {
        return this.parseLiteral(e820, "StringLiteral");
    }
    parseNumericLiteral(e821) {
        return this.parseLiteral(e821, "NumericLiteral");
    }
    parseBigIntLiteral(e822) {
        return this.parseLiteral(e822, "BigIntLiteral");
    }
    parseDecimalLiteral(e823) {
        return this.parseLiteral(e823, "DecimalLiteral");
    }
    parseRegExpLiteral(e824) {
        const t493 = this.parseLiteral(e824.value, "RegExpLiteral");
        t493.pattern = e824.pattern;
        t493.flags = e824.flags;
        return t493;
    }
    parseBooleanLiteral(e825) {
        const t494 = this.startNode();
        t494.value = e825;
        this.next();
        return this.finishNode(t494, "BooleanLiteral");
    }
    parseNullLiteral() {
        const e826 = this.startNode();
        this.next();
        return this.finishNode(e826, "NullLiteral");
    }
    parseParenAndDistinguishExpression(e828) {
        const t496 = this.state.start;
        const s289 = this.state.startLoc;
        let i177;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const r115 = this.state.maybeInArrowParameters;
        const a63 = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const n49 = this.state.start;
        const o32 = this.state.startLoc;
        const h22 = [];
        const c1110 = new ExpressionErrors;
        let p101 = true;
        let l55;
        let u411;
        while(!this.match(11)){
            if (p101) p101 = false;
            else {
                this.expect(12, null === c1110.optionalParametersLoc ? null : c1110.optionalParametersLoc);
                if (this.match(11)) {
                    u411 = this.state.startLoc;
                    break;
                }
            }
            if (this.match(21)) {
                const e827 = this.state.start;
                const t495 = this.state.startLoc;
                l55 = this.state.startLoc;
                h22.push(this.parseParenItem(this.parseRestBinding(), e827, t495));
                if (!this.checkCommaAfterRest(41)) break;
            } else h22.push(this.parseMaybeAssignAllowIn(c1110, this.parseParenItem));
        }
        const d311 = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = r115;
        this.state.inFSharpPipelineDirectBody = a63;
        let m111 = this.startNodeAt(t496, s289);
        if (e828 && this.shouldParseArrow(h22) && (m111 = this.parseArrow(m111))) {
            this.checkDestructuringPrivate(c1110);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            this.parseArrowExpression(m111, h22, false);
            return m111;
        }
        this.expressionScope.exit();
        h22.length || this.unexpected(this.state.lastTokStartLoc);
        u411 && this.unexpected(u411);
        l55 && this.unexpected(l55);
        this.checkExpressionErrors(c1110, true);
        this.toReferencedListDeep(h22, true);
        if (h22.length > 1) {
            i177 = this.startNodeAt(n49, o32);
            i177.expressions = h22;
            this.finishNode(i177, "SequenceExpression");
            this.resetEndLocation(i177, d311);
        } else i177 = h22[0];
        return this.wrapParenthesis(t496, s289, i177);
    }
    wrapParenthesis(e829, t497, s290) {
        if (!this.options.createParenthesizedExpressions) {
            this.addExtra(s290, "parenthesized", true);
            this.addExtra(s290, "parenStart", e829);
            this.takeSurroundingComments(s290, e829, this.state.lastTokEndLoc.index);
            return s290;
        }
        const i178 = this.startNodeAt(e829, t497);
        i178.expression = s290;
        this.finishNode(i178, "ParenthesizedExpression");
        return i178;
    }
    shouldParseArrow(e) {
        return !this.canInsertSemicolon();
    }
    parseArrow(e830) {
        if (this.eat(19)) return e830;
    }
    parseParenItem(e831, t, s) {
        return e831;
    }
    parseNewOrNewTarget() {
        const e832 = this.startNode();
        this.next();
        if (this.match(16)) {
            const t498 = this.createIdentifier(this.startNodeAtNode(e832), "new");
            this.next();
            const s291 = this.parseMetaProperty(e832, t498, "target");
            this.scope.inNonArrowFunction || this.scope.inClass || this.raise(a16.UnexpectedNewTarget, {
                at: s291
            });
            return s291;
        }
        return this.parseNew(e832);
    }
    parseNew(e833) {
        e833.callee = this.parseNoCallExpr();
        "Import" === e833.callee.type ? this.raise(a16.ImportCallNotNewExpression, {
            at: e833.callee
        }) : this.isOptionalChain(e833.callee) ? this.raise(a16.OptionalChainingNoNew, {
            at: this.state.lastTokEndLoc
        }) : this.eat(18) && this.raise(a16.OptionalChainingNoNew, {
            at: this.state.startLoc
        });
        this.parseNewArguments(e833);
        return this.finishNode(e833, "NewExpression");
    }
    parseNewArguments(e834) {
        if (this.eat(10)) {
            const t499 = this.parseExprList(11);
            this.toReferencedList(t499);
            e834.arguments = t499;
        } else e834.arguments = [];
    }
    parseTemplateElement(e835) {
        const { start: t500 , startLoc: s292 , end: i179 , value: r116  } = this.state;
        const n50 = t500 + 1;
        const o33 = this.startNodeAt(n50, createPositionWithColumnOffset(s292, 1));
        null === r116 && (e835 || this.raise(a16.InvalidEscapeSequenceTemplate, {
            at: createPositionWithColumnOffset(s292, 2)
        }));
        const h23 = this.match(24);
        const c121 = h23 ? -1 : -2;
        const p11 = i179 + c121;
        o33.value = {
            raw: this.input.slice(n50, p11).replace(/\r\n?/g, "\n"),
            cooked: null === r116 ? null : r116.slice(1, c121)
        };
        o33.tail = h23;
        this.next();
        this.finishNode(o33, "TemplateElement");
        this.resetEndLocation(o33, createPositionWithColumnOffset(this.state.lastTokEndLoc, c121));
        return o33;
    }
    parseTemplate(e836) {
        const t501 = this.startNode();
        t501.expressions = [];
        let s293 = this.parseTemplateElement(e836);
        t501.quasis = [
            s293
        ];
        while(!s293.tail){
            t501.expressions.push(this.parseTemplateSubstitution());
            this.readTemplateContinuation();
            t501.quasis.push(s293 = this.parseTemplateElement(e836));
        }
        return this.finishNode(t501, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
        return this.parseExpression();
    }
    parseObjectLike(e837, t502, s294, i180) {
        s294 && this.expectPlugin("recordAndTuple");
        const r118 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const n51 = Object.create(null);
        let o34 = true;
        const h24 = this.startNode();
        h24.properties = [];
        this.next();
        while(!this.match(e837)){
            if (o34) o34 = false;
            else {
                this.expect(12);
                if (this.match(e837)) {
                    this.addTrailingCommaExtraToNode(h24);
                    break;
                }
            }
            let r117;
            if (t502) r117 = this.parseBindingProperty();
            else {
                r117 = this.parsePropertyDefinition(i180);
                this.checkProto(r117, s294, n51, i180);
            }
            s294 && !this.isObjectProperty(r117) && "SpreadElement" !== r117.type && this.raise(a16.InvalidRecordProperty, {
                at: r117
            });
            r117.shorthand && this.addExtra(r117, "shorthand", true);
            h24.properties.push(r117);
        }
        this.next();
        this.state.inFSharpPipelineDirectBody = r118;
        let c131 = "ObjectExpression";
        t502 ? c131 = "ObjectPattern" : s294 && (c131 = "RecordExpression");
        return this.finishNode(h24, c131);
    }
    addTrailingCommaExtraToNode(e838) {
        this.addExtra(e838, "trailingComma", this.state.lastTokStart);
        this.addExtra(e838, "trailingCommaLoc", this.state.lastTokStartLoc, false);
    }
    maybeAsyncOrAccessorProp(e839) {
        return !e839.computed && "Identifier" === e839.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(e840) {
        let t503 = [];
        if (this.match(26)) {
            this.hasPlugin("decorators") && this.raise(a16.UnsupportedPropertyDecorator, {
                at: this.state.startLoc
            });
            while(this.match(26))t503.push(this.parseDecorator());
        }
        const s295 = this.startNode();
        let i181 = false;
        let r119 = false;
        let n52;
        let o35;
        if (this.match(21)) {
            t503.length && this.unexpected();
            return this.parseSpread();
        }
        if (t503.length) {
            s295.decorators = t503;
            t503 = [];
        }
        s295.method = false;
        if (e840) {
            n52 = this.state.start;
            o35 = this.state.startLoc;
        }
        let h25 = this.eat(55);
        this.parsePropertyNamePrefixOperator(s295);
        const c141 = this.state.containsEsc;
        const p12 = this.parsePropertyName(s295, e840);
        if (!h25 && !c141 && this.maybeAsyncOrAccessorProp(s295)) {
            const e841 = p12.name;
            if ("async" === e841 && !this.hasPrecedingLineBreak()) {
                i181 = true;
                this.resetPreviousNodeTrailingComments(p12);
                h25 = this.eat(55);
                this.parsePropertyName(s295);
            }
            if ("get" === e841 || "set" === e841) {
                r119 = true;
                this.resetPreviousNodeTrailingComments(p12);
                s295.kind = e841;
                if (this.match(55)) {
                    h25 = true;
                    this.raise(a16.AccessorIsGenerator, {
                        at: this.state.curPosition(),
                        kind: e841
                    });
                    this.next();
                }
                this.parsePropertyName(s295);
            }
        }
        this.parseObjPropValue(s295, n52, o35, h25, i181, false, r119, e840);
        return s295;
    }
    getGetterSetterExpectedParamCount(e842) {
        return "get" === e842.kind ? 0 : 1;
    }
    getObjectOrClassMethodParams(e843) {
        return e843.params;
    }
    checkGetterSetterParams(e844) {
        var t504;
        const s296 = this.getGetterSetterExpectedParamCount(e844);
        const i182 = this.getObjectOrClassMethodParams(e844);
        i182.length !== s296 && this.raise("get" === e844.kind ? a16.BadGetterArity : a16.BadSetterArity, {
            at: e844
        });
        "set" === e844.kind && "RestElement" === (null == (t504 = i182[i182.length - 1]) ? void 0 : t504.type) && this.raise(a16.BadSetterRestParameter, {
            at: e844
        });
    }
    parseObjectMethod(e845, t505, s297, i183, r120) {
        if (r120) {
            this.parseMethod(e845, t505, false, false, false, "ObjectMethod");
            this.checkGetterSetterParams(e845);
            return e845;
        }
        if (s297 || t505 || this.match(10)) {
            i183 && this.unexpected();
            e845.kind = "method";
            e845.method = true;
            return this.parseMethod(e845, t505, s297, false, false, "ObjectMethod");
        }
    }
    parseObjectProperty(e846, t506, s298, i184, r121) {
        e846.shorthand = false;
        if (this.eat(14)) {
            e846.value = i184 ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(r121);
            return this.finishNode(e846, "ObjectProperty");
        }
        if (!e846.computed && "Identifier" === e846.key.type) {
            this.checkReservedWord(e846.key.name, e846.key.loc.start, true, false);
            if (i184) e846.value = this.parseMaybeDefault(t506, s298, cloneIdentifier(e846.key));
            else if (this.match(29)) {
                const i185 = this.state.startLoc;
                null != r121 ? null === r121.shorthandAssignLoc && (r121.shorthandAssignLoc = i185) : this.raise(a16.InvalidCoverInitializedName, {
                    at: i185
                });
                e846.value = this.parseMaybeDefault(t506, s298, cloneIdentifier(e846.key));
            } else e846.value = cloneIdentifier(e846.key);
            e846.shorthand = true;
            return this.finishNode(e846, "ObjectProperty");
        }
    }
    parseObjPropValue(e847, t507, s299, i186, r122, a64, n53, o36) {
        const h26 = this.parseObjectMethod(e847, i186, r122, a64, n53) || this.parseObjectProperty(e847, t507, s299, a64, o36);
        h26 || this.unexpected();
        return h26;
    }
    parsePropertyName(e848, t508) {
        if (this.eat(0)) {
            e848.computed = true;
            e848.key = this.parseMaybeAssignAllowIn();
            this.expect(3);
        } else {
            const { type: s300 , value: i187  } = this.state;
            let r123;
            if (tokenIsKeywordOrIdentifier(s300)) r123 = this.parseIdentifier(true);
            else switch(s300){
                case 130:
                    r123 = this.parseNumericLiteral(i187);
                    break;
                case 129:
                    r123 = this.parseStringLiteral(i187);
                    break;
                case 131:
                    r123 = this.parseBigIntLiteral(i187);
                    break;
                case 132:
                    r123 = this.parseDecimalLiteral(i187);
                    break;
                case 134:
                    {
                        const e849 = this.state.startLoc;
                        null != t508 ? null === t508.privateKeyLoc && (t508.privateKeyLoc = e849) : this.raise(a16.UnexpectedPrivateField, {
                            at: e849
                        });
                        r123 = this.parsePrivateName();
                        break;
                    }
                default:
                    throw this.unexpected();
            }
            e848.key = r123;
            134 !== s300 && (e848.computed = false);
        }
        return e848.key;
    }
    initFunction(e850, t509) {
        e850.id = null;
        e850.generator = false;
        e850.async = !!t509;
    }
    parseMethod(e851, t510, s301, i188, r124, a65, n54 = false) {
        this.initFunction(e851, s301);
        e851.generator = !!t510;
        const o37 = i188;
        this.scope.enter(2 | 16 | (n54 ? 64 : 0) | (r124 ? 32 : 0));
        this.prodParam.enter(functionFlags(s301, e851.generator));
        this.parseFunctionParams(e851, o37);
        this.parseFunctionBodyAndFinish(e851, a65, true);
        this.prodParam.exit();
        this.scope.exit();
        return e851;
    }
    parseArrayLike(e852, t, s302, i189) {
        s302 && this.expectPlugin("recordAndTuple");
        const r125 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const a66 = this.startNode();
        this.next();
        a66.elements = this.parseExprList(e852, !s302, i189, a66);
        this.state.inFSharpPipelineDirectBody = r125;
        return this.finishNode(a66, s302 ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(e853, t511, s303, i190) {
        this.scope.enter(2 | 4);
        let r126 = functionFlags(s303, false);
        !this.match(5) && this.prodParam.hasIn && (r126 |= ze2);
        this.prodParam.enter(r126);
        this.initFunction(e853, s303);
        const a67 = this.state.maybeInArrowParameters;
        if (t511) {
            this.state.maybeInArrowParameters = true;
            this.setArrowFunctionParameters(e853, t511, i190);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(e853, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = a67;
        return this.finishNode(e853, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(e854, t512, s304) {
        e854.params = this.toAssignableList(t512, s304, false);
    }
    parseFunctionBodyAndFinish(e855, t513, s305 = false) {
        this.parseFunctionBody(e855, false, s305);
        this.finishNode(e855, t513);
    }
    parseFunctionBody(e856, t514, s306 = false) {
        const i191 = t514 && !this.match(5);
        this.expressionScope.enter(newExpressionScope());
        if (i191) {
            e856.body = this.parseMaybeAssign();
            this.checkParams(e856, false, t514, false);
        } else {
            const i192 = this.state.strict;
            const r127 = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(this.prodParam.currentFlags() | 4);
            e856.body = this.parseBlock(true, false, (r129)=>{
                const n55 = !this.isSimpleParamList(e856.params);
                r129 && n55 && this.raise(a16.IllegalLanguageModeDirective, {
                    at: "method" !== e856.kind && "constructor" !== e856.kind || !e856.key ? e856 : e856.key.loc.end
                });
                const o38 = !i192 && this.state.strict;
                this.checkParams(e856, !this.state.strict && !t514 && !s306 && !n55, t514, o38);
                this.state.strict && e856.id && this.checkIdentifier(e856.id, le2, o38);
            });
            this.prodParam.exit();
            this.state.labels = r127;
        }
        this.expressionScope.exit();
    }
    isSimpleParameter(e857) {
        return "Identifier" === e857.type;
    }
    isSimpleParamList(e858) {
        for(let t515 = 0, s307 = e858.length; t515 < s307; t515++)if (!this.isSimpleParameter(e858[t515])) return false;
        return true;
    }
    checkParams(e859, t517, s, i193 = true) {
        const r130 = !t517 && new Set;
        const a68 = {
            type: "FormalParameters"
        };
        for (const t516 of e859.params)this.checkLVal(t516, {
            in: a68,
            binding: re4,
            checkClashes: r130,
            strictModeChanged: i193
        });
    }
    parseExprList(e860, t518, s308, i194) {
        const r131 = [];
        let a69 = true;
        while(!this.eat(e860)){
            if (a69) a69 = false;
            else {
                this.expect(12);
                if (this.match(e860)) {
                    i194 && this.addTrailingCommaExtraToNode(i194);
                    this.next();
                    break;
                }
            }
            r131.push(this.parseExprListItem(t518, s308));
        }
        return r131;
    }
    parseExprListItem(e861, t519, s310) {
        let i195;
        if (this.match(12)) {
            e861 || this.raise(a16.UnexpectedToken, {
                at: this.state.curPosition(),
                unexpected: ","
            });
            i195 = null;
        } else if (this.match(21)) {
            const e862 = this.state.start;
            const s309 = this.state.startLoc;
            i195 = this.parseParenItem(this.parseSpread(t519), e862, s309);
        } else if (this.match(17)) {
            this.expectPlugin("partialApplication");
            s310 || this.raise(a16.UnexpectedArgumentPlaceholder, {
                at: this.state.startLoc
            });
            const e863 = this.startNode();
            this.next();
            i195 = this.finishNode(e863, "ArgumentPlaceholder");
        } else i195 = this.parseMaybeAssignAllowIn(t519, this.parseParenItem);
        return i195;
    }
    parseIdentifier(e864) {
        const t520 = this.startNode();
        const s311 = this.parseIdentifierName(t520.start, e864);
        return this.createIdentifier(t520, s311);
    }
    createIdentifier(e865, t521) {
        e865.name = t521;
        e865.loc.identifierName = t521;
        return this.finishNode(e865, "Identifier");
    }
    parseIdentifierName(e, t522) {
        let s312;
        const { startLoc: i196 , type: r132  } = this.state;
        if (!tokenIsKeywordOrIdentifier(r132)) throw this.unexpected();
        s312 = this.state.value;
        const a70 = tokenKeywordOrIdentifierIsKeyword(r132);
        t522 ? a70 && this.replaceToken(128) : this.checkReservedWord(s312, i196, a70, false);
        this.next();
        return s312;
    }
    checkReservedWord(e866, t523, s313, i197) {
        if (e866.length > 10) return;
        if (!canBeReservedWord(e866)) return;
        if ("yield" === e866) {
            if (this.prodParam.hasYield) {
                this.raise(a16.YieldBindingIdentifier, {
                    at: t523
                });
                return;
            }
        } else if ("await" === e866) {
            if (this.prodParam.hasAwait) {
                this.raise(a16.AwaitBindingIdentifier, {
                    at: t523
                });
                return;
            }
            if (this.scope.inStaticBlock) {
                this.raise(a16.AwaitBindingIdentifierInStaticBlock, {
                    at: t523
                });
                return;
            }
            this.expressionScope.recordAsyncArrowParametersError({
                at: t523
            });
        } else if ("arguments" === e866 && this.scope.inClassAndNotInNonArrowFunction) {
            this.raise(a16.ArgumentsInClass, {
                at: t523
            });
            return;
        }
        if (s313 && isKeyword(e866)) {
            this.raise(a16.UnexpectedKeyword, {
                at: t523,
                keyword: e866
            });
            return;
        }
        const r133 = this.state.strict ? i197 ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord;
        r133(e866, this.inModule) && this.raise(a16.UnexpectedReservedWord, {
            at: t523,
            reservedWord: e866
        });
    }
    isAwaitAllowed() {
        return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
    }
    parseAwait(e867, t524) {
        const s314 = this.startNodeAt(e867, t524);
        this.expressionScope.recordParameterInitializerError(a16.AwaitExpressionFormalParameter, {
            at: s314
        });
        this.eat(55) && this.raise(a16.ObsoleteAwaitStar, {
            at: s314
        });
        this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true);
        this.state.soloAwait || (s314.argument = this.parseMaybeUnary(null, true));
        return this.finishNode(s314, "AwaitExpression");
    }
    isAmbiguousAwait() {
        if (this.hasPrecedingLineBreak()) return true;
        const { type: e868  } = this.state;
        return 53 === e868 || 10 === e868 || 0 === e868 || tokenIsTemplate(e868) || 133 === e868 || 56 === e868 || this.hasPlugin("v8intrinsic") && 54 === e868;
    }
    parseYield() {
        const e869 = this.startNode();
        this.expressionScope.recordParameterInitializerError(a16.YieldInParameter, {
            at: e869
        });
        this.next();
        let t525 = false;
        let s315 = null;
        if (!this.hasPrecedingLineBreak()) {
            t525 = this.eat(55);
            switch(this.state.type){
                case 13:
                case 135:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                    if (!t525) break;
                default:
                    s315 = this.parseMaybeAssign();
            }
        }
        e869.delegate = t525;
        e869.argument = s315;
        return this.finishNode(e869, "YieldExpression");
    }
    checkPipelineAtInfixOperator(e870, t526) {
        this.hasPlugin([
            "pipelineOperator",
            {
                proposal: "smart"
            }
        ]) && "SequenceExpression" === e870.type && this.raise(a16.PipelineHeadSequenceExpression, {
            at: t526
        });
    }
    parseSmartPipelineBodyInStyle(e871, t527, s316) {
        const i198 = this.startNodeAt(t527, s316);
        if (this.isSimpleReference(e871)) {
            i198.callee = e871;
            return this.finishNode(i198, "PipelineBareFunction");
        }
        this.checkSmartPipeTopicBodyEarlyErrors(s316);
        i198.expression = e871;
        return this.finishNode(i198, "PipelineTopicExpression");
    }
    isSimpleReference(e872) {
        switch(e872.type){
            case "MemberExpression":
                return !e872.computed && this.isSimpleReference(e872.object);
            case "Identifier":
                return true;
            default:
                return false;
        }
    }
    checkSmartPipeTopicBodyEarlyErrors(e873) {
        if (this.match(19)) throw this.raise(a16.PipelineBodyNoArrow, {
            at: this.state.startLoc
        });
        this.topicReferenceWasUsedInCurrentContext() || this.raise(a16.PipelineTopicUnused, {
            at: e873
        });
    }
    withTopicBindingContext(e874) {
        const t528 = this.state.topicContext;
        this.state.topicContext = {
            maxNumOfResolvableTopics: 1,
            maxTopicIndex: null
        };
        try {
            return e874();
        } finally{
            this.state.topicContext = t528;
        }
    }
    withSmartMixTopicForbiddingContext(e875) {
        if (!this.hasPlugin([
            "pipelineOperator",
            {
                proposal: "smart"
            }
        ])) return e875();
        {
            const t529 = this.state.topicContext;
            this.state.topicContext = {
                maxNumOfResolvableTopics: 0,
                maxTopicIndex: null
            };
            try {
                return e875();
            } finally{
                this.state.topicContext = t529;
            }
        }
    }
    withSoloAwaitPermittingContext(e876) {
        const t530 = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
            return e876();
        } finally{
            this.state.soloAwait = t530;
        }
    }
    allowInAnd(e877) {
        const t531 = this.prodParam.currentFlags();
        const s317 = 8 & ~t531;
        if (s317) {
            this.prodParam.enter(t531 | 8);
            try {
                return e877();
            } finally{
                this.prodParam.exit();
            }
        }
        return e877();
    }
    disallowInAnd(e878) {
        const t532 = this.prodParam.currentFlags();
        const s318 = 8 & t532;
        if (s318) {
            this.prodParam.enter(t532 & ~8);
            try {
                return e878();
            } finally{
                this.prodParam.exit();
            }
        }
        return e878();
    }
    registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
        return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(e879) {
        const t533 = this.state.start;
        const s319 = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const i199 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const r134 = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), t533, s319, e879);
        this.state.inFSharpPipelineDirectBody = i199;
        return r134;
    }
    parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const e880 = this.startNode();
        this.next();
        this.eat(5);
        const t534 = this.initializeScopes(true);
        this.enterInitialScopes();
        const s320 = this.startNode();
        try {
            e880.body = this.parseProgram(s320, 8, "module");
        } finally{
            t534();
        }
        this.eat(8);
        return this.finishNode(e880, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(e) {}
}
const at2 = {
    kind: "loop"
}, nt2 = {
    kind: "switch"
};
const lt3 = /[\uD800-\uDFFF]/u;
const ut2 = /in(?:stanceof)?/y;
function babel7CompatTokens(e881, t536) {
    for(let s321 = 0; s321 < e881.length; s321++){
        const i200 = e881[s321];
        const { type: r135  } = i200;
        if ("number" === typeof r135) {
            if (134 === r135) {
                const { loc: t535 , start: r136 , value: a71 , end: n56  } = i200;
                const o39 = r136 + 1;
                const h27 = createPositionWithColumnOffset(t535.start, 1);
                e881.splice(s321, 1, new Token({
                    type: getExportedToken(27),
                    value: "#",
                    start: r136,
                    end: o39,
                    startLoc: t535.start,
                    endLoc: h27
                }), new Token({
                    type: getExportedToken(128),
                    value: a71,
                    start: o39,
                    end: n56,
                    startLoc: h27,
                    endLoc: t535.end
                }));
                s321++;
                continue;
            }
            if (tokenIsTemplate(r135)) {
                const { loc: a72 , start: n57 , value: o40 , end: h28  } = i200;
                const c151 = n57 + 1;
                const p13 = createPositionWithColumnOffset(a72.start, 1);
                let l61;
                l61 = 96 === t536.charCodeAt(n57) ? new Token({
                    type: getExportedToken(22),
                    value: "`",
                    start: n57,
                    end: c151,
                    startLoc: a72.start,
                    endLoc: p13
                }) : new Token({
                    type: getExportedToken(8),
                    value: "}",
                    start: n57,
                    end: c151,
                    startLoc: a72.start,
                    endLoc: p13
                });
                let u510, d410, m211, f113;
                if (24 === r135) {
                    d410 = h28 - 1;
                    m211 = createPositionWithColumnOffset(a72.end, -1);
                    u510 = null === o40 ? null : o40.slice(1, -1);
                    f113 = new Token({
                        type: getExportedToken(22),
                        value: "`",
                        start: d410,
                        end: h28,
                        startLoc: m211,
                        endLoc: a72.end
                    });
                } else {
                    d410 = h28 - 2;
                    m211 = createPositionWithColumnOffset(a72.end, -2);
                    u510 = null === o40 ? null : o40.slice(1, -2);
                    f113 = new Token({
                        type: getExportedToken(23),
                        value: "${",
                        start: d410,
                        end: h28,
                        startLoc: m211,
                        endLoc: a72.end
                    });
                }
                e881.splice(s321, 1, l61, new Token({
                    type: getExportedToken(20),
                    value: u510,
                    start: c151,
                    end: d410,
                    startLoc: p13,
                    endLoc: m211
                }), f113);
                s321 += 2;
                continue;
            }
            i200.type = getExportedToken(r135);
        }
    }
    return e881;
}
class StatementParser extends ExpressionParser {
    parseTopLevel(e882, t537) {
        e882.program = this.parseProgram(t537);
        e882.comments = this.state.comments;
        this.options.tokens && (e882.tokens = babel7CompatTokens(this.tokens, this.input));
        return this.finishNode(e882, "File");
    }
    parseProgram(e884, t539 = 135, s322 = this.options.sourceType) {
        e884.sourceType = s322;
        e884.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(e884, true, true, t539);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [e883, t538] of Array.from(this.scope.undefinedExports))this.raise(a16.ModuleExportUndefined, {
            at: t538,
            localName: e883
        });
        return this.finishNode(e884, "Program");
    }
    stmtToDirective(e885) {
        const t540 = e885;
        t540.type = "Directive";
        t540.value = t540.expression;
        delete t540.expression;
        const s323 = t540.value;
        const i201 = s323.value;
        const r137 = this.input.slice(s323.start, s323.end);
        const a73 = s323.value = r137.slice(1, -1);
        this.addExtra(s323, "raw", r137);
        this.addExtra(s323, "rawValue", a73);
        this.addExtra(s323, "expressionValue", i201);
        s323.type = "DirectiveLiteral";
        return t540;
    }
    parseInterpreterDirective() {
        if (!this.match(28)) return null;
        const e886 = this.startNode();
        e886.value = this.state.value;
        this.next();
        return this.finishNode(e886, "InterpreterDirective");
    }
    isLet(e887) {
        return !!this.isContextual(99) && this.isLetKeyword(e887);
    }
    isLetKeyword(e888) {
        const t541 = this.nextTokenStart();
        const s324 = this.codePointAtPos(t541);
        if (92 === s324 || 91 === s324) return true;
        if (e888) return false;
        if (123 === s324) return true;
        if (isIdentifierStart(s324)) {
            ut2.lastIndex = t541;
            if (ut2.test(this.input)) {
                const e889 = this.codePointAtPos(ut2.lastIndex);
                if (!isIdentifierChar(e889) && 92 !== e889) return false;
            }
            return true;
        }
        return false;
    }
    parseStatement(e890, t542) {
        this.match(26) && this.parseDecorators(true);
        return this.parseStatementContent(e890, t542);
    }
    parseStatementContent(e891, t543) {
        let s325 = this.state.type;
        const i202 = this.startNode();
        let r138;
        if (this.isLet(e891)) {
            s325 = 74;
            r138 = "let";
        }
        switch(s325){
            case 60:
                return this.parseBreakContinueStatement(i202, true);
            case 63:
                return this.parseBreakContinueStatement(i202, false);
            case 64:
                return this.parseDebuggerStatement(i202);
            case 90:
                return this.parseDoStatement(i202);
            case 91:
                return this.parseForStatement(i202);
            case 68:
                if (46 === this.lookaheadCharCode()) break;
                e891 && (this.state.strict ? this.raise(a16.StrictFunction, {
                    at: this.state.startLoc
                }) : "if" !== e891 && "label" !== e891 && this.raise(a16.SloppyFunction, {
                    at: this.state.startLoc
                }));
                return this.parseFunctionStatement(i202, false, !e891);
            case 80:
                e891 && this.unexpected();
                return this.parseClass(i202, true);
            case 69:
                return this.parseIfStatement(i202);
            case 70:
                return this.parseReturnStatement(i202);
            case 71:
                return this.parseSwitchStatement(i202);
            case 72:
                return this.parseThrowStatement(i202);
            case 73:
                return this.parseTryStatement(i202);
            case 75:
            case 74:
                r138 = r138 || this.state.value;
                e891 && "var" !== r138 && this.raise(a16.UnexpectedLexicalDeclaration, {
                    at: this.state.startLoc
                });
                return this.parseVarStatement(i202, r138);
            case 92:
                return this.parseWhileStatement(i202);
            case 76:
                return this.parseWithStatement(i202);
            case 5:
                return this.parseBlock();
            case 13:
                return this.parseEmptyStatement(i202);
            case 83:
                {
                    const e892 = this.lookaheadCharCode();
                    if (40 === e892 || 46 === e892) break;
                }
            case 82:
                {
                    this.options.allowImportExportEverywhere || t543 || this.raise(a16.UnexpectedImportExport, {
                        at: this.state.startLoc
                    });
                    this.next();
                    let e893;
                    if (83 === s325) {
                        e893 = this.parseImport(i202);
                        "ImportDeclaration" !== e893.type || e893.importKind && "value" !== e893.importKind || (this.sawUnambiguousESM = true);
                    } else {
                        e893 = this.parseExport(i202);
                        ("ExportNamedDeclaration" !== e893.type || e893.exportKind && "value" !== e893.exportKind) && ("ExportAllDeclaration" !== e893.type || e893.exportKind && "value" !== e893.exportKind) && "ExportDefaultDeclaration" !== e893.type || (this.sawUnambiguousESM = true);
                    }
                    this.assertModuleNodeAllowed(i202);
                    return e893;
                }
            default:
                if (this.isAsyncFunction()) {
                    e891 && this.raise(a16.AsyncFunctionInSingleStatementContext, {
                        at: this.state.startLoc
                    });
                    this.next();
                    return this.parseFunctionStatement(i202, true, !e891);
                }
        }
        const n58 = this.state.value;
        const o41 = this.parseExpression();
        return tokenIsIdentifier(s325) && "Identifier" === o41.type && this.eat(14) ? this.parseLabeledStatement(i202, n58, o41, e891) : this.parseExpressionStatement(i202, o41);
    }
    assertModuleNodeAllowed(e894) {
        this.options.allowImportExportEverywhere || this.inModule || this.raise(a16.ImportOutsideModule, {
            at: e894
        });
    }
    takeDecorators(e895) {
        const t544 = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (t544.length) {
            e895.decorators = t544;
            this.resetStartLocationFromNode(e895, t544[0]);
            this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
        }
    }
    canHaveLeadingDecorator() {
        return this.match(80);
    }
    parseDecorators(e897) {
        const t545 = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        while(this.match(26)){
            const e896 = this.parseDecorator();
            t545.push(e896);
        }
        if (this.match(82)) {
            e897 || this.unexpected();
            this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(a16.DecoratorExportClass, {
                at: this.state.startLoc
            });
        } else if (!this.canHaveLeadingDecorator()) throw this.raise(a16.UnexpectedLeadingDecorator, {
            at: this.state.startLoc
        });
    }
    parseDecorator() {
        this.expectOnePlugin([
            "decorators-legacy",
            "decorators"
        ]);
        const e900 = this.startNode();
        this.next();
        if (this.hasPlugin("decorators")) {
            this.state.decoratorStack.push([]);
            const t547 = this.state.start;
            const s326 = this.state.startLoc;
            let i203;
            if (this.match(10)) {
                const e898 = this.state.start;
                const t546 = this.state.startLoc;
                this.next();
                i203 = this.parseExpression();
                this.expect(11);
                i203 = this.wrapParenthesis(e898, t546, i203);
            } else {
                i203 = this.parseIdentifier(false);
                while(this.eat(16)){
                    const e899 = this.startNodeAt(t547, s326);
                    e899.object = i203;
                    e899.property = this.parseIdentifier(true);
                    e899.computed = false;
                    i203 = this.finishNode(e899, "MemberExpression");
                }
            }
            e900.expression = this.parseMaybeDecoratorArguments(i203);
            this.state.decoratorStack.pop();
        } else e900.expression = this.parseExprSubscripts();
        return this.finishNode(e900, "Decorator");
    }
    parseMaybeDecoratorArguments(e901) {
        if (this.eat(10)) {
            const t548 = this.startNodeAtNode(e901);
            t548.callee = e901;
            t548.arguments = this.parseCallExpressionArguments(11, false);
            this.toReferencedList(t548.arguments);
            return this.finishNode(t548, "CallExpression");
        }
        return e901;
    }
    parseBreakContinueStatement(e902, t549) {
        this.next();
        if (this.isLineTerminator()) e902.label = null;
        else {
            e902.label = this.parseIdentifier();
            this.semicolon();
        }
        this.verifyBreakContinue(e902, t549);
        return this.finishNode(e902, t549 ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(e903, t550) {
        let s327;
        for(s327 = 0; s327 < this.state.labels.length; ++s327){
            const i204 = this.state.labels[s327];
            if (null == e903.label || i204.name === e903.label.name) {
                if (null != i204.kind && (t550 || "loop" === i204.kind)) break;
                if (e903.label && t550) break;
            }
        }
        if (s327 === this.state.labels.length) {
            const s328 = t550 ? "BreakStatement" : "ContinueStatement";
            this.raise(a16.IllegalBreakContinue, {
                at: e903,
                type: s328
            });
        }
    }
    parseDebuggerStatement(e904) {
        this.next();
        this.semicolon();
        return this.finishNode(e904, "DebuggerStatement");
    }
    parseHeaderExpression() {
        this.expect(10);
        const e905 = this.parseExpression();
        this.expect(11);
        return e905;
    }
    parseDoStatement(e906) {
        this.next();
        this.state.labels.push(at2);
        e906.body = this.withSmartMixTopicForbiddingContext(()=>this.parseStatement("do")
        );
        this.state.labels.pop();
        this.expect(92);
        e906.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(e906, "DoWhileStatement");
    }
    parseForStatement(e907) {
        this.next();
        this.state.labels.push(at2);
        let t551 = null;
        this.isAwaitAllowed() && this.eatContextual(96) && (t551 = this.state.lastTokStartLoc);
        this.scope.enter(0);
        this.expect(10);
        if (this.match(13)) {
            null !== t551 && this.unexpected(t551);
            return this.parseFor(e907, null);
        }
        const s329 = this.isContextual(99);
        const i205 = s329 && this.isLetKeyword();
        if (this.match(74) || this.match(75) || i205) {
            const s330 = this.startNode();
            const r139 = i205 ? "let" : this.state.value;
            this.next();
            this.parseVar(s330, true, r139);
            this.finishNode(s330, "VariableDeclaration");
            if ((this.match(58) || this.isContextual(101)) && 1 === s330.declarations.length) return this.parseForIn(e907, s330, t551);
            null !== t551 && this.unexpected(t551);
            return this.parseFor(e907, s330);
        }
        const r140 = this.isContextual(95);
        const n59 = new ExpressionErrors;
        const o42 = this.parseExpression(true, n59);
        const h29 = this.isContextual(101);
        if (h29) {
            s329 && this.raise(a16.ForOfLet, {
                at: o42
            });
            null === t551 && r140 && "Identifier" === o42.type && this.raise(a16.ForOfAsync, {
                at: o42
            });
        }
        if (h29 || this.match(58)) {
            this.checkDestructuringPrivate(n59);
            this.toAssignable(o42, true);
            const s331 = h29 ? "ForOfStatement" : "ForInStatement";
            this.checkLVal(o42, {
                in: {
                    type: s331
                }
            });
            return this.parseForIn(e907, o42, t551);
        }
        this.checkExpressionErrors(n59, true);
        null !== t551 && this.unexpected(t551);
        return this.parseFor(e907, o42);
    }
    parseFunctionStatement(e908, t552, s332) {
        this.next();
        return this.parseFunction(e908, 1 | (s332 ? 0 : 2), t552);
    }
    parseIfStatement(e909) {
        this.next();
        e909.test = this.parseHeaderExpression();
        e909.consequent = this.parseStatement("if");
        e909.alternate = this.eat(66) ? this.parseStatement("if") : null;
        return this.finishNode(e909, "IfStatement");
    }
    parseReturnStatement(e910) {
        this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(a16.IllegalReturn, {
            at: this.state.startLoc
        });
        this.next();
        if (this.isLineTerminator()) e910.argument = null;
        else {
            e910.argument = this.parseExpression();
            this.semicolon();
        }
        return this.finishNode(e910, "ReturnStatement");
    }
    parseSwitchStatement(e912) {
        this.next();
        e912.discriminant = this.parseHeaderExpression();
        const t553 = e912.cases = [];
        this.expect(5);
        this.state.labels.push(nt2);
        this.scope.enter(0);
        let s333;
        for(let e911; !this.match(8);)if (this.match(61) || this.match(65)) {
            const i206 = this.match(61);
            s333 && this.finishNode(s333, "SwitchCase");
            t553.push(s333 = this.startNode());
            s333.consequent = [];
            this.next();
            if (i206) s333.test = this.parseExpression();
            else {
                e911 && this.raise(a16.MultipleDefaultsInSwitch, {
                    at: this.state.lastTokStartLoc
                });
                e911 = true;
                s333.test = null;
            }
            this.expect(14);
        } else s333 ? s333.consequent.push(this.parseStatement(null)) : this.unexpected();
        this.scope.exit();
        s333 && this.finishNode(s333, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(e912, "SwitchStatement");
    }
    parseThrowStatement(e913) {
        this.next();
        this.hasPrecedingLineBreak() && this.raise(a16.NewlineAfterThrow, {
            at: this.state.lastTokEndLoc
        });
        e913.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(e913, "ThrowStatement");
    }
    parseCatchClauseParam() {
        const e914 = this.parseBindingAtom();
        const t554 = "Identifier" === e914.type;
        this.scope.enter(t554 ? 8 : 0);
        this.checkLVal(e914, {
            in: {
                type: "CatchClause"
            },
            binding: ie4,
            allowingSloppyLetBinding: true
        });
        return e914;
    }
    parseTryStatement(e915) {
        this.next();
        e915.block = this.parseBlock();
        e915.handler = null;
        if (this.match(62)) {
            const t555 = this.startNode();
            this.next();
            if (this.match(10)) {
                this.expect(10);
                t555.param = this.parseCatchClauseParam();
                this.expect(11);
            } else {
                t555.param = null;
                this.scope.enter(0);
            }
            t555.body = this.withSmartMixTopicForbiddingContext(()=>this.parseBlock(false, false)
            );
            this.scope.exit();
            e915.handler = this.finishNode(t555, "CatchClause");
        }
        e915.finalizer = this.eat(67) ? this.parseBlock() : null;
        e915.handler || e915.finalizer || this.raise(a16.NoCatchOrFinally, {
            at: e915
        });
        return this.finishNode(e915, "TryStatement");
    }
    parseVarStatement(e916, t556, s334 = false) {
        this.next();
        this.parseVar(e916, false, t556, s334);
        this.semicolon();
        return this.finishNode(e916, "VariableDeclaration");
    }
    parseWhileStatement(e917) {
        this.next();
        e917.test = this.parseHeaderExpression();
        this.state.labels.push(at2);
        e917.body = this.withSmartMixTopicForbiddingContext(()=>this.parseStatement("while")
        );
        this.state.labels.pop();
        return this.finishNode(e917, "WhileStatement");
    }
    parseWithStatement(e918) {
        this.state.strict && this.raise(a16.StrictWith, {
            at: this.state.startLoc
        });
        this.next();
        e918.object = this.parseHeaderExpression();
        e918.body = this.withSmartMixTopicForbiddingContext(()=>this.parseStatement("with")
        );
        return this.finishNode(e918, "WithStatement");
    }
    parseEmptyStatement(e919) {
        this.next();
        return this.finishNode(e919, "EmptyStatement");
    }
    parseLabeledStatement(e921, t558, s335, i207) {
        for (const e920 of this.state.labels)e920.name === t558 && this.raise(a16.LabelRedeclaration, {
            at: s335,
            labelName: t558
        });
        const r141 = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
        for(let t557 = this.state.labels.length - 1; t557 >= 0; t557--){
            const s336 = this.state.labels[t557];
            if (s336.statementStart !== e921.start) break;
            s336.statementStart = this.state.start;
            s336.kind = r141;
        }
        this.state.labels.push({
            name: t558,
            kind: r141,
            statementStart: this.state.start
        });
        e921.body = this.parseStatement(i207 ? -1 === i207.indexOf("label") ? i207 + "label" : i207 : "label");
        this.state.labels.pop();
        e921.label = s335;
        return this.finishNode(e921, "LabeledStatement");
    }
    parseExpressionStatement(e922, t559) {
        e922.expression = t559;
        this.semicolon();
        return this.finishNode(e922, "ExpressionStatement");
    }
    parseBlock(e923 = false, t560 = true, s337) {
        const i208 = this.startNode();
        e923 && this.state.strictErrors.clear();
        this.expect(5);
        t560 && this.scope.enter(0);
        this.parseBlockBody(i208, e923, false, 8, s337);
        t560 && this.scope.exit();
        return this.finishNode(i208, "BlockStatement");
    }
    isValidDirective(e924) {
        return "ExpressionStatement" === e924.type && "StringLiteral" === e924.expression.type && !e924.expression.extra.parenthesized;
    }
    parseBlockBody(e925, t561, s338, i209, r142) {
        const a74 = e925.body = [];
        const n60 = e925.directives = [];
        this.parseBlockOrModuleBlockBody(a74, t561 ? n60 : void 0, s338, i209, r142);
    }
    parseBlockOrModuleBlockBody(e927, t562, s339, i210, r143) {
        const a75 = this.state.strict;
        let n61 = false;
        let o43 = false;
        while(!this.match(i210)){
            const i211 = this.parseStatement(null, s339);
            if (t562 && !o43) {
                if (this.isValidDirective(i211)) {
                    const e926 = this.stmtToDirective(i211);
                    t562.push(e926);
                    if (!n61 && "use strict" === e926.value.value) {
                        n61 = true;
                        this.setStrict(true);
                    }
                    continue;
                }
                o43 = true;
                this.state.strictErrors.clear();
            }
            e927.push(i211);
        }
        r143 && r143.call(this, n61);
        a75 || this.setStrict(false);
        this.next();
    }
    parseFor(e928, t563) {
        e928.init = t563;
        this.semicolon(false);
        e928.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        e928.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        e928.body = this.withSmartMixTopicForbiddingContext(()=>this.parseStatement("for")
        );
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(e928, "ForStatement");
    }
    parseForIn(e929, t564, s340) {
        const i212 = this.match(58);
        this.next();
        i212 ? null !== s340 && this.unexpected(s340) : e929.await = null !== s340;
        "VariableDeclaration" !== t564.type || null == t564.declarations[0].init || i212 && !this.state.strict && "var" === t564.kind && "Identifier" === t564.declarations[0].id.type || this.raise(a16.ForInOfLoopInitializer, {
            at: t564,
            type: i212 ? "ForInStatement" : "ForOfStatement"
        });
        "AssignmentPattern" === t564.type && this.raise(a16.InvalidLhs, {
            at: t564,
            ancestor: {
                type: "ForStatement"
            }
        });
        e929.left = t564;
        e929.right = i212 ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        e929.body = this.withSmartMixTopicForbiddingContext(()=>this.parseStatement("for")
        );
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(e929, i212 ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(e930, t565, s341, i213 = false) {
        const r144 = e930.declarations = [];
        e930.kind = s341;
        for(;;){
            const e931 = this.startNode();
            this.parseVarId(e931, s341);
            e931.init = this.eat(29) ? t565 ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null;
            null !== e931.init || i213 || ("Identifier" === e931.id.type || t565 && (this.match(58) || this.isContextual(101)) ? "const" !== s341 || this.match(58) || this.isContextual(101) || this.raise(a16.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc,
                kind: "const"
            }) : this.raise(a16.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc,
                kind: "destructuring"
            }));
            r144.push(this.finishNode(e931, "VariableDeclarator"));
            if (!this.eat(12)) break;
        }
        return e930;
    }
    parseVarId(e932, t566) {
        e932.id = this.parseBindingAtom();
        this.checkLVal(e932.id, {
            in: {
                type: "VariableDeclarator"
            },
            binding: "var" === t566 ? re4 : ie4
        });
    }
    parseFunction(e933, t567 = 0, s342 = false) {
        const i214 = t567 & 1;
        const r145 = t567 & 2;
        const n62 = !!i214 && !(t567 & 4);
        this.initFunction(e933, s342);
        this.match(55) && r145 && this.raise(a16.GeneratorInSingleStatementContext, {
            at: this.state.startLoc
        });
        e933.generator = this.eat(55);
        i214 && (e933.id = this.parseFunctionId(n62));
        const o44 = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(2);
        this.prodParam.enter(functionFlags(s342, e933.generator));
        i214 || (e933.id = this.parseFunctionId());
        this.parseFunctionParams(e933, false);
        this.withSmartMixTopicForbiddingContext(()=>{
            this.parseFunctionBodyAndFinish(e933, i214 ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();
        i214 && !r145 && this.registerFunctionStatementId(e933);
        this.state.maybeInArrowParameters = o44;
        return e933;
    }
    parseFunctionId(e934) {
        return e934 || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(e935, t568) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope());
        e935.params = this.parseBindingList(11, 41, false, t568);
        this.expressionScope.exit();
    }
    registerFunctionStatementId(e936) {
        e936.id && this.scope.declareName(e936.id.name, this.state.strict || e936.generator || e936.async ? this.scope.treatFunctionsAsVar ? re4 : ie4 : ae4, e936.id.loc.start);
    }
    parseClass(e937, t569, s343) {
        this.next();
        this.takeDecorators(e937);
        const i215 = this.state.strict;
        this.state.strict = true;
        this.parseClassId(e937, t569, s343);
        this.parseClassSuper(e937);
        e937.body = this.parseClassBody(!!e937.superClass, i215);
        return this.finishNode(e937, t569 ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
        return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
        return this.match(10);
    }
    isNonstaticConstructor(e938) {
        return !e938.computed && !e938.static && ("constructor" === e938.key.name || "constructor" === e938.key.value);
    }
    parseClassBody(e939, t570) {
        this.classScope.enter();
        const s344 = {
            hadConstructor: false,
            hadSuperClass: e939
        };
        let i216 = [];
        const r146 = this.startNode();
        r146.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(()=>{
            while(!this.match(8)){
                if (this.eat(13)) {
                    if (i216.length > 0) throw this.raise(a16.DecoratorSemicolon, {
                        at: this.state.lastTokEndLoc
                    });
                    continue;
                }
                if (this.match(26)) {
                    i216.push(this.parseDecorator());
                    continue;
                }
                const e940 = this.startNode();
                if (i216.length) {
                    e940.decorators = i216;
                    this.resetStartLocationFromNode(e940, i216[0]);
                    i216 = [];
                }
                this.parseClassMember(r146, e940, s344);
                "constructor" === e940.kind && e940.decorators && e940.decorators.length > 0 && this.raise(a16.DecoratorConstructor, {
                    at: e940
                });
            }
        });
        this.state.strict = t570;
        this.next();
        if (i216.length) throw this.raise(a16.TrailingDecorator, {
            at: this.state.startLoc
        });
        this.classScope.exit();
        return this.finishNode(r146, "ClassBody");
    }
    parseClassMemberFromModifier(e941, t571) {
        const s345 = this.parseIdentifier(true);
        if (this.isClassMethod()) {
            const i217 = t571;
            i217.kind = "method";
            i217.computed = false;
            i217.key = s345;
            i217.static = false;
            this.pushClassMethod(e941, i217, false, false, false, false);
            return true;
        }
        if (this.isClassProperty()) {
            const i218 = t571;
            i218.computed = false;
            i218.key = s345;
            i218.static = false;
            e941.body.push(this.parseClassProperty(i218));
            return true;
        }
        this.resetPreviousNodeTrailingComments(s345);
        return false;
    }
    parseClassMember(e942, t572, s346) {
        const i219 = this.isContextual(104);
        if (i219) {
            if (this.parseClassMemberFromModifier(e942, t572)) return;
            if (this.eat(5)) {
                this.parseClassStaticBlock(e942, t572);
                return;
            }
        }
        this.parseClassMemberWithIsStatic(e942, t572, s346, i219);
    }
    parseClassMemberWithIsStatic(e943, t573, s347, i220) {
        const r147 = t573;
        const n63 = t573;
        const o46 = t573;
        const h30 = t573;
        const c161 = t573;
        const p14 = r147;
        const l71 = r147;
        t573.static = i220;
        this.parsePropertyNamePrefixOperator(t573);
        if (this.eat(55)) {
            p14.kind = "method";
            const t574 = this.match(134);
            this.parseClassElementName(p14);
            if (t574) {
                this.pushClassPrivateMethod(e943, n63, true, false);
                return;
            }
            this.isNonstaticConstructor(r147) && this.raise(a16.ConstructorIsGenerator, {
                at: r147.key
            });
            this.pushClassMethod(e943, r147, true, false, false, false);
            return;
        }
        const u610 = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
        const d51 = this.match(134);
        const m310 = this.parseClassElementName(t573);
        const f212 = this.state.startLoc;
        this.parsePostMemberNameModifiers(l71);
        if (this.isClassMethod()) {
            p14.kind = "method";
            if (d51) {
                this.pushClassPrivateMethod(e943, n63, false, false);
                return;
            }
            const i221 = this.isNonstaticConstructor(r147);
            let o45 = false;
            if (i221) {
                r147.kind = "constructor";
                s347.hadConstructor && !this.hasPlugin("typescript") && this.raise(a16.DuplicateConstructor, {
                    at: m310
                });
                i221 && this.hasPlugin("typescript") && t573.override && this.raise(a16.OverrideOnConstructor, {
                    at: m310
                });
                s347.hadConstructor = true;
                o45 = s347.hadSuperClass;
            }
            this.pushClassMethod(e943, r147, false, false, i221, o45);
        } else if (this.isClassProperty()) d51 ? this.pushClassPrivateProperty(e943, h30) : this.pushClassProperty(e943, o46);
        else if (u610 && "async" === m310.name && !this.isLineTerminator()) {
            this.resetPreviousNodeTrailingComments(m310);
            const t575 = this.eat(55);
            l71.optional && this.unexpected(f212);
            p14.kind = "method";
            const s348 = this.match(134);
            this.parseClassElementName(p14);
            this.parsePostMemberNameModifiers(l71);
            if (s348) this.pushClassPrivateMethod(e943, n63, t575, true);
            else {
                this.isNonstaticConstructor(r147) && this.raise(a16.ConstructorIsAsync, {
                    at: r147.key
                });
                this.pushClassMethod(e943, r147, t575, true, false, false);
            }
        } else if (!u610 || "get" !== m310.name && "set" !== m310.name || this.match(55) && this.isLineTerminator()) if (u610 && "accessor" === m310.name && !this.isLineTerminator()) {
            this.expectPlugin("decoratorAutoAccessors");
            this.resetPreviousNodeTrailingComments(m310);
            const t576 = this.match(134);
            this.parseClassElementName(o46);
            this.pushClassAccessorProperty(e943, c161, t576);
        } else this.isLineTerminator() ? d51 ? this.pushClassPrivateProperty(e943, h30) : this.pushClassProperty(e943, o46) : this.unexpected();
        else {
            this.resetPreviousNodeTrailingComments(m310);
            p14.kind = m310.name;
            const t577 = this.match(134);
            this.parseClassElementName(r147);
            if (t577) this.pushClassPrivateMethod(e943, n63, false, false);
            else {
                this.isNonstaticConstructor(r147) && this.raise(a16.ConstructorIsAccessor, {
                    at: r147.key
                });
                this.pushClassMethod(e943, r147, false, false, false, false);
            }
            this.checkGetterSetterParams(r147);
        }
    }
    parseClassElementName(e944) {
        const { type: t578 , value: s349  } = this.state;
        128 !== t578 && 129 !== t578 || !e944.static || "prototype" !== s349 || this.raise(a16.StaticPrototype, {
            at: this.state.startLoc
        });
        if (134 === t578) {
            "constructor" === s349 && this.raise(a16.ConstructorClassPrivateField, {
                at: this.state.startLoc
            });
            const t579 = this.parsePrivateName();
            e944.key = t579;
            return t579;
        }
        return this.parsePropertyName(e944);
    }
    parseClassStaticBlock(e945, t580) {
        var s350;
        this.scope.enter(64 | 128 | 16);
        const i222 = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(0);
        const r148 = t580.body = [];
        this.parseBlockOrModuleBlockBody(r148, void 0, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = i222;
        e945.body.push(this.finishNode(t580, "StaticBlock"));
        null != (s350 = t580.decorators) && s350.length && this.raise(a16.DecoratorStaticBlock, {
            at: t580
        });
    }
    pushClassProperty(e946, t581) {
        t581.computed || "constructor" !== t581.key.name && "constructor" !== t581.key.value || this.raise(a16.ConstructorClassField, {
            at: t581.key
        });
        e946.body.push(this.parseClassProperty(t581));
    }
    pushClassPrivateProperty(e947, t582) {
        const s351 = this.parseClassPrivateProperty(t582);
        e947.body.push(s351);
        this.classScope.declarePrivateName(this.getPrivateNameSV(s351.key), 0, s351.key.loc.start);
    }
    pushClassAccessorProperty(e949, t583, s352) {
        if (!s352 && !t583.computed) {
            const e948 = t583.key;
            "constructor" !== e948.name && "constructor" !== e948.value || this.raise(a16.ConstructorClassField, {
                at: e948
            });
        }
        const i223 = this.parseClassAccessorProperty(t583);
        e949.body.push(i223);
        s352 && this.classScope.declarePrivateName(this.getPrivateNameSV(i223.key), 0, i223.key.loc.start);
    }
    pushClassMethod(e950, t584, s353, i224, r149, a76) {
        e950.body.push(this.parseMethod(t584, s353, i224, r149, a76, "ClassMethod", true));
    }
    pushClassPrivateMethod(e951, t585, s354, i225) {
        const r150 = this.parseMethod(t585, s354, i225, false, false, "ClassPrivateMethod", true);
        e951.body.push(r150);
        const a77 = "get" === r150.kind ? r150.static ? ge2 : 2 : "set" === r150.kind ? r150.static ? Te2 : 1 : 0;
        this.declareClassPrivateMethodInScope(r150, a77);
    }
    declareClassPrivateMethodInScope(e952, t586) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(e952.key), t586, e952.key.loc.start);
    }
    parsePostMemberNameModifiers(e) {}
    parseClassPrivateProperty(e953) {
        this.parseInitializer(e953);
        this.semicolon();
        return this.finishNode(e953, "ClassPrivateProperty");
    }
    parseClassProperty(e954) {
        this.parseInitializer(e954);
        this.semicolon();
        return this.finishNode(e954, "ClassProperty");
    }
    parseClassAccessorProperty(e955) {
        this.parseInitializer(e955);
        this.semicolon();
        return this.finishNode(e955, "ClassAccessorProperty");
    }
    parseInitializer(e956) {
        this.scope.enter(64 | 16);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(0);
        e956.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
    }
    parseClassId(e957, t587, s355, i226 = se3) {
        if (tokenIsIdentifier(this.state.type)) {
            e957.id = this.parseIdentifier();
            t587 && this.declareNameFromIdentifier(e957.id, i226);
        } else {
            if (!s355 && t587) throw this.raise(a16.MissingClassName, {
                at: this.state.startLoc
            });
            e957.id = null;
        }
    }
    parseClassSuper(e958) {
        e958.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(e959) {
        const t588 = this.maybeParseExportDefaultSpecifier(e959);
        const s356 = !t588 || this.eat(12);
        const i227 = s356 && this.eatExportStar(e959);
        const r151 = i227 && this.maybeParseExportNamespaceSpecifier(e959);
        const a78 = s356 && (!r151 || this.eat(12));
        const n64 = t588 || i227;
        if (i227 && !r151) {
            t588 && this.unexpected();
            this.parseExportFrom(e959, true);
            return this.finishNode(e959, "ExportAllDeclaration");
        }
        const o47 = this.maybeParseExportNamedSpecifiers(e959);
        if (t588 && s356 && !i227 && !o47 || r151 && a78 && !o47) throw this.unexpected(null, 5);
        let h31;
        if (n64 || o47) {
            h31 = false;
            this.parseExportFrom(e959, n64);
        } else h31 = this.maybeParseExportDeclaration(e959);
        if (n64 || o47 || h31) {
            this.checkExport(e959, true, false, !!e959.source);
            return this.finishNode(e959, "ExportNamedDeclaration");
        }
        if (this.eat(65)) {
            e959.declaration = this.parseExportDefaultExpression();
            this.checkExport(e959, true, true);
            return this.finishNode(e959, "ExportDefaultDeclaration");
        }
        throw this.unexpected(null, 5);
    }
    eatExportStar(e) {
        return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(e960) {
        if (this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom");
            const t589 = this.startNode();
            t589.exported = this.parseIdentifier(true);
            e960.specifiers = [
                this.finishNode(t589, "ExportDefaultSpecifier")
            ];
            return true;
        }
        return false;
    }
    maybeParseExportNamespaceSpecifier(e961) {
        if (this.isContextual(93)) {
            e961.specifiers || (e961.specifiers = []);
            const t590 = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
            this.next();
            t590.exported = this.parseModuleExportName();
            e961.specifiers.push(this.finishNode(t590, "ExportNamespaceSpecifier"));
            return true;
        }
        return false;
    }
    maybeParseExportNamedSpecifiers(e962) {
        if (this.match(5)) {
            e962.specifiers || (e962.specifiers = []);
            const t591 = "type" === e962.exportKind;
            e962.specifiers.push(...this.parseExportSpecifiers(t591));
            e962.source = null;
            e962.declaration = null;
            this.hasPlugin("importAssertions") && (e962.assertions = []);
            return true;
        }
        return false;
    }
    maybeParseExportDeclaration(e963) {
        if (this.shouldParseExportDeclaration()) {
            e963.specifiers = [];
            e963.source = null;
            this.hasPlugin("importAssertions") && (e963.assertions = []);
            e963.declaration = this.parseExportDeclaration(e963);
            return true;
        }
        return false;
    }
    isAsyncFunction() {
        if (!this.isContextual(95)) return false;
        const e964 = this.nextTokenStart();
        return !Ee2.test(this.input.slice(this.state.pos, e964)) && this.isUnparsedContextual(e964, "function");
    }
    parseExportDefaultExpression() {
        const e965 = this.startNode();
        const t592 = this.isAsyncFunction();
        if (this.match(68) || t592) {
            this.next();
            t592 && this.next();
            return this.parseFunction(e965, 1 | 4, t592);
        }
        if (this.match(80)) return this.parseClass(e965, true, true);
        if (this.match(26)) {
            this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(a16.DecoratorBeforeExport, {
                at: this.state.startLoc
            });
            this.parseDecorators(false);
            return this.parseClass(e965, true, true);
        }
        if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(a16.UnsupportedDefaultExport, {
            at: this.state.startLoc
        });
        const s357 = this.parseMaybeAssignAllowIn();
        this.semicolon();
        return s357;
    }
    parseExportDeclaration(e) {
        return this.parseStatement(null);
    }
    isExportDefaultSpecifier() {
        const { type: e966  } = this.state;
        if (tokenIsIdentifier(e966)) {
            if (95 === e966 && !this.state.containsEsc || 99 === e966) return false;
            if ((126 === e966 || 125 === e966) && !this.state.containsEsc) {
                const { type: e967  } = this.lookahead();
                if (tokenIsIdentifier(e967) && 97 !== e967 || 5 === e967) {
                    this.expectOnePlugin([
                        "flow",
                        "typescript"
                    ]);
                    return false;
                }
            }
        } else if (!this.match(65)) return false;
        const t593 = this.nextTokenStart();
        const s358 = this.isUnparsedContextual(t593, "from");
        if (44 === this.input.charCodeAt(t593) || tokenIsIdentifier(this.state.type) && s358) return true;
        if (this.match(65) && s358) {
            const e968 = this.input.charCodeAt(this.nextTokenStartSince(t593 + 4));
            return 34 === e968 || 39 === e968;
        }
        return false;
    }
    parseExportFrom(e969, t595) {
        if (this.eatContextual(97)) {
            e969.source = this.parseImportSource();
            this.checkExport(e969);
            const t594 = this.maybeParseImportAssertions();
            t594 && (e969.assertions = t594);
        } else t595 && this.unexpected();
        this.semicolon();
    }
    shouldParseExportDeclaration() {
        const { type: e970  } = this.state;
        if (26 === e970) {
            this.expectOnePlugin([
                "decorators",
                "decorators-legacy"
            ]);
            if (this.hasPlugin("decorators")) {
                if (this.getPluginOption("decorators", "decoratorsBeforeExport")) throw this.raise(a16.DecoratorBeforeExport, {
                    at: this.state.startLoc
                });
                return true;
            }
        }
        return 74 === e970 || 75 === e970 || 68 === e970 || 80 === e970 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(e971, t596, s359, i228) {
        if (t596) {
            if (s359) {
                this.checkDuplicateExports(e971, "default");
                if (this.hasPlugin("exportDefaultFrom")) {
                    var r152;
                    const t597 = e971.declaration;
                    "Identifier" !== t597.type || "from" !== t597.name || t597.end - t597.start !== 4 || null != (r152 = t597.extra) && r152.parenthesized || this.raise(a16.ExportDefaultFromAsIdentifier, {
                        at: t597
                    });
                }
            } else if (e971.specifiers && e971.specifiers.length) for (const t598 of e971.specifiers){
                const { exported: e972  } = t598;
                const s360 = "Identifier" === e972.type ? e972.name : e972.value;
                this.checkDuplicateExports(t598, s360);
                if (!i228 && t598.local) {
                    const { local: e973  } = t598;
                    if ("Identifier" !== e973.type) this.raise(a16.ExportBindingIsString, {
                        at: t598,
                        localName: e973.value,
                        exportName: s360
                    });
                    else {
                        this.checkReservedWord(e973.name, e973.loc.start, true, false);
                        this.scope.checkLocalExport(e973);
                    }
                }
            }
            else if (e971.declaration) {
                if ("FunctionDeclaration" === e971.declaration.type || "ClassDeclaration" === e971.declaration.type) {
                    const t599 = e971.declaration.id;
                    if (!t599) throw new Error("Assertion failure");
                    this.checkDuplicateExports(e971, t599.name);
                } else if ("VariableDeclaration" === e971.declaration.type) for (const t600 of e971.declaration.declarations)this.checkDeclaration(t600.id);
            }
        }
        const n65 = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (n65.length) throw this.raise(a16.UnsupportedDecoratorExport, {
            at: e971
        });
    }
    checkDeclaration(e974) {
        if ("Identifier" === e974.type) this.checkDuplicateExports(e974, e974.name);
        else if ("ObjectPattern" === e974.type) for (const t602 of e974.properties)this.checkDeclaration(t602);
        else if ("ArrayPattern" === e974.type) for (const t601 of e974.elements)t601 && this.checkDeclaration(t601);
        else "ObjectProperty" === e974.type ? this.checkDeclaration(e974.value) : "RestElement" === e974.type ? this.checkDeclaration(e974.argument) : "AssignmentPattern" === e974.type && this.checkDeclaration(e974.left);
    }
    checkDuplicateExports(e975, t603) {
        this.exportedIdentifiers.has(t603) && ("default" === t603 ? this.raise(a16.DuplicateDefaultExport, {
            at: e975
        }) : this.raise(a16.DuplicateExport, {
            at: e975,
            exportName: t603
        }));
        this.exportedIdentifiers.add(t603);
    }
    parseExportSpecifiers(e976) {
        const t604 = [];
        let s361 = true;
        this.expect(5);
        while(!this.eat(8)){
            if (s361) s361 = false;
            else {
                this.expect(12);
                if (this.eat(8)) break;
            }
            const i229 = this.isContextual(126);
            const r153 = this.match(129);
            const a79 = this.startNode();
            a79.local = this.parseModuleExportName();
            t604.push(this.parseExportSpecifier(a79, r153, e976, i229));
        }
        return t604;
    }
    parseExportSpecifier(e977, t605, s, i) {
        this.eatContextual(93) ? e977.exported = this.parseModuleExportName() : t605 ? e977.exported = cloneStringLiteral(e977.local) : e977.exported || (e977.exported = cloneIdentifier(e977.local));
        return this.finishNode(e977, "ExportSpecifier");
    }
    parseModuleExportName() {
        if (this.match(129)) {
            const e978 = this.parseStringLiteral(this.state.value);
            const t606 = e978.value.match(lt3);
            t606 && this.raise(a16.ModuleExportNameHasLoneSurrogate, {
                at: e978,
                surrogateCharCode: t606[0].charCodeAt(0)
            });
            return e978;
        }
        return this.parseIdentifier(true);
    }
    parseImport(e979) {
        e979.specifiers = [];
        if (!this.match(129)) {
            const t607 = this.maybeParseDefaultImportSpecifier(e979);
            const s362 = !t607 || this.eat(12);
            const i230 = s362 && this.maybeParseStarImportSpecifier(e979);
            s362 && !i230 && this.parseNamedImportSpecifiers(e979);
            this.expectContextual(97);
        }
        e979.source = this.parseImportSource();
        const t608 = this.maybeParseImportAssertions();
        if (t608) e979.assertions = t608;
        else {
            const t609 = this.maybeParseModuleAttributes();
            t609 && (e979.attributes = t609);
        }
        this.semicolon();
        return this.finishNode(e979, "ImportDeclaration");
    }
    parseImportSource() {
        this.match(129) || this.unexpected();
        return this.parseExprAtom();
    }
    shouldParseDefaultImport(e) {
        return tokenIsIdentifier(this.state.type);
    }
    parseImportSpecifierLocal(e980, t610, s363) {
        t610.local = this.parseIdentifier();
        e980.specifiers.push(this.finishImportSpecifier(t610, s363));
    }
    finishImportSpecifier(e981, t611) {
        this.checkLVal(e981.local, {
            in: e981,
            binding: ie4
        });
        return this.finishNode(e981, t611);
    }
    parseAssertEntries() {
        const e982 = [];
        const t612 = new Set;
        do {
            if (this.match(8)) break;
            const s364 = this.startNode();
            const i231 = this.state.value;
            t612.has(i231) && this.raise(a16.ModuleAttributesWithDuplicateKeys, {
                at: this.state.startLoc,
                key: i231
            });
            t612.add(i231);
            this.match(129) ? s364.key = this.parseStringLiteral(i231) : s364.key = this.parseIdentifier(true);
            this.expect(14);
            if (!this.match(129)) throw this.raise(a16.ModuleAttributeInvalidValue, {
                at: this.state.startLoc
            });
            s364.value = this.parseStringLiteral(this.state.value);
            this.finishNode(s364, "ImportAttribute");
            e982.push(s364);
        }while (this.eat(12))
        return e982;
    }
    maybeParseModuleAttributes() {
        if (!this.match(76) || this.hasPrecedingLineBreak()) return this.hasPlugin("moduleAttributes") ? [] : null;
        this.expectPlugin("moduleAttributes");
        this.next();
        const e983 = [];
        const t613 = new Set;
        do {
            const s365 = this.startNode();
            s365.key = this.parseIdentifier(true);
            "type" !== s365.key.name && this.raise(a16.ModuleAttributeDifferentFromType, {
                at: s365.key
            });
            t613.has(s365.key.name) && this.raise(a16.ModuleAttributesWithDuplicateKeys, {
                at: s365.key,
                key: s365.key.name
            });
            t613.add(s365.key.name);
            this.expect(14);
            if (!this.match(129)) throw this.raise(a16.ModuleAttributeInvalidValue, {
                at: this.state.startLoc
            });
            s365.value = this.parseStringLiteral(this.state.value);
            this.finishNode(s365, "ImportAttribute");
            e983.push(s365);
        }while (this.eat(12))
        return e983;
    }
    maybeParseImportAssertions() {
        if (!this.isContextual(94) || this.hasPrecedingLineBreak()) return this.hasPlugin("importAssertions") ? [] : null;
        this.expectPlugin("importAssertions");
        this.next();
        this.eat(5);
        const e984 = this.parseAssertEntries();
        this.eat(8);
        return e984;
    }
    maybeParseDefaultImportSpecifier(e985) {
        if (this.shouldParseDefaultImport(e985)) {
            this.parseImportSpecifierLocal(e985, this.startNode(), "ImportDefaultSpecifier");
            return true;
        }
        return false;
    }
    maybeParseStarImportSpecifier(e986) {
        if (this.match(55)) {
            const t614 = this.startNode();
            this.next();
            this.expectContextual(93);
            this.parseImportSpecifierLocal(e986, t614, "ImportNamespaceSpecifier");
            return true;
        }
        return false;
    }
    parseNamedImportSpecifiers(e987) {
        let t615 = true;
        this.expect(5);
        while(!this.eat(8)){
            if (t615) t615 = false;
            else {
                if (this.eat(14)) throw this.raise(a16.DestructureNamedImport, {
                    at: this.state.startLoc
                });
                this.expect(12);
                if (this.eat(8)) break;
            }
            const s366 = this.startNode();
            const i232 = this.match(129);
            const r154 = this.isContextual(126);
            s366.imported = this.parseModuleExportName();
            const n66 = this.parseImportSpecifier(s366, i232, "type" === e987.importKind || "typeof" === e987.importKind, r154);
            e987.specifiers.push(n66);
        }
    }
    parseImportSpecifier(e988, t616, s, i) {
        if (this.eatContextual(93)) e988.local = this.parseIdentifier();
        else {
            const { imported: s367  } = e988;
            if (t616) throw this.raise(a16.ImportBindingIsString, {
                at: e988,
                importName: s367.value
            });
            this.checkReservedWord(s367.name, e988.loc.start, true, true);
            e988.local || (e988.local = cloneIdentifier(s367));
        }
        return this.finishImportSpecifier(e988, "ImportSpecifier");
    }
    isThisParam(e989) {
        return "Identifier" === e989.type && "this" === e989.name;
    }
}
class Parser extends StatementParser {
    constructor(e990, t617){
        e990 = getOptions(e990);
        super(e990, t617);
        this.options = e990;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = e990.sourceFilename;
    }
    getScopeHandler() {
        return ScopeHandler;
    }
    parse() {
        this.enterInitialScopes();
        const e991 = this.startNode();
        const t618 = this.startNode();
        this.nextToken();
        e991.errors = null;
        this.parseTopLevel(e991, t618);
        e991.errors = this.state.errors;
        return e991;
    }
}
function pluginsMap(e992) {
    const t619 = new Map;
    for (const s368 of e992){
        const [e993, i233] = Array.isArray(s368) ? s368 : [
            s368,
            {}
        ];
        t619.has(e993) || t619.set(e993, i233 || {});
    }
    return t619;
}
function parse2(e994, t620) {
    var s369;
    if ("unambiguous" !== (null == (s369 = t620) ? void 0 : s369.sourceType)) return getParser(t620, e994).parse();
    t620 = Object.assign({}, t620);
    try {
        t620.sourceType = "module";
        const s370 = getParser(t620, e994);
        const i234 = s370.parse();
        if (s370.sawUnambiguousESM) return i234;
        if (s370.ambiguousScriptDifferentAst) try {
            t620.sourceType = "script";
            return getParser(t620, e994).parse();
        } catch (e) {}
        else i234.program.sourceType = "script";
        return i234;
    } catch (s371) {
        try {
            t620.sourceType = "script";
            return getParser(t620, e994).parse();
        } catch (e) {}
        throw s371;
    }
}
function parseExpression(e995, t621) {
    const s372 = getParser(t621, e995);
    s372.options.strictMode && (s372.state.strict = true);
    return s372.getExpression();
}
function generateExportedTokenTypes(e996) {
    const t622 = {};
    for (const s373 of Object.keys(e996))t622[s373] = getExportedToken(e996[s373]);
    return t622;
}
const dt2 = generateExportedTokenTypes(A6);
function getParser(e997, t623) {
    let s374 = Parser;
    if (null != e997 && e997.plugins) {
        validatePlugins(e997.plugins);
        s374 = getParserClass(e997.plugins);
    }
    return new s374(e997, t623);
}
const mt2 = {};
function getParserClass(e998) {
    const t624 = it2.filter((t625)=>hasPlugin(e998, t625)
    );
    const s375 = t624.join("/");
    let i235 = mt2[s375];
    if (!i235) {
        i235 = Parser;
        for (const e999 of t624)i235 = st2[e999](i235);
        mt2[s375] = i235;
    }
    return i235;
}
e16.parse = parse2;
e16.parseExpression = parseExpression;
e16.tokTypes = dt2;
const ft2 = e16.__esModule;
const yt2 = e16.parse, xt2 = e16.parseExpression, Pt2 = e16.tokTypes;
const mod17 = {
    __esModule: ft2,
    default: e16,
    parse: yt2,
    parseExpression: xt2,
    tokTypes: Pt2
};
var t23 = "default" in mod3 ? mod3.default : mod3;
var i16 = {};
Object.defineProperty(i16, "__esModule", {
    value: true
});
i16.default = hoistVariables;
var n25 = t23;
const { assignmentExpression: o21 , expressionStatement: a17 , identifier: r27  } = n25;
const s17 = {
    Scope (e1, t1131) {
        "let" === t1131.kind && e1.skip();
    },
    FunctionParent (e2) {
        e2.skip();
    },
    VariableDeclaration (e4100, t2123) {
        if (t2123.kind && e4100.node.kind !== t2123.kind) return;
        const i236 = [];
        const n1128 = e4100.get("declarations");
        let s1100;
        for (const e3116 of n1128){
            s1100 = e3116.node.id;
            e3116.node.init && i236.push(a17(o21("=", e3116.node.id, e3116.node.init)));
            for (const i1100 of Object.keys(e3116.getBindingIdentifiers()))t2123.emit(r27(i1100), i1100, null !== e3116.node.init);
        }
        e4100.parentPath.isFor({
            left: e4100.node
        }) ? e4100.replaceWith(s1100) : e4100.replaceWithMultiple(i236);
    }
};
function hoistVariables(e5100, t3100, i316 = "var") {
    e5100.traverse(s17, {
        kind: i316,
        emit: t3100
    });
}
const d9 = i16.__esModule;
const mod18 = {
    __esModule: d9,
    default: i16
};
var e17 = "default" in mod3 ? mod3.default : mod3;
var o22 = {};
Object.defineProperty(o22, "__esModule", {
    value: true
});
o22.default = void 0;
o22.skipAllButComputedKey = skipAllButComputedKey;
var s18 = e17;
const { VISITOR_KEYS: l14 , staticBlock: u16  } = s18;
function skipAllButComputedKey(t1132) {
    if (!t1132.node.computed) {
        t1132.skip();
        return;
    }
    const e1 = l14[t1132.type];
    for (const o130 of e1)"key" !== o130 && t1132.skipKey(o130);
}
const p11 = (u16 ? "StaticBlock|" : "") + "ClassPrivateProperty|TypeAnnotation|FunctionDeclaration|FunctionExpression";
var i17 = {
    [p11]: (t2124)=>t2124.skip()
    ,
    "Method|ClassProperty" (t3101) {
        skipAllButComputedKey(t3101);
    }
};
o22.default = i17;
const a18 = o22.__esModule;
const n26 = o22.skipAllButComputedKey;
const mod19 = {
    __esModule: a18,
    default: o22,
    skipAllButComputedKey: n26
};
var a19 = "default" in mod3 ? mod3.default : mod3;
var n27 = {};
Object.defineProperty(n27, "__esModule", {
    value: true
});
n27.statements = n27.statement = n27.smart = n27.program = n27.expression = void 0;
var l15 = a19;
const { assertExpressionStatement: s19  } = l15;
function makeStatementFormatter(e1) {
    return {
        code: (e2)=>`/* @babel/template */;\n${e2}`
        ,
        validate: ()=>{},
        unwrap: (t1133)=>e1(t1133.program.body.slice(1))
    };
}
const o23 = makeStatementFormatter((e3117)=>e3117.length > 1 ? e3117 : e3117[0]
);
n27.smart = o23;
const i18 = makeStatementFormatter((e4101)=>e4101
);
n27.statements = i18;
const c18 = makeStatementFormatter((e5101)=>{
    if (0 === e5101.length) throw new Error("Found nothing to return.");
    if (e5101.length > 1) throw new Error("Found multiple statements but wanted one");
    return e5101[0];
});
n27.statement = c18;
const d10 = {
    code: (e6100)=>`(\n${e6100}\n)`
    ,
    validate: (e725)=>{
        if (e725.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
        if (0 === d10.unwrap(e725).start) throw new Error("Parse result included parens.");
    },
    unwrap: ({ program: e8100  })=>{
        const [t2125] = e8100.body;
        s19(t2125);
        return t2125.expression;
    }
};
n27.expression = d10;
const p12 = {
    code: (e9100)=>e9100
    ,
    validate: ()=>{},
    unwrap: (e1013)=>e1013.program
};
n27.program = p12;
var u17 = {};
Object.defineProperty(u17, "__esModule", {
    value: true
});
u17.merge = merge;
u17.normalizeReplacements = normalizeReplacements;
u17.validate = validate$1;
const m10 = [
    "placeholderWhitelist",
    "placeholderPattern",
    "preserveComments",
    "syntacticPlaceholders"
];
function _objectWithoutPropertiesLoose1(e1113, t3102) {
    if (null == e1113) return {};
    var r155 = {};
    var a126 = Object.keys(e1113);
    var n1129, l119;
    for(l119 = 0; l119 < a126.length; l119++){
        n1129 = a126[l119];
        t3102.indexOf(n1129) >= 0 || (r155[n1129] = e1113[n1129]);
    }
    return r155;
}
function merge(e1213, t4100) {
    const { placeholderWhitelist: r229 = e1213.placeholderWhitelist , placeholderPattern: a217 = e1213.placeholderPattern , preserveComments: n2116 = e1213.preserveComments , syntacticPlaceholders: l217 = e1213.syntacticPlaceholders  } = t4100;
    return {
        parser: Object.assign({}, e1213.parser, t4100.parser),
        placeholderWhitelist: r229,
        placeholderPattern: a217,
        preserveComments: n2116,
        syntacticPlaceholders: l217
    };
}
function validate$1(e1312) {
    if (null != e1312 && "object" !== typeof e1312) throw new Error("Unknown template options.");
    const t5100 = e1312 || {}, { placeholderWhitelist: r327 , placeholderPattern: a317 , preserveComments: n325 , syntacticPlaceholders: l313  } = t5100, s1101 = _objectWithoutPropertiesLoose1(t5100, m10);
    if (null != r327 && !(r327 instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    if (null != a317 && !(a317 instanceof RegExp) && false !== a317) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    if (null != n325 && "boolean" !== typeof n325) throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    if (null != l313 && "boolean" !== typeof l313) throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    if (true === l313 && (null != r327 || null != a317)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    return {
        parser: s1101,
        placeholderWhitelist: r327 || void 0,
        placeholderPattern: null == a317 ? void 0 : a317,
        preserveComments: null == n325 ? void 0 : n325,
        syntacticPlaceholders: null == l313 ? void 0 : l313
    };
}
function normalizeReplacements(e1411) {
    if (Array.isArray(e1411)) return e1411.reduce((e1511, t626, r423)=>{
        e1511["$" + r423] = t626;
        return e1511;
    }, {});
    if ("object" === typeof e1411 || null == e1411) return e1411 || void 0;
    throw new Error("Template replacements must be an array, object, null, or undefined");
}
var f13 = "default" in mod3 ? mod3.default : mod3;
var h10 = "default" in mod17 ? mod17.default : mod17;
var y7 = "default" in mod16 ? mod16.default : mod16;
var v10 = {};
Object.defineProperty(v10, "__esModule", {
    value: true
});
v10.default = parseAndBuildMetadata;
var w7 = f13;
var g10 = h10;
var b9 = y7;
const { isCallExpression: P7 , isExpressionStatement: E6 , isFunction: x6 , isIdentifier: j4 , isJSXIdentifier: A7 , isNewExpression: O7 , isPlaceholder: S7 , isStatement: _7 , isStringLiteral: W5 , removePropertiesDeep: R6 , traverse: k5  } = w7;
const C7 = /^[_$A-Z0-9]+$/;
function parseAndBuildMetadata(e1611, t722, r520) {
    const { placeholderWhitelist: a415 , placeholderPattern: n424 , preserveComments: l412 , syntacticPlaceholders: s2100  } = r520;
    const o132 = parseWithCodeFrame(t722, r520.parser, s2100);
    R6(o132, {
        preserveComments: l412
    });
    e1611.validate(o132);
    const i1101 = {
        placeholders: [],
        placeholderNames: new Set
    };
    const c122 = {
        placeholders: [],
        placeholderNames: new Set
    };
    const d115 = {
        value: void 0
    };
    k5(o132, placeholderVisitorHandler, {
        syntactic: i1101,
        legacy: c122,
        isLegacyRef: d115,
        placeholderWhitelist: a415,
        placeholderPattern: n424,
        syntacticPlaceholders: s2100
    });
    return Object.assign({
        ast: o132
    }, d115.value ? c122 : i1101);
}
function placeholderVisitorHandler(e1710, t818, r619) {
    var a510;
    let n521;
    if (S7(e1710)) {
        if (false === r619.syntacticPlaceholders) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
        n521 = e1710.name.name;
        r619.isLegacyRef.value = false;
    } else {
        if (false === r619.isLegacyRef.value || r619.syntacticPlaceholders) return;
        if (j4(e1710) || A7(e1710)) {
            n521 = e1710.name;
            r619.isLegacyRef.value = true;
        } else {
            if (!W5(e1710)) return;
            n521 = e1710.value;
            r619.isLegacyRef.value = true;
        }
    }
    if (!r619.isLegacyRef.value && (null != r619.placeholderPattern || null != r619.placeholderWhitelist)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    if (r619.isLegacyRef.value && (false === r619.placeholderPattern || !(r619.placeholderPattern || C7).test(n521)) && !(null != (a510 = r619.placeholderWhitelist) && a510.has(n521))) return;
    t818 = t818.slice();
    const { node: l56 , key: s376  } = t818[t818.length - 1];
    let o226;
    if (W5(e1710) || S7(e1710, {
        expectedNode: "StringLiteral"
    })) o226 = "string";
    else if (O7(l56) && "arguments" === s376 || P7(l56) && "arguments" === s376 || x6(l56) && "params" === s376) o226 = "param";
    else if (E6(l56) && !S7(e1710)) {
        o226 = "statement";
        t818 = t818.slice(0, -1);
    } else o226 = _7(e1710) && S7(e1710) ? "statement" : "other";
    const { placeholders: i237 , placeholderNames: c216  } = r619.isLegacyRef.value ? r619.legacy : r619.syntactic;
    i237.push({
        name: n521,
        type: o226,
        resolve: (e18)=>resolveAncestors(e18, t818)
        ,
        isDuplicate: c216.has(n521)
    });
    c216.add(n521);
}
function resolveAncestors(e20, t916) {
    let r715 = e20;
    for(let e19 = 0; e19 < t916.length - 1; e19++){
        const { key: a610 , index: n621  } = t916[e19];
        r715 = void 0 === n621 ? r715[a610] : r715[a610][n621];
    }
    const { key: a710 , index: n720  } = t916[t916.length - 1];
    return {
        parent: r715,
        key: a710,
        index: n720
    };
}
function parseWithCodeFrame(e21, t1015, r814) {
    const a83 = (t1015.plugins || []).slice();
    false !== r814 && a83.push("placeholders");
    t1015 = Object.assign({
        allowReturnOutsideFunction: true,
        allowSuperOutsideMethod: true,
        sourceType: "module"
    }, t1015, {
        plugins: a83
    });
    try {
        return (0, g10.parse)(e21, t1015);
    } catch (t1134) {
        const r911 = t1134.loc;
        if (r911) {
            t1134.message += "\n" + (0, b9.codeFrameColumns)(e21, {
                start: r911
            });
            t1134.code = "BABEL_TEMPLATE_PARSE_ERROR";
        }
        throw t1134;
    }
}
var L6 = "default" in mod3 ? mod3.default : mod3;
var $5 = {};
Object.defineProperty($5, "__esModule", {
    value: true
});
$5.default = populatePlaceholders;
var T5 = L6;
const { blockStatement: M5 , cloneNode: F7 , emptyStatement: N6 , expressionStatement: U4 , identifier: B6 , isStatement: D5 , isStringLiteral: z5 , stringLiteral: I7 , validate: H4  } = T5;
function populatePlaceholders(e22, t1214) {
    const r1010 = F7(e22.ast);
    if (t1214) {
        e22.placeholders.forEach((e23)=>{
            if (!Object.prototype.hasOwnProperty.call(t1214, e23.name)) {
                const t1314 = e23.name;
                throw new Error(`Error: No substitution given for "${t1314}". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${t1314}'])}\n            - { placeholderPattern: /^${t1314}$/ }`);
            }
        });
        Object.keys(t1214).forEach((t1413)=>{
            if (!e22.placeholderNames.has(t1413)) throw new Error(`Unknown substitution "${t1413}" given`);
        });
    }
    e22.placeholders.slice().reverse().forEach((e24)=>{
        try {
            applyReplacement(e24, r1010, t1214 && t1214[e24.name] || null);
        } catch (t1512) {
            t1512.message = `@babel/template placeholder "${e24.name}": ${t1512.message}`;
            throw t1512;
        }
    });
    return r1010;
}
function applyReplacement(e25, t1612, r1113) {
    e25.isDuplicate && (Array.isArray(r1113) ? r1113 = r1113.map((e26)=>F7(e26)
    ) : "object" === typeof r1113 && (r1113 = F7(r1113)));
    const { parent: a93 , key: n818 , index: l62  } = e25.resolve(t1612);
    if ("string" === e25.type) {
        "string" === typeof r1113 && (r1113 = I7(r1113));
        if (!r1113 || !z5(r1113)) throw new Error("Expected string substitution");
    } else if ("statement" === e25.type) {
        if (void 0 === l62) r1113 ? Array.isArray(r1113) ? r1113 = M5(r1113) : "string" === typeof r1113 ? r1113 = U4(B6(r1113)) : D5(r1113) || (r1113 = U4(r1113)) : r1113 = N6();
        else if (r1113 && !Array.isArray(r1113)) {
            "string" === typeof r1113 && (r1113 = B6(r1113));
            D5(r1113) || (r1113 = U4(r1113));
        }
    } else if ("param" === e25.type) {
        "string" === typeof r1113 && (r1113 = B6(r1113));
        if (void 0 === l62) throw new Error("Assertion failure.");
    } else {
        "string" === typeof r1113 && (r1113 = B6(r1113));
        if (Array.isArray(r1113)) throw new Error("Cannot replace single expression with an array.");
    }
    if (void 0 === l62) {
        H4(a93, n818, r1113);
        a93[n818] = r1113;
    } else {
        const t1712 = a93[n818].slice();
        "statement" === e25.type || "param" === e25.type ? null == r1113 ? t1712.splice(l62, 1) : Array.isArray(r1113) ? t1712.splice(l62, 1, ...r1113) : t1712[l62] = r1113 : t1712[l62] = r1113;
        H4(a93, n818, t1712);
        a93[n818] = t1712;
    }
}
var V6 = {};
Object.defineProperty(V6, "__esModule", {
    value: true
});
V6.default = stringTemplate;
var J4 = u17;
var X4 = v10;
var Z4 = $5;
function stringTemplate(e27, t1811, r1212) {
    t1811 = e27.code(t1811);
    let a103;
    return (n917)=>{
        const l72 = (0, J4.normalizeReplacements)(n917);
        a103 || (a103 = (0, X4.default)(e27, t1811, r1212));
        return e27.unwrap((0, Z4.default)(a103, l72));
    };
}
var q4 = {};
Object.defineProperty(q4, "__esModule", {
    value: true
});
q4.default = literalTemplate;
var G4 = u17;
var K4 = v10;
var Q4 = $5;
function literalTemplate(e28, t1911, r1310) {
    const { metadata: a1112 , names: n1017  } = buildLiteralData(e28, t1911, r1310);
    return (t2011)=>{
        const r1410 = {};
        t2011.forEach((e29, t2126)=>{
            r1410[n1017[t2126]] = e29;
        });
        return (t2211)=>{
            const n1130 = (0, G4.normalizeReplacements)(t2211);
            n1130 && Object.keys(n1130).forEach((e30)=>{
                if (Object.prototype.hasOwnProperty.call(r1410, e30)) throw new Error("Unexpected replacement overlap.");
            });
            return e28.unwrap((0, Q4.default)(a1112, n1130 ? Object.assign(n1130, r1410) : r1410));
        };
    };
}
function buildLiteralData(e31, t2310, r156) {
    let a127;
    let n1215;
    let l81;
    let s417 = "";
    do {
        s417 += "$";
        const o323 = buildTemplateCode(t2310, s417);
        a127 = o323.names;
        n1215 = new Set(a127);
        l81 = (0, K4.default)(e31, e31.code(o323.code), {
            parser: r156.parser,
            placeholderWhitelist: new Set(o323.names.concat(r156.placeholderWhitelist ? Array.from(r156.placeholderWhitelist) : [])),
            placeholderPattern: r156.placeholderPattern,
            preserveComments: r156.preserveComments,
            syntacticPlaceholders: r156.syntacticPlaceholders
        });
    }while (l81.placeholders.some((e32)=>e32.isDuplicate && n1215.has(e32.name)
    ))
    return {
        metadata: l81,
        names: a127
    };
}
function buildTemplateCode(e33, t24) {
    const r163 = [];
    let a132 = e33[0];
    for(let n1313 = 1; n1313 < e33.length; n1313++){
        const l91 = `${t24}${n1313 - 1}`;
        r163.push(l91);
        a132 += l91 + e33[n1313];
    }
    return {
        names: r163,
        code: a132
    };
}
var Y4 = {};
Object.defineProperty(Y4, "__esModule", {
    value: true
});
Y4.default = createTemplateBuilder;
var ee4 = u17;
var te4 = V6;
var re5 = q4;
const ae5 = (0, ee4.validate)({
    placeholderPattern: false
});
function createTemplateBuilder(e34, t25) {
    const r173 = new WeakMap;
    const a142 = new WeakMap;
    const n1413 = t25 || (0, ee4.validate)(null);
    return Object.assign((t26, ...a152)=>{
        if ("string" === typeof t26) {
            if (a152.length > 1) throw new Error("Unexpected extra params.");
            return extendedTrace((0, te4.default)(e34, t26, (0, ee4.merge)(n1413, (0, ee4.validate)(a152[0]))));
        }
        if (Array.isArray(t26)) {
            let l101 = r173.get(t26);
            if (!l101) {
                l101 = (0, re5.default)(e34, t26, n1413);
                r173.set(t26, l101);
            }
            return extendedTrace(l101(a152));
        }
        if ("object" === typeof t26 && t26) {
            if (a152.length > 0) throw new Error("Unexpected extra params.");
            return createTemplateBuilder(e34, (0, ee4.merge)(n1413, (0, ee4.validate)(t26)));
        }
        throw new Error("Unexpected template param " + typeof t26);
    }, {
        ast: (t27, ...r183)=>{
            if ("string" === typeof t27) {
                if (r183.length > 1) throw new Error("Unexpected extra params.");
                return (0, te4.default)(e34, t27, (0, ee4.merge)((0, ee4.merge)(n1413, (0, ee4.validate)(r183[0])), ae5))();
            }
            if (Array.isArray(t27)) {
                let l1110 = a142.get(t27);
                if (!l1110) {
                    l1110 = (0, re5.default)(e34, t27, (0, ee4.merge)(n1413, ae5));
                    a142.set(t27, l1110);
                }
                return l1110(r183)();
            }
            throw new Error("Unexpected template param " + typeof t27);
        }
    });
}
function extendedTrace(e36) {
    let t28 = "";
    try {
        throw new Error;
    } catch (e35) {
        e35.stack && (t28 = e35.stack.split("\n").slice(3).join("\n"));
    }
    return (r193)=>{
        try {
            return e36(r193);
        } catch (e37) {
            e37.stack += `\n    =============\n${t28}`;
            throw e37;
        }
    };
}
var ne5 = {};
Object.defineProperty(ne5, "__esModule", {
    value: true
});
ne5.statements = ne5.statement = ne5.smart = ne5.program = ne5.expression = ne5.default = void 0;
var le3 = n27;
var se4 = Y4;
const oe5 = (0, se4.default)(le3.smart);
ne5.smart = oe5;
const ie5 = (0, se4.default)(le3.statement);
ne5.statement = ie5;
const ce3 = (0, se4.default)(le3.statements);
ne5.statements = ce3;
const de3 = (0, se4.default)(le3.expression);
ne5.expression = de3;
const pe3 = (0, se4.default)(le3.program);
ne5.program = pe3;
var ue3 = Object.assign(oe5.bind(void 0), {
    smart: oe5,
    statement: ie5,
    statements: ce3,
    expression: de3,
    program: pe3,
    ast: oe5.ast
});
ne5.default = ue3;
const me2 = ne5.__esModule;
const fe2 = ne5.statements, he3 = ne5.statement, ye3 = ne5.smart, ve4 = ne5.program, we2 = ne5.expression;
const mod20 = {
    __esModule: me2,
    default: ne5,
    expression: we2,
    program: ve4,
    smart: ye3,
    statement: he3,
    statements: fe2
};
var t24 = "default" in mod20 ? mod20.default : mod20;
var r28 = "default" in mod3 ? mod3.default : mod3;
var i19 = {};
Object.defineProperty(i19, "__esModule", {
    value: true
});
i19.default = _default1;
var a20 = t24;
var s20 = r28;
const { NOT_LOCAL_BINDING: o24 , cloneNode: f14 , identifier: u18 , isAssignmentExpression: l16 , isAssignmentPattern: d11 , isFunction: c19 , isIdentifier: N7 , isLiteral: m11 , isNullLiteral: I8 , isObjectMethod: g11 , isObjectProperty: p13 , isRegExpLiteral: F8 , isRestElement: _8 , isTemplateLiteral: O8 , isVariableDeclarator: T6 , toBindingIdentifierName: U5  } = s20;
function getFunctionArity(e1) {
    const n1131 = e1.params.findIndex((e2)=>d11(e2) || _8(e2)
    );
    return -1 === n1131 ? e1.params.length : n1131;
}
const C8 = (0, a20.default)("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
const v11 = (0, a20.default)("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");
const D6 = {
    "ReferencedIdentifier|BindingIdentifier" (e3118, n2117) {
        if (e3118.node.name !== n2117.name) return;
        const t1135 = e3118.scope.getBindingIdentifier(n2117.name);
        if (t1135 === n2117.outerDeclar) {
            n2117.selfReference = true;
            e3118.stop();
        }
    }
};
function getNameFromLiteralId(e4102) {
    return I8(e4102) ? "null" : F8(e4102) ? `_${e4102.pattern}_${e4102.flags}` : O8(e4102) ? e4102.quasis.map((e5102)=>e5102.value.raw
    ).join("") : void 0 !== e4102.value ? e4102.value + "" : "";
}
function wrap(e6101, n326, t2127, r157) {
    if (e6101.selfReference) {
        if (!r157.hasBinding(t2127.name) || r157.hasGlobal(t2127.name)) {
            if (!c19(n326)) return;
            let e8101 = C8;
            n326.generator && (e8101 = v11);
            const i1102 = e8101({
                FUNCTION: n326,
                FUNCTION_ID: t2127,
                FUNCTION_KEY: r157.generateUidIdentifier(t2127.name)
            }).expression;
            const a128 = i1102.callee.body.body[0].params;
            for(let e726 = 0, t3103 = getFunctionArity(n326); e726 < t3103; e726++)a128.push(r157.generateUidIdentifier("x"));
            return i1102;
        }
        r157.rename(t2127.name);
    }
    n326.id = t2127;
    r157.getProgramParent().references[t2127.name] = true;
}
function visit(e9101, n425, t4101) {
    const r230 = {
        selfAssignment: false,
        selfReference: false,
        outerDeclar: t4101.getBindingIdentifier(n425),
        references: [],
        name: n425
    };
    const i238 = t4101.getOwnBinding(n425);
    i238 ? "param" === i238.kind && (r230.selfReference = true) : (r230.outerDeclar || t4101.hasGlobal(n425)) && t4101.traverse(e9101, D6, r230);
    return r230;
}
function _default1({ node: e1014 , parent: n522 , scope: t5101 , id: r328  }, i317 = false, a218 = false) {
    if (e1014.id) return;
    if (!p13(n522) && !g11(n522, {
        kind: "method"
    }) || n522.computed && !m11(n522.key)) {
        if (T6(n522)) {
            r328 = n522.id;
            if (N7(r328) && !i317) {
                const n622 = t5101.parent.getBinding(r328.name);
                if (n622 && n622.constant && t5101.getBinding(r328.name) === n622) {
                    e1014.id = f14(r328);
                    e1014.id[o24] = true;
                    return;
                }
            }
        } else if (l16(n522, {
            operator: "="
        })) r328 = n522.left;
        else if (!r328) return;
    } else r328 = n522.key;
    let s1102;
    r328 && m11(r328) ? s1102 = getNameFromLiteralId(r328) : r328 && N7(r328) && (s1102 = r328.name);
    if (void 0 === s1102) return;
    if (!a218 && c19(e1014) && /[\uD800-\uDFFF]/.test(s1102)) return;
    s1102 = U5(s1102);
    r328 = u18(s1102);
    r328[o24] = true;
    const d116 = visit(e1014, s1102, t5101);
    return wrap(d116, e1014, r328, t5101) || e1014;
}
const b10 = i19.__esModule;
const mod21 = {
    __esModule: b10,
    default: i19
};
var l17 = "default" in mod3 ? mod3.default : mod3;
var h11 = {}, d12 = false;
function dew$p1() {
    if (d12) return h11;
    d12 = true;
    Object.defineProperty(h11, "__esModule", {
        value: true
    });
    h11.Var = h11.User = h11.Statement = h11.SpreadProperty = h11.Scope = h11.RestProperty = h11.ReferencedMemberExpression = h11.ReferencedIdentifier = h11.Referenced = h11.Pure = h11.NumericLiteralTypeAnnotation = h11.Generated = h11.ForAwaitStatement = h11.Flow = h11.Expression = h11.ExistentialTypeParam = h11.BlockScoped = h11.BindingIdentifier = void 0;
    var e1 = l17;
    const { isBinding: t1136 , isBlockScoped: n1132 , isExportDeclaration: i1103 , isExpression: r158 , isFlow: s1103 , isForStatement: o133 , isForXStatement: a129 , isIdentifier: c123 , isImportDeclaration: u118 , isImportSpecifier: p117 , isJSXIdentifier: f114 , isJSXMemberExpression: g111 , isMemberExpression: y112 , isReferenced: m112 , isScope: v114 , isStatement: b111 , isVar: x111 , isVariableDeclaration: P111 , react: E112  } = e1;
    const { isCompatTag: S111  } = E112;
    const w111 = {
        types: [
            "Identifier",
            "JSXIdentifier"
        ],
        checkPath (e2, t2128) {
            const { node: n2118 , parent: i239  } = e2;
            if (!c123(n2118, t2128) && !g111(i239, t2128)) {
                if (!f114(n2118, t2128)) return false;
                if (S111(n2118.name)) return false;
            }
            return m112(n2118, i239, e2.parentPath.parent);
        }
    };
    h11.ReferencedIdentifier = w111;
    const k111 = {
        types: [
            "MemberExpression"
        ],
        checkPath ({ node: e3119 , parent: t3104  }) {
            return y112(e3119) && m112(e3119, t3104);
        }
    };
    h11.ReferencedMemberExpression = k111;
    const C111 = {
        types: [
            "Identifier"
        ],
        checkPath (e4103) {
            const { node: n327 , parent: i318  } = e4103;
            const r232 = e4103.parentPath.parent;
            return c123(n327) && t1136(n327, i318, r232);
        }
    };
    h11.BindingIdentifier = C111;
    const A111 = {
        types: [
            "Statement"
        ],
        checkPath ({ node: e5103 , parent: t4102  }) {
            if (b111(e5103)) {
                if (P111(e5103)) {
                    if (a129(t4102, {
                        left: e5103
                    })) return false;
                    if (o133(t4102, {
                        init: e5103
                    })) return false;
                }
                return true;
            }
            return false;
        }
    };
    h11.Statement = A111;
    const B111 = {
        types: [
            "Expression"
        ],
        checkPath (e6102) {
            return e6102.isIdentifier() ? e6102.isReferencedIdentifier() : r158(e6102.node);
        }
    };
    h11.Expression = B111;
    const _112 = {
        types: [
            "Scopable",
            "Pattern"
        ],
        checkPath (e729) {
            return v114(e729.node, e729.parent);
        }
    };
    h11.Scope = _112;
    const O112 = {
        checkPath (e8102) {
            return m112(e8102.node, e8102.parent);
        }
    };
    h11.Referenced = O112;
    const T112 = {
        checkPath (e9102) {
            return n1132(e9102.node);
        }
    };
    h11.BlockScoped = T112;
    const I111 = {
        types: [
            "VariableDeclaration"
        ],
        checkPath (e1015) {
            return x111(e1015.node);
        }
    };
    h11.Var = I111;
    const F111 = {
        checkPath (e1114) {
            return e1114.node && !!e1114.node.loc;
        }
    };
    h11.User = F111;
    const D110 = {
        checkPath (e1214) {
            return !e1214.isUser();
        }
    };
    h11.Generated = D110;
    const N111 = {
        checkPath (e1313, t5102) {
            return e1313.scope.isPure(e1313.node, t5102);
        }
    };
    h11.Pure = N111;
    const R19 = {
        types: [
            "Flow",
            "ImportDeclaration",
            "ExportDeclaration",
            "ImportSpecifier"
        ],
        checkPath ({ node: e1412  }) {
            return !!s1103(e1412) || (u118(e1412) ? "type" === e1412.importKind || "typeof" === e1412.importKind : i1103(e1412) ? "type" === e1412.exportKind : !!p117(e1412) && ("type" === e1412.importKind || "typeof" === e1412.importKind));
        }
    };
    h11.Flow = R19;
    const j111 = {
        types: [
            "RestElement"
        ],
        checkPath (e1512) {
            return e1512.parentPath && e1512.parentPath.isObjectPattern();
        }
    };
    h11.RestProperty = j111;
    const L19 = {
        types: [
            "RestElement"
        ],
        checkPath (e1612) {
            return e1612.parentPath && e1612.parentPath.isObjectExpression();
        }
    };
    h11.SpreadProperty = L19;
    const M111 = {
        types: [
            "ExistsTypeAnnotation"
        ]
    };
    h11.ExistentialTypeParam = M111;
    const $110 = {
        types: [
            "NumberLiteralTypeAnnotation"
        ]
    };
    h11.NumericLiteralTypeAnnotation = $110;
    const K16 = {
        types: [
            "ForOfStatement"
        ],
        checkPath ({ node: e1711  }) {
            return true === e1711.await;
        }
    };
    h11.ForAwaitStatement = K16;
    return h11;
}
var p14 = "default" in mod3 ? mod3.default : mod3;
var f15 = {}, g12 = false;
function dew$o1() {
    if (g12) return f15;
    g12 = true;
    Object.defineProperty(f15, "__esModule", {
        value: true
    });
    f15.explode = explode;
    f15.merge = merge1;
    f15.verify = verify;
    var e20 = dew$p1();
    var t627 = p14;
    const { DEPRECATED_KEYS: n426 , FLIPPED_ALIAS_KEYS: i414 , TYPES: r329  } = t627;
    function explode(t723) {
        if (t723._exploded) return t723;
        t723._exploded = true;
        for (const e22 of Object.keys(t723)){
            if (shouldIgnoreKey(e22)) continue;
            const n523 = e22.split("|");
            if (1 === n523.length) continue;
            const i512 = t723[e22];
            delete t723[e22];
            for (const e21 of n523)t723[e21] = i512;
        }
        verify(t723);
        delete t723.__esModule;
        ensureEntranceObjects(t723);
        ensureCallbackArrays(t723);
        for (const n623 of Object.keys(t723)){
            if (shouldIgnoreKey(n623)) continue;
            const i610 = e20[n623];
            if (!i610) continue;
            const r424 = t723[n623];
            for (const e24 of Object.keys(r424))r424[e24] = wrapCheck(i610, r424[e24]);
            delete t723[n623];
            if (i610.types) for (const e23 of i610.types)t723[e23] ? mergePair(t723[e23], r424) : t723[e23] = r424;
            else mergePair(t723, r424);
        }
        for (const e18 of Object.keys(t723)){
            if (shouldIgnoreKey(e18)) continue;
            const r521 = t723[e18];
            let s2101 = i414[e18];
            const o227 = n426[e18];
            if (o227) {
                console.trace(`Visitor defined for ${e18} but it has been renamed to ${o227}`);
                s2101 = [
                    o227
                ];
            }
            if (s2101) {
                delete t723[e18];
                for (const e25 of s2101){
                    const n721 = t723[e25];
                    n721 ? mergePair(n721, r521) : t723[e25] = Object.assign({}, r521);
                }
            }
        }
        for (const e19 of Object.keys(t723))shouldIgnoreKey(e19) || ensureCallbackArrays(t723[e19]);
        return t723;
    }
    function verify(e26) {
        if (!e26._verified) {
            if ("function" === typeof e26) throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const t819 of Object.keys(e26)){
                "enter" !== t819 && "exit" !== t819 || validateVisitorMethods(t819, e26[t819]);
                if (shouldIgnoreKey(t819)) continue;
                if (r329.indexOf(t819) < 0) throw new Error(`You gave us a visitor for the node type ${t819} but it's not a valid type`);
                const n819 = e26[t819];
                if ("object" === typeof n819) for (const e27 of Object.keys(n819)){
                    if ("enter" !== e27 && "exit" !== e27) throw new Error(`You passed \`traverse()\` a visitor object with the property ${t819} that has the invalid property ${e27}`);
                    validateVisitorMethods(`${t819}.${e27}`, n819[e27]);
                }
            }
            e26._verified = true;
        }
    }
    function validateVisitorMethods(e28, t1016) {
        const n918 = [].concat(t1016);
        for (const t917 of n918)if ("function" !== typeof t917) throw new TypeError(`Non-function found defined in ${e28} with type ${typeof t917}`);
    }
    function merge1(e29, t1137 = [], n1018) {
        const i710 = {};
        for(let r620 = 0; r620 < e29.length; r620++){
            const s377 = e29[r620];
            const o324 = t1137[r620];
            explode(s377);
            for (const e30 of Object.keys(s377)){
                let t1215 = s377[e30];
                (o324 || n1018) && (t1215 = wrapWithStateOrWrapper(t1215, o324, n1018));
                const r716 = i710[e30] = i710[e30] || {};
                mergePair(r716, t1215);
            }
        }
        return i710;
    }
    function wrapWithStateOrWrapper(e31, t1315, n1133) {
        const i810 = {};
        for (const r815 of Object.keys(e31)){
            let s418 = e31[r815];
            if (Array.isArray(s418)) {
                s418 = s418.map(function(e32) {
                    let i910 = e32;
                    t1315 && (i910 = function(n1216) {
                        return e32.call(t1315, n1216, t1315);
                    });
                    n1133 && (i910 = n1133(t1315.key, r815, i910));
                    i910 !== e32 && (i910.toString = ()=>e32.toString()
                    );
                    return i910;
                });
                i810[r815] = s418;
            }
        }
        return i810;
    }
    function ensureEntranceObjects(e33) {
        for (const t1414 of Object.keys(e33)){
            if (shouldIgnoreKey(t1414)) continue;
            const n1314 = e33[t1414];
            "function" === typeof n1314 && (e33[t1414] = {
                enter: n1314
            });
        }
    }
    function ensureCallbackArrays(e34) {
        e34.enter && !Array.isArray(e34.enter) && (e34.enter = [
            e34.enter
        ]);
        e34.exit && !Array.isArray(e34.exit) && (e34.exit = [
            e34.exit
        ]);
    }
    function wrapCheck(e35, t1513) {
        const newFn = function(n1414) {
            if (e35.checkPath(n1414)) return t1513.apply(this, arguments);
        };
        newFn.toString = ()=>t1513.toString()
        ;
        return newFn;
    }
    function shouldIgnoreKey(e36) {
        return "_" === e36[0] || "enter" === e36 || "exit" === e36 || "shouldSkip" === e36 || "denylist" === e36 || "noScope" === e36 || "skipKeys" === e36 || "blacklist" === e36;
    }
    function mergePair(e37, t1613) {
        for (const n1513 of Object.keys(t1613))e37[n1513] = [].concat(e37[n1513] || [], t1613[n1513]);
    }
    return f15;
}
var y8 = {}, m12 = false;
function dew$n1() {
    if (m12) return y8;
    m12 = true;
    Object.defineProperty(y8, "__esModule", {
        value: true
    });
    y8.clear = clear;
    y8.clearPath = clearPath;
    y8.clearScope = clearScope;
    y8.scope = y8.path = void 0;
    let e38 = new WeakMap;
    y8.path = e38;
    let t1713 = new WeakMap;
    y8.scope = t1713;
    function clear() {
        clearPath();
        clearScope();
    }
    function clearPath() {
        y8.path = e38 = new WeakMap;
    }
    function clearScope() {
        y8.scope = t1713 = new WeakMap;
    }
    return y8;
}
var v12 = {}, b11 = false;
function dew$m1() {
    if (b11) return v12;
    b11 = true;
    Object.defineProperty(v12, "__esModule", {
        value: true
    });
    v12.default = void 0;
    class Binding {
        constructor({ identifier: e39 , scope: t1812 , path: n1612 , kind: i1010  }){
            this.identifier = void 0;
            this.scope = void 0;
            this.path = void 0;
            this.kind = void 0;
            this.constantViolations = [];
            this.constant = true;
            this.referencePaths = [];
            this.referenced = false;
            this.references = 0;
            this.identifier = e39;
            this.scope = t1812;
            this.path = n1612;
            this.kind = i1010;
            this.clearValue();
        }
        deoptValue() {
            this.clearValue();
            this.hasDeoptedValue = true;
        }
        setValue(e40) {
            if (!this.hasDeoptedValue) {
                this.hasValue = true;
                this.value = e40;
            }
        }
        clearValue() {
            this.hasDeoptedValue = false;
            this.hasValue = false;
            this.value = null;
        }
        reassign(e41) {
            this.constant = false;
            -1 === this.constantViolations.indexOf(e41) && this.constantViolations.push(e41);
        }
        reference(e42) {
            if (-1 === this.referencePaths.indexOf(e42)) {
                this.referenced = true;
                this.references++;
                this.referencePaths.push(e42);
            }
        }
        dereference() {
            this.references--;
            this.referenced = !!this.references;
        }
    }
    v12.default = Binding;
    return v12;
}
var x7 = "default" in mod6 ? mod6.default : mod6;
var P8 = "default" in mod3 ? mod3.default : mod3;
var E7 = {}, S8 = false;
function dew$l1() {
    if (S8) return E7;
    S8 = true;
    Object.defineProperty(E7, "__esModule", {
        value: true
    });
    E7.default = void 0;
    dew$m1();
    var e43 = x7;
    var t1912 = P8;
    const { VISITOR_KEYS: n1712 , assignmentExpression: i11 , identifier: r9 , toExpression: s5 , variableDeclaration: o4 , variableDeclarator: a2  } = t1912;
    const c217 = {
        ReferencedIdentifier ({ node: e44  }, t2012) {
            e44.name === t2012.oldName && (e44.name = t2012.newName);
        },
        Scope (e45, t2129) {
            e45.scope.bindingIdentifierEquals(t2129.oldName, t2129.binding.identifier) || skipAllButComputedMethodKey(e45);
        },
        "AssignmentExpression|Declaration|VariableDeclarator" (e47, t2212) {
            if (e47.isVariableDeclaration()) return;
            const n1812 = e47.getOuterBindingIdentifiers();
            for(const e46 in n1812)e46 === t2212.oldName && (n1812[e46].name = t2212.newName);
        }
    };
    class Renamer {
        constructor(e48, t2311, n1911){
            this.newName = n1911;
            this.oldName = t2311;
            this.binding = e48;
        }
        maybeConvertFromExportDeclaration(t2410) {
            const n2011 = t2410.parentPath;
            n2011.isExportDeclaration() && (n2011.isExportDefaultDeclaration() && !n2011.get("declaration").node.id || (0, e43.default)(n2011));
        }
        maybeConvertFromClassFunctionDeclaration(e) {}
        maybeConvertFromClassFunctionExpression(e) {}
        rename(e49) {
            const { binding: t25 , oldName: n2119 , newName: i1210  } = this;
            const { scope: r1011 , path: s610  } = t25;
            const o518 = s610.find((e50)=>e50.isDeclaration() || e50.isFunctionExpression() || e50.isClassExpression()
            );
            if (o518) {
                const e51 = o518.getOuterBindingIdentifiers();
                e51[n2119] === t25.identifier && this.maybeConvertFromExportDeclaration(o518);
            }
            const a318 = e49 || r1011.block;
            "SwitchStatement" === (null == a318 ? void 0 : a318.type) ? a318.cases.forEach((e52)=>{
                r1011.traverse(e52, c217, this);
            }) : r1011.traverse(a318, c217, this);
            if (!e49) {
                r1011.removeOwnBinding(n2119);
                r1011.bindings[i1210] = t25;
                this.binding.identifier.name = i1210;
            }
            if (o518) {
                this.maybeConvertFromClassFunctionDeclaration(o518);
                this.maybeConvertFromClassFunctionExpression(o518);
            }
        }
    }
    E7.default = Renamer;
    function skipAllButComputedMethodKey(e53) {
        if (!e53.isMethod() || !e53.node.computed) {
            e53.skip();
            return;
        }
        const t26 = n1712[e53.type];
        for (const n2211 of t26)"key" !== n2211 && e53.skipKey(n2211);
    }
    return E7;
}
var w8 = "default" in mod7 ? mod7.default : mod7;
var k6 = "default" in mod3 ? mod3.default : mod3;
var C9 = {}, A8 = false;
function dew$k1() {
    if (A8) return C9;
    A8 = true;
    Object.defineProperty(C9, "__esModule", {
        value: true
    });
    C9.default = void 0;
    var e54 = dew$l1();
    var t27 = dew11();
    var n2411 = dew$m1();
    var i1310 = w8;
    var r1114 = k6;
    var s710 = dew$n1();
    const { NOT_LOCAL_BINDING: o612 , callExpression: a416 , cloneNode: c314 , getBindingIdentifiers: u215 , identifier: l120 , isArrayExpression: h114 , isBinary: d117 , isClass: p214 , isClassBody: f213 , isClassDeclaration: g211 , isExportAllDeclaration: y210 , isExportDefaultDeclaration: m212 , isExportNamedDeclaration: v213 , isFunctionDeclaration: b211 , isIdentifier: x28 , isImportDeclaration: P24 , isLiteral: E26 , isMethod: S28 , isModuleDeclaration: B22 , isModuleSpecifier: _2 , isObjectExpression: O25 , isProperty: T23 , isPureish: I25 , isSuper: F23 , isTaggedTemplateExpression: D22 , isTemplateLiteral: N22 , isThisExpression: R22 , isUnaryExpression: j22 , isVariableDeclaration: L22 , matchesPattern: M23 , memberExpression: $22 , numericLiteral: K22 , toIdentifier: U110 , unaryExpression: W18 , variableDeclaration: V111 , variableDeclarator: q17 , isRecordExpression: H18 , isTupleExpression: Y17 , isObjectProperty: X16 , isTopicReference: J15 , isMetaProperty: Q16 , isPrivateName: G16  } = r1114;
    function gatherNodeParts(e55, t28) {
        switch(null == e55 ? void 0 : e55.type){
            default:
                if (B22(e55)) if ((y210(e55) || v213(e55) || P24(e55)) && e55.source) gatherNodeParts(e55.source, t28);
                else if ((v213(e55) || P24(e55)) && e55.specifiers && e55.specifiers.length) for (const n2510 of e55.specifiers)gatherNodeParts(n2510, t28);
                else (m212(e55) || v213(e55)) && e55.declaration && gatherNodeParts(e55.declaration, t28);
                else _2(e55) ? gatherNodeParts(e55.local, t28) : E26(e55) && t28.push(e55.value);
                break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
                gatherNodeParts(e55.object, t28);
                gatherNodeParts(e55.property, t28);
                break;
            case "Identifier":
            case "JSXIdentifier":
                t28.push(e55.name);
                break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
                gatherNodeParts(e55.callee, t28);
                break;
            case "ObjectExpression":
            case "ObjectPattern":
                for (const n2311 of e55.properties)gatherNodeParts(n2311, t28);
                break;
            case "SpreadElement":
            case "RestElement":
                gatherNodeParts(e55.argument, t28);
                break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
                gatherNodeParts(e55.key, t28);
                break;
            case "ThisExpression":
                t28.push("this");
                break;
            case "Super":
                t28.push("super");
                break;
            case "Import":
                t28.push("import");
                break;
            case "DoExpression":
                t28.push("do");
                break;
            case "YieldExpression":
                t28.push("yield");
                gatherNodeParts(e55.argument, t28);
                break;
            case "AwaitExpression":
                t28.push("await");
                gatherNodeParts(e55.argument, t28);
                break;
            case "AssignmentExpression":
                gatherNodeParts(e55.left, t28);
                break;
            case "VariableDeclarator":
                gatherNodeParts(e55.id, t28);
                break;
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
                gatherNodeParts(e55.id, t28);
                break;
            case "PrivateName":
                gatherNodeParts(e55.id, t28);
                break;
            case "ParenthesizedExpression":
                gatherNodeParts(e55.expression, t28);
                break;
            case "UnaryExpression":
            case "UpdateExpression":
                gatherNodeParts(e55.argument, t28);
                break;
            case "MetaProperty":
                gatherNodeParts(e55.meta, t28);
                gatherNodeParts(e55.property, t28);
                break;
            case "JSXElement":
                gatherNodeParts(e55.openingElement, t28);
                break;
            case "JSXOpeningElement":
                t28.push(e55.name);
                break;
            case "JSXFragment":
                gatherNodeParts(e55.openingFragment, t28);
                break;
            case "JSXOpeningFragment":
                t28.push("Fragment");
                break;
            case "JSXNamespacedName":
                gatherNodeParts(e55.namespace, t28);
                gatherNodeParts(e55.name, t28);
                break;
        }
    }
    const z16 = {
        ForStatement (e56) {
            const t29 = e56.get("init");
            if (t29.isVar()) {
                const { scope: n2610  } = e56;
                const i1410 = n2610.getFunctionParent() || n2610.getProgramParent();
                i1410.registerBinding("var", t29);
            }
        },
        Declaration (e57) {
            if (e57.isBlockScoped()) return;
            if (e57.isImportDeclaration()) return;
            if (e57.isExportDeclaration()) return;
            const t30 = e57.scope.getFunctionParent() || e57.scope.getProgramParent();
            t30.registerDeclaration(e57);
        },
        ImportDeclaration (e58) {
            const t31 = e58.scope.getBlockParent();
            t31.registerDeclaration(e58);
        },
        ReferencedIdentifier (e59, t32) {
            t32.references.push(e59);
        },
        ForXStatement (e60, t33) {
            const n2710 = e60.get("left");
            if (n2710.isPattern() || n2710.isIdentifier()) t33.constantViolations.push(e60);
            else if (n2710.isVar()) {
                const { scope: t34  } = e60;
                const i1510 = t34.getFunctionParent() || t34.getProgramParent();
                i1510.registerBinding("var", n2710);
            }
        },
        ExportDeclaration: {
            exit (e61) {
                const { node: t36 , scope: n28  } = e61;
                if (y210(t36)) return;
                const i1710 = t36.declaration;
                if (g211(i1710) || b211(i1710)) {
                    const t37 = i1710.id;
                    if (!t37) return;
                    const r1213 = n28.getBinding(t37.name);
                    null == r1213 ? void 0 : r1213.reference(e61);
                } else if (L22(i1710)) for (const t35 of i1710.declarations)for (const i1610 of Object.keys(u215(t35))){
                    const t38 = n28.getBinding(i1610);
                    null == t38 ? void 0 : t38.reference(e61);
                }
            }
        },
        LabeledStatement (e62) {
            e62.scope.getBlockParent().registerDeclaration(e62);
        },
        AssignmentExpression (e63, t39) {
            t39.assignments.push(e63);
        },
        UpdateExpression (e64, t40) {
            t40.constantViolations.push(e64);
        },
        UnaryExpression (e65, t41) {
            "delete" === e65.node.operator && t41.constantViolations.push(e65);
        },
        BlockScoped (e66) {
            let t42 = e66.scope;
            t42.path === e66 && (t42 = t42.parent);
            const n29 = t42.getBlockParent();
            n29.registerDeclaration(e66);
            if (e66.isClassDeclaration() && e66.node.id) {
                const t43 = e66.node.id;
                const n30 = t43.name;
                e66.scope.bindings[n30] = e66.scope.parent.getBinding(n30);
            }
        },
        CatchClause (e67) {
            e67.scope.registerBinding("let", e67);
        },
        Function (e68) {
            const t44 = e68.get("params");
            for (const n31 of t44)e68.scope.registerBinding("param", n31);
            e68.isFunctionExpression() && e68.has("id") && !e68.get("id").node[o612] && e68.scope.registerBinding("local", e68.get("id"), e68);
        },
        ClassExpression (e69) {
            e69.has("id") && !e69.get("id").node[o612] && e69.scope.registerBinding("local", e69);
        }
    };
    let Z15 = 0;
    class Scope1 {
        constructor(e70){
            this.uid = void 0;
            this.path = void 0;
            this.block = void 0;
            this.labels = void 0;
            this.inited = void 0;
            this.bindings = void 0;
            this.references = void 0;
            this.globals = void 0;
            this.uids = void 0;
            this.data = void 0;
            this.crawling = void 0;
            const { node: t45  } = e70;
            const n32 = s710.scope.get(t45);
            if ((null == n32 ? void 0 : n32.path) === e70) return n32;
            s710.scope.set(t45, this);
            this.uid = Z15++;
            this.block = t45;
            this.path = e70;
            this.labels = new Map;
            this.inited = false;
        }
        get parent() {
            var e72;
            let t46, n33 = this.path;
            do {
                const e71 = "key" === n33.key;
                n33 = n33.parentPath;
                e71 && n33.isMethod() && (n33 = n33.parentPath);
                n33 && n33.isScope() && (t46 = n33);
            }while (n33 && !t46)
            return null == (e72 = t46) ? void 0 : e72.scope;
        }
        get parentBlock() {
            return this.path.parent;
        }
        get hub() {
            return this.path.hub;
        }
        traverse(e73, n34, i1810) {
            (0, t27.default)(e73, n34, this, i1810, this.path);
        }
        generateDeclaredUidIdentifier(e74) {
            const t47 = this.generateUidIdentifier(e74);
            this.push({
                id: t47
            });
            return c314(t47);
        }
        generateUidIdentifier(e75) {
            return l120(this.generateUid(e75));
        }
        generateUid(e76 = "temp") {
            e76 = U110(e76).replace(/^_+/, "").replace(/[0-9]+$/g, "");
            let t48;
            let n35 = 1;
            do {
                t48 = this._generateUid(e76, n35);
                n35++;
            }while (this.hasLabel(t48) || this.hasBinding(t48) || this.hasGlobal(t48) || this.hasReference(t48))
            const i1910 = this.getProgramParent();
            i1910.references[t48] = true;
            i1910.uids[t48] = true;
            return t48;
        }
        _generateUid(e77, t49) {
            let n36 = e77;
            t49 > 1 && (n36 += t49);
            return `_${n36}`;
        }
        generateUidBasedOnNode(e78, t50) {
            const n37 = [];
            gatherNodeParts(e78, n37);
            let i20 = n37.join("$");
            i20 = i20.replace(/^_/, "") || t50 || "ref";
            return this.generateUid(i20.slice(0, 20));
        }
        generateUidIdentifierBasedOnNode(e79, t51) {
            return l120(this.generateUidBasedOnNode(e79, t51));
        }
        isStatic(e80) {
            if (R22(e80) || F23(e80) || J15(e80)) return true;
            if (x28(e80)) {
                const t52 = this.getBinding(e80.name);
                return t52 ? t52.constant : this.hasBinding(e80.name);
            }
            return false;
        }
        maybeGenerateMemoised(e81, t53) {
            if (this.isStatic(e81)) return null;
            {
                const n38 = this.generateUidIdentifierBasedOnNode(e81);
                if (!t53) {
                    this.push({
                        id: n38
                    });
                    return c314(n38);
                }
                return n38;
            }
        }
        checkBlockScopedCollisions(e82, t54, n39, i21) {
            if ("param" === t54) return;
            if ("local" === e82.kind) return;
            const r1311 = "let" === t54 || "let" === e82.kind || "const" === e82.kind || "module" === e82.kind || "param" === e82.kind && "const" === t54;
            if (r1311) throw this.hub.buildError(i21, `Duplicate declaration "${n39}"`, TypeError);
        }
        rename(t55, n40, i22) {
            const r1411 = this.getBinding(t55);
            if (r1411) {
                n40 = n40 || this.generateUidIdentifier(t55).name;
                return new e54.default(r1411, t55, n40).rename(i22);
            }
        }
        _renameFromMap(e83, t56, n41, i23) {
            if (e83[t56]) {
                e83[n41] = i23;
                e83[t56] = null;
            }
        }
        dump() {
            const e84 = "-".repeat(60);
            console.log(e84);
            let t57 = this;
            do {
                console.log("#", t57.block.type);
                for (const e85 of Object.keys(t57.bindings)){
                    const n42 = t57.bindings[e85];
                    console.log(" -", e85, {
                        constant: n42.constant,
                        references: n42.references,
                        violations: n42.constantViolations.length,
                        kind: n42.kind
                    });
                }
            }while (t57 = t57.parent)
            console.log(e84);
        }
        toArray(e86, t59, n43) {
            if (x28(e86)) {
                const t58 = this.getBinding(e86.name);
                if (null != t58 && t58.constant && t58.path.isGenericType("Array")) return e86;
            }
            if (h114(e86)) return e86;
            if (x28(e86, {
                name: "arguments"
            })) return a416($22($22($22(l120("Array"), l120("prototype")), l120("slice")), l120("call")), [
                e86
            ]);
            let i24;
            const r159 = [
                e86
            ];
            if (true === t59) i24 = "toConsumableArray";
            else if (t59) {
                r159.push(K22(t59));
                i24 = "slicedToArray";
            } else i24 = "toArray";
            if (n43) {
                r159.unshift(this.hub.addHelper(i24));
                i24 = "maybeArrayLike";
            }
            return a416(this.hub.addHelper(i24), r159);
        }
        hasLabel(e87) {
            return !!this.getLabel(e87);
        }
        getLabel(e88) {
            return this.labels.get(e88);
        }
        registerLabel(e89) {
            this.labels.set(e89.node.label.name, e89);
        }
        registerDeclaration(e90) {
            if (e90.isLabeledStatement()) this.registerLabel(e90);
            else if (e90.isFunctionDeclaration()) this.registerBinding("hoisted", e90.get("id"), e90);
            else if (e90.isVariableDeclaration()) {
                const t60 = e90.get("declarations");
                for (const n44 of t60)this.registerBinding(e90.node.kind, n44);
            } else if (e90.isClassDeclaration()) {
                if (e90.node.declare) return;
                this.registerBinding("let", e90);
            } else if (e90.isImportDeclaration()) {
                const t61 = e90.get("specifiers");
                for (const e91 of t61)this.registerBinding("module", e91);
            } else if (e90.isExportDeclaration()) {
                const t62 = e90.get("declaration");
                (t62.isClassDeclaration() || t62.isFunctionDeclaration() || t62.isVariableDeclaration()) && this.registerDeclaration(t62);
            } else this.registerBinding("unknown", e90);
        }
        buildUndefinedNode() {
            return W18("void", K22(0), true);
        }
        registerConstantViolation(e92) {
            const t63 = e92.getBindingIdentifiers();
            for (const n45 of Object.keys(t63)){
                const t64 = this.getBinding(n45);
                t64 && t64.reassign(e92);
            }
        }
        registerBinding(e93, t65, i25 = t65) {
            if (!e93) throw new ReferenceError("no `kind`");
            if (t65.isVariableDeclaration()) {
                const n46 = t65.get("declarations");
                for (const t66 of n46)this.registerBinding(e93, t66);
                return;
            }
            const r174 = this.getProgramParent();
            const s810 = t65.getOuterBindingIdentifiers(true);
            for (const t67 of Object.keys(s810)){
                r174.references[t67] = true;
                for (const r164 of s810[t67]){
                    const s910 = this.getOwnBinding(t67);
                    if (s910) {
                        if (s910.identifier === r164) continue;
                        this.checkBlockScopedCollisions(s910, e93, t67, r164);
                    }
                    s910 ? this.registerConstantViolation(i25) : this.bindings[t67] = new n2411.default({
                        identifier: r164,
                        scope: this,
                        path: i25,
                        kind: e93
                    });
                }
            }
        }
        addGlobal(e94) {
            this.globals[e94.name] = e94;
        }
        hasUid(e95) {
            let t68 = this;
            do {
                if (t68.uids[e95]) return true;
            }while (t68 = t68.parent)
            return false;
        }
        hasGlobal(e96) {
            let t69 = this;
            do {
                if (t69.globals[e96]) return true;
            }while (t69 = t69.parent)
            return false;
        }
        hasReference(e97) {
            return !!this.getProgramParent().references[e97];
        }
        isPure(e98, t70) {
            if (x28(e98)) {
                const n47 = this.getBinding(e98.name);
                return !!n47 && (!t70 || n47.constant);
            }
            if (R22(e98) || Q16(e98) || J15(e98) || G16(e98)) return true;
            if (p214(e98)) {
                var n48;
                return !(e98.superClass && !this.isPure(e98.superClass, t70)) && !((null == (n48 = e98.decorators) ? void 0 : n48.length) > 0) && this.isPure(e98.body, t70);
            }
            if (f213(e98)) {
                for (const n49 of e98.body)if (!this.isPure(n49, t70)) return false;
                return true;
            }
            if (d117(e98)) return this.isPure(e98.left, t70) && this.isPure(e98.right, t70);
            if (h114(e98) || Y17(e98)) {
                for (const n50 of e98.elements)if (null !== n50 && !this.isPure(n50, t70)) return false;
                return true;
            }
            if (O25(e98) || H18(e98)) {
                for (const n51 of e98.properties)if (!this.isPure(n51, t70)) return false;
                return true;
            }
            if (S28(e98)) {
                var i26;
                return !(e98.computed && !this.isPure(e98.key, t70)) && !((null == (i26 = e98.decorators) ? void 0 : i26.length) > 0);
            }
            if (T23(e98)) {
                var r184;
                return !(e98.computed && !this.isPure(e98.key, t70)) && !((null == (r184 = e98.decorators) ? void 0 : r184.length) > 0) && !((X16(e98) || e98.static) && null !== e98.value && !this.isPure(e98.value, t70));
            }
            if (j22(e98)) return this.isPure(e98.argument, t70);
            if (D22(e98)) return M23(e98.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(e98.quasi, t70);
            if (N22(e98)) {
                for (const n52 of e98.expressions)if (!this.isPure(n52, t70)) return false;
                return true;
            }
            return I25(e98);
        }
        setData(e99, t71) {
            return this.data[e99] = t71;
        }
        getData(e100) {
            let t72 = this;
            do {
                const n53 = t72.data[e100];
                if (null != n53) return n53;
            }while (t72 = t72.parent)
        }
        removeData(e101) {
            let t73 = this;
            do {
                const n54 = t73.data[e101];
                null != n54 && (t73.data[e101] = null);
            }while (t73 = t73.parent)
        }
        init() {
            if (!this.inited) {
                this.inited = true;
                this.crawl();
            }
        }
        crawl() {
            const e105 = this.path;
            this.references = Object.create(null);
            this.bindings = Object.create(null);
            this.globals = Object.create(null);
            this.uids = Object.create(null);
            this.data = Object.create(null);
            const t74 = this.getProgramParent();
            if (t74.crawling) return;
            const n55 = {
                references: [],
                constantViolations: [],
                assignments: []
            };
            this.crawling = true;
            if ("Program" !== e105.type && z16._exploded) {
                for (const t76 of z16.enter)t76(e105, n55);
                const t75 = z16[e105.type];
                if (t75) for (const i27 of t75.enter)i27(e105, n55);
            }
            e105.traverse(z16, n55);
            this.crawling = false;
            for (const e102 of n55.assignments){
                const n56 = e102.getBindingIdentifiers();
                for (const i28 of Object.keys(n56))e102.scope.getBinding(i28) || t74.addGlobal(n56[i28]);
                e102.scope.registerConstantViolation(e102);
            }
            for (const e103 of n55.references){
                const n57 = e103.scope.getBinding(e103.node.name);
                n57 ? n57.reference(e103) : t74.addGlobal(e103.node);
            }
            for (const e104 of n55.constantViolations)e104.scope.registerConstantViolation(e104);
        }
        push(e106) {
            let t77 = this.path;
            t77.isBlockStatement() || t77.isProgram() || (t77 = this.getBlockParent().path);
            t77.isSwitchStatement() && (t77 = (this.getFunctionParent() || this.getProgramParent()).path);
            if (t77.isLoop() || t77.isCatchClause() || t77.isFunction()) {
                t77.ensureBlock();
                t77 = t77.get("body");
            }
            const n58 = e106.unique;
            const i29 = e106.kind || "var";
            const r194 = null == e106._blockHoist ? 2 : e106._blockHoist;
            const s1010 = `declaration:${i29}:${r194}`;
            let o711 = !n58 && t77.getData(s1010);
            if (!o711) {
                const e107 = V111(i29, []);
                e107._blockHoist = r194;
                [o711] = t77.unshiftContainer("body", [
                    e107
                ]);
                n58 || t77.setData(s1010, o711);
            }
            const a511 = q17(e106.id, e106.init);
            const c413 = o711.node.declarations.push(a511);
            t77.scope.registerBinding(i29, o711.get("declarations")[c413 - 1]);
        }
        getProgramParent() {
            let e108 = this;
            do {
                if (e108.path.isProgram()) return e108;
            }while (e108 = e108.parent)
            throw new Error("Couldn't find a Program");
        }
        getFunctionParent() {
            let e109 = this;
            do {
                if (e109.path.isFunctionParent()) return e109;
            }while (e109 = e109.parent)
            return null;
        }
        getBlockParent() {
            let e110 = this;
            do {
                if (e110.path.isBlockParent()) return e110;
            }while (e110 = e110.parent)
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
        }
        getAllBindings() {
            const e111 = Object.create(null);
            let t78 = this;
            do {
                for (const n59 of Object.keys(t78.bindings))n59 in e111 === false && (e111[n59] = t78.bindings[n59]);
                t78 = t78.parent;
            }while (t78)
            return e111;
        }
        getAllBindingsOfKind(...e112) {
            const t79 = Object.create(null);
            for (const n60 of e112){
                let e1132 = this;
                do {
                    for (const i30 of Object.keys(e1132.bindings)){
                        const r202 = e1132.bindings[i30];
                        r202.kind === n60 && (t79[i30] = r202);
                    }
                    e1132 = e1132.parent;
                }while (e1132)
            }
            return t79;
        }
        bindingIdentifierEquals(e114, t80) {
            return this.getBindingIdentifier(e114) === t80;
        }
        getBinding(e115) {
            let t81 = this;
            let n61;
            do {
                const r2111 = t81.getOwnBinding(e115);
                if (r2111) {
                    var i31;
                    if (null == (i31 = n61) || !i31.isPattern() || "param" === r2111.kind || "local" === r2111.kind) return r2111;
                } else if (!r2111 && "arguments" === e115 && t81.path.isFunction() && !t81.path.isArrowFunctionExpression()) break;
                n61 = t81.path;
            }while (t81 = t81.parent)
        }
        getOwnBinding(e116) {
            return this.bindings[e116];
        }
        getBindingIdentifier(e117) {
            var t82;
            return null == (t82 = this.getBinding(e117)) ? void 0 : t82.identifier;
        }
        getOwnBindingIdentifier(e118) {
            const t83 = this.bindings[e118];
            return null == t83 ? void 0 : t83.identifier;
        }
        hasOwnBinding(e119) {
            return !!this.getOwnBinding(e119);
        }
        hasBinding(e120, t84) {
            return !!e120 && (!!this.hasOwnBinding(e120) || !!this.parentHasBinding(e120, t84) || !!this.hasUid(e120) || !(t84 || !Scope1.globals.includes(e120)) || !(t84 || !Scope1.contextVariables.includes(e120)));
        }
        parentHasBinding(e121, t85) {
            var n62;
            return null == (n62 = this.parent) ? void 0 : n62.hasBinding(e121, t85);
        }
        moveBindingTo(e122, t86) {
            const n63 = this.getBinding(e122);
            if (n63) {
                n63.scope.removeOwnBinding(e122);
                n63.scope = t86;
                t86.bindings[e122] = n63;
            }
        }
        removeOwnBinding(e123) {
            delete this.bindings[e123];
        }
        removeBinding(e124) {
            var t87;
            null == (t87 = this.getBinding(e124)) ? void 0 : t87.scope.removeOwnBinding(e124);
            let n64 = this;
            do {
                n64.uids[e124] && (n64.uids[e124] = false);
            }while (n64 = n64.parent)
        }
    }
    C9.default = Scope1;
    Scope1.globals = Object.keys(i1310.builtin);
    Scope1.contextVariables = [
        "arguments",
        "undefined",
        "Infinity",
        "NaN"
    ];
    return C9;
}
var B7 = "default" in mod3 ? mod3.default : mod3;
var _9 = {}, O9 = false;
function dew$j1() {
    if (O9) return _9;
    O9 = true;
    Object.defineProperty(_9, "__esModule", {
        value: true
    });
    _9.find = find2;
    _9.findParent = findParent;
    _9.getAncestry = getAncestry;
    _9.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
    _9.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
    _9.getFunctionParent = getFunctionParent;
    _9.getStatementParent = getStatementParent;
    _9.inType = inType;
    _9.isAncestor = isAncestor;
    _9.isDescendant = isDescendant;
    var e125 = B7;
    dew$42();
    const { VISITOR_KEYS: t88  } = e125;
    function findParent(e126) {
        let t89 = this;
        while(t89 = t89.parentPath)if (e126(t89)) return t89;
        return null;
    }
    function find2(e127) {
        let t90 = this;
        do {
            if (e127(t90)) return t90;
        }while (t90 = t90.parentPath)
        return null;
    }
    function getFunctionParent() {
        return this.findParent((e128)=>e128.isFunction()
        );
    }
    function getStatementParent() {
        let e129 = this;
        do {
            if (!e129.parentPath || Array.isArray(e129.container) && e129.isStatement()) break;
            e129 = e129.parentPath;
        }while (e129)
        if (e129 && (e129.isProgram() || e129.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
        return e129;
    }
    function getEarliestCommonAncestorFrom(e130) {
        return this.getDeepestCommonAncestorFrom(e130, function(e132, n65, i32) {
            let r2210;
            const s1111 = t88[e132.type];
            for (const e131 of i32){
                const t91 = e131[n65 + 1];
                if (!r2210) {
                    r2210 = t91;
                    continue;
                }
                if (t91.listKey && r2210.listKey === t91.listKey && t91.key < r2210.key) {
                    r2210 = t91;
                    continue;
                }
                const i33 = s1111.indexOf(r2210.parentKey);
                const o82 = s1111.indexOf(t91.parentKey);
                i33 > o82 && (r2210 = t91);
            }
            return r2210;
        });
    }
    function getDeepestCommonAncestorFrom(e134, t92) {
        if (!e134.length) return this;
        if (1 === e134.length) return e134[0];
        let n66 = Infinity;
        let i34, r233;
        const s1210 = e134.map((e135)=>{
            const t93 = [];
            do {
                t93.unshift(e135);
            }while ((e135 = e135.parentPath) && e135 !== this)
            t93.length < n66 && (n66 = t93.length);
            return t93;
        });
        const o92 = s1210[0];
        e: for(let e133 = 0; e133 < n66; e133++){
            const t94 = o92[e133];
            for (const n67 of s1210)if (n67[e133] !== t94) break e;
            i34 = e133;
            r233 = t94;
        }
        if (r233) return t92 ? t92(r233, i34, s1210) : r233;
        throw new Error("Couldn't find intersection");
    }
    function getAncestry() {
        let e136 = this;
        const t95 = [];
        do {
            t95.push(e136);
        }while (e136 = e136.parentPath)
        return t95;
    }
    function isAncestor(e137) {
        return e137.isDescendant(this);
    }
    function isDescendant(e138) {
        return !!this.findParent((t96)=>t96 === e138
        );
    }
    function inType(...e139) {
        let t97 = this;
        while(t97){
            for (const n68 of e139)if (t97.node.type === n68) return true;
            t97 = t97.parentPath;
        }
        return false;
    }
    return _9;
}
var T7 = "default" in mod3 ? mod3.default : mod3;
var I9 = {}, F9 = false;
function dew$i1() {
    if (F9) return I9;
    F9 = true;
    Object.defineProperty(I9, "__esModule", {
        value: true
    });
    I9.default = _default2;
    var e140 = T7;
    const { BOOLEAN_NUMBER_BINARY_OPERATORS: t98 , createFlowUnionType: n69 , createTSUnionType: i35 , createTypeAnnotationBasedOnTypeof: r242 , createUnionTypeAnnotation: s1310 , isTSTypeAnnotation: o102 , numberTypeAnnotation: a611 , voidTypeAnnotation: c55  } = e140;
    function _default2(e141) {
        if (!this.isReferenced()) return;
        const t99 = this.scope.getBinding(e141.name);
        if (t99) return t99.identifier.typeAnnotation ? t99.identifier.typeAnnotation : getTypeAnnotationBindingConstantViolations(t99, this, e141.name);
        if ("undefined" === e141.name) return c55();
        if ("NaN" === e141.name || "Infinity" === e141.name) return a611();
        "arguments" === e141.name;
    }
    function getTypeAnnotationBindingConstantViolations(e142, t100, r252) {
        const a711 = [];
        const c62 = [];
        let u312 = getConstantViolationsBefore(e142, t100, c62);
        const l218 = getConditionalAnnotation(e142, t100, r252);
        if (l218) {
            const t101 = getConstantViolationsBefore(e142, l218.ifStatement);
            u312 = u312.filter((e143)=>t101.indexOf(e143) < 0
            );
            a711.push(l218.typeAnnotation);
        }
        if (u312.length) {
            u312.push(...c62);
            for (const e144 of u312)a711.push(e144.getTypeAnnotation());
        }
        if (a711.length) return o102(a711[0]) && i35 ? i35(a711) : n69 ? n69(a711) : s1310(a711);
    }
    function getConstantViolationsBefore(e145, t102, n70) {
        const i36 = e145.constantViolations.slice();
        i36.unshift(e145.path);
        return i36.filter((e146)=>{
            e146 = e146.resolve();
            const i37 = e146._guessExecutionStatusRelativeTo(t102);
            n70 && "unknown" === i37 && n70.push(e146);
            return "before" === i37;
        });
    }
    function inferAnnotationFromBinaryExpression(e147, n71) {
        const i38 = n71.node.operator;
        const s1410 = n71.get("right").resolve();
        const o1111 = n71.get("left").resolve();
        let c72;
        o1111.isIdentifier({
            name: e147
        }) ? c72 = s1410 : s1410.isIdentifier({
            name: e147
        }) && (c72 = o1111);
        if (c72) return "===" === i38 ? c72.getTypeAnnotation() : t98.indexOf(i38) >= 0 ? a611() : void 0;
        if ("===" !== i38 && "==" !== i38) return;
        let u412;
        let l314;
        if (o1111.isUnaryExpression({
            operator: "typeof"
        })) {
            u412 = o1111;
            l314 = s1410;
        } else if (s1410.isUnaryExpression({
            operator: "typeof"
        })) {
            u412 = s1410;
            l314 = o1111;
        }
        if (!u412) return;
        if (!u412.get("argument").isIdentifier({
            name: e147
        })) return;
        l314 = l314.resolve();
        if (!l314.isLiteral()) return;
        const h214 = l314.node.value;
        return "string" === typeof h214 ? r242(h214) : void 0;
    }
    function getParentConditionalPath(e148, t103, n72) {
        let i39;
        while(i39 = t103.parentPath){
            if (i39.isIfStatement() || i39.isConditionalExpression()) {
                if ("test" === t103.key) return;
                return i39;
            }
            if (i39.isFunction() && i39.parentPath.scope.getBinding(n72) !== e148) return;
            t103 = i39;
        }
    }
    function getConditionalAnnotation(e150, t104, r262) {
        const a84 = getParentConditionalPath(e150, t104, r262);
        if (!a84) return;
        const c82 = a84.get("test");
        const u511 = [
            c82
        ];
        const l413 = [];
        for(let e149 = 0; e149 < u511.length; e149++){
            const t105 = u511[e149];
            if (t105.isLogicalExpression()) {
                if ("&&" === t105.node.operator) {
                    u511.push(t105.get("left"));
                    u511.push(t105.get("right"));
                }
            } else if (t105.isBinaryExpression()) {
                const e151 = inferAnnotationFromBinaryExpression(r262, t105);
                e151 && l413.push(e151);
            }
        }
        return l413.length ? o102(l413[0]) && i35 ? {
            typeAnnotation: i35(l413),
            ifStatement: a84
        } : n69 ? {
            typeAnnotation: n69(l413),
            ifStatement: a84
        } : {
            typeAnnotation: s1310(l413),
            ifStatement: a84
        } : getConditionalAnnotation(a84, r262);
    }
    return I9;
}
var D7 = "default" in mod3 ? mod3.default : mod3;
var N8 = {}, R7 = false;
function dew$h1() {
    if (R7) return N8;
    R7 = true;
    Object.defineProperty(N8, "__esModule", {
        value: true
    });
    N8.ArrayExpression = ArrayExpression;
    N8.AssignmentExpression = AssignmentExpression;
    N8.BinaryExpression = BinaryExpression;
    N8.BooleanLiteral = BooleanLiteral;
    N8.CallExpression = CallExpression;
    N8.ConditionalExpression = ConditionalExpression;
    N8.ClassDeclaration = N8.ClassExpression = N8.FunctionDeclaration = N8.ArrowFunctionExpression = N8.FunctionExpression = Func;
    Object.defineProperty(N8, "Identifier", {
        enumerable: true,
        get: function() {
            return t106.default;
        }
    });
    N8.LogicalExpression = LogicalExpression;
    N8.NewExpression = NewExpression;
    N8.NullLiteral = NullLiteral;
    N8.NumericLiteral = NumericLiteral;
    N8.ObjectExpression = ObjectExpression;
    N8.ParenthesizedExpression = ParenthesizedExpression;
    N8.RegExpLiteral = RegExpLiteral;
    N8.RestElement = RestElement;
    N8.SequenceExpression = SequenceExpression;
    N8.StringLiteral = StringLiteral;
    N8.TaggedTemplateExpression = TaggedTemplateExpression;
    N8.TemplateLiteral = TemplateLiteral;
    N8.TypeCastExpression = TypeCastExpression;
    N8.UnaryExpression = UnaryExpression;
    N8.UpdateExpression = UpdateExpression;
    N8.VariableDeclarator = VariableDeclarator;
    var e152 = D7;
    var t106 = dew$i1();
    const { BOOLEAN_BINARY_OPERATORS: n73 , BOOLEAN_UNARY_OPERATORS: i40 , NUMBER_BINARY_OPERATORS: r271 , NUMBER_UNARY_OPERATORS: s1510 , STRING_UNARY_OPERATORS: o1210 , anyTypeAnnotation: a94 , arrayTypeAnnotation: c92 , booleanTypeAnnotation: u611 , buildMatchMemberExpression: l57 , createFlowUnionType: h312 , createTSUnionType: d212 , createUnionTypeAnnotation: p313 , genericTypeAnnotation: f311 , identifier: g39 , isTSTypeAnnotation: y32 , nullLiteralTypeAnnotation: m311 , numberTypeAnnotation: v35 , stringTypeAnnotation: b32 , tupleTypeAnnotation: x31 , unionTypeAnnotation: P31 , voidTypeAnnotation: E31  } = e152;
    function VariableDeclarator() {
        var e153;
        const t107 = this.get("id");
        if (!t107.isIdentifier()) return;
        const n74 = this.get("init");
        let i41 = n74.getTypeAnnotation();
        "AnyTypeAnnotation" === (null == (e153 = i41) ? void 0 : e153.type) && n74.isCallExpression() && n74.get("callee").isIdentifier({
            name: "Array"
        }) && !n74.scope.hasBinding("Array", true) && (i41 = ArrayExpression());
        return i41;
    }
    function TypeCastExpression(e154) {
        return e154.typeAnnotation;
    }
    TypeCastExpression.validParent = true;
    function NewExpression(e155) {
        if (this.get("callee").isIdentifier()) return f311(e155.callee);
    }
    function TemplateLiteral() {
        return b32();
    }
    function UnaryExpression(e156) {
        const t108 = e156.operator;
        return "void" === t108 ? E31() : s1510.indexOf(t108) >= 0 ? v35() : o1210.indexOf(t108) >= 0 ? b32() : i40.indexOf(t108) >= 0 ? u611() : void 0;
    }
    function BinaryExpression(e157) {
        const t109 = e157.operator;
        if (r271.indexOf(t109) >= 0) return v35();
        if (n73.indexOf(t109) >= 0) return u611();
        if ("+" === t109) {
            const e158 = this.get("right");
            const t110 = this.get("left");
            return t110.isBaseType("number") && e158.isBaseType("number") ? v35() : t110.isBaseType("string") || e158.isBaseType("string") ? b32() : P31([
                b32(),
                v35()
            ]);
        }
    }
    function LogicalExpression() {
        const e159 = [
            this.get("left").getTypeAnnotation(),
            this.get("right").getTypeAnnotation()
        ];
        return y32(e159[0]) && d212 ? d212(e159) : h312 ? h312(e159) : p313(e159);
    }
    function ConditionalExpression() {
        const e160 = [
            this.get("consequent").getTypeAnnotation(),
            this.get("alternate").getTypeAnnotation()
        ];
        return y32(e160[0]) && d212 ? d212(e160) : h312 ? h312(e160) : p313(e160);
    }
    function SequenceExpression() {
        return this.get("expressions").pop().getTypeAnnotation();
    }
    function ParenthesizedExpression() {
        return this.get("expression").getTypeAnnotation();
    }
    function AssignmentExpression() {
        return this.get("right").getTypeAnnotation();
    }
    function UpdateExpression(e161) {
        const t111 = e161.operator;
        if ("++" === t111 || "--" === t111) return v35();
    }
    function StringLiteral() {
        return b32();
    }
    function NumericLiteral() {
        return v35();
    }
    function BooleanLiteral() {
        return u611();
    }
    function NullLiteral() {
        return m311();
    }
    function RegExpLiteral() {
        return f311(g39("RegExp"));
    }
    function ObjectExpression() {
        return f311(g39("Object"));
    }
    function ArrayExpression() {
        return f311(g39("Array"));
    }
    function RestElement() {
        return ArrayExpression();
    }
    RestElement.validParent = true;
    function Func() {
        return f311(g39("Function"));
    }
    const S31 = l57("Array.from");
    const w25 = l57("Object.keys");
    const k22 = l57("Object.values");
    const C28 = l57("Object.entries");
    function CallExpression() {
        const { callee: e162  } = this.node;
        return w25(e162) ? c92(b32()) : S31(e162) || k22(e162) ? c92(a94()) : C28(e162) ? c92(x31([
            b32(),
            a94()
        ])) : resolveCall(this.get("callee"));
    }
    function TaggedTemplateExpression() {
        return resolveCall(this.get("tag"));
    }
    function resolveCall(e163) {
        e163 = e163.resolve();
        if (e163.isFunction()) {
            if (e163.is("async")) return e163.is("generator") ? f311(g39("AsyncIterator")) : f311(g39("Promise"));
            if (e163.node.returnType) return e163.node.returnType;
        }
    }
    return N8;
}
var j5 = "default" in mod3 ? mod3.default : mod3;
var L7 = {}, M6 = false;
function dew$g1() {
    if (M6) return L7;
    M6 = true;
    Object.defineProperty(L7, "__esModule", {
        value: true
    });
    L7._getTypeAnnotation = _getTypeAnnotation;
    L7.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
    L7.couldBeBaseType = couldBeBaseType;
    L7.getTypeAnnotation = getTypeAnnotation;
    L7.isBaseType = isBaseType;
    L7.isGenericType = isGenericType;
    var e164 = dew$h1();
    var t112 = j5;
    const { anyTypeAnnotation: n75 , isAnyTypeAnnotation: i42 , isBooleanTypeAnnotation: r281 , isEmptyTypeAnnotation: s1610 , isFlowBaseAnnotation: o134 , isGenericTypeAnnotation: a104 , isIdentifier: c102 , isMixedTypeAnnotation: u71 , isNumberTypeAnnotation: l63 , isStringTypeAnnotation: h43 , isTypeAnnotation: d312 , isUnionTypeAnnotation: p48 , isVoidTypeAnnotation: f410 , stringTypeAnnotation: g41 , voidTypeAnnotation: y41  } = t112;
    function getTypeAnnotation() {
        if (this.typeAnnotation) return this.typeAnnotation;
        let e165 = this._getTypeAnnotation() || n75();
        d312(e165) && (e165 = e165.typeAnnotation);
        return this.typeAnnotation = e165;
    }
    const m42 = new WeakSet;
    function _getTypeAnnotation() {
        const t113 = this.node;
        if (t113) {
            if (t113.typeAnnotation) return t113.typeAnnotation;
            if (!m42.has(t113)) {
                m42.add(t113);
                try {
                    var i43;
                    let n76 = e164[t113.type];
                    if (n76) return n76.call(this, t113);
                    n76 = e164[this.parentPath.type];
                    if (null != (i43 = n76) && i43.validParent) return this.parentPath.getTypeAnnotation();
                } finally{
                    m42.delete(t113);
                }
            }
        } else if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
            const e166 = this.parentPath.parentPath;
            const t114 = e166.parentPath;
            return "left" === e166.key && t114.isForInStatement() ? g41() : "left" === e166.key && t114.isForOfStatement() ? n75() : y41();
        }
    }
    function isBaseType(e167, t115) {
        return _isBaseType(e167, this.getTypeAnnotation(), t115);
    }
    function _isBaseType(e168, t116, n77) {
        if ("string" === e168) return h43(t116);
        if ("number" === e168) return l63(t116);
        if ("boolean" === e168) return r281(t116);
        if ("any" === e168) return i42(t116);
        if ("mixed" === e168) return u71(t116);
        if ("empty" === e168) return s1610(t116);
        if ("void" === e168) return f410(t116);
        if (n77) return false;
        throw new Error(`Unknown base type ${e168}`);
    }
    function couldBeBaseType(e169) {
        const t117 = this.getTypeAnnotation();
        if (i42(t117)) return true;
        if (p48(t117)) {
            for (const n78 of t117.types)if (i42(n78) || _isBaseType(e169, n78, true)) return true;
            return false;
        }
        return _isBaseType(e169, t117, true);
    }
    function baseTypeStrictlyMatches(e170) {
        const t118 = this.getTypeAnnotation();
        const n79 = e170.getTypeAnnotation();
        return !(i42(t118) || !o134(t118)) && n79.type === t118.type;
    }
    function isGenericType(e171) {
        const t119 = this.getTypeAnnotation();
        return a104(t119) && c102(t119.id, {
            name: e171
        });
    }
    return L7;
}
var $6 = "default" in mod16 ? mod16.default : mod16;
var K5 = "default" in mod17 ? mod17.default : mod17;
var U6 = "default" in mod3 ? mod3.default : mod3;
var W6 = "default" in mod18 ? mod18.default : mod18;
var V7 = {}, q5 = false;
function dew$f1() {
    if (q5) return V7;
    q5 = true;
    Object.defineProperty(V7, "__esModule", {
        value: true
    });
    V7._replaceWith = _replaceWith;
    V7.replaceExpressionWithStatements = replaceExpressionWithStatements;
    V7.replaceInline = replaceInline;
    V7.replaceWith = replaceWith;
    V7.replaceWithMultiple = replaceWithMultiple;
    V7.replaceWithSourceString = replaceWithSourceString;
    var e172 = $6;
    var t120 = dew11();
    var n80 = dew$42();
    var i44 = dew$n1();
    var r29 = K5;
    var s1710 = U6;
    var o14 = W6;
    const { FUNCTION_TYPES: a1113 , arrowFunctionExpression: c1111 , assignmentExpression: u81 , awaitExpression: l73 , blockStatement: h53 , callExpression: d411 , cloneNode: p52 , expressionStatement: f57 , identifier: g51 , inheritLeadingComments: y51 , inheritTrailingComments: m51 , inheritsComments: v42 , isExpression: b41 , isProgram: x41 , isStatement: P41 , removeComments: E41 , returnStatement: S41 , toSequenceExpression: w31 , validate: k31 , yieldExpression: C31  } = s1710;
    function replaceWithMultiple(e173) {
        var t121;
        this.resync();
        e173 = this._verifyNodeList(e173);
        y51(e173[0], this.node);
        m51(e173[e173.length - 1], this.node);
        null == (t121 = i44.path.get(this.parent)) ? void 0 : t121.delete(this.node);
        this.node = this.container[this.key] = null;
        const n81 = this.insertAfter(e173);
        this.node ? this.requeue() : this.remove();
        return n81;
    }
    function replaceWithSourceString(n82) {
        this.resync();
        try {
            n82 = `(${n82})`;
            n82 = (0, r29.parse)(n82);
        } catch (t122) {
            const i45 = t122.loc;
            if (i45) {
                t122.message += " - make sure this is an expression.\n" + (0, e172.codeFrameColumns)(n82, {
                    start: {
                        line: i45.line,
                        column: i45.column + 1
                    }
                });
                t122.code = "BABEL_REPLACE_SOURCE_ERROR";
            }
            throw t122;
        }
        n82 = n82.program.body[0].expression;
        t120.default.removeProperties(n82);
        return this.replaceWith(n82);
    }
    function replaceWith(e174) {
        this.resync();
        if (this.removed) throw new Error("You can't replace this node, we've already removed it");
        e174 instanceof n80.default && (e174 = e174.node);
        if (!e174) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
        if (this.node === e174) return [
            this
        ];
        if (this.isProgram() && !x41(e174)) throw new Error("You can only replace a Program root node with another Program node");
        if (Array.isArray(e174)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
        if ("string" === typeof e174) throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
        let t123 = "";
        if (this.isNodeType("Statement") && b41(e174) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(e174) && !this.parentPath.isExportDefaultDeclaration()) {
            e174 = f57(e174);
            t123 = "expression";
        }
        if (this.isNodeType("Expression") && P41(e174) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(e174)) return this.replaceExpressionWithStatements([
            e174
        ]);
        const i46 = this.node;
        if (i46) {
            v42(e174, i46);
            E41(i46);
        }
        this._replaceWith(e174);
        this.type = e174.type;
        this.setScope();
        this.requeue();
        return [
            t123 ? this.get(t123) : this
        ];
    }
    function _replaceWith(e175) {
        var t124;
        if (!this.container) throw new ReferenceError("Container is falsy");
        this.inList ? k31(this.parent, this.key, [
            e175
        ]) : k31(this.parent, this.key, e175);
        this.debug(`Replace with ${null == e175 ? void 0 : e175.type}`);
        null == (t124 = i44.path.get(this.parent)) ? void 0 : t124.set(e175, this).delete(this.node);
        this.node = this.container[this.key] = e175;
    }
    function replaceExpressionWithStatements(e177) {
        this.resync();
        const n83 = w31(e177, this.scope);
        if (n83) return this.replaceWith(n83)[0].get("expressions");
        const i47 = this.getFunctionParent();
        const r30 = null == i47 ? void 0 : i47.is("async");
        const s1810 = null == i47 ? void 0 : i47.is("generator");
        const f62 = c1111([], h53(e177));
        this.replaceWith(d411(f62, []));
        const y61 = this.get("callee");
        (0, o14.default)(y61.get("body"), (e178)=>{
            this.scope.push({
                id: e178
            });
        }, "var");
        const m61 = this.get("callee").getCompletionRecords();
        for (const e176 of m61){
            if (!e176.isExpressionStatement()) continue;
            const t125 = e176.findParent((e179)=>e179.isLoop()
            );
            if (t125) {
                let n84 = t125.getData("expressionReplacementReturnUid");
                if (n84) n84 = g51(n84.name);
                else {
                    n84 = y61.scope.generateDeclaredUidIdentifier("ret");
                    y61.get("body").pushContainer("body", S41(p52(n84)));
                    t125.setData("expressionReplacementReturnUid", n84);
                }
                e176.get("expression").replaceWith(u81("=", p52(n84), e176.node.expression));
            } else e176.replaceWith(S41(e176.node.expression));
        }
        y61.arrowFunctionToExpression();
        const v52 = y61;
        const b51 = r30 && t120.default.hasType(this.get("callee.body").node, "AwaitExpression", a1113);
        const x51 = s1810 && t120.default.hasType(this.get("callee.body").node, "YieldExpression", a1113);
        if (b51) {
            v52.set("async", true);
            x51 || this.replaceWith(l73(this.node));
        }
        if (x51) {
            v52.set("generator", true);
            this.replaceWith(C31(this.node, true));
        }
        return v52.get("body.body");
    }
    function replaceInline(e180) {
        this.resync();
        if (Array.isArray(e180)) {
            if (Array.isArray(this.container)) {
                e180 = this._verifyNodeList(e180);
                const t126 = this._containerInsertAfter(e180);
                this.remove();
                return t126;
            }
            return this.replaceWithMultiple(e180);
        }
        return this.replaceWith(e180);
    }
    return V7;
}
var H5 = {}, Y5 = false;
var X5 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$e1() {
    if (Y5) return H5;
    Y5 = true;
    Object.defineProperty(H5, "__esModule", {
        value: true
    });
    H5.evaluate = evaluate1;
    H5.evaluateTruthy = evaluateTruthy;
    const e181 = [
        "String",
        "Number",
        "Math"
    ];
    const t127 = [
        "random"
    ];
    function evaluateTruthy() {
        const e182 = this.evaluate();
        if (e182.confident) return !!e182.value;
    }
    function deopt(e183, t128) {
        if (t128.confident) {
            t128.deoptPath = e183;
            t128.confident = false;
        }
    }
    function evaluateCached(e184, t129) {
        const { node: n85  } = e184;
        const { seen: i48  } = t129;
        if (!i48.has(n85)) {
            const r31 = {
                resolved: false
            };
            i48.set(n85, r31);
            const s1910 = _evaluate(e184, t129);
            if (t129.confident) {
                r31.resolved = true;
                r31.value = s1910;
            }
            return s1910;
        }
        {
            const r32 = i48.get(n85);
            if (r32.resolved) return r32.value;
            deopt(e184, t129);
        }
    }
    function _evaluate(n86, i49) {
        if (i49.confident) {
            if (n86.isSequenceExpression()) {
                const e185 = n86.get("expressions");
                return evaluateCached(e185[e185.length - 1], i49);
            }
            if (n86.isStringLiteral() || n86.isNumericLiteral() || n86.isBooleanLiteral()) return n86.node.value;
            if (n86.isNullLiteral()) return null;
            if (n86.isTemplateLiteral()) return evaluateQuasis(n86, n86.node.quasis, i49);
            if (n86.isTaggedTemplateExpression() && n86.get("tag").isMemberExpression()) {
                const e186 = n86.get("tag.object");
                const { node: { name: t130  }  } = e186;
                const r33 = n86.get("tag.property");
                if (e186.isIdentifier() && "String" === t130 && !n86.scope.getBinding(t130) && r33.isIdentifier() && "raw" === r33.node.name) return evaluateQuasis(n86, n86.node.quasi.quasis, i49, true);
            }
            if (n86.isConditionalExpression()) {
                const e187 = evaluateCached(n86.get("test"), i49);
                if (!i49.confident) return;
                return evaluateCached(e187 ? n86.get("consequent") : n86.get("alternate"), i49);
            }
            if (n86.isExpressionWrapper()) return evaluateCached(n86.get("expression"), i49);
            if (n86.isMemberExpression() && !n86.parentPath.isCallExpression({
                callee: n86.node
            })) {
                const e188 = n86.get("property");
                const t131 = n86.get("object");
                if (t131.isLiteral() && e188.isIdentifier()) {
                    const n87 = t131.node.value;
                    const i50 = typeof n87;
                    if ("number" === i50 || "string" === i50) return n87[e188.node.name];
                }
            }
            if (n86.isReferencedIdentifier()) {
                const e189 = n86.scope.getBinding(n86.node.name);
                if (e189 && e189.constantViolations.length > 0) return deopt(e189.path, i49);
                if (e189 && n86.node.start < e189.path.node.end) return deopt(e189.path, i49);
                if (null != e189 && e189.hasValue) return e189.value;
                {
                    if ("undefined" === n86.node.name) return e189 ? deopt(e189.path, i49) : void 0;
                    if ("Infinity" === n86.node.name) return e189 ? deopt(e189.path, i49) : Infinity;
                    if ("NaN" === n86.node.name) return e189 ? deopt(e189.path, i49) : NaN;
                    const t132 = n86.resolve();
                    return t132 === n86 ? deopt(n86, i49) : evaluateCached(t132, i49);
                }
            }
            if (n86.isUnaryExpression({
                prefix: true
            })) {
                if ("void" === n86.node.operator) return;
                const e190 = n86.get("argument");
                if ("typeof" === n86.node.operator && (e190.isFunction() || e190.isClass())) return "function";
                const t133 = evaluateCached(e190, i49);
                if (!i49.confident) return;
                switch(n86.node.operator){
                    case "!":
                        return !t133;
                    case "+":
                        return +t133;
                    case "-":
                        return -t133;
                    case "~":
                        return ~t133;
                    case "typeof":
                        return typeof t133;
                }
            }
            if (n86.isArrayExpression()) {
                const e191 = [];
                const t134 = n86.get("elements");
                for (const n88 of t134){
                    const t135 = n88.evaluate();
                    if (!t135.confident) return deopt(t135.deopt, i49);
                    e191.push(t135.value);
                }
                return e191;
            }
            if (n86.isObjectExpression()) {
                const e192 = {};
                const t136 = n86.get("properties");
                for (const n89 of t136){
                    if (n89.isObjectMethod() || n89.isSpreadElement()) return deopt(n89, i49);
                    const t137 = n89.get("key");
                    let r34 = t137;
                    if (n89.node.computed) {
                        r34 = r34.evaluate();
                        if (!r34.confident) return deopt(r34.deopt, i49);
                        r34 = r34.value;
                    } else r34 = r34.isIdentifier() ? r34.node.name : r34.node.value;
                    const s2010 = n89.get("value");
                    let o152 = s2010.evaluate();
                    if (!o152.confident) return deopt(o152.deopt, i49);
                    o152 = o152.value;
                    e192[r34] = o152;
                }
                return e192;
            }
            if (n86.isLogicalExpression()) {
                const e193 = i49.confident;
                const t138 = evaluateCached(n86.get("left"), i49);
                const r35 = i49.confident;
                i49.confident = e193;
                const s21 = evaluateCached(n86.get("right"), i49);
                const o162 = i49.confident;
                switch(n86.node.operator){
                    case "||":
                        i49.confident = r35 && (!!t138 || o162);
                        if (!i49.confident) return;
                        return t138 || s21;
                    case "&&":
                        i49.confident = r35 && (!t138 || o162);
                        if (!i49.confident) return;
                        return t138 && s21;
                }
            }
            if (n86.isBinaryExpression()) {
                const e194 = evaluateCached(n86.get("left"), i49);
                if (!i49.confident) return;
                const t139 = evaluateCached(n86.get("right"), i49);
                if (!i49.confident) return;
                switch(n86.node.operator){
                    case "-":
                        return e194 - t139;
                    case "+":
                        return e194 + t139;
                    case "/":
                        return e194 / t139;
                    case "*":
                        return e194 * t139;
                    case "%":
                        return e194 % t139;
                    case "**":
                        return Math.pow(e194, t139);
                    case "<":
                        return e194 < t139;
                    case ">":
                        return e194 > t139;
                    case "<=":
                        return e194 <= t139;
                    case ">=":
                        return e194 >= t139;
                    case "==":
                        return e194 == t139;
                    case "!=":
                        return e194 != t139;
                    case "===":
                        return e194 === t139;
                    case "!==":
                        return e194 !== t139;
                    case "|":
                        return e194 | t139;
                    case "&":
                        return e194 & t139;
                    case "^":
                        return e194 ^ t139;
                    case "<<":
                        return e194 << t139;
                    case ">>":
                        return e194 >> t139;
                    case ">>>":
                        return e194 >>> t139;
                }
            }
            if (n86.isCallExpression()) {
                const r36 = n86.get("callee");
                let s22;
                let o172;
                r36.isIdentifier() && !n86.scope.getBinding(r36.node.name) && e181.indexOf(r36.node.name) >= 0 && (o172 = X5[r36.node.name]);
                if (r36.isMemberExpression()) {
                    const n90 = r36.get("object");
                    const i51 = r36.get("property");
                    if (n90.isIdentifier() && i51.isIdentifier() && e181.indexOf(n90.node.name) >= 0 && t127.indexOf(i51.node.name) < 0) {
                        s22 = X5[n90.node.name];
                        o172 = s22[i51.node.name];
                    }
                    if (n90.isLiteral() && i51.isIdentifier()) {
                        const e195 = typeof n90.node.value;
                        if ("string" === e195 || "number" === e195) {
                            s22 = n90.node.value;
                            o172 = s22[i51.node.name];
                        }
                    }
                }
                if (o172) {
                    const e196 = n86.get("arguments").map((e200)=>evaluateCached(e200, i49)
                    );
                    if (!i49.confident) return;
                    return o172.apply(s22, e196);
                }
            }
            deopt(n86, i49);
        }
    }
    function evaluateQuasis(e202, t140, n91, i52 = false) {
        let r37 = "";
        let s23 = 0;
        const o182 = e202.get("expressions");
        for (const e201 of t140){
            if (!n91.confident) break;
            r37 += i52 ? e201.value.raw : e201.value.cooked;
            const t141 = o182[s23++];
            t141 && (r37 += String(evaluateCached(t141, n91)));
        }
        if (n91.confident) return r37;
    }
    function evaluate1() {
        const e203 = {
            confident: true,
            deoptPath: null,
            seen: new Map
        };
        let t142 = evaluateCached(this, e203);
        e203.confident || (t142 = void 0);
        return {
            confident: e203.confident,
            deopt: e203.deoptPath,
            value: t142
        };
    }
    return H5;
}
var J5 = "default" in mod3 ? mod3.default : mod3;
var Q5 = "default" in mod19 ? mod19.default : mod19;
var G5 = "default" in mod21 ? mod21.default : mod21;
var z6 = {}, Z5 = false;
function dew$d2() {
    if (Z5) return z6;
    Z5 = true;
    Object.defineProperty(z6, "__esModule", {
        value: true
    });
    z6.arrowFunctionToExpression = arrowFunctionToExpression;
    z6.arrowFunctionToShadowed = arrowFunctionToShadowed;
    z6.ensureBlock = ensureBlock;
    z6.toComputedKey = toComputedKey;
    z6.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
    var e204 = J5;
    var t143 = Q5;
    var n92 = G5;
    var i53 = dew$o1();
    const { arrowFunctionExpression: r38 , assignmentExpression: s24 , binaryExpression: o192 , blockStatement: a1210 , callExpression: c124 , conditionalExpression: u91 , expressionStatement: l82 , identifier: h63 , isIdentifier: d52 , jsxIdentifier: p62 , logicalExpression: f71 , LOGICAL_OPERATORS: g61 , memberExpression: y71 , metaProperty: m71 , numericLiteral: v62 , objectExpression: b61 , restElement: x61 , returnStatement: P51 , sequenceExpression: E51 , spreadElement: S51 , stringLiteral: w41 , super: k41 , thisExpression: C41 , toExpression: A24 , unaryExpression: B31  } = e204;
    function toComputedKey() {
        let e205;
        if (this.isMemberExpression()) e205 = this.node.property;
        else {
            if (!this.isProperty() && !this.isMethod()) throw new ReferenceError("todo");
            e205 = this.node.key;
        }
        this.node.computed || d52(e205) && (e205 = w41(e205.name));
        return e205;
    }
    function ensureBlock() {
        const e206 = this.get("body");
        const t144 = e206.node;
        if (Array.isArray(e206)) throw new Error("Can't convert array path to a block statement");
        if (!t144) throw new Error("Can't convert node without a body");
        if (e206.isBlockStatement()) return t144;
        const n93 = [];
        let i54 = "body";
        let r39;
        let s25;
        if (e206.isStatement()) {
            s25 = "body";
            r39 = 0;
            n93.push(e206.node);
        } else {
            i54 += ".body.0";
            if (this.isFunction()) {
                r39 = "argument";
                n93.push(P51(e206.node));
            } else {
                r39 = "expression";
                n93.push(l82(e206.node));
            }
        }
        this.node.body = a1210(n93);
        const o202 = this.get(i54);
        e206.setup(o202, s25 ? o202.node[s25] : o202.node, s25, r39);
        return this.node;
    }
    function arrowFunctionToShadowed() {
        this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
    }
    function unwrapFunctionEnvironment() {
        if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
        hoistFunctionEnvironment(this);
    }
    function arrowFunctionToExpression({ allowInsertArrow: e207 = true , specCompliant: t145 = false , noNewArrows: i55 = !t145  } = {}) {
        if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
        const { thisBinding: r40 , fnPath: s26  } = hoistFunctionEnvironment(this, i55, e207);
        s26.ensureBlock();
        s26.node.type = "FunctionExpression";
        if (!i55) {
            const e208 = r40 ? null : s26.scope.generateUidIdentifier("arrowCheckId");
            e208 && s26.parentPath.scope.push({
                id: e208,
                init: b61([])
            });
            s26.get("body").unshiftContainer("body", l82(c124(this.hub.addHelper("newArrowCheck"), [
                C41(),
                h63(e208 ? e208.name : r40)
            ])));
            s26.replaceWith(c124(y71((0, n92.default)(this, true) || s26.node, h63("bind")), [
                e208 ? h63(e208.name) : C41()
            ]));
        }
    }
    const _31 = (0, i53.merge)([
        {
            CallExpression (e209, { allSuperCalls: t146  }) {
                e209.get("callee").isSuper() && t146.push(e209);
            }
        },
        t143.default
    ]);
    function hoistFunctionEnvironment(e210, t147 = true, n94 = true) {
        let i56;
        let s27 = e210.findParent((e211)=>{
            if (e211.isArrowFunctionExpression()) {
                var t148;
                null != (t148 = i56) ? t148 : i56 = e211;
                return false;
            }
            return e211.isFunction() || e211.isProgram() || e211.isClassProperty({
                static: false
            }) || e211.isClassPrivateProperty({
                static: false
            });
        });
        const a133 = s27.isClassMethod({
            kind: "constructor"
        });
        if (s27.isClassProperty() || s27.isClassPrivateProperty()) if (i56) s27 = i56;
        else {
            if (!n94) throw e210.buildCodeFrameError("Unable to transform arrow inside class property");
            e210.replaceWith(c124(r38([], A24(e210.node)), []));
            s27 = e210.get("callee");
            e210 = s27.get("body");
        }
        const { thisPaths: l92 , argumentsPaths: d61 , newTargetPaths: f81 , superProps: g71 , superCalls: v71  } = getScopeInformation(e210);
        if (a133 && v71.length > 0) {
            if (!n94) throw v71[0].buildCodeFrameError("Unable to handle nested super() usage in arrow");
            const e212 = [];
            s27.traverse(_31, {
                allSuperCalls: e212
            });
            const t149 = getSuperBinding(s27);
            e212.forEach((e213)=>{
                const n95 = h63(t149);
                n95.loc = e213.node.callee.loc;
                e213.get("callee").replaceWith(n95);
            });
        }
        if (d61.length > 0) {
            const e214 = getBinding(s27, "arguments", ()=>{
                const args = ()=>h63("arguments")
                ;
                return s27.scope.path.isProgram() ? u91(o192("===", B31("typeof", args()), w41("undefined")), s27.scope.buildUndefinedNode(), args()) : args();
            });
            d61.forEach((t150)=>{
                const n96 = h63(e214);
                n96.loc = t150.node.loc;
                t150.replaceWith(n96);
            });
        }
        if (f81.length > 0) {
            const e215 = getBinding(s27, "newtarget", ()=>m71(h63("new"), h63("target"))
            );
            f81.forEach((t151)=>{
                const n97 = h63(e215);
                n97.loc = t151.node.loc;
                t151.replaceWith(n97);
            });
        }
        if (g71.length > 0) {
            if (!n94) throw g71[0].buildCodeFrameError("Unable to handle nested super.prop usage");
            const e216 = g71.reduce((e218, t152)=>e218.concat(standardizeSuperProperty(t152))
            , []);
            e216.forEach((e219)=>{
                const t153 = e219.node.computed ? "" : e219.get("property").node.name;
                const n98 = e219.parentPath.isAssignmentExpression({
                    left: e219.node
                });
                const i57 = e219.parentPath.isCallExpression({
                    callee: e219.node
                });
                const r41 = getSuperPropBinding(s27, n98, t153);
                const o2110 = [];
                e219.node.computed && o2110.push(e219.get("property").node);
                if (n98) {
                    const t154 = e219.parentPath.node.right;
                    o2110.push(t154);
                }
                const a143 = c124(h63(r41), o2110);
                if (i57) {
                    e219.parentPath.unshiftContainer("arguments", C41());
                    e219.replaceWith(y71(a143, h63("call")));
                    l92.push(e219.parentPath.get("arguments.0"));
                } else n98 ? e219.parentPath.replaceWith(a143) : e219.replaceWith(a143);
            });
        }
        let b71;
        if (l92.length > 0 || !t147) {
            b71 = getThisBinding(s27, a133);
            if (t147 || a133 && hasSuperClass(s27)) {
                l92.forEach((e220)=>{
                    const t155 = e220.isJSX() ? p62(b71) : h63(b71);
                    t155.loc = e220.node.loc;
                    e220.replaceWith(t155);
                });
                t147 || (b71 = null);
            }
        }
        return {
            thisBinding: b71,
            fnPath: e210
        };
    }
    function isLogicalOp(e221) {
        return g61.includes(e221);
    }
    function standardizeSuperProperty(e222) {
        if (e222.parentPath.isAssignmentExpression() && "=" !== e222.parentPath.node.operator) {
            const t156 = e222.parentPath;
            const n99 = t156.node.operator.slice(0, -1);
            const i58 = t156.node.right;
            const r42 = isLogicalOp(n99);
            if (e222.node.computed) {
                const o228 = e222.scope.generateDeclaredUidIdentifier("tmp");
                const a153 = e222.node.object;
                const c132 = e222.node.property;
                t156.get("left").replaceWith(y71(a153, s24("=", o228, c132), true));
                t156.get("right").replaceWith(rightExpression(r42 ? "=" : n99, y71(a153, h63(o228.name), true), i58));
            } else {
                const s28 = e222.node.object;
                const o231 = e222.node.property;
                t156.get("left").replaceWith(y71(s28, o231));
                t156.get("right").replaceWith(rightExpression(r42 ? "=" : n99, y71(s28, h63(o231.name)), i58));
            }
            r42 ? t156.replaceWith(f71(n99, t156.node.left, t156.node.right)) : t156.node.operator = "=";
            return [
                t156.get("left"),
                t156.get("right").get("left")
            ];
        }
        if (e222.parentPath.isUpdateExpression()) {
            const t157 = e222.parentPath;
            const n100 = e222.scope.generateDeclaredUidIdentifier("tmp");
            const i59 = e222.node.computed ? e222.scope.generateDeclaredUidIdentifier("prop") : null;
            const r43 = [
                s24("=", n100, y71(e222.node.object, i59 ? s24("=", i59, e222.node.property) : e222.node.property, e222.node.computed)),
                s24("=", y71(e222.node.object, i59 ? h63(i59.name) : e222.node.property, e222.node.computed), o192(e222.parentPath.node.operator[0], h63(n100.name), v62(1)))
            ];
            e222.parentPath.node.prefix || r43.push(h63(n100.name));
            t157.replaceWith(E51(r43));
            const a162 = t157.get("expressions.0.right");
            const c142 = t157.get("expressions.1.left");
            return [
                a162,
                c142
            ];
        }
        return [
            e222
        ];
        function rightExpression(e223, t158, n101) {
            return "=" === e223 ? s24("=", t158, n101) : o192(e223, t158, n101);
        }
    }
    function hasSuperClass(e224) {
        return e224.isClassMethod() && !!e224.parentPath.parentPath.node.superClass;
    }
    const O31 = (0, i53.merge)([
        {
            CallExpression (e225, { supers: t159 , thisBinding: n102  }) {
                if (e225.get("callee").isSuper() && !t159.has(e225.node)) {
                    t159.add(e225.node);
                    e225.replaceWithMultiple([
                        e225.node,
                        s24("=", h63(n102), h63("this"))
                    ]);
                }
            }
        },
        t143.default
    ]);
    function getThisBinding(e226, t160) {
        return getBinding(e226, "this", (n103)=>{
            if (!t160 || !hasSuperClass(e226)) return C41();
            e226.traverse(O31, {
                supers: new WeakSet,
                thisBinding: n103
            });
        });
    }
    function getSuperBinding(e227) {
        return getBinding(e227, "supercall", ()=>{
            const t161 = e227.scope.generateUidIdentifier("args");
            return r38([
                x61(t161)
            ], c124(k41(), [
                S51(h63(t161.name))
            ]));
        });
    }
    function getSuperPropBinding(e228, t162, n104) {
        const i60 = t162 ? "set" : "get";
        return getBinding(e228, `superprop_${i60}:${n104 || ""}`, ()=>{
            const i61 = [];
            let o241;
            if (n104) o241 = y71(k41(), h63(n104));
            else {
                const t163 = e228.scope.generateUidIdentifier("prop");
                i61.unshift(t163);
                o241 = y71(k41(), h63(t163.name), true);
            }
            if (t162) {
                const t164 = e228.scope.generateUidIdentifier("value");
                i61.push(t164);
                o241 = s24("=", o241, h63(t164.name));
            }
            return r38(i61, o241);
        });
    }
    function getBinding(e229, t165, n105) {
        const i62 = "binding:" + t165;
        let r44 = e229.getData(i62);
        if (!r44) {
            const s29 = e229.scope.generateUidIdentifier(t165);
            r44 = s29.name;
            e229.setData(i62, r44);
            e229.scope.push({
                id: s29,
                init: n105(r44)
            });
        }
        return r44;
    }
    const T31 = (0, i53.merge)([
        {
            ThisExpression (e230, { thisPaths: t166  }) {
                t166.push(e230);
            },
            JSXIdentifier (e231, { thisPaths: t167  }) {
                "this" === e231.node.name && (e231.parentPath.isJSXMemberExpression({
                    object: e231.node
                }) || e231.parentPath.isJSXOpeningElement({
                    name: e231.node
                })) && t167.push(e231);
            },
            CallExpression (e232, { superCalls: t168  }) {
                e232.get("callee").isSuper() && t168.push(e232);
            },
            MemberExpression (e233, { superProps: t169  }) {
                e233.get("object").isSuper() && t169.push(e233);
            },
            Identifier (e234, { argumentsPaths: t170  }) {
                if (!e234.isReferencedIdentifier({
                    name: "arguments"
                })) return;
                let n106 = e234.scope;
                do {
                    if (n106.hasOwnBinding("arguments")) {
                        n106.rename("arguments");
                        return;
                    }
                    if (n106.path.isFunction() && !n106.path.isArrowFunctionExpression()) break;
                }while (n106 = n106.parent)
                t170.push(e234);
            },
            MetaProperty (e235, { newTargetPaths: t171  }) {
                e235.get("meta").isIdentifier({
                    name: "new"
                }) && e235.get("property").isIdentifier({
                    name: "target"
                }) && t171.push(e235);
            }
        },
        t143.default
    ]);
    function getScopeInformation(e236) {
        const t172 = [];
        const n107 = [];
        const i63 = [];
        const r45 = [];
        const s30 = [];
        e236.traverse(T31, {
            thisPaths: t172,
            argumentsPaths: n107,
            newTargetPaths: i63,
            superProps: r45,
            superCalls: s30
        });
        return {
            thisPaths: t172,
            argumentsPaths: n107,
            newTargetPaths: i63,
            superProps: r45,
            superCalls: s30
        };
    }
    return z6;
}
var ee5 = "default" in mod3 ? mod3.default : mod3;
var te5 = {}, ne6 = false;
function dew$c2() {
    if (ne6) return te5;
    ne6 = true;
    Object.defineProperty(te5, "__esModule", {
        value: true
    });
    te5._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
    te5._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
    te5._resolve = _resolve;
    te5.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
    te5.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
    te5.equals = equals;
    te5.getSource = getSource;
    te5.has = has1;
    te5.is = void 0;
    te5.isCompletionRecord = isCompletionRecord;
    te5.isConstantExpression = isConstantExpression;
    te5.isInStrictMode = isInStrictMode;
    te5.isNodeType = isNodeType;
    te5.isStatementOrBlock = isStatementOrBlock;
    te5.isStatic = isStatic;
    te5.isnt = isnt;
    te5.matchesPattern = matchesPattern;
    te5.referencesImport = referencesImport;
    te5.resolve = resolve1;
    te5.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
    var e237 = ee5;
    const { STATEMENT_OR_BLOCK_KEYS: t173 , VISITOR_KEYS: n108 , isBlockStatement: i64 , isExpression: r46 , isIdentifier: s31 , isLiteral: o25 , isStringLiteral: a171 , isType: c152 , matchesPattern: u101  } = e237;
    function matchesPattern(e238, t174) {
        return u101(this.node, e238, t174);
    }
    function has1(e239) {
        const t175 = this.node && this.node[e239];
        return t175 && Array.isArray(t175) ? !!t175.length : !!t175;
    }
    function isStatic() {
        return this.scope.isStatic(this.node);
    }
    const l102 = has1;
    te5.is = l102;
    function isnt(e240) {
        return !this.has(e240);
    }
    function equals(e241, t176) {
        return this.node[e241] === t176;
    }
    function isNodeType(e242) {
        return c152(this.type, e242);
    }
    function canHaveVariableDeclarationOrExpression() {
        return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
    }
    function canSwapBetweenExpressionAndStatement(e243) {
        return !("body" !== this.key || !this.parentPath.isArrowFunctionExpression()) && (this.isExpression() ? i64(e243) : !!this.isBlockStatement() && r46(e243));
    }
    function isCompletionRecord(e244) {
        let t177 = this;
        let n109 = true;
        do {
            const i65 = t177.container;
            if (t177.isFunction() && !n109) return !!e244;
            n109 = false;
            if (Array.isArray(i65) && t177.key !== i65.length - 1) return false;
        }while ((t177 = t177.parentPath) && !t177.isProgram())
        return true;
    }
    function isStatementOrBlock() {
        return !this.parentPath.isLabeledStatement() && !i64(this.container) && t173.includes(this.key);
    }
    function referencesImport(e245, t178) {
        if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === t178 || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? a171(this.node.property, {
                value: t178
            }) : this.node.property.name === t178)) {
                const t179 = this.get("object");
                return t179.isReferencedIdentifier() && t179.referencesImport(e245, "*");
            }
            return false;
        }
        const n110 = this.scope.getBinding(this.node.name);
        if (!n110 || "module" !== n110.kind) return false;
        const i66 = n110.path;
        const r47 = i66.parentPath;
        return !!r47.isImportDeclaration() && r47.node.source.value === e245 && (!t178 || !(!i66.isImportDefaultSpecifier() || "default" !== t178) || !(!i66.isImportNamespaceSpecifier() || "*" !== t178) || !(!i66.isImportSpecifier() || !s31(i66.node.imported, {
            name: t178
        })));
    }
    function getSource() {
        const e246 = this.node;
        if (e246.end) {
            const t180 = this.hub.getCode();
            if (t180) return t180.slice(e246.start, e246.end);
        }
        return "";
    }
    function willIMaybeExecuteBefore(e247) {
        return "after" !== this._guessExecutionStatusRelativeTo(e247);
    }
    function getOuterFunction(e248) {
        return (e248.scope.getFunctionParent() || e248.scope.getProgramParent()).path;
    }
    function isExecutionUncertain(e249, t181) {
        switch(e249){
            case "LogicalExpression":
                return "right" === t181;
            case "ConditionalExpression":
            case "IfStatement":
                return "consequent" === t181 || "alternate" === t181;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
                return "body" === t181;
            case "ForStatement":
                return "body" === t181 || "update" === t181;
            case "SwitchStatement":
                return "cases" === t181;
            case "TryStatement":
                return "handler" === t181;
            case "AssignmentPattern":
                return "right" === t181;
            case "OptionalMemberExpression":
                return "property" === t181;
            case "OptionalCallExpression":
                return "arguments" === t181;
            default:
                return false;
        }
    }
    function isExecutionUncertainInList(e250, t182) {
        for(let n111 = 0; n111 < t182; n111++){
            const t183 = e250[n111];
            if (isExecutionUncertain(t183.parent.type, t183.parentKey)) return true;
        }
        return false;
    }
    function _guessExecutionStatusRelativeTo(e251) {
        const t184 = {
            this: getOuterFunction(this),
            target: getOuterFunction(e251)
        };
        if (t184.target.node !== t184.this.node) return this._guessExecutionStatusRelativeToDifferentFunctions(t184.target);
        const i67 = {
            target: e251.getAncestry(),
            this: this.getAncestry()
        };
        if (i67.target.indexOf(this) >= 0) return "after";
        if (i67.this.indexOf(e251) >= 0) return "before";
        let r48;
        const s32 = {
            target: 0,
            this: 0
        };
        while(!r48 && s32.this < i67.this.length){
            const e252 = i67.this[s32.this];
            s32.target = i67.target.indexOf(e252);
            s32.target >= 0 ? r48 = e252 : s32.this++;
        }
        if (!r48) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
        if (isExecutionUncertainInList(i67.this, s32.this - 1) || isExecutionUncertainInList(i67.target, s32.target - 1)) return "unknown";
        const o26 = {
            this: i67.this[s32.this - 1],
            target: i67.target[s32.target - 1]
        };
        if (o26.target.listKey && o26.this.listKey && o26.target.container === o26.this.container) return o26.target.key > o26.this.key ? "before" : "after";
        const a181 = n108[r48.type];
        const c162 = {
            this: a181.indexOf(o26.this.parentKey),
            target: a181.indexOf(o26.target.parentKey)
        };
        return c162.target > c162.this ? "before" : "after";
    }
    const h73 = new WeakSet;
    function _guessExecutionStatusRelativeToDifferentFunctions(e253) {
        if (!e253.isFunctionDeclaration() || e253.parentPath.isExportDeclaration()) return "unknown";
        const t186 = e253.scope.getBinding(e253.node.id.name);
        if (!t186.references) return "before";
        const n112 = t186.referencePaths;
        let i68;
        for (const t185 of n112){
            const n113 = !!t185.find((t187)=>t187.node === e253.node
            );
            if (n113) continue;
            if ("callee" !== t185.key || !t185.parentPath.isCallExpression()) return "unknown";
            if (h73.has(t185.node)) continue;
            h73.add(t185.node);
            const r49 = this._guessExecutionStatusRelativeTo(t185);
            h73.delete(t185.node);
            if (i68 && i68 !== r49) return "unknown";
            i68 = r49;
        }
        return i68;
    }
    function resolve1(e254, t188) {
        return this._resolve(e254, t188) || this;
    }
    function _resolve(e255, t189) {
        if (!(t189 && t189.indexOf(this) >= 0)) {
            t189 = t189 || [];
            t189.push(this);
            if (this.isVariableDeclarator()) {
                if (this.get("id").isIdentifier()) return this.get("init").resolve(e255, t189);
            } else if (this.isReferencedIdentifier()) {
                const n114 = this.scope.getBinding(this.node.name);
                if (!n114) return;
                if (!n114.constant) return;
                if ("module" === n114.kind) return;
                if (n114.path !== this) {
                    const i69 = n114.path.resolve(e255, t189);
                    if (this.find((e256)=>e256.node === i69.node
                    )) return;
                    return i69;
                }
            } else {
                if (this.isTypeCastExpression()) return this.get("expression").resolve(e255, t189);
                if (e255 && this.isMemberExpression()) {
                    const n115 = this.toComputedKey();
                    if (!o25(n115)) return;
                    const i70 = n115.value;
                    const r50 = this.get("object").resolve(e255, t189);
                    if (r50.isObjectExpression()) {
                        const n116 = r50.get("properties");
                        for (const r51 of n116){
                            if (!r51.isProperty()) continue;
                            const n117 = r51.get("key");
                            let s33 = r51.isnt("computed") && n117.isIdentifier({
                                name: i70
                            });
                            s33 = s33 || n117.isLiteral({
                                value: i70
                            });
                            if (s33) return r51.get("value").resolve(e255, t189);
                        }
                    } else if (r50.isArrayExpression() && !isNaN(+i70)) {
                        const n118 = r50.get("elements");
                        const s34 = n118[i70];
                        if (s34) return s34.resolve(e255, t189);
                    }
                }
            }
        }
    }
    function isConstantExpression() {
        if (this.isIdentifier()) {
            const e257 = this.scope.getBinding(this.node.name);
            return !!e257 && e257.constant;
        }
        return this.isLiteral() ? !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((e258)=>e258.isConstantExpression()
        )) : this.isUnaryExpression() ? "void" === this.node.operator && this.get("argument").isConstantExpression() : !!this.isBinaryExpression() && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
    }
    function isInStrictMode() {
        const e259 = this.isProgram() ? this : this.parentPath;
        const t190 = e259.find((e261)=>{
            if (e261.isProgram({
                sourceType: "module"
            })) return true;
            if (e261.isClass()) return true;
            if (!e261.isProgram() && !e261.isFunction()) return false;
            if (e261.isArrowFunctionExpression() && !e261.get("body").isBlockStatement()) return false;
            const t191 = e261.isFunction() ? e261.node.body : e261.node;
            for (const e260 of t191.directives)if ("use strict" === e260.value.value) return true;
        });
        return !!t190;
    }
    return te5;
}
var ie6 = {}, re6 = false;
function dew$b2() {
    if (re6) return ie6;
    re6 = true;
    Object.defineProperty(ie6, "__esModule", {
        value: true
    });
    ie6._call = _call;
    ie6._getQueueContexts = _getQueueContexts;
    ie6._resyncKey = _resyncKey;
    ie6._resyncList = _resyncList;
    ie6._resyncParent = _resyncParent;
    ie6._resyncRemoved = _resyncRemoved;
    ie6.call = call;
    ie6.isBlacklisted = ie6.isDenylisted = isDenylisted;
    ie6.popContext = popContext;
    ie6.pushContext = pushContext;
    ie6.requeue = requeue;
    ie6.resync = resync;
    ie6.setContext = setContext;
    ie6.setKey = setKey;
    ie6.setScope = setScope;
    ie6.setup = setup1;
    ie6.skip = skip;
    ie6.skipKey = skipKey;
    ie6.stop = stop;
    ie6.visit = visit1;
    var e262 = dew$23();
    var t192 = dew$42();
    function call(e263) {
        const t193 = this.opts;
        this.debug(e263);
        return !(!this.node || !this._call(t193[e263])) || !!this.node && this._call(t193[this.node.type] && t193[this.node.type][e263]);
    }
    function _call(e264) {
        if (!e264) return false;
        for (const t194 of e264){
            if (!t194) continue;
            const e265 = this.node;
            if (!e265) return true;
            const n119 = t194.call(this.state, this, this.state);
            if (n119 && "object" === typeof n119 && "function" === typeof n119.then) throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (n119) throw new Error(`Unexpected return value from visitor method ${t194}`);
            if (this.node !== e265) return true;
            if (this._traverseFlags > 0) return true;
        }
        return false;
    }
    function isDenylisted() {
        var e266;
        const t195 = null != (e266 = this.opts.denylist) ? e266 : this.opts.blacklist;
        return t195 && t195.indexOf(this.node.type) > -1;
    }
    function restoreContext(e267, t196) {
        if (e267.context !== t196) {
            e267.context = t196;
            e267.state = t196.state;
            e267.opts = t196.opts;
        }
    }
    function visit1() {
        if (!this.node) return false;
        if (this.isDenylisted()) return false;
        if (this.opts.shouldSkip && this.opts.shouldSkip(this)) return false;
        const t197 = this.context;
        if (this.shouldSkip || this.call("enter")) {
            this.debug("Skip...");
            return this.shouldStop;
        }
        restoreContext(this, t197);
        this.debug("Recursing into...");
        this.shouldStop = (0, e262.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
        restoreContext(this, t197);
        this.call("exit");
        return this.shouldStop;
    }
    function skip() {
        this.shouldSkip = true;
    }
    function skipKey(e268) {
        null == this.skipKeys && (this.skipKeys = {});
        this.skipKeys[e268] = true;
    }
    function stop() {
        this._traverseFlags |= t192.SHOULD_SKIP | t192.SHOULD_STOP;
    }
    function setScope() {
        if (this.opts && this.opts.noScope) return;
        let e269 = this.parentPath;
        "key" === this.key && e269.isMethod() && (e269 = e269.parentPath);
        let t198;
        while(e269 && !t198){
            if (e269.opts && e269.opts.noScope) return;
            t198 = e269.scope;
            e269 = e269.parentPath;
        }
        this.scope = this.getScope(t198);
        this.scope && this.scope.init();
    }
    function setContext(e270) {
        null != this.skipKeys && (this.skipKeys = {});
        this._traverseFlags = 0;
        if (e270) {
            this.context = e270;
            this.state = e270.state;
            this.opts = e270.opts;
        }
        this.setScope();
        return this;
    }
    function resync() {
        if (!this.removed) {
            this._resyncParent();
            this._resyncList();
            this._resyncKey();
        }
    }
    function _resyncParent() {
        this.parentPath && (this.parent = this.parentPath.node);
    }
    function _resyncKey() {
        if (this.container && this.node !== this.container[this.key]) {
            if (Array.isArray(this.container)) {
                for(let e271 = 0; e271 < this.container.length; e271++)if (this.container[e271] === this.node) return this.setKey(e271);
            } else for (const e272 of Object.keys(this.container))if (this.container[e272] === this.node) return this.setKey(e272);
            this.key = null;
        }
    }
    function _resyncList() {
        if (!this.parent || !this.inList) return;
        const e273 = this.parent[this.listKey];
        this.container !== e273 && (this.container = e273 || null);
    }
    function _resyncRemoved() {
        null != this.key && this.container && this.container[this.key] === this.node || this._markRemoved();
    }
    function popContext() {
        this.contexts.pop();
        this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
    }
    function pushContext(e274) {
        this.contexts.push(e274);
        this.setContext(e274);
    }
    function setup1(e275, t199, n120, i71) {
        this.listKey = n120;
        this.container = t199;
        this.parentPath = e275 || this.parentPath;
        this.setKey(i71);
    }
    function setKey(e276) {
        var t200;
        this.key = e276;
        this.node = this.container[this.key];
        this.type = null == (t200 = this.node) ? void 0 : t200.type;
    }
    function requeue(e277 = this) {
        if (e277.removed) return;
        const t201 = this.contexts;
        for (const n121 of t201)n121.maybeQueue(e277);
    }
    function _getQueueContexts() {
        let e278 = this;
        let t202 = this.contexts;
        while(!t202.length){
            e278 = e278.parentPath;
            if (!e278) break;
            t202 = e278.contexts;
        }
        return t202;
    }
    return ie6;
}
var se5 = {}, oe6 = false;
function dew$a2() {
    if (oe6) return se5;
    oe6 = true;
    Object.defineProperty(se5, "__esModule", {
        value: true
    });
    se5.hooks = void 0;
    const e279 = [
        function(e280, t203) {
            const n122 = "test" === e280.key && (t203.isWhile() || t203.isSwitchCase()) || "declaration" === e280.key && t203.isExportDeclaration() || "body" === e280.key && t203.isLabeledStatement() || "declarations" === e280.listKey && t203.isVariableDeclaration() && 1 === t203.node.declarations.length || "expression" === e280.key && t203.isExpressionStatement();
            if (n122) {
                t203.remove();
                return true;
            }
        },
        function(e, t204) {
            if (t204.isSequenceExpression() && 1 === t204.node.expressions.length) {
                t204.replaceWith(t204.node.expressions[0]);
                return true;
            }
        },
        function(e281, t205) {
            if (t205.isBinary()) {
                "left" === e281.key ? t205.replaceWith(t205.node.right) : t205.replaceWith(t205.node.left);
                return true;
            }
        },
        function(e282, t206) {
            if (t206.isIfStatement() && ("consequent" === e282.key || "alternate" === e282.key) || "body" === e282.key && (t206.isLoop() || t206.isArrowFunctionExpression())) {
                e282.replaceWith({
                    type: "BlockStatement",
                    body: []
                });
                return true;
            }
        }
    ];
    se5.hooks = e279;
    return se5;
}
var ae6 = {}, ce4 = false;
function dew$92() {
    if (ce4) return ae6;
    ce4 = true;
    Object.defineProperty(ae6, "__esModule", {
        value: true
    });
    ae6._assertUnremoved = _assertUnremoved;
    ae6._callRemovalHooks = _callRemovalHooks;
    ae6._markRemoved = _markRemoved;
    ae6._remove = _remove;
    ae6._removeFromScope = _removeFromScope;
    ae6.remove = remove;
    var e283 = dew$a2();
    var t207 = dew$n1();
    var n123 = dew$42();
    function remove() {
        var e284;
        this._assertUnremoved();
        this.resync();
        null != (e284 = this.opts) && e284.noScope || this._removeFromScope();
        if (this._callRemovalHooks()) this._markRemoved();
        else {
            this.shareCommentsWithSiblings();
            this._remove();
            this._markRemoved();
        }
    }
    function _removeFromScope() {
        const e285 = this.getBindingIdentifiers();
        Object.keys(e285).forEach((e286)=>this.scope.removeBinding(e286)
        );
    }
    function _callRemovalHooks() {
        for (const t208 of e283.hooks)if (t208(this, this.parentPath)) return true;
    }
    function _remove() {
        if (Array.isArray(this.container)) {
            this.container.splice(this.key, 1);
            this.updateSiblingKeys(this.key, -1);
        } else this._replaceWith(null);
    }
    function _markRemoved() {
        this._traverseFlags |= n123.SHOULD_SKIP | n123.REMOVED;
        this.parent && t207.path.get(this.parent).delete(this.node);
        this.node = null;
    }
    function _assertUnremoved() {
        if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
    return ae6;
}
var ue4 = "default" in mod3 ? mod3.default : mod3;
var le4 = {}, he4 = false;
function dew$82() {
    if (he4) return le4;
    he4 = true;
    Object.defineProperty(le4, "__esModule", {
        value: true
    });
    le4.default = void 0;
    var e287 = ue4;
    var t209 = e287;
    const { react: n124  } = e287;
    const { cloneNode: i72 , jsxExpressionContainer: r52 , variableDeclaration: s35 , variableDeclarator: o27  } = t209;
    const a191 = {
        ReferencedIdentifier (e288, t210) {
            if (e288.isJSXIdentifier() && n124.isCompatTag(e288.node.name) && !e288.parentPath.isJSXMemberExpression()) return;
            if ("this" === e288.node.name) {
                let n125 = e288.scope;
                do {
                    if (n125.path.isFunction() && !n125.path.isArrowFunctionExpression()) break;
                }while (n125 = n125.parent)
                n125 && t210.breakOnScopePaths.push(n125.path);
            }
            const i73 = e288.scope.getBinding(e288.node.name);
            if (i73) {
                for (const n126 of i73.constantViolations)if (n126.scope !== i73.path.scope) {
                    t210.mutableBinding = true;
                    e288.stop();
                    return;
                }
                i73 === t210.scope.getBinding(e288.node.name) && (t210.bindings[e288.node.name] = i73);
            }
        }
    };
    class PathHoister {
        constructor(e289, t211){
            this.breakOnScopePaths = void 0;
            this.bindings = void 0;
            this.mutableBinding = void 0;
            this.scopes = void 0;
            this.scope = void 0;
            this.path = void 0;
            this.attachAfter = void 0;
            this.breakOnScopePaths = [];
            this.bindings = {};
            this.mutableBinding = false;
            this.scopes = [];
            this.scope = t211;
            this.path = e289;
            this.attachAfter = false;
        }
        isCompatibleScope(e290) {
            for (const t212 of Object.keys(this.bindings)){
                const n127 = this.bindings[t212];
                if (!e290.bindingIdentifierEquals(t212, n127.identifier)) return false;
            }
            return true;
        }
        getCompatibleScopes() {
            let e291 = this.path.scope;
            do {
                if (!this.isCompatibleScope(e291)) break;
                this.scopes.push(e291);
                if (this.breakOnScopePaths.indexOf(e291.path) >= 0) break;
            }while (e291 = e291.parent)
        }
        getAttachmentPath() {
            let e292 = this._getAttachmentPath();
            if (!e292) return;
            let t213 = e292.scope;
            t213.path === e292 && (t213 = e292.scope.parent);
            if (t213.path.isProgram() || t213.path.isFunction()) for (const n128 of Object.keys(this.bindings)){
                if (!t213.hasOwnBinding(n128)) continue;
                const i74 = this.bindings[n128];
                if ("param" === i74.kind || "params" === i74.path.parentKey) continue;
                const r53 = this.getAttachmentParentForPath(i74.path);
                if (r53.key >= e292.key) {
                    this.attachAfter = true;
                    e292 = i74.path;
                    for (const t214 of i74.constantViolations)this.getAttachmentParentForPath(t214).key > e292.key && (e292 = t214);
                }
            }
            return e292;
        }
        _getAttachmentPath() {
            const e293 = this.scopes;
            const t215 = e293.pop();
            if (t215) {
                if (t215.path.isFunction()) {
                    if (!this.hasOwnParamBindings(t215)) return this.getNextScopeAttachmentParent();
                    {
                        if (this.scope === t215) return;
                        const e294 = t215.path.get("body").get("body");
                        for(let t216 = 0; t216 < e294.length; t216++)if (!e294[t216].node._blockHoist) return e294[t216];
                    }
                } else if (t215.path.isProgram()) return this.getNextScopeAttachmentParent();
            }
        }
        getNextScopeAttachmentParent() {
            const e295 = this.scopes.pop();
            if (e295) return this.getAttachmentParentForPath(e295.path);
        }
        getAttachmentParentForPath(e296) {
            do {
                if (!e296.parentPath || Array.isArray(e296.container) && e296.isStatement()) return e296;
            }while (e296 = e296.parentPath)
        }
        hasOwnParamBindings(e297) {
            for (const t217 of Object.keys(this.bindings)){
                if (!e297.hasOwnBinding(t217)) continue;
                const n129 = this.bindings[t217];
                if ("param" === n129.kind && n129.constant) return true;
            }
            return false;
        }
        run() {
            this.path.traverse(a191, this);
            if (this.mutableBinding) return;
            this.getCompatibleScopes();
            const e298 = this.getAttachmentPath();
            if (!e298) return;
            if (e298.getFunctionParent() === this.path.getFunctionParent()) return;
            let t218 = e298.scope.generateUidIdentifier("ref");
            const n130 = o27(t218, this.path.node);
            const c171 = this.attachAfter ? "insertAfter" : "insertBefore";
            const [u119] = e298[c171]([
                e298.isVariableDeclarator() ? n130 : s35("var", [
                    n130
                ])
            ]);
            const l1111 = this.path.parentPath;
            l1111.isJSXElement() && this.path.container === l1111.node.children && (t218 = r52(t218));
            this.path.replaceWith(i72(t218));
            return e298.isVariableDeclarator() ? u119.get("init") : u119.get("declarations.0.init");
        }
    }
    le4.default = PathHoister;
    return le4;
}
var de4 = "default" in mod3 ? mod3.default : mod3;
var pe4 = {}, fe3 = false;
function dew$72() {
    if (fe3) return pe4;
    fe3 = true;
    Object.defineProperty(pe4, "__esModule", {
        value: true
    });
    pe4._containerInsert = _containerInsert;
    pe4._containerInsertAfter = _containerInsertAfter;
    pe4._containerInsertBefore = _containerInsertBefore;
    pe4._verifyNodeList = _verifyNodeList;
    pe4.hoist = hoist;
    pe4.insertAfter = insertAfter;
    pe4.insertBefore = insertBefore;
    pe4.pushContainer = pushContainer;
    pe4.unshiftContainer = unshiftContainer;
    pe4.updateSiblingKeys = updateSiblingKeys;
    var e299 = dew$n1();
    var t219 = dew$82();
    var n131 = dew$42();
    var i75 = de4;
    const { arrowFunctionExpression: r54 , assertExpression: s36 , assignmentExpression: o28 , blockStatement: a201 , callExpression: c181 , cloneNode: u12 , expressionStatement: l121 , isAssignmentExpression: h82 , isCallExpression: d71 , isExpression: p72 , isIdentifier: f91 , isSequenceExpression: g81 , isSuper: y81 , thisExpression: m81  } = i75;
    function insertBefore(e300) {
        this._assertUnremoved();
        const t220 = this._verifyNodeList(e300);
        const { parentPath: n132  } = this;
        if (n132.isExpressionStatement() || n132.isLabeledStatement() || n132.isExportNamedDeclaration() || n132.isExportDefaultDeclaration() && this.isDeclaration()) return n132.insertBefore(t220);
        if (this.isNodeType("Expression") && !this.isJSXElement() || n132.isForStatement() && "init" === this.key) {
            this.node && t220.push(this.node);
            return this.replaceExpressionWithStatements(t220);
        }
        if (Array.isArray(this.container)) return this._containerInsertBefore(t220);
        if (this.isStatementOrBlock()) {
            const e301 = this.node;
            const n133 = e301 && (!this.isExpressionStatement() || null != e301.expression);
            this.replaceWith(a201(n133 ? [
                e301
            ] : []));
            return this.unshiftContainer("body", t220);
        }
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
    function _containerInsert(e303, t221) {
        this.updateSiblingKeys(e303, t221.length);
        const n134 = [];
        this.container.splice(e303, 0, ...t221);
        for(let i77 = 0; i77 < t221.length; i77++){
            const t222 = e303 + i77;
            const r55 = this.getSibling(t222);
            n134.push(r55);
            this.context && this.context.queue && r55.pushContext(this.context);
        }
        const i76 = this._getQueueContexts();
        for (const e302 of n134){
            e302.setScope();
            e302.debug("Inserted.");
            for (const t223 of i76)t223.maybeQueue(e302, true);
        }
        return n134;
    }
    function _containerInsertBefore(e304) {
        return this._containerInsert(this.key, e304);
    }
    function _containerInsertAfter(e305) {
        return this._containerInsert(this.key + 1, e305);
    }
    const last = (e306)=>e306[e306.length - 1]
    ;
    function isHiddenInSequenceExpression(e307) {
        return g81(e307.parent) && (last(e307.parent.expressions) !== e307.node || isHiddenInSequenceExpression(e307.parentPath));
    }
    function isAlmostConstantAssignment(e308, t224) {
        if (!h82(e308) || !f91(e308.left)) return false;
        const n135 = t224.getBlockParent();
        return n135.hasOwnBinding(e308.left.name) && n135.getOwnBinding(e308.left.name).constantViolations.length <= 1;
    }
    function insertAfter(e309) {
        this._assertUnremoved();
        if (this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(e309);
        const t225 = this._verifyNodeList(e309);
        const { parentPath: n136  } = this;
        if (n136.isExpressionStatement() || n136.isLabeledStatement() || n136.isExportNamedDeclaration() || n136.isExportDefaultDeclaration() && this.isDeclaration()) return n136.insertAfter(t225.map((e310)=>p72(e310) ? l121(e310) : e310
        ));
        if (this.isNodeType("Expression") && !this.isJSXElement() && !n136.isJSXElement() || n136.isForStatement() && "init" === this.key) {
            if (this.node) {
                const e311 = this.node;
                let { scope: i78  } = this;
                if (i78.path.isPattern()) {
                    s36(e311);
                    this.replaceWith(c181(r54([], e311), []));
                    this.get("callee.body").insertAfter(t225);
                    return [
                        this
                    ];
                }
                if (isHiddenInSequenceExpression(this)) t225.unshift(e311);
                else if (d71(e311) && y81(e311.callee)) {
                    t225.unshift(e311);
                    t225.push(m81());
                } else if (isAlmostConstantAssignment(e311, i78)) {
                    t225.unshift(e311);
                    t225.push(u12(e311.left));
                } else if (i78.isPure(e311, true)) t225.push(e311);
                else {
                    n136.isMethod({
                        computed: true,
                        key: e311
                    }) && (i78 = i78.parent);
                    const r56 = i78.generateDeclaredUidIdentifier();
                    t225.unshift(l121(o28("=", u12(r56), e311)));
                    t225.push(l121(u12(r56)));
                }
            }
            return this.replaceExpressionWithStatements(t225);
        }
        if (Array.isArray(this.container)) return this._containerInsertAfter(t225);
        if (this.isStatementOrBlock()) {
            const e312 = this.node;
            const n137 = e312 && (!this.isExpressionStatement() || null != e312.expression);
            this.replaceWith(a201(n137 ? [
                e312
            ] : []));
            return this.pushContainer("body", t225);
        }
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
    function updateSiblingKeys(t226, n138) {
        if (!this.parent) return;
        const i79 = e299.path.get(this.parent);
        for (const [, e313] of i79)e313.key >= t226 && (e313.key += n138);
    }
    function _verifyNodeList(e314) {
        if (!e314) return [];
        Array.isArray(e314) || (e314 = [
            e314
        ]);
        for(let t227 = 0; t227 < e314.length; t227++){
            const i80 = e314[t227];
            let r57;
            i80 ? "object" !== typeof i80 ? r57 = "contains a non-object node" : i80.type ? i80 instanceof n131.default && (r57 = "has a NodePath when it expected a raw object") : r57 = "without a type" : r57 = "has falsy node";
            if (r57) {
                const e315 = Array.isArray(i80) ? "array" : typeof i80;
                throw new Error(`Node list ${r57} with the index of ${t227} and type of ${e315}`);
            }
        }
        return e314;
    }
    function unshiftContainer(e316, t228) {
        this._assertUnremoved();
        t228 = this._verifyNodeList(t228);
        const i81 = n131.default.get({
            parentPath: this,
            parent: this.node,
            container: this.node[e316],
            listKey: e316,
            key: 0
        }).setContext(this.context);
        return i81._containerInsertBefore(t228);
    }
    function pushContainer(e317, t229) {
        this._assertUnremoved();
        const i82 = this._verifyNodeList(t229);
        const r58 = this.node[e317];
        const s37 = n131.default.get({
            parentPath: this,
            parent: this.node,
            container: r58,
            listKey: e317,
            key: r58.length
        }).setContext(this.context);
        return s37.replaceWithMultiple(i82);
    }
    function hoist(e318 = this.scope) {
        const n139 = new t219.default(this, e318);
        return n139.run();
    }
    return pe4;
}
var ge3 = "default" in mod3 ? mod3.default : mod3;
var ye4 = {}, me3 = false;
function dew$62() {
    if (me3) return ye4;
    me3 = true;
    Object.defineProperty(ye4, "__esModule", {
        value: true
    });
    ye4._getKey = _getKey;
    ye4._getPattern = _getPattern;
    ye4.get = get2;
    ye4.getAllNextSiblings = getAllNextSiblings;
    ye4.getAllPrevSiblings = getAllPrevSiblings;
    ye4.getBindingIdentifierPaths = getBindingIdentifierPaths;
    ye4.getBindingIdentifiers = getBindingIdentifiers;
    ye4.getCompletionRecords = getCompletionRecords;
    ye4.getNextSibling = getNextSibling;
    ye4.getOpposite = getOpposite;
    ye4.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
    ye4.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
    ye4.getPrevSibling = getPrevSibling;
    ye4.getSibling = getSibling;
    var e319 = dew$42();
    var t230 = ge3;
    const { getBindingIdentifiers: n140 , getOuterBindingIdentifiers: i83 , isDeclaration: r59 , numericLiteral: s38 , unaryExpression: o29  } = t230;
    const c191 = 1;
    function NormalCompletion(e320) {
        return {
            type: 0,
            path: e320
        };
    }
    function BreakCompletion(e321) {
        return {
            type: 1,
            path: e321
        };
    }
    function getOpposite() {
        return "left" === this.key ? this.getSibling("right") : "right" === this.key ? this.getSibling("left") : null;
    }
    function addCompletionRecords(e322, t231, n141) {
        e322 && t231.push(..._getCompletionRecords(e322, n141));
        return t231;
    }
    function completionRecordForSwitch(e323, t232, n142) {
        let i84 = [];
        for(let r60 = 0; r60 < e323.length; r60++){
            const s39 = e323[r60];
            const o30 = _getCompletionRecords(s39, n142);
            const u131 = [];
            const l131 = [];
            for (const e324 of o30){
                e324.type === 0 && u131.push(e324);
                e324.type === 1 && l131.push(e324);
            }
            u131.length && (i84 = u131);
            t232.push(...l131);
        }
        t232.push(...i84);
        return t232;
    }
    function normalCompletionToBreak(e325) {
        e325.forEach((e326)=>{
            e326.type = c191;
        });
    }
    function replaceBreakStatementInBreakCompletion(e327, t233) {
        e327.forEach((e328)=>{
            e328.path.isBreakStatement({
                label: null
            }) && (t233 ? e328.path.replaceWith(o29("void", s38(0))) : e328.path.remove());
        });
    }
    function getStatementListCompletion(e329, t234) {
        const n143 = [];
        if (t234.canHaveBreak) {
            let i85 = [];
            for(let r61 = 0; r61 < e329.length; r61++){
                const s40 = e329[r61];
                const o31 = Object.assign({}, t234, {
                    inCaseClause: false
                });
                s40.isBlockStatement() && (t234.inCaseClause || t234.shouldPopulateBreak) ? o31.shouldPopulateBreak = true : o31.shouldPopulateBreak = false;
                const u141 = _getCompletionRecords(s40, o31);
                if (u141.length > 0 && u141.every((e330)=>e330.type === 1
                )) {
                    if (i85.length > 0 && u141.every((e331)=>e331.path.isBreakStatement({
                            label: null
                        })
                    )) {
                        normalCompletionToBreak(i85);
                        n143.push(...i85);
                        if (i85.some((e332)=>e332.path.isDeclaration()
                        )) {
                            n143.push(...u141);
                            replaceBreakStatementInBreakCompletion(u141, true);
                        }
                        replaceBreakStatementInBreakCompletion(u141, false);
                    } else {
                        n143.push(...u141);
                        t234.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(u141, true);
                    }
                    break;
                }
                if (r61 === e329.length - 1) n143.push(...u141);
                else {
                    i85 = [];
                    for(let e333 = 0; e333 < u141.length; e333++){
                        const t235 = u141[e333];
                        t235.type === 1 && n143.push(t235);
                        t235.type === 0 && i85.push(t235);
                    }
                }
            }
        } else if (e329.length) for(let i86 = e329.length - 1; i86 >= 0; i86--){
            const r62 = _getCompletionRecords(e329[i86], t234);
            if (r62.length > 1 || 1 === r62.length && !r62[0].path.isVariableDeclaration()) {
                n143.push(...r62);
                break;
            }
        }
        return n143;
    }
    function _getCompletionRecords(e334, t236) {
        let n144 = [];
        if (e334.isIfStatement()) {
            n144 = addCompletionRecords(e334.get("consequent"), n144, t236);
            n144 = addCompletionRecords(e334.get("alternate"), n144, t236);
        } else {
            if (e334.isDoExpression() || e334.isFor() || e334.isWhile() || e334.isLabeledStatement()) return addCompletionRecords(e334.get("body"), n144, t236);
            if (e334.isProgram() || e334.isBlockStatement()) return getStatementListCompletion(e334.get("body"), t236);
            if (e334.isFunction()) return _getCompletionRecords(e334.get("body"), t236);
            if (e334.isTryStatement()) {
                n144 = addCompletionRecords(e334.get("block"), n144, t236);
                n144 = addCompletionRecords(e334.get("handler"), n144, t236);
            } else {
                if (e334.isCatchClause()) return addCompletionRecords(e334.get("body"), n144, t236);
                if (e334.isSwitchStatement()) return completionRecordForSwitch(e334.get("cases"), n144, t236);
                if (e334.isSwitchCase()) return getStatementListCompletion(e334.get("consequent"), {
                    canHaveBreak: true,
                    shouldPopulateBreak: false,
                    inCaseClause: true
                });
                e334.isBreakStatement() ? n144.push(BreakCompletion(e334)) : n144.push(NormalCompletion(e334));
            }
        }
        return n144;
    }
    function getCompletionRecords() {
        const e335 = _getCompletionRecords(this, {
            canHaveBreak: false,
            shouldPopulateBreak: false,
            inCaseClause: false
        });
        return e335.map((e336)=>e336.path
        );
    }
    function getSibling(t237) {
        return e319.default.get({
            parentPath: this.parentPath,
            parent: this.parent,
            container: this.container,
            listKey: this.listKey,
            key: t237
        }).setContext(this.context);
    }
    function getPrevSibling() {
        return this.getSibling(this.key - 1);
    }
    function getNextSibling() {
        return this.getSibling(this.key + 1);
    }
    function getAllNextSiblings() {
        let e337 = this.key;
        let t238 = this.getSibling(++e337);
        const n145 = [];
        while(t238.node){
            n145.push(t238);
            t238 = this.getSibling(++e337);
        }
        return n145;
    }
    function getAllPrevSiblings() {
        let e338 = this.key;
        let t239 = this.getSibling(--e338);
        const n146 = [];
        while(t239.node){
            n146.push(t239);
            t239 = this.getSibling(--e338);
        }
        return n146;
    }
    function get2(e339, t240 = true) {
        true === t240 && (t240 = this.context);
        const n147 = e339.split(".");
        return 1 === n147.length ? this._getKey(e339, t240) : this._getPattern(n147, t240);
    }
    function _getKey(t241, n148) {
        const i87 = this.node;
        const r63 = i87[t241];
        return Array.isArray(r63) ? r63.map((s, o32)=>e319.default.get({
                listKey: t241,
                parentPath: this,
                parent: i87,
                container: r63,
                key: o32
            }).setContext(n148)
        ) : e319.default.get({
            parentPath: this,
            parent: i87,
            container: i87,
            key: t241
        }).setContext(n148);
    }
    function _getPattern(e340, t242) {
        let n149 = this;
        for (const i88 of e340)n149 = "." === i88 ? n149.parentPath : Array.isArray(n149) ? n149[i88] : n149.get(i88, t242);
        return n149;
    }
    function getBindingIdentifiers(e341) {
        return n140(this.node, e341);
    }
    function getOuterBindingIdentifiers(e342) {
        return i83(this.node, e342);
    }
    function getBindingIdentifierPaths(e343 = false, t243 = false) {
        const i89 = this;
        const s41 = [
            i89
        ];
        const o33 = Object.create(null);
        while(s41.length){
            const i90 = s41.shift();
            if (!i90) continue;
            if (!i90.node) continue;
            const a22 = n140.keys[i90.node.type];
            if (i90.isIdentifier()) if (e343) {
                const e344 = o33[i90.node.name] = o33[i90.node.name] || [];
                e344.push(i90);
            } else o33[i90.node.name] = i90;
            else if (i90.isExportDeclaration()) {
                const e345 = i90.get("declaration");
                r59(e345) && s41.push(e345);
            } else {
                if (t243) {
                    if (i90.isFunctionDeclaration()) {
                        s41.push(i90.get("id"));
                        continue;
                    }
                    if (i90.isFunctionExpression()) continue;
                }
                if (a22) for(let e346 = 0; e346 < a22.length; e346++){
                    const t244 = a22[e346];
                    const n150 = i90.get(t244);
                    Array.isArray(n150) ? s41.push(...n150) : n150.node && s41.push(n150);
                }
            }
        }
        return o33;
    }
    function getOuterBindingIdentifierPaths(e347) {
        return this.getBindingIdentifierPaths(e347, true);
    }
    return ye4;
}
var ve5 = "default" in mod3 ? mod3.default : mod3;
var be2 = {}, xe3 = false;
function dew$52() {
    if (xe3) return be2;
    xe3 = true;
    Object.defineProperty(be2, "__esModule", {
        value: true
    });
    be2.addComment = addComment;
    be2.addComments = addComments;
    be2.shareCommentsWithSiblings = shareCommentsWithSiblings;
    var e348 = ve5;
    const { addComment: t245 , addComments: n151  } = e348;
    function shareCommentsWithSiblings() {
        if ("string" === typeof this.key) return;
        const e349 = this.node;
        if (!e349) return;
        const t246 = e349.trailingComments;
        const n152 = e349.leadingComments;
        if (!t246 && !n152) return;
        const i91 = this.getSibling(this.key - 1);
        const r64 = this.getSibling(this.key + 1);
        const s42 = Boolean(i91.node);
        const o34 = Boolean(r64.node);
        s42 && !o34 ? i91.addComments("trailing", t246) : o34 && !s42 && r64.addComments("leading", n152);
    }
    function addComment(e350, n153, i92) {
        t245(this.node, e350, n153, i92);
    }
    function addComments(e351, t247) {
        n151(this.node, e351, t247);
    }
    return be2;
}
var Pe3 = "default" in mod5 ? mod5.default : mod5;
var Ee3 = "default" in mod3 ? mod3.default : mod3;
var Se3 = "default" in mod12 ? mod12.default : mod12;
var we3 = {}, ke3 = false;
function dew$42() {
    if (ke3) return we3;
    ke3 = true;
    Object.defineProperty(we3, "__esModule", {
        value: true
    });
    we3.default = we3.SHOULD_STOP = we3.SHOULD_SKIP = we3.REMOVED = void 0;
    var e353 = dew$p1();
    var t249 = Pe3;
    var n154 = dew11();
    var i93 = dew$k1();
    var r65 = Ee3;
    var s43 = r65;
    var o35 = dew$n1();
    var a23 = Se3;
    var c20 = dew$j1();
    var u151 = dew$g1();
    var l141 = dew$f1();
    var h92 = dew$e1();
    var d81 = dew$d2();
    var p82 = dew$c2();
    var f101 = dew$b2();
    var g91 = dew$92();
    var y9 = dew$72();
    var m91 = dew$62();
    var v81 = dew$52();
    const { validate: b81  } = r65;
    const x71 = t249("babel");
    const P61 = 1;
    we3.REMOVED = P61;
    const E61 = 2;
    we3.SHOULD_STOP = E61;
    const S61 = 4;
    we3.SHOULD_SKIP = S61;
    class NodePath {
        constructor(e354, t250){
            this.contexts = [];
            this.state = null;
            this.opts = null;
            this._traverseFlags = 0;
            this.skipKeys = null;
            this.parentPath = null;
            this.container = null;
            this.listKey = null;
            this.key = null;
            this.node = null;
            this.type = null;
            this.parent = t250;
            this.hub = e354;
            this.data = null;
            this.context = null;
            this.scope = null;
        }
        static get({ hub: e355 , parentPath: t251 , parent: n155 , container: i94 , listKey: r66 , key: s44  }) {
            !e355 && t251 && (e355 = t251.hub);
            if (!n155) throw new Error("To get a node path the parent needs to exist");
            const a24 = i94[s44];
            let c21 = o35.path.get(n155);
            if (!c21) {
                c21 = new Map;
                o35.path.set(n155, c21);
            }
            let u161 = c21.get(a24);
            if (!u161) {
                u161 = new NodePath(e355, n155);
                a24 && c21.set(a24, u161);
            }
            u161.setup(t251, i94, r66, s44);
            return u161;
        }
        getScope(e356) {
            return this.isScope() ? new i93.default(this) : e356;
        }
        setData(e357, t252) {
            null == this.data && (this.data = Object.create(null));
            return this.data[e357] = t252;
        }
        getData(e358, t253) {
            null == this.data && (this.data = Object.create(null));
            let n156 = this.data[e358];
            void 0 === n156 && void 0 !== t253 && (n156 = this.data[e358] = t253);
            return n156;
        }
        hasNode() {
            return null != this.node;
        }
        buildCodeFrameError(e359, t254 = SyntaxError) {
            return this.hub.buildError(this.node, e359, t254);
        }
        traverse(e360, t255) {
            (0, n154.default)(this.node, e360, this.scope, t255, this);
        }
        set(e361, t256) {
            b81(this.node, e361, t256);
            this.node[e361] = t256;
        }
        getPathLocation() {
            const e362 = [];
            let t257 = this;
            do {
                let n157 = t257.key;
                t257.inList && (n157 = `${t257.listKey}[${n157}]`);
                e362.unshift(n157);
            }while (t257 = t257.parentPath)
            return e362.join(".");
        }
        debug(e363) {
            x71.enabled && x71(`${this.getPathLocation()} ${this.type}: ${e363}`);
        }
        toString() {
            return (0, a23.default)(this.node).code;
        }
        get inList() {
            return !!this.listKey;
        }
        set inList(e364) {
            e364 || (this.listKey = null);
        }
        get parentKey() {
            return this.listKey || this.key;
        }
        get shouldSkip() {
            return !!(this._traverseFlags & 4);
        }
        set shouldSkip(e365) {
            e365 ? this._traverseFlags |= S61 : this._traverseFlags &= ~S61;
        }
        get shouldStop() {
            return !!(this._traverseFlags & 2);
        }
        set shouldStop(e366) {
            e366 ? this._traverseFlags |= E61 : this._traverseFlags &= ~E61;
        }
        get removed() {
            return !!(this._traverseFlags & 1);
        }
        set removed(e367) {
            e367 ? this._traverseFlags |= P61 : this._traverseFlags &= ~P61;
        }
    }
    Object.assign(NodePath.prototype, c20, u151, l141, h92, d81, p82, f101, g91, y9, m91, v81);
    for (const e352 of s43.TYPES){
        const t258 = `is${e352}`;
        const n158 = s43[t258];
        NodePath.prototype[t258] = function(e368) {
            return n158(this.node, e368);
        };
        NodePath.prototype[`assert${e352}`] = function(t259) {
            if (!n158(this.node, t259)) throw new TypeError(`Expected node path of type ${e352}`);
        };
    }
    for (const t248 of Object.keys(e353)){
        if ("_" === t248[0]) continue;
        s43.TYPES.indexOf(t248) < 0 && s43.TYPES.push(t248);
        const n159 = e353[t248];
        NodePath.prototype[`is${t248}`] = function(e369) {
            return n159.checkPath(this, e369);
        };
    }
    var w51 = NodePath;
    we3.default = w51;
    return we3;
}
var Ce3 = "default" in mod3 ? mod3.default : mod3;
var Ae2 = {}, Be2 = false;
function dew$32() {
    if (Be2) return Ae2;
    Be2 = true;
    Object.defineProperty(Ae2, "__esModule", {
        value: true
    });
    Ae2.default = void 0;
    var e370 = dew$42();
    var t260 = Ce3;
    const { VISITOR_KEYS: n160  } = t260;
    class TraversalContext {
        constructor(e371, t261, n161, i95){
            this.queue = null;
            this.priorityQueue = null;
            this.parentPath = i95;
            this.scope = e371;
            this.state = n161;
            this.opts = t261;
        }
        shouldVisit(e372) {
            const t263 = this.opts;
            if (t263.enter || t263.exit) return true;
            if (t263[e372.type]) return true;
            const i96 = n160[e372.type];
            if (!(null != i96 && i96.length)) return false;
            for (const t262 of i96)if (e372[t262]) return true;
            return false;
        }
        create(t264, n162, i97, r67) {
            return e370.default.get({
                parentPath: this.parentPath,
                parent: t264,
                container: n162,
                key: i97,
                listKey: r67
            });
        }
        maybeQueue(e373, t265) {
            this.queue && (t265 ? this.queue.push(e373) : this.priorityQueue.push(e373));
        }
        visitMultiple(e374, t266, n163) {
            if (0 === e374.length) return false;
            const i98 = [];
            for(let r68 = 0; r68 < e374.length; r68++){
                const s45 = e374[r68];
                s45 && this.shouldVisit(s45) && i98.push(this.create(t266, e374, r68, n163));
            }
            return this.visitQueue(i98);
        }
        visitSingle(e375, t267) {
            return !!this.shouldVisit(e375[t267]) && this.visitQueue([
                this.create(e375, e375, t267)
            ]);
        }
        visitQueue(e376) {
            this.queue = e376;
            this.priorityQueue = [];
            const t269 = new WeakSet;
            let n164 = false;
            for (const i99 of e376){
                i99.resync();
                0 !== i99.contexts.length && i99.contexts[i99.contexts.length - 1] === this || i99.pushContext(this);
                if (null === i99.key) continue;
                const { node: r69  } = i99;
                if (!t269.has(r69)) {
                    r69 && t269.add(r69);
                    if (i99.visit()) {
                        n164 = true;
                        break;
                    }
                    if (this.priorityQueue.length) {
                        n164 = this.visitQueue(this.priorityQueue);
                        this.priorityQueue = [];
                        this.queue = e376;
                        if (n164) break;
                    }
                }
            }
            for (const t268 of e376)t268.popContext();
            this.queue = null;
            return n164;
        }
        visit(e377, t270) {
            const n165 = e377[t270];
            return !!n165 && (Array.isArray(n165) ? this.visitMultiple(n165, e377, t270) : this.visitSingle(e377, t270));
        }
    }
    Ae2.default = TraversalContext;
    return Ae2;
}
var _e2 = "default" in mod3 ? mod3.default : mod3;
var Oe3 = {}, Te3 = false;
function dew$23() {
    if (Te3) return Oe3;
    Te3 = true;
    Object.defineProperty(Oe3, "__esModule", {
        value: true
    });
    Oe3.traverseNode = traverseNode;
    var e379 = dew$32();
    var t271 = _e2;
    const { VISITOR_KEYS: n166  } = t271;
    function traverseNode(t272, i100, r70, s46, o36, a25) {
        const c22 = n166[t272.type];
        if (!c22) return false;
        const u171 = new e379.default(r70, i100, s46, o36);
        for (const e378 of c22)if ((!a25 || !a25[e378]) && u171.visit(t272, e378)) return true;
        return false;
    }
    return Oe3;
}
var Ie3 = {}, Fe2 = false;
function dew$14() {
    if (Fe2) return Ie3;
    Fe2 = true;
    Object.defineProperty(Ie3, "__esModule", {
        value: true
    });
    Ie3.default = void 0;
    class Hub {
        getCode() {}
        getScope() {}
        addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
        }
        buildError(e, t273, n167 = TypeError) {
            return new n167(t273);
        }
    }
    Ie3.default = Hub;
    return Ie3;
}
var De3 = "default" in mod3 ? mod3.default : mod3;
var Ne3 = {}, Re2 = false;
function dew11() {
    if (Re2) return Ne3;
    Re2 = true;
    Object.defineProperty(Ne3, "__esModule", {
        value: true
    });
    Object.defineProperty(Ne3, "Hub", {
        enumerable: true,
        get: function() {
            return o37.default;
        }
    });
    Object.defineProperty(Ne3, "NodePath", {
        enumerable: true,
        get: function() {
            return r71.default;
        }
    });
    Object.defineProperty(Ne3, "Scope", {
        enumerable: true,
        get: function() {
            return s47.default;
        }
    });
    Ne3.visitors = Ne3.default = void 0;
    var e380 = dew$o1();
    Ne3.visitors = e380;
    var t274 = De3;
    var n168 = dew$n1();
    var i101 = dew$23();
    var r71 = dew$42();
    var s47 = dew$k1();
    var o37 = dew$14();
    const { VISITOR_KEYS: a26 , removeProperties: c23 , traverseFast: u181  } = t274;
    function traverse(t275, n169 = {}, r72, s48, o38) {
        if (t275) {
            if (!n169.noScope && !r72 && "Program" !== t275.type && "File" !== t275.type) throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${t275.type} node without passing scope and parentPath.`);
            if (a26[t275.type]) {
                e380.explode(n169);
                (0, i101.traverseNode)(t275, n169, r72, s48, o38);
            }
        }
    }
    var l151 = traverse;
    Ne3.default = l151;
    traverse.visitors = e380;
    traverse.verify = e380.verify;
    traverse.explode = e380.explode;
    traverse.cheap = function(e381, t276) {
        return u181(e381, t276);
    };
    traverse.node = function(e382, t277, n170, r73, s49, o39) {
        (0, i101.traverseNode)(e382, t277, n170, r73, s49, o39);
    };
    traverse.clearNode = function(e383, t278) {
        c23(e383, t278);
        n168.path.delete(e383);
    };
    traverse.removeProperties = function(e384, t279) {
        u181(e384, traverse.clearNode, t279);
        return e384;
    };
    function hasDenylistedType(e385, t280) {
        if (e385.node.type === t280.type) {
            t280.has = true;
            e385.stop();
        }
    }
    traverse.hasType = function(e386, t281, n171) {
        if (null != n171 && n171.includes(e386.type)) return false;
        if (e386.type === t281) return true;
        const i102 = {
            has: false,
            type: t281
        };
        traverse(e386, {
            noScope: true,
            denylist: n171,
            enter: hasDenylistedType
        }, null, i102);
        return i102.has;
    };
    traverse.cache = n168;
    return Ne3;
}
const je2 = dew11();
var Le3 = je2.__esModule, Me3 = je2.Hub, $e3 = je2.NodePath, Ke3 = je2.Scope, Ue2 = je2.visitors;
const mod22 = {
    Hub: Me3,
    NodePath: $e3,
    Scope: Ke3,
    __esModule: Le3,
    default: je2,
    visitors: Ue2
};
var t25 = "default" in mod20 ? mod20.default : mod20;
var r29 = {};
Object.defineProperty(r29, "__esModule", {
    value: true
});
r29.default = void 0;
var i20 = t25;
function helper$1(e1, t1138) {
    return Object.freeze({
        minVersion: e1,
        ast: ()=>i20.default.program.ast(t1138)
    });
}
var a21 = Object.freeze({
    applyDecs: helper$1("7.17.8", 'function createMetadataMethodsForProperty(metadataMap,kind,property,decoratorFinishedRef){return{getMetadata:function(key){assertNotFinished(decoratorFinishedRef,"getMetadata"),assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0!==metadataForKey)if(1===kind){var pub=metadataForKey.public;if(void 0!==pub)return pub[property]}else if(2===kind){var priv=metadataForKey.private;if(void 0!==priv)return priv.get(property)}else if(Object.hasOwnProperty.call(metadataForKey,"constructor"))return metadataForKey.constructor},setMetadata:function(key,value){assertNotFinished(decoratorFinishedRef,"setMetadata"),assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0===metadataForKey&&(metadataForKey=metadataMap[key]={}),1===kind){var pub=metadataForKey.public;void 0===pub&&(pub=metadataForKey.public={}),pub[property]=value}else if(2===kind){var priv=metadataForKey.priv;void 0===priv&&(priv=metadataForKey.private=new Map),priv.set(property,value)}else metadataForKey.constructor=value}}}function convertMetadataMapToFinal(obj,metadataMap){var parentMetadataMap=obj[Symbol.metadata||Symbol.for("Symbol.metadata")],metadataKeys=Object.getOwnPropertySymbols(metadataMap);if(0!==metadataKeys.length){for(var i=0;i<metadataKeys.length;i++){var key=metadataKeys[i],metaForKey=metadataMap[key],parentMetaForKey=parentMetadataMap?parentMetadataMap[key]:null,pub=metaForKey.public,parentPub=parentMetaForKey?parentMetaForKey.public:null;pub&&parentPub&&Object.setPrototypeOf(pub,parentPub);var priv=metaForKey.private;if(priv){var privArr=Array.from(priv.values()),parentPriv=parentMetaForKey?parentMetaForKey.private:null;parentPriv&&(privArr=privArr.concat(parentPriv)),metaForKey.private=privArr}parentMetaForKey&&Object.setPrototypeOf(metaForKey,parentMetaForKey)}parentMetadataMap&&Object.setPrototypeOf(metadataMap,parentMetadataMap),obj[Symbol.metadata||Symbol.for("Symbol.metadata")]=metadataMap}}function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){assertNotFinished(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var metadataKind,metadataName,ctx={kind:kindStr,name:isPrivate?"#"+name:name,isStatic:isStatic,isPrivate:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate){metadataKind=2,metadataName=Symbol(name);var access={};0===kind?(access.get=desc.get,access.set=desc.set):2===kind?access.get=function(){return desc.value}:(1!==kind&&3!==kind||(access.get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(access.set=function(v){desc.set.call(this,v)})),ctx.access=access}else metadataKind=1,metadataName=name;try{return dec(value,Object.assign(ctx,createMetadataMethodsForProperty(metadataMap,metadataKind,metadataName,decoratorFinishedRef)))}finally{decoratorFinishedRef.v=!0}}function assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function assertMetadataKey(key){if("symbol"!=typeof key)throw new TypeError("Metadata keys must be symbols, received: "+key)}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init"),void 0!==value.initializer&&assertCallable(value.initializer,"accessor.initializer")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function getInit(desc){var initializer;return null==(initializer=desc.init)&&(initializer=desc.initializer)&&"undefined"!=typeof console&&console.warn(".initializer has been renamed to .init as of March 2022"),initializer}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers){var desc,initializer,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?initializer=newValue:1===kind?(initializer=getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===initializer?initializer=newInit:"function"==typeof initializer?initializer=[initializer,newInit]:initializer.push(newInit))}if(0===kind||1===kind){if(void 0===initializer)initializer=function(instance,init){return init};else if("function"!=typeof initializer){var ownInitializers=initializer;initializer=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=initializer;initializer=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(initializer)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(ret,Class,protoMetadataMap,staticMetadataMap,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,metadataMap,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,metadataMap=staticMetadataMap,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,metadataMap=protoMetadataMap,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers)}}pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers)}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function applyClassDecs(ret,targetClass,metadataMap,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var ctx=Object.assign({kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)},createMetadataMethodsForProperty(metadataMap,0,name,decoratorFinishedRef)),nextNewClass=classDecs[i](newClass,ctx)}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}export default function applyDecs(targetClass,memberDecs,classDecs){var ret=[],staticMetadataMap={},protoMetadataMap={};return applyMemberDecs(ret,targetClass,protoMetadataMap,staticMetadataMap,memberDecs),convertMetadataMapToFinal(targetClass.prototype,protoMetadataMap),applyClassDecs(ret,targetClass,staticMetadataMap,classDecs),convertMetadataMapToFinal(targetClass,staticMetadataMap),ret}'),
    asyncIterator: helper$1("7.15.9", 'export default function _asyncIterator(iterable){var method,async,sync,retry=2;for("undefined"!=typeof Symbol&&(async=Symbol.asyncIterator,sync=Symbol.iterator);retry--;){if(async&&null!=(method=iterable[async]))return method.call(iterable);if(sync&&null!=(method=iterable[sync]))return new AsyncFromSyncIterator(method.call(iterable));async="@@asyncIterator",sync="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(s){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var done=r.done;return Promise.resolve(r.value).then((function(value){return{value:value,done:done}}))}return AsyncFromSyncIterator=function(s){this.s=s,this.n=s.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(value){var ret=this.s.return;return void 0===ret?Promise.resolve({value:value,done:!0}):AsyncFromSyncIteratorContinuation(ret.apply(this.s,arguments))},throw:function(value){var thr=this.s.return;return void 0===thr?Promise.reject(value):AsyncFromSyncIteratorContinuation(thr.apply(this.s,arguments))}},new AsyncFromSyncIterator(s)}'),
    jsx: helper$1("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}'),
    objectSpread2: helper$1("7.5.0", 'import defineProperty from"defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}export default function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}'),
    typeof: helper$1("7.0.0-beta.0", 'export default function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}'),
    wrapRegExp: helper$1("7.2.6", 'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(re,groups){return new BabelRegExp(re,void 0,groups)};var _super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=new RegExp(re,flags);return _groups.set(_this,groups||_groups.get(re)),setPrototypeOf(_this,BabelRegExp.prototype)}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){return groups[name]=result[g[name]],groups}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);return result&&(result.groups=buildGroups(result,this)),result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if("string"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\\$<([^>]+)>/g,(function(_,name){return"$"+groups[name]})))}if("function"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=arguments;return"object"!=typeof args[args.length-1]&&(args=[].slice.call(args)).push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}')
});
r29.default = a21;
var o25 = "default" in mod20 ? mod20.default : mod20;
var n28 = {};
Object.defineProperty(n28, "__esModule", {
    value: true
});
n28.default = void 0;
var s21 = o25;
var l18 = r29;
const c20 = Object.assign({
    __proto__: null
}, l18.default);
var p15 = c20;
n28.default = p15;
const helper = (e2)=>(t2130)=>({
            minVersion: e2,
            ast: ()=>s21.default.program.ast(t2130)
        })
;
c20.AwaitValue = helper("7.0.0-beta.0")`
  export default function _AwaitValue(value) {
    this.wrapped = value;
  }
`;
c20.AsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null,
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg)
        var value = result.value;
        var wrappedAwait = value instanceof AwaitValue;

        Promise.resolve(wrappedAwait ? value.wrapped : value).then(
          function (arg) {
            if (wrappedAwait) {
              resume(key === "return" ? "return" : "next", arg);
              return
            }

            settle(result.done ? "return" : "normal", arg);
          },
          function (err) { resume("throw", err); });
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({ value: value, done: true });
          break;
        case "throw":
          front.reject(value);
          break;
        default:
          front.resolve({ value: value, done: false });
          break;
      }

      front = front.next;
      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    // Hide "return" method if generator return is not supported
    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; };

  AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };
  AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };
  AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };
`;
c20.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`;
c20.awaitAsyncGenerator = helper("7.0.0-beta.0")`
  import AwaitValue from "AwaitValue";

  export default function _awaitAsyncGenerator(value) {
    return new AwaitValue(value);
  }
`;
c20.asyncGeneratorDelegate = helper("7.0.0-beta.0")`
  export default function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {}, waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) { resolve(inner[key](value)); });
      return { done: false, value: awaitWrap(value) };
    };

    iter[typeof Symbol !== "undefined" && Symbol.iterator || "@@iterator"] = function () { return this; };

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }
      return pump("next", value);
    };

    if (typeof inner.throw === "function") {
      iter.throw = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }
        return pump("throw", value);
      };
    }

    if (typeof inner.return === "function") {
      iter.return = function (value) {
        if (waiting) {
          waiting = false;
          return value;
        }
        return pump("return", value);
      };
    }

    return iter;
  }
`;
c20.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`;
c20.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`;
c20.createClass = helper("7.0.0-beta.0")`
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`;
c20.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`;
c20.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`;
c20.defineProperty = helper("7.0.0-beta.0")`
  export default function _defineProperty(obj, key, value) {
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`;
c20.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`;
c20.objectSpread = helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`;
c20.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`;
c20.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`;
c20.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`;
c20.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
`;
c20.isNativeReflectConstruct = helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`;
c20.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`;
c20.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`;
c20.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`;
c20.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`;
c20.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`;
c20.interopRequireWildcard = helper("7.14.0")`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
`;
c20.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`;
c20.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  }
`;
c20.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`;
c20.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`;
c20.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`;
c20.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`;
c20.createSuper = helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `;
c20.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`;
c20.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`;
c20.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }
`;
c20.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`;
c20.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`;
c20.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`;
c20.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`;
c20.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`;
c20.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`;
c20.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`;
c20.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`;
c20.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
c20.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`;
c20.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`;
c20.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`;
c20.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`;
c20.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`;
c20.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`;
c20.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`;
c20.iterableToArrayLimit = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimit(arr, i) {
    // this is an expanded form of \`for...of\` that properly supports abrupt completions of
    // iterators etc. variable names have been minimised to reduce the size of this massive
    // helper. sometimes spec compliance is annoying :(
    //
    // _n = _iteratorNormalCompletion
    // _d = _didIteratorError
    // _e = _iteratorError
    // _i = _iterator
    // _s = _step

    var _i = arr == null ? null : (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
`;
c20.iterableToArrayLimitLoose = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimitLoose(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
      _arr.push(_step.value);
      if (i && _arr.length === i) break;
    }
    return _arr;
  }
`;
c20.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`;
c20.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`;
c20.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
c20.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`;
c20.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`;
c20.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`;
c20.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`;
c20.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`;
c20.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`;
c20.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
`;
c20.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`;
c20.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`;
c20.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`;
c20.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`;
c20.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
c20.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
c20.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
c20.classExtractFieldDescriptor = helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`;
c20.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`;
c20.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`;
c20.classStaticPrivateMethodGet = helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`;
c20.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`;
c20.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`;
c20.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`;
c20.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`;
c20.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`;
c20.classCheckPrivateStaticAccess = helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`;
c20.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`;
c20.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`;
c20.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`;
c20.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`;
c20.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`;
c20.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`;
c20.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `;
c20.identity = helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`;
n28.__esModule;
var r30 = "default" in mod22 ? mod22.default : mod22;
var o26 = "default" in mod3 ? mod3.default : mod3;
var a22 = {};
Object.defineProperty(a22, "__esModule", {
    value: true
});
a22.default = void 0;
a22.ensure = ensure;
a22.get = get;
a22.getDependencies = getDependencies;
a22.list = void 0;
a22.minVersion = minVersion1;
var s22 = r30;
var i21 = o26;
var l19 = n28;
const { assignmentExpression: c21 , cloneNode: p16 , expressionStatement: d13 , file: f16 , identifier: u19  } = i21;
function makePath(e1) {
    const t1139 = [];
    for(; e1.parentPath; e1 = e1.parentPath){
        t1139.push(e1.key);
        e1.inList && t1139.push(e1.listKey);
    }
    return t1139.reverse().join(".");
}
let m13;
function getHelperMetadata(e2) {
    const t2131 = new Set;
    const n1134 = new Set;
    const r160 = new Map;
    let o135;
    let a130;
    const i1104 = [];
    const c125 = [];
    const p118 = [];
    const d118 = {
        ImportDeclaration (e3120) {
            const t3105 = e3120.node.source.value;
            if (!l19.default[t3105]) throw e3120.buildCodeFrameError(`Unknown helper ${t3105}`);
            if (1 !== e3120.get("specifiers").length || !e3120.get("specifiers.0").isImportDefaultSpecifier()) throw e3120.buildCodeFrameError("Helpers can only import a default value");
            const n2120 = e3120.node.specifiers[0].local;
            r160.set(n2120, t3105);
            c125.push(makePath(e3120));
        },
        ExportDefaultDeclaration (e4104) {
            const t4103 = e4104.get("declaration");
            if (!t4103.isFunctionDeclaration() || !t4103.node.id) throw t4103.buildCodeFrameError("Helpers can only export named function declarations");
            o135 = t4103.node.id.name;
            a130 = makePath(e4104);
        },
        ExportAllDeclaration (e5104) {
            throw e5104.buildCodeFrameError("Helpers can only export default");
        },
        ExportNamedDeclaration (e6103) {
            throw e6103.buildCodeFrameError("Helpers can only export default");
        },
        Statement (e730) {
            e730.isModuleDeclaration() || e730.skip();
        }
    };
    const f115 = {
        Program (e8103) {
            const t5103 = e8103.scope.getAllBindings();
            Object.keys(t5103).forEach((e9103)=>{
                e9103 !== o135 && (r160.has(t5103[e9103].identifier) || n1134.add(e9103));
            });
        },
        ReferencedIdentifier (e1016) {
            const n328 = e1016.node.name;
            const o229 = e1016.scope.getBinding(n328);
            o229 ? r160.has(o229.identifier) && p118.push(makePath(e1016)) : t2131.add(n328);
        },
        AssignmentExpression (e1115) {
            const t628 = e1115.get("left");
            if (!(o135 in t628.getBindingIdentifiers())) return;
            if (!t628.isIdentifier()) throw t628.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
            const n427 = e1115.scope.getBinding(o135);
            null != n427 && n427.scope.path.isProgram() && i1104.push(makePath(e1115));
        }
    };
    (0, s22.default)(e2.ast, d118, e2.scope);
    (0, s22.default)(e2.ast, f115, e2.scope);
    if (!a130) throw new Error("Helpers must have a default export.");
    i1104.reverse();
    return {
        globals: Array.from(t2131),
        localBindingNames: Array.from(n1134),
        dependencies: r160,
        exportBindingAssignments: i1104,
        exportPath: a130,
        exportName: o135,
        importBindingsReferences: p118,
        importPaths: c125
    };
}
function permuteHelperAST(e1413, t724, n524, r234, o325) {
    if (r234 && !n524) throw new Error("Unexpected local bindings for module-based helpers.");
    if (!n524) return;
    const { localBindingNames: a219 , dependencies: s1104 , exportBindingAssignments: i240 , exportPath: l122 , exportName: f214 , importBindingsReferences: m113 , importPaths: h115  } = t724;
    const g112 = {};
    s1104.forEach((e1513, t820)=>{
        g112[t820.name] = "function" === typeof o325 && o325(e1513) || t820;
    });
    const b112 = {};
    const E113 = new Set(r234 || []);
    a219.forEach((e1613)=>{
        let t918 = e1613;
        while(E113.has(t918))t918 = "_" + t918;
        t918 !== e1613 && (b112[e1613] = t918);
    });
    "Identifier" === n524.type && f214 !== n524.name && (b112[f214] = n524.name);
    const { path: w112  } = e1413;
    const x112 = w112.get(l122);
    const y113 = h115.map((e1712)=>w112.get(e1712)
    );
    const v115 = m113.map((e18)=>w112.get(e18)
    );
    const H19 = x112.get("declaration");
    if ("Identifier" === n524.type) x112.replaceWith(H19);
    else {
        if ("MemberExpression" !== n524.type) throw new Error("Unexpected helper format.");
        i240.forEach((e19)=>{
            const t1017 = w112.get(e19);
            t1017.replaceWith(c21("=", n524, t1017.node));
        });
        x112.replaceWith(H19);
        w112.pushContainer("body", d13(c21("=", n524, u19(f214))));
    }
    Object.keys(b112).forEach((e20)=>{
        w112.scope.rename(e20, b112[e20]);
    });
    for (const e1215 of y113)e1215.remove();
    for (const e1314 of v115){
        const t1140 = p16(g112[e1314.node.name]);
        e1314.replaceWith(t1140);
    }
}
const h12 = Object.create(null);
function loadHelper(e21) {
    if (!h12[e21]) {
        const t1216 = l19.default[e21];
        if (!t1216) throw Object.assign(new ReferenceError(`Unknown helper ${e21}`), {
            code: "BABEL_HELPER_UNKNOWN",
            helper: e21
        });
        const fn1 = ()=>{
            if (!m13) {
                const e22 = {
                    ast: f16(t1216.ast()),
                    path: null
                };
                (0, s22.default)(e22.ast, {
                    Program: (t1316)=>(e22.path = t1316).stop()
                });
                return e22;
            }
            return new m13({
                filename: `babel-helper://${e21}`
            }, {
                ast: f16(t1216.ast()),
                code: "[internal Babel helper code]",
                inputMap: null
            });
        };
        let n624 = null;
        h12[e21] = {
            minVersion: t1216.minVersion,
            build (e23, t1415, r330) {
                const o419 = fn1();
                n624 || (n624 = getHelperMetadata(o419));
                permuteHelperAST(o419, n624, t1415, r330, e23);
                return {
                    nodes: o419.ast.program.body,
                    globals: n624.globals
                };
            },
            getDependencies () {
                n624 || (n624 = getHelperMetadata(fn1()));
                return Array.from(n624.dependencies.values());
            }
        };
    }
    return h12[e21];
}
function get(e24, t1514, n722, r425) {
    return loadHelper(e24).build(t1514, n722, r425);
}
function minVersion1(e25) {
    return loadHelper(e25).minVersion;
}
function getDependencies(e26) {
    return loadHelper(e26).getDependencies();
}
function ensure(e27, t1614) {
    m13 || (m13 = t1614);
    loadHelper(e27);
}
const g13 = Object.keys(l19.default).map((e28)=>e28.replace(/^_/, "")
);
a22.list = g13;
var b12 = get;
a22.default = b12;
const E8 = a22.__esModule;
const w9 = a22.ensure, x8 = a22.get, y9 = a22.getDependencies, v13 = a22.list, H6 = a22.minVersion;
const mod23 = {
    __esModule: E8,
    default: a22,
    ensure: w9,
    get: x8,
    getDependencies: y9,
    list: v13,
    minVersion: H6
};
var e18, n29, t26, r31 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global, o27 = e18 = {};
function i22() {
    throw new Error("setTimeout has not been defined");
}
function u20() {
    throw new Error("clearTimeout has not been defined");
}
function c22(e1) {
    if (n29 === setTimeout) return setTimeout(e1, 0);
    if ((n29 === i22 || !n29) && setTimeout) return n29 = setTimeout, setTimeout(e1, 0);
    try {
        return n29(e1, 0);
    } catch (t) {
        try {
            return n29.call(null, e1, 0);
        } catch (t) {
            return n29.call(this || r31, e1, 0);
        }
    }
}
!function() {
    try {
        n29 = "function" == typeof setTimeout ? setTimeout : i22;
    } catch (e) {
        n29 = i22;
    }
    try {
        t26 = "function" == typeof clearTimeout ? clearTimeout : u20;
    } catch (e2) {
        t26 = u20;
    }
}();
var s23, l20 = [], a23 = !1, f17 = -1;
function h13() {
    a23 && s23 && (a23 = !1, s23.length ? l20 = s23.concat(l20) : f17 = -1, l20.length && d14());
}
function d14() {
    if (!a23) {
        var e3121 = c22(h13);
        a23 = !0;
        for(var n1135 = l20.length; n1135;){
            for(s23 = l20, l20 = []; ++f17 < n1135;)s23 && s23[f17].run();
            f17 = -1, n1135 = l20.length;
        }
        s23 = null, a23 = !1, function(e5105) {
            if (t26 === clearTimeout) return clearTimeout(e5105);
            if ((t26 === u20 || !t26) && clearTimeout) return t26 = clearTimeout, clearTimeout(e5105);
            try {
                t26(e5105);
            } catch (n) {
                try {
                    return t26.call(null, e5105);
                } catch (n) {
                    return t26.call(this || r31, e5105);
                }
            }
        }(e3121);
    }
}
function m14(e6104, n2121) {
    (this || r31).fun = e6104, (this || r31).array = n2121;
}
function p17() {}
o27.nextTick = function(e731) {
    var n329 = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var t1141 = 1; t1141 < arguments.length; t1141++)n329[t1141 - 1] = arguments[t1141];
    l20.push(new m14(e731, n329)), 1 !== l20.length || a23 || c22(d14);
}, m14.prototype.run = function() {
    (this || r31).fun.apply(null, (this || r31).array);
}, o27.title = "browser", o27.browser = !0, o27.env = {}, o27.argv = [], o27.version = "", o27.versions = {}, o27.on = p17, o27.addListener = p17, o27.once = p17, o27.off = p17, o27.removeListener = p17, o27.removeAllListeners = p17, o27.emit = p17, o27.prependListener = p17, o27.prependOnceListener = p17, o27.listeners = function(e) {
    return [];
}, o27.binding = function(e) {
    throw new Error("process.binding is not supported");
}, o27.cwd = function() {
    return "/";
}, o27.chdir = function(e) {
    throw new Error("process.chdir is not supported");
}, o27.umask = function() {
    return 0;
};
var T8 = e18;
T8.addListener;
T8.argv;
T8.binding;
T8.browser;
T8.chdir;
T8.cwd;
T8.emit;
T8.env;
T8.listeners;
T8.nextTick;
T8.off;
T8.on;
T8.once;
T8.prependListener;
T8.prependOnceListener;
T8.removeAllListeners;
T8.removeListener;
T8.title;
T8.umask;
T8.version;
T8.versions;
var r32 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag, u21 = Object.prototype.toString, o28 = function(e1) {
    return !(r32 && e1 && "object" == typeof e1 && Symbol.toStringTag in e1) && "[object Arguments]" === u21.call(e1);
}, n30 = function(e2) {
    return !!o28(e2) || null !== e2 && "object" == typeof e2 && "number" == typeof e2.length && e2.length >= 0 && "[object Array]" !== u21.call(e2) && "[object Function]" === u21.call(e2.callee);
}, c23 = function() {
    return o28(arguments);
}();
o28.isLegacyArguments = n30;
var f18 = c23 ? o28 : n30;
var a24 = Object.prototype.toString, p18 = Function.prototype.toString, s24 = /^\s*(?:function)?\*/, y10 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag, l21 = Object.getPrototypeOf, g14 = function() {
    if (!y10) return !1;
    try {
        return Function("return function*() {}")();
    } catch (e) {}
}(), b13 = g14 ? l21(g14) : {}, i23 = function(e3122) {
    return "function" == typeof e3122 && (!!s24.test(p18.call(e3122)) || (y10 ? l21(e3122) === b13 : "[object GeneratorFunction]" === a24.call(e3122)));
};
var d15 = "function" == typeof Object.create ? function(e4105, r165) {
    r165 && (e4105.super_ = r165, e4105.prototype = Object.create(r165.prototype, {
        constructor: {
            value: e4105,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }));
} : function(e5106, r235) {
    if (r235) {
        e5106.super_ = r235;
        var o136 = function() {};
        o136.prototype = r235.prototype, e5106.prototype = new o136, e5106.prototype.constructor = e5106;
    }
};
var i$1 = function(e6105) {
    return e6105 && "object" == typeof e6105 && "function" == typeof e6105.copy && "function" == typeof e6105.fill && "function" == typeof e6105.readUInt8;
}, m15 = {}, j6 = i$1, h14 = f18, A9 = i23;
function c$1(e7100) {
    return e7100.call.bind(e7100);
}
var v14 = "undefined" != typeof BigInt, w10 = "undefined" != typeof Symbol, Q6 = w10 && void 0 !== Symbol.toStringTag, X6 = "undefined" != typeof Uint8Array, Y6 = "undefined" != typeof ArrayBuffer;
if (X6 && Q6) var ee6 = Object.getPrototypeOf(Uint8Array.prototype), te6 = c$1(Object.getOwnPropertyDescriptor(ee6, Symbol.toStringTag).get);
var re7 = c$1(Object.prototype.toString), ne7 = c$1(Number.prototype.valueOf), ie7 = c$1(String.prototype.valueOf), Se4 = c$1(Boolean.prototype.valueOf);
if (v14) var Ee4 = c$1(BigInt.prototype.valueOf);
if (w10) var Pe4 = c$1(Symbol.prototype.valueOf);
function O10(e8104, r331) {
    if ("object" != typeof e8104) return !1;
    try {
        return r331(e8104), !0;
    } catch (e) {
        return !1;
    }
}
function S9(e9104) {
    return X6 && Q6 ? void 0 !== te6(e9104) : B8(e9104) || k7(e9104) || E9(e9104) || D8(e9104) || U7(e9104) || P9(e9104) || x9(e9104) || I10(e9104) || M7(e9104) || z7(e9104) || F10(e9104);
}
function B8(e1017) {
    return X6 && Q6 ? "Uint8Array" === te6(e1017) : "[object Uint8Array]" === re7(e1017) || j6(e1017) && void 0 !== e1017.buffer;
}
function k7(e1116) {
    return X6 && Q6 ? "Uint8ClampedArray" === te6(e1116) : "[object Uint8ClampedArray]" === re7(e1116);
}
function E9(e1216) {
    return X6 && Q6 ? "Uint16Array" === te6(e1216) : "[object Uint16Array]" === re7(e1216);
}
function D8(e1315) {
    return X6 && Q6 ? "Uint32Array" === te6(e1315) : "[object Uint32Array]" === re7(e1315);
}
function U7(e1414) {
    return X6 && Q6 ? "Int8Array" === te6(e1414) : "[object Int8Array]" === re7(e1414);
}
function P9(e1514) {
    return X6 && Q6 ? "Int16Array" === te6(e1514) : "[object Int16Array]" === re7(e1514);
}
function x9(e1614) {
    return X6 && Q6 ? "Int32Array" === te6(e1614) : "[object Int32Array]" === re7(e1614);
}
function I10(e1713) {
    return X6 && Q6 ? "Float32Array" === te6(e1713) : "[object Float32Array]" === re7(e1713);
}
function M7(e1810) {
    return X6 && Q6 ? "Float64Array" === te6(e1810) : "[object Float64Array]" === re7(e1810);
}
function z7(e19) {
    return X6 && Q6 ? "BigInt64Array" === te6(e19) : "[object BigInt64Array]" === re7(e19);
}
function F10(e20) {
    return X6 && Q6 ? "BigUint64Array" === te6(e20) : "[object BigUint64Array]" === re7(e20);
}
function T9(e21) {
    return "[object Map]" === re7(e21);
}
function N9(e22) {
    return "[object Set]" === re7(e22);
}
function W7(e23) {
    return "[object WeakMap]" === re7(e23);
}
function $7(e24) {
    return "[object WeakSet]" === re7(e24);
}
function C10(e25) {
    return "[object ArrayBuffer]" === re7(e25);
}
function V8(e26) {
    return "undefined" != typeof ArrayBuffer && (C10.working ? C10(e26) : e26 instanceof ArrayBuffer);
}
function G6(e27) {
    return "[object DataView]" === re7(e27);
}
function R8(e28) {
    return "undefined" != typeof DataView && (G6.working ? G6(e28) : e28 instanceof DataView);
}
function J6(e29) {
    return "[object SharedArrayBuffer]" === re7(e29);
}
function _10(e30) {
    return "undefined" != typeof SharedArrayBuffer && (J6.working ? J6(e30) : e30 instanceof SharedArrayBuffer);
}
function H7(e31) {
    return O10(e31, ne7);
}
function Z6(e32) {
    return O10(e32, ie7);
}
function q6(e33) {
    return O10(e33, Se4);
}
function K6(e34) {
    return v14 && O10(e34, Ee4);
}
function L8(e35) {
    return w10 && O10(e35, Pe4);
}
m15.isArgumentsObject = h14, m15.isGeneratorFunction = A9, m15.isPromise = function(e36) {
    return "undefined" != typeof Promise && e36 instanceof Promise || null !== e36 && "object" == typeof e36 && "function" == typeof e36.then && "function" == typeof e36.catch;
}, m15.isArrayBufferView = function(e37) {
    return Y6 && ArrayBuffer.isView ? ArrayBuffer.isView(e37) : S9(e37) || R8(e37);
}, m15.isTypedArray = S9, m15.isUint8Array = B8, m15.isUint8ClampedArray = k7, m15.isUint16Array = E9, m15.isUint32Array = D8, m15.isInt8Array = U7, m15.isInt16Array = P9, m15.isInt32Array = x9, m15.isFloat32Array = I10, m15.isFloat64Array = M7, m15.isBigInt64Array = z7, m15.isBigUint64Array = F10, T9.working = "undefined" != typeof Map && T9(new Map), m15.isMap = function(e38) {
    return "undefined" != typeof Map && (T9.working ? T9(e38) : e38 instanceof Map);
}, N9.working = "undefined" != typeof Set && N9(new Set), m15.isSet = function(e39) {
    return "undefined" != typeof Set && (N9.working ? N9(e39) : e39 instanceof Set);
}, W7.working = "undefined" != typeof WeakMap && W7(new WeakMap), m15.isWeakMap = function(e40) {
    return "undefined" != typeof WeakMap && (W7.working ? W7(e40) : e40 instanceof WeakMap);
}, $7.working = "undefined" != typeof WeakSet && $7(new WeakSet), m15.isWeakSet = function(e41) {
    return $7(e41);
}, C10.working = "undefined" != typeof ArrayBuffer && C10(new ArrayBuffer), m15.isArrayBuffer = V8, G6.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && G6(new DataView(new ArrayBuffer(1), 0, 1)), m15.isDataView = R8, J6.working = "undefined" != typeof SharedArrayBuffer && J6(new SharedArrayBuffer), m15.isSharedArrayBuffer = _10, m15.isAsyncFunction = function(e42) {
    return "[object AsyncFunction]" === re7(e42);
}, m15.isMapIterator = function(e43) {
    return "[object Map Iterator]" === re7(e43);
}, m15.isSetIterator = function(e44) {
    return "[object Set Iterator]" === re7(e44);
}, m15.isGeneratorObject = function(e45) {
    return "[object Generator]" === re7(e45);
}, m15.isWebAssemblyCompiledModule = function(e46) {
    return "[object WebAssembly.Module]" === re7(e46);
}, m15.isNumberObject = H7, m15.isStringObject = Z6, m15.isBooleanObject = q6, m15.isBigIntObject = K6, m15.isSymbolObject = L8, m15.isBoxedPrimitive = function(e47) {
    return H7(e47) || Z6(e47) || q6(e47) || K6(e47) || L8(e47);
}, m15.isAnyArrayBuffer = function(e48) {
    return X6 && (V8(e48) || _10(e48));
}, [
    "isProxy",
    "isExternal",
    "isModuleNamespaceObject"
].forEach(function(e49) {
    Object.defineProperty(m15, e49, {
        enumerable: !1,
        value: function() {
            throw new Error(e49 + " is not supported in userland");
        }
    });
});
var Ue3 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global, xe4 = {}, Ie4 = T8, Te4 = Object.getOwnPropertyDescriptors || function(e50) {
    for(var r426 = Object.keys(e50), u120 = {}, c126 = 0; c126 < r426.length; c126++)u120[r426[c126]] = Object.getOwnPropertyDescriptor(e50, r426[c126]);
    return u120;
}, Fe3 = /%[sdj%]/g;
xe4.format = function(e51) {
    if (!ge4(e51)) {
        for(var r522 = [], u216 = 0; u216 < arguments.length; u216++)r522.push(oe7(arguments[u216]));
        return r522.join(" ");
    }
    u216 = 1;
    for(var c218 = arguments, f116 = c218.length, a134 = String(e51).replace(Fe3, function(e52) {
        if ("%%" === e52) return "%";
        if (u216 >= f116) return e52;
        switch(e52){
            case "%s":
                return String(c218[u216++]);
            case "%d":
                return Number(c218[u216++]);
            case "%j":
                try {
                    return JSON.stringify(c218[u216++]);
                } catch (e) {
                    return "[Circular]";
                }
            default:
                return e52;
        }
    }), p119 = c218[u216]; u216 < f116; p119 = c218[++u216])le5(p119) || !he5(p119) ? a134 += " " + p119 : a134 += " " + oe7(p119);
    return a134;
}, xe4.deprecate = function(e53, r621) {
    if (void 0 !== Ie4 && !0 === Ie4.noDeprecation) return e53;
    if (void 0 === Ie4) return function() {
        return xe4.deprecate(e53, r621).apply(this || Ue3, arguments);
    };
    var u313 = !1;
    return function() {
        if (!u313) {
            if (Ie4.throwDeprecation) throw new Error(r621);
            Ie4.traceDeprecation ? console.trace(r621) : console.error(r621), u313 = !0;
        }
        return e53.apply(this || Ue3, arguments);
    };
};
var Me4 = {}, ze3 = /^$/;
if (Ie4.env.NODE_DEBUG) {
    var $e4 = Ie4.env.NODE_DEBUG;
    $e4 = $e4.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), ze3 = new RegExp("^" + $e4 + "$", "i");
}
function oe7(e54, r717) {
    var u413 = {
        seen: [],
        stylize: fe4
    };
    return arguments.length >= 3 && (u413.depth = arguments[2]), arguments.length >= 4 && (u413.colors = arguments[3]), ye5(r717) ? u413.showHidden = r717 : r717 && xe4._extend(u413, r717), be3(u413.showHidden) && (u413.showHidden = !1), be3(u413.depth) && (u413.depth = 2), be3(u413.colors) && (u413.colors = !1), be3(u413.customInspect) && (u413.customInspect = !0), u413.colors && (u413.stylize = ue5), ae7(u413, e54, u413.depth);
}
function ue5(e55, r816) {
    var u512 = oe7.styles[r816];
    return u512 ? "[" + oe7.colors[u512][0] + "m" + e55 + "[" + oe7.colors[u512][1] + "m" : e55;
}
function fe4(e56, r) {
    return e56;
}
function ae7(e57, r912, u612) {
    if (e57.customInspect && r912 && we4(r912.inspect) && r912.inspect !== xe4.inspect && (!r912.constructor || r912.constructor.prototype !== r912)) {
        var c315 = r912.inspect(u612, e57);
        return ge4(c315) || (c315 = ae7(e57, c315, u612)), c315;
    }
    var f215 = function(e58, r1012) {
        if (be3(r1012)) return e58.stylize("undefined", "undefined");
        if (ge4(r1012)) {
            var u72 = "'" + JSON.stringify(r1012).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            return e58.stylize(u72, "string");
        }
        return de5(r1012) ? e58.stylize("" + r1012, "number") : ye5(r1012) ? e58.stylize("" + r1012, "boolean") : le5(r1012) ? e58.stylize("null", "null") : void 0;
    }(e57, r912);
    if (f215) return f215;
    var a220 = Object.keys(r912), p215 = function(e59) {
        var r1115 = {};
        return e59.forEach(function(e60, u) {
            r1115[e60] = !0;
        }), r1115;
    }(a220);
    if (e57.showHidden && (a220 = Object.getOwnPropertyNames(r912)), Ae3(r912) && (a220.indexOf("message") >= 0 || a220.indexOf("description") >= 0)) return ce5(r912);
    if (0 === a220.length) {
        if (we4(r912)) {
            var s1105 = r912.name ? ": " + r912.name : "";
            return e57.stylize("[Function" + s1105 + "]", "special");
        }
        if (me4(r912)) return e57.stylize(RegExp.prototype.toString.call(r912), "regexp");
        if (je3(r912)) return e57.stylize(Date.prototype.toString.call(r912), "date");
        if (Ae3(r912)) return ce5(r912);
    }
    var y114, l123 = "", g113 = !1, b113 = [
        "{",
        "}"
    ];
    (pe5(r912) && (g113 = !0, b113 = [
        "[",
        "]"
    ]), we4(r912)) && (l123 = " [Function" + (r912.name ? ": " + r912.name : "") + "]");
    return me4(r912) && (l123 = " " + RegExp.prototype.toString.call(r912)), je3(r912) && (l123 = " " + Date.prototype.toUTCString.call(r912)), Ae3(r912) && (l123 = " " + ce5(r912)), 0 !== a220.length || g113 && 0 != r912.length ? u612 < 0 ? me4(r912) ? e57.stylize(RegExp.prototype.toString.call(r912), "regexp") : e57.stylize("[Object]", "special") : (e57.seen.push(r912), y114 = g113 ? function(e61, r1214, u82, c414, f312) {
        for(var a319 = [], p314 = 0, s2102 = r1214.length; p314 < s2102; ++p314)ke4(r1214, String(p314)) ? a319.push(se6(e61, r1214, u82, c414, String(p314), !0)) : a319.push("");
        return f312.forEach(function(f411) {
            f411.match(/^\d+$/) || a319.push(se6(e61, r1214, u82, c414, f411, !0));
        }), a319;
    }(e57, r912, u612, p215, a220) : a220.map(function(c56) {
        return se6(e57, r912, u612, p215, c56, g113);
    }), e57.seen.pop(), function(e62, r1312, u92) {
        var c63 = 0;
        return e62.reduce(function(e63, r1412) {
            return c63++, r1412.indexOf("\n") >= 0 && c63++, e63 + r1412.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0) > 60 ? u92[0] + ("" === r1312 ? "" : r1312 + "\n ") + " " + e62.join(",\n  ") + " " + u92[1] : u92[0] + r1312 + " " + e62.join(", ") + " " + u92[1];
    }(y114, l123, b113)) : b113[0] + l123 + b113[1];
}
function ce5(e64) {
    return "[" + Error.prototype.toString.call(e64) + "]";
}
function se6(e65, r1510, u102, c73, f58, a417) {
    var p49, s378, y211;
    if ((y211 = Object.getOwnPropertyDescriptor(r1510, f58) || {
        value: r1510[f58]
    }).get ? s378 = y211.set ? e65.stylize("[Getter/Setter]", "special") : e65.stylize("[Getter]", "special") : y211.set && (s378 = e65.stylize("[Setter]", "special")), ke4(c73, f58) || (p49 = "[" + f58 + "]"), s378 || (e65.seen.indexOf(y211.value) < 0 ? (s378 = le5(u102) ? ae7(e65, y211.value, null) : ae7(e65, y211.value, u102 - 1)).indexOf("\n") > -1 && (s378 = a417 ? s378.split("\n").map(function(e66) {
        return "  " + e66;
    }).join("\n").substr(2) : "\n" + s378.split("\n").map(function(e67) {
        return "   " + e67;
    }).join("\n")) : s378 = e65.stylize("[Circular]", "special")), be3(p49)) {
        if (a417 && f58.match(/^\d+$/)) return s378;
        (p49 = JSON.stringify("" + f58)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (p49 = p49.substr(1, p49.length - 2), p49 = e65.stylize(p49, "name")) : (p49 = p49.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), p49 = e65.stylize(p49, "string"));
    }
    return p49 + ": " + s378;
}
function pe5(e68) {
    return Array.isArray(e68);
}
function ye5(e69) {
    return "boolean" == typeof e69;
}
function le5(e70) {
    return null === e70;
}
function de5(e71) {
    return "number" == typeof e71;
}
function ge4(e72) {
    return "string" == typeof e72;
}
function be3(e73) {
    return void 0 === e73;
}
function me4(e74) {
    return he5(e74) && "[object RegExp]" === ve6(e74);
}
function he5(e75) {
    return "object" == typeof e75 && null !== e75;
}
function je3(e76) {
    return he5(e76) && "[object Date]" === ve6(e76);
}
function Ae3(e77) {
    return he5(e77) && ("[object Error]" === ve6(e77) || e77 instanceof Error);
}
function we4(e78) {
    return "function" == typeof e78;
}
function ve6(e79) {
    return Object.prototype.toString.call(e79);
}
function Oe4(e80) {
    return e80 < 10 ? "0" + e80.toString(10) : e80.toString(10);
}
xe4.debuglog = function(e81) {
    if (e81 = e81.toUpperCase(), !Me4[e81]) if (ze3.test(e81)) {
        var r166 = Ie4.pid;
        Me4[e81] = function() {
            var u1110 = xe4.format.apply(xe4, arguments);
            console.error("%s %d: %s", e81, r166, u1110);
        };
    } else Me4[e81] = function() {};
    return Me4[e81];
}, xe4.inspect = oe7, oe7.colors = {
    bold: [
        1,
        22
    ],
    italic: [
        3,
        23
    ],
    underline: [
        4,
        24
    ],
    inverse: [
        7,
        27
    ],
    white: [
        37,
        39
    ],
    grey: [
        90,
        39
    ],
    black: [
        30,
        39
    ],
    blue: [
        34,
        39
    ],
    cyan: [
        36,
        39
    ],
    green: [
        32,
        39
    ],
    magenta: [
        35,
        39
    ],
    red: [
        31,
        39
    ],
    yellow: [
        33,
        39
    ]
}, oe7.styles = {
    special: "cyan",
    number: "yellow",
    boolean: "yellow",
    undefined: "grey",
    null: "bold",
    string: "green",
    date: "magenta",
    regexp: "red"
}, xe4.types = m15, xe4.isArray = pe5, xe4.isBoolean = ye5, xe4.isNull = le5, xe4.isNullOrUndefined = function(e82) {
    return null == e82;
}, xe4.isNumber = de5, xe4.isString = ge4, xe4.isSymbol = function(e83) {
    return "symbol" == typeof e83;
}, xe4.isUndefined = be3, xe4.isRegExp = me4, xe4.types.isRegExp = me4, xe4.isObject = he5, xe4.isDate = je3, xe4.types.isDate = je3, xe4.isError = Ae3, xe4.types.isNativeError = Ae3, xe4.isFunction = we4, xe4.isPrimitive = function(e84) {
    return null === e84 || "boolean" == typeof e84 || "number" == typeof e84 || "string" == typeof e84 || "symbol" == typeof e84 || void 0 === e84;
}, xe4.isBuffer = i$1;
var Ne4 = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function Be3() {
    var e85 = new Date, r175 = [
        Oe4(e85.getHours()),
        Oe4(e85.getMinutes()),
        Oe4(e85.getSeconds())
    ].join(":");
    return [
        e85.getDate(),
        Ne4[e85.getMonth()],
        r175
    ].join(" ");
}
function ke4(e86, r185) {
    return Object.prototype.hasOwnProperty.call(e86, r185);
}
xe4.log = function() {
    console.log("%s - %s", Be3(), xe4.format.apply(xe4, arguments));
}, xe4.inherits = d15, xe4._extend = function(e87, r195) {
    if (!r195 || !he5(r195)) return e87;
    for(var u12 = Object.keys(r195), c83 = u12.length; c83--;)e87[u12[c83]] = r195[u12[c83]];
    return e87;
};
var We3 = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
function De4(e88, r203) {
    if (!e88) {
        var u132 = new Error("Promise was rejected with a falsy value");
        u132.reason = e88, e88 = u132;
    }
    return r203(e88);
}
xe4.promisify = function(e89) {
    if ("function" != typeof e89) throw new TypeError('The "original" argument must be of type Function');
    if (We3 && e89[We3]) {
        var r2112;
        if ("function" != typeof (r2112 = e89[We3])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        return Object.defineProperty(r2112, We3, {
            value: r2112,
            enumerable: !1,
            writable: !1,
            configurable: !0
        }), r2112;
    }
    function r2112() {
        for(var r2211, u142, c93 = new Promise(function(e90, c103) {
            r2211 = e90, u142 = c103;
        }), f63 = [], a512 = 0; a512 < arguments.length; a512++)f63.push(arguments[a512]);
        f63.push(function(e91, c1112) {
            e91 ? u142(e91) : r2211(c1112);
        });
        try {
            e89.apply(this || Ue3, f63);
        } catch (e92) {
            u142(e92);
        }
        return c93;
    }
    return Object.setPrototypeOf(r2112, Object.getPrototypeOf(e89)), We3 && Object.defineProperty(r2112, We3, {
        value: r2112,
        enumerable: !1,
        writable: !1,
        configurable: !0
    }), Object.defineProperties(r2112, Te4(e89));
}, xe4.promisify.custom = We3, xe4.callbackify = function(e93) {
    if ("function" != typeof e93) throw new TypeError('The "original" argument must be of type Function');
    function t() {
        for(var r236 = [], u152 = 0; u152 < arguments.length; u152++)r236.push(arguments[u152]);
        var c127 = r236.pop();
        if ("function" != typeof c127) throw new TypeError("The last argument must be of type Function");
        var f72 = this || Ue3, o230 = function() {
            return c127.apply(f72, arguments);
        };
        e93.apply(this || Ue3, r236).then(function(e94) {
            Ie4.nextTick(o230.bind(null, null, e94));
        }, function(e95) {
            Ie4.nextTick(De4.bind(null, e95, o230));
        });
    }
    return Object.setPrototypeOf(t, Object.getPrototypeOf(e93)), Object.defineProperties(t, Te4(e93)), t;
};
function e19(i1105, u) {
    if (null == i1105) throw new TypeError("Cannot convert first argument to object");
    for(var l124 = Object(i1105), b114 = 1; b114 < arguments.length; b114++){
        var m114 = arguments[b114];
        if (null != m114) for(var E114 = Object.keys(Object(m114)), S112 = 0, w113 = E114.length; S112 < w113; S112++){
            var _113 = E114[S112], $111 = Object.getOwnPropertyDescriptor(m114, _113);
            void 0 !== $111 && $111.enumerable && (l124[_113] = m114[_113]);
        }
    }
    return l124;
}
var l22 = {
    assign: e19,
    polyfill: function() {
        Object.assign || Object.defineProperty(Object, "assign", {
            enumerable: !1,
            configurable: !0,
            writable: !0,
            value: e19
        });
    }
};
var b14, m16 = Object.prototype.toString, r$1 = function(i241) {
    var u121 = m16.call(i241), l219 = "[object Arguments]" === u121;
    return l219 || (l219 = "[object Array]" !== u121 && null !== i241 && "object" == typeof i241 && "number" == typeof i241.length && i241.length >= 0 && "[object Function]" === m16.call(i241.callee)), l219;
};
if (!Object.keys) {
    var E10 = Object.prototype.hasOwnProperty, S10 = Object.prototype.toString, w11 = r$1, _27 = Object.prototype.propertyIsEnumerable, $8 = !_27.call({
        toString: null
    }, "toString"), X7 = _27.call(function() {}, "prototype"), Z7 = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
    ], f19 = function(i319) {
        var u217 = i319.constructor;
        return u217 && u217.prototype === i319;
    }, et12 = {
        $applicationCache: !0,
        $console: !0,
        $external: !0,
        $frame: !0,
        $frameElement: !0,
        $frames: !0,
        $innerHeight: !0,
        $innerWidth: !0,
        $onmozfullscreenchange: !0,
        $onmozfullscreenerror: !0,
        $outerHeight: !0,
        $outerWidth: !0,
        $pageXOffset: !0,
        $pageYOffset: !0,
        $parent: !0,
        $scrollLeft: !0,
        $scrollTop: !0,
        $scrollX: !0,
        $scrollY: !0,
        $self: !0,
        $webkitIndexedDB: !0,
        $webkitStorageInfo: !0,
        $window: !0
    }, rt3 = function() {
        if ("undefined" == typeof window) return !1;
        for(var i415 in window)try {
            if (!et12["$" + i415] && E10.call(window, i415) && null !== window[i415] && "object" == typeof window[i415]) try {
                f19(window[i415]);
            } catch (i) {
                return !0;
            }
        } catch (i) {
            return !0;
        }
        return !1;
    }();
    b14 = function(i513) {
        var u314 = null !== i513 && "object" == typeof i513, l315 = "[object Function]" === S10.call(i513), b212 = w11(i513), m213 = u314 && "[object String]" === S10.call(i513), _32 = [];
        if (!u314 && !l315 && !b212) throw new TypeError("Object.keys called on a non-object");
        var et21 = X7 && l315;
        if (m213 && i513.length > 0 && !E10.call(i513, 0)) for(var nt11 = 0; nt11 < i513.length; ++nt11)_32.push(String(nt11));
        if (b212 && i513.length > 0) for(var ot11 = 0; ot11 < i513.length; ++ot11)_32.push(String(ot11));
        else for(var at11 in i513)et21 && "prototype" === at11 || !E10.call(i513, at11) || _32.push(String(at11));
        if ($8) for(var ct11 = function(i611) {
            if ("undefined" == typeof window || !rt3) return f19(i611);
            try {
                return f19(i611);
            } catch (i) {
                return !1;
            }
        }(i513), it11 = 0; it11 < Z7.length; ++it11)ct11 && "constructor" === Z7[it11] || !E10.call(i513, Z7[it11]) || _32.push(Z7[it11]);
        return _32;
    };
}
var nt3 = b14, ot2 = Array.prototype.slice, at3 = r$1, ct2 = Object.keys, it3 = ct2 ? function(i711) {
    return ct2(i711);
} : nt3, ut3 = Object.keys;
it3.shim = function() {
    Object.keys ? function() {
        var i811 = Object.keys(arguments);
        return i811 && i811.length === arguments.length;
    }(1, 2) || (Object.keys = function(i911) {
        return at3(i911) ? ut3(ot2.call(i911)) : ut3(i911);
    }) : Object.keys = it3;
    return Object.keys || it3;
};
var lt4 = it3;
var ft3 = lt4, pt2 = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"), st3 = Object.prototype.toString, yt3 = Array.prototype.concat, dt3 = Object.defineProperty, gt3 = dt3 && function() {
    var i1011 = {};
    try {
        for(var u in dt3(i1011, "x", {
            enumerable: !1,
            value: i1011
        }), i1011)return !1;
        return i1011.x === i1011;
    } catch (i) {
        return !1;
    }
}(), l$1 = function(i1111, u414, l414, b33) {
    var m312;
    (!(u414 in i1111) || "function" == typeof (m312 = b33) && "[object Function]" === st3.call(m312) && b33()) && (gt3 ? dt3(i1111, u414, {
        configurable: !0,
        enumerable: !1,
        value: l414,
        writable: !0
    }) : i1111[u414] = l414);
}, u$1 = function(i1211, u513) {
    var l58 = arguments.length > 2 ? arguments[2] : {}, b42 = ft3(u513);
    pt2 && (b42 = yt3.call(b42, Object.getOwnPropertySymbols(u513)));
    for(var m43 = 0; m43 < b42.length; m43 += 1)l$1(i1211, b42[m43], u513[b42[m43]], l58[b42[m43]]);
};
u$1.supportsDescriptors = !!gt3;
var vt2 = u$1;
var t$1 = function() {
    if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
    if ("symbol" == typeof Symbol.iterator) return !0;
    var i1311 = {}, u613 = Symbol("test"), l64 = Object(u613);
    if ("string" == typeof u613) return !1;
    if ("[object Symbol]" !== Object.prototype.toString.call(u613)) return !1;
    if ("[object Symbol]" !== Object.prototype.toString.call(l64)) return !1;
    for(u613 in i1311[u613] = 42, i1311)return !1;
    if ("function" == typeof Object.keys && 0 !== Object.keys(i1311).length) return !1;
    if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(i1311).length) return !1;
    var b52 = Object.getOwnPropertySymbols(i1311);
    if (1 !== b52.length || b52[0] !== u613) return !1;
    if (!Object.prototype.propertyIsEnumerable.call(i1311, u613)) return !1;
    if ("function" == typeof Object.getOwnPropertyDescriptor) {
        var m52 = Object.getOwnPropertyDescriptor(i1311, u613);
        if (42 !== m52.value || !0 !== m52.enumerable) return !1;
    }
    return !0;
};
var ht2 = ("undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global).Symbol, bt2 = t$1, l$2 = function() {
    return "function" == typeof ht2 && "function" == typeof Symbol && "symbol" == typeof ht2("foo") && "symbol" == typeof Symbol("bar") && bt2();
};
var mt3 = "Function.prototype.bind called on incompatible ", Et2 = Array.prototype.slice, St2 = Object.prototype.toString, r$3 = function(i1411) {
    var u73 = this;
    if ("function" != typeof u73 || "[object Function]" !== St2.call(u73)) throw new TypeError(mt3 + u73);
    for(var l74, b62 = Et2.call(arguments, 1), c57 = function() {
        if (this instanceof l74) {
            var m72 = u73.apply(this, b62.concat(Et2.call(arguments)));
            return Object(m72) === m72 ? m72 : this;
        }
        return u73.apply(i1411, b62.concat(Et2.call(arguments)));
    }, m62 = Math.max(0, u73.length - b62.length), E27 = [], S29 = 0; S29 < m62; S29++)E27.push("$" + S29);
    if (l74 = Function("binder", "return function (" + E27.join(",") + "){ return binder.apply(this,arguments); }")(c57), u73.prototype) {
        var y33 = function() {};
        y33.prototype = u73.prototype, l74.prototype = new y33, y33.prototype = null;
    }
    return l74;
}, wt2 = Function.prototype.bind || r$3;
var jt2 = TypeError, Ot2 = Object.getOwnPropertyDescriptor;
if (Ot2) try {
    Ot2({}, "");
} catch (l83) {
    Ot2 = null;
}
var n$3 = function() {
    throw new jt2;
}, At2 = Ot2 ? function() {
    try {
        return arguments.callee, n$3;
    } catch (i) {
        try {
            return Ot2(arguments, "callee").get;
        } catch (i) {
            return n$3;
        }
    }
}() : n$3, Pt3 = l$2(), Rt2 = Object.getPrototypeOf || function(i1511) {
    return i1511.__proto__;
}, xt3 = "undefined" == typeof Uint8Array ? void 0 : Rt2(Uint8Array), qt2 = {
    "%Array%": Array,
    "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? void 0 : ArrayBuffer,
    "%ArrayBufferPrototype%": "undefined" == typeof ArrayBuffer ? void 0 : ArrayBuffer.prototype,
    "%ArrayIteratorPrototype%": Pt3 ? Rt2([][Symbol.iterator]()) : void 0,
    "%ArrayPrototype%": Array.prototype,
    "%ArrayProto_entries%": Array.prototype.entries,
    "%ArrayProto_forEach%": Array.prototype.forEach,
    "%ArrayProto_keys%": Array.prototype.keys,
    "%ArrayProto_values%": Array.prototype.values,
    "%AsyncFromSyncIteratorPrototype%": void 0,
    "%AsyncFunction%": void 0,
    "%AsyncFunctionPrototype%": void 0,
    "%AsyncGenerator%": void 0,
    "%AsyncGeneratorFunction%": void 0,
    "%AsyncGeneratorPrototype%": void 0,
    "%AsyncIteratorPrototype%": void 0,
    "%Atomics%": "undefined" == typeof Atomics ? void 0 : Atomics,
    "%Boolean%": Boolean,
    "%BooleanPrototype%": Boolean.prototype,
    "%DataView%": "undefined" == typeof DataView ? void 0 : DataView,
    "%DataViewPrototype%": "undefined" == typeof DataView ? void 0 : DataView.prototype,
    "%Date%": Date,
    "%DatePrototype%": Date.prototype,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%ErrorPrototype%": Error.prototype,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%EvalErrorPrototype%": EvalError.prototype,
    "%Float32Array%": "undefined" == typeof Float32Array ? void 0 : Float32Array,
    "%Float32ArrayPrototype%": "undefined" == typeof Float32Array ? void 0 : Float32Array.prototype,
    "%Float64Array%": "undefined" == typeof Float64Array ? void 0 : Float64Array,
    "%Float64ArrayPrototype%": "undefined" == typeof Float64Array ? void 0 : Float64Array.prototype,
    "%Function%": Function,
    "%FunctionPrototype%": Function.prototype,
    "%Generator%": void 0,
    "%GeneratorFunction%": void 0,
    "%GeneratorPrototype%": void 0,
    "%Int8Array%": "undefined" == typeof Int8Array ? void 0 : Int8Array,
    "%Int8ArrayPrototype%": "undefined" == typeof Int8Array ? void 0 : Int8Array.prototype,
    "%Int16Array%": "undefined" == typeof Int16Array ? void 0 : Int16Array,
    "%Int16ArrayPrototype%": "undefined" == typeof Int16Array ? void 0 : Int8Array.prototype,
    "%Int32Array%": "undefined" == typeof Int32Array ? void 0 : Int32Array,
    "%Int32ArrayPrototype%": "undefined" == typeof Int32Array ? void 0 : Int32Array.prototype,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": Pt3 ? Rt2(Rt2([][Symbol.iterator]())) : void 0,
    "%JSON%": "object" == typeof JSON ? JSON : void 0,
    "%JSONParse%": "object" == typeof JSON ? JSON.parse : void 0,
    "%Map%": "undefined" == typeof Map ? void 0 : Map,
    "%MapIteratorPrototype%": "undefined" != typeof Map && Pt3 ? Rt2((new Map)[Symbol.iterator]()) : void 0,
    "%MapPrototype%": "undefined" == typeof Map ? void 0 : Map.prototype,
    "%Math%": Math,
    "%Number%": Number,
    "%NumberPrototype%": Number.prototype,
    "%Object%": Object,
    "%ObjectPrototype%": Object.prototype,
    "%ObjProto_toString%": Object.prototype.toString,
    "%ObjProto_valueOf%": Object.prototype.valueOf,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": "undefined" == typeof Promise ? void 0 : Promise,
    "%PromisePrototype%": "undefined" == typeof Promise ? void 0 : Promise.prototype,
    "%PromiseProto_then%": "undefined" == typeof Promise ? void 0 : Promise.prototype.then,
    "%Promise_all%": "undefined" == typeof Promise ? void 0 : Promise.all,
    "%Promise_reject%": "undefined" == typeof Promise ? void 0 : Promise.reject,
    "%Promise_resolve%": "undefined" == typeof Promise ? void 0 : Promise.resolve,
    "%Proxy%": "undefined" == typeof Proxy ? void 0 : Proxy,
    "%RangeError%": RangeError,
    "%RangeErrorPrototype%": RangeError.prototype,
    "%ReferenceError%": ReferenceError,
    "%ReferenceErrorPrototype%": ReferenceError.prototype,
    "%Reflect%": "undefined" == typeof Reflect ? void 0 : Reflect,
    "%RegExp%": RegExp,
    "%RegExpPrototype%": RegExp.prototype,
    "%Set%": "undefined" == typeof Set ? void 0 : Set,
    "%SetIteratorPrototype%": "undefined" != typeof Set && Pt3 ? Rt2((new Set)[Symbol.iterator]()) : void 0,
    "%SetPrototype%": "undefined" == typeof Set ? void 0 : Set.prototype,
    "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? void 0 : SharedArrayBuffer,
    "%SharedArrayBufferPrototype%": "undefined" == typeof SharedArrayBuffer ? void 0 : SharedArrayBuffer.prototype,
    "%String%": String,
    "%StringIteratorPrototype%": Pt3 ? Rt2(""[Symbol.iterator]()) : void 0,
    "%StringPrototype%": String.prototype,
    "%Symbol%": Pt3 ? Symbol : void 0,
    "%SymbolPrototype%": Pt3 ? Symbol.prototype : void 0,
    "%SyntaxError%": SyntaxError,
    "%SyntaxErrorPrototype%": SyntaxError.prototype,
    "%ThrowTypeError%": At2,
    "%TypedArray%": xt3,
    "%TypedArrayPrototype%": xt3 ? xt3.prototype : void 0,
    "%TypeError%": jt2,
    "%TypeErrorPrototype%": jt2.prototype,
    "%Uint8Array%": "undefined" == typeof Uint8Array ? void 0 : Uint8Array,
    "%Uint8ArrayPrototype%": "undefined" == typeof Uint8Array ? void 0 : Uint8Array.prototype,
    "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? void 0 : Uint8ClampedArray,
    "%Uint8ClampedArrayPrototype%": "undefined" == typeof Uint8ClampedArray ? void 0 : Uint8ClampedArray.prototype,
    "%Uint16Array%": "undefined" == typeof Uint16Array ? void 0 : Uint16Array,
    "%Uint16ArrayPrototype%": "undefined" == typeof Uint16Array ? void 0 : Uint16Array.prototype,
    "%Uint32Array%": "undefined" == typeof Uint32Array ? void 0 : Uint32Array,
    "%Uint32ArrayPrototype%": "undefined" == typeof Uint32Array ? void 0 : Uint32Array.prototype,
    "%URIError%": URIError,
    "%URIErrorPrototype%": URIError.prototype,
    "%WeakMap%": "undefined" == typeof WeakMap ? void 0 : WeakMap,
    "%WeakMapPrototype%": "undefined" == typeof WeakMap ? void 0 : WeakMap.prototype,
    "%WeakSet%": "undefined" == typeof WeakSet ? void 0 : WeakSet,
    "%WeakSetPrototype%": "undefined" == typeof WeakSet ? void 0 : WeakSet.prototype
}, kt2 = wt2.call(Function.call, String.prototype.replace), It2 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, Nt2 = /\\(\\)?/g, v15 = function(i1611) {
    var u83 = [];
    return kt2(i1611, It2, function(i1711, l93, b72, m82) {
        u83[u83.length] = b72 ? kt2(m82, Nt2, "$1") : l93 || i1711;
    }), u83;
}, P10 = function(i1811, u93) {
    if (!(i1811 in qt2)) throw new SyntaxError("intrinsic " + i1811 + " does not exist!");
    if (void 0 === qt2[i1811] && !u93) throw new jt2("intrinsic " + i1811 + " exists, but is not available. Please file an issue!");
    return qt2[i1811];
}, c$2 = function(i1911, u103) {
    if ("string" != typeof i1911 || 0 === i1911.length) throw new TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && "boolean" != typeof u103) throw new TypeError('"allowMissing" argument must be a boolean');
    for(var l103 = v15(i1911), b82 = P10("%" + (l103.length > 0 ? l103[0] : "") + "%", u103), m92 = 1; m92 < l103.length; m92 += 1)if (null != b82) if (Ot2 && m92 + 1 >= l103.length) {
        var E28 = Ot2(b82, l103[m92]);
        if (!u103 && !(l103[m92] in b82)) throw new jt2("base intrinsic for " + i1911 + " exists, but the property is not available.");
        b82 = E28 ? E28.get || E28.value : b82[l103[m92]];
    } else b82 = b82[l103[m92]];
    return b82;
};
var Ft2, _t2 = wt2, Tt2 = c$2("%Function%"), Dt2 = Tt2.apply, Ut2 = Tt2.call;
(Ft2 = function() {
    return _t2.apply(Ut2, arguments);
}).apply = function() {
    return _t2.apply(Dt2, arguments);
};
var $t2 = Ft2;
var Mt2, Bt2, i$3 = function(i2010) {
    return i2010 != i2010;
}, Lt2 = (Mt2 = function(i2110, u1111) {
    return 0 === i2110 && 0 === u1111 ? 1 / i2110 == 1 / u1111 : i2110 === u1111 || !(!i$3(i2110) || !i$3(u1111));
}, Mt2), Gt2 = (Bt2 = function() {
    return "function" == typeof Object.is ? Object.is : Lt2;
}, Bt2), Ct2 = vt2, Vt2 = vt2, Wt2 = Mt2, zt2 = Bt2, l$5 = function() {
    var i2210 = Gt2();
    return Ct2(Object, {
        is: i2210
    }, {
        is: function() {
            return Object.is !== i2210;
        }
    }), i2210;
}, Yt2 = $t2(zt2(), Object);
Vt2(Yt2, {
    getPolyfill: zt2,
    implementation: Wt2,
    shim: l$5
});
var Jt2 = Yt2;
Ht2 = function(i2310) {
    return i2310 != i2310;
};
var Ht2, Kt2, Xt2 = Ht2, Qt2 = (Kt2 = function() {
    return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : Xt2;
}, vt2), Zt2 = Kt2, te7 = vt2, ee7 = Ht2, re8 = Kt2, o$6 = function() {
    var i24 = Zt2();
    return Qt2(Number, {
        isNaN: i24
    }, {
        isNaN: function() {
            return Number.isNaN !== i24;
        }
    }), i24;
}, ne8 = re8();
te7(ne8, {
    getPolyfill: re8,
    implementation: ee7,
    shim: o$6
});
var oe8 = ne8;
var ae8 = {}, ce6 = !1;
function i$5() {
    if (ce6) return ae8;
    function e1(i25) {
        return (e1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(i26) {
            return typeof i26;
        } : function(i27) {
            return i27 && "function" == typeof Symbol && i27.constructor === Symbol && i27 !== Symbol.prototype ? "symbol" : typeof i27;
        })(i25);
    }
    function n303(i28, u133) {
        return !u133 || "object" !== e1(u133) && "function" != typeof u133 ? function(i29) {
            if (void 0 === i29) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return i29;
        }(i28) : u133;
    }
    function r167(i30) {
        return (r167 = Object.setPrototypeOf ? Object.getPrototypeOf : function(i31) {
            return i31.__proto__ || Object.getPrototypeOf(i31);
        })(i30);
    }
    function o80(i32, u143) {
        return (o80 = Object.setPrototypeOf || function(i33, u153) {
            return i33.__proto__ = u153, i33;
        })(i32, u143);
    }
    ce6 = !0;
    var u12, l1112, b91 = {};
    function f59(i34, u162, l125) {
        l125 || (l125 = Error);
        var m101 = function(l132) {
            function a(l142, b101, m115) {
                var E29;
                return !function(i35, u172) {
                    if (!(i35 instanceof u172)) throw new TypeError("Cannot call a class as a function");
                }(this, a), (E29 = n303(this, r167(a).call(this, function(i36, l152, b115) {
                    return "string" == typeof u162 ? u162 : u162(i36, l152, b115);
                }(l142, b101, m115)))).code = i34, E29;
            }
            return !function(i37, u182) {
                if ("function" != typeof u182 && null !== u182) throw new TypeError("Super expression must either be null or a function");
                i37.prototype = Object.create(u182 && u182.prototype, {
                    constructor: {
                        value: i37,
                        writable: !0,
                        configurable: !0
                    }
                }), u182 && o80(i37, u182);
            }(a, l132), a;
        }(l125);
        b91[i34] = m101;
    }
    function s379(i38, u191) {
        if (Array.isArray(i38)) {
            var l161 = i38.length;
            return i38 = i38.map(function(i39) {
                return String(i39);
            }), l161 > 2 ? "one of ".concat(u191, " ").concat(i38.slice(0, l161 - 1).join(", "), ", or ") + i38[l161 - 1] : 2 === l161 ? "one of ".concat(u191, " ").concat(i38[0], " or ").concat(i38[1]) : "of ".concat(u191, " ").concat(i38[0]);
        }
        return "of ".concat(u191, " ").concat(String(i38));
    }
    return f59("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), f59("ERR_INVALID_ARG_TYPE", function(i40, l171, b121) {
        var m121, E30, S30;
        if (void 0 === u12 && (u12 = tt3()), u12("string" == typeof i40, "'name' must be a string"), "string" == typeof l171 && (E30 = "not ", l171.substr(0, E30.length) === E30) ? (m121 = "must not be", l171 = l171.replace(/^not /, "")) : m121 = "must be", function(i41, u201, l181) {
            return (void 0 === l181 || l181 > i41.length) && (l181 = i41.length), i41.substring(l181 - u201.length, l181) === u201;
        }(i40, " argument")) S30 = "The ".concat(i40, " ").concat(m121, " ").concat(s379(l171, "type"));
        else {
            var w26 = function(i42, u218, l191) {
                return "number" != typeof l191 && (l191 = 0), !(l191 + u218.length > i42.length) && -1 !== i42.indexOf(u218, l191);
            }(i40, ".") ? "property" : "argument";
            S30 = 'The "'.concat(i40, '" ').concat(w26, " ").concat(m121, " ").concat(s379(l171, "type"));
        }
        return S30 + ". Received type ".concat(e1(b121));
    }, TypeError), f59("ERR_INVALID_ARG_VALUE", function(u22, b131) {
        var m131 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
        void 0 === l1112 && (l1112 = xe4);
        var E32 = l1112.inspect(b131);
        return E32.length > 128 && (E32 = "".concat(E32.slice(0, 128), "...")), "The argument '".concat(u22, "' ").concat(m131, ". Received ").concat(E32);
    }, TypeError), f59("ERR_INVALID_RETURN_VALUE", function(i43, u23, l201) {
        var b141;
        return b141 = l201 && l201.constructor && l201.constructor.name ? "instance of ".concat(l201.constructor.name) : "type ".concat(e1(l201)), "Expected ".concat(i43, ' to be returned from the "').concat(u23, '"') + " function but got ".concat(b141, ".");
    }, TypeError), f59("ERR_MISSING_ARGS", function() {
        for(var i44 = arguments.length, l2110 = new Array(i44), b15 = 0; b15 < i44; b15++)l2110[b15] = arguments[b15];
        void 0 === u12 && (u12 = tt3()), u12(l2110.length > 0, "At least one arg needs to be specified");
        var m141 = "The ", E33 = l2110.length;
        switch(l2110 = l2110.map(function(i45) {
            return '"'.concat(i45, '"');
        }), E33){
            case 1:
                m141 += "".concat(l2110[0], " argument");
                break;
            case 2:
                m141 += "".concat(l2110[0], " and ").concat(l2110[1], " arguments");
                break;
            default:
                m141 += l2110.slice(0, E33 - 1).join(", "), m141 += ", and ".concat(l2110[E33 - 1], " arguments");
        }
        return "".concat(m141, " must be specified");
    }, TypeError), ae8.codes = b91, ae8;
}
var ie8 = {}, ue6 = !1;
function f$6() {
    if (ue6) return ie8;
    ue6 = !0;
    var l221 = T8;
    function r169(i46, u24, l23) {
        return u24 in i46 ? Object.defineProperty(i46, u24, {
            value: l23,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : i46[u24] = l23, i46;
    }
    function o83(i47, u25) {
        for(var l24 = 0; l24 < u25.length; l24++){
            var b17 = u25[l24];
            b17.enumerable = b17.enumerable || !1, b17.configurable = !0, "value" in b17 && (b17.writable = !0), Object.defineProperty(i47, b17.key, b17);
        }
    }
    function c58(i48, u26) {
        return !u26 || "object" !== y34(u26) && "function" != typeof u26 ? a(i48) : u26;
    }
    function a(i49) {
        if (void 0 === i49) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return i49;
    }
    function f60(i50) {
        var u27 = "function" == typeof Map ? new Map : void 0;
        return (f60 = function(i51) {
            if (null === i51 || (l25 = i51, -1 === Function.toString.call(l25).indexOf("[native code]"))) return i51;
            var l25;
            if ("function" != typeof i51) throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== u27) {
                if (u27.has(i51)) return u27.get(i51);
                u27.set(i51, r168);
            }
            function r168() {
                return p50(i51, arguments, h44(this).constructor);
            }
            return r168.prototype = Object.create(i51.prototype, {
                constructor: {
                    value: r168,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), g40(r168, i51);
        })(i50);
    }
    function s380() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
        } catch (i) {
            return !1;
        }
    }
    function p50(i52, u28, l26) {
        return (p50 = s380() ? Reflect.construct : function(i53, u29, l27) {
            var b18 = [
                null
            ];
            b18.push.apply(b18, u29);
            var m161 = new (Function.bind.apply(i53, b18));
            return l27 && g40(m161, l27.prototype), m161;
        }).apply(null, arguments);
    }
    function g40(i54, u30) {
        return (g40 = Object.setPrototypeOf || function(i55, u31) {
            return i55.__proto__ = u31, i55;
        })(i54, u30);
    }
    function h44(i56) {
        return (h44 = Object.setPrototypeOf ? Object.getPrototypeOf : function(i57) {
            return i57.__proto__ || Object.getPrototypeOf(i57);
        })(i56);
    }
    function y34(i58) {
        return (y34 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(i59) {
            return typeof i59;
        } : function(i60) {
            return i60 && "function" == typeof Symbol && i60.constructor === Symbol && i60 !== Symbol.prototype ? "symbol" : typeof i60;
        })(i58);
    }
    var b16 = xe4.inspect, m151 = i$5().codes.ERR_INVALID_ARG_TYPE;
    function d53(i61, u32, l28) {
        return (void 0 === l28 || l28 > i61.length) && (l28 = i61.length), i61.substring(l28 - u32.length, l28) === u32;
    }
    var E34 = "", S32 = "", w27 = "", _28 = "", $20 = {
        deepStrictEqual: "Expected values to be strictly deep-equal:",
        strictEqual: "Expected values to be strictly equal:",
        strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
        deepEqual: "Expected values to be loosely deep-equal:",
        equal: "Expected values to be loosely equal:",
        notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
        notStrictEqual: 'Expected "actual" to be strictly unequal to:',
        notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
        notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
        notEqual: 'Expected "actual" to be loosely unequal to:',
        notIdentical: "Values identical but not reference-equal:"
    };
    function O26(i62) {
        var u33 = Object.keys(i62), l29 = Object.create(Object.getPrototypeOf(i62));
        return u33.forEach(function(u34) {
            l29[u34] = i62[u34];
        }), Object.defineProperty(l29, "message", {
            value: i62.message
        }), l29;
    }
    function x29(i63) {
        return b16(i63, {
            compact: !1,
            customInspect: !1,
            depth: 1e3,
            maxArrayLength: 1 / 0,
            showHidden: !1,
            breakLength: 1 / 0,
            showProxy: !1,
            sorted: !0,
            getters: !0
        });
    }
    function q18(i64, u35, b19) {
        var m17 = "", X17 = "", Z16 = 0, et5 = "", rt7 = !1, nt21 = x29(i64), ot21 = nt21.split("\n"), at21 = x29(u35).split("\n"), ct21 = 0, it21 = "";
        if ("strictEqual" === b19 && "object" === y34(i64) && "object" === y34(u35) && null !== i64 && null !== u35 && (b19 = "strictEqualObject"), 1 === ot21.length && 1 === at21.length && ot21[0] !== at21[0]) {
            var ut11 = ot21[0].length + at21[0].length;
            if (ut11 <= 10) {
                if (!("object" === y34(i64) && null !== i64 || "object" === y34(u35) && null !== u35 || 0 === i64 && 0 === u35)) return "".concat($20[b19], "\n\n") + "".concat(ot21[0], " !== ").concat(at21[0], "\n");
            } else if ("strictEqualObject" !== b19 && ut11 < (l221.stderr && l221.stderr.isTTY ? l221.stderr.columns : 80)) {
                for(; ot21[0][ct21] === at21[0][ct21];)ct21++;
                ct21 > 2 && (it21 = "\n  ".concat(function(i65, u36) {
                    if (u36 = Math.floor(u36), 0 == i65.length || 0 == u36) return "";
                    var l30 = i65.length * u36;
                    for(u36 = Math.floor(Math.log(u36) / Math.log(2)); u36;)i65 += i65, u36--;
                    return i65 + i65.substring(0, l30 - i65.length);
                }(" ", ct21), "^"), ct21 = 0);
            }
        }
        for(var lt11 = ot21[ot21.length - 1], ft11 = at21[at21.length - 1]; lt11 === ft11 && (ct21++ < 2 ? et5 = "\n  ".concat(lt11).concat(et5) : m17 = lt11, ot21.pop(), at21.pop(), 0 !== ot21.length && 0 !== at21.length);)lt11 = ot21[ot21.length - 1], ft11 = at21[at21.length - 1];
        var pt11 = Math.max(ot21.length, at21.length);
        if (0 === pt11) {
            var st11 = nt21.split("\n");
            if (st11.length > 30) for(st11[26] = "".concat(E34, "...").concat(_28); st11.length > 27;)st11.pop();
            return "".concat($20.notIdentical, "\n\n").concat(st11.join("\n"), "\n");
        }
        ct21 > 3 && (et5 = "\n".concat(E34, "...").concat(_28).concat(et5), rt7 = !0), "" !== m17 && (et5 = "\n  ".concat(m17).concat(et5), m17 = "");
        var yt11 = 0, dt11 = $20[b19] + "\n".concat(S32, "+ actual").concat(_28, " ").concat(w27, "- expected").concat(_28), gt11 = " ".concat(E34, "...").concat(_28, " Lines skipped");
        for(ct21 = 0; ct21 < pt11; ct21++){
            var vt11 = ct21 - Z16;
            if (ot21.length < ct21 + 1) vt11 > 1 && ct21 > 2 && (vt11 > 4 ? (X17 += "\n".concat(E34, "...").concat(_28), rt7 = !0) : vt11 > 3 && (X17 += "\n  ".concat(at21[ct21 - 2]), yt11++), X17 += "\n  ".concat(at21[ct21 - 1]), yt11++), Z16 = ct21, m17 += "\n".concat(w27, "-").concat(_28, " ").concat(at21[ct21]), yt11++;
            else if (at21.length < ct21 + 1) vt11 > 1 && ct21 > 2 && (vt11 > 4 ? (X17 += "\n".concat(E34, "...").concat(_28), rt7 = !0) : vt11 > 3 && (X17 += "\n  ".concat(ot21[ct21 - 2]), yt11++), X17 += "\n  ".concat(ot21[ct21 - 1]), yt11++), Z16 = ct21, X17 += "\n".concat(S32, "+").concat(_28, " ").concat(ot21[ct21]), yt11++;
            else {
                var ht11 = at21[ct21], bt11 = ot21[ct21], mt11 = bt11 !== ht11 && (!d53(bt11, ",") || bt11.slice(0, -1) !== ht11);
                mt11 && d53(ht11, ",") && ht11.slice(0, -1) === bt11 && (mt11 = !1, bt11 += ","), mt11 ? (vt11 > 1 && ct21 > 2 && (vt11 > 4 ? (X17 += "\n".concat(E34, "...").concat(_28), rt7 = !0) : vt11 > 3 && (X17 += "\n  ".concat(ot21[ct21 - 2]), yt11++), X17 += "\n  ".concat(ot21[ct21 - 1]), yt11++), Z16 = ct21, X17 += "\n".concat(S32, "+").concat(_28, " ").concat(bt11), m17 += "\n".concat(w27, "-").concat(_28, " ").concat(ht11), yt11 += 2) : (X17 += m17, m17 = "", 1 !== vt11 && 0 !== ct21 || (X17 += "\n  ".concat(bt11), yt11++));
            }
            if (yt11 > 20 && ct21 < pt11 - 2) return "".concat(dt11).concat(gt11, "\n").concat(X17, "\n").concat(E34, "...").concat(_28).concat(m17, "\n") + "".concat(E34, "...").concat(_28);
        }
        return "".concat(dt11).concat(rt7 ? gt11 : "", "\n").concat(X17).concat(m17).concat(et5).concat(it21);
    }
    var X19 = function(i66) {
        function e2(i67) {
            var u38;
            if (!function(i68, u39) {
                if (!(i68 instanceof u39)) throw new TypeError("Cannot call a class as a function");
            }(this, e2), "object" !== y34(i67) || null === i67) throw new m151("options", "Object", i67);
            var b20 = i67.message, X18 = i67.operator, Z17 = i67.stackStartFn, et6 = i67.actual, rt8 = i67.expected, nt31 = Error.stackTraceLimit;
            if (Error.stackTraceLimit = 0, null != b20) u38 = c58(this, h44(e2).call(this, String(b20)));
            else if (l221.stderr && l221.stderr.isTTY && (l221.stderr && l221.stderr.getColorDepth && 1 !== l221.stderr.getColorDepth() ? (E34 = "[34m", S32 = "[32m", _28 = "[39m", w27 = "[31m") : (E34 = "", S32 = "", _28 = "", w27 = "")), "object" === y34(et6) && null !== et6 && "object" === y34(rt8) && null !== rt8 && "stack" in et6 && et6 instanceof Error && "stack" in rt8 && rt8 instanceof Error && (et6 = O26(et6), rt8 = O26(rt8)), "deepStrictEqual" === X18 || "strictEqual" === X18) u38 = c58(this, h44(e2).call(this, q18(et6, rt8, X18)));
            else if ("notDeepStrictEqual" === X18 || "notStrictEqual" === X18) {
                var ot3 = $20[X18], at31 = x29(et6).split("\n");
                if ("notStrictEqual" === X18 && "object" === y34(et6) && null !== et6 && (ot3 = $20.notStrictEqualObject), at31.length > 30) for(at31[26] = "".concat(E34, "...").concat(_28); at31.length > 27;)at31.pop();
                u38 = 1 === at31.length ? c58(this, h44(e2).call(this, "".concat(ot3, " ").concat(at31[0]))) : c58(this, h44(e2).call(this, "".concat(ot3, "\n\n").concat(at31.join("\n"), "\n")));
            } else {
                var ct3 = x29(et6), it31 = "", ut21 = $20[X18];
                "notDeepEqual" === X18 || "notEqual" === X18 ? (ct3 = "".concat($20[X18], "\n\n").concat(ct3)).length > 1024 && (ct3 = "".concat(ct3.slice(0, 1021), "...")) : (it31 = "".concat(x29(rt8)), ct3.length > 512 && (ct3 = "".concat(ct3.slice(0, 509), "...")), it31.length > 512 && (it31 = "".concat(it31.slice(0, 509), "...")), "deepEqual" === X18 || "equal" === X18 ? ct3 = "".concat(ut21, "\n\n").concat(ct3, "\n\nshould equal\n\n") : it31 = " ".concat(X18, " ").concat(it31)), u38 = c58(this, h44(e2).call(this, "".concat(ct3).concat(it31)));
            }
            return Error.stackTraceLimit = nt31, u38.generatedMessage = !b20, Object.defineProperty(a(u38), "name", {
                value: "AssertionError [ERR_ASSERTION]",
                enumerable: !1,
                writable: !0,
                configurable: !0
            }), u38.code = "ERR_ASSERTION", u38.actual = et6, u38.expected = rt8, u38.operator = X18, Error.captureStackTrace && Error.captureStackTrace(a(u38), Z17), u38.stack, u38.name = "AssertionError", c58(u38);
        }
        var u37, X22;
        return !function(i69, u40) {
            if ("function" != typeof u40 && null !== u40) throw new TypeError("Super expression must either be null or a function");
            i69.prototype = Object.create(u40 && u40.prototype, {
                constructor: {
                    value: i69,
                    writable: !0,
                    configurable: !0
                }
            }), u40 && g40(i69, u40);
        }(e2, i66), u37 = e2, (X22 = [
            {
                key: "toString",
                value: function() {
                    return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                }
            },
            {
                key: b16.custom,
                value: function(i70, u41) {
                    return b16(this, function(i71) {
                        for(var u42 = 1; u42 < arguments.length; u42++){
                            var l31 = null != arguments[u42] ? arguments[u42] : {}, b21 = Object.keys(l31);
                            "function" == typeof Object.getOwnPropertySymbols && (b21 = b21.concat(Object.getOwnPropertySymbols(l31).filter(function(i72) {
                                return Object.getOwnPropertyDescriptor(l31, i72).enumerable;
                            }))), b21.forEach(function(u43) {
                                r169(i71, u43, l31[u43]);
                            });
                        }
                        return i71;
                    }({}, u41, {
                        customInspect: !1,
                        depth: 0
                    }));
                }
            }
        ]) && o83(u37.prototype, X22), e2;
    }(f60(Error));
    return ie8 = X19;
}
function s$3(i73, u44) {
    return function(i74) {
        if (Array.isArray(i74)) return i74;
    }(i73) || function(i75, u45) {
        var l32 = [], b22 = !0, m18 = !1, E35 = void 0;
        try {
            for(var S33, w28 = i75[Symbol.iterator](); !(b22 = (S33 = w28.next()).done) && (l32.push(S33.value), !u45 || l32.length !== u45); b22 = !0);
        } catch (i76) {
            m18 = !0, E35 = i76;
        } finally{
            try {
                b22 || null == w28.return || w28.return();
            } finally{
                if (m18) throw E35;
            }
        }
        return l32;
    }(i73, u44) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }();
}
function p$3(i77) {
    return (p$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(i78) {
        return typeof i78;
    } : function(i79) {
        return i79 && "function" == typeof Symbol && i79.constructor === Symbol && i79 !== Symbol.prototype ? "symbol" : typeof i79;
    })(i77);
}
var le6 = void 0 !== /a/g.flags, h$1 = function(i80) {
    var u46 = [];
    return i80.forEach(function(i81) {
        return u46.push(i81);
    }), u46;
}, y$2 = function(i82) {
    var u47 = [];
    return i82.forEach(function(i83, l33) {
        return u47.push([
            l33,
            i83
        ]);
    }), u47;
}, fe5 = Object.is ? Object.is : Jt2, pe6 = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
}, se7 = Number.isNaN ? Number.isNaN : oe8;
function m$2(i84) {
    return i84.call.bind(i84);
}
var ye6 = m$2(Object.prototype.hasOwnProperty), de6 = m$2(Object.prototype.propertyIsEnumerable), ge5 = m$2(Object.prototype.toString), ve7 = xe4.types, he6 = ve7.isAnyArrayBuffer, be4 = ve7.isArrayBufferView, me5 = ve7.isDate, Ee5 = ve7.isMap, Se5 = ve7.isRegExp, we5 = ve7.isSet, je4 = ve7.isNativeError, Oe5 = ve7.isBoxedPrimitive, Ae4 = ve7.isNumberObject, Pe5 = ve7.isStringObject, Re3 = ve7.isBooleanObject, xe5 = ve7.isBigIntObject, qe3 = ve7.isSymbolObject, ke5 = ve7.isFloat32Array, Ie5 = ve7.isFloat64Array;
function U8(i85) {
    if (0 === i85.length || i85.length > 10) return !0;
    for(var u48 = 0; u48 < i85.length; u48++){
        var l34 = i85.charCodeAt(u48);
        if (l34 < 48 || l34 > 57) return !0;
    }
    return 10 === i85.length && i85 >= Math.pow(2, 32);
}
function G7(i86) {
    return Object.keys(i86).filter(U8).concat(pe6(i86).filter(Object.prototype.propertyIsEnumerable.bind(i86)));
}
function V9(i87, u49) {
    if (i87 === u49) return 0;
    for(var l35 = i87.length, b23 = u49.length, m19 = 0, E36 = Math.min(l35, b23); m19 < E36; ++m19)if (i87[m19] !== u49[m19]) {
        l35 = i87[m19], b23 = u49[m19];
        break;
    }
    return l35 < b23 ? -1 : b23 < l35 ? 1 : 0;
}
function B9(i88, u50, l36, b24) {
    if (i88 === u50) return 0 !== i88 || !l36 || fe5(i88, u50);
    if (l36) {
        if ("object" !== p$3(i88)) return "number" == typeof i88 && se7(i88) && se7(u50);
        if ("object" !== p$3(u50) || null === i88 || null === u50) return !1;
        if (Object.getPrototypeOf(i88) !== Object.getPrototypeOf(u50)) return !1;
    } else {
        if (null === i88 || "object" !== p$3(i88)) return (null === u50 || "object" !== p$3(u50)) && i88 == u50;
        if (null === u50 || "object" !== p$3(u50)) return !1;
    }
    var m20, E37, S34, w29, _29 = ge5(i88);
    if (_29 !== ge5(u50)) return !1;
    if (Array.isArray(i88)) {
        if (i88.length !== u50.length) return !1;
        var $23 = G7(i88), X20 = G7(u50);
        return $23.length === X20.length && C11(i88, u50, l36, b24, 1, $23);
    }
    if ("[object Object]" === _29 && (!Ee5(i88) && Ee5(u50) || !we5(i88) && we5(u50))) return !1;
    if (me5(i88)) {
        if (!me5(u50) || Date.prototype.getTime.call(i88) !== Date.prototype.getTime.call(u50)) return !1;
    } else if (Se5(i88)) {
        if (!Se5(u50) || (S34 = i88, w29 = u50, !(le6 ? S34.source === w29.source && S34.flags === w29.flags : RegExp.prototype.toString.call(S34) === RegExp.prototype.toString.call(w29)))) return !1;
    } else if (je4(i88) || i88 instanceof Error) {
        if (i88.message !== u50.message || i88.name !== u50.name) return !1;
    } else {
        if (be4(i88)) {
            if (l36 || !ke5(i88) && !Ie5(i88)) {
                if (!function(i89, u51) {
                    return i89.byteLength === u51.byteLength && 0 === V9(new Uint8Array(i89.buffer, i89.byteOffset, i89.byteLength), new Uint8Array(u51.buffer, u51.byteOffset, u51.byteLength));
                }(i88, u50)) return !1;
            } else if (!function(i90, u52) {
                if (i90.byteLength !== u52.byteLength) return !1;
                for(var l37 = 0; l37 < i90.byteLength; l37++)if (i90[l37] !== u52[l37]) return !1;
                return !0;
            }(i88, u50)) return !1;
            var Z18 = G7(i88), et7 = G7(u50);
            return Z18.length === et7.length && C11(i88, u50, l36, b24, 0, Z18);
        }
        if (we5(i88)) return !(!we5(u50) || i88.size !== u50.size) && C11(i88, u50, l36, b24, 2);
        if (Ee5(i88)) return !(!Ee5(u50) || i88.size !== u50.size) && C11(i88, u50, l36, b24, 3);
        if (he6(i88)) {
            if (E37 = u50, (m20 = i88).byteLength !== E37.byteLength || 0 !== V9(new Uint8Array(m20), new Uint8Array(E37))) return !1;
        } else if (Oe5(i88) && !function(i91, u53) {
            return Ae4(i91) ? Ae4(u53) && fe5(Number.prototype.valueOf.call(i91), Number.prototype.valueOf.call(u53)) : Pe5(i91) ? Pe5(u53) && String.prototype.valueOf.call(i91) === String.prototype.valueOf.call(u53) : Re3(i91) ? Re3(u53) && Boolean.prototype.valueOf.call(i91) === Boolean.prototype.valueOf.call(u53) : xe5(i91) ? xe5(u53) && BigInt.prototype.valueOf.call(i91) === BigInt.prototype.valueOf.call(u53) : qe3(u53) && Symbol.prototype.valueOf.call(i91) === Symbol.prototype.valueOf.call(u53);
        }(i88, u50)) return !1;
    }
    return C11(i88, u50, l36, b24, 0);
}
function z8(i92, u54) {
    return u54.filter(function(u55) {
        return de6(i92, u55);
    });
}
function C11(i93, u56, l38, b25, m21, E38) {
    if (5 === arguments.length) {
        E38 = Object.keys(i93);
        var S35 = Object.keys(u56);
        if (E38.length !== S35.length) return !1;
    }
    for(var w30 = 0; w30 < E38.length; w30++)if (!ye6(u56, E38[w30])) return !1;
    if (l38 && 5 === arguments.length) {
        var _30 = pe6(i93);
        if (0 !== _30.length) {
            var $24 = 0;
            for(w30 = 0; w30 < _30.length; w30++){
                var X23 = _30[w30];
                if (de6(i93, X23)) {
                    if (!de6(u56, X23)) return !1;
                    E38.push(X23), $24++;
                } else if (de6(u56, X23)) return !1;
            }
            var Z19 = pe6(u56);
            if (_30.length !== Z19.length && z8(u56, Z19).length !== $24) return !1;
        } else {
            var et8 = pe6(u56);
            if (0 !== et8.length && 0 !== z8(u56, et8).length) return !1;
        }
    }
    if (0 === E38.length && (0 === m21 || 1 === m21 && 0 === i93.length || 0 === i93.size)) return !0;
    if (void 0 === b25) b25 = {
        val1: new Map,
        val2: new Map,
        position: 0
    };
    else {
        var rt9 = b25.val1.get(i93);
        if (void 0 !== rt9) {
            var nt4 = b25.val2.get(u56);
            if (void 0 !== nt4) return rt9 === nt4;
        }
        b25.position++;
    }
    b25.val1.set(i93, b25.position), b25.val2.set(u56, b25.position);
    var ot4 = Q7(i93, u56, l38, E38, b25, m21);
    return b25.val1.delete(i93), b25.val2.delete(u56), ot4;
}
function Y7(i94, u57, l39, b26) {
    for(var m22 = h$1(i94), E39 = 0; E39 < m22.length; E39++){
        var S36 = m22[E39];
        if (B9(u57, S36, l39, b26)) return i94.delete(S36), !0;
    }
    return !1;
}
function W8(i95) {
    switch(p$3(i95)){
        case "undefined":
            return null;
        case "object":
            return;
        case "symbol":
            return !1;
        case "string":
            i95 = +i95;
        case "number":
            if (se7(i95)) return !1;
    }
    return !0;
}
function H8(i96, u58, l40) {
    var b27 = W8(l40);
    return null != b27 ? b27 : u58.has(b27) && !i96.has(b27);
}
function J7(i97, u59, l41, b28, m23) {
    var E40 = W8(l41);
    if (null != E40) return E40;
    var S37 = u59.get(E40);
    return !(void 0 === S37 && !u59.has(E40) || !B9(b28, S37, !1, m23)) && !i97.has(E40) && B9(b28, S37, !1, m23);
}
function K7(i98, u60, l42, b29, m24, E42) {
    for(var S38 = h$1(i98), w32 = 0; w32 < S38.length; w32++){
        var _33 = S38[w32];
        if (B9(l42, _33, m24, E42) && B9(b29, u60.get(_33), m24, E42)) return i98.delete(_33), !0;
    }
    return !1;
}
function Q7(i99, u61, l43, b30, m25, E210) {
    var S210 = 0;
    if (2 === E210) {
        if (!function(i100, u62, l44, b31) {
            for(var m26 = null, E43 = h$1(i100), S39 = 0; S39 < E43.length; S39++){
                var w33 = E43[S39];
                if ("object" === p$3(w33) && null !== w33) null === m26 && (m26 = new Set), m26.add(w33);
                else if (!u62.has(w33)) {
                    if (l44) return !1;
                    if (!H8(i100, u62, w33)) return !1;
                    null === m26 && (m26 = new Set), m26.add(w33);
                }
            }
            if (null !== m26) {
                for(var _34 = h$1(u62), $25 = 0; $25 < _34.length; $25++){
                    var X24 = _34[$25];
                    if ("object" === p$3(X24) && null !== X24) {
                        if (!Y7(m26, X24, l44, b31)) return !1;
                    } else if (!l44 && !i100.has(X24) && !Y7(m26, X24, l44, b31)) return !1;
                }
                return 0 === m26.size;
            }
            return !0;
        }(i99, u61, l43, m25)) return !1;
    } else if (3 === E210) {
        if (!function(i101, u63, l45, b32) {
            for(var m27 = null, E44 = y$2(i101), S40 = 0; S40 < E44.length; S40++){
                var w34 = s$3(E44[S40], 2), _35 = w34[0], $26 = w34[1];
                if ("object" === p$3(_35) && null !== _35) null === m27 && (m27 = new Set), m27.add(_35);
                else {
                    var X25 = u63.get(_35);
                    if (void 0 === X25 && !u63.has(_35) || !B9($26, X25, l45, b32)) {
                        if (l45) return !1;
                        if (!J7(i101, u63, _35, $26, b32)) return !1;
                        null === m27 && (m27 = new Set), m27.add(_35);
                    }
                }
            }
            if (null !== m27) {
                for(var Z20 = y$2(u63), et9 = 0; et9 < Z20.length; et9++){
                    var rt10 = s$3(Z20[et9], 2), nt5 = (_35 = rt10[0], rt10[1]);
                    if ("object" === p$3(_35) && null !== _35) {
                        if (!K7(m27, i101, _35, nt5, l45, b32)) return !1;
                    } else if (!(l45 || i101.has(_35) && B9(i101.get(_35), nt5, !1, b32) || K7(m27, i101, _35, nt5, !1, b32))) return !1;
                }
                return 0 === m27.size;
            }
            return !0;
        }(i99, u61, l43, m25)) return !1;
    } else if (1 === E210) for(; S210 < i99.length; S210++){
        if (!ye6(i99, S210)) {
            if (ye6(u61, S210)) return !1;
            for(var w210 = Object.keys(i99); S210 < w210.length; S210++){
                var _41 = w210[S210];
                if (!ye6(u61, _41) || !B9(i99[_41], u61[_41], l43, m25)) return !1;
            }
            return w210.length === Object.keys(u61).length;
        }
        if (!ye6(u61, S210) || !B9(i99[S210], u61[S210], l43, m25)) return !1;
    }
    for(S210 = 0; S210 < b30.length; S210++){
        var $27 = b30[S210];
        if (!B9(i99[$27], u61[$27], l43, m25)) return !1;
    }
    return !0;
}
var Ne5 = {
    isDeepEqual: function(i102, u64) {
        return B9(i102, u64, !1);
    },
    isDeepStrictEqual: function(i103, u65) {
        return B9(i103, u65, !0);
    }
}, Fe4 = {}, _e3 = !1;
function tt3() {
    if (_e3) return Fe4;
    _e3 = !0;
    var b33 = T8;
    function c59(i104) {
        return (c59 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(i105) {
            return typeof i105;
        } : function(i106) {
            return i106 && "function" == typeof Symbol && i106.constructor === Symbol && i106 !== Symbol.prototype ? "symbol" : typeof i106;
        })(i104);
    }
    var m28, E310, S310 = i$5().codes, w37 = S310.ERR_AMBIGUOUS_ARGUMENT, _51 = S310.ERR_INVALID_ARG_TYPE, $31 = S310.ERR_INVALID_ARG_VALUE, X31 = S310.ERR_INVALID_RETURN_VALUE, Z21 = S310.ERR_MISSING_ARGS, et10 = f$6(), rt11 = xe4.inspect, nt6 = xe4.types, ot5 = nt6.isPromise, at4 = nt6.isRegExp, ct4 = Object.assign ? Object.assign : l22.assign, it4 = Object.is ? Object.is : Jt2;
    function j23() {
        m28 = Ne5.isDeepEqual, E310 = Ne5.isDeepStrictEqual;
    }
    var ut31 = !1, lt21 = Fe4 = k20, ft21 = {};
    function R20(i107) {
        if (i107.message instanceof Error) throw i107.message;
        throw new et10(i107);
    }
    function A25(i108, u66, l46, b34) {
        if (!l46) {
            var m29 = !1;
            if (0 === u66) m29 = !0, b34 = "No value argument passed to `assert.ok()`";
            else if (b34 instanceof Error) throw b34;
            var E45 = new et10({
                actual: l46,
                expected: !0,
                message: b34,
                operator: "==",
                stackStartFn: i108
            });
            throw E45.generatedMessage = m29, E45;
        }
    }
    function k20() {
        for(var i109 = arguments.length, u67 = new Array(i109), l47 = 0; l47 < i109; l47++)u67[l47] = arguments[l47];
        A25.apply(void 0, [
            k20,
            u67.length
        ].concat(u67));
    }
    lt21.fail = function t(i110, u68, l48, m30, E46) {
        var S42, w35 = arguments.length;
        if (0 === w35) S42 = "Failed";
        else if (1 === w35) l48 = i110, i110 = void 0;
        else {
            if (!1 === ut31) {
                ut31 = !0;
                var _36 = b33.emitWarning ? b33.emitWarning : console.warn.bind(console);
                _36("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
            }
            2 === w35 && (m30 = "!=");
        }
        if (l48 instanceof Error) throw l48;
        var $28 = {
            actual: i110,
            expected: u68,
            operator: void 0 === m30 ? "fail" : m30,
            stackStartFn: E46 || t
        };
        void 0 !== l48 && ($28.message = l48);
        var X26 = new et10($28);
        throw S42 && (X26.message = S42, X26.generatedMessage = !0), X26;
    }, lt21.AssertionError = et10, lt21.ok = k20, lt21.equal = function t(i111, u69, l49) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        i111 != u69 && R20({
            actual: i111,
            expected: u69,
            message: l49,
            operator: "==",
            stackStartFn: t
        });
    }, lt21.notEqual = function t(i112, u70, l50) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        i112 == u70 && R20({
            actual: i112,
            expected: u70,
            message: l50,
            operator: "!=",
            stackStartFn: t
        });
    }, lt21.deepEqual = function t(i113, u71, l51) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        void 0 === m28 && j23(), m28(i113, u71) || R20({
            actual: i113,
            expected: u71,
            message: l51,
            operator: "deepEqual",
            stackStartFn: t
        });
    }, lt21.notDeepEqual = function t(i114, u72, l52) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        void 0 === m28 && j23(), m28(i114, u72) && R20({
            actual: i114,
            expected: u72,
            message: l52,
            operator: "notDeepEqual",
            stackStartFn: t
        });
    }, lt21.deepStrictEqual = function t(i115, u73, l53) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        void 0 === m28 && j23(), E310(i115, u73) || R20({
            actual: i115,
            expected: u73,
            message: l53,
            operator: "deepStrictEqual",
            stackStartFn: t
        });
    }, lt21.notDeepStrictEqual = function t(i116, u74, l54) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        void 0 === m28 && j23();
        E310(i116, u74) && R20({
            actual: i116,
            expected: u74,
            message: l54,
            operator: "notDeepStrictEqual",
            stackStartFn: t
        });
    }, lt21.strictEqual = function t(i117, u75, l55) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        it4(i117, u75) || R20({
            actual: i117,
            expected: u75,
            message: l55,
            operator: "strictEqual",
            stackStartFn: t
        });
    }, lt21.notStrictEqual = function t(i118, u76, l56) {
        if (arguments.length < 2) throw new Z21("actual", "expected");
        it4(i118, u76) && R20({
            actual: i118,
            expected: u76,
            message: l56,
            operator: "notStrictEqual",
            stackStartFn: t
        });
    };
    var pt21 = function t(i119, u77, l57) {
        var b35 = this;
        !function(i120, u78) {
            if (!(i120 instanceof u78)) throw new TypeError("Cannot call a class as a function");
        }(this, t), u77.forEach(function(u79) {
            u79 in i119 && (void 0 !== l57 && "string" == typeof l57[u79] && at4(i119[u79]) && i119[u79].test(l57[u79]) ? b35[u79] = l57[u79] : b35[u79] = i119[u79]);
        });
    };
    function T24(i121, u80, l58, b36, m31, S43) {
        if (!(l58 in i121) || !E310(i121[l58], u80[l58])) {
            if (!b36) {
                var w36 = new pt21(i121, m31), _37 = new pt21(u80, m31, i121), $29 = new et10({
                    actual: w36,
                    expected: _37,
                    operator: "deepStrictEqual",
                    stackStartFn: S43
                });
                throw $29.actual = i121, $29.expected = u80, $29.operator = S43.name, $29;
            }
            R20({
                actual: i121,
                expected: u80,
                message: b36,
                operator: S43.name,
                stackStartFn: S43
            });
        }
    }
    function P112(i122, u81, l59, b37) {
        if ("function" != typeof u81) {
            if (at4(u81)) return u81.test(i122);
            if (2 === arguments.length) throw new _51("expected", [
                "Function",
                "RegExp"
            ], u81);
            if ("object" !== c59(i122) || null === i122) {
                var E47 = new et10({
                    actual: i122,
                    expected: u81,
                    message: l59,
                    operator: "deepStrictEqual",
                    stackStartFn: b37
                });
                throw E47.operator = b37.name, E47;
            }
            var S44 = Object.keys(u81);
            if (u81 instanceof Error) S44.push("name", "message");
            else if (0 === S44.length) throw new $31("error", u81, "may not be an empty object");
            return void 0 === m28 && j23(), S44.forEach(function(m32) {
                "string" == typeof i122[m32] && at4(u81[m32]) && u81[m32].test(i122[m32]) || T24(i122, u81, m32, l59, S44, b37);
            }), !0;
        }
        return void 0 !== u81.prototype && i122 instanceof u81 || !Error.isPrototypeOf(u81) && !0 === u81.call({}, i122);
    }
    function I26(i123) {
        if ("function" != typeof i123) throw new _51("fn", "Function", i123);
        try {
            i123();
        } catch (i124) {
            return i124;
        }
        return ft21;
    }
    function D20(i125) {
        return ot5(i125) || null !== i125 && "object" === c59(i125) && "function" == typeof i125.then && "function" == typeof i125.catch;
    }
    function F24(i126) {
        return Promise.resolve().then(function() {
            var u82;
            if ("function" == typeof i126) {
                if (!D20(u82 = i126())) throw new X31("instance of Promise", "promiseFn", u82);
            } else {
                if (!D20(i126)) throw new _51("promiseFn", [
                    "Function",
                    "Promise"
                ], i126);
                u82 = i126;
            }
            return Promise.resolve().then(function() {
                return u82;
            }).then(function() {
                return ft21;
            }).catch(function(i127) {
                return i127;
            });
        });
    }
    function N23(i128, u83, l60, b38) {
        if ("string" == typeof l60) {
            if (4 === arguments.length) throw new _51("error", [
                "Object",
                "Error",
                "Function",
                "RegExp"
            ], l60);
            if ("object" === c59(u83) && null !== u83) {
                if (u83.message === l60) throw new w37("error/message", 'The error message "'.concat(u83.message, '" is identical to the message.'));
            } else if (u83 === l60) throw new w37("error/message", 'The error "'.concat(u83, '" is identical to the message.'));
            b38 = l60, l60 = void 0;
        } else if (null != l60 && "object" !== c59(l60) && "function" != typeof l60) throw new _51("error", [
            "Object",
            "Error",
            "Function",
            "RegExp"
        ], l60);
        if (u83 === ft21) {
            var m33 = "";
            l60 && l60.name && (m33 += " (".concat(l60.name, ")")), m33 += b38 ? ": ".concat(b38) : ".";
            var E48 = "rejects" === i128.name ? "rejection" : "exception";
            R20({
                actual: void 0,
                expected: l60,
                operator: i128.name,
                message: "Missing expected ".concat(E48).concat(m33),
                stackStartFn: i128
            });
        }
        if (l60 && !P112(u83, l60, b38, i128)) throw u83;
    }
    function L20(i129, u84, l61, b39) {
        if (u84 !== ft21) {
            if ("string" == typeof l61 && (b39 = l61, l61 = void 0), !l61 || P112(u84, l61)) {
                var m34 = b39 ? ": ".concat(b39) : ".", E49 = "doesNotReject" === i129.name ? "rejection" : "exception";
                R20({
                    actual: u84,
                    expected: l61,
                    operator: i129.name,
                    message: "Got unwanted ".concat(E49).concat(m34, "\n") + 'Actual message: "'.concat(u84 && u84.message, '"'),
                    stackStartFn: i129
                });
            }
            throw u84;
        }
    }
    function M24() {
        for(var i130 = arguments.length, u85 = new Array(i130), l62 = 0; l62 < i130; l62++)u85[l62] = arguments[l62];
        A25.apply(void 0, [
            M24,
            u85.length
        ].concat(u85));
    }
    return lt21.throws = function t(i131) {
        for(var u86 = arguments.length, l63 = new Array(u86 > 1 ? u86 - 1 : 0), b40 = 1; b40 < u86; b40++)l63[b40 - 1] = arguments[b40];
        N23.apply(void 0, [
            t,
            I26(i131)
        ].concat(l63));
    }, lt21.rejects = function t(i132) {
        for(var u87 = arguments.length, l64 = new Array(u87 > 1 ? u87 - 1 : 0), b41 = 1; b41 < u87; b41++)l64[b41 - 1] = arguments[b41];
        return F24(i132).then(function(i133) {
            return N23.apply(void 0, [
                t,
                i133
            ].concat(l64));
        });
    }, lt21.doesNotThrow = function t(i134) {
        for(var u88 = arguments.length, l65 = new Array(u88 > 1 ? u88 - 1 : 0), b42 = 1; b42 < u88; b42++)l65[b42 - 1] = arguments[b42];
        L20.apply(void 0, [
            t,
            I26(i134)
        ].concat(l65));
    }, lt21.doesNotReject = function t(i135) {
        for(var u89 = arguments.length, l66 = new Array(u89 > 1 ? u89 - 1 : 0), b43 = 1; b43 < u89; b43++)l66[b43 - 1] = arguments[b43];
        return F24(i135).then(function(i136) {
            return L20.apply(void 0, [
                t,
                i136
            ].concat(l66));
        });
    }, lt21.ifError = function t(i137) {
        if (null != i137) {
            var u90 = "ifError got unwanted exception: ";
            "object" === c59(i137) && "string" == typeof i137.message ? 0 === i137.message.length && i137.constructor ? u90 += i137.constructor.name : u90 += i137.message : u90 += rt11(i137);
            var l67 = new et10({
                actual: i137,
                expected: null,
                operator: "ifError",
                message: u90,
                stackStartFn: t
            }), b44 = i137.stack;
            if ("string" == typeof b44) {
                var m35 = b44.split("\n");
                m35.shift();
                for(var E50 = l67.stack.split("\n"), S45 = 0; S45 < m35.length; S45++){
                    var w38 = E50.indexOf(m35[S45]);
                    if (-1 !== w38) {
                        E50 = E50.slice(0, w38);
                        break;
                    }
                }
                l67.stack = "".concat(E50.join("\n"), "\n").concat(m35.join("\n"));
            }
            throw l67;
        }
    }, lt21.strict = ct4(M24, lt21, {
        equal: lt21.strictEqual,
        deepEqual: lt21.deepStrictEqual,
        notEqual: lt21.notStrictEqual,
        notDeepEqual: lt21.notDeepStrictEqual
    }), lt21.strict.strict = lt21.strict, Fe4;
}
var Te5 = tt3();
Te5.AssertionError;
Te5.deepEqual;
Te5.deepStrictEqual;
Te5.doesNotReject;
Te5.doesNotThrow;
Te5.equal;
Te5.fail;
Te5.ifError;
Te5.notDeepEqual;
Te5.notDeepStrictEqual;
Te5.notEqual;
Te5.notStrictEqual;
Te5.ok;
Te5.rejects;
Te5.strict;
Te5.strictEqual;
Te5.throws;
Te5.AssertionError;
Te5.deepEqual;
Te5.deepStrictEqual;
Te5.doesNotReject;
Te5.doesNotThrow;
Te5.equal;
Te5.fail;
Te5.ifError;
Te5.notDeepEqual;
Te5.notDeepStrictEqual;
Te5.notEqual;
Te5.notStrictEqual;
Te5.ok;
Te5.rejects;
Te5.strict;
Te5.strictEqual;
Te5.throws;
var De5 = Te5.AssertionError;
var Ue4 = Te5.deepEqual;
var $e5 = Te5.deepStrictEqual;
var Me5 = Te5.doesNotReject;
var Be4 = Te5.doesNotThrow;
var Le4 = Te5.equal;
var Ge2 = Te5.fail;
var Ce4 = Te5.ifError;
var Ve3 = Te5.notDeepEqual;
var We4 = Te5.notDeepStrictEqual;
var ze4 = Te5.notEqual;
var Ye2 = Te5.notStrictEqual;
var Je3 = Te5.ok;
var He2 = Te5.rejects;
var Ke4 = Te5.strict;
var Xe3 = Te5.strictEqual;
var Qe3 = Te5.throws;
const mod24 = {
    AssertionError: De5,
    deepEqual: Ue4,
    deepStrictEqual: $e5,
    default: Te5,
    doesNotReject: Me5,
    doesNotThrow: Be4,
    equal: Le4,
    fail: Ge2,
    ifError: Ce4,
    notDeepEqual: Ve3,
    notDeepStrictEqual: We4,
    notEqual: ze4,
    notStrictEqual: Ye2,
    ok: Je3,
    rejects: He2,
    strict: Ke4,
    strictEqual: Xe3,
    throws: Qe3
};
var r33 = "default" in mod24 ? mod24.default : mod24;
var a25 = "default" in mod3 ? mod3.default : mod3;
var s25 = {};
Object.defineProperty(s25, "__esModule", {
    value: true
});
s25.default = void 0;
var i24 = r33;
var n31 = a25;
const { callExpression: o29 , cloneNode: d16 , expressionStatement: l23 , identifier: u22 , importDeclaration: p19 , importDefaultSpecifier: f20 , importNamespaceSpecifier: m17 , importSpecifier: c24 , memberExpression: h15 , stringLiteral: _11 , variableDeclaration: v16 , variableDeclarator: b15  } = n31;
class ImportBuilder {
    constructor(e1, t1142, r170){
        this._statements = [];
        this._resultName = null;
        this._scope = null;
        this._hub = null;
        this._importedSource = void 0;
        this._scope = t1142;
        this._hub = r170;
        this._importedSource = e1;
    }
    done() {
        return {
            statements: this._statements,
            resultName: this._resultName
        };
    }
    import() {
        this._statements.push(p19([], _11(this._importedSource)));
        return this;
    }
    require() {
        this._statements.push(l23(o29(u22("require"), [
            _11(this._importedSource)
        ])));
        return this;
    }
    namespace(e2 = "namespace") {
        const t2132 = this._scope.generateUidIdentifier(e2);
        const r237 = this._statements[this._statements.length - 1];
        i24("ImportDeclaration" === r237.type);
        i24(0 === r237.specifiers.length);
        r237.specifiers = [
            m17(t2132)
        ];
        this._resultName = d16(t2132);
        return this;
    }
    default(e3123) {
        e3123 = this._scope.generateUidIdentifier(e3123);
        const t3106 = this._statements[this._statements.length - 1];
        i24("ImportDeclaration" === t3106.type);
        i24(0 === t3106.specifiers.length);
        t3106.specifiers = [
            f20(e3123)
        ];
        this._resultName = d16(e3123);
        return this;
    }
    named(e4106, t4104) {
        if ("default" === t4104) return this.default(e4106);
        e4106 = this._scope.generateUidIdentifier(e4106);
        const r332 = this._statements[this._statements.length - 1];
        i24("ImportDeclaration" === r332.type);
        i24(0 === r332.specifiers.length);
        r332.specifiers = [
            c24(e4106, u22(t4104))
        ];
        this._resultName = d16(e4106);
        return this;
    }
    var(e5107) {
        e5107 = this._scope.generateUidIdentifier(e5107);
        let t5104 = this._statements[this._statements.length - 1];
        if ("ExpressionStatement" !== t5104.type) {
            i24(this._resultName);
            t5104 = l23(this._resultName);
            this._statements.push(t5104);
        }
        this._statements[this._statements.length - 1] = v16("var", [
            b15(e5107, t5104.expression)
        ]);
        this._resultName = d16(e5107);
        return this;
    }
    defaultInterop() {
        return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
        return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(e6106) {
        const t629 = this._statements[this._statements.length - 1];
        if ("ExpressionStatement" === t629.type) t629.expression = o29(e6106, [
            t629.expression
        ]);
        else if ("VariableDeclaration" === t629.type) {
            i24(1 === t629.declarations.length);
            t629.declarations[0].init = o29(e6106, [
                t629.declarations[0].init
            ]);
        } else i24.fail("Unexpected type.");
        return this;
    }
    prop(e7101) {
        const t725 = this._statements[this._statements.length - 1];
        if ("ExpressionStatement" === t725.type) t725.expression = h15(t725.expression, u22(e7101));
        else if ("VariableDeclaration" === t725.type) {
            i24(1 === t725.declarations.length);
            t725.declarations[0].init = h15(t725.declarations[0].init, u22(e7101));
        } else i24.fail("Unexpected type:" + t725.type);
        return this;
    }
    read(e8105) {
        this._resultName = h15(this._resultName, u22(e8105));
    }
}
s25.default = ImportBuilder;
var g15 = {};
Object.defineProperty(g15, "__esModule", {
    value: true
});
g15.default = isModule$1;
function isModule$1(e9105) {
    const { sourceType: t821  } = e9105.node;
    if ("module" !== t821 && "script" !== t821) throw e9105.buildCodeFrameError(`Unknown sourceType "${t821}", cannot transform.`);
    return "module" === e9105.node.sourceType;
}
var y11 = "default" in mod24 ? mod24.default : mod24;
var I11 = "default" in mod3 ? mod3.default : mod3;
var N10 = {};
Object.defineProperty(N10, "__esModule", {
    value: true
});
N10.default = void 0;
var S11 = y11;
var D9 = I11;
var E11 = s25;
var w12 = g15;
const { numericLiteral: x10 , sequenceExpression: j7  } = D9;
class ImportInjector$1 {
    constructor(e1018, t919, r427){
        this._defaultOpts = {
            importedSource: null,
            importedType: "commonjs",
            importedInterop: "babel",
            importingInterop: "babel",
            ensureLiveReference: false,
            ensureNoContext: false,
            importPosition: "before"
        };
        const a135 = e1018.find((e1117)=>e1117.isProgram()
        );
        this._programPath = a135;
        this._programScope = a135.scope;
        this._hub = a135.hub;
        this._defaultOpts = this._applyDefaults(t919, r427, true);
    }
    addDefault(e1217, t1018) {
        return this.addNamed("default", e1217, t1018);
    }
    addNamed(e1316, t1143, r523) {
        S11("string" === typeof e1316);
        return this._generateImport(this._applyDefaults(t1143, r523), e1316);
    }
    addNamespace(e1415, t1217) {
        return this._generateImport(this._applyDefaults(e1415, t1217), null);
    }
    addSideEffect(e1515, t1317) {
        return this._generateImport(this._applyDefaults(e1515, t1317), false);
    }
    _applyDefaults(e1714, t1416, r622 = false) {
        const a221 = [];
        if ("string" === typeof e1714) {
            a221.push({
                importedSource: e1714
            });
            a221.push(t1416);
        } else {
            S11(!t1416, "Unexpected secondary arguments.");
            a221.push(e1714);
        }
        const s1106 = Object.assign({}, this._defaultOpts);
        for (const e1615 of a221)if (e1615) {
            Object.keys(s1106).forEach((t1515)=>{
                void 0 !== e1615[t1515] && (s1106[t1515] = e1615[t1515]);
            });
            if (!r622) {
                void 0 !== e1615.nameHint && (s1106.nameHint = e1615.nameHint);
                void 0 !== e1615.blockHoist && (s1106.blockHoist = e1615.blockHoist);
            }
        }
        return s1106;
    }
    _generateImport(e1811, t1615) {
        const r718 = "default" === t1615;
        const a320 = !!t1615 && !r718;
        const s2103 = null === t1615;
        const { importedSource: i1106 , importedType: n1136 , importedInterop: o137 , importingInterop: d119 , ensureLiveReference: l126 , ensureNoContext: u122 , nameHint: p120 , importPosition: f117 , blockHoist: m116  } = e1811;
        let c128 = p120 || t1615;
        const h116 = (0, w12.default)(this._programPath);
        const _114 = h116 && "node" === d119;
        const v116 = h116 && "babel" === d119;
        if ("after" === f117 && !h116) throw new Error('"importPosition": "after" is only supported in modules');
        const b116 = new E11.default(i1106, this._programScope, this._hub);
        if ("es6" === n1136) {
            if (!_114 && !v116) throw new Error("Cannot import an ES6 module from CommonJS");
            b116.import();
            s2103 ? b116.namespace(p120 || i1106) : (r718 || a320) && b116.named(c128, t1615);
        } else {
            if ("commonjs" !== n1136) throw new Error(`Unexpected interopType "${n1136}"`);
            if ("babel" === o137) if (_114) {
                c128 = "default" !== c128 ? c128 : i1106;
                const e1910 = `${i1106}$es6Default`;
                b116.import();
                s2103 ? b116.default(e1910).var(c128 || i1106).wildcardInterop() : r718 ? l126 ? b116.default(e1910).var(c128 || i1106).defaultInterop().read("default") : b116.default(e1910).var(c128).defaultInterop().prop(t1615) : a320 && b116.default(e1910).read(t1615);
            } else if (v116) {
                b116.import();
                s2103 ? b116.namespace(c128 || i1106) : (r718 || a320) && b116.named(c128, t1615);
            } else {
                b116.require();
                if (s2103) b116.var(c128 || i1106).wildcardInterop();
                else if ((r718 || a320) && l126) if (r718) {
                    c128 = "default" !== c128 ? c128 : i1106;
                    b116.var(c128).read(t1615);
                    b116.defaultInterop();
                } else b116.var(i1106).read(t1615);
                else r718 ? b116.var(c128).defaultInterop().prop(t1615) : a320 && b116.var(c128).prop(t1615);
            }
            else if ("compiled" === o137) if (_114) {
                b116.import();
                s2103 ? b116.default(c128 || i1106) : (r718 || a320) && b116.default(i1106).read(c128);
            } else if (v116) {
                b116.import();
                s2103 ? b116.namespace(c128 || i1106) : (r718 || a320) && b116.named(c128, t1615);
            } else {
                b116.require();
                s2103 ? b116.var(c128 || i1106) : (r718 || a320) && (l126 ? b116.var(i1106).read(c128) : b116.prop(t1615).var(c128));
            }
            else {
                if ("uncompiled" !== o137) throw new Error(`Unknown importedInterop "${o137}".`);
                if (r718 && l126) throw new Error("No live reference for commonjs default");
                if (_114) {
                    b116.import();
                    s2103 ? b116.default(c128 || i1106) : r718 ? b116.default(c128) : a320 && b116.default(i1106).read(c128);
                } else if (v116) {
                    b116.import();
                    s2103 ? b116.default(c128 || i1106) : r718 ? b116.default(c128) : a320 && b116.named(c128, t1615);
                } else {
                    b116.require();
                    s2103 ? b116.var(c128 || i1106) : r718 ? b116.var(c128) : a320 && (l126 ? b116.var(i1106).read(c128) : b116.var(c128).prop(t1615));
                }
            }
        }
        const { statements: g114 , resultName: y115  } = b116.done();
        this._insertStatements(g114, f117, m116);
        return (r718 || a320) && u122 && "Identifier" !== y115.type ? j7([
            x10(0),
            y115
        ]) : y115;
    }
    _insertStatements(e20, t1714 = "before", r817 = 3) {
        const a418 = this._programPath.get("body");
        if ("after" === t1714) {
            for(let t1813 = a418.length - 1; t1813 >= 0; t1813--)if (a418[t1813].isImportDeclaration()) {
                a418[t1813].insertAfter(e20);
                return;
            }
        } else {
            e20.forEach((e21)=>{
                e21._blockHoist = r817;
            });
            const t1913 = a418.find((e22)=>{
                const t2133 = e22.node._blockHoist;
                return Number.isFinite(t2133) && t2133 < 4;
            });
            if (t1913) {
                t1913.insertBefore(e20);
                return;
            }
        }
        this._programPath.unshiftContainer("body", e20);
    }
}
N10.default = ImportInjector$1;
var P11 = {};
Object.defineProperty(P11, "__esModule", {
    value: true
});
Object.defineProperty(P11, "ImportInjector", {
    enumerable: true,
    get: function() {
        return H9.default;
    }
});
P11.addDefault = addDefault;
P11.addNamed = addNamed;
P11.addNamespace = addNamespace;
P11.addSideEffect = addSideEffect;
Object.defineProperty(P11, "isModule", {
    enumerable: true,
    get: function() {
        return O11.default;
    }
});
var H9 = N10;
var O11 = g15;
function addDefault(e23, t2213, r913) {
    return new H9.default(e23).addDefault(t2213, r913);
}
function addNamed(e24, t2312, r1013, a513) {
    return new H9.default(e24).addNamed(t2312, r1013, a513);
}
function addNamespace(e25, t2411, r1116) {
    return new H9.default(e25).addNamespace(t2411, r1116);
}
function addSideEffect(e26, t2510, r1215) {
    return new H9.default(e26).addSideEffect(t2510, r1215);
}
const U9 = P11.__esModule, k8 = P11.ImportInjector, M8 = P11.isModule;
const $9 = P11.addDefault, q7 = P11.addNamed, C12 = P11.addNamespace, T10 = P11.addSideEffect;
const mod25 = {
    ImportInjector: k8,
    __esModule: U9,
    addDefault: $9,
    addNamed: q7,
    addNamespace: C12,
    addSideEffect: T10,
    default: P11,
    isModule: M8
};
var n32 = "default" in mod3 ? mod3.default : mod3;
var i25 = {};
Object.defineProperty(i25, "__esModule", {
    value: true
});
i25.default = simplifyAccess;
var o30 = n32;
const { LOGICAL_OPERATORS: s26 , assignmentExpression: t27 , binaryExpression: r34 , cloneNode: d17 , identifier: a26 , logicalExpression: c25 , numericLiteral: p20 , sequenceExpression: l24 , unaryExpression: f21  } = o30;
function simplifyAccess(e1, n1137, i1107 = true) {
    e1.traverse(u23, {
        scope: e1.scope,
        bindingNames: n1137,
        seen: new WeakSet,
        includeUpdateExpression: i1107
    });
}
const u23 = {
    UpdateExpression: {
        exit (e2) {
            const { scope: n2122 , bindingNames: i242 , includeUpdateExpression: o138  } = this;
            if (!o138) return;
            const s1107 = e2.get("argument");
            if (!s1107.isIdentifier()) return;
            const c129 = s1107.node.name;
            if (i242.has(c129) && n2122.getBinding(c129) === e2.scope.getBinding(c129)) if (e2.parentPath.isExpressionStatement() && !e2.isCompletionRecord()) {
                const n330 = "++" == e2.node.operator ? "+=" : "-=";
                e2.replaceWith(t27(n330, s1107.node, p20(1)));
            } else if (e2.node.prefix) e2.replaceWith(t27("=", a26(c129), r34(e2.node.operator[0], f21("+", s1107.node), p20(1))));
            else {
                const n428 = e2.scope.generateUidIdentifierBasedOnNode(s1107.node, "old");
                const i320 = n428.name;
                e2.scope.push({
                    id: n428
                });
                const o232 = r34(e2.node.operator[0], a26(i320), p20(1));
                e2.replaceWith(l24([
                    t27("=", a26(i320), f21("+", s1107.node)),
                    t27("=", d17(s1107.node), o232),
                    a26(i320)
                ]));
            }
        }
    },
    AssignmentExpression: {
        exit (e3124) {
            const { scope: n525 , seen: i416 , bindingNames: o326  } = this;
            if ("=" === e3124.node.operator) return;
            if (i416.has(e3124.node)) return;
            i416.add(e3124.node);
            const a136 = e3124.get("left");
            if (!a136.isIdentifier()) return;
            const p121 = a136.node.name;
            if (!o326.has(p121)) return;
            if (n525.getBinding(p121) !== e3124.scope.getBinding(p121)) return;
            const l127 = e3124.node.operator.slice(0, -1);
            if (s26.includes(l127)) e3124.replaceWith(c25(l127, e3124.node.left, t27("=", d17(e3124.node.left), e3124.node.right)));
            else {
                e3124.node.right = r34(l127, d17(e3124.node.left), e3124.node.right);
                e3124.node.operator = "=";
            }
        }
    }
};
const g16 = i25.__esModule;
const mod26 = {
    __esModule: g16,
    default: i25
};
var e20 = {}, t28 = false;
var n33 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew12() {
    if (t28) return e20;
    t28 = true;
    var r176 = e20 = {};
    var o84;
    var i243;
    function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
    }
    (function() {
        try {
            o84 = "function" === typeof setTimeout ? setTimeout : defaultSetTimout;
        } catch (e) {
            o84 = defaultSetTimout;
        }
        try {
            i243 = "function" === typeof clearTimeout ? clearTimeout : defaultClearTimeout;
        } catch (e1) {
            i243 = defaultClearTimeout;
        }
    })();
    function runTimeout(e2) {
        if (o84 === setTimeout) return setTimeout(e2, 0);
        if ((o84 === defaultSetTimout || !o84) && setTimeout) {
            o84 = setTimeout;
            return setTimeout(e2, 0);
        }
        try {
            return o84(e2, 0);
        } catch (t) {
            try {
                return o84.call(null, e2, 0);
            } catch (t) {
                return o84.call(this || n33, e2, 0);
            }
        }
    }
    function runClearTimeout(e3125) {
        if (i243 === clearTimeout) return clearTimeout(e3125);
        if ((i243 === defaultClearTimeout || !i243) && clearTimeout) {
            i243 = clearTimeout;
            return clearTimeout(e3125);
        }
        try {
            return i243(e3125);
        } catch (t) {
            try {
                return i243.call(null, e3125);
            } catch (t) {
                return i243.call(this || n33, e3125);
            }
        }
    }
    var u94 = [];
    var a = false;
    var l68;
    var c60 = -1;
    function cleanUpNextTick1() {
        if (a && l68) {
            a = false;
            l68.length ? u94 = l68.concat(u94) : c60 = -1;
            u94.length && drainQueue1();
        }
    }
    function drainQueue1() {
        if (!a) {
            var e4107 = runTimeout(cleanUpNextTick1);
            a = true;
            var t1144 = u94.length;
            while(t1144){
                l68 = u94;
                u94 = [];
                while(++c60 < t1144)l68 && l68[c60].run();
                c60 = -1;
                t1144 = u94.length;
            }
            l68 = null;
            a = false;
            runClearTimeout(e4107);
        }
    }
    r176.nextTick = function(e5108) {
        var t2134 = new Array(arguments.length - 1);
        if (arguments.length > 1) for(var n1138 = 1; n1138 < arguments.length; n1138++)t2134[n1138 - 1] = arguments[n1138];
        u94.push(new Item1(e5108, t2134));
        1 !== u94.length || a || runTimeout(drainQueue1);
    };
    function Item1(e6107, t3107) {
        (this || n33).fun = e6107;
        (this || n33).array = t3107;
    }
    Item1.prototype.run = function() {
        (this || n33).fun.apply(null, (this || n33).array);
    };
    r176.title = "browser";
    r176.browser = true;
    r176.env = {};
    r176.argv = [];
    r176.version = "";
    r176.versions = {};
    function noop3() {}
    r176.on = noop3;
    r176.addListener = noop3;
    r176.once = noop3;
    r176.off = noop3;
    r176.removeListener = noop3;
    r176.removeAllListeners = noop3;
    r176.emit = noop3;
    r176.prependListener = noop3;
    r176.prependOnceListener = noop3;
    r176.listeners = function(e) {
        return [];
    };
    r176.binding = function(e) {
        throw new Error("process.binding is not supported");
    };
    r176.cwd = function() {
        return "/";
    };
    r176.chdir = function(e) {
        throw new Error("process.chdir is not supported");
    };
    r176.umask = function() {
        return 0;
    };
    return e20;
}
var r35 = dew12();
r35.platform = "browser";
r35.addListener;
r35.argv;
r35.binding;
r35.browser;
r35.chdir;
r35.cwd;
r35.emit;
r35.env;
r35.listeners;
r35.nextTick;
r35.off;
r35.on;
r35.once;
r35.prependListener;
r35.prependOnceListener;
r35.removeAllListeners;
r35.removeListener;
r35.title;
r35.umask;
r35.version;
r35.versions;
var r36 = {}, t29 = false;
function dew13() {
    if (t29) return r36;
    t29 = true;
    var a137 = r35;
    function assertPath(e1) {
        if ("string" !== typeof e1) throw new TypeError("Path must be a string. Received " + JSON.stringify(e1));
    }
    function normalizeStringPosix(e2, r177) {
        var t1145 = "";
        var a222 = 0;
        var n304 = -1;
        var i244 = 0;
        var l69;
        for(var o85 = 0; o85 <= e2.length; ++o85){
            if (o85 < e2.length) l69 = e2.charCodeAt(o85);
            else {
                if (47 === l69) break;
                l69 = 47;
            }
            if (47 === l69) {
                if (n304 === o85 - 1 || 1 === i244) ;
                else if (n304 !== o85 - 1 && 2 === i244) {
                    if (t1145.length < 2 || 2 !== a222 || 46 !== t1145.charCodeAt(t1145.length - 1) || 46 !== t1145.charCodeAt(t1145.length - 2)) {
                        if (t1145.length > 2) {
                            var s381 = t1145.lastIndexOf("/");
                            if (s381 !== t1145.length - 1) {
                                if (-1 === s381) {
                                    t1145 = "";
                                    a222 = 0;
                                } else {
                                    t1145 = t1145.slice(0, s381);
                                    a222 = t1145.length - 1 - t1145.lastIndexOf("/");
                                }
                                n304 = o85;
                                i244 = 0;
                                continue;
                            }
                        } else if (2 === t1145.length || 1 === t1145.length) {
                            t1145 = "";
                            a222 = 0;
                            n304 = o85;
                            i244 = 0;
                            continue;
                        }
                    }
                    if (r177) {
                        t1145.length > 0 ? t1145 += "/.." : t1145 = "..";
                        a222 = 2;
                    }
                } else {
                    t1145.length > 0 ? t1145 += "/" + e2.slice(n304 + 1, o85) : t1145 = e2.slice(n304 + 1, o85);
                    a222 = o85 - n304 - 1;
                }
                n304 = o85;
                i244 = 0;
            } else 46 === l69 && -1 !== i244 ? ++i244 : i244 = -1;
        }
        return t1145;
    }
    function _format(e3126, r238) {
        var t2135 = r238.dir || r238.root;
        var a321 = r238.base || (r238.name || "") + (r238.ext || "");
        return t2135 ? t2135 === r238.root ? t2135 + a321 : t2135 + e3126 + a321 : a321;
    }
    var n1139 = {
        resolve: function resolve() {
            var e4108 = "";
            var r333 = false;
            var t3108;
            for(var n305 = arguments.length - 1; n305 >= -1 && !r333; n305--){
                var i245;
                if (n305 >= 0) i245 = arguments[n305];
                else {
                    void 0 === t3108 && (t3108 = a137.cwd());
                    i245 = t3108;
                }
                assertPath(i245);
                if (0 !== i245.length) {
                    e4108 = i245 + "/" + e4108;
                    r333 = 47 === i245.charCodeAt(0);
                }
            }
            e4108 = normalizeStringPosix(e4108, !r333);
            return r333 ? e4108.length > 0 ? "/" + e4108 : "/" : e4108.length > 0 ? e4108 : ".";
        },
        normalize: function normalize(e5109) {
            assertPath(e5109);
            if (0 === e5109.length) return ".";
            var r428 = 47 === e5109.charCodeAt(0);
            var t4105 = 47 === e5109.charCodeAt(e5109.length - 1);
            e5109 = normalizeStringPosix(e5109, !r428);
            0 !== e5109.length || r428 || (e5109 = ".");
            e5109.length > 0 && t4105 && (e5109 += "/");
            return r428 ? "/" + e5109 : e5109;
        },
        isAbsolute: function isAbsolute(e6108) {
            assertPath(e6108);
            return e6108.length > 0 && 47 === e6108.charCodeAt(0);
        },
        join: function join() {
            if (0 === arguments.length) return ".";
            var e7102;
            for(var r524 = 0; r524 < arguments.length; ++r524){
                var t5105 = arguments[r524];
                assertPath(t5105);
                t5105.length > 0 && (void 0 === e7102 ? e7102 = t5105 : e7102 += "/" + t5105);
            }
            return void 0 === e7102 ? "." : n1139.normalize(e7102);
        },
        relative: function relative(e8106, r623) {
            assertPath(e8106);
            assertPath(r623);
            if (e8106 === r623) return "";
            e8106 = n1139.resolve(e8106);
            r623 = n1139.resolve(r623);
            if (e8106 === r623) return "";
            var t630 = 1;
            for(; t630 < e8106.length; ++t630)if (47 !== e8106.charCodeAt(t630)) break;
            var a419 = e8106.length;
            var i246 = a419 - t630;
            var l70 = 1;
            for(; l70 < r623.length; ++l70)if (47 !== r623.charCodeAt(l70)) break;
            var o86 = r623.length;
            var s382 = o86 - l70;
            var f64 = i246 < s382 ? i246 : s382;
            var h45 = -1;
            var v36 = 0;
            for(; v36 <= f64; ++v36){
                if (v36 === f64) {
                    if (s382 > f64) {
                        if (47 === r623.charCodeAt(l70 + v36)) return r623.slice(l70 + v36 + 1);
                        if (0 === v36) return r623.slice(l70 + v36);
                    } else i246 > f64 && (47 === e8106.charCodeAt(t630 + v36) ? h45 = v36 : 0 === v36 && (h45 = 0));
                    break;
                }
                var c64 = e8106.charCodeAt(t630 + v36);
                var u95 = r623.charCodeAt(l70 + v36);
                if (c64 !== u95) break;
                47 === c64 && (h45 = v36);
            }
            var g42 = "";
            for(v36 = t630 + h45 + 1; v36 <= a419; ++v36)v36 !== a419 && 47 !== e8106.charCodeAt(v36) || (0 === g42.length ? g42 += ".." : g42 += "/..");
            if (g42.length > 0) return g42 + r623.slice(l70 + h45);
            l70 += h45;
            47 === r623.charCodeAt(l70) && ++l70;
            return r623.slice(l70);
        },
        _makeLong: function _makeLong(e9106) {
            return e9106;
        },
        dirname: function dirname(e1019) {
            assertPath(e1019);
            if (0 === e1019.length) return ".";
            var r719 = e1019.charCodeAt(0);
            var t726 = 47 === r719;
            var a514 = -1;
            var n306 = true;
            for(var i247 = e1019.length - 1; i247 >= 1; --i247){
                r719 = e1019.charCodeAt(i247);
                if (47 === r719) {
                    if (!n306) {
                        a514 = i247;
                        break;
                    }
                } else n306 = false;
            }
            return -1 === a514 ? t726 ? "/" : "." : t726 && 1 === a514 ? "//" : e1019.slice(0, a514);
        },
        basename: function basename(e1118, r818) {
            if (void 0 !== r818 && "string" !== typeof r818) throw new TypeError('"ext" argument must be a string');
            assertPath(e1118);
            var t822 = 0;
            var a612 = -1;
            var n307 = true;
            var i248;
            if (void 0 !== r818 && r818.length > 0 && r818.length <= e1118.length) {
                if (r818.length === e1118.length && r818 === e1118) return "";
                var l75 = r818.length - 1;
                var o87 = -1;
                for(i248 = e1118.length - 1; i248 >= 0; --i248){
                    var s383 = e1118.charCodeAt(i248);
                    if (47 === s383) {
                        if (!n307) {
                            t822 = i248 + 1;
                            break;
                        }
                    } else {
                        if (-1 === o87) {
                            n307 = false;
                            o87 = i248 + 1;
                        }
                        if (l75 >= 0) if (s383 === r818.charCodeAt(l75)) -1 === --l75 && (a612 = i248);
                        else {
                            l75 = -1;
                            a612 = o87;
                        }
                    }
                }
                t822 === a612 ? a612 = o87 : -1 === a612 && (a612 = e1118.length);
                return e1118.slice(t822, a612);
            }
            for(i248 = e1118.length - 1; i248 >= 0; --i248)if (47 === e1118.charCodeAt(i248)) {
                if (!n307) {
                    t822 = i248 + 1;
                    break;
                }
            } else if (-1 === a612) {
                n307 = false;
                a612 = i248 + 1;
            }
            return -1 === a612 ? "" : e1118.slice(t822, a612);
        },
        extname: function extname(e1218) {
            assertPath(e1218);
            var r914 = -1;
            var t920 = 0;
            var a712 = -1;
            var n308 = true;
            var i249 = 0;
            for(var l76 = e1218.length - 1; l76 >= 0; --l76){
                var o88 = e1218.charCodeAt(l76);
                if (47 !== o88) {
                    if (-1 === a712) {
                        n308 = false;
                        a712 = l76 + 1;
                    }
                    46 === o88 ? -1 === r914 ? r914 = l76 : 1 !== i249 && (i249 = 1) : -1 !== r914 && (i249 = -1);
                } else if (!n308) {
                    t920 = l76 + 1;
                    break;
                }
            }
            return -1 === r914 || -1 === a712 || 0 === i249 || 1 === i249 && r914 === a712 - 1 && r914 === t920 + 1 ? "" : e1218.slice(r914, a712);
        },
        format: function format(e1317) {
            if (null === e1317 || "object" !== typeof e1317) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof e1317);
            return _format("/", e1317);
        },
        parse: function parse(e1416) {
            assertPath(e1416);
            var r1014 = {
                root: "",
                dir: "",
                base: "",
                ext: "",
                name: ""
            };
            if (0 === e1416.length) return r1014;
            var t1019 = e1416.charCodeAt(0);
            var a85 = 47 === t1019;
            var n309;
            if (a85) {
                r1014.root = "/";
                n309 = 1;
            } else n309 = 0;
            var i250 = -1;
            var l77 = 0;
            var o89 = -1;
            var s384 = true;
            var f65 = e1416.length - 1;
            var h46 = 0;
            for(; f65 >= n309; --f65){
                t1019 = e1416.charCodeAt(f65);
                if (47 !== t1019) {
                    if (-1 === o89) {
                        s384 = false;
                        o89 = f65 + 1;
                    }
                    46 === t1019 ? -1 === i250 ? i250 = f65 : 1 !== h46 && (h46 = 1) : -1 !== i250 && (h46 = -1);
                } else if (!s384) {
                    l77 = f65 + 1;
                    break;
                }
            }
            if (-1 === i250 || -1 === o89 || 0 === h46 || 1 === h46 && i250 === o89 - 1 && i250 === l77 + 1) -1 !== o89 && (r1014.base = r1014.name = 0 === l77 && a85 ? e1416.slice(1, o89) : e1416.slice(l77, o89));
            else {
                if (0 === l77 && a85) {
                    r1014.name = e1416.slice(1, i250);
                    r1014.base = e1416.slice(1, o89);
                } else {
                    r1014.name = e1416.slice(l77, i250);
                    r1014.base = e1416.slice(l77, o89);
                }
                r1014.ext = e1416.slice(i250, o89);
            }
            l77 > 0 ? r1014.dir = e1416.slice(0, l77 - 1) : a85 && (r1014.dir = "/");
            return r1014;
        },
        sep: "/",
        delimiter: ":",
        win32: null,
        posix: null
    };
    n1139.posix = n1139;
    r36 = n1139;
    return r36;
}
const a27 = dew13();
var r37 = a27._makeLong;
var v17 = a27.basename;
var o31 = a27.delimiter;
var s27 = a27.dirname;
var i26 = a27.extname;
var m18 = a27.format;
var t30 = a27.isAbsolute;
var n34 = a27.join;
var p21 = a27.normalize;
var d18 = a27.parse;
var l25 = a27.posix;
var f22 = a27.relative;
var j8 = a27.resolve;
var x11 = a27.sep;
var _12 = a27.win32;
const mod27 = {
    default: a27,
    _makeLong: r37,
    basename: v17,
    delimiter: o31,
    dirname: s27,
    extname: i26,
    format: m18,
    isAbsolute: t30,
    join: n34,
    normalize: p21,
    parse: d18,
    posix: l25,
    relative: f22,
    resolve: j8,
    sep: x11,
    win32: _12
};
var r38 = "default" in mod27 ? mod27.default : mod27;
var a28 = "default" in mod2 ? mod2.default : mod2;
var i27 = "default" in mod6 ? mod6.default : mod6;
var n35 = {};
Object.defineProperty(n35, "__esModule", {
    value: true
});
n35.default = normalizeModuleAndLoadMetadata;
n35.hasExports = hasExports;
n35.isSideEffectImport = isSideEffectImport;
n35.validateImportInteropOption = validateImportInteropOption;
var s28 = r38;
var l26 = a28;
var c26 = i27;
function hasExports(e1) {
    return e1.hasExports;
}
function isSideEffectImport(e2) {
    return 0 === e2.imports.size && 0 === e2.importsNamespace.size && 0 === e2.reexports.size && 0 === e2.reexportNamespace.size && !e2.reexportAll;
}
function validateImportInteropOption(e3127) {
    if ("function" !== typeof e3127 && "none" !== e3127 && "babel" !== e3127 && "node" !== e3127) throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${e3127}).`);
    return e3127;
}
function resolveImportInterop(e4109, t1146) {
    return "function" === typeof e4109 ? validateImportInteropOption(e4109(t1146)) : e4109;
}
function normalizeModuleAndLoadMetadata(e6109, t2136, { importInterop: o139 , initializeReexports: r178 = false , lazy: a138 = false , esNamespaceOnly: i1108 = false  }) {
    t2136 || (t2136 = e6109.scope.generateUidIdentifier("exports").name);
    const n1140 = new Set;
    nameAnonymousExports(e6109);
    const { local: s1108 , source: l128 , hasExports: c130  } = getModuleMetadata(e6109, {
        initializeReexports: r178,
        lazy: a138
    }, n1140);
    removeModuleDeclarations(e6109);
    for (const [, e5110] of l128){
        e5110.importsNamespace.size > 0 && (e5110.name = e5110.importsNamespace.values().next().value);
        const t3109 = resolveImportInterop(o139, e5110.source);
        "none" === t3109 ? e5110.interop = "none" : "node" === t3109 && "namespace" === e5110.interop ? e5110.interop = "node-namespace" : "node" === t3109 && "default" === e5110.interop ? e5110.interop = "node-default" : i1108 && "namespace" === e5110.interop && (e5110.interop = "default");
    }
    return {
        exportName: t2136,
        exportNameListName: null,
        hasExports: c130,
        local: s1108,
        source: l128,
        stringSpecifiers: n1140
    };
}
function getExportSpecifierName(e7103, t4106) {
    if (e7103.isIdentifier()) return e7103.node.name;
    if (e7103.isStringLiteral()) {
        const o233 = e7103.node.value;
        (0, l26.isIdentifierName)(o233) || t4106.add(o233);
        return o233;
    }
    throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${e7103.node.type}`);
}
function assertExportSpecifier(e8107) {
    if (!e8107.isExportSpecifier()) throw e8107.isExportNamespaceSpecifier() ? e8107.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.") : e8107.buildCodeFrameError("Unexpected export specifier type");
}
function getModuleMetadata(e1119, { lazy: t5106 , initializeReexports: o420  }, r239) {
    const a223 = getLocalExportMetadata(e1119, o420, r239);
    const i251 = new Map;
    const getData = (t631)=>{
        const o519 = t631.value;
        let r334 = i251.get(o519);
        if (!r334) {
            r334 = {
                name: e1119.scope.generateUidIdentifier((0, s28.basename)(o519, (0, s28.extname)(o519))).name,
                interop: "none",
                loc: null,
                imports: new Map,
                importsNamespace: new Set,
                reexports: new Map,
                reexportNamespace: new Set,
                reexportAll: null,
                lazy: false,
                source: o519
            };
            i251.set(o519, r334);
        }
        return r334;
    };
    let n2123 = false;
    e1119.get("body").forEach((e1219)=>{
        if (e1219.isImportDeclaration()) {
            const t727 = getData(e1219.node.source);
            t727.loc || (t727.loc = e1219.node.loc);
            e1219.get("specifiers").forEach((e1318)=>{
                if (e1318.isImportDefaultSpecifier()) {
                    const o613 = e1318.get("local").node.name;
                    t727.imports.set(o613, "default");
                    const r429 = a223.get(o613);
                    if (r429) {
                        a223.delete(o613);
                        r429.names.forEach((e1417)=>{
                            t727.reexports.set(e1417, "default");
                        });
                    }
                } else if (e1318.isImportNamespaceSpecifier()) {
                    const o712 = e1318.get("local").node.name;
                    t727.importsNamespace.add(o712);
                    const r525 = a223.get(o712);
                    if (r525) {
                        a223.delete(o712);
                        r525.names.forEach((e1516)=>{
                            t727.reexportNamespace.add(e1516);
                        });
                    }
                } else if (e1318.isImportSpecifier()) {
                    const o810 = getExportSpecifierName(e1318.get("imported"), r239);
                    const i321 = e1318.get("local").node.name;
                    t727.imports.set(i321, o810);
                    const n331 = a223.get(i321);
                    if (n331) {
                        a223.delete(i321);
                        n331.names.forEach((e1616)=>{
                            t727.reexports.set(e1616, o810);
                        });
                    }
                }
            });
        } else if (e1219.isExportAllDeclaration()) {
            n2123 = true;
            const t823 = getData(e1219.node.source);
            t823.loc || (t823.loc = e1219.node.loc);
            t823.reexportAll = {
                loc: e1219.node.loc
            };
        } else if (e1219.isExportNamedDeclaration() && e1219.node.source) {
            n2123 = true;
            const t921 = getData(e1219.node.source);
            t921.loc || (t921.loc = e1219.node.loc);
            e1219.get("specifiers").forEach((e1715)=>{
                assertExportSpecifier(e1715);
                const o93 = getExportSpecifierName(e1715.get("local"), r239);
                const a322 = getExportSpecifierName(e1715.get("exported"), r239);
                t921.reexports.set(a322, o93);
                if ("__esModule" === a322) throw e1715.get("exported").buildCodeFrameError('Illegal export "__esModule".');
            });
        } else (e1219.isExportNamedDeclaration() || e1219.isExportDefaultDeclaration()) && (n2123 = true);
    });
    for (const e9107 of i251.values()){
        let t1020 = false;
        let o103 = false;
        if (e9107.importsNamespace.size > 0) {
            t1020 = true;
            o103 = true;
        }
        e9107.reexportAll && (o103 = true);
        for (const r720 of e9107.imports.values())"default" === r720 ? t1020 = true : o103 = true;
        for (const r624 of e9107.reexports.values())"default" === r624 ? t1020 = true : o103 = true;
        t1020 && o103 ? e9107.interop = "namespace" : t1020 && (e9107.interop = "default");
    }
    for (const [e1020, o327] of i251)if (false !== t5106 && !(isSideEffectImport(o327) || o327.reexportAll)) if (true === t5106) o327.lazy = !/\./.test(e1020);
    else if (Array.isArray(t5106)) o327.lazy = -1 !== t5106.indexOf(e1020);
    else {
        if ("function" !== typeof t5106) throw new Error(".lazy must be a boolean, string array, or function");
        o327.lazy = t5106(e1020);
    }
    return {
        hasExports: n2123,
        local: a223,
        source: i251
    };
}
function getLocalExportMetadata(e1812, t1147, o1112) {
    const r819 = new Map;
    e1812.get("body").forEach((e1911)=>{
        let o1211;
        if (e1911.isImportDeclaration()) o1211 = "import";
        else {
            e1911.isExportDefaultDeclaration() && (e1911 = e1911.get("declaration"));
            if (e1911.isExportNamedDeclaration()) {
                if (e1911.node.declaration) e1911 = e1911.get("declaration");
                else if (t1147 && e1911.node.source && e1911.get("source").isStringLiteral()) {
                    e1911.get("specifiers").forEach((e2010)=>{
                        assertExportSpecifier(e2010);
                        r819.set(e2010.get("local").node.name, "block");
                    });
                    return;
                }
            }
            if (e1911.isFunctionDeclaration()) o1211 = "hoisted";
            else if (e1911.isClassDeclaration()) o1211 = "block";
            else if (e1911.isVariableDeclaration({
                kind: "var"
            })) o1211 = "var";
            else {
                if (!e1911.isVariableDeclaration()) return;
                o1211 = "block";
            }
        }
        Object.keys(e1911.getOuterBindingIdentifiers()).forEach((e21)=>{
            r819.set(e21, o1211);
        });
    });
    const a420 = new Map;
    const getLocalMetadata = (e22)=>{
        const t1218 = e22.node.name;
        let o1310 = a420.get(t1218);
        if (!o1310) {
            const i417 = r819.get(t1218);
            if (void 0 === i417) throw e22.buildCodeFrameError(`Exporting local "${t1218}", which is not declared.`);
            o1310 = {
                names: [],
                kind: i417
            };
            a420.set(t1218, o1310);
        }
        return o1310;
    };
    e1812.get("body").forEach((e23)=>{
        if (!e23.isExportNamedDeclaration() || !t1147 && e23.node.source) {
            if (e23.isExportDefaultDeclaration()) {
                const t1318 = e23.get("declaration");
                if (!t1318.isFunctionDeclaration() && !t1318.isClassDeclaration()) throw t1318.buildCodeFrameError("Unexpected default expression export.");
                getLocalMetadata(t1318.get("id")).names.push("default");
            }
        } else if (e23.node.declaration) {
            const t1417 = e23.get("declaration");
            const o14 = t1417.getOuterBindingIdentifierPaths();
            Object.keys(o14).forEach((e24)=>{
                if ("__esModule" === e24) throw t1417.buildCodeFrameError('Illegal export "__esModule".');
                getLocalMetadata(o14[e24]).names.push(e24);
            });
        } else e23.get("specifiers").forEach((e25)=>{
            const t1516 = e25.get("local");
            const r915 = e25.get("exported");
            const a515 = getLocalMetadata(t1516);
            const i514 = getExportSpecifierName(r915, o1112);
            if ("__esModule" === i514) throw r915.buildCodeFrameError('Illegal export "__esModule".');
            a515.names.push(i514);
        });
    });
    return a420;
}
function nameAnonymousExports(e26) {
    e26.get("body").forEach((e27)=>{
        e27.isExportDefaultDeclaration() && (0, c26.default)(e27);
    });
}
function removeModuleDeclarations(e28) {
    e28.get("body").forEach((e29)=>{
        if (e29.isImportDeclaration()) e29.remove();
        else if (e29.isExportNamedDeclaration()) if (e29.node.declaration) {
            e29.node.declaration._blockHoist = e29.node._blockHoist;
            e29.replaceWith(e29.node.declaration);
        } else e29.remove();
        else if (e29.isExportDefaultDeclaration()) {
            const t1616 = e29.get("declaration");
            if (!t1616.isFunctionDeclaration() && !t1616.isClassDeclaration()) throw t1616.buildCodeFrameError("Unexpected default expression export.");
            t1616._blockHoist = e29.node._blockHoist;
            e29.replaceWith(t1616);
        } else e29.isExportAllDeclaration() && e29.remove();
    });
}
n35.__esModule;
n35.hasExports, n35.isSideEffectImport, n35.validateImportInteropOption;
var l27 = "default" in mod19 ? mod19.default : mod19;
var u24 = "default" in mod22 ? mod22.default : mod22;
var d19 = "default" in mod3 ? mod3.default : mod3;
var c27 = {};
Object.defineProperty(c27, "__esModule", {
    value: true
});
c27.default = rewriteThis$1;
var p22 = l27;
var f23 = u24;
var m19 = d19;
const { numericLiteral: E12 , unaryExpression: h16  } = m19;
function rewriteThis$1(e1) {
    (0, f23.default)(e1.node, Object.assign({}, b16, {
        noScope: true
    }));
}
const b16 = f23.default.visitors.merge([
    p22.default,
    {
        ThisExpression (e2) {
            e2.replaceWith(h16("void", E12(0), true));
        }
    }
]);
var g17 = "default" in mod24 ? mod24.default : mod24;
var S12 = "default" in mod3 ? mod3.default : mod3;
var P12 = "default" in mod20 ? mod20.default : mod20;
var I12 = "default" in mod26 ? mod26.default : mod26;
var y12 = {};
Object.defineProperty(y12, "__esModule", {
    value: true
});
y12.default = rewriteLiveReferences;
var x12 = g17;
var M9 = S12;
var N11 = P12;
var v18 = I12;
const { assignmentExpression: A10 , callExpression: O12 , cloneNode: R9 , expressionStatement: T11 , getOuterBindingIdentifiers: k9 , identifier: _13 , isMemberExpression: w13 , isVariableDeclaration: C13 , jsxIdentifier: X8 , jsxMemberExpression: j9 , memberExpression: L9 , numericLiteral: H10 , sequenceExpression: B10 , stringLiteral: D10 , variableDeclaration: q8 , variableDeclarator: U10  } = M9;
function isInType(e3128) {
    do {
        switch(e3128.parent.type){
            case "TSTypeAnnotation":
            case "TSTypeAliasDeclaration":
            case "TSTypeReference":
            case "TypeAnnotation":
            case "TypeAlias":
                return true;
            case "ExportSpecifier":
                return "type" === e3128.parentPath.parent.exportKind;
            default:
                if (e3128.parentPath.isStatement() || e3128.parentPath.isExpression()) return false;
        }
    }while (e3128 = e3128.parentPath)
}
function rewriteLiveReferences(e6110, t1148) {
    const n2124 = new Map;
    const r240 = new Map;
    const requeueInParent = (t2137)=>{
        e6110.requeue(t2137);
    };
    for (const [e4110, r179] of t1148.source){
        for (const [t4107, o140] of r179.imports)n2124.set(t4107, [
            e4110,
            o140,
            null
        ]);
        for (const t3110 of r179.importsNamespace)n2124.set(t3110, [
            e4110,
            null,
            t3110
        ]);
    }
    for (const [e5111, n1141] of t1148.local){
        let t5107 = r240.get(e5111);
        if (!t5107) {
            t5107 = [];
            r240.set(e5111, t5107);
        }
        t5107.push(...n1141.names);
    }
    const o234 = {
        metadata: t1148,
        requeueInParent: requeueInParent,
        scope: e6110.scope,
        exported: r240
    };
    e6110.traverse(W9, o234);
    (0, v18.default)(e6110, new Set([
        ...Array.from(n2124.keys()),
        ...Array.from(r240.keys())
    ]), false);
    const a139 = {
        seen: new WeakSet,
        metadata: t1148,
        requeueInParent: requeueInParent,
        scope: e6110.scope,
        imported: n2124,
        exported: r240,
        buildImportReference: ([e7104, n332, r335], o328)=>{
            const a224 = t1148.source.get(e7104);
            if (r335) {
                a224.lazy && (o328 = O12(o328, []));
                return o328;
            }
            let s1109 = _13(a224.name);
            a224.lazy && (s1109 = O12(s1109, []));
            if ("default" === n332 && "node-default" === a224.interop) return s1109;
            const i1109 = t1148.stringSpecifiers.has(n332);
            return L9(s1109, i1109 ? D10(n332) : _13(n332), i1109);
        }
    };
    e6110.traverse(z9, a139);
}
const W9 = {
    Scope (e8108) {
        e8108.skip();
    },
    ClassDeclaration (e9108) {
        const { requeueInParent: t632 , exported: n429 , metadata: r430  } = this;
        const { id: o421  } = e9108.node;
        if (!o421) throw new Error("Expected class to have a name");
        const a323 = o421.name;
        const s2104 = n429.get(a323) || [];
        if (s2104.length > 0) {
            const n526 = T11(buildBindingExportAssignmentExpression(r430, s2104, _13(a323)));
            n526._blockHoist = e9108.node._blockHoist;
            t632(e9108.insertAfter(n526)[0]);
        }
    },
    VariableDeclaration (e1021) {
        const { requeueInParent: t728 , exported: n625 , metadata: r526  } = this;
        Object.keys(e1021.getOuterBindingIdentifiers()).forEach((o520)=>{
            const a421 = n625.get(o520) || [];
            if (a421.length > 0) {
                const n723 = T11(buildBindingExportAssignmentExpression(r526, a421, _13(o520)));
                n723._blockHoist = e1021.node._blockHoist;
                t728(e1021.insertAfter(n723)[0]);
            }
        });
    }
};
const buildBindingExportAssignmentExpression = (e1120, t824, n820)=>(t824 || []).reduce((t922, n919)=>{
        const { stringSpecifiers: r625  } = e1120;
        const o614 = r625.has(n919);
        return A10("=", L9(_13(e1120.exportName), o614 ? D10(n919) : _13(n919), o614), t922);
    }, n820)
;
const buildImportThrow = (e1220)=>N11.default.expression.ast`
    (function() {
      throw new Error('"' + '${e1220}' + '" is read-only.');
    })()
  `
;
const z9 = {
    ReferencedIdentifier (e1319) {
        const { seen: t1021 , buildImportReference: n1019 , scope: r721 , imported: o713 , requeueInParent: a516  } = this;
        if (t1021.has(e1319.node)) return;
        t1021.add(e1319.node);
        const s385 = e1319.node.name;
        const i252 = o713.get(s385);
        if (i252) {
            if (isInType(e1319)) throw e1319.buildCodeFrameError(`Cannot transform the imported binding "${s385}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const t1149 = e1319.scope.getBinding(s385);
            const o811 = r721.getBinding(s385);
            if (o811 !== t1149) return;
            const l129 = n1019(i252, e1319.node);
            l129.loc = e1319.node.loc;
            if ((e1319.parentPath.isCallExpression({
                callee: e1319.node
            }) || e1319.parentPath.isOptionalCallExpression({
                callee: e1319.node
            }) || e1319.parentPath.isTaggedTemplateExpression({
                tag: e1319.node
            })) && w13(l129)) e1319.replaceWith(B10([
                H10(0),
                l129
            ]));
            else if (e1319.isJSXIdentifier() && w13(l129)) {
                const { object: t1219 , property: n1142  } = l129;
                e1319.replaceWith(j9(X8(t1219.name), X8(n1142.name)));
            } else e1319.replaceWith(l129);
            a516(e1319);
            e1319.skip();
        }
    },
    UpdateExpression (e1418) {
        const { scope: t1319 , seen: n1217 , imported: r820 , exported: o94 , requeueInParent: a713 , buildImportReference: s419  } = this;
        if (n1217.has(e1418.node)) return;
        n1217.add(e1418.node);
        const i322 = e1418.get("argument");
        if (i322.isMemberExpression()) return;
        const l220 = e1418.node;
        if (i322.isIdentifier()) {
            const n1315 = i322.node.name;
            if (t1319.getBinding(n1315) !== e1418.scope.getBinding(n1315)) return;
            const a613 = o94.get(n1315);
            const u123 = r820.get(n1315);
            if ((null == a613 ? void 0 : a613.length) > 0 || u123) if (u123) e1418.replaceWith(A10(l220.operator[0] + "=", s419(u123, i322.node), buildImportThrow(n1315)));
            else if (l220.prefix) e1418.replaceWith(buildBindingExportAssignmentExpression(this.metadata, a613, R9(l220)));
            else {
                const r916 = t1319.generateDeclaredUidIdentifier(n1315);
                e1418.replaceWith(B10([
                    A10("=", R9(r916), R9(l220)),
                    buildBindingExportAssignmentExpression(this.metadata, a613, _13(n1315)),
                    R9(r916)
                ]));
            }
        }
        a713(e1418);
        e1418.skip();
    },
    AssignmentExpression: {
        exit (e1517) {
            const { scope: t1418 , seen: n1415 , imported: r1015 , exported: o104 , requeueInParent: a86 , buildImportReference: s514  } = this;
            if (n1415.has(e1517.node)) return;
            n1415.add(e1517.node);
            const i418 = e1517.get("left");
            if (!i418.isMemberExpression()) if (i418.isIdentifier()) {
                const n1514 = i418.node.name;
                if (t1418.getBinding(n1514) !== e1517.scope.getBinding(n1514)) return;
                const l316 = o104.get(n1514);
                const u219 = r1015.get(n1514);
                if ((null == l316 ? void 0 : l316.length) > 0 || u219) {
                    x12("=" === e1517.node.operator, "Path was not simplified");
                    const t1517 = e1517.node;
                    if (u219) {
                        t1517.left = s514(u219, t1517.left);
                        t1517.right = B10([
                            t1517.right,
                            buildImportThrow(n1514)
                        ]);
                    }
                    e1517.replaceWith(buildBindingExportAssignmentExpression(this.metadata, l316, t1517));
                    a86(e1517);
                }
            } else {
                const n1613 = i418.getOuterBindingIdentifiers();
                const s611 = Object.keys(n1613).filter((n1713)=>t1418.getBinding(n1713) === e1517.scope.getBinding(n1713)
                );
                const l415 = s611.find((e1617)=>r1015.has(e1617)
                );
                l415 && (e1517.node.right = B10([
                    e1517.node.right,
                    buildImportThrow(l415)
                ]));
                const u315 = [];
                s611.forEach((e1716)=>{
                    const t1617 = o104.get(e1716) || [];
                    t1617.length > 0 && u315.push(buildBindingExportAssignmentExpression(this.metadata, t1617, _13(e1716)));
                });
                if (u315.length > 0) {
                    let t1715 = B10(u315);
                    if (e1517.parentPath.isExpressionStatement()) {
                        t1715 = T11(t1715);
                        t1715._blockHoist = e1517.parentPath.node._blockHoist;
                    }
                    const n1813 = e1517.insertAfter(t1715)[0];
                    a86(n1813);
                }
            }
        }
    },
    "ForOfStatement|ForInStatement" (e1813) {
        const { scope: t1814 , node: n1912  } = e1813;
        const { left: r1117  } = n1912;
        const { exported: o1113 , imported: a95 , scope: s711  } = this;
        if (!C13(r1117)) {
            let n2012, i515 = false;
            const l510 = e1813.get("body").scope;
            for (const e1912 of Object.keys(k9(r1117)))if (s711.getBinding(e1912) === t1814.getBinding(e1912)) {
                if (o1113.has(e1912)) {
                    i515 = true;
                    l510.hasOwnBinding(e1912) && l510.rename(e1912);
                }
                a95.has(e1912) && !n2012 && (n2012 = e1912);
            }
            if (!i515 && !n2012) return;
            e1813.ensureBlock();
            const u415 = e1813.get("body");
            const d120 = t1814.generateUidIdentifierBasedOnNode(r1117);
            e1813.get("left").replaceWith(q8("let", [
                U10(R9(d120))
            ]));
            t1814.registerDeclaration(e1813.get("left"));
            i515 && u415.unshiftContainer("body", T11(A10("=", r1117, d120)));
            n2012 && u415.unshiftContainer("body", T11(buildImportThrow(n2012)));
        }
    }
};
var $10 = {};
Object.defineProperty($10, "__esModule", {
    value: true
});
$10.default = getModuleName$1;
{
    const e = getModuleName$1;
    $10.default = getModuleName$1 = function getModuleName(t1914, n2125) {
        var r1216, o1212, a105, s811;
        return e(t1914, {
            moduleId: null != (r1216 = n2125.moduleId) ? r1216 : t1914.moduleId,
            moduleIds: null != (o1212 = n2125.moduleIds) ? o1212 : t1914.moduleIds,
            getModuleId: null != (a105 = n2125.getModuleId) ? a105 : t1914.getModuleId,
            moduleRoot: null != (s811 = n2125.moduleRoot) ? s811 : t1914.moduleRoot
        });
    };
}function getModuleName$1(e2011, t2013) {
    const { filename: n2212 , filenameRelative: r1313 = n2212 , sourceRoot: o1311 = t2013.moduleRoot  } = e2011;
    const { moduleId: a1114 , moduleIds: s911 = !!a1114 , getModuleId: i612 , moduleRoot: l610 = o1311  } = t2013;
    if (!s911) return null;
    if (null != a1114 && !i612) return a1114;
    let u514 = null != l610 ? l610 + "/" : "";
    if (r1313) {
        const e21 = null != o1311 ? new RegExp("^" + o1311 + "/?") : "";
        u514 += r1313.replace(e21, "").replace(/\.(\w*?)$/, "");
    }
    u514 = u514.replace(/\\/g, "/");
    return i612 && i612(u514) || u514;
}
var V10 = "default" in mod24 ? mod24.default : mod24;
var F11 = "default" in mod3 ? mod3.default : mod3;
var Y8 = "default" in mod20 ? mod20.default : mod20;
var J8 = "default" in mod25 ? mod25.default : mod25;
var K8 = {};
Object.defineProperty(K8, "__esModule", {
    value: true
});
K8.buildNamespaceInitStatements = buildNamespaceInitStatements;
K8.ensureStatementsHoisted = ensureStatementsHoisted;
Object.defineProperty(K8, "getModuleName", {
    enumerable: true,
    get: function() {
        return oe9.default;
    }
});
Object.defineProperty(K8, "hasExports", {
    enumerable: true,
    get: function() {
        return re9.hasExports;
    }
});
Object.defineProperty(K8, "isModule", {
    enumerable: true,
    get: function() {
        return ee8.isModule;
    }
});
Object.defineProperty(K8, "isSideEffectImport", {
    enumerable: true,
    get: function() {
        return re9.isSideEffectImport;
    }
});
K8.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
Object.defineProperty(K8, "rewriteThis", {
    enumerable: true,
    get: function() {
        return te8.default;
    }
});
K8.wrapInterop = wrapInterop;
var G8 = V10;
var Q8 = F11;
var Z8 = Y8;
var ee8 = J8;
var te8 = c27;
var ne9 = y12;
var re9 = n35;
var oe9 = $10;
const { booleanLiteral: ae9 , callExpression: se8 , cloneNode: ie9 , directive: le7 , directiveLiteral: ue7 , expressionStatement: de7 , identifier: ce7 , isIdentifier: pe7 , memberExpression: fe6 , stringLiteral: me6 , valueToNode: Ee6 , variableDeclaration: he7 , variableDeclarator: be5  } = Q8;
function rewriteModuleStatementsAndPrepareHeader(e22, { loose: t2138 , exportName: n2312 , strict: r1413 , allowTopLevelThis: o14 , strictMode: a1211 , noInterop: s1011 , importInterop: i712 = s1011 ? "none" : "babel" , lazy: l78 , esNamespaceOnly: u614 , constantReexports: d213 = t2138 , enumerableModuleMeta: c133 = t2138 , noIncompleteNsImportDetection: p122  }) {
    (0, re9.validateImportInteropOption)(i712);
    G8((0, ee8.isModule)(e22), "Cannot process module statements in a script");
    e22.node.sourceType = "script";
    const f118 = (0, re9.default)(e22, n2312, {
        importInterop: i712,
        initializeReexports: d213,
        lazy: l78,
        esNamespaceOnly: u614
    });
    o14 || (0, te8.default)(e22);
    (0, ne9.default)(e22, f118);
    if (false !== a1211) {
        const t2214 = e22.node.directives.some((e23)=>"use strict" === e23.value.value
        );
        t2214 || e22.unshiftContainer("directives", le7(ue7("use strict")));
    }
    const m117 = [];
    (0, re9.hasExports)(f118) && !r1413 && m117.push(buildESModuleHeader(f118, c133));
    const E115 = buildExportNameListDeclaration(e22, f118);
    if (E115) {
        f118.exportNameListName = E115.name;
        m117.push(E115.statement);
    }
    m117.push(...buildExportInitializationStatements(e22, f118, d213, p122));
    return {
        meta: f118,
        headers: m117
    };
}
function ensureStatementsHoisted(e24) {
    e24.forEach((e25)=>{
        e25._blockHoist = 3;
    });
}
function wrapInterop(e26, t2313, n2412) {
    if ("none" === n2412) return null;
    if ("node-namespace" === n2412) return se8(e26.hub.addHelper("interopRequireWildcard"), [
        t2313,
        ae9(true)
    ]);
    if ("node-default" === n2412) return null;
    let r1511;
    if ("default" === n2412) r1511 = "interopRequireDefault";
    else {
        if ("namespace" !== n2412) throw new Error(`Unknown interop: ${n2412}`);
        r1511 = "interopRequireWildcard";
    }
    return se8(e26.hub.addHelper(r1511), [
        t2313
    ]);
}
function buildNamespaceInitStatements(e28, t2412, n2611 = false) {
    const r1610 = [];
    let o153 = ce7(t2412.name);
    t2412.lazy && (o153 = se8(o153, []));
    for (const e27 of t2412.importsNamespace)e27 !== t2412.name && r1610.push(Z8.default.statement`var NAME = SOURCE;`({
        NAME: e27,
        SOURCE: ie9(o153)
    }));
    n2611 && r1610.push(...buildReexportsFromMeta(e28, t2412, true));
    for (const n2511 of t2412.reexportNamespace)r1610.push((t2412.lazy ? Z8.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : Z8.default.statement`EXPORTS.NAME = NAMESPACE;`)({
        EXPORTS: e28.exportName,
        NAME: n2511,
        NAMESPACE: ie9(o153)
    }));
    if (t2412.reexportAll) {
        const a1310 = buildNamespaceReexport(e28, ie9(o153), n2611);
        a1310.loc = t2412.reexportAll.loc;
        r1610.push(a1310);
    }
    return r1610;
}
const ge6 = {
    constant: Z8.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,
    constantComputed: Z8.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`,
    spec: Z8.default.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    `
};
const buildReexportsFromMeta = (e29, t2511, n2711)=>{
    const r1710 = t2511.lazy ? se8(ce7(t2511.name), []) : ce7(t2511.name);
    const { stringSpecifiers: o163  } = e29;
    return Array.from(t2511.reexports, ([a144, s1112])=>{
        let i812 = ie9(r1710);
        "default" === s1112 && "node-default" === t2511.interop || (i812 = o163.has(s1112) ? fe6(i812, me6(s1112), true) : fe6(i812, ce7(s1112)));
        const l84 = {
            EXPORTS: e29.exportName,
            EXPORT_NAME: a144,
            NAMESPACE_IMPORT: i812
        };
        return n2711 || pe7(i812) ? o163.has(a144) ? ge6.constantComputed(l84) : ge6.constant(l84) : ge6.spec(l84);
    });
};
function buildESModuleHeader(e30, t2610 = false) {
    return (t2610 ? Z8.default.statement`
        EXPORTS.__esModule = true;
      ` : Z8.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
        EXPORTS: e30.exportName
    });
}
function buildNamespaceReexport(e31, t2710, n2810) {
    return (n2810 ? Z8.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : Z8.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
        NAMESPACE: t2710,
        EXPORTS: e31.exportName,
        VERIFY_NAME_LIST: e31.exportNameListName ? (0, Z8.default)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
            EXPORTS_LIST: e31.exportNameListName
        }) : null
    });
}
function buildExportNameListDeclaration(e34, t2910) {
    const n2910 = Object.create(null);
    for (const e32 of t2910.local.values())for (const t2810 of e32.names)n2910[t2810] = true;
    let r186 = false;
    for (const e33 of t2910.source.values()){
        for (const t31 of e33.reexports.keys())n2910[t31] = true;
        for (const t3010 of e33.reexportNamespace)n2910[t3010] = true;
        r186 = r186 || !!e33.reexportAll;
    }
    if (!r186 || 0 === Object.keys(n2910).length) return null;
    const o173 = e34.scope.generateUidIdentifier("exportNames");
    delete n2910.default;
    return {
        name: o173.name,
        statement: he7("var", [
            be5(o173, Ee6(n2910))
        ])
    };
}
function buildExportInitializationStatements(e40, t32, n3110 = false, r196 = false) {
    const o183 = [];
    for (const [e35, n3010] of t32.local)if ("import" === n3010.kind) ;
    else if ("hoisted" === n3010.kind) o183.push([
        n3010.names[0],
        buildInitStatement(t32, n3010.names, ce7(e35))
    ]);
    else if (!r196) for (const e36 of n3010.names)o183.push([
        e36,
        null
    ]);
    for (const e37 of t32.source.values()){
        if (!n3110) {
            const n3210 = buildReexportsFromMeta(t32, e37, false);
            const r204 = [
                ...e37.reexports.keys()
            ];
            for(let e39 = 0; e39 < n3210.length; e39++)o183.push([
                r204[e39],
                n3210[e39]
            ]);
        }
        if (!r196) for (const t33 of e37.reexportNamespace)o183.push([
            t33,
            null
        ]);
    }
    o183.sort(([e41], [t34])=>e41 < t34 ? -1 : t34 < e41 ? 1 : 0
    );
    const a154 = [];
    if (r196) for (const [, e38] of o183)a154.push(e38);
    else {
        const n333 = 100;
        for(let r2113 = 0; r2113 < o183.length; r2113 += n333){
            let s1211 = [];
            for(let i912 = 0; i912 < 100 && r2113 + i912 < o183.length; i912++){
                const [n341, l94] = o183[r2113 + i912];
                if (null !== l94) {
                    if (s1211.length > 0) {
                        a154.push(buildInitStatement(t32, s1211, e40.scope.buildUndefinedNode()));
                        s1211 = [];
                    }
                    a154.push(l94);
                } else s1211.push(n341);
            }
            s1211.length > 0 && a154.push(buildInitStatement(t32, s1211, e40.scope.buildUndefinedNode()));
        }
    }
    return a154;
}
const Se6 = {
    computed: Z8.default.expression`EXPORTS["NAME"] = VALUE`,
    default: Z8.default.expression`EXPORTS.NAME = VALUE`
};
function buildInitStatement(e42, t35, n351) {
    const { stringSpecifiers: r2212 , exportName: o193  } = e42;
    return de7(t35.reduce((e43, t36)=>{
        const n36 = {
            EXPORTS: o193,
            NAME: t36,
            VALUE: e43
        };
        return r2212.has(t36) ? Se6.computed(n36) : Se6.default(n36);
    }, n351));
}
const Pe6 = K8.__esModule, Ie6 = K8.getModuleName, ye7 = K8.hasExports, xe6 = K8.isModule, Me6 = K8.isSideEffectImport, Ne6 = K8.rewriteThis;
const ve8 = K8.buildNamespaceInitStatements, Ae5 = K8.ensureStatementsHoisted, Oe6 = K8.rewriteModuleStatementsAndPrepareHeader, Re4 = K8.wrapInterop;
const mod28 = {
    __esModule: Pe6,
    buildNamespaceInitStatements: ve8,
    default: K8,
    ensureStatementsHoisted: Ae5,
    getModuleName: Ie6,
    hasExports: ye7,
    isModule: xe6,
    isSideEffectImport: Me6,
    rewriteModuleStatementsAndPrepareHeader: Oe6,
    rewriteThis: Ne6,
    wrapInterop: Re4
};
var l28 = "default" in mod23 ? mod23.default : mod23;
var u25 = "default" in mod22 ? mod22.default : mod22;
var d20 = "default" in mod16 ? mod16.default : mod16;
var c28 = "default" in mod3 ? mod3.default : mod3;
var p23 = "default" in mod28 ? mod28.default : mod28;
var f24 = "default" in mod ? mod.default : mod;
var h17 = {}, m20 = false;
function dew$15() {
    if (m20) return h17;
    m20 = true;
    Object.defineProperty(h17, "__esModule", {
        value: true
    });
    h17.default = void 0;
    function helpers() {
        const e2 = l28;
        helpers = function() {
            return e2;
        };
        return e2;
    }
    function _traverse() {
        const e3129 = u25;
        _traverse = function() {
            return e3129;
        };
        return e3129;
    }
    function _codeFrame() {
        const e4111 = d20;
        _codeFrame = function() {
            return e4111;
        };
        return e4111;
    }
    function _t4() {
        const e5112 = c28;
        _t4 = function() {
            return e5112;
        };
        return e5112;
    }
    function _helperModuleTransforms() {
        const e6111 = p23;
        _helperModuleTransforms = function() {
            return e6111;
        };
        return e6111;
    }
    function _semver() {
        const e7105 = f24;
        _semver = function() {
            return e7105;
        };
        return e7105;
    }
    const { cloneNode: e1 , interpreterDirective: t1150  } = _t4();
    const r180 = {
        enter (e8109, t2139) {
            const r243 = e8109.node.loc;
            if (r243) {
                t2139.loc = r243;
                e8109.stop();
            }
        }
    };
    class File {
        constructor(e9109, { code: t3111 , ast: r336 , inputMap: n1143  }){
            this._map = new Map;
            this.opts = void 0;
            this.declarations = {};
            this.path = null;
            this.ast = {};
            this.scope = void 0;
            this.metadata = {};
            this.code = "";
            this.inputMap = null;
            this.hub = {
                file: this,
                getCode: ()=>this.code
                ,
                getScope: ()=>this.scope
                ,
                addHelper: this.addHelper.bind(this),
                buildError: this.buildCodeFrameError.bind(this)
            };
            this.opts = e9109;
            this.code = t3111;
            this.ast = r336;
            this.inputMap = n1143;
            this.path = _traverse().NodePath.get({
                hub: this.hub,
                parentPath: null,
                parent: this.ast,
                container: this.ast,
                key: "program"
            }).setContext();
            this.scope = this.path.scope;
        }
        get shebang() {
            const { interpreter: e1022  } = this.path.node;
            return e1022 ? e1022.value : "";
        }
        set shebang(e1121) {
            e1121 ? this.path.get("interpreter").replaceWith(t1150(e1121)) : this.path.get("interpreter").remove();
        }
        set(e1221, t4108) {
            if ("helpersNamespace" === e1221) throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(e1221, t4108);
        }
        get(e1320) {
            return this._map.get(e1320);
        }
        has(e1419) {
            return this._map.has(e1419);
        }
        getModuleName() {
            return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
        }
        addImport() {
            throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
        }
        availableHelper(e1518, t5108) {
            let r431;
            try {
                r431 = helpers().minVersion(e1518);
            } catch (e1618) {
                if ("BABEL_HELPER_UNKNOWN" !== e1618.code) throw e1618;
                return false;
            }
            if ("string" !== typeof t5108) return true;
            _semver().valid(t5108) && (t5108 = `^${t5108}`);
            return !_semver().intersects(`<${r431}`, t5108) && !_semver().intersects(">=8.0.0", t5108);
        }
        addHelper(t633) {
            const r527 = this.declarations[t633];
            if (r527) return e1(r527);
            const n2126 = this.get("helperGenerator");
            if (n2126) {
                const e1717 = n2126(t633);
                if (e1717) return e1717;
            }
            helpers().ensure(t633, File);
            const o141 = this.declarations[t633] = this.scope.generateUidIdentifier(t633);
            const s1113 = {};
            for (const e1814 of helpers().getDependencies(t633))s1113[e1814] = this.addHelper(e1814);
            const { nodes: a140 , globals: i1112  } = helpers().get(t633, (e1913)=>s1113[e1913]
            , o141, Object.keys(this.scope.getAllBindings()));
            i1112.forEach((e2012)=>{
                this.path.scope.hasBinding(e2012, true) && this.path.scope.rename(e2012);
            });
            a140.forEach((e21)=>{
                e21._compact = true;
            });
            this.path.unshiftContainer("body", a140);
            this.path.get("body").forEach((e22)=>{
                -1 !== a140.indexOf(e22.node) && e22.isVariableDeclaration() && this.scope.registerDeclaration(e22);
            });
            return o141;
        }
        addTemplateObject() {
            throw new Error("This function has been moved into the template literal transform itself.");
        }
        buildCodeFrameError(e23, t729, n430 = SyntaxError) {
            let o235 = e23 && (e23.loc || e23._loc);
            if (!o235 && e23) {
                const n334 = {
                    loc: null
                };
                (0, _traverse().default)(e23, r180, this.scope, n334);
                o235 = n334.loc;
                let s2105 = "This is an error on an internal node. Probably an internal error.";
                o235 && (s2105 += " Location has been estimated.");
                t729 += ` (${s2105})`;
            }
            if (o235) {
                const { highlightCode: e24 = true  } = this.opts;
                t729 += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, {
                    start: {
                        line: o235.start.line,
                        column: o235.start.column + 1
                    },
                    end: o235.end && o235.start.line === o235.end.line ? {
                        line: o235.end.line,
                        column: o235.end.column + 1
                    } : void 0
                }, {
                    highlightCode: e24
                });
            }
            return new n430(t729);
        }
    }
    h17.default = File;
    return h17;
}
var b17 = "default" in mod23 ? mod23.default : mod23;
var _14 = "default" in mod12 ? mod12.default : mod12;
var g18 = "default" in mod20 ? mod20.default : mod20;
var v19 = "default" in mod3 ? mod3.default : mod3;
var E13 = {}, y13 = false;
function dew14() {
    if (y13) return E13;
    y13 = true;
    Object.defineProperty(E13, "__esModule", {
        value: true
    });
    E13.default = _default3;
    function helpers() {
        const e26 = b17;
        helpers = function() {
            return e26;
        };
        return e26;
    }
    function _generator() {
        const e27 = _14;
        _generator = function() {
            return e27;
        };
        return e27;
    }
    function _template() {
        const e28 = g18;
        _template = function() {
            return e28;
        };
        return e28;
    }
    function _t5() {
        const e29 = v19;
        _t5 = function() {
            return e29;
        };
        return e29;
    }
    var e25 = dew$15();
    const { arrayExpression: t825 , assignmentExpression: r626 , binaryExpression: n527 , blockStatement: o329 , callExpression: s386 , cloneNode: a225 , conditionalExpression: i253 , exportNamedDeclaration: l130 , exportSpecifier: u124 , expressionStatement: d121 , functionExpression: c134 , identifier: p123 , memberExpression: f119 , objectExpression: h117 , program: m118 , stringLiteral: M25 , unaryExpression: O27 , variableDeclaration: x30 , variableDeclarator: R23  } = _t5();
    const buildUmdWrapper = (e30)=>_template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(e30)
    ;
    function buildGlobal(e31) {
        const t923 = p123("babelHelpers");
        const a324 = [];
        const l222 = c134(null, [
            p123("global")
        ], o329(a324));
        const u220 = m118([
            d121(s386(l222, [
                i253(n527("===", O27("typeof", p123("global")), M25("undefined")), p123("self"), p123("global"))
            ]))
        ]);
        a324.push(x30("var", [
            R23(t923, r626("=", f119(p123("global"), t923), h117([])))
        ]));
        buildHelpers(a324, t923, e31);
        return u220;
    }
    function buildModule(e32) {
        const t1022 = [];
        const r722 = buildHelpers(t1022, null, e32);
        t1022.unshift(l130(null, Object.keys(r722).map((e33)=>u124(a225(r722[e33]), p123(e33))
        )));
        return m118(t1022, [], "module");
    }
    function buildUmd(e34) {
        const n626 = p123("babelHelpers");
        const o422 = [];
        o422.push(x30("var", [
            R23(n626, p123("global"))
        ]));
        buildHelpers(o422, n626, e34);
        return m118([
            buildUmdWrapper({
                FACTORY_PARAMETERS: p123("global"),
                BROWSER_ARGUMENTS: r626("=", f119(p123("root"), n626), h117([])),
                COMMON_ARGUMENTS: p123("exports"),
                AMD_ARGUMENTS: t825([
                    M25("exports")
                ]),
                FACTORY_BODY: o422,
                UMD_ROOT: p123("this")
            })
        ]);
    }
    function buildVar(e35) {
        const t1151 = p123("babelHelpers");
        const r821 = [];
        r821.push(x30("var", [
            R23(t1151, h117([]))
        ]));
        const n724 = m118(r821);
        buildHelpers(r821, t1151, e35);
        r821.push(d121(t1151));
        return n724;
    }
    function buildHelpers(t1220, r917, n821) {
        const getHelperReference = (e36)=>r917 ? f119(r917, p123(e36)) : p123(`_${e36}`)
        ;
        const o521 = {};
        helpers().list.forEach(function(r1016) {
            if (n821 && n821.indexOf(r1016) < 0) return;
            const s420 = o521[r1016] = getHelperReference(r1016);
            helpers().ensure(r1016, e25.default);
            const { nodes: a422  } = helpers().get(r1016, getHelperReference, s420);
            t1220.push(...a422);
        });
        return o521;
    }
    function _default3(e37, t1320 = "global") {
        let r1118;
        const n920 = {
            global: buildGlobal,
            module: buildModule,
            umd: buildUmd,
            var: buildVar
        }[t1320];
        if (!n920) throw new Error(`Unsupported output type ${t1320}`);
        r1118 = n920(e37);
        return (0, _generator().default)(r1118).code;
    }
    return E13;
}
var n36 = {}, e21 = false;
function dew15() {
    if (e21) return n36;
    e21 = true;
    Object.defineProperty(n36, "__esModule", {
        value: true
    });
    n36.ROOT_CONFIG_FILENAMES = void 0;
    n36.findConfigUpwards = findConfigUpwards;
    n36.findPackageData = findPackageData;
    n36.findRelativeConfig = findRelativeConfig;
    n36.findRootConfig = findRootConfig;
    n36.loadConfig = loadConfig;
    n36.loadPlugin = loadPlugin;
    n36.loadPreset = loadPreset;
    n36.resolvePlugin = resolvePlugin;
    n36.resolvePreset = resolvePreset;
    n36.resolveShowConfigPath = resolveShowConfigPath;
    function findConfigUpwards(n) {
        return null;
    }
    function* findPackageData(n1144) {
        return {
            filepath: n1144,
            directories: [],
            pkg: null,
            isPackage: false
        };
    }
    function* findRelativeConfig(n, e, o) {
        return {
            config: null,
            ignore: null
        };
    }
    function* findRootConfig(n, e, o) {
        return null;
    }
    function* loadConfig(n2127, e1, o, r) {
        throw new Error(`Cannot load ${n2127} relative to ${e1} in a browser`);
    }
    function* resolveShowConfigPath(n) {
        return null;
    }
    const o90 = [];
    n36.ROOT_CONFIG_FILENAMES = o90;
    function resolvePlugin(n, e) {
        return null;
    }
    function resolvePreset(n, e) {
        return null;
    }
    function loadPlugin(n335, e2) {
        throw new Error(`Cannot load plugin ${n335} relative to ${e2} in a browser`);
    }
    function loadPreset(n431, e3130) {
        throw new Error(`Cannot load preset ${n431} relative to ${e3130} in a browser`);
    }
    return n36;
}
var e22 = {};
const t31 = Symbol.for("gensync:v1:start");
const n37 = Symbol.for("gensync:v1:suspend");
const r39 = "GENSYNC_EXPECTED_START";
const a29 = "GENSYNC_EXPECTED_SUSPEND";
const o32 = "GENSYNC_OPTIONS_ERROR";
const c29 = "GENSYNC_RACE_NONEMPTY";
const s29 = "GENSYNC_ERRBACK_NO_CALLBACK";
e22 = Object.assign(function gensync(e1) {
    let t1152 = e1;
    t1152 = "function" !== typeof e1 ? newGenerator(e1) : wrapGenerator(e1);
    return Object.assign(t1152, makeFunctionAPI(t1152));
}, {
    all: buildOperation({
        name: "all",
        arity: 1,
        sync: function(e2) {
            const t2140 = Array.from(e2[0]);
            return t2140.map((e3131)=>evaluateSync(e3131)
            );
        },
        async: function(e4112, t3112, n1145) {
            const r187 = Array.from(e4112[0]);
            if (0 === r187.length) {
                Promise.resolve().then(()=>t3112([])
                );
                return;
            }
            let a145 = 0;
            const o142 = r187.map(()=>{});
            r187.forEach((e5113, r244)=>{
                evaluateAsync(e5113, (e6112)=>{
                    o142[r244] = e6112;
                    a145 += 1;
                    a145 === o142.length && t3112(o142);
                }, n1145);
            });
        }
    }),
    race: buildOperation({
        name: "race",
        arity: 1,
        sync: function(e7106) {
            const t4109 = Array.from(e7106[0]);
            if (0 === t4109.length) throw makeError("Must race at least 1 item", c29);
            return evaluateSync(t4109[0]);
        },
        async: function(e9110, t5109, n2128) {
            const r337 = Array.from(e9110[0]);
            if (0 === r337.length) throw makeError("Must race at least 1 item", c29);
            for (const e8110 of r337)evaluateAsync(e8110, t5109, n2128);
        }
    })
});
function makeFunctionAPI(e1023) {
    const t634 = {
        sync: function(...t730) {
            return evaluateSync(e1023.apply(this, t730));
        },
        async: function(...t826) {
            return new Promise((n336, r432)=>{
                evaluateAsync(e1023.apply(this, t826), n336, r432);
            });
        },
        errback: function(...t924) {
            const n432 = t924.pop();
            if ("function" !== typeof n432) throw makeError("Asynchronous function called without callback", s29);
            let r528;
            try {
                r528 = e1023.apply(this, t924);
            } catch (e1122) {
                n432(e1122);
                return;
            }
            evaluateAsync(r528, (e1222)=>n432(void 0, e1222)
            , (e1321)=>n432(e1321)
            );
        }
    };
    return t634;
}
function assertTypeof(e1420, t1023, n528, r627) {
    if (typeof n528 === e1420 || r627 && "undefined" === typeof n528) return;
    let a226;
    a226 = r627 ? `Expected opts.${t1023} to be either a ${e1420}, or undefined.` : `Expected opts.${t1023} to be a ${e1420}.`;
    throw makeError(a226, o32);
}
function makeError(e1519, t1153) {
    return Object.assign(new Error(e1519), {
        code: t1153
    });
}
function newGenerator({ name: e1619 , arity: t1221 , sync: n627 , async: r723 , errback: a325  }) {
    assertTypeof("string", "name", e1619, true);
    assertTypeof("number", "arity", t1221, true);
    assertTypeof("function", "sync", n627);
    assertTypeof("function", "async", r723, true);
    assertTypeof("function", "errback", a325, true);
    if (r723 && a325) throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", o32);
    if ("string" !== typeof e1619) {
        let t1321;
        a325 && a325.name && "errback" !== a325.name && (t1321 = a325.name);
        r723 && r723.name && "async" !== r723.name && (t1321 = r723.name.replace(/Async$/, ""));
        n627 && n627.name && "sync" !== n627.name && (t1321 = n627.name.replace(/Sync$/, ""));
        "string" === typeof t1321 && (e1619 = t1321);
    }
    "number" !== typeof t1221 && (t1221 = n627.length);
    return buildOperation({
        name: e1619,
        arity: t1221,
        sync: function(e1718) {
            return n627.apply(this, e1718);
        },
        async: function(e1815, t1419, o236) {
            r723 ? r723.apply(this, e1815).then(t1419, o236) : a325 ? a325.call(this, ...e1815, (e1914, n725)=>{
                null == e1914 ? t1419(n725) : o236(e1914);
            }) : t1419(n627.apply(this, e1815));
        }
    });
}
function wrapGenerator(e2013) {
    return setFunctionMetadata(e2013.name, e2013.length, function(...t1518) {
        return e2013.apply(this, t1518);
    });
}
function buildOperation({ name: e2110 , arity: r822 , sync: a423 , async: o330  }) {
    return setFunctionMetadata(e2110, r822, function*(...e2210) {
        const r918 = yield t31;
        if (!r918) {
            const t1618 = a423.call(this, e2210);
            return t1618;
        }
        let c135;
        try {
            o330.call(this, e2210, (e23)=>{
                if (!c135) {
                    c135 = {
                        value: e23
                    };
                    r918();
                }
            }, (e24)=>{
                if (!c135) {
                    c135 = {
                        err: e24
                    };
                    r918();
                }
            });
        } catch (e25) {
            c135 = {
                err: e25
            };
            r918();
        }
        yield n37;
        if (c135.hasOwnProperty("err")) throw c135.err;
        return c135.value;
    });
}
function evaluateSync(e26) {
    let t1716;
    while(!({ value: t1716  } = e26.next()).done)assertStart(t1716, e26);
    return t1716;
}
function evaluateAsync(e27, t1815, n822) {
    (function step() {
        try {
            let n921;
            while(!({ value: n921  } = e27.next()).done){
                assertStart(n921, e27);
                let t1915 = true;
                let r1017 = false;
                const a517 = e27.next(()=>{
                    t1915 ? r1017 = true : step();
                });
                t1915 = false;
                assertSuspend(a517, e27);
                if (!r1017) return;
            }
            return t1815(n921);
        } catch (e28) {
            return n822(e28);
        }
    })();
}
function assertStart(e29, n1020) {
    e29 !== t31 && throwError(n1020, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(e29)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, r39));
}
function assertSuspend({ value: e30 , done: t2014  }, r1119) {
    (t2014 || e30 !== n37) && throwError(r1119, makeError(t2014 ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(e30)}. If you get this, it is probably a gensync bug.`, a29));
}
function throwError(e31, t2141) {
    e31.throw && e31.throw(t2141);
    throw t2141;
}
function setFunctionMetadata(e33, t2314, n1146) {
    if ("string" === typeof e33) {
        const t2215 = Object.getOwnPropertyDescriptor(n1146, "name");
        t2215 && !t2215.configurable || Object.defineProperty(n1146, "name", Object.assign(t2215 || {}, {
            configurable: true,
            value: e33
        }));
    }
    if ("number" === typeof t2314) {
        const e34 = Object.getOwnPropertyDescriptor(n1146, "length");
        e34 && !e34.configurable || Object.defineProperty(n1146, "length", Object.assign(e34 || {}, {
            configurable: true,
            value: t2314
        }));
    }
    return n1146;
}
var i28 = e22;
const mod29 = {
    default: i28
};
var e23 = "default" in mod29 ? mod29.default : mod29;
var s30 = {}, r40 = false;
function dew16() {
    if (r40) return s30;
    r40 = true;
    Object.defineProperty(s30, "__esModule", {
        value: true
    });
    s30.forwardAsync = forwardAsync;
    s30.isAsync = void 0;
    s30.isThenable = isThenable;
    s30.maybeAsync = maybeAsync;
    s30.waitFor = s30.onFirstPause = void 0;
    function _gensync() {
        const n2129 = e23;
        _gensync = function() {
            return n2129;
        };
        return n2129;
    }
    const id1 = (n337)=>n337
    ;
    const n1147 = _gensync()(function*(n433) {
        return yield* n433;
    });
    const t1154 = _gensync()({
        sync: ()=>false
        ,
        errback: (n529)=>n529(null, true)
    });
    s30.isAsync = t1154;
    function maybeAsync(n628, e1) {
        return _gensync()({
            sync (...s1114) {
                const r188 = n628.apply(this, s1114);
                if (isThenable(r188)) throw new Error(e1);
                return r188;
            },
            async (...e2) {
                return Promise.resolve(n628.apply(this, e2));
            }
        });
    }
    const c65 = _gensync()({
        sync: (n726)=>n726("sync")
        ,
        async: (n823)=>n823("async")
    });
    function forwardAsync(n922, e3132) {
        const s2106 = _gensync()(n922);
        return c65((n1021)=>{
            const r245 = s2106[n1021];
            return e3132(r245);
        });
    }
    const o95 = _gensync()({
        name: "onFirstPause",
        arity: 2,
        sync: function(e4113) {
            return n1147.sync(e4113);
        },
        errback: function(e5114, s387, r338) {
            let t = false;
            n1147.errback(e5114, (n1148, e6113)=>{
                t = true;
                r338(n1148, e6113);
            });
            t || s387();
        }
    });
    s30.onFirstPause = o95;
    const y35 = _gensync()({
        sync: id1,
        async: id1
    });
    s30.waitFor = y35;
    function isThenable(n1218) {
        return !!n1218 && ("object" === typeof n1218 || "function" === typeof n1218) && !!n1218.then && "function" === typeof n1218.then;
    }
    return s30;
}
var r41 = {}, n38 = false;
function dew$16() {
    if (n38) return r41;
    n38 = true;
    Object.defineProperty(r41, "__esModule", {
        value: true
    });
    r41.isIterableIterator = isIterableIterator;
    r41.mergeOptions = mergeOptions;
    function mergeOptions(e1, t1155) {
        for (const r189 of Object.keys(t1155))if ("parserOpts" !== r189 && "generatorOpts" !== r189 && "assumptions" !== r189 || !t1155[r189]) {
            const n1149 = t1155[r189];
            void 0 !== n1149 && (e1[r189] = n1149);
        } else {
            const n2130 = t1155[r189];
            const a146 = e1[r189] || (e1[r189] = {});
            mergeDefaultFields(a146, n2130);
        }
    }
    function mergeDefaultFields(e2, t2142) {
        for (const r246 of Object.keys(t2142)){
            const n338 = t2142[r246];
            void 0 !== n338 && (e2[r246] = n338);
        }
    }
    function isIterableIterator(e3133) {
        return !!e3133 && "function" === typeof e3133.next && "function" === typeof e3133[Symbol.iterator];
    }
    return r41;
}
var a30 = "default" in mod29 ? mod29.default : mod29;
var i29 = {}, o33 = false;
function dew17() {
    if (o33) return i29;
    o33 = true;
    Object.defineProperty(i29, "__esModule", {
        value: true
    });
    i29.assertSimpleType = assertSimpleType;
    i29.makeStrongCache = makeStrongCache;
    i29.makeStrongCacheSync = makeStrongCacheSync;
    i29.makeWeakCache = makeWeakCache;
    i29.makeWeakCacheSync = makeWeakCacheSync;
    function _gensync() {
        const e5115 = a30;
        _gensync = function() {
            return e5115;
        };
        return e5115;
    }
    var e4114 = dew16();
    var r339 = dew$16();
    const synchronize = (e6114)=>_gensync()(e6114).sync
    ;
    function* genTrue() {
        return true;
    }
    function makeWeakCache(e7107) {
        return makeCachedFunction(WeakMap, e7107);
    }
    function makeWeakCacheSync(e8111) {
        return synchronize(makeWeakCache(e8111));
    }
    function makeStrongCache(e9111) {
        return makeCachedFunction(Map, e9111);
    }
    function makeStrongCacheSync(e1024) {
        return synchronize(makeStrongCache(e1024));
    }
    function makeCachedFunction(t3113, n434) {
        const a227 = new t3113;
        const i1113 = new t3113;
        const o143 = new t3113;
        return function* cachedFunction(t4110, s388) {
            const c66 = yield* (0, e4114.isAsync)();
            const u96 = c66 ? i1113 : a227;
            const l79 = yield* getCachedValueOrWait(c66, u96, o143, t4110, s388);
            if (l79.valid) return l79.value;
            const h47 = new CacheConfigurator(s388);
            const f66 = n434(t4110, h47);
            let d54;
            let v37;
            if ((0, r339.isIterableIterator)(f66)) {
                const r433 = f66;
                v37 = yield* (0, e4114.onFirstPause)(r433, ()=>{
                    d54 = setupAsyncLocks(h47, o143, t4110);
                });
            } else v37 = f66;
            updateFunctionCache(u96, h47, t4110, v37);
            if (d54) {
                o143.delete(t4110);
                d54.release(v37);
            }
            return v37;
        };
    }
    function* getCachedValue(e1123, t5110, r529) {
        const n530 = e1123.get(t5110);
        if (n530) {
            for (const { value: e1223 , valid: t635  } of n530)if (yield* t635(r529)) return {
                valid: true,
                value: e1223
            };
        }
        return {
            valid: false,
            value: null
        };
    }
    function* getCachedValueOrWait(t731, r628, n629, a326, i254) {
        const o237 = yield* getCachedValue(r628, a326, i254);
        if (o237.valid) return o237;
        if (t731) {
            const t827 = yield* getCachedValue(n629, a326, i254);
            if (t827.valid) {
                const r724 = yield* (0, e4114.waitFor)(t827.value.promise);
                return {
                    valid: true,
                    value: r724
                };
            }
        }
        return {
            valid: false,
            value: null
        };
    }
    function setupAsyncLocks(e1322, t925, r823) {
        const n727 = new Lock;
        updateFunctionCache(t925, e1322, r823, n727);
        return n727;
    }
    function updateFunctionCache(e1421, t1024, r919, n824) {
        t1024.configured() || t1024.forever();
        let a424 = e1421.get(r919);
        t1024.deactivate();
        switch(t1024.mode()){
            case "forever":
                a424 = [
                    {
                        value: n824,
                        valid: genTrue
                    }
                ];
                e1421.set(r919, a424);
                break;
            case "invalidate":
                a424 = [
                    {
                        value: n824,
                        valid: t1024.validator()
                    }
                ];
                e1421.set(r919, a424);
                break;
            case "valid":
                if (a424) a424.push({
                    value: n824,
                    valid: t1024.validator()
                });
                else {
                    a424 = [
                        {
                            value: n824,
                            valid: t1024.validator()
                        }
                    ];
                    e1421.set(r919, a424);
                }
        }
    }
    class CacheConfigurator {
        constructor(e1520){
            this._active = true;
            this._never = false;
            this._forever = false;
            this._invalidate = false;
            this._configured = false;
            this._pairs = [];
            this._data = void 0;
            this._data = e1520;
        }
        simple() {
            return makeSimpleConfigurator(this);
        }
        mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
        }
        forever() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never) throw new Error("Caching has already been configured with .never()");
            this._forever = true;
            this._configured = true;
        }
        never() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever) throw new Error("Caching has already been configured with .forever()");
            this._never = true;
            this._configured = true;
        }
        using(t1156) {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever) throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const r1018 = t1156(this._data);
            const n923 = (0, e4114.maybeAsync)(t1156, "You appear to be using an async cache handler, but Babel has been called synchronously");
            if ((0, e4114.isThenable)(r1018)) return r1018.then((e1620)=>{
                this._pairs.push([
                    e1620,
                    n923
                ]);
                return e1620;
            });
            this._pairs.push([
                r1018,
                n923
            ]);
            return r1018;
        }
        invalidate(e1719) {
            this._invalidate = true;
            return this.using(e1719);
        }
        validator() {
            const e1816 = this._pairs;
            return function*(t1222) {
                for (const [r1120, n1022] of e1816)if (r1120 !== (yield* n1022(t1222))) return false;
                return true;
            };
        }
        deactivate() {
            this._active = false;
        }
        configured() {
            return this._configured;
        }
    }
    function makeSimpleConfigurator(e1915) {
        function cacheFn(t1322) {
            if ("boolean" !== typeof t1322) return e1915.using(()=>assertSimpleType(t1322())
            );
            t1322 ? e1915.forever() : e1915.never();
        }
        cacheFn.forever = ()=>e1915.forever()
        ;
        cacheFn.never = ()=>e1915.never()
        ;
        cacheFn.using = (t1420)=>e1915.using(()=>assertSimpleType(t1420())
            )
        ;
        cacheFn.invalidate = (t1519)=>e1915.invalidate(()=>assertSimpleType(t1519())
            )
        ;
        return cacheFn;
    }
    function assertSimpleType(t1619) {
        if ((0, e4114.isThenable)(t1619)) throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
        if (null != t1619 && "string" !== typeof t1619 && "boolean" !== typeof t1619 && "number" !== typeof t1619) throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
        return t1619;
    }
    class Lock {
        constructor(){
            this.released = false;
            this.promise = void 0;
            this._resolve = void 0;
            this.promise = new Promise((e2014)=>{
                this._resolve = e2014;
            });
        }
        release(e2111) {
            this.released = true;
            this._resolve(e2111);
        }
    }
    return i29;
}
var e24 = [
    {
        name: "nodejs",
        version: "0.2.0",
        date: "2011-08-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.3.0",
        date: "2011-08-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.4.0",
        date: "2011-08-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.5.0",
        date: "2011-08-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.6.0",
        date: "2011-11-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.7.0",
        date: "2012-01-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.8.0",
        date: "2012-06-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.9.0",
        date: "2012-07-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.10.0",
        date: "2013-03-11",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.11.0",
        date: "2013-03-28",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "0.12.0",
        date: "2015-02-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "4.0.0",
        date: "2015-09-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "4.1.0",
        date: "2015-09-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "4.2.0",
        date: "2015-10-12",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.3.0",
        date: "2016-02-09",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.4.0",
        date: "2016-03-08",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.5.0",
        date: "2016-08-16",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.6.0",
        date: "2016-09-27",
        lts: "Argon",
        security: true
    },
    {
        name: "nodejs",
        version: "4.7.0",
        date: "2016-12-06",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.8.0",
        date: "2017-02-21",
        lts: "Argon",
        security: false
    },
    {
        name: "nodejs",
        version: "4.9.0",
        date: "2018-03-28",
        lts: "Argon",
        security: true
    },
    {
        name: "nodejs",
        version: "5.0.0",
        date: "2015-10-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.1.0",
        date: "2015-11-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.2.0",
        date: "2015-12-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.3.0",
        date: "2015-12-15",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.4.0",
        date: "2016-01-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.5.0",
        date: "2016-01-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.6.0",
        date: "2016-02-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.7.0",
        date: "2016-02-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.8.0",
        date: "2016-03-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.9.0",
        date: "2016-03-16",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.10.0",
        date: "2016-04-01",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.11.0",
        date: "2016-04-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "5.12.0",
        date: "2016-06-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.0.0",
        date: "2016-04-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.1.0",
        date: "2016-05-05",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.2.0",
        date: "2016-05-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.3.0",
        date: "2016-07-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.4.0",
        date: "2016-08-12",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.5.0",
        date: "2016-08-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.6.0",
        date: "2016-09-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.7.0",
        date: "2016-09-27",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "6.8.0",
        date: "2016-10-12",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "6.9.0",
        date: "2016-10-18",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.10.0",
        date: "2017-02-21",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.11.0",
        date: "2017-06-06",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.12.0",
        date: "2017-11-06",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.13.0",
        date: "2018-02-10",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.14.0",
        date: "2018-03-28",
        lts: "Boron",
        security: true
    },
    {
        name: "nodejs",
        version: "6.15.0",
        date: "2018-11-27",
        lts: "Boron",
        security: true
    },
    {
        name: "nodejs",
        version: "6.16.0",
        date: "2018-12-26",
        lts: "Boron",
        security: false
    },
    {
        name: "nodejs",
        version: "6.17.0",
        date: "2019-02-28",
        lts: "Boron",
        security: true
    },
    {
        name: "nodejs",
        version: "7.0.0",
        date: "2016-10-25",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.1.0",
        date: "2016-11-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.2.0",
        date: "2016-11-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.3.0",
        date: "2016-12-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.4.0",
        date: "2017-01-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.5.0",
        date: "2017-01-31",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.6.0",
        date: "2017-02-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.7.0",
        date: "2017-02-28",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.8.0",
        date: "2017-03-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.9.0",
        date: "2017-04-11",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "7.10.0",
        date: "2017-05-02",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.0.0",
        date: "2017-05-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.1.0",
        date: "2017-06-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.2.0",
        date: "2017-07-19",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.3.0",
        date: "2017-08-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.4.0",
        date: "2017-08-15",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.5.0",
        date: "2017-09-12",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.6.0",
        date: "2017-09-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.7.0",
        date: "2017-10-11",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.8.0",
        date: "2017-10-24",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "8.9.0",
        date: "2017-10-31",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.10.0",
        date: "2018-03-06",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.11.0",
        date: "2018-03-28",
        lts: "Carbon",
        security: true
    },
    {
        name: "nodejs",
        version: "8.12.0",
        date: "2018-09-10",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.13.0",
        date: "2018-11-20",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.14.0",
        date: "2018-11-27",
        lts: "Carbon",
        security: true
    },
    {
        name: "nodejs",
        version: "8.15.0",
        date: "2018-12-26",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.16.0",
        date: "2019-04-16",
        lts: "Carbon",
        security: false
    },
    {
        name: "nodejs",
        version: "8.17.0",
        date: "2019-12-17",
        lts: "Carbon",
        security: true
    },
    {
        name: "nodejs",
        version: "9.0.0",
        date: "2017-10-31",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.1.0",
        date: "2017-11-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.2.0",
        date: "2017-11-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.3.0",
        date: "2017-12-12",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.4.0",
        date: "2018-01-10",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.5.0",
        date: "2018-01-31",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.6.0",
        date: "2018-02-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.7.0",
        date: "2018-03-01",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.8.0",
        date: "2018-03-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.9.0",
        date: "2018-03-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "9.10.0",
        date: "2018-03-28",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "9.11.0",
        date: "2018-04-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.0.0",
        date: "2018-04-24",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.1.0",
        date: "2018-05-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.2.0",
        date: "2018-05-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.3.0",
        date: "2018-05-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.4.0",
        date: "2018-06-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.5.0",
        date: "2018-06-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.6.0",
        date: "2018-07-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.7.0",
        date: "2018-07-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.8.0",
        date: "2018-08-01",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.9.0",
        date: "2018-08-15",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.10.0",
        date: "2018-09-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.11.0",
        date: "2018-09-19",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.12.0",
        date: "2018-10-10",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "10.13.0",
        date: "2018-10-30",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.14.0",
        date: "2018-11-27",
        lts: "Dubnium",
        security: true
    },
    {
        name: "nodejs",
        version: "10.15.0",
        date: "2018-12-26",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.16.0",
        date: "2019-05-28",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.17.0",
        date: "2019-10-22",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.18.0",
        date: "2019-12-17",
        lts: "Dubnium",
        security: true
    },
    {
        name: "nodejs",
        version: "10.19.0",
        date: "2020-02-05",
        lts: "Dubnium",
        security: true
    },
    {
        name: "nodejs",
        version: "10.20.0",
        date: "2020-03-26",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.21.0",
        date: "2020-06-02",
        lts: "Dubnium",
        security: true
    },
    {
        name: "nodejs",
        version: "10.22.0",
        date: "2020-07-21",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.23.0",
        date: "2020-10-27",
        lts: "Dubnium",
        security: false
    },
    {
        name: "nodejs",
        version: "10.24.0",
        date: "2021-02-23",
        lts: "Dubnium",
        security: true
    },
    {
        name: "nodejs",
        version: "11.0.0",
        date: "2018-10-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.1.0",
        date: "2018-10-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.2.0",
        date: "2018-11-15",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.3.0",
        date: "2018-11-27",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "11.4.0",
        date: "2018-12-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.5.0",
        date: "2018-12-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.6.0",
        date: "2018-12-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.7.0",
        date: "2019-01-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.8.0",
        date: "2019-01-24",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.9.0",
        date: "2019-01-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.10.0",
        date: "2019-02-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.11.0",
        date: "2019-03-05",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.12.0",
        date: "2019-03-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.13.0",
        date: "2019-03-28",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.14.0",
        date: "2019-04-10",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "11.15.0",
        date: "2019-04-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.0.0",
        date: "2019-04-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.1.0",
        date: "2019-04-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.2.0",
        date: "2019-05-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.3.0",
        date: "2019-05-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.4.0",
        date: "2019-06-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.5.0",
        date: "2019-06-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.6.0",
        date: "2019-07-03",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.7.0",
        date: "2019-07-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.8.0",
        date: "2019-08-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.9.0",
        date: "2019-08-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.10.0",
        date: "2019-09-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.11.0",
        date: "2019-09-25",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.12.0",
        date: "2019-10-11",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "12.13.0",
        date: "2019-10-21",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "12.14.0",
        date: "2019-12-17",
        lts: "Erbium",
        security: true
    },
    {
        name: "nodejs",
        version: "12.15.0",
        date: "2020-02-05",
        lts: "Erbium",
        security: true
    },
    {
        name: "nodejs",
        version: "12.16.0",
        date: "2020-02-11",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "12.17.0",
        date: "2020-05-26",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "12.18.0",
        date: "2020-06-02",
        lts: "Erbium",
        security: true
    },
    {
        name: "nodejs",
        version: "12.19.0",
        date: "2020-10-06",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "12.20.0",
        date: "2020-11-24",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "12.21.0",
        date: "2021-02-23",
        lts: "Erbium",
        security: true
    },
    {
        name: "nodejs",
        version: "12.22.0",
        date: "2021-03-30",
        lts: "Erbium",
        security: false
    },
    {
        name: "nodejs",
        version: "13.0.0",
        date: "2019-10-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.1.0",
        date: "2019-11-05",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.2.0",
        date: "2019-11-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.3.0",
        date: "2019-12-03",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.4.0",
        date: "2019-12-17",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "13.5.0",
        date: "2019-12-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.6.0",
        date: "2020-01-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.7.0",
        date: "2020-01-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.8.0",
        date: "2020-02-05",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "13.9.0",
        date: "2020-02-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.10.0",
        date: "2020-03-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.11.0",
        date: "2020-03-12",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.12.0",
        date: "2020-03-26",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.13.0",
        date: "2020-04-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "13.14.0",
        date: "2020-04-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.0.0",
        date: "2020-04-21",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.1.0",
        date: "2020-04-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.2.0",
        date: "2020-05-05",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.3.0",
        date: "2020-05-19",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.4.0",
        date: "2020-06-02",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "14.5.0",
        date: "2020-06-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.6.0",
        date: "2020-07-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.7.0",
        date: "2020-07-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.8.0",
        date: "2020-08-11",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.9.0",
        date: "2020-08-27",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.10.0",
        date: "2020-09-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.11.0",
        date: "2020-09-15",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "14.12.0",
        date: "2020-09-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.13.0",
        date: "2020-09-29",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.14.0",
        date: "2020-10-15",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "14.15.0",
        date: "2020-10-27",
        lts: "Fermium",
        security: false
    },
    {
        name: "nodejs",
        version: "14.16.0",
        date: "2021-02-23",
        lts: "Fermium",
        security: true
    },
    {
        name: "nodejs",
        version: "14.17.0",
        date: "2021-05-11",
        lts: "Fermium",
        security: false
    },
    {
        name: "nodejs",
        version: "14.18.0",
        date: "2021-09-28",
        lts: "Fermium",
        security: false
    },
    {
        name: "nodejs",
        version: "14.19.0",
        date: "2022-02-01",
        lts: "Fermium",
        security: false
    },
    {
        name: "nodejs",
        version: "15.0.0",
        date: "2020-10-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.1.0",
        date: "2020-11-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.2.0",
        date: "2020-11-10",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.3.0",
        date: "2020-11-24",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.4.0",
        date: "2020-12-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.5.0",
        date: "2020-12-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.6.0",
        date: "2021-01-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.7.0",
        date: "2021-01-25",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.8.0",
        date: "2021-02-02",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.9.0",
        date: "2021-02-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.10.0",
        date: "2021-02-23",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "15.11.0",
        date: "2021-03-03",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.12.0",
        date: "2021-03-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.13.0",
        date: "2021-03-31",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "15.14.0",
        date: "2021-04-06",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.0.0",
        date: "2021-04-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.1.0",
        date: "2021-05-04",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.2.0",
        date: "2021-05-19",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.3.0",
        date: "2021-06-03",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.4.0",
        date: "2021-06-23",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.5.0",
        date: "2021-07-14",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.6.0",
        date: "2021-07-29",
        lts: false,
        security: true
    },
    {
        name: "nodejs",
        version: "16.7.0",
        date: "2021-08-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.8.0",
        date: "2021-08-25",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.9.0",
        date: "2021-09-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.10.0",
        date: "2021-09-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.11.0",
        date: "2021-10-08",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.12.0",
        date: "2021-10-20",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "16.13.0",
        date: "2021-10-26",
        lts: "Gallium",
        security: false
    },
    {
        name: "nodejs",
        version: "16.14.0",
        date: "2022-02-08",
        lts: "Gallium",
        security: false
    },
    {
        name: "nodejs",
        version: "16.15.0",
        date: "2022-04-26",
        lts: "Gallium",
        security: false
    },
    {
        name: "nodejs",
        version: "17.0.0",
        date: "2021-10-19",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.1.0",
        date: "2021-11-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.2.0",
        date: "2021-11-30",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.3.0",
        date: "2021-12-17",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.4.0",
        date: "2022-01-18",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.5.0",
        date: "2022-02-10",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.6.0",
        date: "2022-02-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.7.0",
        date: "2022-03-09",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.8.0",
        date: "2022-03-22",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "17.9.0",
        date: "2022-04-07",
        lts: false,
        security: false
    },
    {
        name: "nodejs",
        version: "18.0.0",
        date: "2022-04-18",
        lts: false,
        security: false
    }
];
const mod30 = {
    default: e24
};
var a31 = {};
a31 = {
    A: "ie",
    B: "edge",
    C: "firefox",
    D: "chrome",
    E: "safari",
    F: "opera",
    G: "ios_saf",
    H: "op_mini",
    I: "android",
    J: "bb",
    K: "op_mob",
    L: "and_chr",
    M: "and_ff",
    N: "ie_mob",
    O: "and_uc",
    P: "samsung",
    Q: "and_qq",
    R: "baidu",
    S: "kaios"
};
var o34 = a31;
var r42 = {};
r42.browsers = o34;
var B11 = {};
B11 = {
    0: "33",
    1: "34",
    2: "35",
    3: "36",
    4: "37",
    5: "38",
    6: "39",
    7: "40",
    8: "41",
    9: "42",
    A: "10",
    B: "11",
    C: "12",
    D: "7",
    E: "8",
    F: "9",
    G: "15",
    H: "101",
    I: "4",
    J: "6",
    K: "13",
    L: "14",
    M: "16",
    N: "17",
    O: "18",
    P: "79",
    Q: "80",
    R: "81",
    S: "83",
    T: "84",
    U: "85",
    V: "86",
    W: "87",
    X: "99",
    Y: "64",
    Z: "88",
    a: "89",
    b: "90",
    c: "91",
    d: "92",
    e: "93",
    f: "94",
    g: "95",
    h: "96",
    i: "97",
    j: "98",
    k: "100",
    l: "5",
    m: "19",
    n: "20",
    o: "21",
    p: "22",
    q: "23",
    r: "24",
    s: "25",
    t: "26",
    u: "27",
    v: "28",
    w: "29",
    x: "30",
    y: "31",
    z: "32",
    AB: "43",
    BB: "44",
    CB: "45",
    DB: "46",
    EB: "47",
    FB: "48",
    GB: "49",
    HB: "50",
    IB: "51",
    JB: "52",
    KB: "53",
    LB: "54",
    MB: "55",
    NB: "56",
    OB: "57",
    PB: "58",
    QB: "60",
    RB: "62",
    SB: "63",
    TB: "65",
    UB: "66",
    VB: "67",
    WB: "68",
    XB: "69",
    YB: "70",
    ZB: "71",
    aB: "72",
    bB: "73",
    cB: "74",
    dB: "75",
    eB: "76",
    fB: "77",
    gB: "78",
    hB: "11.1",
    iB: "12.1",
    jB: "3",
    kB: "59",
    lB: "61",
    mB: "82",
    nB: "3.2",
    oB: "10.1",
    pB: "15.2-15.3",
    qB: "15.4",
    rB: "11.5",
    sB: "4.2-4.3",
    tB: "5.5",
    uB: "2",
    vB: "3.5",
    wB: "3.6",
    xB: "102",
    yB: "103",
    zB: "104",
    "0B": "3.1",
    "1B": "5.1",
    "2B": "6.1",
    "3B": "7.1",
    "4B": "9.1",
    "5B": "13.1",
    "6B": "14.1",
    "7B": "15.1",
    "8B": "TP",
    "9B": "9.5-9.6",
    AC: "10.0-10.1",
    BC: "10.5",
    CC: "10.6",
    DC: "11.6",
    EC: "4.0-4.1",
    FC: "5.0-5.1",
    GC: "6.0-6.1",
    HC: "7.0-7.1",
    IC: "8.1-8.4",
    JC: "9.0-9.2",
    KC: "9.3",
    LC: "10.0-10.2",
    MC: "10.3",
    NC: "11.0-11.2",
    OC: "11.3-11.4",
    PC: "12.0-12.1",
    QC: "12.2-12.5",
    RC: "13.0-13.1",
    SC: "13.2",
    TC: "13.3",
    UC: "13.4-13.7",
    VC: "14.0-14.4",
    WC: "14.5-14.8",
    XC: "15.0-15.1",
    YC: "all",
    ZC: "2.1",
    aC: "2.2",
    bC: "2.3",
    cC: "4.1",
    dC: "4.4",
    eC: "4.4.3-4.4.4",
    fC: "12.12",
    gC: "5.0-5.4",
    hC: "6.2-6.4",
    iC: "7.2-7.4",
    jC: "8.2",
    kC: "9.2",
    lC: "11.1-11.2",
    mC: "12.0",
    nC: "13.0",
    oC: "14.0",
    pC: "15.0",
    qC: "16.0",
    rC: "10.4",
    sC: "7.12",
    tC: "2.5"
};
var C14 = B11;
var r43 = {};
r43.browserVersions = C14;
var C15 = {};
C15 = {
    A: {
        A: {
            J: .0131217,
            D: .00621152,
            E: .0426387,
            F: .063958,
            A: .0142129,
            B: .568515,
            tB: .009298
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "tB",
            "J",
            "D",
            "E",
            "F",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE",
        F: {
            tB: 962323200,
            J: 998870400,
            D: 1161129600,
            E: 1237420800,
            F: 1300060800,
            A: 1346716800,
            B: 1381968e3
        }
    },
    B: {
        A: {
            C: .003939,
            K: .004267,
            L: .004268,
            G: .070902,
            M: .027573,
            N: .007878,
            O: .027573,
            P: 0,
            Q: .004298,
            R: .00944,
            S: .004043,
            T: .007878,
            U: .003939,
            V: .003939,
            W: .007878,
            Z: .004318,
            a: .003939,
            b: .004118,
            c: .003939,
            d: .011817,
            e: .004118,
            f: .003939,
            g: .007878,
            h: .015756,
            i: .047268,
            j: .03939,
            X: .523887,
            k: 3.21422,
            H: .051207
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "C",
            "K",
            "L",
            "G",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "X",
            "k",
            "H",
            "",
            "",
            ""
        ],
        E: "Edge",
        F: {
            C: 1438128e3,
            K: 1447286400,
            L: 1470096e3,
            G: 1491868800,
            M: 1508198400,
            N: 1525046400,
            O: 1542067200,
            P: 1579046400,
            Q: 1581033600,
            R: 1586736e3,
            S: 1590019200,
            T: 1594857600,
            U: 1598486400,
            V: 1602201600,
            W: 1605830400,
            Z: 161136e4,
            a: 1614816e3,
            b: 1618358400,
            c: 1622073600,
            d: 1626912e3,
            e: 1630627200,
            f: 1632441600,
            g: 1634774400,
            h: 1637539200,
            i: 1641427200,
            j: 1643932800,
            X: 1646265600,
            k: 1649635200,
            H: 1651190400
        },
        D: {
            C: "ms",
            K: "ms",
            L: "ms",
            G: "ms",
            M: "ms",
            N: "ms",
            O: "ms"
        }
    },
    C: {
        A: {
            0: .009284,
            1: .004707,
            2: .009076,
            3: .007878,
            4: .004783,
            5: .004271,
            6: .004783,
            7: .00487,
            8: .005029,
            9: .0047,
            uB: .004118,
            jB: .004271,
            I: .019695,
            l: .004879,
            J: .020136,
            D: .005725,
            E: .004525,
            F: .00533,
            A: .004283,
            B: .003939,
            C: .004471,
            K: .004486,
            L: .00453,
            G: .008322,
            M: .004417,
            N: .004425,
            O: .004161,
            m: .004443,
            n: .004283,
            o: .008322,
            p: .013698,
            q: .004161,
            r: .008786,
            s: .004118,
            t: .004317,
            u: .004393,
            v: .004418,
            w: .008834,
            x: .008322,
            y: .008928,
            z: .004471,
            AB: .043329,
            BB: .007878,
            CB: .004356,
            DB: .004525,
            EB: .004293,
            FB: .003939,
            GB: .004538,
            HB: .008282,
            IB: .023634,
            JB: .082719,
            KB: .019695,
            LB: .011817,
            MB: .023634,
            NB: .019695,
            OB: .015756,
            PB: .003939,
            kB: .007878,
            QB: .007878,
            lB: .004356,
            RB: .004425,
            SB: .008322,
            Y: .00415,
            TB: .004267,
            UB: .003939,
            VB: .004267,
            WB: .007878,
            XB: .00415,
            YB: .004293,
            ZB: .004425,
            aB: .003939,
            bB: .00415,
            cB: .00415,
            dB: .004318,
            eB: .004356,
            fB: .003939,
            gB: .047268,
            P: .007878,
            Q: .007878,
            R: .015756,
            mB: .003939,
            S: .003939,
            T: .007878,
            U: .004268,
            V: .003939,
            W: .007878,
            Z: .011817,
            a: .011817,
            b: .007878,
            c: .098475,
            d: .003939,
            e: .011817,
            f: .047268,
            g: .015756,
            h: .023634,
            i: .031512,
            j: .598728,
            X: 1.68983,
            k: .019695,
            H: 0,
            vB: .008786,
            wB: .00487
        },
        B: "moz",
        C: [
            "uB",
            "jB",
            "vB",
            "wB",
            "I",
            "l",
            "J",
            "D",
            "E",
            "F",
            "A",
            "B",
            "C",
            "K",
            "L",
            "G",
            "M",
            "N",
            "O",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "kB",
            "QB",
            "lB",
            "RB",
            "SB",
            "Y",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "P",
            "Q",
            "R",
            "mB",
            "S",
            "T",
            "U",
            "V",
            "W",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "X",
            "k",
            "H",
            ""
        ],
        E: "Firefox",
        F: {
            0: 1413244800,
            1: 1417392e3,
            2: 1421107200,
            3: 1424736e3,
            4: 1428278400,
            5: 1431475200,
            6: 1435881600,
            7: 1439251200,
            8: 144288e4,
            9: 1446508800,
            uB: 1161648e3,
            jB: 1213660800,
            vB: 124632e4,
            wB: 1264032e3,
            I: 1300752e3,
            l: 1308614400,
            J: 1313452800,
            D: 1317081600,
            E: 1317081600,
            F: 1320710400,
            A: 1324339200,
            B: 1327968e3,
            C: 1331596800,
            K: 1335225600,
            L: 1338854400,
            G: 1342483200,
            M: 1346112e3,
            N: 1349740800,
            O: 1353628800,
            m: 1357603200,
            n: 1361232e3,
            o: 1364860800,
            p: 1368489600,
            q: 1372118400,
            r: 1375747200,
            s: 1379376e3,
            t: 1386633600,
            u: 1391472e3,
            v: 1395100800,
            w: 1398729600,
            x: 1402358400,
            y: 1405987200,
            z: 1409616e3,
            AB: 1450137600,
            BB: 1453852800,
            CB: 1457395200,
            DB: 1461628800,
            EB: 1465257600,
            FB: 1470096e3,
            GB: 1474329600,
            HB: 1479168e3,
            IB: 1485216e3,
            JB: 1488844800,
            KB: 149256e4,
            LB: 1497312e3,
            MB: 1502150400,
            NB: 1506556800,
            OB: 1510617600,
            PB: 1516665600,
            kB: 1520985600,
            QB: 1525824e3,
            lB: 1529971200,
            RB: 1536105600,
            SB: 1540252800,
            Y: 1544486400,
            TB: 154872e4,
            UB: 1552953600,
            VB: 1558396800,
            WB: 1562630400,
            XB: 1567468800,
            YB: 1571788800,
            ZB: 1575331200,
            aB: 1578355200,
            bB: 1581379200,
            cB: 1583798400,
            dB: 1586304e3,
            eB: 1588636800,
            fB: 1591056e3,
            gB: 1593475200,
            P: 1595894400,
            Q: 1598313600,
            R: 1600732800,
            mB: 1603152e3,
            S: 1605571200,
            T: 1607990400,
            U: 1611619200,
            V: 1614038400,
            W: 1616457600,
            Z: 1618790400,
            a: 1622505600,
            b: 1626134400,
            c: 1628553600,
            d: 1630972800,
            e: 1633392e3,
            f: 1635811200,
            g: 1638835200,
            h: 1641859200,
            i: 1644364800,
            j: 1646697600,
            X: 1649116800,
            k: null,
            H: null
        }
    },
    D: {
        A: {
            0: .004118,
            1: .007878,
            2: .007878,
            3: .004335,
            4: .004464,
            5: .019695,
            6: .007878,
            7: .019695,
            8: .007878,
            9: .007878,
            I: .004706,
            l: .004879,
            J: .004879,
            D: .005591,
            E: .005591,
            F: .005591,
            A: .004534,
            B: .004464,
            C: .010424,
            K: .0083,
            L: .004706,
            G: .015087,
            M: .004393,
            N: .004393,
            O: .008652,
            m: .008322,
            n: .004393,
            o: .004317,
            p: .003939,
            q: .008786,
            r: .003939,
            s: .004461,
            t: .004141,
            u: .004326,
            v: .0047,
            w: .004538,
            x: .008322,
            y: .008596,
            z: .004566,
            AB: .011817,
            BB: .007878,
            CB: .007878,
            DB: .007878,
            EB: .015756,
            FB: .027573,
            GB: .070902,
            HB: .007878,
            IB: .011817,
            JB: .007878,
            KB: .015756,
            LB: .007878,
            MB: .011817,
            NB: .043329,
            OB: .011817,
            PB: .011817,
            kB: .011817,
            QB: .019695,
            lB: .015756,
            RB: .015756,
            SB: .015756,
            Y: .011817,
            TB: .019695,
            UB: .027573,
            VB: .015756,
            WB: .007878,
            XB: .059085,
            YB: .027573,
            ZB: .011817,
            aB: .03939,
            bB: .011817,
            cB: .023634,
            dB: .063024,
            eB: .07878,
            fB: .015756,
            gB: .03939,
            P: .216645,
            Q: .059085,
            R: .043329,
            S: .126048,
            T: .066963,
            U: .074841,
            V: .074841,
            W: .102414,
            Z: .027573,
            a: .055146,
            b: .03939,
            c: .090597,
            d: .07878,
            e: .070902,
            f: .098475,
            g: .063024,
            h: .212706,
            i: .216645,
            j: .417534,
            X: 4.03354,
            k: 17.2016,
            H: .259974,
            xB: .015756,
            yB: .007878,
            zB: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "I",
            "l",
            "J",
            "D",
            "E",
            "F",
            "A",
            "B",
            "C",
            "K",
            "L",
            "G",
            "M",
            "N",
            "O",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "kB",
            "QB",
            "lB",
            "RB",
            "SB",
            "Y",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "X",
            "k",
            "H",
            "xB",
            "yB",
            "zB"
        ],
        E: "Chrome",
        F: {
            0: 1392940800,
            1: 1397001600,
            2: 1400544e3,
            3: 1405468800,
            4: 1409011200,
            5: 141264e4,
            6: 1416268800,
            7: 1421798400,
            8: 1425513600,
            9: 1429401600,
            I: 1264377600,
            l: 1274745600,
            J: 1283385600,
            D: 1287619200,
            E: 1291248e3,
            F: 1296777600,
            A: 1299542400,
            B: 1303862400,
            C: 1307404800,
            K: 1312243200,
            L: 1316131200,
            G: 1316131200,
            M: 1319500800,
            N: 1323734400,
            O: 1328659200,
            m: 1332892800,
            n: 133704e4,
            o: 1340668800,
            p: 1343692800,
            q: 1348531200,
            r: 1352246400,
            s: 1357862400,
            t: 1361404800,
            u: 1364428800,
            v: 1369094400,
            w: 1374105600,
            x: 1376956800,
            y: 1384214400,
            z: 1389657600,
            AB: 143208e4,
            BB: 1437523200,
            CB: 1441152e3,
            DB: 1444780800,
            EB: 1449014400,
            FB: 1453248e3,
            GB: 1456963200,
            HB: 1460592e3,
            IB: 1464134400,
            JB: 1469059200,
            KB: 1472601600,
            LB: 1476230400,
            MB: 1480550400,
            NB: 1485302400,
            OB: 1489017600,
            PB: 149256e4,
            kB: 1496707200,
            QB: 1500940800,
            lB: 1504569600,
            RB: 1508198400,
            SB: 1512518400,
            Y: 1516752e3,
            TB: 1520294400,
            UB: 1523923200,
            VB: 1527552e3,
            WB: 1532390400,
            XB: 1536019200,
            YB: 1539648e3,
            ZB: 1543968e3,
            aB: 154872e4,
            bB: 1552348800,
            cB: 1555977600,
            dB: 1559606400,
            eB: 1564444800,
            fB: 1568073600,
            gB: 1571702400,
            P: 1575936e3,
            Q: 1580860800,
            R: 1586304e3,
            S: 1589846400,
            T: 1594684800,
            U: 1598313600,
            V: 1601942400,
            W: 1605571200,
            Z: 1611014400,
            a: 1614556800,
            b: 1618272e3,
            c: 1621987200,
            d: 1626739200,
            e: 1630368e3,
            f: 1632268800,
            g: 1634601600,
            h: 1637020800,
            i: 1641340800,
            j: 1643673600,
            X: 1646092800,
            k: 1648512e3,
            H: 1650931200,
            xB: null,
            yB: null,
            zB: null
        }
    },
    E: {
        A: {
            I: 0,
            l: .008322,
            J: .004656,
            D: .004465,
            E: .004356,
            F: .004891,
            A: .004425,
            B: .004318,
            C: .003939,
            K: .03939,
            L: .181194,
            G: .074841,
            "0B": 0,
            nB: .008692,
            "1B": .007878,
            "2B": .00456,
            "3B": .004283,
            "4B": .015756,
            oB: .011817,
            hB: .027573,
            iB: .055146,
            "5B": .401778,
            "6B": .59085,
            "7B": .145743,
            pB: .165438,
            qB: 1.01232,
            "8B": 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "0B",
            "nB",
            "I",
            "l",
            "1B",
            "J",
            "2B",
            "D",
            "3B",
            "E",
            "F",
            "4B",
            "A",
            "oB",
            "B",
            "hB",
            "C",
            "iB",
            "K",
            "5B",
            "L",
            "6B",
            "G",
            "7B",
            "pB",
            "qB",
            "8B",
            "",
            ""
        ],
        E: "Safari",
        F: {
            "0B": 1205798400,
            nB: 1226534400,
            I: 1244419200,
            l: 1275868800,
            "1B": 131112e4,
            J: 1343174400,
            "2B": 13824e5,
            D: 13824e5,
            "3B": 1410998400,
            E: 1413417600,
            F: 1443657600,
            "4B": 1458518400,
            A: 1474329600,
            oB: 1490572800,
            B: 1505779200,
            hB: 1522281600,
            C: 1537142400,
            iB: 1553472e3,
            K: 1568851200,
            "5B": 1585008e3,
            L: 1600214400,
            "6B": 1619395200,
            G: 1632096e3,
            "7B": 1635292800,
            pB: 1639353600,
            qB: 1647216e3,
            "8B": null
        }
    },
    F: {
        A: {
            0: .005014,
            1: .009758,
            2: .004879,
            3: .007878,
            4: .004283,
            5: .004367,
            6: .004534,
            7: .007878,
            8: .004227,
            9: .004418,
            F: .0082,
            B: .016581,
            C: .004317,
            G: .00685,
            M: .00685,
            N: .00685,
            O: .005014,
            m: .006015,
            n: .004879,
            o: .006597,
            p: .006597,
            q: .013434,
            r: .006702,
            s: .006015,
            t: .005595,
            u: .004393,
            v: .003939,
            w: .004879,
            x: .004879,
            y: .003939,
            z: .005152,
            AB: .004161,
            BB: .004227,
            CB: .004725,
            DB: .011817,
            EB: .008942,
            FB: .004707,
            GB: .004827,
            HB: .004707,
            IB: .004707,
            JB: .004326,
            KB: .008922,
            LB: .014349,
            MB: .004425,
            NB: .00472,
            OB: .004425,
            PB: .004425,
            QB: .00472,
            RB: .004532,
            SB: .004566,
            Y: .02283,
            TB: .00867,
            UB: .004656,
            VB: .004642,
            WB: .003939,
            XB: .00944,
            YB: .004293,
            ZB: .004293,
            aB: .004298,
            bB: .096692,
            cB: .004201,
            dB: .004141,
            eB: .004257,
            fB: .003939,
            gB: .008236,
            P: .003939,
            Q: .003939,
            R: .008514,
            mB: .003939,
            S: .003939,
            T: .169377,
            U: .634179,
            V: .011817,
            W: 0,
            "9B": .00685,
            AC: 0,
            BC: .008392,
            CC: .004706,
            hB: .006229,
            rB: .004879,
            DC: .008786,
            iB: .00472
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "F",
            "9B",
            "AC",
            "BC",
            "CC",
            "B",
            "hB",
            "rB",
            "DC",
            "C",
            "iB",
            "G",
            "M",
            "N",
            "O",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "Y",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "P",
            "Q",
            "R",
            "mB",
            "S",
            "T",
            "U",
            "V",
            "W",
            "",
            ""
        ],
        E: "Opera",
        F: {
            0: 1445904e3,
            1: 1449100800,
            2: 1454371200,
            3: 1457308800,
            4: 146232e4,
            5: 1465344e3,
            6: 1470096e3,
            7: 1474329600,
            8: 1477267200,
            9: 1481587200,
            F: 1150761600,
            "9B": 1223424e3,
            AC: 1251763200,
            BC: 1267488e3,
            CC: 1277942400,
            B: 1292457600,
            hB: 1302566400,
            rB: 1309219200,
            DC: 1323129600,
            C: 1323129600,
            iB: 1352073600,
            G: 1372723200,
            M: 1377561600,
            N: 1381104e3,
            O: 1386288e3,
            m: 1390867200,
            n: 1393891200,
            o: 1399334400,
            p: 1401753600,
            q: 1405987200,
            r: 1409616e3,
            s: 1413331200,
            t: 1417132800,
            u: 1422316800,
            v: 1425945600,
            w: 1430179200,
            x: 1433808e3,
            y: 1438646400,
            z: 1442448e3,
            AB: 1486425600,
            BB: 1490054400,
            CB: 1494374400,
            DB: 1498003200,
            EB: 1502236800,
            FB: 1506470400,
            GB: 1510099200,
            HB: 1515024e3,
            IB: 1517961600,
            JB: 1521676800,
            KB: 1525910400,
            LB: 1530144e3,
            MB: 1534982400,
            NB: 1537833600,
            OB: 1543363200,
            PB: 1548201600,
            QB: 1554768e3,
            RB: 1561593600,
            SB: 1566259200,
            Y: 1570406400,
            TB: 1573689600,
            UB: 1578441600,
            VB: 1583971200,
            WB: 1587513600,
            XB: 1592956800,
            YB: 1595894400,
            ZB: 1600128e3,
            aB: 1603238400,
            bB: 161352e4,
            cB: 1612224e3,
            dB: 1616544e3,
            eB: 1619568e3,
            fB: 1623715200,
            gB: 1627948800,
            P: 1631577600,
            Q: 1633392e3,
            R: 1635984e3,
            mB: 1638403200,
            S: 1642550400,
            T: 1644969600,
            U: 1647993600,
            V: 1650412800,
            W: null
        },
        D: {
            F: "o",
            B: "o",
            C: "o",
            "9B": "o",
            AC: "o",
            BC: "o",
            CC: "o",
            hB: "o",
            rB: "o",
            DC: "o",
            iB: "o"
        }
    },
    G: {
        A: {
            E: 0,
            nB: 0,
            EC: 0,
            sB: .00300959,
            FC: .00451439,
            GC: .0270863,
            HC: .0165528,
            IC: .00752398,
            JC: .0225719,
            KC: .0842686,
            LC: .0210671,
            MC: .103831,
            NC: .0511631,
            OC: .0346103,
            PC: .0331055,
            QC: .577842,
            RC: .0300959,
            SC: .0135432,
            TC: .0677158,
            UC: .212176,
            VC: .651577,
            WC: 1.82381,
            XC: .732836,
            pB: 5.15092,
            qB: 5.37964
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "nB",
            "EC",
            "sB",
            "FC",
            "GC",
            "HC",
            "E",
            "IC",
            "JC",
            "KC",
            "LC",
            "MC",
            "NC",
            "OC",
            "PC",
            "QC",
            "RC",
            "SC",
            "TC",
            "UC",
            "VC",
            "WC",
            "XC",
            "pB",
            "qB",
            "",
            "",
            ""
        ],
        E: "Safari on iOS",
        F: {
            nB: 1270252800,
            EC: 1283904e3,
            sB: 1299628800,
            FC: 1331078400,
            GC: 1359331200,
            HC: 1394409600,
            E: 1410912e3,
            IC: 1413763200,
            JC: 1442361600,
            KC: 1458518400,
            LC: 1473724800,
            MC: 1490572800,
            NC: 1505779200,
            OC: 1522281600,
            PC: 1537142400,
            QC: 1553472e3,
            RC: 1568851200,
            SC: 1572220800,
            TC: 1580169600,
            UC: 1585008e3,
            VC: 1600214400,
            WC: 1619395200,
            XC: 1632096e3,
            pB: 1639353600,
            qB: 1647216e3
        }
    },
    H: {
        A: {
            YC: 1.07877
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "YC",
            "",
            "",
            ""
        ],
        E: "Opera Mini",
        F: {
            YC: 1426464e3
        }
    },
    I: {
        A: {
            jB: 0,
            I: .0207421,
            H: 0,
            ZC: 0,
            aC: 0,
            bC: 0,
            cC: .0207421,
            sB: .0725973,
            dC: 0,
            eC: .352616
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "ZC",
            "aC",
            "bC",
            "jB",
            "I",
            "cC",
            "sB",
            "dC",
            "eC",
            "H",
            "",
            "",
            ""
        ],
        E: "Android Browser",
        F: {
            ZC: 1256515200,
            aC: 1274313600,
            bC: 1291593600,
            jB: 1298332800,
            I: 1318896e3,
            cC: 1341792e3,
            sB: 1374624e3,
            dC: 1386547200,
            eC: 1401667200,
            H: 1651017600
        }
    },
    J: {
        A: {
            D: 0,
            A: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "D",
            "A",
            "",
            "",
            ""
        ],
        E: "Blackberry Browser",
        F: {
            D: 1325376e3,
            A: 1359504e3
        }
    },
    K: {
        A: {
            A: 0,
            B: 0,
            C: 0,
            Y: .0111391,
            hB: 0,
            rB: 0,
            iB: 0
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "hB",
            "rB",
            "C",
            "iB",
            "Y",
            "",
            "",
            ""
        ],
        E: "Opera Mobile",
        F: {
            A: 1287100800,
            B: 1300752e3,
            hB: 1314835200,
            rB: 1318291200,
            C: 1330300800,
            iB: 1349740800,
            Y: 1613433600
        },
        D: {
            Y: "webkit"
        }
    },
    L: {
        A: {
            H: 40.1569
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "H",
            "",
            "",
            ""
        ],
        E: "Chrome for Android",
        F: {
            H: 1651017600
        }
    },
    M: {
        A: {
            X: .321233
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "X",
            "",
            "",
            ""
        ],
        E: "Firefox for Android",
        F: {
            X: 1649116800
        }
    },
    N: {
        A: {
            A: .0115934,
            B: .022664
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE Mobile",
        F: {
            A: 1340150400,
            B: 1353456e3
        }
    },
    O: {
        A: {
            fC: .854601
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "fC",
            "",
            "",
            ""
        ],
        E: "UC Browser for Android",
        F: {
            fC: 1471392e3
        },
        D: {
            fC: "webkit"
        }
    },
    P: {
        A: {
            I: .219605,
            gC: .0103543,
            hC: .010304,
            iC: .0732015,
            jC: .0103584,
            kC: .0104574,
            oB: .0105043,
            lC: .0522868,
            mC: .0209147,
            nC: .0941162,
            oC: .125488,
            pC: .0836589,
            qC: 2.29016
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "I",
            "gC",
            "hC",
            "iC",
            "jC",
            "kC",
            "oB",
            "lC",
            "mC",
            "nC",
            "oC",
            "pC",
            "qC",
            "",
            "",
            ""
        ],
        E: "Samsung Internet",
        F: {
            I: 1461024e3,
            gC: 1481846400,
            hC: 1509408e3,
            iC: 1528329600,
            jC: 1546128e3,
            kC: 1554163200,
            oB: 1567900800,
            lC: 1582588800,
            mC: 1593475200,
            nC: 1605657600,
            oC: 1618531200,
            pC: 1629072e3,
            qC: 1640736e3
        }
    },
    Q: {
        A: {
            rC: .169708
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "rC",
            "",
            "",
            ""
        ],
        E: "QQ Browser",
        F: {
            rC: 1589846400
        }
    },
    R: {
        A: {
            sC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "sC",
            "",
            "",
            ""
        ],
        E: "Baidu Browser",
        F: {
            sC: 1491004800
        }
    },
    S: {
        A: {
            tC: .072732
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "tC",
            "",
            "",
            ""
        ],
        E: "KaiOS Browser",
        F: {
            tC: 1527811200
        }
    }
};
var r44 = C15;
var o35 = {};
const s31 = r42.browsers;
const i30 = r43.browserVersions;
const A11 = r44;
function unpackBrowserVersions(B112) {
    return Object.keys(B112).reduce((e1, C112)=>{
        e1[i30[C112]] = B112[C112];
        return e1;
    }, {});
}
o35.agents = Object.keys(A11).reduce((B23, e2)=>{
    let C29 = A11[e2];
    B23[s31[e2]] = Object.keys(C29).reduce((B32, e3134)=>{
        "A" === e3134 ? B32.usage_global = unpackBrowserVersions(C29[e3134]) : "C" === e3134 ? B32.versions = C29[e3134].reduce((B41, e4115)=>{
            "" === e4115 ? B41.push(null) : B41.push(i30[e4115]);
            return B41;
        }, []) : "D" === e3134 ? B32.prefix_exceptions = unpackBrowserVersions(C29[e3134]) : "E" === e3134 ? B32.browser = C29[e3134] : "F" === e3134 ? B32.release_date = Object.keys(C29[e3134]).reduce((B51, r190)=>{
            B51[i30[r190]] = C29[e3134][r190];
            return B51;
        }, {}) : B32.prefix = C29[e3134];
        return B32;
    }, {});
    return B23;
}, {});
const n39 = o35.agents;
const mod31 = {
    agents: n39,
    default: o35
};
var n40 = {
    "v0.8": {
        start: "2012-06-25",
        end: "2014-07-31"
    },
    "v0.10": {
        start: "2013-03-11",
        end: "2016-10-31"
    },
    "v0.12": {
        start: "2015-02-06",
        end: "2016-12-31"
    },
    v4: {
        start: "2015-09-08",
        lts: "2015-10-12",
        maintenance: "2017-04-01",
        end: "2018-04-30",
        codename: "Argon"
    },
    v5: {
        start: "2015-10-29",
        maintenance: "2016-04-30",
        end: "2016-06-30"
    },
    v6: {
        start: "2016-04-26",
        lts: "2016-10-18",
        maintenance: "2018-04-30",
        end: "2019-04-30",
        codename: "Boron"
    },
    v7: {
        start: "2016-10-25",
        maintenance: "2017-04-30",
        end: "2017-06-30"
    },
    v8: {
        start: "2017-05-30",
        lts: "2017-10-31",
        maintenance: "2019-01-01",
        end: "2019-12-31",
        codename: "Carbon"
    },
    v9: {
        start: "2017-10-01",
        maintenance: "2018-04-01",
        end: "2018-06-30"
    },
    v10: {
        start: "2018-04-24",
        lts: "2018-10-30",
        maintenance: "2020-05-19",
        end: "2021-04-30",
        codename: "Dubnium"
    },
    v11: {
        start: "2018-10-23",
        maintenance: "2019-04-22",
        end: "2019-06-01"
    },
    v12: {
        start: "2019-04-23",
        lts: "2019-10-21",
        maintenance: "2020-11-30",
        end: "2022-04-30",
        codename: "Erbium"
    },
    v13: {
        start: "2019-10-22",
        maintenance: "2020-04-01",
        end: "2020-06-01"
    },
    v14: {
        start: "2020-04-21",
        lts: "2020-10-27",
        maintenance: "2021-10-19",
        end: "2023-04-30",
        codename: "Fermium"
    },
    v15: {
        start: "2020-10-20",
        maintenance: "2021-04-01",
        end: "2021-06-01"
    },
    v16: {
        start: "2021-04-20",
        lts: "2021-10-26",
        maintenance: "2022-10-18",
        end: "2024-04-30",
        codename: "Gallium"
    },
    v17: {
        start: "2021-10-19",
        maintenance: "2022-04-01",
        end: "2022-06-01"
    },
    v18: {
        start: "2022-04-19",
        lts: "2022-10-25",
        maintenance: "2023-10-18",
        end: "2025-04-30",
        codename: ""
    },
    v19: {
        start: "2022-10-18",
        maintenance: "2023-04-01",
        end: "2023-06-01"
    },
    v20: {
        start: "2023-04-18",
        lts: "2023-10-24",
        maintenance: "2024-10-22",
        end: "2026-04-30",
        codename: ""
    }
};
const mod32 = {
    default: n40
};
var a32 = {};
a32 = {
    "0.20": "39",
    .21: "41",
    .22: "41",
    .23: "41",
    .24: "41",
    .25: "42",
    .26: "42",
    .27: "43",
    .28: "43",
    .29: "43",
    "0.30": "44",
    .31: "45",
    .32: "45",
    .33: "45",
    .34: "45",
    .35: "45",
    .36: "47",
    .37: "49",
    "1.0": "49",
    1.1: "50",
    1.2: "51",
    1.3: "52",
    1.4: "53",
    1.5: "54",
    1.6: "56",
    1.7: "58",
    1.8: "59",
    "2.0": "61",
    2.1: "61",
    "3.0": "66",
    3.1: "66",
    "4.0": "69",
    4.1: "69",
    4.2: "69",
    "5.0": "73",
    "6.0": "76",
    6.1: "76",
    "7.0": "78",
    7.1: "78",
    7.2: "78",
    7.3: "78",
    "8.0": "80",
    8.1: "80",
    8.2: "80",
    8.3: "80",
    8.4: "80",
    8.5: "80",
    "9.0": "83",
    9.1: "83",
    9.2: "83",
    9.3: "83",
    9.4: "83",
    "10.0": "85",
    10.1: "85",
    10.2: "85",
    10.3: "85",
    10.4: "85",
    "11.0": "87",
    11.1: "87",
    11.2: "87",
    11.3: "87",
    11.4: "87",
    11.5: "87",
    "12.0": "89",
    12.1: "89",
    12.2: "89",
    "13.0": "91",
    13.1: "91",
    13.2: "91",
    13.3: "91",
    13.4: "91",
    13.5: "91",
    13.6: "91",
    "14.0": "93",
    14.1: "93",
    14.2: "93",
    "15.0": "94",
    15.1: "94",
    15.2: "94",
    15.3: "94",
    15.4: "94",
    15.5: "94",
    "16.0": "96",
    16.1: "96",
    16.2: "96",
    "17.0": "98",
    17.1: "98",
    17.2: "98",
    17.3: "98",
    17.4: "98",
    "18.0": "100",
    18.1: "100",
    18.2: "100",
    "19.0": "102"
};
var r45 = a32;
const mod33 = {
    default: r45
};
var r46 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var s32 = {};
function BrowserslistError(s1115) {
    (this || r46).name = "BrowserslistError";
    (this || r46).message = s1115;
    (this || r46).browserslist = true;
    Error.captureStackTrace && Error.captureStackTrace(this || r46, BrowserslistError);
}
BrowserslistError.prototype = Error.prototype;
s32 = BrowserslistError;
var e25 = s32;
var n41 = {};
var e26 = e25;
function noop1() {}
n41 = {
    loadQueries: function loadQueries() {
        throw new e26("Sharable configs are not supported in client-side build of Browserslist");
    },
    getStat: function getStat(o144) {
        return o144.stats;
    },
    loadConfig: function loadConfig(o238) {
        if (o238.config) throw new e26("Browserslist config are not supported in client-side build");
    },
    loadCountry: function loadCountry() {
        throw new e26("Country statistics are not supported in client-side build of Browserslist");
    },
    loadFeature: function loadFeature() {
        throw new e26("Supports queries are not available in client-side build of Browserslist");
    },
    currentNode: function currentNode(o331, n1150) {
        return o331([
            "maintained node versions"
        ], n1150)[0];
    },
    parseConfig: noop1,
    readConfig: noop1,
    findConfig: noop1,
    clearCaches: noop1,
    oldDataWarning: noop1
};
var t32 = n41;
n41.loadQueries;
var u26 = "default" in mod30 ? mod30.default : mod30;
var l29 = "default" in mod31 ? mod31.default : mod31;
var c30 = "default" in mod32 ? mod32.default : mod32;
var f25 = "default" in mod27 ? mod27.default : mod27;
var d21 = "default" in mod33 ? mod33.default : mod33;
var p24 = {};
var m21 = se;
var v20 = u26;
var g19 = l29.agents;
var w14 = c30;
var b18 = f25;
var h18 = d21;
var y14 = e25;
var x13 = t32;
var k10 = 31558432982.4;
var $11 = 37;
var j10 = 1;
var S13 = 2;
function isVersionsMatch(e1, r197) {
    return 0 === (e1 + ".").indexOf(r197 + ".");
}
function isEolReleased(e2) {
    var r247 = e2.slice(1);
    return browserslist.nodeVersions.some(function(e3135) {
        return isVersionsMatch(e3135, r247);
    });
}
function normalize(e4116) {
    return e4116.filter(function(e5116) {
        return "string" === typeof e5116;
    });
}
function normalizeElectron(e6115) {
    var r340 = e6115;
    3 === e6115.split(".").length && (r340 = e6115.split(".").slice(0, -1).join("."));
    return r340;
}
function nameMapper(e7108) {
    return function mapName(r434) {
        return e7108 + " " + r434;
    };
}
function getMajor(e8112) {
    return parseInt(e8112.split(".")[0]);
}
function getMajorVersions(e9112, r530) {
    if (0 === e9112.length) return [];
    var n1151 = uniq(e9112.map(getMajor));
    var s1116 = n1151[n1151.length - r530];
    if (!s1116) return e9112;
    var t1157 = [];
    for(var o145 = e9112.length - 1; o145 >= 0; o145--){
        if (s1116 > getMajor(e9112[o145])) break;
        t1157.unshift(e9112[o145]);
    }
    return t1157;
}
function uniq(e1025) {
    var r629 = [];
    for(var n2131 = 0; n2131 < e1025.length; n2131++)-1 === r629.indexOf(e1025[n2131]) && r629.push(e1025[n2131]);
    return r629;
}
function fillUsage(e1124, r725, n339) {
    for(var s2107 in n339)e1124[r725 + " " + s2107] = n339[s2107];
}
function generateFilter(e1224, r824) {
    r824 = parseFloat(r824);
    return ">" === e1224 ? function(e1323) {
        return parseFloat(e1323) > r824;
    } : ">=" === e1224 ? function(e1422) {
        return parseFloat(e1422) >= r824;
    } : "<" === e1224 ? function(e1521) {
        return parseFloat(e1521) < r824;
    } : function(e1621) {
        return parseFloat(e1621) <= r824;
    };
}
function generateSemverFilter(e1720, r920) {
    r920 = r920.split(".").map(parseSimpleInt);
    r920[1] = r920[1] || 0;
    r920[2] = r920[2] || 0;
    return ">" === e1720 ? function(e1817) {
        e1817 = e1817.split(".").map(parseSimpleInt);
        return compareSemver(e1817, r920) > 0;
    } : ">=" === e1720 ? function(e1916) {
        e1916 = e1916.split(".").map(parseSimpleInt);
        return compareSemver(e1916, r920) >= 0;
    } : "<" === e1720 ? function(e2015) {
        e2015 = e2015.split(".").map(parseSimpleInt);
        return compareSemver(r920, e2015) > 0;
    } : function(e2112) {
        e2112 = e2112.split(".").map(parseSimpleInt);
        return compareSemver(r920, e2112) >= 0;
    };
}
function parseSimpleInt(e2211) {
    return parseInt(e2211);
}
function compare1(e2310, r1019) {
    return e2310 < r1019 ? -1 : e2310 > r1019 ? 1 : 0;
}
function compareSemver(e2410, r1121) {
    return compare1(parseInt(e2410[0]), parseInt(r1121[0])) || compare1(parseInt(e2410[1] || "0"), parseInt(r1121[1] || "0")) || compare1(parseInt(e2410[2] || "0"), parseInt(r1121[2] || "0"));
}
function semverFilterLoose(e2510, r1217) {
    r1217 = r1217.split(".").map(parseSimpleInt);
    "undefined" === typeof r1217[1] && (r1217[1] = "x");
    switch(e2510){
        case "<=":
            return function(e2610) {
                e2610 = e2610.split(".").map(parseSimpleInt);
                return compareSemverLoose(e2610, r1217) <= 0;
            };
        case ">=":
        default:
            return function(e27) {
                e27 = e27.split(".").map(parseSimpleInt);
                return compareSemverLoose(e27, r1217) >= 0;
            };
    }
}
function compareSemverLoose(e28, r1314) {
    return e28[0] !== r1314[0] ? e28[0] < r1314[0] ? -1 : 1 : "x" === r1314[1] ? 0 : e28[1] !== r1314[1] ? e28[1] < r1314[1] ? -1 : 1 : 0;
}
function resolveVersion(e29, r1414) {
    return -1 !== e29.versions.indexOf(r1414) ? r1414 : !!browserslist.versionAliases[e29.name][r1414] && browserslist.versionAliases[e29.name][r1414];
}
function normalizeVersion(e30, r1512) {
    var n435 = resolveVersion(e30, r1512);
    return n435 || 1 === e30.versions.length && e30.versions[0];
}
function filterByYear(e31, r1611) {
    e31 /= 1e3;
    return Object.keys(g19).reduce(function(n531, s389) {
        var t2143 = byName(s389, r1611);
        if (!t2143) return n531;
        var o239 = Object.keys(t2143.releaseDate).filter(function(r1711) {
            var n630 = t2143.releaseDate[r1711];
            return null !== n630 && n630 >= e31;
        });
        return n531.concat(o239.map(nameMapper(t2143.name)));
    }, []);
}
function cloneData(e32) {
    return {
        name: e32.name,
        versions: e32.versions,
        released: e32.released,
        releaseDate: e32.releaseDate
    };
}
function mapVersions(e33, r1810) {
    e33.versions = e33.versions.map(function(e34) {
        return r1810[e34] || e34;
    });
    e33.released = e33.versions.map(function(e35) {
        return r1810[e35] || e35;
    });
    var n728 = {};
    for(var s421 in e33.releaseDate)n728[r1810[s421] || s421] = e33.releaseDate[s421];
    e33.releaseDate = n728;
    return e33;
}
function byName(e36, r198) {
    e36 = e36.toLowerCase();
    e36 = browserslist.aliases[e36] || e36;
    if (r198.mobileToDesktop && browserslist.desktopNames[e36]) {
        var n825 = browserslist.data[browserslist.desktopNames[e36]];
        if ("android" === e36) return normalizeAndroidData(cloneData(browserslist.data[e36]), n825);
        var s515 = cloneData(n825);
        s515.name = e36;
        "op_mob" === e36 && (s515 = mapVersions(s515, {
            "10.0-10.1": "10"
        }));
        return s515;
    }
    return browserslist.data[e36];
}
function normalizeAndroidVersions(e37, r205) {
    var n924 = $11;
    var s612 = r205[r205.length - 1];
    return e37.filter(function(e38) {
        return /^(?:[2-4]\.|[34]$)/.test(e38);
    }).concat(r205.slice(n924 - s612 - 1));
}
function normalizeAndroidData(e39, r2114) {
    e39.released = normalizeAndroidVersions(e39.released, r2114.released);
    e39.versions = normalizeAndroidVersions(e39.versions, r2114.versions);
    return e39;
}
function checkName(e40, r2213) {
    var n1023 = byName(e40, r2213);
    if (!n1023) throw new y14("Unknown browser " + e40);
    return n1023;
}
function unknownQuery(e41) {
    return new y14("Unknown browser query `" + e41 + "`. Maybe you are using old Browserslist or made typo in query.");
}
function filterAndroid(e42, r2310, n1152) {
    if (n1152.mobileToDesktop) return e42;
    var s712 = browserslist.data.android.released;
    var t3114 = s712[s712.length - 1];
    var o332 = t3114 - $11 - r2310;
    return o332 > 0 ? e42.slice(-1) : e42.slice(o332 - 1);
}
function resolve(e43, r248) {
    e43 = Array.isArray(e43) ? flatten(e43.map(parse3)) : parse3(e43);
    return e43.reduce(function(e44, n1219, s812) {
        var t4111 = n1219.queryString;
        var o423 = 0 === t4111.indexOf("not ");
        if (o423) {
            if (0 === s812) throw new y14("Write any browsers query (for instance, `defaults`) before `" + t4111 + "`");
            t4111 = t4111.slice(4);
        }
        for(var a147 = 0; a147 < O13.length; a147++){
            var i1114 = O13[a147];
            var u125 = t4111.match(i1114.regexp);
            if (u125) {
                var l133 = [
                    r248
                ].concat(u125.slice(1));
                var c136 = i1114.select.apply(browserslist, l133).map(function(e45) {
                    var n1316 = e45.split(" ");
                    return "0" === n1316[1] ? n1316[0] + " " + byName(n1316[0], r248).versions[0] : e45;
                });
                switch(n1219.type){
                    case S13:
                        return o423 ? e44.filter(function(e46) {
                            return -1 === c136.indexOf(e46);
                        }) : e44.filter(function(e47) {
                            return -1 !== c136.indexOf(e47);
                        });
                    case j10:
                    default:
                        if (o423) {
                            var f120 = {};
                            c136.forEach(function(e48) {
                                f120[e48] = true;
                            });
                            return e44.filter(function(e49) {
                                return !f120[e49];
                            });
                        }
                        return e44.concat(c136);
                }
            }
        }
        throw unknownQuery(t4111);
    }, []);
}
var V11 = {};
function browserslist(e50, r253) {
    "undefined" === typeof r253 && (r253 = {});
    "undefined" === typeof r253.path && (r253.path = b18.resolve ? b18.resolve(".") : ".");
    if ("undefined" === typeof e50 || null === e50) {
        var n1416 = browserslist.loadConfig(r253);
        e50 = n1416 || browserslist.defaults;
    }
    if (!("string" === typeof e50 || Array.isArray(e50))) throw new y14("Browser queries must be an array or string. Got " + typeof e50 + ".");
    var s912 = {
        ignoreUnknownVersions: r253.ignoreUnknownVersions,
        dangerousExtend: r253.dangerousExtend,
        mobileToDesktop: r253.mobileToDesktop,
        path: r253.path,
        env: r253.env
    };
    x13.oldDataWarning(browserslist.data);
    var t5111 = x13.getStat(r253, browserslist.data);
    if (t5111) {
        s912.customUsage = {};
        for(var o522 in t5111)fillUsage(s912.customUsage, o522, t5111[o522]);
    }
    var a228 = JSON.stringify([
        e50,
        s912
    ]);
    if (V11[a228]) return V11[a228];
    var i255 = uniq(resolve(e50, s912)).sort(function(e51, r263) {
        e51 = e51.split(" ");
        r263 = r263.split(" ");
        if (e51[0] === r263[0]) {
            var n1515 = e51[1].split("-")[0];
            var s1012 = r263[1].split("-")[0];
            return compareSemver(s1012.split("."), n1515.split("."));
        }
        return compare1(e51[0], r263[0]);
    });
    m21.env.BROWSERSLIST_DISABLE_CACHE || (V11[a228] = i255);
    return i255;
}
function parse3(e52) {
    var r272 = [];
    do {
        e52 = doMatch(e52, r272);
    }while (e52)
    return r272;
}
function doMatch(e53, r282) {
    var n1614 = /^(?:,\s*|\s+or\s+)(.*)/i;
    var s1117 = /^\s+and\s+(.*)/i;
    return find1(e53, function(e54, t636, o615) {
        if (s1117.test(e54)) {
            r282.unshift({
                type: S13,
                queryString: e54.match(s1117)[1]
            });
            return true;
        }
        if (n1614.test(e54)) {
            r282.unshift({
                type: j10,
                queryString: e54.match(n1614)[1]
            });
            return true;
        }
        if (t636 === o615) {
            r282.unshift({
                type: j10,
                queryString: e54.trim()
            });
            return true;
        }
        return false;
    });
}
function find1(e55, r291) {
    for(var n1714 = 1, s1212 = e55.length; n1714 <= s1212; n1714++){
        var t732 = e55.substr(-n1714, n1714);
        if (r291(t732, n1714, s1212)) return e55.slice(0, -n1714);
    }
    return "";
}
function flatten(e56) {
    return Array.isArray(e56) ? e56.reduce(function(e57, r301) {
        return e57.concat(flatten(r301));
    }, []) : [
        e56
    ];
}
browserslist.cache = {};
browserslist.data = {};
browserslist.usage = {
    global: {},
    custom: null
};
browserslist.defaults = [
    "> 0.5%",
    "last 2 versions",
    "Firefox ESR",
    "not dead"
];
browserslist.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
};
browserslist.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    op_mob: "opera",
    android: "chrome"
};
browserslist.versionAliases = {};
browserslist.clearCaches = x13.clearCaches;
browserslist.parseConfig = x13.parseConfig;
browserslist.readConfig = x13.readConfig;
browserslist.findConfig = x13.findConfig;
browserslist.loadConfig = x13.loadConfig;
browserslist.coverage = function(e58, r3110) {
    var n1814;
    if ("undefined" === typeof r3110) n1814 = browserslist.usage.global;
    else if ("my stats" === r3110) {
        var s1311 = {};
        s1311.path = b18.resolve ? b18.resolve(".") : ".";
        var t828 = x13.getStat(s1311);
        if (!t828) throw new y14("Custom usage statistics was not provided");
        n1814 = {};
        for(var o714 in t828)fillUsage(n1814, o714, t828[o714]);
    } else if ("string" === typeof r3110) {
        r3110 = r3110.length > 2 ? r3110.toLowerCase() : r3110.toUpperCase();
        x13.loadCountry(browserslist.usage, r3110, browserslist.data);
        n1814 = browserslist.usage[r3110];
    } else {
        "dataByBrowser" in r3110 && (r3110 = r3110.dataByBrowser);
        n1814 = {};
        for(var a327 in r3110)for(var i323 in r3110[a327])n1814[a327 + " " + i323] = r3110[a327][i323];
    }
    return e58.reduce(function(e59, r3210) {
        var s1411 = n1814[r3210];
        void 0 === s1411 && (s1411 = n1814[r3210.replace(/ \S+$/, " 0")]);
        return e59 + (s1411 || 0);
    }, 0);
};
function nodeQuery(e60, r3310) {
    var n1913 = browserslist.nodeVersions.filter(function(e61) {
        return isVersionsMatch(e61, r3310);
    });
    if (0 === n1913.length) {
        if (e60.ignoreUnknownVersions) return [];
        throw new y14("Unknown version " + r3310 + " of Node.js");
    }
    return [
        "node " + n1913[n1913.length - 1]
    ];
}
function sinceQuery(e62, r341, n2013, s1511) {
    r341 = parseInt(r341);
    n2013 = parseInt(n2013 || "01") - 1;
    s1511 = parseInt(s1511 || "01");
    return filterByYear(Date.UTC(r341, n2013, s1511, 0, 0, 0), e62);
}
function coverQuery(e63, r351, n2132) {
    r351 = parseFloat(r351);
    var s1611 = browserslist.usage.global;
    if (n2132) if (n2132.match(/^my\s+stats$/i)) {
        if (!e63.customUsage) throw new y14("Custom usage statistics was not provided");
        s1611 = e63.customUsage;
    } else {
        var t926;
        t926 = 2 === n2132.length ? n2132.toUpperCase() : n2132.toLowerCase();
        x13.loadCountry(browserslist.usage, t926, browserslist.data);
        s1611 = browserslist.usage[t926];
    }
    var o812 = Object.keys(s1611).sort(function(e64, r361) {
        return s1611[r361] - s1611[e64];
    });
    var a425 = 0;
    var i419 = [];
    var u221;
    for(var l223 = 0; l223 < o812.length; l223++){
        u221 = o812[l223];
        if (0 === s1611[u221]) break;
        a425 += s1611[u221];
        i419.push(u221);
        if (a425 >= r351) break;
    }
    return i419;
}
var O13 = [
    {
        regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
        select: function(e65, r371) {
            return Object.keys(g19).reduce(function(n2213, s1711) {
                var t1025 = byName(s1711, e65);
                if (!t1025) return n2213;
                var o96 = getMajorVersions(t1025.released, r371);
                o96 = o96.map(nameMapper(t1025.name));
                "android" === t1025.name && (o96 = filterAndroid(o96, r371, e65));
                return n2213.concat(o96);
            }, []);
        }
    },
    {
        regexp: /^last\s+(\d+)\s+versions?$/i,
        select: function(e66, r381) {
            return Object.keys(g19).reduce(function(n2313, s1811) {
                var t1158 = byName(s1811, e66);
                if (!t1158) return n2313;
                var o105 = t1158.released.slice(-r381);
                o105 = o105.map(nameMapper(t1158.name));
                "android" === t1158.name && (o105 = filterAndroid(o105, r381, e66));
                return n2313.concat(o105);
            }, []);
        }
    },
    {
        regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
        select: function(e67, r391) {
            var n2413 = getMajorVersions(Object.keys(h18), r391);
            return n2413.map(function(e68) {
                return "chrome " + h18[e68];
            });
        }
    },
    {
        regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
        select: function(e69, r401) {
            return getMajorVersions(browserslist.nodeVersions, r401).map(function(e70) {
                return "node " + e70;
            });
        }
    },
    {
        regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
        select: function(e71, r4110, n2512) {
            var s1911 = checkName(n2512, e71);
            var t1223 = getMajorVersions(s1911.released, r4110);
            var o1114 = t1223.map(nameMapper(s1911.name));
            "android" === s1911.name && (o1114 = filterAndroid(o1114, r4110, e71));
            return o1114;
        }
    },
    {
        regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
        select: function(e72, r4210) {
            return Object.keys(h18).slice(-r4210).map(function(e73) {
                return "chrome " + h18[e73];
            });
        }
    },
    {
        regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
        select: function(e74, r435) {
            return browserslist.nodeVersions.slice(-r435).map(function(e75) {
                return "node " + e75;
            });
        }
    },
    {
        regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
        select: function(e76, r441, n2612) {
            var s2011 = checkName(n2612, e76);
            var t1323 = s2011.released.slice(-r441).map(nameMapper(s2011.name));
            "android" === s2011.name && (t1323 = filterAndroid(t1323, r441, e76));
            return t1323;
        }
    },
    {
        regexp: /^unreleased\s+versions$/i,
        select: function(e77) {
            return Object.keys(g19).reduce(function(r451, n2712) {
                var s2110 = byName(n2712, e77);
                if (!s2110) return r451;
                var t1421 = s2110.versions.filter(function(e78) {
                    return -1 === s2110.released.indexOf(e78);
                });
                t1421 = t1421.map(nameMapper(s2110.name));
                return r451.concat(t1421);
            }, []);
        }
    },
    {
        regexp: /^unreleased\s+electron\s+versions?$/i,
        select: function() {
            return [];
        }
    },
    {
        regexp: /^unreleased\s+(\w+)\s+versions?$/i,
        select: function(e79, r461) {
            var n2811 = checkName(r461, e79);
            return n2811.versions.filter(function(e80) {
                return -1 === n2811.released.indexOf(e80);
            }).map(nameMapper(n2811.name));
        }
    },
    {
        regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
        select: function(e81, r47) {
            return filterByYear(Date.now() - k10 * r47, e81);
        }
    },
    {
        regexp: /^since (\d+)$/i,
        select: sinceQuery
    },
    {
        regexp: /^since (\d+)-(\d+)$/i,
        select: sinceQuery
    },
    {
        regexp: /^since (\d+)-(\d+)-(\d+)$/i,
        select: sinceQuery
    },
    {
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
        select: function(e82, r48, n2911) {
            n2911 = parseFloat(n2911);
            var s2210 = browserslist.usage.global;
            return Object.keys(s2210).reduce(function(e83, t1520) {
                ">" === r48 ? s2210[t1520] > n2911 && e83.push(t1520) : "<" === r48 ? s2210[t1520] < n2911 && e83.push(t1520) : "<=" === r48 ? s2210[t1520] <= n2911 && e83.push(t1520) : s2210[t1520] >= n2911 && e83.push(t1520);
                return e83;
            }, []);
        }
    },
    {
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
        select: function(e84, r49, n3011) {
            n3011 = parseFloat(n3011);
            if (!e84.customUsage) throw new y14("Custom usage statistics was not provided");
            var s2310 = e84.customUsage;
            return Object.keys(s2310).reduce(function(e85, t1620) {
                var o1213 = s2310[t1620];
                if (null == o1213) return e85;
                ">" === r49 ? o1213 > n3011 && e85.push(t1620) : "<" === r49 ? o1213 < n3011 && e85.push(t1620) : "<=" === r49 ? o1213 <= n3011 && e85.push(t1620) : o1213 >= n3011 && e85.push(t1620);
                return e85;
            }, []);
        }
    },
    {
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
        select: function(e86, r50, n3111, s2410) {
            n3111 = parseFloat(n3111);
            var t1717 = x13.loadStat(e86, s2410, browserslist.data);
            if (t1717) {
                e86.customUsage = {};
                for(var o1312 in t1717)fillUsage(e86.customUsage, o1312, t1717[o1312]);
            }
            if (!e86.customUsage) throw new y14("Custom usage statistics was not provided");
            var a518 = e86.customUsage;
            return Object.keys(a518).reduce(function(e87, s2510) {
                var t1816 = a518[s2510];
                if (null == t1816) return e87;
                ">" === r50 ? t1816 > n3111 && e87.push(s2510) : "<" === r50 ? t1816 < n3111 && e87.push(s2510) : "<=" === r50 ? t1816 <= n3111 && e87.push(s2510) : t1816 >= n3111 && e87.push(s2510);
                return e87;
            }, []);
        }
    },
    {
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
        select: function(e88, r51, n3211, s2610) {
            n3211 = parseFloat(n3211);
            s2610 = 2 === s2610.length ? s2610.toUpperCase() : s2610.toLowerCase();
            x13.loadCountry(browserslist.usage, s2610, browserslist.data);
            var t1916 = browserslist.usage[s2610];
            return Object.keys(t1916).reduce(function(e89, s2710) {
                var o14 = t1916[s2710];
                if (null == o14) return e89;
                ">" === r51 ? o14 > n3211 && e89.push(s2710) : "<" === r51 ? o14 < n3211 && e89.push(s2710) : "<=" === r51 ? o14 <= n3211 && e89.push(s2710) : o14 >= n3211 && e89.push(s2710);
                return e89;
            }, []);
        }
    },
    {
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
        select: coverQuery
    },
    {
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
        select: coverQuery
    },
    {
        regexp: /^supports\s+([\w-]+)$/,
        select: function(e90, r52) {
            x13.loadFeature(browserslist.cache, r52);
            var n3310 = browserslist.cache[r52];
            return Object.keys(n3310).reduce(function(e91, r53) {
                var s2810 = n3310[r53];
                (s2810.indexOf("y") >= 0 || s2810.indexOf("a") >= 0) && e91.push(r53);
                return e91;
            }, []);
        }
    },
    {
        regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(e92, r54, n342) {
            var s2910 = normalizeElectron(r54);
            var t2015 = normalizeElectron(n342);
            if (!h18[s2910]) throw new y14("Unknown version " + r54 + " of electron");
            if (!h18[t2015]) throw new y14("Unknown version " + n342 + " of electron");
            r54 = parseFloat(r54);
            n342 = parseFloat(n342);
            return Object.keys(h18).filter(function(e93) {
                var s3010 = parseFloat(e93);
                return s3010 >= r54 && s3010 <= n342;
            }).map(function(e94) {
                return "chrome " + h18[e94];
            });
        }
    },
    {
        regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(e95, r55, n352) {
            return browserslist.nodeVersions.filter(semverFilterLoose(">=", r55)).filter(semverFilterLoose("<=", n352)).map(function(e96) {
                return "node " + e96;
            });
        }
    },
    {
        regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(e97, r56, n361, s3110) {
            var t2144 = checkName(r56, e97);
            n361 = parseFloat(normalizeVersion(t2144, n361) || n361);
            s3110 = parseFloat(normalizeVersion(t2144, s3110) || s3110);
            function filter(e98) {
                var r57 = parseFloat(e98);
                return r57 >= n361 && r57 <= s3110;
            }
            return t2144.released.filter(filter).map(nameMapper(t2144.name));
        }
    },
    {
        regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(e99, r58, n371) {
            var s3210 = normalizeElectron(n371);
            return Object.keys(h18).filter(generateFilter(r58, s3210)).map(function(e100) {
                return "chrome " + h18[e100];
            });
        }
    },
    {
        regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(e101, r59, n381) {
            return browserslist.nodeVersions.filter(generateSemverFilter(r59, n381)).map(function(e102) {
                return "node " + e102;
            });
        }
    },
    {
        regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
        select: function(e103, r60, n391, s33) {
            var t2216 = checkName(r60, e103);
            var o154 = browserslist.versionAliases[t2216.name][s33];
            o154 && (s33 = o154);
            return t2216.released.filter(generateFilter(n391, s33)).map(function(e104) {
                return t2216.name + " " + e104;
            });
        }
    },
    {
        regexp: /^(firefox|ff|fx)\s+esr$/i,
        select: function() {
            return [
                "firefox 91"
            ];
        }
    },
    {
        regexp: /(operamini|op_mini)\s+all/i,
        select: function() {
            return [
                "op_mini all"
            ];
        }
    },
    {
        regexp: /^electron\s+([\d.]+)$/i,
        select: function(e, r61) {
            var n401 = normalizeElectron(r61);
            var s34 = h18[n401];
            if (!s34) throw new y14("Unknown version " + r61 + " of electron");
            return [
                "chrome " + s34
            ];
        }
    },
    {
        regexp: /^node\s+(\d+)$/i,
        select: nodeQuery
    },
    {
        regexp: /^node\s+(\d+\.\d+)$/i,
        select: nodeQuery
    },
    {
        regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
        select: nodeQuery
    },
    {
        regexp: /^current\s+node$/i,
        select: function(e105) {
            return [
                x13.currentNode(resolve, e105)
            ];
        }
    },
    {
        regexp: /^maintained\s+node\s+versions$/i,
        select: function(e106) {
            var r62 = Date.now();
            var n4110 = Object.keys(w14).filter(function(e107) {
                return r62 < Date.parse(w14[e107].end) && r62 > Date.parse(w14[e107].start) && isEolReleased(e107);
            }).map(function(e108) {
                return "node " + e108.slice(1);
            });
            return resolve(n4110, e106);
        }
    },
    {
        regexp: /^phantomjs\s+1.9$/i,
        select: function() {
            return [
                "safari 5"
            ];
        }
    },
    {
        regexp: /^phantomjs\s+2.1$/i,
        select: function() {
            return [
                "safari 6"
            ];
        }
    },
    {
        regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
        select: function(e109, r63, n42) {
            /^tp$/i.test(n42) && (n42 = "TP");
            var s35 = checkName(r63, e109);
            var t2315 = normalizeVersion(s35, n42);
            if (t2315) n42 = t2315;
            else {
                t2315 = -1 === n42.indexOf(".") ? n42 + ".0" : n42.replace(/\.0$/, "");
                t2315 = normalizeVersion(s35, t2315);
                if (!t2315) {
                    if (e109.ignoreUnknownVersions) return [];
                    throw new y14("Unknown version " + n42 + " of " + r63);
                }
                n42 = t2315;
            }
            return [
                s35.name + " " + n42
            ];
        }
    },
    {
        regexp: /^browserslist config$/i,
        select: function(e110) {
            return browserslist(void 0, e110);
        }
    },
    {
        regexp: /^extends (.+)$/i,
        select: function(e111, r64) {
            return resolve(x13.loadQueries(e111, r64), e111);
        }
    },
    {
        regexp: /^defaults$/i,
        select: function(e112) {
            return resolve(browserslist.defaults, e112);
        }
    },
    {
        regexp: /^dead$/i,
        select: function(e1133) {
            var r65 = [
                "Baidu >= 0",
                "ie <= 10",
                "ie_mob <= 11",
                "bb <= 10",
                "op_mob <= 12.1",
                "samsung 4"
            ];
            return resolve(r65, e1133);
        }
    },
    {
        regexp: /^(\w+)$/i,
        select: function(e114, r66) {
            throw byName(r66, e114) ? new y14("Specify versions in Browserslist query for browser " + r66) : unknownQuery(r66);
        }
    }
];
(function() {
    for(var e115 in g19){
        var r67 = g19[e115];
        browserslist.data[e115] = {
            name: e115,
            versions: normalize(g19[e115].versions),
            released: normalize(g19[e115].versions.slice(0, -3)),
            releaseDate: g19[e115].release_date
        };
        fillUsage(browserslist.usage.global, e115, r67.usage_global);
        browserslist.versionAliases[e115] = {};
        for(var n43 = 0; n43 < r67.versions.length; n43++){
            var s36 = r67.versions[n43];
            if (s36 && -1 !== s36.indexOf("-")) {
                var t2413 = s36.split("-");
                for(var o164 = 0; o164 < t2413.length; o164++)browserslist.versionAliases[e115][t2413[o164]] = s36;
            }
        }
    }
    browserslist.versionAliases.op_mob[59] = "58";
    browserslist.nodeVersions = v20.map(function(e116) {
        return e116.version;
    });
})();
p24 = browserslist;
var U11 = p24;
const mod34 = {
    default: U11
};
var t33 = {};
Object.defineProperty(t33, "__esModule", {
    value: true
});
t33.findSuggestion = findSuggestion$1;
const { min: e27  } = Math;
function levenshtein(t1159, n1153) {
    let o146, i1115, r199 = [], a148 = [];
    const s1118 = t1159.length, u126 = n1153.length;
    if (!s1118) return u126;
    if (!u126) return s1118;
    for(i1115 = 0; i1115 <= u126; i1115++)r199[i1115] = i1115;
    for(o146 = 1; o146 <= s1118; o146++){
        for(a148 = [
            o146
        ], i1115 = 1; i1115 <= u126; i1115++)a148[i1115] = t1159[o146 - 1] === n1153[i1115 - 1] ? r199[i1115 - 1] : e27(r199[i1115 - 1], r199[i1115], a148[i1115 - 1]) + 1;
        r199 = a148;
    }
    return a148[u126];
}
function findSuggestion$1(t2145, n2133) {
    const o240 = n2133.map((e1)=>levenshtein(e1, t2145)
    );
    return n2133[o240.indexOf(e27(...o240))];
}
var n42 = {};
Object.defineProperty(n42, "__esModule", {
    value: true
});
n42.OptionValidator = void 0;
var o36 = t33;
class OptionValidator$1 {
    constructor(t3115){
        this.descriptor = t3115;
    }
    validateTopLevelOptions(t4112, e3136) {
        const n340 = Object.keys(e3136);
        for (const e2 of Object.keys(t4112))if (!n340.includes(e2)) throw new Error(this.formatMessage(`'${e2}' is not a valid top-level option.\n- Did you mean '${(0, o36.findSuggestion)(e2, n340)}'?`));
    }
    validateBooleanOption(t5112, e4117, n436) {
        if (void 0 === e4117) return n436;
        this.invariant("boolean" === typeof e4117, `'${t5112}' option must be a boolean.`);
        return e4117;
    }
    validateStringOption(t637, e5117, n532) {
        if (void 0 === e5117) return n532;
        this.invariant("string" === typeof e5117, `'${t637}' option must be a string.`);
        return e5117;
    }
    invariant(t733, e6116) {
        if (!t733) throw new Error(this.formatMessage(e6116));
    }
    formatMessage(t829) {
        return `${this.descriptor}: ${t829}`;
    }
}
n42.OptionValidator = OptionValidator$1;
var i31 = {};
Object.defineProperty(i31, "__esModule", {
    value: true
});
Object.defineProperty(i31, "OptionValidator", {
    enumerable: true,
    get: function() {
        return r47.OptionValidator;
    }
});
Object.defineProperty(i31, "findSuggestion", {
    enumerable: true,
    get: function() {
        return a33.findSuggestion;
    }
});
var r47 = n42;
var a33 = t33;
const s33 = i31.__esModule, u27 = i31.OptionValidator, d22 = i31.findSuggestion;
const mod35 = {
    OptionValidator: u27,
    __esModule: s33,
    default: i31,
    findSuggestion: d22
};
var e28 = {
    "es6.module": {
        chrome: "61",
        and_chr: "61",
        edge: "16",
        firefox: "60",
        and_ff: "60",
        node: "13.2.0",
        opera: "48",
        op_mob: "48",
        safari: "10.1",
        ios: "10.3",
        samsung: "8.2",
        android: "61",
        electron: "2.0",
        ios_saf: "10.3"
    }
};
const mod36 = {
    default: e28
};
var e29 = {
    "proposal-class-static-block": {
        chrome: "94",
        opera: "80",
        edge: "94",
        firefox: "93",
        node: "16.11",
        electron: "15.0"
    },
    "proposal-private-property-in-object": {
        chrome: "91",
        opera: "77",
        edge: "91",
        firefox: "90",
        safari: "15",
        node: "16.9",
        ios: "15",
        electron: "13.0"
    },
    "proposal-class-properties": {
        chrome: "74",
        opera: "62",
        edge: "79",
        firefox: "90",
        safari: "14.1",
        node: "12",
        ios: "15",
        samsung: "11",
        electron: "6.0"
    },
    "proposal-private-methods": {
        chrome: "84",
        opera: "70",
        edge: "84",
        firefox: "90",
        safari: "15",
        node: "14.6",
        ios: "15",
        samsung: "14",
        electron: "10.0"
    },
    "proposal-numeric-separator": {
        chrome: "75",
        opera: "62",
        edge: "79",
        firefox: "70",
        safari: "13",
        node: "12.5",
        ios: "13",
        samsung: "11",
        rhino: "1.7.14",
        electron: "6.0"
    },
    "proposal-logical-assignment-operators": {
        chrome: "85",
        opera: "71",
        edge: "85",
        firefox: "79",
        safari: "14",
        node: "15",
        ios: "14",
        samsung: "14",
        electron: "10.0"
    },
    "proposal-nullish-coalescing-operator": {
        chrome: "80",
        opera: "67",
        edge: "80",
        firefox: "72",
        safari: "13.1",
        node: "14",
        ios: "13.4",
        samsung: "13",
        electron: "8.0"
    },
    "proposal-optional-chaining": {
        chrome: "91",
        opera: "77",
        edge: "91",
        firefox: "74",
        safari: "13.1",
        node: "16.9",
        ios: "13.4",
        electron: "13.0"
    },
    "proposal-json-strings": {
        chrome: "66",
        opera: "53",
        edge: "79",
        firefox: "62",
        safari: "12",
        node: "10",
        ios: "12",
        samsung: "9",
        rhino: "1.7.14",
        electron: "3.0"
    },
    "proposal-optional-catch-binding": {
        chrome: "66",
        opera: "53",
        edge: "79",
        firefox: "58",
        safari: "11.1",
        node: "10",
        ios: "11.3",
        samsung: "9",
        electron: "3.0"
    },
    "transform-parameters": {
        chrome: "49",
        opera: "36",
        edge: "18",
        firefox: "53",
        node: "6",
        samsung: "5",
        electron: "0.37"
    },
    "proposal-async-generator-functions": {
        chrome: "63",
        opera: "50",
        edge: "79",
        firefox: "57",
        safari: "12",
        node: "10",
        ios: "12",
        samsung: "8",
        electron: "3.0"
    },
    "proposal-object-rest-spread": {
        chrome: "60",
        opera: "47",
        edge: "79",
        firefox: "55",
        safari: "11.1",
        node: "8.3",
        ios: "11.3",
        samsung: "8",
        electron: "2.0"
    },
    "transform-dotall-regex": {
        chrome: "62",
        opera: "49",
        edge: "79",
        firefox: "78",
        safari: "11.1",
        node: "8.10",
        ios: "11.3",
        samsung: "8",
        electron: "3.0"
    },
    "proposal-unicode-property-regex": {
        chrome: "64",
        opera: "51",
        edge: "79",
        firefox: "78",
        safari: "11.1",
        node: "10",
        ios: "11.3",
        samsung: "9",
        electron: "3.0"
    },
    "transform-named-capturing-groups-regex": {
        chrome: "64",
        opera: "51",
        edge: "79",
        firefox: "78",
        safari: "11.1",
        node: "10",
        ios: "11.3",
        samsung: "9",
        electron: "3.0"
    },
    "transform-async-to-generator": {
        chrome: "55",
        opera: "42",
        edge: "15",
        firefox: "52",
        safari: "11",
        node: "7.6",
        ios: "11",
        samsung: "6",
        electron: "1.6"
    },
    "transform-exponentiation-operator": {
        chrome: "52",
        opera: "39",
        edge: "14",
        firefox: "52",
        safari: "10.1",
        node: "7",
        ios: "10.3",
        samsung: "6",
        rhino: "1.7.14",
        electron: "1.3"
    },
    "transform-template-literals": {
        chrome: "41",
        opera: "28",
        edge: "13",
        firefox: "34",
        safari: "13",
        node: "4",
        ios: "13",
        samsung: "3.4",
        electron: "0.21"
    },
    "transform-literals": {
        chrome: "44",
        opera: "31",
        edge: "12",
        firefox: "53",
        safari: "9",
        node: "4",
        ios: "9",
        samsung: "4",
        electron: "0.30"
    },
    "transform-function-name": {
        chrome: "51",
        opera: "38",
        edge: "79",
        firefox: "53",
        safari: "10",
        node: "6.5",
        ios: "10",
        samsung: "5",
        electron: "1.2"
    },
    "transform-arrow-functions": {
        chrome: "47",
        opera: "34",
        edge: "13",
        firefox: "43",
        safari: "10",
        node: "6",
        ios: "10",
        samsung: "5",
        rhino: "1.7.13",
        electron: "0.36"
    },
    "transform-block-scoped-functions": {
        chrome: "41",
        opera: "28",
        edge: "12",
        firefox: "46",
        safari: "10",
        node: "4",
        ie: "11",
        ios: "10",
        samsung: "3.4",
        electron: "0.21"
    },
    "transform-classes": {
        chrome: "46",
        opera: "33",
        edge: "13",
        firefox: "45",
        safari: "10",
        node: "5",
        ios: "10",
        samsung: "5",
        electron: "0.36"
    },
    "transform-object-super": {
        chrome: "46",
        opera: "33",
        edge: "13",
        firefox: "45",
        safari: "10",
        node: "5",
        ios: "10",
        samsung: "5",
        electron: "0.36"
    },
    "transform-shorthand-properties": {
        chrome: "43",
        opera: "30",
        edge: "12",
        firefox: "33",
        safari: "9",
        node: "4",
        ios: "9",
        samsung: "4",
        rhino: "1.7.14",
        electron: "0.27"
    },
    "transform-duplicate-keys": {
        chrome: "42",
        opera: "29",
        edge: "12",
        firefox: "34",
        safari: "9",
        node: "4",
        ios: "9",
        samsung: "3.4",
        electron: "0.25"
    },
    "transform-computed-properties": {
        chrome: "44",
        opera: "31",
        edge: "12",
        firefox: "34",
        safari: "7.1",
        node: "4",
        ios: "8",
        samsung: "4",
        electron: "0.30"
    },
    "transform-for-of": {
        chrome: "51",
        opera: "38",
        edge: "15",
        firefox: "53",
        safari: "10",
        node: "6.5",
        ios: "10",
        samsung: "5",
        electron: "1.2"
    },
    "transform-sticky-regex": {
        chrome: "49",
        opera: "36",
        edge: "13",
        firefox: "3",
        safari: "10",
        node: "6",
        ios: "10",
        samsung: "5",
        electron: "0.37"
    },
    "transform-unicode-escapes": {
        chrome: "44",
        opera: "31",
        edge: "12",
        firefox: "53",
        safari: "9",
        node: "4",
        ios: "9",
        samsung: "4",
        electron: "0.30"
    },
    "transform-unicode-regex": {
        chrome: "50",
        opera: "37",
        edge: "13",
        firefox: "46",
        safari: "12",
        node: "6",
        ios: "12",
        samsung: "5",
        electron: "1.1"
    },
    "transform-spread": {
        chrome: "46",
        opera: "33",
        edge: "13",
        firefox: "45",
        safari: "10",
        node: "5",
        ios: "10",
        samsung: "5",
        electron: "0.36"
    },
    "transform-destructuring": {
        chrome: "51",
        opera: "38",
        edge: "15",
        firefox: "53",
        safari: "10",
        node: "6.5",
        ios: "10",
        samsung: "5",
        electron: "1.2"
    },
    "transform-block-scoping": {
        chrome: "49",
        opera: "36",
        edge: "14",
        firefox: "51",
        safari: "11",
        node: "6",
        ios: "11",
        samsung: "5",
        electron: "0.37"
    },
    "transform-typeof-symbol": {
        chrome: "38",
        opera: "25",
        edge: "12",
        firefox: "36",
        safari: "9",
        node: "0.12",
        ios: "9",
        samsung: "3",
        rhino: "1.7.13",
        electron: "0.20"
    },
    "transform-new-target": {
        chrome: "46",
        opera: "33",
        edge: "14",
        firefox: "41",
        safari: "10",
        node: "5",
        ios: "10",
        samsung: "5",
        electron: "0.36"
    },
    "transform-regenerator": {
        chrome: "50",
        opera: "37",
        edge: "13",
        firefox: "53",
        safari: "10",
        node: "6",
        ios: "10",
        samsung: "5",
        electron: "1.1"
    },
    "transform-member-expression-literals": {
        chrome: "7",
        opera: "12",
        edge: "12",
        firefox: "2",
        safari: "5.1",
        node: "0.10",
        ie: "9",
        android: "4",
        ios: "6",
        phantom: "2",
        samsung: "1",
        rhino: "1.7.13",
        electron: "0.20"
    },
    "transform-property-literals": {
        chrome: "7",
        opera: "12",
        edge: "12",
        firefox: "2",
        safari: "5.1",
        node: "0.10",
        ie: "9",
        android: "4",
        ios: "6",
        phantom: "2",
        samsung: "1",
        rhino: "1.7.13",
        electron: "0.20"
    },
    "transform-reserved-words": {
        chrome: "13",
        opera: "10.50",
        edge: "12",
        firefox: "2",
        safari: "3.1",
        node: "0.10",
        ie: "9",
        android: "4.4",
        ios: "6",
        phantom: "2",
        samsung: "1",
        rhino: "1.7.13",
        electron: "0.20"
    },
    "proposal-export-namespace-from": {
        chrome: "72",
        and_chr: "72",
        edge: "79",
        firefox: "80",
        and_ff: "80",
        node: "13.2",
        opera: "60",
        op_mob: "51",
        samsung: "11.0",
        android: "72",
        electron: "5.0"
    }
};
const mod37 = {
    default: e29
};
var a34 = {};
Object.defineProperty(a34, "__esModule", {
    value: true
});
a34.unreleasedLabels = a34.browserNameMap = void 0;
const i32 = {
    safari: "tp"
};
a34.unreleasedLabels = i32;
const u28 = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    op_mob: "opera",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
};
a34.browserNameMap = u28;
var l30 = "default" in mod ? mod.default : mod;
var f26 = "default" in mod35 ? mod35.default : mod35;
var d23 = {};
Object.defineProperty(d23, "__esModule", {
    value: true
});
d23.getHighestUnreleased = getHighestUnreleased;
d23.getLowestImplementedVersion = getLowestImplementedVersion;
d23.getLowestUnreleased = getLowestUnreleased;
d23.isUnreleasedVersion = isUnreleasedVersion;
d23.semverMin = semverMin;
d23.semverify = semverify;
var c31 = l30;
var g20 = f26;
var m22 = a34;
const v21 = /^(\d+|\d+.\d+)$/;
const p25 = new g20.OptionValidator("@babel/helper-compilation-targets");
function semverMin(e1, r1100) {
    return e1 && c31.lt(e1, r1100) ? e1 : r1100;
}
function semverify(e2) {
    if ("string" === typeof e2 && c31.valid(e2)) return e2;
    p25.invariant("number" === typeof e2 || "string" === typeof e2 && v21.test(e2), `'${e2}' is not a valid version`);
    const r249 = e2.toString().split(".");
    while(r249.length < 3)r249.push("0");
    return r249.join(".");
}
function isUnreleasedVersion(e3137, r342) {
    const t1160 = m22.unreleasedLabels[r342];
    return !!t1160 && t1160 === e3137.toString().toLowerCase();
}
function getLowestUnreleased(e4118, r436, t2146) {
    const n1154 = m22.unreleasedLabels[t2146];
    const s1119 = [
        e4118,
        r436
    ].some((e5118)=>e5118 === n1154
    );
    return s1119 ? e4118 === s1119 ? r436 : e4118 || r436 : semverMin(e4118, r436);
}
function getHighestUnreleased(e6117, r531, t3116) {
    return getLowestUnreleased(e6117, r531, t3116) === e6117 ? r531 : e6117;
}
function getLowestImplementedVersion(e7109, r630) {
    const t4113 = e7109[r630];
    return t4113 || "android" !== r630 ? t4113 : e7109.chrome;
}
var y15 = {};
Object.defineProperty(y15, "__esModule", {
    value: true
});
y15.TargetNames = void 0;
const b19 = {
    node: "node",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino"
};
y15.TargetNames = b19;
var h19 = "default" in mod ? mod.default : mod;
var w15 = {};
Object.defineProperty(w15, "__esModule", {
    value: true
});
w15.prettifyTargets = prettifyTargets$1;
w15.prettifyVersion = prettifyVersion;
var V12 = h19;
var j11 = a34;
function prettifyVersion(e8113) {
    if ("string" !== typeof e8113) return e8113;
    const r726 = [
        V12.major(e8113)
    ];
    const t5113 = V12.minor(e8113);
    const n2134 = V12.patch(e8113);
    (t5113 || n2134) && r726.push(t5113);
    n2134 && r726.push(n2134);
    return r726.join(".");
}
function prettifyTargets$1(e9113) {
    return Object.keys(e9113).reduce((r825, t638)=>{
        let n343 = e9113[t638];
        const s2108 = j11.unreleasedLabels[t638];
        "string" === typeof n343 && s2108 !== n343 && (n343 = prettifyVersion(n343));
        r825[t638] = n343;
        return r825;
    }, {});
}
var O14 = "default" in mod ? mod.default : mod;
var T12 = {};
Object.defineProperty(T12, "__esModule", {
    value: true
});
T12.getInclusionReasons = getInclusionReasons$1;
var _15 = O14;
var L10 = w15;
var $12 = d23;
function getInclusionReasons$1(e1026, r921, t734) {
    const n437 = t734[e1026] || {};
    return Object.keys(r921).reduce((e1125, t830)=>{
        const s390 = (0, $12.getLowestImplementedVersion)(n437, t830);
        const o147 = r921[t830];
        if (s390) {
            const r1020 = (0, $12.isUnreleasedVersion)(s390, t830);
            const n533 = (0, $12.isUnreleasedVersion)(o147, t830);
            n533 || !r1020 && !_15.lt(o147.toString(), (0, $12.semverify)(s390)) || (e1125[t830] = (0, L10.prettifyVersion)(o147));
        } else e1125[t830] = (0, L10.prettifyVersion)(o147);
        return e1125;
    }, {});
}
var U12 = "default" in mod ? mod.default : mod;
var M10 = "default" in mod37 ? mod37.default : mod37;
var I13 = {};
Object.defineProperty(I13, "__esModule", {
    value: true
});
I13.default = filterItems$1;
I13.isRequired = isRequired$1;
I13.targetsSupported = targetsSupported;
var P13 = U12;
var R10 = M10;
var N12 = d23;
function targetsSupported(e1225, r1122) {
    const t927 = Object.keys(e1225);
    if (0 === t927.length) return false;
    const n631 = t927.filter((t1026)=>{
        const n729 = (0, N12.getLowestImplementedVersion)(r1122, t1026);
        if (!n729) return true;
        const s422 = e1225[t1026];
        if ((0, N12.isUnreleasedVersion)(s422, t1026)) return false;
        if ((0, N12.isUnreleasedVersion)(n729, t1026)) return true;
        if (!P13.valid(s422.toString())) throw new Error(`Invalid version passed for target "${t1026}": "${s422}". Versions must be in semver format (major.minor.patch)`);
        return P13.gt((0, N12.semverify)(n729), s422.toString());
    });
    return 0 === n631.length;
}
function isRequired$1(e1324, r1218, { compatData: t1161 = R10 , includes: n826 , excludes: s516  } = {}) {
    return (null == s516 || !s516.has(e1324)) && (!(null == n826 || !n826.has(e1324)) || !targetsSupported(r1218, t1161[e1324]));
}
function filterItems$1(e1423, r1415, t1224, n925, s613, o242, a149) {
    const i1116 = new Set;
    const u127 = {
        compatData: e1423,
        includes: r1415,
        excludes: t1224
    };
    for(const r1315 in e1423)if (isRequired$1(r1315, n925, u127)) i1116.add(r1315);
    else if (a149) {
        const e1522 = a149.get(r1315);
        e1522 && i1116.add(e1522);
    }
    s613 && s613.forEach((e1622)=>!t1224.has(e1622) && i1116.add(e1622)
    );
    o242 && o242.forEach((e1721)=>!r1415.has(e1721) && i1116.delete(e1721)
    );
    return i1116;
}
var S14 = "default" in mod34 ? mod34.default : mod34;
var k11 = "default" in mod35 ? mod35.default : mod35;
var x14 = "default" in mod36 ? mod36.default : mod36;
var B12 = {};
var q9 = se;
Object.defineProperty(B12, "__esModule", {
    value: true
});
Object.defineProperty(B12, "TargetNames", {
    enumerable: true,
    get: function() {
        return W10.TargetNames;
    }
});
B12.default = getTargets;
Object.defineProperty(B12, "filterItems", {
    enumerable: true,
    get: function() {
        return z10.default;
    }
});
Object.defineProperty(B12, "getInclusionReasons", {
    enumerable: true,
    get: function() {
        return F12.getInclusionReasons;
    }
});
B12.isBrowsersQueryValid = isBrowsersQueryValid;
Object.defineProperty(B12, "isRequired", {
    enumerable: true,
    get: function() {
        return z10.isRequired;
    }
});
Object.defineProperty(B12, "prettifyTargets", {
    enumerable: true,
    get: function() {
        return A12.prettifyTargets;
    }
});
Object.defineProperty(B12, "unreleasedLabels", {
    enumerable: true,
    get: function() {
        return H11.unreleasedLabels;
    }
});
var E14 = S14;
var D11 = k11;
var Q9 = x14;
var C16 = d23;
var H11 = a34;
var W10 = y15;
var A12 = w15;
var F12 = T12;
var z10 = I13;
const G9 = Q9["es6.module"];
const J9 = new D11.OptionValidator("@babel/helper-compilation-targets");
function validateTargetNames(e1818) {
    const r1513 = Object.keys(W10.TargetNames);
    for (const t1324 of Object.keys(e1818))if (!(t1324 in W10.TargetNames)) throw new Error(J9.formatMessage(`'${t1324}' is not a valid target\n- Did you mean '${(0, D11.findSuggestion)(t1324, r1513)}'?`));
    return e1818;
}
function isBrowsersQueryValid(e1917) {
    return "string" === typeof e1917 || Array.isArray(e1917) && e1917.every((e2016)=>"string" === typeof e2016
    );
}
function validateBrowsers(e2113) {
    J9.invariant(void 0 === e2113 || isBrowsersQueryValid(e2113), `'${String(e2113)}' is not a valid browserslist query`);
    return e2113;
}
function getLowestVersions(e2212) {
    return e2212.reduce((e2311, r1612)=>{
        const [t1422, n1024] = r1612.split(" ");
        const s713 = H11.browserNameMap[t1422];
        if (!s713) return e2311;
        try {
            const r1712 = n1024.split("-")[0].toLowerCase();
            const o333 = (0, C16.isUnreleasedVersion)(r1712, t1422);
            if (!e2311[s713]) {
                e2311[s713] = o333 ? r1712 : (0, C16.semverify)(r1712);
                return e2311;
            }
            const a229 = e2311[s713];
            const i256 = (0, C16.isUnreleasedVersion)(a229, t1422);
            if (i256 && o333) e2311[s713] = (0, C16.getLowestUnreleased)(a229, r1712, t1422);
            else if (i256) e2311[s713] = (0, C16.semverify)(r1712);
            else if (!i256 && !o333) {
                const t1521 = (0, C16.semverify)(r1712);
                e2311[s713] = (0, C16.semverMin)(a229, t1521);
            }
        } catch (e) {}
        return e2311;
    }, {});
}
function outputDecimalWarning(e2411) {
    if (e2411.length) {
        console.warn("Warning, the following targets are using a decimal version:\n");
        e2411.forEach(({ target: e2511 , value: r1811  })=>console.warn(`  ${e2511}: ${r1811}`)
        );
        console.warn("\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\ngetting parsed as 6.1, which can lead to unexpected behavior.\n");
    }
}
function semverifyTarget(e2611, r1910) {
    try {
        return (0, C16.semverify)(r1910);
    } catch (t) {
        throw new Error(J9.formatMessage(`'${r1910}' is not a valid value for 'targets.${e2611}'.`));
    }
}
const K9 = {
    __default (e2710, r206) {
        const t1621 = (0, C16.isUnreleasedVersion)(r206, e2710) ? r206.toLowerCase() : semverifyTarget(e2710, r206);
        return [
            e2710,
            t1621
        ];
    },
    node (e2810, r2115) {
        const t1718 = true === r2115 || "current" === r2115 ? q9.versions.node : semverifyTarget(e2810, r2115);
        return [
            e2810,
            t1718
        ];
    }
};
function generateTargets(e2910) {
    const r2214 = Object.assign({}, e2910);
    delete r2214.esmodules;
    delete r2214.browsers;
    return r2214;
}
function resolveTargets(e30, r2311) {
    const t1817 = E14(e30, {
        mobileToDesktop: true,
        env: r2311
    });
    return getLowestVersions(t1817);
}
function getTargets(e32 = {}, r2410 = {}) {
    var t1917, n1155;
    let { browsers: s813 , esmodules: o424  } = e32;
    const { configPath: a328 = "."  } = r2410;
    validateBrowsers(s813);
    const i324 = generateTargets(e32);
    let u222 = validateTargetNames(i324);
    const l134 = !!s813;
    const f121 = l134 || Object.keys(u222).length > 0;
    const d122 = !r2410.ignoreBrowserslistConfig && !f121;
    if (!s813 && d122) {
        s813 = E14.loadConfig({
            config: r2410.configFile,
            path: a328,
            env: r2410.browserslistEnv
        });
        null == s813 && (s813 = []);
    }
    if (o424 && ("intersect" !== o424 || !(null != (t1917 = s813) && t1917.length))) {
        s813 = Object.keys(G9).map((e33)=>`${e33} >= ${G9[e33]}`
        ).join(", ");
        o424 = false;
    }
    if (null != (n1155 = s813) && n1155.length) {
        const e34 = resolveTargets(s813, r2410.browserslistEnv);
        if ("intersect" === o424) for (const r254 of Object.keys(e34)){
            const t2016 = e34[r254];
            G9[r254] ? e34[r254] = (0, C16.getHighestUnreleased)(t2016, (0, C16.semverify)(G9[r254]), r254) : delete e34[r254];
        }
        u222 = Object.assign(e34, u222);
    }
    const c137 = {};
    const g115 = [];
    for (const e31 of Object.keys(u222).sort()){
        var m119;
        const r264 = u222[e31];
        "number" === typeof r264 && r264 % 1 !== 0 && g115.push({
            target: e31,
            value: r264
        });
        const t2147 = null != (m119 = K9[e31]) ? m119 : K9.__default;
        const [n1220, s913] = t2147(e31, r264);
        s913 && (c137[n1220] = s913);
    }
    outputDecimalWarning(g115);
    return c137;
}
const X9 = B12.__esModule, Y9 = B12.TargetNames, Z9 = B12.filterItems, ee9 = B12.getInclusionReasons, re10 = B12.isRequired, te9 = B12.prettifyTargets, ne10 = B12.unreleasedLabels;
const se9 = B12.isBrowsersQueryValid;
const mod38 = {
    TargetNames: Y9,
    __esModule: X9,
    default: B12,
    filterItems: Z9,
    getInclusionReasons: ee9,
    isBrowsersQueryValid: se9,
    isRequired: re10,
    prettifyTargets: te9,
    unreleasedLabels: ne10
};
var r48 = "default" in mod38 ? mod38.default : mod38;
var s34 = {}, t34 = false;
function dew18() {
    if (t34) return s34;
    t34 = true;
    Object.defineProperty(s34, "__esModule", {
        value: true
    });
    s34.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
    s34.resolveTargets = resolveTargets1;
    function _helperCompilationTargets() {
        const e1 = r48;
        _helperCompilationTargets = function() {
            return e1;
        };
        return e1;
    }
    function resolveBrowserslistConfigFile(e, r) {}
    function resolveTargets1(e2, r) {
        let s1120 = e2.targets;
        ("string" === typeof s1120 || Array.isArray(s1120)) && (s1120 = {
            browsers: s1120
        });
        s1120 && s1120.esmodules && (s1120 = Object.assign({}, s1120, {
            esmodules: "intersect"
        }));
        return (0, _helperCompilationTargets().default)(s1120, {
            ignoreBrowserslistConfig: true,
            browserslistEnv: e2.browserslistEnv
        });
    }
    return s34;
}
var e30, t35, n43 = "object" == typeof Reflect ? Reflect : null, r49 = n43 && "function" == typeof n43.apply ? n43.apply : function(e1, t1162, n1156) {
    return Function.prototype.apply.call(e1, t1162, n1156);
};
t35 = n43 && "function" == typeof n43.ownKeys ? n43.ownKeys : Object.getOwnPropertySymbols ? function(e2) {
    return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
} : function(e3138) {
    return Object.getOwnPropertyNames(e3138);
};
var i33 = Number.isNaN || function(e4119) {
    return e4119 != e4119;
};
function o37() {
    o37.init.call(this);
}
e30 = o37, o37.EventEmitter = o37, o37.prototype._events = void 0, o37.prototype._eventsCount = 0, o37.prototype._maxListeners = void 0;
var s35 = 10;
function u29(e5119) {
    if ("function" != typeof e5119) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e5119);
}
function f27(e6118) {
    return void 0 === e6118._maxListeners ? o37.defaultMaxListeners : e6118._maxListeners;
}
function v22(e7110, t2148, n2135, r1101) {
    var i1117, s1121, y116, d55;
    if (u29(n2135), void 0 === (s1121 = e7110._events) ? (s1121 = e7110._events = Object.create(null), e7110._eventsCount = 0) : (void 0 !== s1121.newListener && (e7110.emit("newListener", t2148, n2135.listener ? n2135.listener : n2135), s1121 = e7110._events), y116 = s1121[t2148]), void 0 === y116) y116 = s1121[t2148] = n2135, ++e7110._eventsCount;
    else if ("function" == typeof y116 ? y116 = s1121[t2148] = r1101 ? [
        n2135,
        y116
    ] : [
        y116,
        n2135
    ] : r1101 ? y116.unshift(n2135) : y116.push(n2135), (i1117 = f27(e7110)) > 0 && y116.length > i1117 && !y116.warned) {
        y116.warned = !0;
        var m44 = new Error("Possible EventEmitter memory leak detected. " + y116.length + " " + String(t2148) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        m44.name = "MaxListenersExceededWarning", m44.emitter = e7110, m44.type = t2148, m44.count = y116.length, d55 = m44, console && console.warn && console.warn(d55);
    }
    return e7110;
}
function a35() {
    if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function l31(e8114, t3117, n344) {
    var r250 = {
        fired: !1,
        wrapFn: void 0,
        target: e8114,
        type: t3117,
        listener: n344
    }, i257 = a35.bind(r250);
    return i257.listener = n344, r250.wrapFn = i257, i257;
}
function h20(e9114, t4114, n438) {
    var r343 = e9114._events;
    if (void 0 === r343) return [];
    var i325 = r343[t4114];
    return void 0 === i325 ? [] : "function" == typeof i325 ? n438 ? [
        i325.listener || i325
    ] : [
        i325
    ] : n438 ? function(e1027) {
        for(var t5114 = new Array(e1027.length), n534 = 0; n534 < t5114.length; ++n534)t5114[n534] = e1027[n534].listener || e1027[n534];
        return t5114;
    }(i325) : c32(i325, i325.length);
}
function p26(e1126) {
    var t639 = this._events;
    if (void 0 !== t639) {
        var n632 = t639[e1126];
        if ("function" == typeof n632) return 1;
        if (void 0 !== n632) return n632.length;
    }
    return 0;
}
function c32(e1226, t735) {
    for(var n730 = new Array(t735), r437 = 0; r437 < t735; ++r437)n730[r437] = e1226[r437];
    return n730;
}
Object.defineProperty(o37, "defaultMaxListeners", {
    enumerable: !0,
    get: function() {
        return s35;
    },
    set: function(e1325) {
        if ("number" != typeof e1325 || e1325 < 0 || i33(e1325)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e1325 + ".");
        s35 = e1325;
    }
}), o37.init = function() {
    void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
}, o37.prototype.setMaxListeners = function(e1424) {
    if ("number" != typeof e1424 || e1424 < 0 || i33(e1424)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e1424 + ".");
    return this._maxListeners = e1424, this;
}, o37.prototype.getMaxListeners = function() {
    return f27(this);
}, o37.prototype.emit = function(e1523) {
    for(var t831 = [], n827 = 1; n827 < arguments.length; n827++)t831.push(arguments[n827]);
    var i420 = "error" === e1523, s2109 = this._events;
    if (void 0 !== s2109) i420 = i420 && void 0 === s2109.error;
    else if (!i420) return !1;
    if (i420) {
        var y212;
        if (t831.length > 0 && (y212 = t831[0]), y212 instanceof Error) throw y212;
        var d56 = new Error("Unhandled error." + (y212 ? " (" + y212.message + ")" : ""));
        throw d56.context = y212, d56;
    }
    var m45 = s2109[e1523];
    if (void 0 === m45) return !1;
    if ("function" == typeof m45) r49(m45, this, t831);
    else {
        var g43 = m45.length, L23 = c32(m45, g43);
        for(n827 = 0; n827 < g43; ++n827)r49(L23[n827], this, t831);
    }
    return !0;
}, o37.prototype.addListener = function(e1623, t928) {
    return v22(this, e1623, t928, !1);
}, o37.prototype.on = o37.prototype.addListener, o37.prototype.prependListener = function(e1722, t1027) {
    return v22(this, e1722, t1027, !0);
}, o37.prototype.once = function(e1819, t1163) {
    return u29(t1163), this.on(e1819, l31(this, e1819, t1163)), this;
}, o37.prototype.prependOnceListener = function(e1918, t1225) {
    return u29(t1225), this.prependListener(e1918, l31(this, e1918, t1225)), this;
}, o37.prototype.removeListener = function(e2017, t1325) {
    var n926, r532, i516, s391, y36;
    if (u29(t1325), void 0 === (r532 = this._events)) return this;
    if (void 0 === (n926 = r532[e2017])) return this;
    if (n926 === t1325 || n926.listener === t1325) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r532[e2017], r532.removeListener && this.emit("removeListener", e2017, n926.listener || t1325));
    else if ("function" != typeof n926) {
        for(i516 = -1, s391 = n926.length - 1; s391 >= 0; s391--)if (n926[s391] === t1325 || n926[s391].listener === t1325) {
            y36 = n926[s391].listener, i516 = s391;
            break;
        }
        if (i516 < 0) return this;
        0 === i516 ? n926.shift() : !function(e2114, t1423) {
            for(; t1423 + 1 < e2114.length; t1423++)e2114[t1423] = e2114[t1423 + 1];
            e2114.pop();
        }(n926, i516), 1 === n926.length && (r532[e2017] = n926[0]), void 0 !== r532.removeListener && this.emit("removeListener", e2017, y36 || t1325);
    }
    return this;
}, o37.prototype.off = o37.prototype.removeListener, o37.prototype.removeAllListeners = function(e2213) {
    var t1522, n1025, r631;
    if (void 0 === (n1025 = this._events)) return this;
    if (void 0 === n1025.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n1025[e2213] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n1025[e2213]), this;
    if (0 === arguments.length) {
        var i613, s423 = Object.keys(n1025);
        for(r631 = 0; r631 < s423.length; ++r631)"removeListener" !== (i613 = s423[r631]) && this.removeAllListeners(i613);
        return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
    }
    if ("function" == typeof (t1522 = n1025[e2213])) this.removeListener(e2213, t1522);
    else if (void 0 !== t1522) for(r631 = t1522.length - 1; r631 >= 0; r631--)this.removeListener(e2213, t1522[r631]);
    return this;
}, o37.prototype.listeners = function(e2312) {
    return h20(this, e2312, !0);
}, o37.prototype.rawListeners = function(e2412) {
    return h20(this, e2412, !1);
}, o37.listenerCount = function(e2512, t1622) {
    return "function" == typeof e2512.listenerCount ? e2512.listenerCount(t1622) : p26.call(e2512, t1622);
}, o37.prototype.listenerCount = p26, o37.prototype.eventNames = function() {
    return this._eventsCount > 0 ? t35(this._events) : [];
};
var y16 = e30;
y16.EventEmitter;
y16.defaultMaxListeners;
y16.init;
y16.listenerCount;
y16.EventEmitter;
y16.defaultMaxListeners;
y16.init;
y16.listenerCount;
xe4._extend;
xe4.callbackify;
xe4.debuglog;
xe4.deprecate;
xe4.format;
xe4.inherits;
xe4.inspect;
xe4.isArray;
xe4.isBoolean;
xe4.isBuffer;
xe4.isDate;
xe4.isError;
xe4.isFunction;
xe4.isNull;
xe4.isNullOrUndefined;
xe4.isNumber;
xe4.isObject;
xe4.isPrimitive;
xe4.isRegExp;
xe4.isString;
xe4.isSymbol;
xe4.isUndefined;
xe4.log;
xe4.promisify;
xe4._extend;
xe4.callbackify;
xe4.debuglog;
xe4.deprecate;
xe4.format;
xe4.inherits;
xe4.inspect;
xe4.isArray;
xe4.isBoolean;
xe4.isBuffer;
xe4.isDate;
xe4.isError;
xe4.isFunction;
xe4.isNull;
xe4.isNullOrUndefined;
xe4.isNumber;
xe4.isObject;
xe4.isPrimitive;
xe4.isRegExp;
xe4.isString;
xe4.isSymbol;
xe4.isUndefined;
xe4.log;
xe4.promisify;
xe4.types;
self.TextEncoder;
self.TextDecoder;
for(var e31 = {
    byteLength: function(e1) {
        var n1157 = u$2(e1), i1118 = n1157[0], o148 = n1157[1];
        return 3 * (i1118 + o148) / 4 - o148;
    },
    toByteArray: function(e2) {
        var n2136, u128, s1122 = u$2(e2), $112 = s1122[0], j112 = s1122[1], Y18 = new o38(function(e, n345, i258) {
            return 3 * (n345 + i258) / 4 - i258;
        }(0, $112, j112)), q19 = 0, X110 = j112 > 0 ? $112 - 4 : $112;
        for(u128 = 0; u128 < X110; u128 += 4)n2136 = i34[e2.charCodeAt(u128)] << 18 | i34[e2.charCodeAt(u128 + 1)] << 12 | i34[e2.charCodeAt(u128 + 2)] << 6 | i34[e2.charCodeAt(u128 + 3)], Y18[q19++] = n2136 >> 16 & 255, Y18[q19++] = n2136 >> 8 & 255, Y18[q19++] = 255 & n2136;
        2 === j112 && (n2136 = i34[e2.charCodeAt(u128)] << 2 | i34[e2.charCodeAt(u128 + 1)] >> 4, Y18[q19++] = 255 & n2136);
        1 === j112 && (n2136 = i34[e2.charCodeAt(u128)] << 10 | i34[e2.charCodeAt(u128 + 1)] << 4 | i34[e2.charCodeAt(u128 + 2)] >> 2, Y18[q19++] = n2136 >> 8 & 255, Y18[q19++] = 255 & n2136);
        return Y18;
    },
    fromByteArray: function(e3139) {
        for(var i326, o243 = e3139.length, u223 = o243 % 3, s2111 = [], $210 = 0, j24 = o243 - u223; $210 < j24; $210 += 16383)s2111.push(c$11(e3139, $210, $210 + 16383 > j24 ? j24 : $210 + 16383));
        1 === u223 ? (i326 = e3139[o243 - 1], s2111.push(n44[i326 >> 2] + n44[i326 << 4 & 63] + "==")) : 2 === u223 && (i326 = (e3139[o243 - 2] << 8) + e3139[o243 - 1], s2111.push(n44[i326 >> 10] + n44[i326 >> 4 & 63] + n44[i326 << 2 & 63] + "="));
        return s2111.join("");
    }
}, n44 = [], i34 = [], o38 = "undefined" != typeof Uint8Array ? Uint8Array : Array, u30 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s36 = 0, $13 = u30.length; s36 < $13; ++s36)n44[s36] = u30[s36], i34[u30.charCodeAt(s36)] = s36;
function u$2(e4120) {
    var n439 = e4120.length;
    if (n439 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    var i421 = e4120.indexOf("=");
    return -1 === i421 && (i421 = n439), [
        i421,
        i421 === n439 ? 0 : 4 - i421 % 4
    ];
}
function c$11(e5120, i517, o334) {
    for(var u316, s392, $32 = [], j31 = i517; j31 < o334; j31 += 3)u316 = (e5120[j31] << 16 & 16711680) + (e5120[j31 + 1] << 8 & 65280) + (255 & e5120[j31 + 2]), $32.push(n44[(s392 = u316) >> 18 & 63] + n44[s392 >> 12 & 63] + n44[s392 >> 6 & 63] + n44[63 & s392]);
    return $32.join("");
}
i34["-".charCodeAt(0)] = 62, i34["_".charCodeAt(0)] = 63;
var j12 = {
    read: function(e6119, n535, i614, o425, u416) {
        var s424, $41, j41 = 8 * u416 - o425 - 1, Y22 = (1 << j41) - 1, q22 = Y22 >> 1, X27 = -7, V112 = i614 ? u416 - 1 : 0, W19 = i614 ? -1 : 1, J16 = e6119[n535 + V112];
        for(V112 += W19, s424 = J16 & (1 << -X27) - 1, J16 >>= -X27, X27 += j41; X27 > 0; s424 = 256 * s424 + e6119[n535 + V112], V112 += W19, X27 -= 8);
        for($41 = s424 & (1 << -X27) - 1, s424 >>= -X27, X27 += o425; X27 > 0; $41 = 256 * $41 + e6119[n535 + V112], V112 += W19, X27 -= 8);
        if (0 === s424) s424 = 1 - q22;
        else {
            if (s424 === Y22) return $41 ? NaN : 1 / 0 * (J16 ? -1 : 1);
            $41 += Math.pow(2, o425), s424 -= q22;
        }
        return (J16 ? -1 : 1) * $41 * Math.pow(2, s424 - o425);
    },
    write: function(e7111, n633, i713, o523, u515, s517) {
        var $51, j51, Y31, q31 = 8 * s517 - u515 - 1, X32 = (1 << q31) - 1, V22 = X32 >> 1, W22 = 23 === u515 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, J22 = o523 ? 0 : s517 - 1, Z110 = o523 ? 1 : -1, G17 = n633 < 0 || 0 === n633 && 1 / n633 < 0 ? 1 : 0;
        for(n633 = Math.abs(n633), isNaN(n633) || n633 === 1 / 0 ? (j51 = isNaN(n633) ? 1 : 0, $51 = X32) : ($51 = Math.floor(Math.log(n633) / Math.LN2), n633 * (Y31 = Math.pow(2, -$51)) < 1 && ($51--, Y31 *= 2), (n633 += $51 + V22 >= 1 ? W22 / Y31 : W22 * Math.pow(2, 1 - V22)) * Y31 >= 2 && ($51++, Y31 /= 2), $51 + V22 >= X32 ? (j51 = 0, $51 = X32) : $51 + V22 >= 1 ? (j51 = (n633 * Y31 - 1) * Math.pow(2, u515), $51 += V22) : (j51 = n633 * Math.pow(2, V22 - 1) * Math.pow(2, u515), $51 = 0)); u515 >= 8; e7111[i713 + J22] = 255 & j51, J22 += Z110, j51 /= 256, u515 -= 8);
        for($51 = $51 << u515 | j51, q31 += u515; q31 > 0; e7111[i713 + J22] = 255 & $51, J22 += Z110, $51 /= 256, q31 -= 8);
        e7111[i713 + J22 - Z110] |= 128 * G17;
    }
};
var Y10 = {}, q10 = e31, X10 = j12, V13 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
Y10.Buffer = u$1$1, Y10.SlowBuffer = function(e8115) {
    +e8115 != e8115 && (e8115 = 0);
    return u$1$1.alloc(+e8115);
}, Y10.INSPECT_MAX_BYTES = 50;
function f$2(e9115) {
    if (e9115 > 2147483647) throw new RangeError('The value "' + e9115 + '" is invalid for option "size"');
    var n731 = new Uint8Array(e9115);
    return Object.setPrototypeOf(n731, u$1$1.prototype), n731;
}
function u$1$1(e1028, n828, i813) {
    if ("number" == typeof e1028) {
        if ("string" == typeof n828) throw new TypeError('The "string" argument must be of type string. Received type number');
        return a$2(e1028);
    }
    return s$1(e1028, n828, i813);
}
function s$1(e1127, n927, i913) {
    if ("string" == typeof e1127) return function(e1227, n1026) {
        "string" == typeof n1026 && "" !== n1026 || (n1026 = "utf8");
        if (!u$1$1.isEncoding(n1026)) throw new TypeError("Unknown encoding: " + n1026);
        var i1012 = 0 | y17(e1227, n1026), o715 = f$2(i1012), u710 = o715.write(e1227, n1026);
        u710 !== i1012 && (o715 = o715.slice(0, u710));
        return o715;
    }(e1127, n927);
    if (ArrayBuffer.isView(e1127)) return p27(e1127);
    if (null == e1127) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e1127);
    if (F13(e1127, ArrayBuffer) || e1127 && F13(e1127.buffer, ArrayBuffer)) return c$1$1(e1127, n927, i913);
    if ("undefined" != typeof SharedArrayBuffer && (F13(e1127, SharedArrayBuffer) || e1127 && F13(e1127.buffer, SharedArrayBuffer))) return c$1$1(e1127, n927, i913);
    if ("number" == typeof e1127) throw new TypeError('The "value" argument must not be of type number. Received type number');
    var o616 = e1127.valueOf && e1127.valueOf();
    if (null != o616 && o616 !== e1127) return u$1$1.from(o616, n927, i913);
    var u615 = function(e1326) {
        if (u$1$1.isBuffer(e1326)) {
            var n1158 = 0 | l$11(e1326.length), i1119 = f$2(n1158);
            return 0 === i1119.length || e1326.copy(i1119, 0, 0, n1158), i1119;
        }
        return void 0 !== e1326.length ? "number" != typeof e1326.length || N13(e1326.length) ? f$2(0) : p27(e1326) : "Buffer" === e1326.type && Array.isArray(e1326.data) ? p27(e1326.data) : void 0;
    }(e1127);
    if (u615) return u615;
    if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e1127[Symbol.toPrimitive]) return u$1$1.from(e1127[Symbol.toPrimitive]("string"), n927, i913);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e1127);
}
function h$1$1(e1425) {
    if ("number" != typeof e1425) throw new TypeError('"size" argument must be of type number');
    if (e1425 < 0) throw new RangeError('The value "' + e1425 + '" is invalid for option "size"');
}
function a$2(e1524) {
    return h$1$1(e1524), f$2(e1524 < 0 ? 0 : 0 | l$11(e1524));
}
function p27(e1624) {
    for(var n1221 = e1624.length < 0 ? 0 : 0 | l$11(e1624.length), i1212 = f$2(n1221), o813 = 0; o813 < n1221; o813 += 1)i1212[o813] = 255 & e1624[o813];
    return i1212;
}
function c$1$1(e1723, n1317, i1312) {
    if (n1317 < 0 || e1723.byteLength < n1317) throw new RangeError('"offset" is outside of buffer bounds');
    if (e1723.byteLength < n1317 + (i1312 || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var o97;
    return o97 = void 0 === n1317 && void 0 === i1312 ? new Uint8Array(e1723) : void 0 === i1312 ? new Uint8Array(e1723, n1317) : new Uint8Array(e1723, n1317, i1312), Object.setPrototypeOf(o97, u$1$1.prototype), o97;
}
function l$11(e1820) {
    if (e1820 >= 2147483647) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647..toString(16) + " bytes");
    return 0 | e1820;
}
function y17(e1919, n1417) {
    if (u$1$1.isBuffer(e1919)) return e1919.length;
    if (ArrayBuffer.isView(e1919) || F13(e1919, ArrayBuffer)) return e1919.byteLength;
    if ("string" != typeof e1919) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e1919);
    var i1412 = e1919.length, o106 = arguments.length > 2 && !0 === arguments[2];
    if (!o106 && 0 === i1412) return 0;
    for(var u810 = !1;;)switch(n1417){
        case "ascii":
        case "latin1":
        case "binary":
            return i1412;
        case "utf8":
        case "utf-8":
            return _16(e1919).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return 2 * i1412;
        case "hex":
            return i1412 >>> 1;
        case "base64":
            return z11(e1919).length;
        default:
            if (u810) return o106 ? -1 : _16(e1919).length;
            n1417 = ("" + n1417).toLowerCase(), u810 = !0;
    }
}
function g21(e2018, n1516, i1512) {
    var o1115 = !1;
    if ((void 0 === n1516 || n1516 < 0) && (n1516 = 0), n1516 > this.length) return "";
    if ((void 0 === i1512 || i1512 > this.length) && (i1512 = this.length), i1512 <= 0) return "";
    if ((i1512 >>>= 0) <= (n1516 >>>= 0)) return "";
    for(e2018 || (e2018 = "utf8");;)switch(e2018){
        case "hex":
            return O15(this, n1516, i1512);
        case "utf8":
        case "utf-8":
            return I14(this, n1516, i1512);
        case "ascii":
            return S15(this, n1516, i1512);
        case "latin1":
        case "binary":
            return R11(this, n1516, i1512);
        case "base64":
            return T13(this, n1516, i1512);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return L11(this, n1516, i1512);
        default:
            if (o1115) throw new TypeError("Unknown encoding: " + e2018);
            e2018 = (e2018 + "").toLowerCase(), o1115 = !0;
    }
}
function w16(e2115, n1615, i1612) {
    var o1214 = e2115[n1615];
    e2115[n1615] = e2115[i1612], e2115[i1612] = o1214;
}
function d24(e2214, n1715, i1712, o1313, u97) {
    if (0 === e2214.length) return -1;
    if ("string" == typeof i1712 ? (o1313 = i1712, i1712 = 0) : i1712 > 2147483647 ? i1712 = 2147483647 : i1712 < -2147483648 && (i1712 = -2147483648), N13(i1712 = +i1712) && (i1712 = u97 ? 0 : e2214.length - 1), i1712 < 0 && (i1712 = e2214.length + i1712), i1712 >= e2214.length) {
        if (u97) return -1;
        i1712 = e2214.length - 1;
    } else if (i1712 < 0) {
        if (!u97) return -1;
        i1712 = 0;
    }
    if ("string" == typeof n1715 && (n1715 = u$1$1.from(n1715, o1313)), u$1$1.isBuffer(n1715)) return 0 === n1715.length ? -1 : v23(e2214, n1715, i1712, o1313, u97);
    if ("number" == typeof n1715) return n1715 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? u97 ? Uint8Array.prototype.indexOf.call(e2214, n1715, i1712) : Uint8Array.prototype.lastIndexOf.call(e2214, n1715, i1712) : v23(e2214, [
        n1715
    ], i1712, o1313, u97);
    throw new TypeError("val must be string, number or Buffer");
}
function v23(e2313, n1815, i1812, o14, u104) {
    var s614, $61 = 1, j61 = e2313.length, Y41 = n1815.length;
    if (void 0 !== o14 && ("ucs2" === (o14 = String(o14).toLowerCase()) || "ucs-2" === o14 || "utf16le" === o14 || "utf-16le" === o14)) {
        if (e2313.length < 2 || n1815.length < 2) return -1;
        $61 = 2, j61 /= 2, Y41 /= 2, i1812 /= 2;
    }
    function h118(e2413, n1914) {
        return 1 === $61 ? e2413[n1914] : e2413.readUInt16BE(n1914 * $61);
    }
    if (u104) {
        var q41 = -1;
        for(s614 = i1812; s614 < j61; s614++)if (h118(e2313, s614) === h118(n1815, -1 === q41 ? 0 : s614 - q41)) {
            if (-1 === q41 && (q41 = s614), s614 - q41 + 1 === Y41) return q41 * $61;
        } else -1 !== q41 && (s614 -= s614 - q41), q41 = -1;
    } else for(i1812 + Y41 > j61 && (i1812 = j61 - Y41), s614 = i1812; s614 >= 0; s614--){
        for(var X41 = !0, V31 = 0; V31 < Y41; V31++)if (h118(e2313, s614 + V31) !== h118(n1815, V31)) {
            X41 = !1;
            break;
        }
        if (X41) return s614;
    }
    return -1;
}
function b20(e2513, n2014, i1912, o155) {
    i1912 = Number(i1912) || 0;
    var u1112 = e2513.length - i1912;
    o155 ? (o155 = Number(o155)) > u1112 && (o155 = u1112) : o155 = u1112;
    var s714 = n2014.length;
    o155 > s714 / 2 && (o155 = s714 / 2);
    for(var $71 = 0; $71 < o155; ++$71){
        var j71 = parseInt(n2014.substr(2 * $71, 2), 16);
        if (N13(j71)) return $71;
        e2513[i1912 + $71] = j71;
    }
    return $71;
}
function m23(e2612, n2137, i2011, o165) {
    return D12(_16(n2137, e2612.length - i2011), e2612, i2011, o165);
}
function E15(e2711, n2214, i2111, o174) {
    return D12(function(e2811) {
        for(var n2314 = [], i2211 = 0; i2211 < e2811.length; ++i2211)n2314.push(255 & e2811.charCodeAt(i2211));
        return n2314;
    }(n2214), e2711, i2111, o174);
}
function B13(e2911, n2414, i2311, o184) {
    return E15(e2911, n2414, i2311, o184);
}
function A13(e3010, n2513, i2410, o194) {
    return D12(z11(n2513), e3010, i2410, o194);
}
function U13(e3140, n2613, i259, o203) {
    return D12(function(e32, n2713) {
        for(var i261, o2111, u12, s814 = [], $8 = 0; $8 < e32.length && !((n2713 -= 2) < 0); ++$8)i261 = e32.charCodeAt($8), o2111 = i261 >> 8, u12 = i261 % 256, s814.push(u12), s814.push(o2111);
        return s814;
    }(n2613, e3140.length - i259), e3140, i259, o203);
}
function T13(e33, n2812, i271) {
    return 0 === n2812 && i271 === e33.length ? q10.fromByteArray(e33) : q10.fromByteArray(e33.slice(n2812, i271));
}
function I14(e34, n2912, i281) {
    i281 = Math.min(e34.length, i281);
    for(var o2210 = [], u134 = n2912; u134 < i281;){
        var s914, $91, j81, Y51, q51 = e34[u134], X51 = null, V41 = q51 > 239 ? 4 : q51 > 223 ? 3 : q51 > 191 ? 2 : 1;
        if (u134 + V41 <= i281) switch(V41){
            case 1:
                q51 < 128 && (X51 = q51);
                break;
            case 2:
                128 == (192 & (s914 = e34[u134 + 1])) && (Y51 = (31 & q51) << 6 | 63 & s914) > 127 && (X51 = Y51);
                break;
            case 3:
                s914 = e34[u134 + 1], $91 = e34[u134 + 2], 128 == (192 & s914) && 128 == (192 & $91) && (Y51 = (15 & q51) << 12 | (63 & s914) << 6 | 63 & $91) > 2047 && (Y51 < 55296 || Y51 > 57343) && (X51 = Y51);
                break;
            case 4:
                s914 = e34[u134 + 1], $91 = e34[u134 + 2], j81 = e34[u134 + 3], 128 == (192 & s914) && 128 == (192 & $91) && 128 == (192 & j81) && (Y51 = (15 & q51) << 18 | (63 & s914) << 12 | (63 & $91) << 6 | 63 & j81) > 65535 && Y51 < 1114112 && (X51 = Y51);
        }
        null === X51 ? (X51 = 65533, V41 = 1) : X51 > 65535 && (X51 -= 65536, o2210.push(X51 >>> 10 & 1023 | 55296), X51 = 56320 | 1023 & X51), o2210.push(X51), u134 += V41;
    }
    return function(e35) {
        var n3012 = e35.length;
        if (n3012 <= 4096) return String.fromCharCode.apply(String, e35);
        var i291 = "", o2310 = 0;
        for(; o2310 < n3012;)i291 += String.fromCharCode.apply(String, e35.slice(o2310, o2310 += 4096));
        return i291;
    }(o2210);
}
Y10.kMaxLength = 2147483647, u$1$1.TYPED_ARRAY_SUPPORT = function() {
    try {
        var e36 = new Uint8Array(1), n3112 = {
            foo: function() {
                return 42;
            }
        };
        return Object.setPrototypeOf(n3112, Uint8Array.prototype), Object.setPrototypeOf(e36, n3112), 42 === e36.foo();
    } catch (e) {
        return !1;
    }
}(), u$1$1.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(u$1$1.prototype, "parent", {
    enumerable: !0,
    get: function() {
        if (u$1$1.isBuffer(this)) return this.buffer;
    }
}), Object.defineProperty(u$1$1.prototype, "offset", {
    enumerable: !0,
    get: function() {
        if (u$1$1.isBuffer(this)) return this.byteOffset;
    }
}), u$1$1.poolSize = 8192, u$1$1.from = function(e37, n3212, i301) {
    return s$1(e37, n3212, i301);
}, Object.setPrototypeOf(u$1$1.prototype, Uint8Array.prototype), Object.setPrototypeOf(u$1$1, Uint8Array), u$1$1.alloc = function(e38, n3311, i3110) {
    return function(e39, n346, i327) {
        return h$1$1(e39), e39 <= 0 ? f$2(e39) : void 0 !== n346 ? "string" == typeof i327 ? f$2(e39).fill(n346, i327) : f$2(e39).fill(n346) : f$2(e39);
    }(e38, n3311, i3110);
}, u$1$1.allocUnsafe = function(e40) {
    return a$2(e40);
}, u$1$1.allocUnsafeSlow = function(e41) {
    return a$2(e41);
}, u$1$1.isBuffer = function(e42) {
    return null != e42 && !0 === e42._isBuffer && e42 !== u$1$1.prototype;
}, u$1$1.compare = function(e43, n353) {
    if (F13(e43, Uint8Array) && (e43 = u$1$1.from(e43, e43.offset, e43.byteLength)), F13(n353, Uint8Array) && (n353 = u$1$1.from(n353, n353.offset, n353.byteLength)), !u$1$1.isBuffer(e43) || !u$1$1.isBuffer(n353)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (e43 === n353) return 0;
    for(var i331 = e43.length, o244 = n353.length, u144 = 0, s1013 = Math.min(i331, o244); u144 < s1013; ++u144)if (e43[u144] !== n353[u144]) {
        i331 = e43[u144], o244 = n353[u144];
        break;
    }
    return i331 < o244 ? -1 : o244 < i331 ? 1 : 0;
}, u$1$1.isEncoding = function(e44) {
    switch(String(e44).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return !0;
        default:
            return !1;
    }
}, u$1$1.concat = function(e45, n362) {
    if (!Array.isArray(e45)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (0 === e45.length) return u$1$1.alloc(0);
    var i341;
    if (void 0 === n362) for(n362 = 0, i341 = 0; i341 < e45.length; ++i341)n362 += e45[i341].length;
    var o251 = u$1$1.allocUnsafe(n362), u154 = 0;
    for(i341 = 0; i341 < e45.length; ++i341){
        var s1123 = e45[i341];
        if (F13(s1123, Uint8Array) && (s1123 = u$1$1.from(s1123)), !u$1$1.isBuffer(s1123)) throw new TypeError('"list" argument must be an Array of Buffers');
        s1123.copy(o251, u154), u154 += s1123.length;
    }
    return o251;
}, u$1$1.byteLength = y17, u$1$1.prototype._isBuffer = !0, u$1$1.prototype.swap16 = function() {
    var e46 = this.length;
    if (e46 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var n372 = 0; n372 < e46; n372 += 2)w16(this, n372, n372 + 1);
    return this;
}, u$1$1.prototype.swap32 = function() {
    var e47 = this.length;
    if (e47 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var n382 = 0; n382 < e47; n382 += 4)w16(this, n382, n382 + 3), w16(this, n382 + 1, n382 + 2);
    return this;
}, u$1$1.prototype.swap64 = function() {
    var e48 = this.length;
    if (e48 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var n392 = 0; n392 < e48; n392 += 8)w16(this, n392, n392 + 7), w16(this, n392 + 1, n392 + 6), w16(this, n392 + 2, n392 + 5), w16(this, n392 + 3, n392 + 4);
    return this;
}, u$1$1.prototype.toString = function() {
    var e49 = this.length;
    return 0 === e49 ? "" : 0 === arguments.length ? I14(this, 0, e49) : g21.apply(this, arguments);
}, u$1$1.prototype.toLocaleString = u$1$1.prototype.toString, u$1$1.prototype.equals = function(e50) {
    if (!u$1$1.isBuffer(e50)) throw new TypeError("Argument must be a Buffer");
    return this === e50 || 0 === u$1$1.compare(this, e50);
}, u$1$1.prototype.inspect = function() {
    var e51 = "", n402 = Y10.INSPECT_MAX_BYTES;
    return e51 = this.toString("hex", 0, n402).replace(/(.{2})/g, "$1 ").trim(), this.length > n402 && (e51 += " ... "), "<Buffer " + e51 + ">";
}, V13 && (u$1$1.prototype[V13] = u$1$1.prototype.inspect), u$1$1.prototype.compare = function(e52, n4111, i35, o261, u163) {
    if (F13(e52, Uint8Array) && (e52 = u$1$1.from(e52, e52.offset, e52.byteLength)), !u$1$1.isBuffer(e52)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e52);
    if (void 0 === n4111 && (n4111 = 0), void 0 === i35 && (i35 = e52 ? e52.length : 0), void 0 === o261 && (o261 = 0), void 0 === u163 && (u163 = this.length), n4111 < 0 || i35 > e52.length || o261 < 0 || u163 > this.length) throw new RangeError("out of range index");
    if (o261 >= u163 && n4111 >= i35) return 0;
    if (o261 >= u163) return -1;
    if (n4111 >= i35) return 1;
    if (this === e52) return 0;
    for(var s1213 = (u163 >>>= 0) - (o261 >>>= 0), $101 = (i35 >>>= 0) - (n4111 >>>= 0), j91 = Math.min(s1213, $101), Y61 = this.slice(o261, u163), q61 = e52.slice(n4111, i35), X61 = 0; X61 < j91; ++X61)if (Y61[X61] !== q61[X61]) {
        s1213 = Y61[X61], $101 = q61[X61];
        break;
    }
    return s1213 < $101 ? -1 : $101 < s1213 ? 1 : 0;
}, u$1$1.prototype.includes = function(e53, n4210, i36) {
    return -1 !== this.indexOf(e53, n4210, i36);
}, u$1$1.prototype.indexOf = function(e54, n4310, i37) {
    return d24(this, e54, n4310, i37, !0);
}, u$1$1.prototype.lastIndexOf = function(e55, n441, i38) {
    return d24(this, e55, n441, i38, !1);
}, u$1$1.prototype.write = function(e56, n45, i39, o271) {
    if (void 0 === n45) o271 = "utf8", i39 = this.length, n45 = 0;
    else if (void 0 === i39 && "string" == typeof n45) o271 = n45, i39 = this.length, n45 = 0;
    else {
        if (!isFinite(n45)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        n45 >>>= 0, isFinite(i39) ? (i39 >>>= 0, void 0 === o271 && (o271 = "utf8")) : (o271 = i39, i39 = void 0);
    }
    var u173 = this.length - n45;
    if ((void 0 === i39 || i39 > u173) && (i39 = u173), e56.length > 0 && (i39 < 0 || n45 < 0) || n45 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    o271 || (o271 = "utf8");
    for(var s1312 = !1;;)switch(o271){
        case "hex":
            return b20(this, e56, n45, i39);
        case "utf8":
        case "utf-8":
            return m23(this, e56, n45, i39);
        case "ascii":
            return E15(this, e56, n45, i39);
        case "latin1":
        case "binary":
            return B13(this, e56, n45, i39);
        case "base64":
            return A13(this, e56, n45, i39);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return U13(this, e56, n45, i39);
        default:
            if (s1312) throw new TypeError("Unknown encoding: " + o271);
            o271 = ("" + o271).toLowerCase(), s1312 = !0;
    }
}, u$1$1.prototype.toJSON = function() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function S15(e57, n46, i40) {
    var o281 = "";
    i40 = Math.min(e57.length, i40);
    for(var u183 = n46; u183 < i40; ++u183)o281 += String.fromCharCode(127 & e57[u183]);
    return o281;
}
function R11(e58, n47, i41) {
    var o291 = "";
    i41 = Math.min(e58.length, i41);
    for(var u192 = n47; u192 < i41; ++u192)o291 += String.fromCharCode(e58[u192]);
    return o291;
}
function O15(e59, n48, i42) {
    var o301 = e59.length;
    (!n48 || n48 < 0) && (n48 = 0), (!i42 || i42 < 0 || i42 > o301) && (i42 = o301);
    for(var u202 = "", s1412 = n48; s1412 < i42; ++s1412)u202 += J10[e59[s1412]];
    return u202;
}
function L11(e60, n49, i43) {
    for(var o3110 = e60.slice(n49, i43), u2110 = "", s1512 = 0; s1512 < o3110.length; s1512 += 2)u2110 += String.fromCharCode(o3110[s1512] + 256 * o3110[s1512 + 1]);
    return u2110;
}
function x15(e61, n50, i44) {
    if (e61 % 1 != 0 || e61 < 0) throw new RangeError("offset is not uint");
    if (e61 + n50 > i44) throw new RangeError("Trying to access beyond buffer length");
}
function C17(e62, n51, i45, o3210, u224, s1612) {
    if (!u$1$1.isBuffer(e62)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (n51 > u224 || n51 < s1612) throw new RangeError('"value" argument is out of bounds');
    if (i45 + o3210 > e62.length) throw new RangeError("Index out of range");
}
function P14(e63, n, i46, o335, u, s) {
    if (i46 + o335 > e63.length) throw new RangeError("Index out of range");
    if (i46 < 0) throw new RangeError("Index out of range");
}
function k12(e64, n52, i47, o341, u231) {
    return n52 = +n52, i47 >>>= 0, u231 || P14(e64, 0, i47, 4), X10.write(e64, n52, i47, o341, 23, 4), i47 + 4;
}
function M11(e65, n53, i48, o351, u241) {
    return n53 = +n53, i48 >>>= 0, u241 || P14(e65, 0, i48, 8), X10.write(e65, n53, i48, o351, 52, 8), i48 + 8;
}
u$1$1.prototype.slice = function(e66, n54) {
    var i49 = this.length;
    (e66 = ~~e66) < 0 ? (e66 += i49) < 0 && (e66 = 0) : e66 > i49 && (e66 = i49), (n54 = void 0 === n54 ? i49 : ~~n54) < 0 ? (n54 += i49) < 0 && (n54 = 0) : n54 > i49 && (n54 = i49), n54 < e66 && (n54 = e66);
    var o361 = this.subarray(e66, n54);
    return Object.setPrototypeOf(o361, u$1$1.prototype), o361;
}, u$1$1.prototype.readUIntLE = function(e67, n55, i50) {
    e67 >>>= 0, n55 >>>= 0, i50 || x15(e67, n55, this.length);
    for(var o371 = this[e67], u251 = 1, s1712 = 0; ++s1712 < n55 && (u251 *= 256);)o371 += this[e67 + s1712] * u251;
    return o371;
}, u$1$1.prototype.readUIntBE = function(e68, n56, i51) {
    e68 >>>= 0, n56 >>>= 0, i51 || x15(e68, n56, this.length);
    for(var o381 = this[e68 + --n56], u261 = 1; n56 > 0 && (u261 *= 256);)o381 += this[e68 + --n56] * u261;
    return o381;
}, u$1$1.prototype.readUInt8 = function(e69, n57) {
    return e69 >>>= 0, n57 || x15(e69, 1, this.length), this[e69];
}, u$1$1.prototype.readUInt16LE = function(e70, n58) {
    return e70 >>>= 0, n58 || x15(e70, 2, this.length), this[e70] | this[e70 + 1] << 8;
}, u$1$1.prototype.readUInt16BE = function(e71, n59) {
    return e71 >>>= 0, n59 || x15(e71, 2, this.length), this[e71] << 8 | this[e71 + 1];
}, u$1$1.prototype.readUInt32LE = function(e72, n60) {
    return e72 >>>= 0, n60 || x15(e72, 4, this.length), (this[e72] | this[e72 + 1] << 8 | this[e72 + 2] << 16) + 16777216 * this[e72 + 3];
}, u$1$1.prototype.readUInt32BE = function(e73, n61) {
    return e73 >>>= 0, n61 || x15(e73, 4, this.length), 16777216 * this[e73] + (this[e73 + 1] << 16 | this[e73 + 2] << 8 | this[e73 + 3]);
}, u$1$1.prototype.readIntLE = function(e74, n62, i52) {
    e74 >>>= 0, n62 >>>= 0, i52 || x15(e74, n62, this.length);
    for(var o39 = this[e74], u271 = 1, s1812 = 0; ++s1812 < n62 && (u271 *= 256);)o39 += this[e74 + s1812] * u271;
    return o39 >= (u271 *= 128) && (o39 -= Math.pow(2, 8 * n62)), o39;
}, u$1$1.prototype.readIntBE = function(e75, n63, i53) {
    e75 >>>= 0, n63 >>>= 0, i53 || x15(e75, n63, this.length);
    for(var o40 = n63, u281 = 1, s1912 = this[e75 + --o40]; o40 > 0 && (u281 *= 256);)s1912 += this[e75 + --o40] * u281;
    return s1912 >= (u281 *= 128) && (s1912 -= Math.pow(2, 8 * n63)), s1912;
}, u$1$1.prototype.readInt8 = function(e76, n64) {
    return e76 >>>= 0, n64 || x15(e76, 1, this.length), 128 & this[e76] ? -1 * (255 - this[e76] + 1) : this[e76];
}, u$1$1.prototype.readInt16LE = function(e77, n65) {
    e77 >>>= 0, n65 || x15(e77, 2, this.length);
    var i54 = this[e77] | this[e77 + 1] << 8;
    return 32768 & i54 ? 4294901760 | i54 : i54;
}, u$1$1.prototype.readInt16BE = function(e78, n66) {
    e78 >>>= 0, n66 || x15(e78, 2, this.length);
    var i55 = this[e78 + 1] | this[e78] << 8;
    return 32768 & i55 ? 4294901760 | i55 : i55;
}, u$1$1.prototype.readInt32LE = function(e79, n67) {
    return e79 >>>= 0, n67 || x15(e79, 4, this.length), this[e79] | this[e79 + 1] << 8 | this[e79 + 2] << 16 | this[e79 + 3] << 24;
}, u$1$1.prototype.readInt32BE = function(e80, n68) {
    return e80 >>>= 0, n68 || x15(e80, 4, this.length), this[e80] << 24 | this[e80 + 1] << 16 | this[e80 + 2] << 8 | this[e80 + 3];
}, u$1$1.prototype.readFloatLE = function(e81, n69) {
    return e81 >>>= 0, n69 || x15(e81, 4, this.length), X10.read(this, e81, !0, 23, 4);
}, u$1$1.prototype.readFloatBE = function(e82, n70) {
    return e82 >>>= 0, n70 || x15(e82, 4, this.length), X10.read(this, e82, !1, 23, 4);
}, u$1$1.prototype.readDoubleLE = function(e83, n71) {
    return e83 >>>= 0, n71 || x15(e83, 8, this.length), X10.read(this, e83, !0, 52, 8);
}, u$1$1.prototype.readDoubleBE = function(e84, n72) {
    return e84 >>>= 0, n72 || x15(e84, 8, this.length), X10.read(this, e84, !1, 52, 8);
}, u$1$1.prototype.writeUIntLE = function(e85, n73, i56, o41) {
    (e85 = +e85, n73 >>>= 0, i56 >>>= 0, o41) || C17(this, e85, n73, i56, Math.pow(2, 8 * i56) - 1, 0);
    var u291 = 1, s2012 = 0;
    for(this[n73] = 255 & e85; ++s2012 < i56 && (u291 *= 256);)this[n73 + s2012] = e85 / u291 & 255;
    return n73 + i56;
}, u$1$1.prototype.writeUIntBE = function(e86, n74, i57, o42) {
    (e86 = +e86, n74 >>>= 0, i57 >>>= 0, o42) || C17(this, e86, n74, i57, Math.pow(2, 8 * i57) - 1, 0);
    var u301 = i57 - 1, s2112 = 1;
    for(this[n74 + u301] = 255 & e86; --u301 >= 0 && (s2112 *= 256);)this[n74 + u301] = e86 / s2112 & 255;
    return n74 + i57;
}, u$1$1.prototype.writeUInt8 = function(e87, n75, i58) {
    return e87 = +e87, n75 >>>= 0, i58 || C17(this, e87, n75, 1, 255, 0), this[n75] = 255 & e87, n75 + 1;
}, u$1$1.prototype.writeUInt16LE = function(e88, n76, i59) {
    return e88 = +e88, n76 >>>= 0, i59 || C17(this, e88, n76, 2, 65535, 0), this[n76] = 255 & e88, this[n76 + 1] = e88 >>> 8, n76 + 2;
}, u$1$1.prototype.writeUInt16BE = function(e89, n77, i60) {
    return e89 = +e89, n77 >>>= 0, i60 || C17(this, e89, n77, 2, 65535, 0), this[n77] = e89 >>> 8, this[n77 + 1] = 255 & e89, n77 + 2;
}, u$1$1.prototype.writeUInt32LE = function(e90, n78, i61) {
    return e90 = +e90, n78 >>>= 0, i61 || C17(this, e90, n78, 4, 4294967295, 0), this[n78 + 3] = e90 >>> 24, this[n78 + 2] = e90 >>> 16, this[n78 + 1] = e90 >>> 8, this[n78] = 255 & e90, n78 + 4;
}, u$1$1.prototype.writeUInt32BE = function(e91, n79, i62) {
    return e91 = +e91, n79 >>>= 0, i62 || C17(this, e91, n79, 4, 4294967295, 0), this[n79] = e91 >>> 24, this[n79 + 1] = e91 >>> 16, this[n79 + 2] = e91 >>> 8, this[n79 + 3] = 255 & e91, n79 + 4;
}, u$1$1.prototype.writeIntLE = function(e92, n80, i63, o43) {
    if (e92 = +e92, n80 >>>= 0, !o43) {
        var u31 = Math.pow(2, 8 * i63 - 1);
        C17(this, e92, n80, i63, u31 - 1, -u31);
    }
    var s2211 = 0, $113 = 1, j101 = 0;
    for(this[n80] = 255 & e92; ++s2211 < i63 && ($113 *= 256);)e92 < 0 && 0 === j101 && 0 !== this[n80 + s2211 - 1] && (j101 = 1), this[n80 + s2211] = (e92 / $113 >> 0) - j101 & 255;
    return n80 + i63;
}, u$1$1.prototype.writeIntBE = function(e93, n81, i64, o44) {
    if (e93 = +e93, n81 >>>= 0, !o44) {
        var u32 = Math.pow(2, 8 * i64 - 1);
        C17(this, e93, n81, i64, u32 - 1, -u32);
    }
    var s2311 = i64 - 1, $121 = 1, j113 = 0;
    for(this[n81 + s2311] = 255 & e93; --s2311 >= 0 && ($121 *= 256);)e93 < 0 && 0 === j113 && 0 !== this[n81 + s2311 + 1] && (j113 = 1), this[n81 + s2311] = (e93 / $121 >> 0) - j113 & 255;
    return n81 + i64;
}, u$1$1.prototype.writeInt8 = function(e94, n82, i65) {
    return e94 = +e94, n82 >>>= 0, i65 || C17(this, e94, n82, 1, 127, -128), e94 < 0 && (e94 = 255 + e94 + 1), this[n82] = 255 & e94, n82 + 1;
}, u$1$1.prototype.writeInt16LE = function(e95, n83, i66) {
    return e95 = +e95, n83 >>>= 0, i66 || C17(this, e95, n83, 2, 32767, -32768), this[n83] = 255 & e95, this[n83 + 1] = e95 >>> 8, n83 + 2;
}, u$1$1.prototype.writeInt16BE = function(e96, n84, i67) {
    return e96 = +e96, n84 >>>= 0, i67 || C17(this, e96, n84, 2, 32767, -32768), this[n84] = e96 >>> 8, this[n84 + 1] = 255 & e96, n84 + 2;
}, u$1$1.prototype.writeInt32LE = function(e97, n85, i68) {
    return e97 = +e97, n85 >>>= 0, i68 || C17(this, e97, n85, 4, 2147483647, -2147483648), this[n85] = 255 & e97, this[n85 + 1] = e97 >>> 8, this[n85 + 2] = e97 >>> 16, this[n85 + 3] = e97 >>> 24, n85 + 4;
}, u$1$1.prototype.writeInt32BE = function(e98, n86, i69) {
    return e98 = +e98, n86 >>>= 0, i69 || C17(this, e98, n86, 4, 2147483647, -2147483648), e98 < 0 && (e98 = 4294967295 + e98 + 1), this[n86] = e98 >>> 24, this[n86 + 1] = e98 >>> 16, this[n86 + 2] = e98 >>> 8, this[n86 + 3] = 255 & e98, n86 + 4;
}, u$1$1.prototype.writeFloatLE = function(e99, n87, i70) {
    return k12(this, e99, n87, !0, i70);
}, u$1$1.prototype.writeFloatBE = function(e100, n88, i71) {
    return k12(this, e100, n88, !1, i71);
}, u$1$1.prototype.writeDoubleLE = function(e101, n89, i72) {
    return M11(this, e101, n89, !0, i72);
}, u$1$1.prototype.writeDoubleBE = function(e102, n90, i73) {
    return M11(this, e102, n90, !1, i73);
}, u$1$1.prototype.copy = function(e103, n91, i74, o45) {
    if (!u$1$1.isBuffer(e103)) throw new TypeError("argument should be a Buffer");
    if (i74 || (i74 = 0), o45 || 0 === o45 || (o45 = this.length), n91 >= e103.length && (n91 = e103.length), n91 || (n91 = 0), o45 > 0 && o45 < i74 && (o45 = i74), o45 === i74) return 0;
    if (0 === e103.length || 0 === this.length) return 0;
    if (n91 < 0) throw new RangeError("targetStart out of bounds");
    if (i74 < 0 || i74 >= this.length) throw new RangeError("Index out of range");
    if (o45 < 0) throw new RangeError("sourceEnd out of bounds");
    o45 > this.length && (o45 = this.length), e103.length - n91 < o45 - i74 && (o45 = e103.length - n91 + i74);
    var u33 = o45 - i74;
    if (this === e103 && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(n91, i74, o45);
    else if (this === e103 && i74 < n91 && n91 < o45) for(var s2411 = u33 - 1; s2411 >= 0; --s2411)e103[s2411 + n91] = this[s2411 + i74];
    else Uint8Array.prototype.set.call(e103, this.subarray(i74, o45), n91);
    return u33;
}, u$1$1.prototype.fill = function(e104, n92, i75, o46) {
    if ("string" == typeof e104) {
        if ("string" == typeof n92 ? (o46 = n92, n92 = 0, i75 = this.length) : "string" == typeof i75 && (o46 = i75, i75 = this.length), void 0 !== o46 && "string" != typeof o46) throw new TypeError("encoding must be a string");
        if ("string" == typeof o46 && !u$1$1.isEncoding(o46)) throw new TypeError("Unknown encoding: " + o46);
        if (1 === e104.length) {
            var u34 = e104.charCodeAt(0);
            ("utf8" === o46 && u34 < 128 || "latin1" === o46) && (e104 = u34);
        }
    } else "number" == typeof e104 ? e104 &= 255 : "boolean" == typeof e104 && (e104 = Number(e104));
    if (n92 < 0 || this.length < n92 || this.length < i75) throw new RangeError("Out of range index");
    if (i75 <= n92) return this;
    var s2511;
    if (n92 >>>= 0, i75 = void 0 === i75 ? this.length : i75 >>> 0, e104 || (e104 = 0), "number" == typeof e104) for(s2511 = n92; s2511 < i75; ++s2511)this[s2511] = e104;
    else {
        var $131 = u$1$1.isBuffer(e104) ? e104 : u$1$1.from(e104, o46), j121 = $131.length;
        if (0 === j121) throw new TypeError('The value "' + e104 + '" is invalid for argument "value"');
        for(s2511 = 0; s2511 < i75 - n92; ++s2511)this[s2511 + n92] = $131[s2511 % j121];
    }
    return this;
};
var W11 = /[^+/0-9A-Za-z-_]/g;
function _16(e105, n93) {
    var i76;
    n93 = n93 || 1 / 0;
    for(var o47 = e105.length, u35 = null, s2611 = [], $14 = 0; $14 < o47; ++$14){
        if ((i76 = e105.charCodeAt($14)) > 55295 && i76 < 57344) {
            if (!u35) {
                if (i76 > 56319) {
                    (n93 -= 3) > -1 && s2611.push(239, 191, 189);
                    continue;
                }
                if ($14 + 1 === o47) {
                    (n93 -= 3) > -1 && s2611.push(239, 191, 189);
                    continue;
                }
                u35 = i76;
                continue;
            }
            if (i76 < 56320) {
                (n93 -= 3) > -1 && s2611.push(239, 191, 189), u35 = i76;
                continue;
            }
            i76 = 65536 + (u35 - 55296 << 10 | i76 - 56320);
        } else u35 && (n93 -= 3) > -1 && s2611.push(239, 191, 189);
        if (u35 = null, i76 < 128) {
            if ((n93 -= 1) < 0) break;
            s2611.push(i76);
        } else if (i76 < 2048) {
            if ((n93 -= 2) < 0) break;
            s2611.push(i76 >> 6 | 192, 63 & i76 | 128);
        } else if (i76 < 65536) {
            if ((n93 -= 3) < 0) break;
            s2611.push(i76 >> 12 | 224, i76 >> 6 & 63 | 128, 63 & i76 | 128);
        } else {
            if (!(i76 < 1114112)) throw new Error("Invalid code point");
            if ((n93 -= 4) < 0) break;
            s2611.push(i76 >> 18 | 240, i76 >> 12 & 63 | 128, i76 >> 6 & 63 | 128, 63 & i76 | 128);
        }
    }
    return s2611;
}
function z11(e106) {
    return q10.toByteArray(function(e107) {
        if ((e107 = (e107 = e107.split("=")[0]).trim().replace(W11, "")).length < 2) return "";
        for(; e107.length % 4 != 0;)e107 += "=";
        return e107;
    }(e106));
}
function D12(e108, n94, i77, o48) {
    for(var u36 = 0; u36 < o48 && !(u36 + i77 >= n94.length || u36 >= e108.length); ++u36)n94[u36 + i77] = e108[u36];
    return u36;
}
function F13(e109, n95) {
    return e109 instanceof n95 || null != e109 && null != e109.constructor && null != e109.constructor.name && e109.constructor.name === n95.name;
}
function N13(e110) {
    return e110 != e110;
}
var J10 = function() {
    for(var e111 = new Array(256), n96 = 0; n96 < 16; ++n96)for(var i78 = 16 * n96, o49 = 0; o49 < 16; ++o49)e111[i78 + o49] = "0123456789abcdef"[n96] + "0123456789abcdef"[o49];
    return e111;
}();
Y10.Buffer;
Y10.INSPECT_MAX_BYTES;
Y10.kMaxLength;
var Z10 = {}, G10 = Y10, H12 = G10.Buffer;
function t36(e112, n97) {
    for(var i79 in e112)n97[i79] = e112[i79];
}
function f28(e1134, n98, i80) {
    return H12(e1134, n98, i80);
}
H12.from && H12.alloc && H12.allocUnsafe && H12.allocUnsafeSlow ? Z10 = G10 : (t36(G10, Z10), Z10.Buffer = f28), f28.prototype = Object.create(H12.prototype), t36(H12, f28), f28.from = function(e114, n99, i81) {
    if ("number" == typeof e114) throw new TypeError("Argument must not be a number");
    return H12(e114, n99, i81);
}, f28.alloc = function(e115, n100, i82) {
    if ("number" != typeof e115) throw new TypeError("Argument must be a number");
    var o50 = H12(e115);
    return void 0 !== n100 ? "string" == typeof i82 ? o50.fill(n100, i82) : o50.fill(n100) : o50.fill(0), o50;
}, f28.allocUnsafe = function(e116) {
    if ("number" != typeof e116) throw new TypeError("Argument must be a number");
    return H12(e116);
}, f28.allocUnsafeSlow = function(e117) {
    if ("number" != typeof e117) throw new TypeError("Argument must be a number");
    return G10.SlowBuffer(e117);
};
var K10 = Z10;
var Q10 = {}, tt4 = K10.Buffer, rt4 = tt4.isEncoding || function(e118) {
    switch((e118 = "" + e118) && e118.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return !0;
        default:
            return !1;
    }
};
function a36(e119) {
    var n101;
    switch(this.encoding = function(e120) {
        var n102 = function(e121) {
            if (!e121) return "utf8";
            for(var n103;;)switch(e121){
                case "utf8":
                case "utf-8":
                    return "utf8";
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return "utf16le";
                case "latin1":
                case "binary":
                    return "latin1";
                case "base64":
                case "ascii":
                case "hex":
                    return e121;
                default:
                    if (n103) return;
                    e121 = ("" + e121).toLowerCase(), n103 = !0;
            }
        }(e120);
        if ("string" != typeof n102 && (tt4.isEncoding === rt4 || !rt4(e120))) throw new Error("Unknown encoding: " + e120);
        return n102 || e120;
    }(e119), this.encoding){
        case "utf16le":
            this.text = h21, this.end = l32, n101 = 4;
            break;
        case "utf8":
            this.fillLast = n$1, n101 = 4;
            break;
        case "base64":
            this.text = u$11, this.end = o$1, n101 = 3;
            break;
        default:
            return this.write = f$1, this.end = c33, void 0;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = tt4.allocUnsafe(n101);
}
function r50(e122) {
    return e122 <= 127 ? 0 : e122 >> 5 == 6 ? 2 : e122 >> 4 == 14 ? 3 : e122 >> 3 == 30 ? 4 : e122 >> 6 == 2 ? -1 : -2;
}
function n$1(e123) {
    var n104 = this.lastTotal - this.lastNeed, i83 = function(e124, n105, i) {
        if (128 != (192 & n105[0])) return e124.lastNeed = 0, "�";
        if (e124.lastNeed > 1 && n105.length > 1) {
            if (128 != (192 & n105[1])) return e124.lastNeed = 1, "�";
            if (e124.lastNeed > 2 && n105.length > 2 && 128 != (192 & n105[2])) return e124.lastNeed = 2, "�";
        }
    }(this, e123);
    return void 0 !== i83 ? i83 : this.lastNeed <= e123.length ? (e123.copy(this.lastChar, n104, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e123.copy(this.lastChar, n104, 0, e123.length), this.lastNeed -= e123.length, void 0);
}
function h21(e125, n106) {
    if ((e125.length - n106) % 2 == 0) {
        var i84 = e125.toString("utf16le", n106);
        if (i84) {
            var o51 = i84.charCodeAt(i84.length - 1);
            if (o51 >= 55296 && o51 <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e125[e125.length - 2], this.lastChar[1] = e125[e125.length - 1], i84.slice(0, -1);
        }
        return i84;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e125[e125.length - 1], e125.toString("utf16le", n106, e125.length - 1);
}
function l32(e126) {
    var n107 = e126 && e126.length ? this.write(e126) : "";
    if (this.lastNeed) {
        var i85 = this.lastTotal - this.lastNeed;
        return n107 + this.lastChar.toString("utf16le", 0, i85);
    }
    return n107;
}
function u$11(e127, n108) {
    var i86 = (e127.length - n108) % 3;
    return 0 === i86 ? e127.toString("base64", n108) : (this.lastNeed = 3 - i86, this.lastTotal = 3, 1 === i86 ? this.lastChar[0] = e127[e127.length - 1] : (this.lastChar[0] = e127[e127.length - 2], this.lastChar[1] = e127[e127.length - 1]), e127.toString("base64", n108, e127.length - i86));
}
function o$1(e128) {
    var n109 = e128 && e128.length ? this.write(e128) : "";
    return this.lastNeed ? n109 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : n109;
}
function f$1(e129) {
    return e129.toString(this.encoding);
}
function c33(e130) {
    return e130 && e130.length ? this.write(e130) : "";
}
Q10.StringDecoder = a36, a36.prototype.write = function(e131) {
    if (0 === e131.length) return "";
    var n110, i87;
    if (this.lastNeed) {
        if (void 0 === (n110 = this.fillLast(e131))) return "";
        i87 = this.lastNeed, this.lastNeed = 0;
    } else i87 = 0;
    return i87 < e131.length ? n110 ? n110 + this.text(e131, i87) : this.text(e131, i87) : n110 || "";
}, a36.prototype.end = function(e132) {
    var n111 = e132 && e132.length ? this.write(e132) : "";
    return this.lastNeed ? n111 + "�" : n111;
}, a36.prototype.text = function(e133, n112) {
    var i88 = function(e134, n113, i89) {
        var o53 = n113.length - 1;
        if (o53 < i89) return 0;
        var u37 = r50(n113[o53]);
        return u37 >= 0 ? (u37 > 0 && (e134.lastNeed = u37 - 1), u37) : --o53 < i89 || -2 === u37 ? 0 : (u37 = r50(n113[o53])) >= 0 ? (u37 > 0 && (e134.lastNeed = u37 - 2), u37) : --o53 < i89 || -2 === u37 ? 0 : (u37 = r50(n113[o53])) >= 0 ? (u37 > 0 && (2 === u37 ? u37 = 0 : e134.lastNeed = u37 - 3), u37) : 0;
    }(this, e133, n112);
    if (!this.lastNeed) return e133.toString("utf8", n112);
    this.lastTotal = i88;
    var o52 = e133.length - (i88 - this.lastNeed);
    return e133.copy(this.lastChar, 0, o52), e133.toString("utf8", n112, o52);
}, a36.prototype.fillLast = function(e135) {
    if (this.lastNeed <= e135.length) return e135.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    e135.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e135.length), this.lastNeed -= e135.length;
};
Q10.StringDecoder;
Q10.StringDecoder;
var i35 = {}, a37 = false;
function dew$2$1() {
    if (a37) return i35;
    a37 = true;
    i35.byteLength = byteLength;
    i35.toByteArray = toByteArray;
    i35.fromByteArray = fromByteArray;
    var e1 = [];
    var t1164 = [];
    var r1102 = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var n1159 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(var o149 = 0, f122 = n1159.length; o149 < f122; ++o149){
        e1[o149] = n1159[o149];
        t1164[n1159.charCodeAt(o149)] = o149;
    }
    t1164["-".charCodeAt(0)] = 62;
    t1164["_".charCodeAt(0)] = 63;
    function getLens(e2) {
        var t2149 = e2.length;
        if (t2149 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var r255 = e2.indexOf("=");
        -1 === r255 && (r255 = t2149);
        var n2138 = r255 === t2149 ? 0 : 4 - r255 % 4;
        return [
            r255,
            n2138
        ];
    }
    function byteLength(e3141) {
        var t3118 = getLens(e3141);
        var r344 = t3118[0];
        var n347 = t3118[1];
        return 3 * (r344 + n347) / 4 - n347;
    }
    function _byteLength(e, t4115, r438) {
        return 3 * (t4115 + r438) / 4 - r438;
    }
    function toByteArray(e4121) {
        var n440;
        var i1120 = getLens(e4121);
        var a150 = i1120[0];
        var o245 = i1120[1];
        var f216 = new r1102(_byteLength(e4121, a150, o245));
        var s1124 = 0;
        var u129 = o245 > 0 ? a150 - 4 : a150;
        var l135;
        for(l135 = 0; l135 < u129; l135 += 4){
            n440 = t1164[e4121.charCodeAt(l135)] << 18 | t1164[e4121.charCodeAt(l135 + 1)] << 12 | t1164[e4121.charCodeAt(l135 + 2)] << 6 | t1164[e4121.charCodeAt(l135 + 3)];
            f216[s1124++] = n440 >> 16 & 255;
            f216[s1124++] = n440 >> 8 & 255;
            f216[s1124++] = 255 & n440;
        }
        if (2 === o245) {
            n440 = t1164[e4121.charCodeAt(l135)] << 2 | t1164[e4121.charCodeAt(l135 + 1)] >> 4;
            f216[s1124++] = 255 & n440;
        }
        if (1 === o245) {
            n440 = t1164[e4121.charCodeAt(l135)] << 10 | t1164[e4121.charCodeAt(l135 + 1)] << 4 | t1164[e4121.charCodeAt(l135 + 2)] >> 2;
            f216[s1124++] = n440 >> 8 & 255;
            f216[s1124++] = 255 & n440;
        }
        return f216;
    }
    function tripletToBase64(t5115) {
        return e1[t5115 >> 18 & 63] + e1[t5115 >> 12 & 63] + e1[t5115 >> 6 & 63] + e1[63 & t5115];
    }
    function encodeChunk(e5121, t640, r533) {
        var n536;
        var i260 = [];
        for(var a230 = t640; a230 < r533; a230 += 3){
            n536 = (e5121[a230] << 16 & 16711680) + (e5121[a230 + 1] << 8 & 65280) + (255 & e5121[a230 + 2]);
            i260.push(tripletToBase64(n536));
        }
        return i260.join("");
    }
    function fromByteArray(t736) {
        var r632;
        var n634 = t736.length;
        var i328 = n634 % 3;
        var a329 = [];
        var o336 = 16383;
        for(var f313 = 0, s2113 = n634 - i328; f313 < s2113; f313 += o336)a329.push(encodeChunk(t736, f313, f313 + o336 > s2113 ? s2113 : f313 + o336));
        if (1 === i328) {
            r632 = t736[n634 - 1];
            a329.push(e1[r632 >> 2] + e1[r632 << 4 & 63] + "==");
        } else if (2 === i328) {
            r632 = (t736[n634 - 2] << 8) + t736[n634 - 1];
            a329.push(e1[r632 >> 10] + e1[r632 >> 4 & 63] + e1[r632 << 2 & 63] + "=");
        }
        return a329.join("");
    }
    return i35;
}
var o39 = {}, f29 = false;
function dew$1$1() {
    if (f29) return o39;
    f29 = true;
    o39.read = function(e6120, t832, r727, n732, i422) {
        var a426, o426;
        var f412 = 8 * i422 - n732 - 1;
        var s393 = (1 << f412) - 1;
        var u225 = s393 >> 1;
        var l224 = -7;
        var h119 = r727 ? i422 - 1 : 0;
        var c138 = r727 ? -1 : 1;
        var d123 = e6120[t832 + h119];
        h119 += c138;
        a426 = d123 & (1 << -l224) - 1;
        d123 >>= -l224;
        l224 += f412;
        for(; l224 > 0; a426 = 256 * a426 + e6120[t832 + h119], h119 += c138, l224 -= 8);
        o426 = a426 & (1 << -l224) - 1;
        a426 >>= -l224;
        l224 += n732;
        for(; l224 > 0; o426 = 256 * o426 + e6120[t832 + h119], h119 += c138, l224 -= 8);
        if (0 === a426) a426 = 1 - u225;
        else {
            if (a426 === s393) return o426 ? NaN : Infinity * (d123 ? -1 : 1);
            o426 += Math.pow(2, n732);
            a426 -= u225;
        }
        return (d123 ? -1 : 1) * o426 * Math.pow(2, a426 - n732);
    };
    o39.write = function(e7112, t929, r826, n829, i518, a519) {
        var o524, f510, s425;
        var u317 = 8 * a519 - i518 - 1;
        var l317 = (1 << u317) - 1;
        var h215 = l317 >> 1;
        var c219 = 23 === i518 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var d214 = n829 ? 0 : a519 - 1;
        var p124 = n829 ? 1 : -1;
        var b117 = t929 < 0 || 0 === t929 && 1 / t929 < 0 ? 1 : 0;
        t929 = Math.abs(t929);
        if (isNaN(t929) || Infinity === t929) {
            f510 = isNaN(t929) ? 1 : 0;
            o524 = l317;
        } else {
            o524 = Math.floor(Math.log(t929) / Math.LN2);
            if (t929 * (s425 = Math.pow(2, -o524)) < 1) {
                o524--;
                s425 *= 2;
            }
            t929 += o524 + h215 >= 1 ? c219 / s425 : c219 * Math.pow(2, 1 - h215);
            if (t929 * s425 >= 2) {
                o524++;
                s425 /= 2;
            }
            if (o524 + h215 >= l317) {
                f510 = 0;
                o524 = l317;
            } else if (o524 + h215 >= 1) {
                f510 = (t929 * s425 - 1) * Math.pow(2, i518);
                o524 += h215;
            } else {
                f510 = t929 * Math.pow(2, h215 - 1) * Math.pow(2, i518);
                o524 = 0;
            }
        }
        for(; i518 >= 8; e7112[r826 + d214] = 255 & f510, d214 += p124, f510 /= 256, i518 -= 8);
        o524 = o524 << i518 | f510;
        u317 += i518;
        for(; u317 > 0; e7112[r826 + d214] = 255 & o524, d214 += p124, o524 /= 256, u317 -= 8);
        e7112[r826 + d214 - p124] |= 128 * b117;
    };
    return o39;
}
var s37 = {}, u31 = false;
function dew$g2() {
    if (u31) return s37;
    u31 = true;
    const e8116 = dew$2$1();
    const t1028 = dew$1$1();
    const r922 = "function" === typeof Symbol && "function" === typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
    s37.Buffer = Buffer2;
    s37.SlowBuffer = SlowBuffer;
    s37.INSPECT_MAX_BYTES = 50;
    const n928 = 2147483647;
    s37.kMaxLength = n928;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    Buffer2.TYPED_ARRAY_SUPPORT || "undefined" === typeof console || "function" !== typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function typedArraySupport() {
        try {
            const e9116 = new Uint8Array(1);
            const t1165 = {
                foo: function() {
                    return 42;
                }
            };
            Object.setPrototypeOf(t1165, Uint8Array.prototype);
            Object.setPrototypeOf(e9116, t1165);
            return 42 === e9116.foo();
        } catch (e) {
            return false;
        }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
            if (Buffer2.isBuffer(this)) return this.buffer;
        }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
            if (Buffer2.isBuffer(this)) return this.byteOffset;
        }
    });
    function createBuffer(e1029) {
        if (e1029 > 2147483647) throw new RangeError('The value "' + e1029 + '" is invalid for option "size"');
        const t1226 = new Uint8Array(e1029);
        Object.setPrototypeOf(t1226, Buffer2.prototype);
        return t1226;
    }
    function Buffer2(e1128, t1326, r1021) {
        if ("number" === typeof e1128) {
            if ("string" === typeof t1326) throw new TypeError('The "string" argument must be of type string. Received type number');
            return allocUnsafe(e1128);
        }
        return from(e1128, t1326, r1021);
    }
    Buffer2.poolSize = 8192;
    function from(e1228, t1424, r1123) {
        if ("string" === typeof e1228) return fromString(e1228, t1424);
        if (ArrayBuffer.isView(e1228)) return fromArrayView(e1228);
        if (null == e1228) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e1228);
        if (isInstance(e1228, ArrayBuffer) || e1228 && isInstance(e1228.buffer, ArrayBuffer)) return fromArrayBuffer(e1228, t1424, r1123);
        if ("undefined" !== typeof SharedArrayBuffer && (isInstance(e1228, SharedArrayBuffer) || e1228 && isInstance(e1228.buffer, SharedArrayBuffer))) return fromArrayBuffer(e1228, t1424, r1123);
        if ("number" === typeof e1228) throw new TypeError('The "value" argument must not be of type number. Received type number');
        const n1027 = e1228.valueOf && e1228.valueOf();
        if (null != n1027 && n1027 !== e1228) return Buffer2.from(n1027, t1424, r1123);
        const i714 = fromObject(e1228);
        if (i714) return i714;
        if ("undefined" !== typeof Symbol && null != Symbol.toPrimitive && "function" === typeof e1228[Symbol.toPrimitive]) return Buffer2.from(e1228[Symbol.toPrimitive]("string"), t1424, r1123);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e1228);
    }
    Buffer2.from = function(e1327, t1523, r1219) {
        return from(e1327, t1523, r1219);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(e1426) {
        if ("number" !== typeof e1426) throw new TypeError('"size" argument must be of type number');
        if (e1426 < 0) throw new RangeError('The value "' + e1426 + '" is invalid for option "size"');
    }
    function alloc(e1525, t1623, r1316) {
        assertSize(e1525);
        return e1525 <= 0 ? createBuffer(e1525) : void 0 !== t1623 ? "string" === typeof r1316 ? createBuffer(e1525).fill(t1623, r1316) : createBuffer(e1525).fill(t1623) : createBuffer(e1525);
    }
    Buffer2.alloc = function(e1625, t1719, r1416) {
        return alloc(e1625, t1719, r1416);
    };
    function allocUnsafe(e1724) {
        assertSize(e1724);
        return createBuffer(e1724 < 0 ? 0 : 0 | checked(e1724));
    }
    Buffer2.allocUnsafe = function(e1821) {
        return allocUnsafe(e1821);
    };
    Buffer2.allocUnsafeSlow = function(e1920) {
        return allocUnsafe(e1920);
    };
    function fromString(e2019, t1818) {
        "string" === typeof t1818 && "" !== t1818 || (t1818 = "utf8");
        if (!Buffer2.isEncoding(t1818)) throw new TypeError("Unknown encoding: " + t1818);
        const r1514 = 0 | byteLength(e2019, t1818);
        let n1160 = createBuffer(r1514);
        const i814 = n1160.write(e2019, t1818);
        i814 !== r1514 && (n1160 = n1160.slice(0, i814));
        return n1160;
    }
    function fromArrayLike(e2116) {
        const t1918 = e2116.length < 0 ? 0 : 0 | checked(e2116.length);
        const r1613 = createBuffer(t1918);
        for(let n1222 = 0; n1222 < t1918; n1222 += 1)r1613[n1222] = 255 & e2116[n1222];
        return r1613;
    }
    function fromArrayView(e2215) {
        if (isInstance(e2215, Uint8Array)) {
            const t2017 = new Uint8Array(e2215);
            return fromArrayBuffer(t2017.buffer, t2017.byteOffset, t2017.byteLength);
        }
        return fromArrayLike(e2215);
    }
    function fromArrayBuffer(e2314, t2150, r1713) {
        if (t2150 < 0 || e2314.byteLength < t2150) throw new RangeError('"offset" is outside of buffer bounds');
        if (e2314.byteLength < t2150 + (r1713 || 0)) throw new RangeError('"length" is outside of buffer bounds');
        let n1318;
        n1318 = void 0 === t2150 && void 0 === r1713 ? new Uint8Array(e2314) : void 0 === r1713 ? new Uint8Array(e2314, t2150) : new Uint8Array(e2314, t2150, r1713);
        Object.setPrototypeOf(n1318, Buffer2.prototype);
        return n1318;
    }
    function fromObject(e2414) {
        if (Buffer2.isBuffer(e2414)) {
            const t2217 = 0 | checked(e2414.length);
            const r1812 = createBuffer(t2217);
            if (0 === r1812.length) return r1812;
            e2414.copy(r1812, 0, 0, t2217);
            return r1812;
        }
        return void 0 !== e2414.length ? "number" !== typeof e2414.length || numberIsNaN(e2414.length) ? createBuffer(0) : fromArrayLike(e2414) : "Buffer" === e2414.type && Array.isArray(e2414.data) ? fromArrayLike(e2414.data) : void 0;
    }
    function checked(e2514) {
        if (e2514 >= 2147483647) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647..toString(16) + " bytes");
        return 0 | e2514;
    }
    function SlowBuffer(e2613) {
        +e2613 != e2613 && (e2613 = 0);
        return Buffer2.alloc(+e2613);
    }
    Buffer2.isBuffer = function isBuffer(e2712) {
        return null != e2712 && true === e2712._isBuffer && e2712 !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(e2812, t2316) {
        isInstance(e2812, Uint8Array) && (e2812 = Buffer2.from(e2812, e2812.offset, e2812.byteLength));
        isInstance(t2316, Uint8Array) && (t2316 = Buffer2.from(t2316, t2316.offset, t2316.byteLength));
        if (!Buffer2.isBuffer(e2812) || !Buffer2.isBuffer(t2316)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (e2812 === t2316) return 0;
        let r1911 = e2812.length;
        let n1418 = t2316.length;
        for(let i914 = 0, a714 = Math.min(r1911, n1418); i914 < a714; ++i914)if (e2812[i914] !== t2316[i914]) {
            r1911 = e2812[i914];
            n1418 = t2316[i914];
            break;
        }
        return r1911 < n1418 ? -1 : n1418 < r1911 ? 1 : 0;
    };
    Buffer2.isEncoding = function isEncoding(e2912) {
        switch(String(e2912).toLowerCase()){
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return true;
            default:
                return false;
        }
    };
    Buffer2.concat = function concat(e3011, t2414) {
        if (!Array.isArray(e3011)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === e3011.length) return Buffer2.alloc(0);
        let r207;
        if (void 0 === t2414) {
            t2414 = 0;
            for(r207 = 0; r207 < e3011.length; ++r207)t2414 += e3011[r207].length;
        }
        const n1517 = Buffer2.allocUnsafe(t2414);
        let i1013 = 0;
        for(r207 = 0; r207 < e3011.length; ++r207){
            let t2512 = e3011[r207];
            if (isInstance(t2512, Uint8Array)) if (i1013 + t2512.length > n1517.length) {
                Buffer2.isBuffer(t2512) || (t2512 = Buffer2.from(t2512));
                t2512.copy(n1517, i1013);
            } else Uint8Array.prototype.set.call(n1517, t2512, i1013);
            else {
                if (!Buffer2.isBuffer(t2512)) throw new TypeError('"list" argument must be an Array of Buffers');
                t2512.copy(n1517, i1013);
            }
            i1013 += t2512.length;
        }
        return n1517;
    };
    function byteLength(e3142, t2611) {
        if (Buffer2.isBuffer(e3142)) return e3142.length;
        if (ArrayBuffer.isView(e3142) || isInstance(e3142, ArrayBuffer)) return e3142.byteLength;
        if ("string" !== typeof e3142) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e3142);
        const r2116 = e3142.length;
        const n1616 = arguments.length > 2 && true === arguments[2];
        if (!n1616 && 0 === r2116) return 0;
        let i1121 = false;
        for(;;)switch(t2611){
            case "ascii":
            case "latin1":
            case "binary":
                return r2116;
            case "utf8":
            case "utf-8":
                return utf8ToBytes(e3142).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return 2 * r2116;
            case "hex":
                return r2116 >>> 1;
            case "base64":
                return base64ToBytes(e3142).length;
            default:
                if (i1121) return n1616 ? -1 : utf8ToBytes(e3142).length;
                t2611 = ("" + t2611).toLowerCase();
                i1121 = true;
        }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(e32, t2711, r2215) {
        let n1716 = false;
        (void 0 === t2711 || t2711 < 0) && (t2711 = 0);
        if (t2711 > this.length) return "";
        (void 0 === r2215 || r2215 > this.length) && (r2215 = this.length);
        if (r2215 <= 0) return "";
        r2215 >>>= 0;
        t2711 >>>= 0;
        if (r2215 <= t2711) return "";
        e32 || (e32 = "utf8");
        while(true)switch(e32){
            case "hex":
                return hexSlice(this, t2711, r2215);
            case "utf8":
            case "utf-8":
                return utf8Slice(this, t2711, r2215);
            case "ascii":
                return asciiSlice(this, t2711, r2215);
            case "latin1":
            case "binary":
                return latin1Slice(this, t2711, r2215);
            case "base64":
                return base64Slice(this, t2711, r2215);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return utf16leSlice(this, t2711, r2215);
            default:
                if (n1716) throw new TypeError("Unknown encoding: " + e32);
                e32 = (e32 + "").toLowerCase();
                n1716 = true;
        }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(e33, t2811, r2312) {
        const n1816 = e33[t2811];
        e33[t2811] = e33[r2312];
        e33[r2312] = n1816;
    }
    Buffer2.prototype.swap16 = function swap16() {
        const e34 = this.length;
        if (e34 % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for(let t2911 = 0; t2911 < e34; t2911 += 2)swap(this, t2911, t2911 + 1);
        return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
        const e35 = this.length;
        if (e35 % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for(let t3011 = 0; t3011 < e35; t3011 += 4){
            swap(this, t3011, t3011 + 3);
            swap(this, t3011 + 1, t3011 + 2);
        }
        return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
        const e36 = this.length;
        if (e36 % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for(let t3119 = 0; t3119 < e36; t3119 += 8){
            swap(this, t3119, t3119 + 7);
            swap(this, t3119 + 1, t3119 + 6);
            swap(this, t3119 + 2, t3119 + 5);
            swap(this, t3119 + 3, t3119 + 4);
        }
        return this;
    };
    Buffer2.prototype.toString = function toString() {
        const e37 = this.length;
        return 0 === e37 ? "" : 0 === arguments.length ? utf8Slice(this, 0, e37) : slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(e38) {
        if (!Buffer2.isBuffer(e38)) throw new TypeError("Argument must be a Buffer");
        return this === e38 || 0 === Buffer2.compare(this, e38);
    };
    Buffer2.prototype.inspect = function inspect() {
        let e39 = "";
        const t3210 = s37.INSPECT_MAX_BYTES;
        e39 = this.toString("hex", 0, t3210).replace(/(.{2})/g, "$1 ").trim();
        this.length > t3210 && (e39 += " ... ");
        return "<Buffer " + e39 + ">";
    };
    r922 && (Buffer2.prototype[r922] = Buffer2.prototype.inspect);
    Buffer2.prototype.compare = function compare(e41, t3310, r2411, n1915, i1213) {
        isInstance(e41, Uint8Array) && (e41 = Buffer2.from(e41, e41.offset, e41.byteLength));
        if (!Buffer2.isBuffer(e41)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e41);
        void 0 === t3310 && (t3310 = 0);
        void 0 === r2411 && (r2411 = e41 ? e41.length : 0);
        void 0 === n1915 && (n1915 = 0);
        void 0 === i1213 && (i1213 = this.length);
        if (t3310 < 0 || r2411 > e41.length || n1915 < 0 || i1213 > this.length) throw new RangeError("out of range index");
        if (n1915 >= i1213 && t3310 >= r2411) return 0;
        if (n1915 >= i1213) return -1;
        if (t3310 >= r2411) return 1;
        t3310 >>>= 0;
        r2411 >>>= 0;
        n1915 >>>= 0;
        i1213 >>>= 0;
        if (this === e41) return 0;
        let a87 = i1213 - n1915;
        let o716 = r2411 - t3310;
        const f73 = Math.min(a87, o716);
        const s518 = this.slice(n1915, i1213);
        const u417 = e41.slice(t3310, r2411);
        for(let e40 = 0; e40 < f73; ++e40)if (s518[e40] !== u417[e40]) {
            a87 = s518[e40];
            o716 = u417[e40];
            break;
        }
        return a87 < o716 ? -1 : o716 < a87 ? 1 : 0;
    };
    function bidirectionalIndexOf(e42, t3410, r256, n2015, i1313) {
        if (0 === e42.length) return -1;
        if ("string" === typeof r256) {
            n2015 = r256;
            r256 = 0;
        } else r256 > 2147483647 ? r256 = 2147483647 : r256 < -2147483648 && (r256 = -2147483648);
        r256 = +r256;
        numberIsNaN(r256) && (r256 = i1313 ? 0 : e42.length - 1);
        r256 < 0 && (r256 = e42.length + r256);
        if (r256 >= e42.length) {
            if (i1313) return -1;
            r256 = e42.length - 1;
        } else if (r256 < 0) {
            if (!i1313) return -1;
            r256 = 0;
        }
        "string" === typeof t3410 && (t3410 = Buffer2.from(t3410, n2015));
        if (Buffer2.isBuffer(t3410)) return 0 === t3410.length ? -1 : arrayIndexOf(e42, t3410, r256, n2015, i1313);
        if ("number" === typeof t3410) {
            t3410 &= 255;
            return "function" === typeof Uint8Array.prototype.indexOf ? i1313 ? Uint8Array.prototype.indexOf.call(e42, t3410, r256) : Uint8Array.prototype.lastIndexOf.call(e42, t3410, r256) : arrayIndexOf(e42, [
                t3410
            ], r256, n2015, i1313);
        }
        throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(e43, t3510, r265, n2139, i1413) {
        let a96 = 1;
        let o814 = e43.length;
        let f82 = t3510.length;
        if (void 0 !== n2139) {
            n2139 = String(n2139).toLowerCase();
            if ("ucs2" === n2139 || "ucs-2" === n2139 || "utf16le" === n2139 || "utf-16le" === n2139) {
                if (e43.length < 2 || t3510.length < 2) return -1;
                a96 = 2;
                o814 /= 2;
                f82 /= 2;
                r265 /= 2;
            }
        }
        function read(e44, t3610) {
            return 1 === a96 ? e44[t3610] : e44.readUInt16BE(t3610 * a96);
        }
        let s615;
        if (i1413) {
            let n2215 = -1;
            for(s615 = r265; s615 < o814; s615++)if (read(e43, s615) === read(t3510, -1 === n2215 ? 0 : s615 - n2215)) {
                -1 === n2215 && (n2215 = s615);
                if (s615 - n2215 + 1 === f82) return n2215 * a96;
            } else {
                -1 !== n2215 && (s615 -= s615 - n2215);
                n2215 = -1;
            }
        } else {
            r265 + f82 > o814 && (r265 = o814 - f82);
            for(s615 = r265; s615 >= 0; s615--){
                let r273 = true;
                for(let n2315 = 0; n2315 < f82; n2315++)if (read(e43, s615 + n2315) !== read(t3510, n2315)) {
                    r273 = false;
                    break;
                }
                if (r273) return s615;
            }
        }
        return -1;
    }
    Buffer2.prototype.includes = function includes(e45, t37, r283) {
        return -1 !== this.indexOf(e45, t37, r283);
    };
    Buffer2.prototype.indexOf = function indexOf(e46, t38, r292) {
        return bidirectionalIndexOf(this, e46, t38, r292, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(e47, t39, r302) {
        return bidirectionalIndexOf(this, e47, t39, r302, false);
    };
    function hexWrite(e48, t40, r3111, n2415) {
        r3111 = Number(r3111) || 0;
        const i1513 = e48.length - r3111;
        if (n2415) {
            n2415 = Number(n2415);
            n2415 > i1513 && (n2415 = i1513);
        } else n2415 = i1513;
        const a106 = t40.length;
        n2415 > a106 / 2 && (n2415 = a106 / 2);
        let o98;
        for(o98 = 0; o98 < n2415; ++o98){
            const n2514 = parseInt(t40.substr(2 * o98, 2), 16);
            if (numberIsNaN(n2514)) return o98;
            e48[r3111 + o98] = n2514;
        }
        return o98;
    }
    function utf8Write(e49, t41, r3211, n2614) {
        return blitBuffer(utf8ToBytes(t41, e49.length - r3211), e49, r3211, n2614);
    }
    function asciiWrite(e50, t42, r3311, n2714) {
        return blitBuffer(asciiToBytes(t42), e50, r3311, n2714);
    }
    function base64Write(e51, t43, r345, n2813) {
        return blitBuffer(base64ToBytes(t43), e51, r345, n2813);
    }
    function ucs2Write(e52, t44, r352, n2913) {
        return blitBuffer(utf16leToBytes(t44, e52.length - r352), e52, r352, n2913);
    }
    Buffer2.prototype.write = function write(e53, t45, r362, n3013) {
        if (void 0 === t45) {
            n3013 = "utf8";
            r362 = this.length;
            t45 = 0;
        } else if (void 0 === r362 && "string" === typeof t45) {
            n3013 = t45;
            r362 = this.length;
            t45 = 0;
        } else {
            if (!isFinite(t45)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            t45 >>>= 0;
            if (isFinite(r362)) {
                r362 >>>= 0;
                void 0 === n3013 && (n3013 = "utf8");
            } else {
                n3013 = r362;
                r362 = void 0;
            }
        }
        const i1613 = this.length - t45;
        (void 0 === r362 || r362 > i1613) && (r362 = i1613);
        if (e53.length > 0 && (r362 < 0 || t45 < 0) || t45 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        n3013 || (n3013 = "utf8");
        let a1115 = false;
        for(;;)switch(n3013){
            case "hex":
                return hexWrite(this, e53, t45, r362);
            case "utf8":
            case "utf-8":
                return utf8Write(this, e53, t45, r362);
            case "ascii":
            case "latin1":
            case "binary":
                return asciiWrite(this, e53, t45, r362);
            case "base64":
                return base64Write(this, e53, t45, r362);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return ucs2Write(this, e53, t45, r362);
            default:
                if (a1115) throw new TypeError("Unknown encoding: " + n3013);
                n3013 = ("" + n3013).toLowerCase();
                a1115 = true;
        }
    };
    Buffer2.prototype.toJSON = function toJSON() {
        return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
        };
    };
    function base64Slice(t46, r372, n3113) {
        return 0 === r372 && n3113 === t46.length ? e8116.fromByteArray(t46) : e8116.fromByteArray(t46.slice(r372, n3113));
    }
    function utf8Slice(e54, t47, r382) {
        r382 = Math.min(e54.length, r382);
        const n3312 = [];
        let i1713 = t47;
        while(i1713 < r382){
            const t48 = e54[i1713];
            let a1212 = null;
            let o107 = t48 > 239 ? 4 : t48 > 223 ? 3 : t48 > 191 ? 2 : 1;
            if (i1713 + o107 <= r382) {
                let r392, n3213, f92, s715;
                switch(o107){
                    case 1:
                        t48 < 128 && (a1212 = t48);
                        break;
                    case 2:
                        r392 = e54[i1713 + 1];
                        if (128 === (192 & r392)) {
                            s715 = (31 & t48) << 6 | 63 & r392;
                            s715 > 127 && (a1212 = s715);
                        }
                        break;
                    case 3:
                        r392 = e54[i1713 + 1];
                        n3213 = e54[i1713 + 2];
                        if (128 === (192 & r392) && 128 === (192 & n3213)) {
                            s715 = (15 & t48) << 12 | (63 & r392) << 6 | 63 & n3213;
                            s715 > 2047 && (s715 < 55296 || s715 > 57343) && (a1212 = s715);
                        }
                        break;
                    case 4:
                        r392 = e54[i1713 + 1];
                        n3213 = e54[i1713 + 2];
                        f92 = e54[i1713 + 3];
                        if (128 === (192 & r392) && 128 === (192 & n3213) && 128 === (192 & f92)) {
                            s715 = (15 & t48) << 18 | (63 & r392) << 12 | (63 & n3213) << 6 | 63 & f92;
                            s715 > 65535 && s715 < 1114112 && (a1212 = s715);
                        }
                }
            }
            if (null === a1212) {
                a1212 = 65533;
                o107 = 1;
            } else if (a1212 > 65535) {
                a1212 -= 65536;
                n3312.push(a1212 >>> 10 & 1023 | 55296);
                a1212 = 56320 | 1023 & a1212;
            }
            n3312.push(a1212);
            i1713 += o107;
        }
        return decodeCodePointsArray(n3312);
    }
    const i615 = 4096;
    function decodeCodePointsArray(e55) {
        const t49 = e55.length;
        if (t49 <= 4096) return String.fromCharCode.apply(String, e55);
        let r402 = "";
        let n348 = 0;
        while(n348 < t49)r402 += String.fromCharCode.apply(String, e55.slice(n348, n348 += i615));
        return r402;
    }
    function asciiSlice(e56, t50, r4111) {
        let n354 = "";
        r4111 = Math.min(e56.length, r4111);
        for(let i1813 = t50; i1813 < r4111; ++i1813)n354 += String.fromCharCode(127 & e56[i1813]);
        return n354;
    }
    function latin1Slice(e57, t51, r4211) {
        let n363 = "";
        r4211 = Math.min(e57.length, r4211);
        for(let i1913 = t51; i1913 < r4211; ++i1913)n363 += String.fromCharCode(e57[i1913]);
        return n363;
    }
    function hexSlice(e58, t52, r439) {
        const n383 = e58.length;
        (!t52 || t52 < 0) && (t52 = 0);
        (!r439 || r439 < 0 || r439 > n383) && (r439 = n383);
        let i2012 = "";
        for(let n373 = t52; n373 < r439; ++n373)i2012 += f67[e58[n373]];
        return i2012;
    }
    function utf16leSlice(e60, t53, r442) {
        const n393 = e60.slice(t53, r442);
        let i2112 = "";
        for(let e59 = 0; e59 < n393.length - 1; e59 += 2)i2112 += String.fromCharCode(n393[e59] + 256 * n393[e59 + 1]);
        return i2112;
    }
    Buffer2.prototype.slice = function slice(e61, t54) {
        const r452 = this.length;
        e61 = ~~e61;
        t54 = void 0 === t54 ? r452 : ~~t54;
        if (e61 < 0) {
            e61 += r452;
            e61 < 0 && (e61 = 0);
        } else e61 > r452 && (e61 = r452);
        if (t54 < 0) {
            t54 += r452;
            t54 < 0 && (t54 = 0);
        } else t54 > r452 && (t54 = r452);
        t54 < e61 && (t54 = e61);
        const n403 = this.subarray(e61, t54);
        Object.setPrototypeOf(n403, Buffer2.prototype);
        return n403;
    };
    function checkOffset(e62, t55, r462) {
        if (e62 % 1 !== 0 || e62 < 0) throw new RangeError("offset is not uint");
        if (e62 + t55 > r462) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(e63, t56, r471) {
        e63 >>>= 0;
        t56 >>>= 0;
        r471 || checkOffset(e63, t56, this.length);
        let n4112 = this[e63];
        let i2212 = 1;
        let a1311 = 0;
        while(++a1311 < t56 && (i2212 *= 256))n4112 += this[e63 + a1311] * i2212;
        return n4112;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(e64, t57, r481) {
        e64 >>>= 0;
        t57 >>>= 0;
        r481 || checkOffset(e64, t57, this.length);
        let n4211 = this[e64 + --t57];
        let i2312 = 1;
        while(t57 > 0 && (i2312 *= 256))n4211 += this[e64 + --t57] * i2312;
        return n4211;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(e65, t58) {
        e65 >>>= 0;
        t58 || checkOffset(e65, 1, this.length);
        return this[e65];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(e66, t59) {
        e66 >>>= 0;
        t59 || checkOffset(e66, 2, this.length);
        return this[e66] | this[e66 + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(e67, t60) {
        e67 >>>= 0;
        t60 || checkOffset(e67, 2, this.length);
        return this[e67] << 8 | this[e67 + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(e68, t61) {
        e68 >>>= 0;
        t61 || checkOffset(e68, 4, this.length);
        return (this[e68] | this[e68 + 1] << 8 | this[e68 + 2] << 16) + 16777216 * this[e68 + 3];
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(e69, t62) {
        e69 >>>= 0;
        t62 || checkOffset(e69, 4, this.length);
        return 16777216 * this[e69] + (this[e69 + 1] << 16 | this[e69 + 2] << 8 | this[e69 + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(e70) {
        e70 >>>= 0;
        validateNumber(e70, "offset");
        const t63 = this[e70];
        const r491 = this[e70 + 7];
        void 0 !== t63 && void 0 !== r491 || boundsError(e70, this.length - 8);
        const n4311 = t63 + 256 * this[++e70] + 65536 * this[++e70] + this[++e70] * 2 ** 24;
        const i2411 = this[++e70] + 256 * this[++e70] + 65536 * this[++e70] + r491 * 2 ** 24;
        return BigInt(n4311) + (BigInt(i2411) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(e71) {
        e71 >>>= 0;
        validateNumber(e71, "offset");
        const t64 = this[e71];
        const r501 = this[e71 + 7];
        void 0 !== t64 && void 0 !== r501 || boundsError(e71, this.length - 8);
        const n442 = t64 * 2 ** 24 + 65536 * this[++e71] + 256 * this[++e71] + this[++e71];
        const i2510 = this[++e71] * 2 ** 24 + 65536 * this[++e71] + 256 * this[++e71] + r501;
        return (BigInt(n442) << BigInt(32)) + BigInt(i2510);
    });
    Buffer2.prototype.readIntLE = function readIntLE(e72, t65, r51) {
        e72 >>>= 0;
        t65 >>>= 0;
        r51 || checkOffset(e72, t65, this.length);
        let n45 = this[e72];
        let i262 = 1;
        let a1410 = 0;
        while(++a1410 < t65 && (i262 *= 256))n45 += this[e72 + a1410] * i262;
        i262 *= 128;
        n45 >= i262 && (n45 -= Math.pow(2, 8 * t65));
        return n45;
    };
    Buffer2.prototype.readIntBE = function readIntBE(e73, t66, r52) {
        e73 >>>= 0;
        t66 >>>= 0;
        r52 || checkOffset(e73, t66, this.length);
        let n46 = t66;
        let i272 = 1;
        let a155 = this[e73 + --n46];
        while(n46 > 0 && (i272 *= 256))a155 += this[e73 + --n46] * i272;
        i272 *= 128;
        a155 >= i272 && (a155 -= Math.pow(2, 8 * t66));
        return a155;
    };
    Buffer2.prototype.readInt8 = function readInt8(e74, t67) {
        e74 >>>= 0;
        t67 || checkOffset(e74, 1, this.length);
        return 128 & this[e74] ? -1 * (255 - this[e74] + 1) : this[e74];
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(e75, t68) {
        e75 >>>= 0;
        t68 || checkOffset(e75, 2, this.length);
        const r53 = this[e75] | this[e75 + 1] << 8;
        return 32768 & r53 ? 4294901760 | r53 : r53;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(e76, t69) {
        e76 >>>= 0;
        t69 || checkOffset(e76, 2, this.length);
        const r54 = this[e76 + 1] | this[e76] << 8;
        return 32768 & r54 ? 4294901760 | r54 : r54;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(e77, t70) {
        e77 >>>= 0;
        t70 || checkOffset(e77, 4, this.length);
        return this[e77] | this[e77 + 1] << 8 | this[e77 + 2] << 16 | this[e77 + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(e78, t71) {
        e78 >>>= 0;
        t71 || checkOffset(e78, 4, this.length);
        return this[e78] << 24 | this[e78 + 1] << 16 | this[e78 + 2] << 8 | this[e78 + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(e79) {
        e79 >>>= 0;
        validateNumber(e79, "offset");
        const t72 = this[e79];
        const r55 = this[e79 + 7];
        void 0 !== t72 && void 0 !== r55 || boundsError(e79, this.length - 8);
        const n47 = this[e79 + 4] + 256 * this[e79 + 5] + 65536 * this[e79 + 6] + (r55 << 24);
        return (BigInt(n47) << BigInt(32)) + BigInt(t72 + 256 * this[++e79] + 65536 * this[++e79] + this[++e79] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(e80) {
        e80 >>>= 0;
        validateNumber(e80, "offset");
        const t73 = this[e80];
        const r56 = this[e80 + 7];
        void 0 !== t73 && void 0 !== r56 || boundsError(e80, this.length - 8);
        const n48 = (t73 << 24) + 65536 * this[++e80] + 256 * this[++e80] + this[++e80];
        return (BigInt(n48) << BigInt(32)) + BigInt(this[++e80] * 2 ** 24 + 65536 * this[++e80] + 256 * this[++e80] + r56);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(e81, r57) {
        e81 >>>= 0;
        r57 || checkOffset(e81, 4, this.length);
        return t1028.read(this, e81, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(e82, r58) {
        e82 >>>= 0;
        r58 || checkOffset(e82, 4, this.length);
        return t1028.read(this, e82, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(e83, r59) {
        e83 >>>= 0;
        r59 || checkOffset(e83, 8, this.length);
        return t1028.read(this, e83, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(e84, r60) {
        e84 >>>= 0;
        r60 || checkOffset(e84, 8, this.length);
        return t1028.read(this, e84, false, 52, 8);
    };
    function checkInt(e85, t74, r61, n49, i282, a163) {
        if (!Buffer2.isBuffer(e85)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (t74 > i282 || t74 < a163) throw new RangeError('"value" argument is out of bounds');
        if (r61 + n49 > e85.length) throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(e86, t75, r62, n50) {
        e86 = +e86;
        t75 >>>= 0;
        r62 >>>= 0;
        if (!n50) {
            const n51 = Math.pow(2, 8 * r62) - 1;
            checkInt(this, e86, t75, r62, n51, 0);
        }
        let i292 = 1;
        let a172 = 0;
        this[t75] = 255 & e86;
        while(++a172 < r62 && (i292 *= 256))this[t75 + a172] = e86 / i292 & 255;
        return t75 + r62;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(e87, t76, r63, n52) {
        e87 = +e87;
        t76 >>>= 0;
        r63 >>>= 0;
        if (!n52) {
            const n53 = Math.pow(2, 8 * r63) - 1;
            checkInt(this, e87, t76, r63, n53, 0);
        }
        let i302 = r63 - 1;
        let a182 = 1;
        this[t76 + i302] = 255 & e87;
        while(--i302 >= 0 && (a182 *= 256))this[t76 + i302] = e87 / a182 & 255;
        return t76 + r63;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(e88, t77, r64) {
        e88 = +e88;
        t77 >>>= 0;
        r64 || checkInt(this, e88, t77, 1, 255, 0);
        this[t77] = 255 & e88;
        return t77 + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(e89, t78, r65) {
        e89 = +e89;
        t78 >>>= 0;
        r65 || checkInt(this, e89, t78, 2, 65535, 0);
        this[t78] = 255 & e89;
        this[t78 + 1] = e89 >>> 8;
        return t78 + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(e90, t79, r66) {
        e90 = +e90;
        t79 >>>= 0;
        r66 || checkInt(this, e90, t79, 2, 65535, 0);
        this[t79] = e90 >>> 8;
        this[t79 + 1] = 255 & e90;
        return t79 + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(e91, t80, r67) {
        e91 = +e91;
        t80 >>>= 0;
        r67 || checkInt(this, e91, t80, 4, 4294967295, 0);
        this[t80 + 3] = e91 >>> 24;
        this[t80 + 2] = e91 >>> 16;
        this[t80 + 1] = e91 >>> 8;
        this[t80] = 255 & e91;
        return t80 + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(e92, t81, r68) {
        e92 = +e92;
        t81 >>>= 0;
        r68 || checkInt(this, e92, t81, 4, 4294967295, 0);
        this[t81] = e92 >>> 24;
        this[t81 + 1] = e92 >>> 16;
        this[t81 + 2] = e92 >>> 8;
        this[t81 + 3] = 255 & e92;
        return t81 + 4;
    };
    function wrtBigUInt64LE(e93, t82, r69, n54, i3111) {
        checkIntBI(t82, n54, i3111, e93, r69, 7);
        let a192 = Number(t82 & BigInt(4294967295));
        e93[r69++] = a192;
        a192 >>= 8;
        e93[r69++] = a192;
        a192 >>= 8;
        e93[r69++] = a192;
        a192 >>= 8;
        e93[r69++] = a192;
        let o1116 = Number(t82 >> BigInt(32) & BigInt(4294967295));
        e93[r69++] = o1116;
        o1116 >>= 8;
        e93[r69++] = o1116;
        o1116 >>= 8;
        e93[r69++] = o1116;
        o1116 >>= 8;
        e93[r69++] = o1116;
        return r69;
    }
    function wrtBigUInt64BE(e94, t83, r70, n55, i329) {
        checkIntBI(t83, n55, i329, e94, r70, 7);
        let a202 = Number(t83 & BigInt(4294967295));
        e94[r70 + 7] = a202;
        a202 >>= 8;
        e94[r70 + 6] = a202;
        a202 >>= 8;
        e94[r70 + 5] = a202;
        a202 >>= 8;
        e94[r70 + 4] = a202;
        let o1215 = Number(t83 >> BigInt(32) & BigInt(4294967295));
        e94[r70 + 3] = o1215;
        o1215 >>= 8;
        e94[r70 + 2] = o1215;
        o1215 >>= 8;
        e94[r70 + 1] = o1215;
        o1215 >>= 8;
        e94[r70] = o1215;
        return r70 + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(e95, t84 = 0) {
        return wrtBigUInt64LE(this, e95, t84, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(e96, t85 = 0) {
        return wrtBigUInt64BE(this, e96, t85, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(e97, t86, r71, n56) {
        e97 = +e97;
        t86 >>>= 0;
        if (!n56) {
            const n57 = Math.pow(2, 8 * r71 - 1);
            checkInt(this, e97, t86, r71, n57 - 1, -n57);
        }
        let i332 = 0;
        let a2110 = 1;
        let o1314 = 0;
        this[t86] = 255 & e97;
        while(++i332 < r71 && (a2110 *= 256)){
            e97 < 0 && 0 === o1314 && 0 !== this[t86 + i332 - 1] && (o1314 = 1);
            this[t86 + i332] = (e97 / a2110 >> 0) - o1314 & 255;
        }
        return t86 + r71;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(e98, t87, r72, n58) {
        e98 = +e98;
        t87 >>>= 0;
        if (!n58) {
            const n59 = Math.pow(2, 8 * r72 - 1);
            checkInt(this, e98, t87, r72, n59 - 1, -n59);
        }
        let i342 = r72 - 1;
        let a2210 = 1;
        let o14 = 0;
        this[t87 + i342] = 255 & e98;
        while(--i342 >= 0 && (a2210 *= 256)){
            e98 < 0 && 0 === o14 && 0 !== this[t87 + i342 + 1] && (o14 = 1);
            this[t87 + i342] = (e98 / a2210 >> 0) - o14 & 255;
        }
        return t87 + r72;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(e99, t88, r73) {
        e99 = +e99;
        t88 >>>= 0;
        r73 || checkInt(this, e99, t88, 1, 127, -128);
        e99 < 0 && (e99 = 255 + e99 + 1);
        this[t88] = 255 & e99;
        return t88 + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(e100, t89, r74) {
        e100 = +e100;
        t89 >>>= 0;
        r74 || checkInt(this, e100, t89, 2, 32767, -32768);
        this[t89] = 255 & e100;
        this[t89 + 1] = e100 >>> 8;
        return t89 + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(e101, t90, r75) {
        e101 = +e101;
        t90 >>>= 0;
        r75 || checkInt(this, e101, t90, 2, 32767, -32768);
        this[t90] = e101 >>> 8;
        this[t90 + 1] = 255 & e101;
        return t90 + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(e102, t91, r76) {
        e102 = +e102;
        t91 >>>= 0;
        r76 || checkInt(this, e102, t91, 4, 2147483647, -2147483648);
        this[t91] = 255 & e102;
        this[t91 + 1] = e102 >>> 8;
        this[t91 + 2] = e102 >>> 16;
        this[t91 + 3] = e102 >>> 24;
        return t91 + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(e103, t92, r77) {
        e103 = +e103;
        t92 >>>= 0;
        r77 || checkInt(this, e103, t92, 4, 2147483647, -2147483648);
        e103 < 0 && (e103 = 4294967295 + e103 + 1);
        this[t92] = e103 >>> 24;
        this[t92 + 1] = e103 >>> 16;
        this[t92 + 2] = e103 >>> 8;
        this[t92 + 3] = 255 & e103;
        return t92 + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(e104, t93 = 0) {
        return wrtBigUInt64LE(this, e104, t93, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(e105, t94 = 0) {
        return wrtBigUInt64BE(this, e105, t94, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(e106, t, r78, n60, i, a) {
        if (r78 + n60 > e106.length) throw new RangeError("Index out of range");
        if (r78 < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(e107, r79, n61, i351, a231) {
        r79 = +r79;
        n61 >>>= 0;
        a231 || checkIEEE754(e107, r79, n61, 4);
        t1028.write(e107, r79, n61, i351, 23, 4);
        return n61 + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(e108, t95, r80) {
        return writeFloat(this, e108, t95, true, r80);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(e109, t96, r81) {
        return writeFloat(this, e109, t96, false, r81);
    };
    function writeDouble(e110, r82, n62, i36, a241) {
        r82 = +r82;
        n62 >>>= 0;
        a241 || checkIEEE754(e110, r82, n62, 8);
        t1028.write(e110, r82, n62, i36, 52, 8);
        return n62 + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(e111, t97, r83) {
        return writeDouble(this, e111, t97, true, r83);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(e112, t98, r84) {
        return writeDouble(this, e112, t98, false, r84);
    };
    Buffer2.prototype.copy = function copy(e1135, t99, r85, n63) {
        if (!Buffer2.isBuffer(e1135)) throw new TypeError("argument should be a Buffer");
        r85 || (r85 = 0);
        n63 || 0 === n63 || (n63 = this.length);
        t99 >= e1135.length && (t99 = e1135.length);
        t99 || (t99 = 0);
        n63 > 0 && n63 < r85 && (n63 = r85);
        if (n63 === r85) return 0;
        if (0 === e1135.length || 0 === this.length) return 0;
        if (t99 < 0) throw new RangeError("targetStart out of bounds");
        if (r85 < 0 || r85 >= this.length) throw new RangeError("Index out of range");
        if (n63 < 0) throw new RangeError("sourceEnd out of bounds");
        n63 > this.length && (n63 = this.length);
        e1135.length - t99 < n63 - r85 && (n63 = e1135.length - t99 + r85);
        const i37 = n63 - r85;
        this === e1135 && "function" === typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t99, r85, n63) : Uint8Array.prototype.set.call(e1135, this.subarray(r85, n63), t99);
        return i37;
    };
    Buffer2.prototype.fill = function fill(e114, t100, r86, n64) {
        if ("string" === typeof e114) {
            if ("string" === typeof t100) {
                n64 = t100;
                t100 = 0;
                r86 = this.length;
            } else if ("string" === typeof r86) {
                n64 = r86;
                r86 = this.length;
            }
            if (void 0 !== n64 && "string" !== typeof n64) throw new TypeError("encoding must be a string");
            if ("string" === typeof n64 && !Buffer2.isEncoding(n64)) throw new TypeError("Unknown encoding: " + n64);
            if (1 === e114.length) {
                const t101 = e114.charCodeAt(0);
                ("utf8" === n64 && t101 < 128 || "latin1" === n64) && (e114 = t101);
            }
        } else "number" === typeof e114 ? e114 &= 255 : "boolean" === typeof e114 && (e114 = Number(e114));
        if (t100 < 0 || this.length < t100 || this.length < r86) throw new RangeError("Out of range index");
        if (r86 <= t100) return this;
        t100 >>>= 0;
        r86 = void 0 === r86 ? this.length : r86 >>> 0;
        e114 || (e114 = 0);
        let i38;
        if ("number" === typeof e114) for(i38 = t100; i38 < r86; ++i38)this[i38] = e114;
        else {
            const a251 = Buffer2.isBuffer(e114) ? e114 : Buffer2.from(e114, n64);
            const o156 = a251.length;
            if (0 === o156) throw new TypeError('The value "' + e114 + '" is invalid for argument "value"');
            for(i38 = 0; i38 < r86 - t100; ++i38)this[i38 + t100] = a251[i38 % o156];
        }
        return this;
    };
    const a614 = {};
    function E52(e115, t102, r87) {
        a614[e115] = class NodeError extends r87 {
            constructor(){
                super();
                Object.defineProperty(this, "message", {
                    value: t102.apply(this, arguments),
                    writable: true,
                    configurable: true
                });
                this.name = `${this.name} [${e115}]`;
                this.stack;
                delete this.name;
            }
            get code() {
                return e115;
            }
            set code(e116) {
                Object.defineProperty(this, "code", {
                    configurable: true,
                    enumerable: true,
                    value: e116,
                    writable: true
                });
            }
            toString() {
                return `${this.name} [${e115}]: ${this.message}`;
            }
        };
    }
    E52("ERR_BUFFER_OUT_OF_BOUNDS", function(e117) {
        return e117 ? `${e117} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    E52("ERR_INVALID_ARG_TYPE", function(e118, t103) {
        return `The "${e118}" argument must be of type number. Received type ${typeof t103}`;
    }, TypeError);
    E52("ERR_OUT_OF_RANGE", function(e119, t104, r88) {
        let n65 = `The value of "${e119}" is out of range.`;
        let i39 = r88;
        if (Number.isInteger(r88) && Math.abs(r88) > 2 ** 32) i39 = addNumericalSeparator(String(r88));
        else if ("bigint" === typeof r88) {
            i39 = String(r88);
            (r88 > BigInt(2) ** BigInt(32) || r88 < -(BigInt(2) ** BigInt(32))) && (i39 = addNumericalSeparator(i39));
            i39 += "n";
        }
        n65 += ` It must be ${t104}. Received ${i39}`;
        return n65;
    }, RangeError);
    function addNumericalSeparator(e120) {
        let t105 = "";
        let r89 = e120.length;
        const n66 = "-" === e120[0] ? 1 : 0;
        for(; r89 >= n66 + 4; r89 -= 3)t105 = `_${e120.slice(r89 - 3, r89)}${t105}`;
        return `${e120.slice(0, r89)}${t105}`;
    }
    function checkBounds(e121, t106, r90) {
        validateNumber(t106, "offset");
        void 0 !== e121[t106] && void 0 !== e121[t106 + r90] || boundsError(t106, e121.length - (r90 + 1));
    }
    function checkIntBI(e122, t107, r91, n68, i41, o166) {
        if (e122 > r91 || e122 < t107) {
            const n67 = "bigint" === typeof t107 ? "n" : "";
            let i40;
            i40 = o166 > 3 ? 0 === t107 || t107 === BigInt(0) ? `>= 0${n67} and < 2${n67} ** ${8 * (o166 + 1)}${n67}` : `>= -(2${n67} ** ${8 * (o166 + 1) - 1}${n67}) and < 2 ** ${8 * (o166 + 1) - 1}${n67}` : `>= ${t107}${n67} and <= ${r91}${n67}`;
            throw new a614.ERR_OUT_OF_RANGE("value", i40, e122);
        }
        checkBounds(n68, i41, o166);
    }
    function validateNumber(e123, t108) {
        if ("number" !== typeof e123) throw new a614.ERR_INVALID_ARG_TYPE(t108, "number", e123);
    }
    function boundsError(e124, t109, r92) {
        if (Math.floor(e124) !== e124) {
            validateNumber(e124, r92);
            throw new a614.ERR_OUT_OF_RANGE(r92 || "offset", "an integer", e124);
        }
        if (t109 < 0) throw new a614.ERR_BUFFER_OUT_OF_BOUNDS;
        throw new a614.ERR_OUT_OF_RANGE(r92 || "offset", `>= ${r92 ? 1 : 0} and <= ${t109}`, e124);
    }
    const o617 = /[^+/0-9A-Za-z-_]/g;
    function base64clean(e125) {
        e125 = e125.split("=")[0];
        e125 = e125.trim().replace(o617, "");
        if (e125.length < 2) return "";
        while(e125.length % 4 !== 0)e125 += "=";
        return e125;
    }
    function utf8ToBytes(e126, t110) {
        t110 = t110 || Infinity;
        let r93;
        const n69 = e126.length;
        let i42 = null;
        const a261 = [];
        for(let o175 = 0; o175 < n69; ++o175){
            r93 = e126.charCodeAt(o175);
            if (r93 > 55295 && r93 < 57344) {
                if (!i42) {
                    if (r93 > 56319) {
                        (t110 -= 3) > -1 && a261.push(239, 191, 189);
                        continue;
                    }
                    if (o175 + 1 === n69) {
                        (t110 -= 3) > -1 && a261.push(239, 191, 189);
                        continue;
                    }
                    i42 = r93;
                    continue;
                }
                if (r93 < 56320) {
                    (t110 -= 3) > -1 && a261.push(239, 191, 189);
                    i42 = r93;
                    continue;
                }
                r93 = 65536 + (i42 - 55296 << 10 | r93 - 56320);
            } else i42 && (t110 -= 3) > -1 && a261.push(239, 191, 189);
            i42 = null;
            if (r93 < 128) {
                if ((t110 -= 1) < 0) break;
                a261.push(r93);
            } else if (r93 < 2048) {
                if ((t110 -= 2) < 0) break;
                a261.push(r93 >> 6 | 192, 63 & r93 | 128);
            } else if (r93 < 65536) {
                if ((t110 -= 3) < 0) break;
                a261.push(r93 >> 12 | 224, r93 >> 6 & 63 | 128, 63 & r93 | 128);
            } else {
                if (!(r93 < 1114112)) throw new Error("Invalid code point");
                if ((t110 -= 4) < 0) break;
                a261.push(r93 >> 18 | 240, r93 >> 12 & 63 | 128, r93 >> 6 & 63 | 128, 63 & r93 | 128);
            }
        }
        return a261;
    }
    function asciiToBytes(e127) {
        const t111 = [];
        for(let r94 = 0; r94 < e127.length; ++r94)t111.push(255 & e127.charCodeAt(r94));
        return t111;
    }
    function utf16leToBytes(e128, t112) {
        let r95, n70, i43;
        const a271 = [];
        for(let o185 = 0; o185 < e128.length; ++o185){
            if ((t112 -= 2) < 0) break;
            r95 = e128.charCodeAt(o185);
            n70 = r95 >> 8;
            i43 = r95 % 256;
            a271.push(i43);
            a271.push(n70);
        }
        return a271;
    }
    function base64ToBytes(t113) {
        return e8116.toByteArray(base64clean(t113));
    }
    function blitBuffer(e129, t114, r96, n71) {
        let i44;
        for(i44 = 0; i44 < n71; ++i44){
            if (i44 + r96 >= t114.length || i44 >= e129.length) break;
            t114[i44 + r96] = e129[i44];
        }
        return i44;
    }
    function isInstance(e130, t115) {
        return e130 instanceof t115 || null != e130 && null != e130.constructor && null != e130.constructor.name && e130.constructor.name === t115.name;
    }
    function numberIsNaN(e131) {
        return e131 !== e131;
    }
    const f67 = function() {
        const e132 = "0123456789abcdef";
        const t116 = new Array(256);
        for(let r97 = 0; r97 < 16; ++r97){
            const n72 = 16 * r97;
            for(let i45 = 0; i45 < 16; ++i45)t116[n72 + i45] = e132[r97] + e132[i45];
        }
        return t116;
    }();
    function defineBigIntMethod(e133) {
        return "undefined" === typeof BigInt ? BufferBigIntNotDefined : e133;
    }
    function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
    }
    return s37;
}
var l33 = dew$g2();
l33.Buffer;
l33.INSPECT_MAX_BYTES;
l33.kMaxLength;
var h22 = {}, c34 = false;
function dew$f2() {
    if (c34) return h22;
    c34 = true;
    h22 = "function" === typeof Object.create ? function inherits(e134, t117) {
        if (t117) {
            e134.super_ = t117;
            e134.prototype = Object.create(t117.prototype, {
                constructor: {
                    value: e134,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        }
    } : function inherits(e135, t118) {
        if (t118) {
            e135.super_ = t118;
            var TempCtor = function() {};
            TempCtor.prototype = t118.prototype;
            e135.prototype = new TempCtor;
            e135.prototype.constructor = e135;
        }
    };
    return h22;
}
var d25 = {}, p28 = false;
function dew$e2() {
    if (p28) return d25;
    p28 = true;
    d25 = y16.EventEmitter;
    return d25;
}
var b21 = {}, g22 = false;
function dew$d3() {
    if (g22) return b21;
    g22 = true;
    function ownKeys(e137, t119) {
        var r99 = Object.keys(e137);
        if (Object.getOwnPropertySymbols) {
            var n74 = Object.getOwnPropertySymbols(e137);
            t119 && (n74 = n74.filter(function(t120) {
                return Object.getOwnPropertyDescriptor(e137, t120).enumerable;
            }));
            r99.push.apply(r99, n74);
        }
        return r99;
    }
    function _objectSpread(e138) {
        for(var t121 = 1; t121 < arguments.length; t121++){
            var r100 = null != arguments[t121] ? arguments[t121] : {};
            t121 % 2 ? ownKeys(Object(r100), true).forEach(function(t122) {
                _defineProperty(e138, t122, r100[t122]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e138, Object.getOwnPropertyDescriptors(r100)) : ownKeys(Object(r100)).forEach(function(t123) {
                Object.defineProperty(e138, t123, Object.getOwnPropertyDescriptor(r100, t123));
            });
        }
        return e138;
    }
    function _defineProperty(e139, t124, r101) {
        t124 in e139 ? Object.defineProperty(e139, t124, {
            value: r101,
            enumerable: true,
            configurable: true,
            writable: true
        }) : e139[t124] = r101;
        return e139;
    }
    function _classCallCheck(e140, t125) {
        if (!(e140 instanceof t125)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(e141, t126) {
        for(var r102 = 0; r102 < t126.length; r102++){
            var n75 = t126[r102];
            n75.enumerable = n75.enumerable || false;
            n75.configurable = true;
            "value" in n75 && (n75.writable = true);
            Object.defineProperty(e141, n75.key, n75);
        }
    }
    function _createClass(e142, t127, r103) {
        t127 && _defineProperties(e142.prototype, t127);
        r103 && _defineProperties(e142, r103);
        return e142;
    }
    var e136 = l33, r98 = e136.Buffer;
    var n73 = xe4, i46 = n73.inspect;
    var a281 = i46 && i46.custom || "inspect";
    function copyBuffer(e143, t128, n76) {
        r98.prototype.copy.call(e143, t128, n76);
    }
    b21 = function() {
        function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
        }
        _createClass(BufferList, [
            {
                key: "push",
                value: function push(e144) {
                    var t129 = {
                        data: e144,
                        next: null
                    };
                    this.length > 0 ? this.tail.next = t129 : this.head = t129;
                    this.tail = t129;
                    ++this.length;
                }
            },
            {
                key: "unshift",
                value: function unshift(e145) {
                    var t130 = {
                        data: e145,
                        next: this.head
                    };
                    0 === this.length && (this.tail = t130);
                    this.head = t130;
                    ++this.length;
                }
            },
            {
                key: "shift",
                value: function shift() {
                    if (0 !== this.length) {
                        var e146 = this.head.data;
                        1 === this.length ? this.head = this.tail = null : this.head = this.head.next;
                        --this.length;
                        return e146;
                    }
                }
            },
            {
                key: "clear",
                value: function clear() {
                    this.head = this.tail = null;
                    this.length = 0;
                }
            },
            {
                key: "join",
                value: function join(e147) {
                    if (0 === this.length) return "";
                    var t131 = this.head;
                    var r104 = "" + t131.data;
                    while(t131 = t131.next)r104 += e147 + t131.data;
                    return r104;
                }
            },
            {
                key: "concat",
                value: function concat(e148) {
                    if (0 === this.length) return r98.alloc(0);
                    var t132 = r98.allocUnsafe(e148 >>> 0);
                    var n77 = this.head;
                    var i47 = 0;
                    while(n77){
                        copyBuffer(n77.data, t132, i47);
                        i47 += n77.data.length;
                        n77 = n77.next;
                    }
                    return t132;
                }
            },
            {
                key: "consume",
                value: function consume(e149, t133) {
                    var r105;
                    if (e149 < this.head.data.length) {
                        r105 = this.head.data.slice(0, e149);
                        this.head.data = this.head.data.slice(e149);
                    } else r105 = e149 === this.head.data.length ? this.shift() : t133 ? this._getString(e149) : this._getBuffer(e149);
                    return r105;
                }
            },
            {
                key: "first",
                value: function first() {
                    return this.head.data;
                }
            },
            {
                key: "_getString",
                value: function _getString(e150) {
                    var t134 = this.head;
                    var r106 = 1;
                    var n78 = t134.data;
                    e150 -= n78.length;
                    while(t134 = t134.next){
                        var i48 = t134.data;
                        var a291 = e150 > i48.length ? i48.length : e150;
                        a291 === i48.length ? n78 += i48 : n78 += i48.slice(0, e150);
                        e150 -= a291;
                        if (0 === e150) {
                            if (a291 === i48.length) {
                                ++r106;
                                t134.next ? this.head = t134.next : this.head = this.tail = null;
                            } else {
                                this.head = t134;
                                t134.data = i48.slice(a291);
                            }
                            break;
                        }
                        ++r106;
                    }
                    this.length -= r106;
                    return n78;
                }
            },
            {
                key: "_getBuffer",
                value: function _getBuffer(e151) {
                    var t135 = r98.allocUnsafe(e151);
                    var n79 = this.head;
                    var i49 = 1;
                    n79.data.copy(t135);
                    e151 -= n79.data.length;
                    while(n79 = n79.next){
                        var a301 = n79.data;
                        var o195 = e151 > a301.length ? a301.length : e151;
                        a301.copy(t135, t135.length - e151, 0, o195);
                        e151 -= o195;
                        if (0 === e151) {
                            if (o195 === a301.length) {
                                ++i49;
                                n79.next ? this.head = n79.next : this.head = this.tail = null;
                            } else {
                                this.head = n79;
                                n79.data = a301.slice(o195);
                            }
                            break;
                        }
                        ++i49;
                    }
                    this.length -= i49;
                    return t135;
                }
            },
            {
                key: a281,
                value: function value(e, t136) {
                    return i46(this, _objectSpread({}, t136, {
                        depth: 0,
                        customInspect: false
                    }));
                }
            }
        ]);
        return BufferList;
    }();
    return b21;
}
var y18 = {}, w17 = false;
function dew$c3() {
    if (w17) return y18;
    w17 = true;
    var e152 = r35;
    function destroy(t137, r107) {
        var n80 = this;
        var i50 = this._readableState && this._readableState.destroyed;
        var a3110 = this._writableState && this._writableState.destroyed;
        if (i50 || a3110) {
            if (r107) r107(t137);
            else if (t137) if (this._writableState) {
                if (!this._writableState.errorEmitted) {
                    this._writableState.errorEmitted = true;
                    e152.nextTick(emitErrorNT, this, t137);
                }
            } else e152.nextTick(emitErrorNT, this, t137);
            return this;
        }
        this._readableState && (this._readableState.destroyed = true);
        this._writableState && (this._writableState.destroyed = true);
        this._destroy(t137 || null, function(t138) {
            if (!r107 && t138) if (n80._writableState) if (n80._writableState.errorEmitted) e152.nextTick(emitCloseNT, n80);
            else {
                n80._writableState.errorEmitted = true;
                e152.nextTick(emitErrorAndCloseNT, n80, t138);
            }
            else e152.nextTick(emitErrorAndCloseNT, n80, t138);
            else if (r107) {
                e152.nextTick(emitCloseNT, n80);
                r107(t138);
            } else e152.nextTick(emitCloseNT, n80);
        });
        return this;
    }
    function emitErrorAndCloseNT(e153, t139) {
        emitErrorNT(e153, t139);
        emitCloseNT(e153);
    }
    function emitCloseNT(e154) {
        e154._writableState && !e154._writableState.emitClose || e154._readableState && !e154._readableState.emitClose || e154.emit("close");
    }
    function undestroy() {
        if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
        }
        if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
        }
    }
    function emitErrorNT(e155, t140) {
        e155.emit("error", t140);
    }
    function errorOrDestroy(e156, t141) {
        var r108 = e156._readableState;
        var n81 = e156._writableState;
        r108 && r108.autoDestroy || n81 && n81.autoDestroy ? e156.destroy(t141) : e156.emit("error", t141);
    }
    y18 = {
        destroy: destroy,
        undestroy: undestroy,
        errorOrDestroy: errorOrDestroy
    };
    return y18;
}
var v24 = {}, m24 = false;
function dew$b3() {
    if (m24) return v24;
    m24 = true;
    const e157 = {};
    function createErrorType(t142, r109, n82) {
        n82 || (n82 = Error);
        function getMessage(e158, t143, n83) {
            return "string" === typeof r109 ? r109 : r109(e158, t143, n83);
        }
        class NodeError extends n82 {
            constructor(e159, t144, r110){
                super(getMessage(e159, t144, r110));
            }
        }
        NodeError.prototype.name = n82.name;
        NodeError.prototype.code = t142;
        e157[t142] = NodeError;
    }
    function oneOf(e160, t145) {
        if (Array.isArray(e160)) {
            const r111 = e160.length;
            e160 = e160.map((e161)=>String(e161)
            );
            return r111 > 2 ? `one of ${t145} ${e160.slice(0, r111 - 1).join(", ")}, or ` + e160[r111 - 1] : 2 === r111 ? `one of ${t145} ${e160[0]} or ${e160[1]}` : `of ${t145} ${e160[0]}`;
        }
        return `of ${t145} ${String(e160)}`;
    }
    function startsWith(e162, t146, r112) {
        return e162.substr(!r112 || r112 < 0 ? 0 : +r112, t146.length) === t146;
    }
    function endsWith(e163, t147, r113) {
        (void 0 === r113 || r113 > e163.length) && (r113 = e163.length);
        return e163.substring(r113 - t147.length, r113) === t147;
    }
    function includes(e164, t148, r114) {
        "number" !== typeof r114 && (r114 = 0);
        return !(r114 + t148.length > e164.length) && -1 !== e164.indexOf(t148, r114);
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(e165, t149) {
        return 'The value "' + t149 + '" is invalid for option "' + e165 + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(e166, t150, r116) {
        let n84;
        if ("string" === typeof t150 && startsWith(t150, "not ")) {
            n84 = "must not be";
            t150 = t150.replace(/^not /, "");
        } else n84 = "must be";
        let i51;
        if (endsWith(e166, " argument")) i51 = `The ${e166} ${n84} ${oneOf(t150, "type")}`;
        else {
            const r115 = includes(e166, ".") ? "property" : "argument";
            i51 = `The "${e166}" ${r115} ${n84} ${oneOf(t150, "type")}`;
        }
        i51 += ". Received type " + typeof r116;
        return i51;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(e167) {
        return "The " + e167 + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(e168) {
        return "Cannot call " + e168 + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(e169) {
        return "Unknown encoding: " + e169;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    v24.codes = e157;
    return v24;
}
var B14 = {}, _17 = false;
function dew$a3() {
    if (_17) return B14;
    _17 = true;
    var e170 = dew$b3().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(e171, t151, r117) {
        return null != e171.highWaterMark ? e171.highWaterMark : t151 ? e171[r117] : null;
    }
    function getHighWaterMark(t152, r118, n85, i52) {
        var a3210 = highWaterMarkFrom(r118, i52, n85);
        if (null != a3210) {
            if (!(isFinite(a3210) && Math.floor(a3210) === a3210) || a3210 < 0) {
                var o204 = i52 ? n85 : "highWaterMark";
                throw new e170(o204, a3210);
            }
            return Math.floor(a3210);
        }
        return t152.objectMode ? 16 : 16384;
    }
    B14 = {
        getHighWaterMark: getHighWaterMark
    };
    return B14;
}
var R12 = {}, S16 = false;
var I15 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$93() {
    if (S16) return R12;
    S16 = true;
    R12 = deprecate;
    function deprecate(e172, t153) {
        if (config("noDeprecation")) return e172;
        var r119 = false;
        function deprecated() {
            if (!r119) {
                if (config("throwDeprecation")) throw new Error(t153);
                config("traceDeprecation") ? console.trace(t153) : console.warn(t153);
                r119 = true;
            }
            return e172.apply(this || I15, arguments);
        }
        return deprecated;
    }
    function config(e174) {
        try {
            if (!I15.localStorage) return false;
        } catch (e173) {
            return false;
        }
        var t154 = I15.localStorage[e174];
        return null != t154 && "true" === String(t154).toLowerCase();
    }
    return R12;
}
var T14 = {}, k13 = false;
var A14 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$83() {
    if (k13) return T14;
    k13 = true;
    var e175 = r35;
    T14 = Writable;
    function CorkedRequest(e176) {
        var t156 = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
            onCorkedFinish(t156, e176);
        };
    }
    var t155;
    Writable.WritableState = WritableState;
    var n86 = {
        deprecate: dew$93()
    };
    var i53 = dew$e2();
    var a331 = l33.Buffer;
    var o2112 = A14.Uint8Array || function() {};
    function _uint8ArrayToBuffer(e177) {
        return a331.from(e177);
    }
    function _isUint8Array(e178) {
        return a331.isBuffer(e178) || e178 instanceof o2112;
    }
    var f102 = dew$c3();
    var s815 = dew$a3(), u516 = s815.getHighWaterMark;
    var h313 = dew$b3().codes, c316 = h313.ERR_INVALID_ARG_TYPE, d313 = h313.ERR_METHOD_NOT_IMPLEMENTED, p216 = h313.ERR_MULTIPLE_CALLBACK, b213 = h313.ERR_STREAM_CANNOT_PIPE, g116 = h313.ERR_STREAM_DESTROYED, y117 = h313.ERR_STREAM_NULL_VALUES, w114 = h313.ERR_STREAM_WRITE_AFTER_END, v117 = h313.ERR_UNKNOWN_ENCODING;
    var m120 = f102.errorOrDestroy;
    dew$f2()(Writable, i53);
    function nop() {}
    function WritableState(e179, r120, n87) {
        t155 = t155 || dew$73();
        e179 = e179 || {};
        "boolean" !== typeof n87 && (n87 = r120 instanceof t155);
        this.objectMode = !!e179.objectMode;
        n87 && (this.objectMode = this.objectMode || !!e179.writableObjectMode);
        this.highWaterMark = u516(this, e179, "writableHighWaterMark", n87);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var i54 = false === e179.decodeStrings;
        this.decodeStrings = !i54;
        this.defaultEncoding = e179.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(e180) {
            onwrite(r120, e180);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = false !== e179.emitClose;
        this.autoDestroy = !!e179.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
        var e181 = this.bufferedRequest;
        var t157 = [];
        while(e181){
            t157.push(e181);
            e181 = e181.next;
        }
        return t157;
    };
    (function() {
        try {
            Object.defineProperty(WritableState.prototype, "buffer", {
                get: n86.deprecate(function writableStateBufferGetter() {
                    return this.getBuffer();
                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
            });
        } catch (e) {}
    })();
    var B113;
    if ("function" === typeof Symbol && Symbol.hasInstance && "function" === typeof Function.prototype[Symbol.hasInstance]) {
        B113 = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(e182) {
                return !!B113.call(this, e182) || this === Writable && e182 && e182._writableState instanceof WritableState;
            }
        });
    } else B113 = function realHasInstance(e183) {
        return e183 instanceof this;
    };
    function Writable(e184) {
        t155 = t155 || dew$73();
        var r121 = this instanceof t155;
        if (!r121 && !B113.call(Writable, this)) return new Writable(e184);
        this._writableState = new WritableState(e184, this, r121);
        this.writable = true;
        if (e184) {
            "function" === typeof e184.write && (this._write = e184.write);
            "function" === typeof e184.writev && (this._writev = e184.writev);
            "function" === typeof e184.destroy && (this._destroy = e184.destroy);
            "function" === typeof e184.final && (this._final = e184.final);
        }
        i53.call(this);
    }
    Writable.prototype.pipe = function() {
        m120(this, new b213);
    };
    function writeAfterEnd(t158, r122) {
        var n88 = new w114;
        m120(t158, n88);
        e175.nextTick(r122, n88);
    }
    function validChunk(t159, r123, n89, i55) {
        var a341;
        null === n89 ? a341 = new y117 : "string" === typeof n89 || r123.objectMode || (a341 = new c316("chunk", [
            "string",
            "Buffer"
        ], n89));
        if (a341) {
            m120(t159, a341);
            e175.nextTick(i55, a341);
            return false;
        }
        return true;
    }
    Writable.prototype.write = function(e185, t160, r124) {
        var n90 = this._writableState;
        var i56 = false;
        var o2211 = !n90.objectMode && _isUint8Array(e185);
        o2211 && !a331.isBuffer(e185) && (e185 = _uint8ArrayToBuffer(e185));
        if ("function" === typeof t160) {
            r124 = t160;
            t160 = null;
        }
        o2211 ? t160 = "buffer" : t160 || (t160 = n90.defaultEncoding);
        "function" !== typeof r124 && (r124 = nop);
        if (n90.ending) writeAfterEnd(this, r124);
        else if (o2211 || validChunk(this, n90, e185, r124)) {
            n90.pendingcb++;
            i56 = writeOrBuffer(this, n90, o2211, e185, t160, r124);
        }
        return i56;
    };
    Writable.prototype.cork = function() {
        this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
        var e186 = this._writableState;
        if (e186.corked) {
            e186.corked--;
            e186.writing || e186.corked || e186.bufferProcessing || !e186.bufferedRequest || clearBuffer(this, e186);
        }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(e187) {
        "string" === typeof e187 && (e187 = e187.toLowerCase());
        if (!([
            "hex",
            "utf8",
            "utf-8",
            "ascii",
            "binary",
            "base64",
            "ucs2",
            "ucs-2",
            "utf16le",
            "utf-16le",
            "raw"
        ].indexOf((e187 + "").toLowerCase()) > -1)) throw new v117(e187);
        this._writableState.defaultEncoding = e187;
        return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
            return this._writableState && this._writableState.getBuffer();
        }
    });
    function decodeChunk(e188, t161, r125) {
        e188.objectMode || false === e188.decodeStrings || "string" !== typeof t161 || (t161 = a331.from(t161, r125));
        return t161;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
            return this._writableState.highWaterMark;
        }
    });
    function writeOrBuffer(e189, t162, r126, n91, i57, a351) {
        if (!r126) {
            var o2311 = decodeChunk(t162, n91, i57);
            if (n91 !== o2311) {
                r126 = true;
                i57 = "buffer";
                n91 = o2311;
            }
        }
        var f1110 = t162.objectMode ? 1 : n91.length;
        t162.length += f1110;
        var s915 = t162.length < t162.highWaterMark;
        s915 || (t162.needDrain = true);
        if (t162.writing || t162.corked) {
            var u616 = t162.lastBufferedRequest;
            t162.lastBufferedRequest = {
                chunk: n91,
                encoding: i57,
                isBuf: r126,
                callback: a351,
                next: null
            };
            u616 ? u616.next = t162.lastBufferedRequest : t162.bufferedRequest = t162.lastBufferedRequest;
            t162.bufferedRequestCount += 1;
        } else doWrite(e189, t162, false, f1110, n91, i57, a351);
        return s915;
    }
    function doWrite(e190, t163, r127, n92, i58, a361, o246) {
        t163.writelen = n92;
        t163.writecb = o246;
        t163.writing = true;
        t163.sync = true;
        t163.destroyed ? t163.onwrite(new g116("write")) : r127 ? e190._writev(i58, t163.onwrite) : e190._write(i58, a361, t163.onwrite);
        t163.sync = false;
    }
    function onwriteError(t164, r128, n93, i59, a371) {
        --r128.pendingcb;
        if (n93) {
            e175.nextTick(a371, i59);
            e175.nextTick(finishMaybe, t164, r128);
            t164._writableState.errorEmitted = true;
            m120(t164, i59);
        } else {
            a371(i59);
            t164._writableState.errorEmitted = true;
            m120(t164, i59);
            finishMaybe(t164, r128);
        }
    }
    function onwriteStateUpdate(e191) {
        e191.writing = false;
        e191.writecb = null;
        e191.length -= e191.writelen;
        e191.writelen = 0;
    }
    function onwrite(t165, r129) {
        var n94 = t165._writableState;
        var i60 = n94.sync;
        var a38 = n94.writecb;
        if ("function" !== typeof a38) throw new p216;
        onwriteStateUpdate(n94);
        if (r129) onwriteError(t165, n94, i60, r129, a38);
        else {
            var o252 = needFinish(n94) || t165.destroyed;
            o252 || n94.corked || n94.bufferProcessing || !n94.bufferedRequest || clearBuffer(t165, n94);
            i60 ? e175.nextTick(afterWrite, t165, n94, o252, a38) : afterWrite(t165, n94, o252, a38);
        }
    }
    function afterWrite(e192, t166, r130, n95) {
        r130 || onwriteDrain(e192, t166);
        t166.pendingcb--;
        n95();
        finishMaybe(e192, t166);
    }
    function onwriteDrain(e193, t167) {
        if (0 === t167.length && t167.needDrain) {
            t167.needDrain = false;
            e193.emit("drain");
        }
    }
    function clearBuffer(e194, t168) {
        t168.bufferProcessing = true;
        var r131 = t168.bufferedRequest;
        if (e194._writev && r131 && r131.next) {
            var n96 = t168.bufferedRequestCount;
            var i61 = new Array(n96);
            var a39 = t168.corkedRequestsFree;
            a39.entry = r131;
            var o262 = 0;
            var f123 = true;
            while(r131){
                i61[o262] = r131;
                r131.isBuf || (f123 = false);
                r131 = r131.next;
                o262 += 1;
            }
            i61.allBuffers = f123;
            doWrite(e194, t168, true, t168.length, i61, "", a39.finish);
            t168.pendingcb++;
            t168.lastBufferedRequest = null;
            if (a39.next) {
                t168.corkedRequestsFree = a39.next;
                a39.next = null;
            } else t168.corkedRequestsFree = new CorkedRequest(t168);
            t168.bufferedRequestCount = 0;
        } else {
            while(r131){
                var s1014 = r131.chunk;
                var u711 = r131.encoding;
                var l416 = r131.callback;
                var h48 = t168.objectMode ? 1 : s1014.length;
                doWrite(e194, t168, false, h48, s1014, u711, l416);
                r131 = r131.next;
                t168.bufferedRequestCount--;
                if (t168.writing) break;
            }
            null === r131 && (t168.lastBufferedRequest = null);
        }
        t168.bufferedRequest = r131;
        t168.bufferProcessing = false;
    }
    Writable.prototype._write = function(e, t, r132) {
        r132(new d313("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(e195, t169, r133) {
        var n97 = this._writableState;
        if ("function" === typeof e195) {
            r133 = e195;
            e195 = null;
            t169 = null;
        } else if ("function" === typeof t169) {
            r133 = t169;
            t169 = null;
        }
        null !== e195 && void 0 !== e195 && this.write(e195, t169);
        if (n97.corked) {
            n97.corked = 1;
            this.uncork();
        }
        n97.ending || endWritable(this, n97, r133);
        return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
            return this._writableState.length;
        }
    });
    function needFinish(e196) {
        return e196.ending && 0 === e196.length && null === e196.bufferedRequest && !e196.finished && !e196.writing;
    }
    function callFinal(e197, t170) {
        e197._final(function(r134) {
            t170.pendingcb--;
            r134 && m120(e197, r134);
            t170.prefinished = true;
            e197.emit("prefinish");
            finishMaybe(e197, t170);
        });
    }
    function prefinish(t171, r135) {
        if (!r135.prefinished && !r135.finalCalled) if ("function" !== typeof t171._final || r135.destroyed) {
            r135.prefinished = true;
            t171.emit("prefinish");
        } else {
            r135.pendingcb++;
            r135.finalCalled = true;
            e175.nextTick(callFinal, t171, r135);
        }
    }
    function finishMaybe(e198, t172) {
        var r136 = needFinish(t172);
        if (r136) {
            prefinish(e198, t172);
            if (0 === t172.pendingcb) {
                t172.finished = true;
                e198.emit("finish");
                if (t172.autoDestroy) {
                    var n98 = e198._readableState;
                    (!n98 || n98.autoDestroy && n98.endEmitted) && e198.destroy();
                }
            }
        }
        return r136;
    }
    function endWritable(t173, r137, n99) {
        r137.ending = true;
        finishMaybe(t173, r137);
        n99 && (r137.finished ? e175.nextTick(n99) : t173.once("finish", n99));
        r137.ended = true;
        t173.writable = false;
    }
    function onCorkedFinish(e199, t174, r138) {
        var n100 = e199.entry;
        e199.entry = null;
        while(n100){
            var i62 = n100.callback;
            t174.pendingcb--;
            i62(r138);
            n100 = n100.next;
        }
        t174.corkedRequestsFree.next = e199;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
            return void 0 !== this._writableState && this._writableState.destroyed;
        },
        set: function set(e200) {
            this._writableState && (this._writableState.destroyed = e200);
        }
    });
    Writable.prototype.destroy = f102.destroy;
    Writable.prototype._undestroy = f102.undestroy;
    Writable.prototype._destroy = function(e201, t175) {
        t175(e201);
    };
    return T14;
}
var O16 = {}, L12 = false;
function dew$73() {
    if (L12) return O16;
    L12 = true;
    var e202 = r35;
    var t176 = Object.keys || function(e203) {
        var t177 = [];
        for(var r139 in e203)t177.push(r139);
        return t177;
    };
    O16 = Duplex;
    var n101 = dew$33();
    var i63 = dew$83();
    dew$f2()(Duplex, n101);
    var a40 = t176(i63.prototype);
    for(var o272 = 0; o272 < a40.length; o272++){
        var f131 = a40[o272];
        Duplex.prototype[f131] || (Duplex.prototype[f131] = i63.prototype[f131]);
    }
    function Duplex(e204) {
        if (!(this instanceof Duplex)) return new Duplex(e204);
        n101.call(this, e204);
        i63.call(this, e204);
        this.allowHalfOpen = true;
        if (e204) {
            false === e204.readable && (this.readable = false);
            false === e204.writable && (this.writable = false);
            if (false === e204.allowHalfOpen) {
                this.allowHalfOpen = false;
                this.once("end", onend);
            }
        }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
            return this._writableState.highWaterMark;
        }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
            return this._writableState && this._writableState.getBuffer();
        }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
            return this._writableState.length;
        }
    });
    function onend() {
        this._writableState.ended || e202.nextTick(onEndNT, this);
    }
    function onEndNT(e205) {
        e205.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
            return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(e206) {
            if (void 0 !== this._readableState && void 0 !== this._writableState) {
                this._readableState.destroyed = e206;
                this._writableState.destroyed = e206;
            }
        }
    });
    return O16;
}
var M12 = {}, U14 = false;
function dew$63() {
    if (U14) return M12;
    U14 = true;
    var e207 = dew$b3().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(e208) {
        var t178 = false;
        return function() {
            if (!t178) {
                t178 = true;
                for(var r140 = arguments.length, n102 = new Array(r140), i64 = 0; i64 < r140; i64++)n102[i64] = arguments[i64];
                e208.apply(this, n102);
            }
        };
    }
    function noop4() {}
    function isRequest(e209) {
        return e209.setHeader && "function" === typeof e209.abort;
    }
    function eos(t179, r141, n103) {
        if ("function" === typeof r141) return eos(t179, null, r141);
        r141 || (r141 = {});
        n103 = once(n103 || noop4);
        var i65 = r141.readable || false !== r141.readable && t179.readable;
        var a41 = r141.writable || false !== r141.writable && t179.writable;
        var o282 = function onlegacyfinish() {
            t179.writable || s1125();
        };
        var f141 = t179._writableState && t179._writableState.finished;
        var s1125 = function onfinish() {
            a41 = false;
            f141 = true;
            i65 || n103.call(t179);
        };
        var u811 = t179._readableState && t179._readableState.endEmitted;
        var l511 = function onend() {
            i65 = false;
            u811 = true;
            a41 || n103.call(t179);
        };
        var h54 = function onerror(e210) {
            n103.call(t179, e210);
        };
        var c415 = function onclose() {
            var r142;
            if (i65 && !u811) {
                t179._readableState && t179._readableState.ended || (r142 = new e207);
                return n103.call(t179, r142);
            }
            if (a41 && !f141) {
                t179._writableState && t179._writableState.ended || (r142 = new e207);
                return n103.call(t179, r142);
            }
        };
        var d412 = function onrequest() {
            t179.req.on("finish", s1125);
        };
        if (isRequest(t179)) {
            t179.on("complete", s1125);
            t179.on("abort", c415);
            t179.req ? d412() : t179.on("request", d412);
        } else if (a41 && !t179._writableState) {
            t179.on("end", o282);
            t179.on("close", o282);
        }
        t179.on("end", l511);
        t179.on("finish", s1125);
        false !== r141.error && t179.on("error", h54);
        t179.on("close", c415);
        return function() {
            t179.removeListener("complete", s1125);
            t179.removeListener("abort", c415);
            t179.removeListener("request", d412);
            t179.req && t179.req.removeListener("finish", s1125);
            t179.removeListener("end", o282);
            t179.removeListener("close", o282);
            t179.removeListener("finish", s1125);
            t179.removeListener("end", l511);
            t179.removeListener("error", h54);
            t179.removeListener("close", c415);
        };
    }
    M12 = eos;
    return M12;
}
var C18 = {}, x16 = false;
function dew$53() {
    if (x16) return C18;
    x16 = true;
    var e211 = r35;
    var t180;
    function _defineProperty(e212, t181, r143) {
        t181 in e212 ? Object.defineProperty(e212, t181, {
            value: r143,
            enumerable: true,
            configurable: true,
            writable: true
        }) : e212[t181] = r143;
        return e212;
    }
    var n104 = dew$63();
    var i66 = Symbol("lastResolve");
    var a42 = Symbol("lastReject");
    var o292 = Symbol("error");
    var f151 = Symbol("ended");
    var s1214 = Symbol("lastPromise");
    var u98 = Symbol("handlePromise");
    var l611 = Symbol("stream");
    function createIterResult(e213, t182) {
        return {
            value: e213,
            done: t182
        };
    }
    function readAndResolve(e214) {
        var t183 = e214[i66];
        if (null !== t183) {
            var r144 = e214[l611].read();
            if (null !== r144) {
                e214[s1214] = null;
                e214[i66] = null;
                e214[a42] = null;
                t183(createIterResult(r144, false));
            }
        }
    }
    function onReadable(t184) {
        e211.nextTick(readAndResolve, t184);
    }
    function wrapForNext(e215, t185) {
        return function(r145, n105) {
            e215.then(function() {
                t185[f151] ? r145(createIterResult(void 0, true)) : t185[u98](r145, n105);
            }, n105);
        };
    }
    var h64 = Object.getPrototypeOf(function() {});
    var c510 = Object.setPrototypeOf((t180 = {
        get stream () {
            return this[l611];
        },
        next: function next() {
            var t186 = this;
            var r146 = this[o292];
            if (null !== r146) return Promise.reject(r146);
            if (this[f151]) return Promise.resolve(createIterResult(void 0, true));
            if (this[l611].destroyed) return new Promise(function(r147, n107) {
                e211.nextTick(function() {
                    t186[o292] ? n107(t186[o292]) : r147(createIterResult(void 0, true));
                });
            });
            var n106 = this[s1214];
            var i67;
            if (n106) i67 = new Promise(wrapForNext(n106, this));
            else {
                var a43 = this[l611].read();
                if (null !== a43) return Promise.resolve(createIterResult(a43, false));
                i67 = new Promise(this[u98]);
            }
            this[s1214] = i67;
            return i67;
        }
    }, _defineProperty(t180, Symbol.asyncIterator, function() {
        return this;
    }), _defineProperty(t180, "return", function _return() {
        var e216 = this;
        return new Promise(function(t187, r148) {
            e216[l611].destroy(null, function(e217) {
                e217 ? r148(e217) : t187(createIterResult(void 0, true));
            });
        });
    }), t180), h64);
    var d57 = function createReadableStreamAsyncIterator(e218) {
        var t188;
        var r149 = Object.create(c510, (t188 = {}, _defineProperty(t188, l611, {
            value: e218,
            writable: true
        }), _defineProperty(t188, i66, {
            value: null,
            writable: true
        }), _defineProperty(t188, a42, {
            value: null,
            writable: true
        }), _defineProperty(t188, o292, {
            value: null,
            writable: true
        }), _defineProperty(t188, f151, {
            value: e218._readableState.endEmitted,
            writable: true
        }), _defineProperty(t188, u98, {
            value: function value(e219, t189) {
                var n108 = r149[l611].read();
                if (n108) {
                    r149[s1214] = null;
                    r149[i66] = null;
                    r149[a42] = null;
                    e219(createIterResult(n108, false));
                } else {
                    r149[i66] = e219;
                    r149[a42] = t189;
                }
            },
            writable: true
        }), t188));
        r149[s1214] = null;
        n104(e218, function(e220) {
            if (e220 && "ERR_STREAM_PREMATURE_CLOSE" !== e220.code) {
                var t190 = r149[a42];
                if (null !== t190) {
                    r149[s1214] = null;
                    r149[i66] = null;
                    r149[a42] = null;
                    t190(e220);
                }
                r149[o292] = e220;
            } else {
                var n109 = r149[i66];
                if (null !== n109) {
                    r149[s1214] = null;
                    r149[i66] = null;
                    r149[a42] = null;
                    n109(createIterResult(void 0, true));
                }
                r149[f151] = true;
            }
        });
        e218.on("readable", onReadable.bind(null, r149));
        return r149;
    };
    C18 = d57;
    return C18;
}
var N14 = {}, P15 = false;
function dew$43() {
    if (P15) return N14;
    P15 = true;
    N14 = function() {
        throw new Error("Readable.from is not available in the browser");
    };
    return N14;
}
var $14 = {}, D13 = false;
var W12 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$33() {
    if (D13) return $14;
    D13 = true;
    var i68 = r35;
    $14 = Readable;
    var a44;
    Readable.ReadableState = ReadableState;
    y16.EventEmitter;
    var o302 = function EElistenerCount(e221, t191) {
        return e221.listeners(t191).length;
    };
    var f161 = dew$e2();
    var s1313 = l33.Buffer;
    var u105 = W12.Uint8Array || function() {};
    function _uint8ArrayToBuffer(e222) {
        return s1313.from(e222);
    }
    function _isUint8Array(e223) {
        return s1313.isBuffer(e223) || e223 instanceof u105;
    }
    var h74 = xe4;
    var c67;
    c67 = h74 && h74.debuglog ? h74.debuglog("stream") : function debug() {};
    var d62 = dew$d3();
    var p315 = dew$c3();
    var b310 = dew$a3(), g212 = b310.getHighWaterMark;
    var y213 = dew$b3().codes, w211 = y213.ERR_INVALID_ARG_TYPE, v214 = y213.ERR_STREAM_PUSH_AFTER_EOF, m214 = y213.ERR_METHOD_NOT_IMPLEMENTED, B24 = y213.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var _115;
    var R110;
    var S113;
    dew$f2()(Readable, f161);
    var I112 = p315.errorOrDestroy;
    var T113 = [
        "error",
        "close",
        "destroy",
        "pause",
        "resume"
    ];
    function prependListener(e224, t192, r150) {
        if ("function" === typeof e224.prependListener) return e224.prependListener(t192, r150);
        e224._events && e224._events[t192] ? Array.isArray(e224._events[t192]) ? e224._events[t192].unshift(r150) : e224._events[t192] = [
            r150,
            e224._events[t192]
        ] : e224.on(t192, r150);
    }
    function ReadableState(e225, t193, r151) {
        a44 = a44 || dew$73();
        e225 = e225 || {};
        "boolean" !== typeof r151 && (r151 = t193 instanceof a44);
        this.objectMode = !!e225.objectMode;
        r151 && (this.objectMode = this.objectMode || !!e225.readableObjectMode);
        this.highWaterMark = g212(this, e225, "readableHighWaterMark", r151);
        this.buffer = new d62;
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = false !== e225.emitClose;
        this.autoDestroy = !!e225.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = e225.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (e225.encoding) {
            _115 || (_115 = Q10.StringDecoder);
            this.decoder = new _115(e225.encoding);
            this.encoding = e225.encoding;
        }
    }
    function Readable(e226) {
        a44 = a44 || dew$73();
        if (!(this instanceof Readable)) return new Readable(e226);
        var t194 = this instanceof a44;
        this._readableState = new ReadableState(e226, this, t194);
        this.readable = true;
        if (e226) {
            "function" === typeof e226.read && (this._read = e226.read);
            "function" === typeof e226.destroy && (this._destroy = e226.destroy);
        }
        f161.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
            return void 0 !== this._readableState && this._readableState.destroyed;
        },
        set: function set(e227) {
            this._readableState && (this._readableState.destroyed = e227);
        }
    });
    Readable.prototype.destroy = p315.destroy;
    Readable.prototype._undestroy = p315.undestroy;
    Readable.prototype._destroy = function(e228, t195) {
        t195(e228);
    };
    Readable.prototype.push = function(e229, t196) {
        var r152 = this._readableState;
        var n110;
        if (r152.objectMode) n110 = true;
        else if ("string" === typeof e229) {
            t196 = t196 || r152.defaultEncoding;
            if (t196 !== r152.encoding) {
                e229 = s1313.from(e229, t196);
                t196 = "";
            }
            n110 = true;
        }
        return readableAddChunk(this, e229, t196, false, n110);
    };
    Readable.prototype.unshift = function(e230) {
        return readableAddChunk(this, e230, null, true, false);
    };
    function readableAddChunk(e231, t197, r153, n111, i69) {
        c67("readableAddChunk", t197);
        var a45 = e231._readableState;
        if (null === t197) {
            a45.reading = false;
            onEofChunk(e231, a45);
        } else {
            var o3111;
            i69 || (o3111 = chunkInvalid(a45, t197));
            if (o3111) I112(e231, o3111);
            else if (a45.objectMode || t197 && t197.length > 0) {
                "string" === typeof t197 || a45.objectMode || Object.getPrototypeOf(t197) === s1313.prototype || (t197 = _uint8ArrayToBuffer(t197));
                if (n111) a45.endEmitted ? I112(e231, new B24) : addChunk(e231, a45, t197, true);
                else if (a45.ended) I112(e231, new v214);
                else {
                    if (a45.destroyed) return false;
                    a45.reading = false;
                    if (a45.decoder && !r153) {
                        t197 = a45.decoder.write(t197);
                        a45.objectMode || 0 !== t197.length ? addChunk(e231, a45, t197, false) : maybeReadMore(e231, a45);
                    } else addChunk(e231, a45, t197, false);
                }
            } else if (!n111) {
                a45.reading = false;
                maybeReadMore(e231, a45);
            }
        }
        return !a45.ended && (a45.length < a45.highWaterMark || 0 === a45.length);
    }
    function addChunk(e232, t198, r154, n112) {
        if (t198.flowing && 0 === t198.length && !t198.sync) {
            t198.awaitDrain = 0;
            e232.emit("data", r154);
        } else {
            t198.length += t198.objectMode ? 1 : r154.length;
            n112 ? t198.buffer.unshift(r154) : t198.buffer.push(r154);
            t198.needReadable && emitReadable(e232);
        }
        maybeReadMore(e232, t198);
    }
    function chunkInvalid(e233, t199) {
        var r155;
        _isUint8Array(t199) || "string" === typeof t199 || void 0 === t199 || e233.objectMode || (r155 = new w211("chunk", [
            "string",
            "Buffer",
            "Uint8Array"
        ], t199));
        return r155;
    }
    Readable.prototype.isPaused = function() {
        return false === this._readableState.flowing;
    };
    Readable.prototype.setEncoding = function(e234) {
        _115 || (_115 = Q10.StringDecoder);
        var t200 = new _115(e234);
        this._readableState.decoder = t200;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var r156 = this._readableState.buffer.head;
        var i70 = "";
        while(null !== r156){
            i70 += t200.write(r156.data);
            r156 = r156.next;
        }
        this._readableState.buffer.clear();
        "" !== i70 && this._readableState.buffer.push(i70);
        this._readableState.length = i70.length;
        return this;
    };
    var k112 = 1073741824;
    function computeNewHighWaterMark(e235) {
        if (e235 >= k112) e235 = k112;
        else {
            e235--;
            e235 |= e235 >>> 1;
            e235 |= e235 >>> 2;
            e235 |= e235 >>> 4;
            e235 |= e235 >>> 8;
            e235 |= e235 >>> 16;
            e235++;
        }
        return e235;
    }
    function howMuchToRead(e236, t201) {
        if (e236 <= 0 || 0 === t201.length && t201.ended) return 0;
        if (t201.objectMode) return 1;
        if (e236 !== e236) return t201.flowing && t201.length ? t201.buffer.head.data.length : t201.length;
        e236 > t201.highWaterMark && (t201.highWaterMark = computeNewHighWaterMark(e236));
        if (e236 <= t201.length) return e236;
        if (!t201.ended) {
            t201.needReadable = true;
            return 0;
        }
        return t201.length;
    }
    Readable.prototype.read = function(e237) {
        c67("read", e237);
        e237 = parseInt(e237, 10);
        var t202 = this._readableState;
        var r157 = e237;
        0 !== e237 && (t202.emittedReadable = false);
        if (0 === e237 && t202.needReadable && ((0 !== t202.highWaterMark ? t202.length >= t202.highWaterMark : t202.length > 0) || t202.ended)) {
            c67("read: emitReadable", t202.length, t202.ended);
            0 === t202.length && t202.ended ? endReadable(this) : emitReadable(this);
            return null;
        }
        e237 = howMuchToRead(e237, t202);
        if (0 === e237 && t202.ended) {
            0 === t202.length && endReadable(this);
            return null;
        }
        var n113 = t202.needReadable;
        c67("need readable", n113);
        if (0 === t202.length || t202.length - e237 < t202.highWaterMark) {
            n113 = true;
            c67("length less than watermark", n113);
        }
        if (t202.ended || t202.reading) {
            n113 = false;
            c67("reading or ended", n113);
        } else if (n113) {
            c67("do read");
            t202.reading = true;
            t202.sync = true;
            0 === t202.length && (t202.needReadable = true);
            this._read(t202.highWaterMark);
            t202.sync = false;
            t202.reading || (e237 = howMuchToRead(r157, t202));
        }
        var i71;
        i71 = e237 > 0 ? fromList(e237, t202) : null;
        if (null === i71) {
            t202.needReadable = t202.length <= t202.highWaterMark;
            e237 = 0;
        } else {
            t202.length -= e237;
            t202.awaitDrain = 0;
        }
        if (0 === t202.length) {
            t202.ended || (t202.needReadable = true);
            r157 !== e237 && t202.ended && endReadable(this);
        }
        null !== i71 && this.emit("data", i71);
        return i71;
    };
    function onEofChunk(e238, t203) {
        c67("onEofChunk");
        if (!t203.ended) {
            if (t203.decoder) {
                var r158 = t203.decoder.end();
                if (r158 && r158.length) {
                    t203.buffer.push(r158);
                    t203.length += t203.objectMode ? 1 : r158.length;
                }
            }
            t203.ended = true;
            if (t203.sync) emitReadable(e238);
            else {
                t203.needReadable = false;
                if (!t203.emittedReadable) {
                    t203.emittedReadable = true;
                    emitReadable_(e238);
                }
            }
        }
    }
    function emitReadable(e239) {
        var t204 = e239._readableState;
        c67("emitReadable", t204.needReadable, t204.emittedReadable);
        t204.needReadable = false;
        if (!t204.emittedReadable) {
            c67("emitReadable", t204.flowing);
            t204.emittedReadable = true;
            i68.nextTick(emitReadable_, e239);
        }
    }
    function emitReadable_(e240) {
        var t205 = e240._readableState;
        c67("emitReadable_", t205.destroyed, t205.length, t205.ended);
        if (!t205.destroyed && (t205.length || t205.ended)) {
            e240.emit("readable");
            t205.emittedReadable = false;
        }
        t205.needReadable = !t205.flowing && !t205.ended && t205.length <= t205.highWaterMark;
        flow1(e240);
    }
    function maybeReadMore(e241, t206) {
        if (!t206.readingMore) {
            t206.readingMore = true;
            i68.nextTick(maybeReadMore_, e241, t206);
        }
    }
    function maybeReadMore_(e242, t207) {
        while(!t207.reading && !t207.ended && (t207.length < t207.highWaterMark || t207.flowing && 0 === t207.length)){
            var r159 = t207.length;
            c67("maybeReadMore read 0");
            e242.read(0);
            if (r159 === t207.length) break;
        }
        t207.readingMore = false;
    }
    Readable.prototype._read = function(e) {
        I112(this, new m214("_read()"));
    };
    Readable.prototype.pipe = function(e243, t208) {
        var r160 = this;
        var n114 = this._readableState;
        switch(n114.pipesCount){
            case 0:
                n114.pipes = e243;
                break;
            case 1:
                n114.pipes = [
                    n114.pipes,
                    e243
                ];
                break;
            default:
                n114.pipes.push(e243);
                break;
        }
        n114.pipesCount += 1;
        c67("pipe count=%d opts=%j", n114.pipesCount, t208);
        var a46 = (!t208 || false !== t208.end) && e243 !== i68.stdout && e243 !== i68.stderr;
        var f171 = a46 ? onend : unpipe;
        n114.endEmitted ? i68.nextTick(f171) : r160.once("end", f171);
        e243.on("unpipe", onunpipe);
        function onunpipe(e244, t209) {
            c67("onunpipe");
            if (e244 === r160 && t209 && false === t209.hasUnpiped) {
                t209.hasUnpiped = true;
                cleanup();
            }
        }
        function onend() {
            c67("onend");
            e243.end();
        }
        var s1413 = pipeOnDrain(r160);
        e243.on("drain", s1413);
        var u1113 = false;
        function cleanup() {
            c67("cleanup");
            e243.removeListener("close", onclose);
            e243.removeListener("finish", onfinish);
            e243.removeListener("drain", s1413);
            e243.removeListener("error", onerror);
            e243.removeListener("unpipe", onunpipe);
            r160.removeListener("end", onend);
            r160.removeListener("end", unpipe);
            r160.removeListener("data", ondata);
            u1113 = true;
            !n114.awaitDrain || e243._writableState && !e243._writableState.needDrain || s1413();
        }
        r160.on("data", ondata);
        function ondata(t210) {
            c67("ondata");
            var i72 = e243.write(t210);
            c67("dest.write", i72);
            if (false === i72) {
                if ((1 === n114.pipesCount && n114.pipes === e243 || n114.pipesCount > 1 && -1 !== indexOf(n114.pipes, e243)) && !u1113) {
                    c67("false write response, pause", n114.awaitDrain);
                    n114.awaitDrain++;
                }
                r160.pause();
            }
        }
        function onerror(t211) {
            c67("onerror", t211);
            unpipe();
            e243.removeListener("error", onerror);
            0 === o302(e243, "error") && I112(e243, t211);
        }
        prependListener(e243, "error", onerror);
        function onclose() {
            e243.removeListener("finish", onfinish);
            unpipe();
        }
        e243.once("close", onclose);
        function onfinish() {
            c67("onfinish");
            e243.removeListener("close", onclose);
            unpipe();
        }
        e243.once("finish", onfinish);
        function unpipe() {
            c67("unpipe");
            r160.unpipe(e243);
        }
        e243.emit("pipe", r160);
        if (!n114.flowing) {
            c67("pipe resume");
            r160.resume();
        }
        return e243;
    };
    function pipeOnDrain(e245) {
        return function pipeOnDrainFunctionResult() {
            var t212 = e245._readableState;
            c67("pipeOnDrain", t212.awaitDrain);
            t212.awaitDrain && t212.awaitDrain--;
            if (0 === t212.awaitDrain && o302(e245, "data")) {
                t212.flowing = true;
                flow1(e245);
            }
        };
    }
    Readable.prototype.unpipe = function(e246) {
        var t213 = this._readableState;
        var r161 = {
            hasUnpiped: false
        };
        if (0 === t213.pipesCount) return this;
        if (1 === t213.pipesCount) {
            if (e246 && e246 !== t213.pipes) return this;
            e246 || (e246 = t213.pipes);
            t213.pipes = null;
            t213.pipesCount = 0;
            t213.flowing = false;
            e246 && e246.emit("unpipe", this, r161);
            return this;
        }
        if (!e246) {
            var n115 = t213.pipes;
            var i73 = t213.pipesCount;
            t213.pipes = null;
            t213.pipesCount = 0;
            t213.flowing = false;
            for(var a47 = 0; a47 < i73; a47++)n115[a47].emit("unpipe", this, {
                hasUnpiped: false
            });
            return this;
        }
        var o3211 = indexOf(t213.pipes, e246);
        if (-1 === o3211) return this;
        t213.pipes.splice(o3211, 1);
        t213.pipesCount -= 1;
        1 === t213.pipesCount && (t213.pipes = t213.pipes[0]);
        e246.emit("unpipe", this, r161);
        return this;
    };
    Readable.prototype.on = function(e247, t214) {
        var r162 = f161.prototype.on.call(this, e247, t214);
        var n116 = this._readableState;
        if ("data" === e247) {
            n116.readableListening = this.listenerCount("readable") > 0;
            false !== n116.flowing && this.resume();
        } else if ("readable" === e247 && !n116.endEmitted && !n116.readableListening) {
            n116.readableListening = n116.needReadable = true;
            n116.flowing = false;
            n116.emittedReadable = false;
            c67("on readable", n116.length, n116.reading);
            n116.length ? emitReadable(this) : n116.reading || i68.nextTick(nReadingNextTick, this);
        }
        return r162;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(e248, t215) {
        var r163 = f161.prototype.removeListener.call(this, e248, t215);
        "readable" === e248 && i68.nextTick(updateReadableListening, this);
        return r163;
    };
    Readable.prototype.removeAllListeners = function(e249) {
        var t216 = f161.prototype.removeAllListeners.apply(this, arguments);
        "readable" !== e249 && void 0 !== e249 || i68.nextTick(updateReadableListening, this);
        return t216;
    };
    function updateReadableListening(e250) {
        var t217 = e250._readableState;
        t217.readableListening = e250.listenerCount("readable") > 0;
        t217.resumeScheduled && !t217.paused ? t217.flowing = true : e250.listenerCount("data") > 0 && e250.resume();
    }
    function nReadingNextTick(e251) {
        c67("readable nexttick read 0");
        e251.read(0);
    }
    Readable.prototype.resume = function() {
        var e252 = this._readableState;
        if (!e252.flowing) {
            c67("resume");
            e252.flowing = !e252.readableListening;
            resume(this, e252);
        }
        e252.paused = false;
        return this;
    };
    function resume(e253, t218) {
        if (!t218.resumeScheduled) {
            t218.resumeScheduled = true;
            i68.nextTick(resume_, e253, t218);
        }
    }
    function resume_(e254, t219) {
        c67("resume", t219.reading);
        t219.reading || e254.read(0);
        t219.resumeScheduled = false;
        e254.emit("resume");
        flow1(e254);
        t219.flowing && !t219.reading && e254.read(0);
    }
    Readable.prototype.pause = function() {
        c67("call pause flowing=%j", this._readableState.flowing);
        if (false !== this._readableState.flowing) {
            c67("pause");
            this._readableState.flowing = false;
            this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
    };
    function flow1(e255) {
        var t220 = e255._readableState;
        c67("flow", t220.flowing);
        while(t220.flowing && null !== e255.read());
    }
    Readable.prototype.wrap = function(e256) {
        var t221 = this;
        var r164 = this._readableState;
        var n117 = false;
        e256.on("end", function() {
            c67("wrapped end");
            if (r164.decoder && !r164.ended) {
                var e257 = r164.decoder.end();
                e257 && e257.length && t221.push(e257);
            }
            t221.push(null);
        });
        e256.on("data", function(i75) {
            c67("wrapped data");
            r164.decoder && (i75 = r164.decoder.write(i75));
            if ((!r164.objectMode || null !== i75 && void 0 !== i75) && (r164.objectMode || i75 && i75.length)) {
                var a49 = t221.push(i75);
                if (!a49) {
                    n117 = true;
                    e256.pause();
                }
            }
        });
        for(var i74 in e256)void 0 === this[i74] && "function" === typeof e256[i74] && (this[i74] = function methodWrap(t222) {
            return function methodWrapReturnFunction() {
                return e256[t222].apply(e256, arguments);
            };
        }(i74));
        for(var a48 = 0; a48 < T113.length; a48++)e256.on(T113[a48], this.emit.bind(this, T113[a48]));
        this._read = function(t223) {
            c67("wrapped _read", t223);
            if (n117) {
                n117 = false;
                e256.resume();
            }
        };
        return this;
    };
    "function" === typeof Symbol && (Readable.prototype[Symbol.asyncIterator] = function() {
        void 0 === R110 && (R110 = dew$53());
        return R110(this);
    });
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        enumerable: false,
        get: function get() {
            return this._readableState.highWaterMark;
        }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
        enumerable: false,
        get: function get() {
            return this._readableState && this._readableState.buffer;
        }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
        enumerable: false,
        get: function get() {
            return this._readableState.flowing;
        },
        set: function set(e258) {
            this._readableState && (this._readableState.flowing = e258);
        }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
        enumerable: false,
        get: function get() {
            return this._readableState.length;
        }
    });
    function fromList(e259, t224) {
        if (0 === t224.length) return null;
        var r165;
        if (t224.objectMode) r165 = t224.buffer.shift();
        else if (!e259 || e259 >= t224.length) {
            r165 = t224.decoder ? t224.buffer.join("") : 1 === t224.buffer.length ? t224.buffer.first() : t224.buffer.concat(t224.length);
            t224.buffer.clear();
        } else r165 = t224.buffer.consume(e259, t224.decoder);
        return r165;
    }
    function endReadable(e260) {
        var t225 = e260._readableState;
        c67("endReadable", t225.endEmitted);
        if (!t225.endEmitted) {
            t225.ended = true;
            i68.nextTick(endReadableNT, t225, e260);
        }
    }
    function endReadableNT(e261, t226) {
        c67("endReadableNT", e261.endEmitted, e261.length);
        if (!e261.endEmitted && 0 === e261.length) {
            e261.endEmitted = true;
            t226.readable = false;
            t226.emit("end");
            if (e261.autoDestroy) {
                var r166 = t226._writableState;
                (!r166 || r166.autoDestroy && r166.finished) && t226.destroy();
            }
        }
    }
    "function" === typeof Symbol && (Readable.from = function(e262, t227) {
        void 0 === S113 && (S113 = dew$43());
        return S113(Readable, e262, t227);
    });
    function indexOf(e263, t228) {
        for(var r167 = 0, n118 = e263.length; r167 < n118; r167++)if (e263[r167] === t228) return r167;
        return -1;
    }
    return $14;
}
var j13 = {}, F14 = false;
function dew$24() {
    if (F14) return j13;
    F14 = true;
    j13 = Transform;
    var e264 = dew$b3().codes, t229 = e264.ERR_METHOD_NOT_IMPLEMENTED, r168 = e264.ERR_MULTIPLE_CALLBACK, n119 = e264.ERR_TRANSFORM_ALREADY_TRANSFORMING, i76 = e264.ERR_TRANSFORM_WITH_LENGTH_0;
    var a50 = dew$73();
    dew$f2()(Transform, a50);
    function afterTransform(e265, t230) {
        var n120 = this._transformState;
        n120.transforming = false;
        var i77 = n120.writecb;
        if (null === i77) return this.emit("error", new r168);
        n120.writechunk = null;
        n120.writecb = null;
        null != t230 && this.push(t230);
        i77(e265);
        var a51 = this._readableState;
        a51.reading = false;
        (a51.needReadable || a51.length < a51.highWaterMark) && this._read(a51.highWaterMark);
    }
    function Transform(e266) {
        if (!(this instanceof Transform)) return new Transform(e266);
        a50.call(this, e266);
        this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (e266) {
            "function" === typeof e266.transform && (this._transform = e266.transform);
            "function" === typeof e266.flush && (this._flush = e266.flush);
        }
        this.on("prefinish", prefinish);
    }
    function prefinish() {
        var e267 = this;
        "function" !== typeof this._flush || this._readableState.destroyed ? done(this, null, null) : this._flush(function(t231, r169) {
            done(e267, t231, r169);
        });
    }
    Transform.prototype.push = function(e268, t232) {
        this._transformState.needTransform = false;
        return a50.prototype.push.call(this, e268, t232);
    };
    Transform.prototype._transform = function(e, r, n121) {
        n121(new t229("_transform()"));
    };
    Transform.prototype._write = function(e269, t233, r170) {
        var n122 = this._transformState;
        n122.writecb = r170;
        n122.writechunk = e269;
        n122.writeencoding = t233;
        if (!n122.transforming) {
            var i78 = this._readableState;
            (n122.needTransform || i78.needReadable || i78.length < i78.highWaterMark) && this._read(i78.highWaterMark);
        }
    };
    Transform.prototype._read = function(e) {
        var t234 = this._transformState;
        if (null === t234.writechunk || t234.transforming) t234.needTransform = true;
        else {
            t234.transforming = true;
            this._transform(t234.writechunk, t234.writeencoding, t234.afterTransform);
        }
    };
    Transform.prototype._destroy = function(e270, t235) {
        a50.prototype._destroy.call(this, e270, function(e271) {
            t235(e271);
        });
    };
    function done(e272, t236, r171) {
        if (t236) return e272.emit("error", t236);
        null != r171 && e272.push(r171);
        if (e272._writableState.length) throw new i76;
        if (e272._transformState.transforming) throw new n119;
        return e272.push(null);
    }
    return j13;
}
var q11 = {}, H13 = false;
function dew$17() {
    if (H13) return q11;
    H13 = true;
    q11 = PassThrough;
    var e273 = dew$24();
    dew$f2()(PassThrough, e273);
    function PassThrough(t237) {
        if (!(this instanceof PassThrough)) return new PassThrough(t237);
        e273.call(this, t237);
    }
    PassThrough.prototype._transform = function(e274, t, r172) {
        r172(null, e274);
    };
    return q11;
}
var V14 = {}, G11 = false;
function dew19() {
    if (G11) return V14;
    G11 = true;
    var e275;
    function once(e276) {
        var t239 = false;
        return function() {
            if (!t239) {
                t239 = true;
                e276.apply(void 0, arguments);
            }
        };
    }
    var t238 = dew$b3().codes, r173 = t238.ERR_MISSING_ARGS, n123 = t238.ERR_STREAM_DESTROYED;
    function noop5(e277) {
        if (e277) throw e277;
    }
    function isRequest(e278) {
        return e278.setHeader && "function" === typeof e278.abort;
    }
    function destroyer(t240, r174, i79, a52) {
        a52 = once(a52);
        var o337 = false;
        t240.on("close", function() {
            o337 = true;
        });
        void 0 === e275 && (e275 = dew$63());
        e275(t240, {
            readable: r174,
            writable: i79
        }, function(e279) {
            if (e279) return a52(e279);
            o337 = true;
            a52();
        });
        var f181 = false;
        return function(e280) {
            if (!o337 && !f181) {
                f181 = true;
                if (isRequest(t240)) return t240.abort();
                if ("function" === typeof t240.destroy) return t240.destroy();
                a52(e280 || new n123("pipe"));
            }
        };
    }
    function call(e281) {
        e281();
    }
    function pipe(e282, t241) {
        return e282.pipe(t241);
    }
    function popCallback(e283) {
        return e283.length ? "function" !== typeof e283[e283.length - 1] ? noop5 : e283.pop() : noop5;
    }
    function pipeline() {
        for(var e284 = arguments.length, t242 = new Array(e284), n124 = 0; n124 < e284; n124++)t242[n124] = arguments[n124];
        var i80 = popCallback(t242);
        Array.isArray(t242[0]) && (t242 = t242[0]);
        if (t242.length < 2) throw new r173("streams");
        var a53;
        var o342 = t242.map(function(e285, r175) {
            var n125 = r175 < t242.length - 1;
            var f19 = r175 > 0;
            return destroyer(e285, n125, f19, function(e286) {
                a53 || (a53 = e286);
                e286 && o342.forEach(call);
                if (!n125) {
                    o342.forEach(call);
                    i80(a53);
                }
            });
        });
        return t242.reduce(pipe);
    }
    V14 = pipeline;
    return V14;
}
xe4._extend;
xe4.callbackify;
xe4.debuglog;
xe4.deprecate;
xe4.format;
xe4.inherits;
xe4.inspect;
xe4.isArray;
xe4.isBoolean;
xe4.isBuffer;
xe4.isDate;
xe4.isError;
xe4.isFunction;
xe4.isNull;
xe4.isNullOrUndefined;
xe4.isNumber;
xe4.isObject;
xe4.isPrimitive;
xe4.isRegExp;
xe4.isString;
xe4.isSymbol;
xe4.isUndefined;
xe4.log;
var h23 = xe4.promisify;
xe4.types;
xe4.TextEncoder = globalThis.TextEncoder;
xe4.TextDecoder = globalThis.TextDecoder;
y16.once = function(e1, r1103) {
    return new Promise((t1166, n1161)=>{
        function eventListener(...r257) {
            void 0 !== o150 && e1.removeListener("error", o150);
            t1166(r257);
        }
        let o150;
        if ("error" !== r1103) {
            o150 = (r346)=>{
                e1.removeListener(name, eventListener);
                n1161(r346);
            };
            e1.once("error", o150);
        }
        e1.once(r1103, eventListener);
    });
};
y16.on = function(e2, r440) {
    const t2151 = [];
    const n2140 = [];
    let o247 = null;
    let s1126 = false;
    const i1122 = {
        async next () {
            const e3143 = t2151.shift();
            if (e3143) return createIterResult(e3143, false);
            if (o247) {
                const e4122 = Promise.reject(o247);
                o247 = null;
                return e4122;
            }
            return s1126 ? createIterResult(void 0, true) : new Promise((e5122, r534)=>n2140.push({
                    resolve: e5122,
                    reject: r534
                })
            );
        },
        async return () {
            e2.removeListener(r440, eventHandler);
            e2.removeListener("error", errorHandler);
            s1126 = true;
            for (const e6121 of n2140)e6121.resolve(createIterResult(void 0, true));
            return createIterResult(void 0, true);
        },
        throw (t3120) {
            o247 = t3120;
            e2.removeListener(r440, eventHandler);
            e2.removeListener("error", errorHandler);
        },
        [Symbol.asyncIterator] () {
            return this;
        }
    };
    e2.on(r440, eventHandler);
    e2.on("error", errorHandler);
    return i1122;
    function eventHandler(...e7113) {
        const r633 = n2140.shift();
        r633 ? r633.resolve(createIterResult(e7113, false)) : t2151.push(e7113);
    }
    function errorHandler(e8117) {
        s1126 = true;
        const r728 = n2140.shift();
        r728 ? r728.reject(e8117) : o247 = e8117;
        i1122.return();
    }
};
const { EventEmitter: r51 , defaultMaxListeners: t37 , init: n45 , listenerCount: o40 , on: s38 , once: i36  } = y16;
var d26 = {}, m25 = false;
var u32 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew20() {
    if (m25) return d26;
    m25 = true;
    d26 = Stream;
    var f124 = y16.EventEmitter;
    var c68 = dew$f2();
    c68(Stream, f124);
    Stream.Readable = dew$33();
    Stream.Writable = dew$83();
    Stream.Duplex = dew$73();
    Stream.Transform = dew$24();
    Stream.PassThrough = dew$17();
    Stream.finished = dew$63();
    Stream.pipeline = dew19();
    Stream.Stream = Stream;
    function Stream() {
        f124.call(this || u32);
    }
    Stream.prototype.pipe = function(e1, r1104) {
        var n1162 = this || u32;
        function ondata(r258) {
            e1.writable && false === e1.write(r258) && n1162.pause && n1162.pause();
        }
        n1162.on("data", ondata);
        function ondrain() {
            n1162.readable && n1162.resume && n1162.resume();
        }
        e1.on("drain", ondrain);
        if (!e1._isStdio && (!r1104 || false !== r1104.end)) {
            n1162.on("end", onend);
            n1162.on("close", onclose);
        }
        var o157 = false;
        function onend() {
            if (!o157) {
                o157 = true;
                e1.end();
            }
        }
        function onclose() {
            if (!o157) {
                o157 = true;
                "function" === typeof e1.destroy && e1.destroy();
            }
        }
        function onerror(e2) {
            cleanup();
            if (0 === f124.listenerCount(this || u32, "error")) throw e2;
        }
        n1162.on("error", onerror);
        e1.on("error", onerror);
        function cleanup() {
            n1162.removeListener("data", ondata);
            e1.removeListener("drain", ondrain);
            n1162.removeListener("end", onend);
            n1162.removeListener("close", onclose);
            n1162.removeListener("error", onerror);
            e1.removeListener("error", onerror);
            n1162.removeListener("end", cleanup);
            n1162.removeListener("close", cleanup);
            e1.removeListener("close", cleanup);
        }
        n1162.on("end", cleanup);
        n1162.on("close", cleanup);
        e1.on("close", cleanup);
        e1.emit("pipe", n1162);
        return e1;
    };
    return d26;
}
const f30 = dew20();
var i37 = f30.Readable;
i37.wrap = function(e1000, r1105) {
    r1105 = Object.assign({
        objectMode: null != e1000.readableObjectMode || null != e1000.objectMode || true
    }, r1105);
    r1105.destroy = function(r259, t1167) {
        e1000.destroy(r259);
        t1167(r259);
    };
    return new i37(r1105).wrap(e1000);
};
f30.Writable;
f30.Duplex;
f30.Transform;
f30.PassThrough;
f30.finished;
f30.pipeline;
f30.Stream;
({
    finished: h23(f30.finished),
    pipeline: h23(f30.pipeline)
});
const t38 = /^xn--/, n46 = /[^\0-\x7E]/, e32 = /[\x2E\u3002\uFF0E\uFF61]/g, r52 = {
    overflow: "Overflow: input needs wider integers to process",
    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
    "invalid-input": "Invalid input"
}, c35 = Math.floor, s39 = String.fromCharCode;
function i38(o158) {
    throw new RangeError(r52[o158]);
}
function f31(o248, t1168) {
    const n1163 = o248.split("@");
    let r1106 = "";
    n1163.length > 1 && (r1106 = n1163[0] + "@", o248 = n1163[1]);
    const c139 = (function(o338, t2152) {
        const n2141 = [];
        let e1 = o338.length;
        for(; e1--;)n2141[e1] = t2152(o338[e1]);
        return n2141;
    })((o248 = o248.replace(e32, ".")).split("."), t1168).join(".");
    return r1106 + c139;
}
function l34(o427) {
    const t3121 = [];
    let n349 = 0;
    const e2 = o427.length;
    for(; n349 < e2;){
        const r260 = o427.charCodeAt(n349++);
        if (r260 >= 55296 && r260 <= 56319 && n349 < e2) {
            const e3144 = o427.charCodeAt(n349++);
            56320 == (64512 & e3144) ? t3121.push(((1023 & r260) << 10) + (1023 & e3144) + 65536) : (t3121.push(r260), n349--);
        } else t3121.push(r260);
    }
    return t3121;
}
const u33 = function(o525, t4116) {
    return o525 + 22 + 75 * (o525 < 26) - ((0 != t4116) << 5);
}, a38 = function(o618, t5116, n443) {
    let e4123 = 0;
    for(o618 = n443 ? c35(o618 / 700) : o618 >> 1, o618 += c35(o618 / t5116); o618 > 455; e4123 += 36)o618 = c35(o618 / 35);
    return c35(e4123 + 36 * o618 / (o618 + 38));
}, d27 = function(t641) {
    const n537 = [], e5123 = t641.length;
    let r347 = 0, s2114 = 128, p125 = 72, g44 = t641.lastIndexOf("-");
    g44 < 0 && (g44 = 0);
    for(let o717 = 0; o717 < g44; ++o717)t641.charCodeAt(o717) >= 128 && i38("not-basic"), n537.push(t641.charCodeAt(o717));
    for(let C30 = g44 > 0 ? g44 + 1 : 0; C30 < e5123;){
        let g46 = r347;
        for(let n635 = 1, s1127 = 36;; s1127 += 36){
            C30 >= e5123 && i38("invalid-input");
            const g45 = (v38 = t641.charCodeAt(C30++)) - 48 < 10 ? v38 - 22 : v38 - 65 < 26 ? v38 - 65 : v38 - 97 < 26 ? v38 - 97 : 36;
            (g45 >= 36 || g45 > c35((2147483647 - r347) / n635)) && i38("overflow"), r347 += g45 * n635;
            const w39 = s1127 <= p125 ? 1 : s1127 >= p125 + 26 ? 26 : s1127 - p125;
            if (g45 < w39) break;
            const x32 = 36 - w39;
            n635 > c35(2147483647 / x32) && i38("overflow"), n635 *= x32;
        }
        const w40 = n537.length + 1;
        p125 = a38(r347 - g46, w40, 0 == g46), c35(r347 / w40) > 2147483647 - s2114 && i38("overflow"), s2114 += c35(r347 / w40), r347 %= w40, n537.splice(r347++, 0, s2114);
    }
    var v38;
    return String.fromCodePoint(...n537);
}, h24 = function(t737) {
    const n733 = [];
    let e6122 = (t737 = l34(t737)).length, r443 = 128, p217 = 0, g47 = 72;
    for (const o815 of t737)o815 < 128 && n733.push(s39(o815));
    let v39 = n733.length, C32 = v39;
    for(v39 && n733.push("-"); C32 < e6122;){
        let e8118 = 2147483647;
        for (const o99 of t737)o99 >= r443 && o99 < e8118 && (e8118 = o99);
        const w42 = C32 + 1;
        e8118 - r443 > c35((2147483647 - p217) / w42) && i38("overflow"), p217 += (e8118 - r443) * w42, r443 = e8118;
        for (const e7114 of t737)if (e7114 < r443 && ++p217 > 2147483647 && i38("overflow"), e7114 == r443) {
            let o1117 = p217;
            for(let t833 = 36;; t833 += 36){
                const e9117 = t833 <= g47 ? 1 : t833 >= g47 + 26 ? 26 : t833 - g47;
                if (o1117 < e9117) break;
                const r535 = o1117 - e9117, p316 = 36 - e9117;
                n733.push(s39(u33(e9117 + r535 % p316, 0))), o1117 = c35(r535 / p316);
            }
            n733.push(s39(u33(o1117, 0))), g47 = a38(p217, w42, C32 == v39), p217 = 0, ++C32;
        }
        ++p217, ++r443;
    }
    return n733.join("");
};
var p29 = {
    version: "2.1.0",
    ucs2: {
        decode: l34,
        encode: (o1216)=>String.fromCodePoint(...o1216)
    },
    decode: d27,
    encode: h24,
    toASCII: function(o1315) {
        return f31(o1315, function(o14) {
            return n46.test(o14) ? "xn--" + h24(o14) : o14;
        });
    },
    toUnicode: function(o159) {
        return f31(o159, function(o167) {
            return t38.test(o167) ? d27(o167.slice(4).toLowerCase()) : o167;
        });
    }
};
p29.decode;
p29.encode;
p29.toASCII;
p29.toUnicode;
p29.ucs2;
p29.version;
function e33(o160, a) {
    return Object.prototype.hasOwnProperty.call(o160, a);
}
var n47 = function(o249, a, c69, i263) {
    a = a || "&", c69 = c69 || "=";
    var s394 = {};
    if ("string" != typeof o249 || 0 === o249.length) return s394;
    var u99 = /\+/g;
    o249 = o249.split(a);
    var p53 = 1e3;
    i263 && "number" == typeof i263.maxKeys && (p53 = i263.maxKeys);
    var d58 = o249.length;
    p53 > 0 && d58 > p53 && (d58 = p53);
    for(var f68 = 0; f68 < d58; ++f68){
        var y37, m46, l80, v40, b45 = o249[f68].replace(u99, "%20"), g48 = b45.indexOf(c69);
        g48 >= 0 ? (y37 = b45.substr(0, g48), m46 = b45.substr(g48 + 1)) : (y37 = b45, m46 = ""), l80 = decodeURIComponent(y37), v40 = decodeURIComponent(m46), e33(s394, l80) ? Array.isArray(s394[l80]) ? s394[l80].push(v40) : s394[l80] = [
            s394[l80],
            v40
        ] : s394[l80] = v40;
    }
    return s394;
}, r53 = function(o339) {
    switch(typeof o339){
        case "string":
            return o339;
        case "boolean":
            return o339 ? "true" : "false";
        case "number":
            return isFinite(o339) ? o339 : "";
        default:
            return "";
    }
}, t39 = function(o428, a, c70, i1123) {
    return a = a || "&", c70 = c70 || "=", null === o428 && (o428 = void 0), "object" == typeof o428 ? Object.keys(o428).map(function(i264) {
        var s395 = encodeURIComponent(r53(i264)) + c70;
        return Array.isArray(o428[i264]) ? o428[i264].map(function(o526) {
            return s395 + encodeURIComponent(r53(o526));
        }).join(a) : s395 + encodeURIComponent(r53(o428[i264]));
    }).join(a) : i1123 ? encodeURIComponent(r53(i1123)) + c70 + encodeURIComponent(r53(o428)) : "";
}, o41 = {};
o41.decode = o41.parse = n47, o41.encode = o41.stringify = t39;
o41.decode;
o41.encode;
o41.parse;
o41.stringify;
var a39 = {}, o42 = p29, h25 = {
    isString: function(t1169) {
        return "string" == typeof t1169;
    },
    isObject: function(t2153) {
        return "object" == typeof t2153 && null !== t2153;
    },
    isNull: function(t3122) {
        return null === t3122;
    },
    isNullOrUndefined: function(t4117) {
        return null == t4117;
    }
};
function r54() {
    this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
}
a39.parse = O17, a39.resolve = function(t5117, e1) {
    return O17(t5117, !1, !0).resolve(e1);
}, a39.resolveObject = function(t642, e2) {
    return t642 ? O17(t642, !1, !0).resolveObject(e2) : e2;
}, a39.format = function(t738) {
    h25.isString(t738) && (t738 = O17(t738));
    return t738 instanceof r54 ? t738.format() : r54.prototype.format.call(t738);
}, a39.Url = r54;
var i39 = /^([a-z0-9.+-]+:)/i, l35 = /:[0-9]*$/, c36 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, f32 = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat([
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "\t"
]), u34 = [
    "'"
].concat(f32), p30 = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(u34), m26 = [
    "/",
    "?",
    "#"
], v25 = /^[+a-z0-9A-Z_-]{0,63}$/, d28 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, g23 = {
    javascript: !0,
    "javascript:": !0
}, b22 = {
    javascript: !0,
    "javascript:": !0
}, w18 = {
    http: !0,
    https: !0,
    ftp: !0,
    gopher: !0,
    file: !0,
    "http:": !0,
    "https:": !0,
    "ftp:": !0,
    "gopher:": !0,
    "file:": !0
}, U15 = o41;
function O17(t834, e3145, n1164) {
    if (t834 && h25.isObject(t834) && t834 instanceof r54) return t834;
    var s1128 = new r54;
    return s1128.parse(t834, e3145, n1164), s1128;
}
r54.prototype.parse = function(t930, e4124, n2142) {
    if (!h25.isString(t930)) throw new TypeError("Parameter 'url' must be a string, not " + typeof t930);
    var s2115 = t930.indexOf("?"), a156 = -1 !== s2115 && s2115 < t930.indexOf("#") ? "?" : "#", l136 = t930.split(a156);
    l136[0] = l136[0].replace(/\\/g, "/");
    var f125 = t930 = l136.join(a156);
    if (f125 = f125.trim(), !n2142 && 1 === t930.split("#").length) {
        var y118 = c36.exec(f125);
        if (y118) return this.path = f125, this.href = f125, this.pathname = y118[1], y118[2] ? (this.search = y118[2], this.query = e4124 ? U15.parse(this.search.substr(1)) : this.search.substr(1)) : e4124 && (this.search = "", this.query = {}), this;
    }
    var R111 = i39.exec(f125);
    if (R111) {
        var A112 = (R111 = R111[0]).toLowerCase();
        this.protocol = A112, f125 = f125.substr(R111.length);
    }
    if (n2142 || R111 || f125.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var L110 = "//" === f125.substr(0, 2);
        !L110 || R111 && b22[R111] || (f125 = f125.substr(2), this.slashes = !0);
    }
    if (!b22[R111] && (L110 || R111 && !w18[R111])) {
        for(var P113, C113, j114 = -1, x113 = 0; x113 < m26.length; x113++)-1 !== (D111 = f125.indexOf(m26[x113])) && (-1 === j114 || D111 < j114) && (j114 = D111);
        -1 !== (C113 = -1 === j114 ? f125.lastIndexOf("@") : f125.lastIndexOf("@", j114)) && (P113 = f125.slice(0, C113), f125 = f125.slice(C113 + 1), this.auth = decodeURIComponent(P113)), j114 = -1;
        for(x113 = 0; x113 < p30.length; x113++){
            var D111;
            -1 !== (D111 = f125.indexOf(p30[x113])) && (-1 === j114 || D111 < j114) && (j114 = D111);
        }
        -1 === j114 && (j114 = f125.length), this.host = f125.slice(0, j114), f125 = f125.slice(j114), this.parseHost(), this.hostname = this.hostname || "";
        var I113 = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
        if (!I113) for(var q110 = this.hostname.split(/\./), T114 = (x113 = 0, q110.length); x113 < T114; x113++){
            var k113 = q110[x113];
            if (k113 && !k113.match(v25)) {
                for(var $114 = "", F112 = 0, _116 = k113.length; F112 < _116; F112++)k113.charCodeAt(F112) > 127 ? $114 += "x" : $114 += k113[F112];
                if (!$114.match(v25)) {
                    var z17 = q110.slice(0, x113), S114 = q110.slice(x113 + 1), N112 = k113.match(d28);
                    N112 && (z17.push(N112[1]), S114.unshift(N112[2])), S114.length && (f125 = "/" + S114.join(".") + f125), this.hostname = z17.join(".");
                    break;
                }
            }
        }
        this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), I113 || (this.hostname = o42.toASCII(this.hostname));
        var E116 = this.port ? ":" + this.port : "", W110 = this.hostname || "";
        this.host = W110 + E116, this.href += this.host, I113 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== f125[0] && (f125 = "/" + f125));
    }
    if (!g23[A112]) for(x113 = 0, T114 = u34.length; x113 < T114; x113++){
        var H110 = u34[x113];
        if (-1 !== f125.indexOf(H110)) {
            var Z111 = encodeURIComponent(H110);
            Z111 === H110 && (Z111 = escape(H110)), f125 = f125.split(H110).join(Z111);
        }
    }
    var J17 = f125.indexOf("#");
    -1 !== J17 && (this.hash = f125.substr(J17), f125 = f125.slice(0, J17));
    var B114 = f125.indexOf("?");
    if (-1 !== B114 ? (this.search = f125.substr(B114), this.query = f125.substr(B114 + 1), e4124 && (this.query = U15.parse(this.query)), f125 = f125.slice(0, B114)) : e4124 && (this.search = "", this.query = {}), f125 && (this.pathname = f125), w18[A112] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
        E116 = this.pathname || "";
        var G18 = this.search || "";
        this.path = E116 + G18;
    }
    return this.href = this.format(), this;
}, r54.prototype.format = function() {
    var t1029 = this.auth || "";
    t1029 && (t1029 = (t1029 = encodeURIComponent(t1029)).replace(/%3A/i, ":"), t1029 += "@");
    var e5124 = this.protocol || "", n350 = this.pathname || "", s396 = this.hash || "", a232 = !1, o168 = "";
    this.host ? a232 = t1029 + this.host : this.hostname && (a232 = t1029 + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (a232 += ":" + this.port)), this.query && h25.isObject(this.query) && Object.keys(this.query).length && (o168 = U15.stringify(this.query));
    var i1124 = this.search || o168 && "?" + o168 || "";
    return e5124 && ":" !== e5124.substr(-1) && (e5124 += ":"), this.slashes || (!e5124 || w18[e5124]) && !1 !== a232 ? (a232 = "//" + (a232 || ""), n350 && "/" !== n350.charAt(0) && (n350 = "/" + n350)) : a232 || (a232 = ""), s396 && "#" !== s396.charAt(0) && (s396 = "#" + s396), i1124 && "?" !== i1124.charAt(0) && (i1124 = "?" + i1124), e5124 + a232 + (n350 = n350.replace(/[?#]/g, function(t1170) {
        return encodeURIComponent(t1170);
    })) + (i1124 = i1124.replace("#", "%23")) + s396;
}, r54.prototype.resolve = function(t1227) {
    return this.resolveObject(O17(t1227, !1, !0)).format();
}, r54.prototype.resolveObject = function(t1327) {
    if (h25.isString(t1327)) {
        var e6123 = new r54;
        e6123.parse(t1327, !1, !0), t1327 = e6123;
    }
    for(var n444 = new r54, s426 = Object.keys(this), a330 = 0; a330 < s426.length; a330++){
        var o250 = s426[a330];
        n444[o250] = this[o250];
    }
    if (n444.hash = t1327.hash, "" === t1327.href) return n444.href = n444.format(), n444;
    if (t1327.slashes && !t1327.protocol) {
        for(var i265 = Object.keys(t1327), l225 = 0; l225 < i265.length; l225++){
            var c140 = i265[l225];
            "protocol" !== c140 && (n444[c140] = t1327[c140]);
        }
        return w18[n444.protocol] && n444.hostname && !n444.pathname && (n444.path = n444.pathname = "/"), n444.href = n444.format(), n444;
    }
    if (t1327.protocol && t1327.protocol !== n444.protocol) {
        if (!w18[t1327.protocol]) {
            for(var f217 = Object.keys(t1327), u130 = 0; u130 < f217.length; u130++){
                var p126 = f217[u130];
                n444[p126] = t1327[p126];
            }
            return n444.href = n444.format(), n444;
        }
        if (n444.protocol = t1327.protocol, t1327.host || b22[t1327.protocol]) n444.pathname = t1327.pathname;
        else {
            for(var m122 = (t1327.pathname || "").split("/"); m122.length && !(t1327.host = m122.shift()););
            t1327.host || (t1327.host = ""), t1327.hostname || (t1327.hostname = ""), "" !== m122[0] && m122.unshift(""), m122.length < 2 && m122.unshift(""), n444.pathname = m122.join("/");
        }
        if (n444.search = t1327.search, n444.query = t1327.query, n444.host = t1327.host || "", n444.auth = t1327.auth, n444.hostname = t1327.hostname || t1327.host, n444.port = t1327.port, n444.pathname || n444.search) {
            var v118 = n444.pathname || "", d124 = n444.search || "";
            n444.path = v118 + d124;
        }
        return n444.slashes = n444.slashes || t1327.slashes, n444.href = n444.format(), n444;
    }
    var g117 = n444.pathname && "/" === n444.pathname.charAt(0), U111 = t1327.host || t1327.pathname && "/" === t1327.pathname.charAt(0), y214 = U111 || g117 || n444.host && t1327.pathname, R24 = y214, A26 = n444.pathname && n444.pathname.split("/") || [], L24 = (m122 = t1327.pathname && t1327.pathname.split("/") || [], n444.protocol && !w18[n444.protocol]);
    if (L24 && (n444.hostname = "", n444.port = null, n444.host && ("" === A26[0] ? A26[0] = n444.host : A26.unshift(n444.host)), n444.host = "", t1327.protocol && (t1327.hostname = null, t1327.port = null, t1327.host && ("" === m122[0] ? m122[0] = t1327.host : m122.unshift(t1327.host)), t1327.host = null), y214 = y214 && ("" === m122[0] || "" === A26[0])), U111) n444.host = t1327.host || "" === t1327.host ? t1327.host : n444.host, n444.hostname = t1327.hostname || "" === t1327.hostname ? t1327.hostname : n444.hostname, n444.search = t1327.search, n444.query = t1327.query, A26 = m122;
    else if (m122.length) A26 || (A26 = []), A26.pop(), A26 = A26.concat(m122), n444.search = t1327.search, n444.query = t1327.query;
    else if (!h25.isNullOrUndefined(t1327.search)) {
        L24 && (n444.hostname = n444.host = A26.shift(), (D23 = !!(n444.host && n444.host.indexOf("@") > 0) && n444.host.split("@")) && (n444.auth = D23.shift(), n444.host = n444.hostname = D23.shift()));
        return n444.search = t1327.search, n444.query = t1327.query, h25.isNull(n444.pathname) && h25.isNull(n444.search) || (n444.path = (n444.pathname ? n444.pathname : "") + (n444.search ? n444.search : "")), n444.href = n444.format(), n444;
    }
    if (!A26.length) return n444.pathname = null, n444.search ? n444.path = "/" + n444.search : n444.path = null, n444.href = n444.format(), n444;
    for(var P25 = A26.slice(-1)[0], C210 = (n444.host || t1327.host || A26.length > 1) && ("." === P25 || ".." === P25) || "" === P25, j25 = 0, x210 = A26.length; x210 >= 0; x210--)"." === (P25 = A26[x210]) ? A26.splice(x210, 1) : ".." === P25 ? (A26.splice(x210, 1), j25++) : j25 && (A26.splice(x210, 1), j25--);
    if (!y214 && !R24) for(; j25--; j25)A26.unshift("..");
    !y214 || "" === A26[0] || A26[0] && "/" === A26[0].charAt(0) || A26.unshift(""), C210 && "/" !== A26.join("/").substr(-1) && A26.push("");
    var D23, I27 = "" === A26[0] || A26[0] && "/" === A26[0].charAt(0);
    L24 && (n444.hostname = n444.host = I27 ? "" : A26.length ? A26.shift() : "", (D23 = !!(n444.host && n444.host.indexOf("@") > 0) && n444.host.split("@")) && (n444.auth = D23.shift(), n444.host = n444.hostname = D23.shift()));
    return (y214 = y214 || n444.host && A26.length) && !I27 && A26.unshift(""), A26.length ? n444.pathname = A26.join("/") : (n444.pathname = null, n444.path = null), h25.isNull(n444.pathname) && h25.isNull(n444.search) || (n444.path = (n444.pathname ? n444.pathname : "") + (n444.search ? n444.search : "")), n444.auth = t1327.auth || n444.auth, n444.slashes = n444.slashes || t1327.slashes, n444.href = n444.format(), n444;
}, r54.prototype.parseHost = function() {
    var t1425 = this.host, e7115 = l35.exec(t1425);
    e7115 && (":" !== (e7115 = e7115[0]) && (this.port = e7115.substr(1)), t1425 = t1425.substr(0, t1425.length - e7115.length)), t1425 && (this.hostname = t1425);
};
a39.Url;
a39.format;
a39.resolve;
a39.resolveObject;
var y19 = {}, R13 = false;
function dew21() {
    if (R13) return y19;
    R13 = true;
    var t1524 = T8;
    function assertPath(t1624) {
        if ("string" !== typeof t1624) throw new TypeError("Path must be a string. Received " + JSON.stringify(t1624));
    }
    function normalizeStringPosix(t1720, e9118) {
        var n538 = "";
        var s519 = 0;
        var a427 = -1;
        var o340 = 0;
        var h120;
        for(var i330 = 0; i330 <= t1720.length; ++i330){
            if (i330 < t1720.length) h120 = t1720.charCodeAt(i330);
            else {
                if (47 === h120) break;
                h120 = 47;
            }
            if (47 === h120) {
                if (a427 === i330 - 1 || 1 === o340) ;
                else if (a427 !== i330 - 1 && 2 === o340) {
                    if (n538.length < 2 || 2 !== s519 || 46 !== n538.charCodeAt(n538.length - 1) || 46 !== n538.charCodeAt(n538.length - 2)) {
                        if (n538.length > 2) {
                            var l318 = n538.lastIndexOf("/");
                            if (l318 !== n538.length - 1) {
                                if (-1 === l318) {
                                    n538 = "";
                                    s519 = 0;
                                } else {
                                    n538 = n538.slice(0, l318);
                                    s519 = n538.length - 1 - n538.lastIndexOf("/");
                                }
                                a427 = i330;
                                o340 = 0;
                                continue;
                            }
                        } else if (2 === n538.length || 1 === n538.length) {
                            n538 = "";
                            s519 = 0;
                            a427 = i330;
                            o340 = 0;
                            continue;
                        }
                    }
                    if (e9118) {
                        n538.length > 0 ? n538 += "/.." : n538 = "..";
                        s519 = 2;
                    }
                } else {
                    n538.length > 0 ? n538 += "/" + t1720.slice(a427 + 1, i330) : n538 = t1720.slice(a427 + 1, i330);
                    s519 = i330 - a427 - 1;
                }
                a427 = i330;
                o340 = 0;
            } else 46 === h120 && -1 !== o340 ? ++o340 : o340 = -1;
        }
        return n538;
    }
    function _format(t1819, e1030) {
        var n636 = e1030.dir || e1030.root;
        var s616 = e1030.base || (e1030.name || "") + (e1030.ext || "");
        return n636 ? n636 === e1030.root ? n636 + s616 : n636 + t1819 + s616 : s616;
    }
    var e8119 = {
        resolve: function resolve() {
            var e1129 = "";
            var n734 = false;
            var s716;
            for(var a520 = arguments.length - 1; a520 >= -1 && !n734; a520--){
                var o429;
                if (a520 >= 0) o429 = arguments[a520];
                else {
                    void 0 === s716 && (s716 = t1524.cwd());
                    o429 = s716;
                }
                assertPath(o429);
                if (0 !== o429.length) {
                    e1129 = o429 + "/" + e1129;
                    n734 = 47 === o429.charCodeAt(0);
                }
            }
            e1129 = normalizeStringPosix(e1129, !n734);
            return n734 ? e1129.length > 0 ? "/" + e1129 : "/" : e1129.length > 0 ? e1129 : ".";
        },
        normalize: function normalize(t1919) {
            assertPath(t1919);
            if (0 === t1919.length) return ".";
            var e1229 = 47 === t1919.charCodeAt(0);
            var n830 = 47 === t1919.charCodeAt(t1919.length - 1);
            t1919 = normalizeStringPosix(t1919, !e1229);
            0 !== t1919.length || e1229 || (t1919 = ".");
            t1919.length > 0 && n830 && (t1919 += "/");
            return e1229 ? "/" + t1919 : t1919;
        },
        isAbsolute: function isAbsolute(t2018) {
            assertPath(t2018);
            return t2018.length > 0 && 47 === t2018.charCodeAt(0);
        },
        join: function join() {
            if (0 === arguments.length) return ".";
            var t2154;
            for(var n929 = 0; n929 < arguments.length; ++n929){
                var s816 = arguments[n929];
                assertPath(s816);
                s816.length > 0 && (void 0 === t2154 ? t2154 = s816 : t2154 += "/" + s816);
            }
            return void 0 === t2154 ? "." : e8119.normalize(t2154);
        },
        relative: function relative(t2218, n1028) {
            assertPath(t2218);
            assertPath(n1028);
            if (t2218 === n1028) return "";
            t2218 = e8119.resolve(t2218);
            n1028 = e8119.resolve(n1028);
            if (t2218 === n1028) return "";
            var s916 = 1;
            for(; s916 < t2218.length; ++s916)if (47 !== t2218.charCodeAt(s916)) break;
            var a615 = t2218.length;
            var o527 = a615 - s916;
            var h216 = 1;
            for(; h216 < n1028.length; ++h216)if (47 !== n1028.charCodeAt(h216)) break;
            var i423 = n1028.length;
            var l417 = i423 - h216;
            var c220 = o527 < l417 ? o527 : l417;
            var f314 = -1;
            var u226 = 0;
            for(; u226 <= c220; ++u226){
                if (u226 === c220) {
                    if (l417 > c220) {
                        if (47 === n1028.charCodeAt(h216 + u226)) return n1028.slice(h216 + u226 + 1);
                        if (0 === u226) return n1028.slice(h216 + u226);
                    } else o527 > c220 && (47 === t2218.charCodeAt(s916 + u226) ? f314 = u226 : 0 === u226 && (f314 = 0));
                    break;
                }
                var p218 = t2218.charCodeAt(s916 + u226);
                var m215 = n1028.charCodeAt(h216 + u226);
                if (p218 !== m215) break;
                47 === p218 && (f314 = u226);
            }
            var v215 = "";
            for(u226 = s916 + f314 + 1; u226 <= a615; ++u226)u226 !== a615 && 47 !== t2218.charCodeAt(u226) || (0 === v215.length ? v215 += ".." : v215 += "/..");
            if (v215.length > 0) return v215 + n1028.slice(h216 + f314);
            h216 += f314;
            47 === n1028.charCodeAt(h216) && ++h216;
            return n1028.slice(h216);
        },
        _makeLong: function _makeLong(t2317) {
            return t2317;
        },
        dirname: function dirname(t2415) {
            assertPath(t2415);
            if (0 === t2415.length) return ".";
            var e1328 = t2415.charCodeAt(0);
            var n1165 = 47 === e1328;
            var s1015 = -1;
            var a715 = true;
            for(var o619 = t2415.length - 1; o619 >= 1; --o619){
                e1328 = t2415.charCodeAt(o619);
                if (47 === e1328) {
                    if (!a715) {
                        s1015 = o619;
                        break;
                    }
                } else a715 = false;
            }
            return -1 === s1015 ? n1165 ? "/" : "." : n1165 && 1 === s1015 ? "//" : t2415.slice(0, s1015);
        },
        basename: function basename(t2513, e1427) {
            if (void 0 !== e1427 && "string" !== typeof e1427) throw new TypeError('"ext" argument must be a string');
            assertPath(t2513);
            var n1223 = 0;
            var s1129 = -1;
            var a88 = true;
            var o718;
            if (void 0 !== e1427 && e1427.length > 0 && e1427.length <= t2513.length) {
                if (e1427.length === t2513.length && e1427 === t2513) return "";
                var h314 = e1427.length - 1;
                var i519 = -1;
                for(o718 = t2513.length - 1; o718 >= 0; --o718){
                    var l512 = t2513.charCodeAt(o718);
                    if (47 === l512) {
                        if (!a88) {
                            n1223 = o718 + 1;
                            break;
                        }
                    } else {
                        if (-1 === i519) {
                            a88 = false;
                            i519 = o718 + 1;
                        }
                        if (h314 >= 0) if (l512 === e1427.charCodeAt(h314)) -1 === --h314 && (s1129 = o718);
                        else {
                            h314 = -1;
                            s1129 = i519;
                        }
                    }
                }
                n1223 === s1129 ? s1129 = i519 : -1 === s1129 && (s1129 = t2513.length);
                return t2513.slice(n1223, s1129);
            }
            for(o718 = t2513.length - 1; o718 >= 0; --o718)if (47 === t2513.charCodeAt(o718)) {
                if (!a88) {
                    n1223 = o718 + 1;
                    break;
                }
            } else if (-1 === s1129) {
                a88 = false;
                s1129 = o718 + 1;
            }
            return -1 === s1129 ? "" : t2513.slice(n1223, s1129);
        },
        extname: function extname(t2612) {
            assertPath(t2612);
            var e1526 = -1;
            var n1319 = 0;
            var s1215 = -1;
            var a97 = true;
            var o816 = 0;
            for(var h49 = t2612.length - 1; h49 >= 0; --h49){
                var i616 = t2612.charCodeAt(h49);
                if (47 !== i616) {
                    if (-1 === s1215) {
                        a97 = false;
                        s1215 = h49 + 1;
                    }
                    46 === i616 ? -1 === e1526 ? e1526 = h49 : 1 !== o816 && (o816 = 1) : -1 !== e1526 && (o816 = -1);
                } else if (!a97) {
                    n1319 = h49 + 1;
                    break;
                }
            }
            return -1 === e1526 || -1 === s1215 || 0 === o816 || 1 === o816 && e1526 === s1215 - 1 && e1526 === n1319 + 1 ? "" : t2612.slice(e1526, s1215);
        },
        format: function format(t2712) {
            if (null === t2712 || "object" !== typeof t2712) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t2712);
            return _format("/", t2712);
        },
        parse: function parse(t2812) {
            assertPath(t2812);
            var e1626 = {
                root: "",
                dir: "",
                base: "",
                ext: "",
                name: ""
            };
            if (0 === t2812.length) return e1626;
            var n1419 = t2812.charCodeAt(0);
            var s1314 = 47 === n1419;
            var a107;
            if (s1314) {
                e1626.root = "/";
                a107 = 1;
            } else a107 = 0;
            var o910 = -1;
            var h55 = 0;
            var i715 = -1;
            var l612 = true;
            var c317 = t2812.length - 1;
            var f413 = 0;
            for(; c317 >= a107; --c317){
                n1419 = t2812.charCodeAt(c317);
                if (47 !== n1419) {
                    if (-1 === i715) {
                        l612 = false;
                        i715 = c317 + 1;
                    }
                    46 === n1419 ? -1 === o910 ? o910 = c317 : 1 !== f413 && (f413 = 1) : -1 !== o910 && (f413 = -1);
                } else if (!l612) {
                    h55 = c317 + 1;
                    break;
                }
            }
            if (-1 === o910 || -1 === i715 || 0 === f413 || 1 === f413 && o910 === i715 - 1 && o910 === h55 + 1) -1 !== i715 && (e1626.base = e1626.name = 0 === h55 && s1314 ? t2812.slice(1, i715) : t2812.slice(h55, i715));
            else {
                if (0 === h55 && s1314) {
                    e1626.name = t2812.slice(1, o910);
                    e1626.base = t2812.slice(1, i715);
                } else {
                    e1626.name = t2812.slice(h55, o910);
                    e1626.base = t2812.slice(h55, i715);
                }
                e1626.ext = t2812.slice(o910, i715);
            }
            h55 > 0 ? e1626.dir = t2812.slice(0, h55 - 1) : s1314 && (e1626.dir = "/");
            return e1626;
        },
        sep: "/",
        delimiter: ":",
        win32: null,
        posix: null
    };
    e8119.posix = e8119;
    y19 = e8119;
    return y19;
}
var A15 = dew21();
const L13 = "undefined" !== typeof Deno ? "windows" === Deno.build.os ? "win32" : Deno.build.os : void 0;
a39.URL = "undefined" !== typeof URL ? URL : null;
a39.pathToFileURL = pathToFileURL$1;
a39.fileURLToPath = fileURLToPath$1;
a39.Url;
a39.format;
a39.resolve;
a39.resolveObject;
a39.URL;
const D14 = "win32" === L13;
const I16 = /\//g;
const q12 = /%/g;
const T15 = /\\/g;
const k14 = /\n/g;
const $15 = /\r/g;
const F15 = /\t/g;
function fileURLToPath$1(t2912) {
    if ("string" === typeof t2912) t2912 = new URL(t2912);
    else if (!(t2912 instanceof URL)) throw new Deno.errors.InvalidData("invalid argument path , must be a string or URL");
    if ("file:" !== t2912.protocol) throw new Deno.errors.InvalidData("invalid url scheme");
    return D14 ? getPathFromURLWin$1(t2912) : getPathFromURLPosix$1(t2912);
}
function getPathFromURLWin$1(t3123) {
    const e1822 = t3123.hostname;
    let n1518 = t3123.pathname;
    for(let t3012 = 0; t3012 < n1518.length; t3012++)if ("%" === n1518[t3012]) {
        const e1725 = n1518.codePointAt(t3012 + 2) || 32;
        if ("2" === n1518[t3012 + 1] && 102 === e1725 || "5" === n1518[t3012 + 1] && 99 === e1725) throw new Deno.errors.InvalidData("must not include encoded \\ or / characters");
    }
    n1518 = n1518.replace(I16, "\\");
    n1518 = decodeURIComponent(n1518);
    if ("" !== e1822) return `\\\\${e1822}${n1518}`;
    {
        const t3211 = 32 | n1518.codePointAt(1);
        const e1921 = n1518[2];
        if (t3211 < 97 || t3211 > 122 || ":" !== e1921) throw new Deno.errors.InvalidData("file url path must be absolute");
        return n1518.slice(1);
    }
}
function getPathFromURLPosix$1(t3411) {
    if ("" !== t3411.hostname) throw new Deno.errors.InvalidData("invalid file url hostname");
    const e2020 = t3411.pathname;
    for(let t3311 = 0; t3311 < e2020.length; t3311++)if ("%" === e2020[t3311]) {
        const n1617 = e2020.codePointAt(t3311 + 2) || 32;
        if ("2" === e2020[t3311 + 1] && 102 === n1617) throw new Deno.errors.InvalidData("must not include encoded / characters");
    }
    return decodeURIComponent(e2020);
}
function pathToFileURL$1(t3511) {
    let e2117 = A15.resolve(t3511);
    const n1717 = t3511.charCodeAt(t3511.length - 1);
    (n1717 === 47 || D14 && n1717 === 92) && e2117[e2117.length - 1] !== A15.sep && (e2117 += "/");
    const s1414 = new URL("file://");
    e2117.includes("%") && (e2117 = e2117.replace(q12, "%25"));
    !D14 && e2117.includes("\\") && (e2117 = e2117.replace(T15, "%5C"));
    e2117.includes("\n") && (e2117 = e2117.replace(k14, "%0A"));
    e2117.includes("\r") && (e2117 = e2117.replace($15, "%0D"));
    e2117.includes("\t") && (e2117 = e2117.replace(F15, "%09"));
    s1414.pathname = e2117;
    return s1414;
}
const _18 = "undefined" !== typeof Deno ? "windows" === Deno.build.os ? "win32" : Deno.build.os : void 0;
a39.URL = "undefined" !== typeof URL ? URL : null;
a39.pathToFileURL = pathToFileURL;
a39.fileURLToPath = fileURLToPath;
a39.Url;
a39.format;
a39.resolve;
a39.resolveObject;
a39.parse;
a39.URL;
const K11 = "win32" === _18;
const M13 = /\//g;
const Q11 = /%/g;
const V15 = /\\/g;
const X11 = /\n/g;
const Y11 = /\r/g;
const tt5 = /\t/g;
function fileURLToPath(t3611) {
    if ("string" === typeof t3611) t3611 = new URL(t3611);
    else if (!(t3611 instanceof URL)) throw new Deno.errors.InvalidData("invalid argument path , must be a string or URL");
    if ("file:" !== t3611.protocol) throw new Deno.errors.InvalidData("invalid url scheme");
    return K11 ? getPathFromURLWin(t3611) : getPathFromURLPosix(t3611);
}
function getPathFromURLWin(t3810) {
    const e2315 = t3810.hostname;
    let n1817 = t3810.pathname;
    for(let t3710 = 0; t3710 < n1817.length; t3710++)if ("%" === n1817[t3710]) {
        const e2216 = n1817.codePointAt(t3710 + 2) || 32;
        if ("2" === n1817[t3710 + 1] && 102 === e2216 || "5" === n1817[t3710 + 1] && 99 === e2216) throw new Deno.errors.InvalidData("must not include encoded \\ or / characters");
    }
    n1817 = n1817.replace(M13, "\\");
    n1817 = decodeURIComponent(n1817);
    if ("" !== e2315) return `\\\\${e2315}${n1817}`;
    {
        const t3910 = 32 | n1817.codePointAt(1);
        const e2415 = n1817[2];
        if (t3910 < 97 || t3910 > 122 || ":" !== e2415) throw new Deno.errors.InvalidData("file url path must be absolute");
        return n1817.slice(1);
    }
}
function getPathFromURLPosix(t41) {
    if ("" !== t41.hostname) throw new Deno.errors.InvalidData("invalid file url hostname");
    const e2515 = t41.pathname;
    for(let t40 = 0; t40 < e2515.length; t40++)if ("%" === e2515[t40]) {
        const n1916 = e2515.codePointAt(t40 + 2) || 32;
        if ("2" === e2515[t40 + 1] && 102 === n1916) throw new Deno.errors.InvalidData("must not include encoded / characters");
    }
    return decodeURIComponent(e2515);
}
function pathToFileURL(t42) {
    let e2614 = a27.resolve(t42);
    const n2016 = t42.charCodeAt(t42.length - 1);
    (n2016 === 47 || K11 && n2016 === 92) && e2614[e2614.length - 1] !== a27.sep && (e2614 += "/");
    const a1116 = new URL("file://");
    e2614.includes("%") && (e2614 = e2614.replace(Q11, "%25"));
    !K11 && e2614.includes("\\") && (e2614 = e2614.replace(V15, "%5C"));
    e2614.includes("\n") && (e2614 = e2614.replace(X11, "%0A"));
    e2614.includes("\r") && (e2614 = e2614.replace(Y11, "%0D"));
    e2614.includes("\t") && (e2614 = e2614.replace(tt5, "%09"));
    a1116.pathname = e2614;
    return a1116;
}
var f33 = {}, l36 = false;
function dew$f3() {
    if (l36) return f33;
    l36 = true;
    Object.defineProperty(f33, "__esModule", {
        value: true
    });
    f33.constants = void 0;
    f33.constants = {
        O_RDONLY: 0,
        O_WRONLY: 1,
        O_RDWR: 2,
        S_IFMT: 61440,
        S_IFREG: 32768,
        S_IFDIR: 16384,
        S_IFCHR: 8192,
        S_IFBLK: 24576,
        S_IFIFO: 4096,
        S_IFLNK: 40960,
        S_IFSOCK: 49152,
        O_CREAT: 64,
        O_EXCL: 128,
        O_NOCTTY: 256,
        O_TRUNC: 512,
        O_APPEND: 1024,
        O_DIRECTORY: 65536,
        O_NOATIME: 262144,
        O_NOFOLLOW: 131072,
        O_SYNC: 1052672,
        O_DIRECT: 16384,
        O_NONBLOCK: 2048,
        S_IRWXU: 448,
        S_IRUSR: 256,
        S_IWUSR: 128,
        S_IXUSR: 64,
        S_IRWXG: 56,
        S_IRGRP: 32,
        S_IWGRP: 16,
        S_IXGRP: 8,
        S_IRWXO: 7,
        S_IROTH: 4,
        S_IWOTH: 2,
        S_IXOTH: 1,
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        UV_FS_SYMLINK_DIR: 1,
        UV_FS_SYMLINK_JUNCTION: 2,
        UV_FS_COPYFILE_EXCL: 1,
        UV_FS_COPYFILE_FICLONE: 2,
        UV_FS_COPYFILE_FICLONE_FORCE: 4,
        COPYFILE_EXCL: 1,
        COPYFILE_FICLONE: 2,
        COPYFILE_FICLONE_FORCE: 4
    };
    return f33;
}
var p31 = {}, d29 = false;
function dew$e3() {
    if (d29) return p31;
    d29 = true;
    "function" === typeof BigInt ? p31.default = BigInt : p31.default = function BigIntNotSupported() {
        throw new Error("BigInt is not supported in this environment.");
    };
    return p31;
}
var h26 = {}, m27 = false;
function dew$d4() {
    if (m27) return h26;
    m27 = true;
    Object.defineProperty(h26, "__esModule", {
        value: true
    });
    h26.Stats = void 0;
    var e1 = dew$f3();
    var t1171 = dew$e3();
    var r1107 = e1.constants.S_IFMT, n1166 = e1.constants.S_IFDIR, o169 = e1.constants.S_IFREG, i1125 = e1.constants.S_IFBLK, a157 = e1.constants.S_IFCHR, s1130 = e1.constants.S_IFLNK, u135 = e1.constants.S_IFIFO, c143 = e1.constants.S_IFSOCK;
    var f126 = function() {
        function Stats() {}
        Stats.build = function(e2, r266) {
            void 0 === r266 && (r266 = false);
            var n2143 = new Stats;
            var o253 = e2.uid, i266 = e2.gid, a233 = e2.atime, s2116 = e2.mtime, u227 = e2.ctime;
            var c221 = r266 ? t1171.default : function(e3146) {
                return e3146;
            };
            n2143.uid = c221(o253);
            n2143.gid = c221(i266);
            n2143.rdev = c221(0);
            n2143.blksize = c221(4096);
            n2143.ino = c221(e2.ino);
            n2143.size = c221(e2.getSize());
            n2143.blocks = c221(1);
            n2143.atime = a233;
            n2143.mtime = s2116;
            n2143.ctime = u227;
            n2143.birthtime = u227;
            n2143.atimeMs = c221(a233.getTime());
            n2143.mtimeMs = c221(s2116.getTime());
            var f218 = c221(u227.getTime());
            n2143.ctimeMs = f218;
            n2143.birthtimeMs = f218;
            n2143.dev = c221(0);
            n2143.mode = c221(e2.mode);
            n2143.nlink = c221(e2.nlink);
            return n2143;
        };
        Stats.prototype._checkModeProperty = function(e4125) {
            return (Number(this.mode) & r1107) === e4125;
        };
        Stats.prototype.isDirectory = function() {
            return this._checkModeProperty(n1166);
        };
        Stats.prototype.isFile = function() {
            return this._checkModeProperty(o169);
        };
        Stats.prototype.isBlockDevice = function() {
            return this._checkModeProperty(i1125);
        };
        Stats.prototype.isCharacterDevice = function() {
            return this._checkModeProperty(a157);
        };
        Stats.prototype.isSymbolicLink = function() {
            return this._checkModeProperty(s1130);
        };
        Stats.prototype.isFIFO = function() {
            return this._checkModeProperty(u135);
        };
        Stats.prototype.isSocket = function() {
            return this._checkModeProperty(c143);
        };
        return Stats;
    }();
    h26.Stats = f126;
    h26.default = f126;
    return h26;
}
var y20 = {}, v26 = false;
function dew$c4() {
    if (v26) return y20;
    v26 = true;
    var t2155 = y20 && y20.__spreadArray || function(e5125, t3124, r444) {
        if (r444 || 2 === arguments.length) {
            for(var n445, o430 = 0, i333 = t3124.length; o430 < i333; o430++)if (n445 || !(o430 in t3124)) {
                n445 || (n445 = Array.prototype.slice.call(t3124, 0, o430));
                n445[o430] = t3124[o430];
            }
        }
        return e5125.concat(n445 || Array.prototype.slice.call(t3124));
    };
    Object.defineProperty(y20, "__esModule", {
        value: true
    });
    y20.bufferFrom = y20.bufferAllocUnsafe = y20.Buffer = void 0;
    var r348 = l33;
    Object.defineProperty(y20, "Buffer", {
        enumerable: true,
        get: function() {
            return r348.Buffer;
        }
    });
    function bufferV0P12Ponyfill(e6124) {
        var n539 = [];
        for(var o528 = 1; o528 < arguments.length; o528++)n539[o528 - 1] = arguments[o528];
        return new (r348.Buffer.bind.apply(r348.Buffer, t2155([
            void 0,
            e6124
        ], n539, false)));
    }
    var n355 = r348.Buffer.allocUnsafe || bufferV0P12Ponyfill;
    y20.bufferAllocUnsafe = n355;
    var o343 = r348.Buffer.from || bufferV0P12Ponyfill;
    y20.bufferFrom = o343;
    return y20;
}
var S17 = {}, _19 = false;
var g24 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$b4() {
    if (_19) return S17;
    _19 = true;
    var e7116 = S17 && S17.__extends || function() {
        var extendStatics = function(e8120, t4118) {
            extendStatics = Object.setPrototypeOf || ({
                __proto__: []
            }) instanceof Array && function(e9119, t5118) {
                e9119.__proto__ = t5118;
            } || function(e1031, t643) {
                for(var r536 in t643)Object.prototype.hasOwnProperty.call(t643, r536) && (e1031[r536] = t643[r536]);
            };
            return extendStatics(e8120, t4118);
        };
        return function(e1130, t739) {
            if ("function" !== typeof t739 && null !== t739) throw new TypeError("Class extends value " + String(t739) + " is not a constructor or null");
            extendStatics(e1130, t739);
            function __() {
                this.constructor = e1130;
            }
            e1130.prototype = null === t739 ? Object.create(t739) : (__.prototype = t739.prototype, new __);
        };
    }();
    Object.defineProperty(S17, "__esModule", {
        value: true
    });
    S17.E = S17.AssertionError = S17.message = S17.RangeError = S17.TypeError = S17.Error = void 0;
    var n637 = Te5;
    var o620 = xe4;
    var i424 = "undefined" === typeof Symbol ? "_kCode" : Symbol("code");
    var a332 = {};
    function makeNodeError(t835) {
        return function(t931) {
            e7116(NodeError, t931);
            function NodeError(e1230) {
                var r634 = [];
                for(var n735 = 1; n735 < arguments.length; n735++)r634[n735 - 1] = arguments[n735];
                var o719 = t931.call(this, message(e1230, r634)) || this;
                o719.code = e1230;
                o719[i424] = e1230;
                o719.name = t931.prototype.name + " [" + o719[i424] + "]";
                return o719;
            }
            return NodeError;
        }(t835);
    }
    var s397 = "undefined" !== typeof globalThis ? globalThis : g24;
    var u318 = function(t1030) {
        e7116(AssertionError, t1030);
        function AssertionError(e1329) {
            var r729 = this;
            if ("object" !== typeof e1329 || null === e1329) throw new S17.TypeError("ERR_INVALID_ARG_TYPE", "options", "object");
            r729 = e1329.message ? t1030.call(this, e1329.message) || this : t1030.call(this, o620.inspect(e1329.actual).slice(0, 128) + " " + e1329.operator + " " + o620.inspect(e1329.expected).slice(0, 128)) || this;
            r729.generatedMessage = !e1329.message;
            r729.name = "AssertionError [ERR_ASSERTION]";
            r729.code = "ERR_ASSERTION";
            r729.actual = e1329.actual;
            r729.expected = e1329.expected;
            r729.operator = e1329.operator;
            S17.Error.captureStackTrace(r729, e1329.stackStartFunction);
            return r729;
        }
        return AssertionError;
    }(s397.Error);
    S17.AssertionError = u318;
    function message(e1428, t1172) {
        n637.strictEqual(typeof e1428, "string");
        var r827 = a332[e1428];
        n637(r827, "An invalid error message key was used: " + e1428 + ".");
        var i520;
        if ("function" === typeof r827) i520 = r827;
        else {
            i520 = o620.format;
            if (void 0 === t1172 || 0 === t1172.length) return r827;
            t1172.unshift(r827);
        }
        return String(i520.apply(null, t1172));
    }
    S17.message = message;
    function E53(e1527, t1228) {
        a332[e1527] = "function" === typeof t1228 ? t1228 : String(t1228);
    }
    S17.E = E53;
    S17.Error = makeNodeError(s397.Error);
    S17.TypeError = makeNodeError(s397.TypeError);
    S17.RangeError = makeNodeError(s397.RangeError);
    E53("ERR_ARG_NOT_ITERABLE", "%s must be iterable");
    E53("ERR_ASSERTION", "%s");
    E53("ERR_BUFFER_OUT_OF_BOUNDS", bufferOutOfBounds);
    E53("ERR_CHILD_CLOSED_BEFORE_REPLY", "Child closed before reply received");
    E53("ERR_CONSOLE_WRITABLE_STREAM", "Console expects a writable stream instance for %s");
    E53("ERR_CPU_USAGE", "Unable to obtain cpu usage %s");
    E53("ERR_DNS_SET_SERVERS_FAILED", function(e1627, t1328) {
        return 'c-ares failed to set servers: "' + e1627 + '" [' + t1328 + "]";
    });
    E53("ERR_FALSY_VALUE_REJECTION", "Promise was rejected with falsy value");
    E53("ERR_ENCODING_NOT_SUPPORTED", function(e1726) {
        return 'The "' + e1726 + '" encoding is not supported';
    });
    E53("ERR_ENCODING_INVALID_ENCODED_DATA", function(e1823) {
        return "The encoded data was not valid for encoding " + e1823;
    });
    E53("ERR_HTTP_HEADERS_SENT", "Cannot render headers after they are sent to the client");
    E53("ERR_HTTP_INVALID_STATUS_CODE", "Invalid status code: %s");
    E53("ERR_HTTP_TRAILER_INVALID", "Trailers are invalid with this transfer encoding");
    E53("ERR_INDEX_OUT_OF_RANGE", "Index out of range");
    E53("ERR_INVALID_ARG_TYPE", invalidArgType);
    E53("ERR_INVALID_ARRAY_LENGTH", function(e1922, t1426, r923) {
        n637.strictEqual(typeof r923, "number");
        return 'The array "' + e1922 + '" (length ' + r923 + ") must be of length " + t1426 + ".";
    });
    E53("ERR_INVALID_BUFFER_SIZE", "Buffer size must be a multiple of %s");
    E53("ERR_INVALID_CALLBACK", "Callback must be a function");
    E53("ERR_INVALID_CHAR", "Invalid character in %s");
    E53("ERR_INVALID_CURSOR_POS", "Cannot set cursor row without setting its column");
    E53("ERR_INVALID_FD", '"fd" must be a positive integer: %s');
    E53("ERR_INVALID_FILE_URL_HOST", 'File URL host must be "localhost" or empty on %s');
    E53("ERR_INVALID_FILE_URL_PATH", "File URL path %s");
    E53("ERR_INVALID_HANDLE_TYPE", "This handle type cannot be sent");
    E53("ERR_INVALID_IP_ADDRESS", "Invalid IP address: %s");
    E53("ERR_INVALID_OPT_VALUE", function(e2021, t1525) {
        return 'The value "' + String(t1525) + '" is invalid for option "' + e2021 + '"';
    });
    E53("ERR_INVALID_OPT_VALUE_ENCODING", function(e2118) {
        return 'The value "' + String(e2118) + '" is invalid for option "encoding"';
    });
    E53("ERR_INVALID_REPL_EVAL_CONFIG", 'Cannot specify both "breakEvalOnSigint" and "eval" for REPL');
    E53("ERR_INVALID_SYNC_FORK_INPUT", "Asynchronous forks do not support Buffer, Uint8Array or string input: %s");
    E53("ERR_INVALID_THIS", 'Value of "this" must be of type %s');
    E53("ERR_INVALID_TUPLE", "%s must be an iterable %s tuple");
    E53("ERR_INVALID_URL", "Invalid URL: %s");
    E53("ERR_INVALID_URL_SCHEME", function(e2217) {
        return "The URL must be " + oneOf(e2217, "scheme");
    });
    E53("ERR_IPC_CHANNEL_CLOSED", "Channel closed");
    E53("ERR_IPC_DISCONNECTED", "IPC channel is already disconnected");
    E53("ERR_IPC_ONE_PIPE", "Child process can have only one IPC pipe");
    E53("ERR_IPC_SYNC_FORK", "IPC cannot be used with synchronous forks");
    E53("ERR_MISSING_ARGS", missingArgs);
    E53("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    E53("ERR_NAPI_CONS_FUNCTION", "Constructor must be a function");
    E53("ERR_NAPI_CONS_PROTOTYPE_OBJECT", "Constructor.prototype must be an object");
    E53("ERR_NO_CRYPTO", "Node.js is not compiled with OpenSSL crypto support");
    E53("ERR_NO_LONGER_SUPPORTED", "%s is no longer supported");
    E53("ERR_PARSE_HISTORY_DATA", "Could not parse history data in %s");
    E53("ERR_SOCKET_ALREADY_BOUND", "Socket is already bound");
    E53("ERR_SOCKET_BAD_PORT", "Port should be > 0 and < 65536");
    E53("ERR_SOCKET_BAD_TYPE", "Bad socket type specified. Valid types are: udp4, udp6");
    E53("ERR_SOCKET_CANNOT_SEND", "Unable to send data");
    E53("ERR_SOCKET_CLOSED", "Socket is closed");
    E53("ERR_SOCKET_DGRAM_NOT_RUNNING", "Not running");
    E53("ERR_STDERR_CLOSE", "process.stderr cannot be closed");
    E53("ERR_STDOUT_CLOSE", "process.stdout cannot be closed");
    E53("ERR_STREAM_WRAP", "Stream has StringDecoder set or is in objectMode");
    E53("ERR_TLS_CERT_ALTNAME_INVALID", "Hostname/IP does not match certificate's altnames: %s");
    E53("ERR_TLS_DH_PARAM_SIZE", function(e2316) {
        return "DH parameter size " + e2316 + " is less than 2048";
    });
    E53("ERR_TLS_HANDSHAKE_TIMEOUT", "TLS handshake timeout");
    E53("ERR_TLS_RENEGOTIATION_FAILED", "Failed to renegotiate");
    E53("ERR_TLS_REQUIRED_SERVER_NAME", '"servername" is required parameter for Server.addContext');
    E53("ERR_TLS_SESSION_ATTACK", "TSL session renegotiation attack detected");
    E53("ERR_TRANSFORM_ALREADY_TRANSFORMING", "Calling transform done when still transforming");
    E53("ERR_TRANSFORM_WITH_LENGTH_0", "Calling transform done when writableState.length != 0");
    E53("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s");
    E53("ERR_UNKNOWN_SIGNAL", "Unknown signal: %s");
    E53("ERR_UNKNOWN_STDIN_TYPE", "Unknown stdin file type");
    E53("ERR_UNKNOWN_STREAM_TYPE", "Unknown stream file type");
    E53("ERR_V8BREAKITERATOR", "Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl");
    function invalidArgType(e2416, t1625, r1022) {
        n637(e2416, "name is required");
        var o817;
        if (t1625.includes("not ")) {
            o817 = "must not be";
            t1625 = t1625.split("not ")[1];
        } else o817 = "must be";
        var i617;
        if (Array.isArray(e2416)) {
            var a428 = e2416.map(function(e2516) {
                return '"' + e2516 + '"';
            }).join(", ");
            i617 = "The " + a428 + " arguments " + o817 + " " + oneOf(t1625, "type");
        } else if (e2416.includes(" argument")) i617 = "The " + e2416 + " " + o817 + " " + oneOf(t1625, "type");
        else {
            var s427 = e2416.includes(".") ? "property" : "argument";
            i617 = 'The "' + e2416 + '" ' + s427 + " " + o817 + " " + oneOf(t1625, "type");
        }
        arguments.length >= 3 && (i617 += ". Received type " + (null !== r1022 ? typeof r1022 : "null"));
        return i617;
    }
    function missingArgs() {
        var e2615 = [];
        for(var t1721 = 0; t1721 < arguments.length; t1721++)e2615[t1721] = arguments[t1721];
        n637(e2615.length > 0, "At least one arg needs to be specified");
        var r1124 = "The ";
        var o911 = e2615.length;
        e2615 = e2615.map(function(e2713) {
            return '"' + e2713 + '"';
        });
        switch(o911){
            case 1:
                r1124 += e2615[0] + " argument";
                break;
            case 2:
                r1124 += e2615[0] + " and " + e2615[1] + " arguments";
                break;
            default:
                r1124 += e2615.slice(0, o911 - 1).join(", ");
                r1124 += ", and " + e2615[o911 - 1] + " arguments";
                break;
        }
        return r1124 + " must be specified";
    }
    function oneOf(e2813, t1820) {
        n637(e2813, "expected is required");
        n637("string" === typeof t1820, "thing is required");
        if (Array.isArray(e2813)) {
            var r1220 = e2813.length;
            n637(r1220 > 0, "At least one expected value needs to be specified");
            e2813 = e2813.map(function(e2913) {
                return String(e2913);
            });
            return r1220 > 2 ? "one of " + t1820 + " " + e2813.slice(0, r1220 - 1).join(", ") + ", or " + e2813[r1220 - 1] : 2 === r1220 ? "one of " + t1820 + " " + e2813[0] + " or " + e2813[1] : "of " + t1820 + " " + e2813[0];
        }
        return "of " + t1820 + " " + String(e2813);
    }
    function bufferOutOfBounds(e3012, t1920) {
        return t1920 ? "Attempt to write outside buffer bounds" : '"' + e3012 + '" is outside of buffer bounds';
    }
    return S17;
}
var F16 = {}, w19 = false;
function dew$a4() {
    if (w19) return F16;
    w19 = true;
    Object.defineProperty(F16, "__esModule", {
        value: true
    });
    F16.strToEncoding = F16.assertEncoding = F16.ENCODING_UTF8 = void 0;
    var e3147 = dew$c4();
    var t2019 = dew$b4();
    F16.ENCODING_UTF8 = "utf8";
    function assertEncoding(r1317) {
        if (r1317 && !e3147.Buffer.isEncoding(r1317)) throw new t2019.TypeError("ERR_INVALID_OPT_VALUE_ENCODING", r1317);
    }
    F16.assertEncoding = assertEncoding;
    function strToEncoding(t2156, r1417) {
        return r1417 && r1417 !== F16.ENCODING_UTF8 ? "buffer" === r1417 ? new e3147.Buffer(t2156) : new e3147.Buffer(t2156).toString(r1417) : t2156;
    }
    F16.strToEncoding = strToEncoding;
    return F16;
}
var T16 = {}, b23 = false;
function dew$94() {
    if (b23) return T16;
    b23 = true;
    Object.defineProperty(T16, "__esModule", {
        value: true
    });
    T16.Dirent = void 0;
    var e3210 = dew$f3();
    var t2219 = dew$a4();
    var r1515 = e3210.constants.S_IFMT, n831 = e3210.constants.S_IFDIR, o108 = e3210.constants.S_IFREG, i716 = e3210.constants.S_IFBLK, a521 = e3210.constants.S_IFCHR, s520 = e3210.constants.S_IFLNK, u418 = e3210.constants.S_IFIFO, c318 = e3210.constants.S_IFSOCK;
    var f315 = function() {
        function Dirent() {
            this.name = "";
            this.mode = 0;
        }
        Dirent.build = function(e3310, r1614) {
            var n930 = new Dirent;
            var o1118 = e3310.getNode().mode;
            n930.name = (0, t2219.strToEncoding)(e3310.getName(), r1614);
            n930.mode = o1118;
            return n930;
        };
        Dirent.prototype._checkModeProperty = function(e34) {
            return (this.mode & r1515) === e34;
        };
        Dirent.prototype.isDirectory = function() {
            return this._checkModeProperty(n831);
        };
        Dirent.prototype.isFile = function() {
            return this._checkModeProperty(o108);
        };
        Dirent.prototype.isBlockDevice = function() {
            return this._checkModeProperty(i716);
        };
        Dirent.prototype.isCharacterDevice = function() {
            return this._checkModeProperty(a521);
        };
        Dirent.prototype.isSymbolicLink = function() {
            return this._checkModeProperty(s520);
        };
        Dirent.prototype.isFIFO = function() {
            return this._checkModeProperty(u418);
        };
        Dirent.prototype.isSocket = function() {
            return this._checkModeProperty(c318);
        };
        return Dirent;
    }();
    T16.Dirent = f315;
    T16.default = f315;
    return T16;
}
var R14 = {}, N15 = false;
var O18 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$84() {
    if (N15) return R14;
    N15 = true;
    var e35 = r35;
    Object.defineProperty(R14, "__esModule", {
        value: true
    });
    var t2318;
    t2318 = "function" === typeof e35.nextTick ? e35.nextTick.bind("undefined" !== typeof globalThis ? globalThis : O18) : setTimeout.bind("undefined" !== typeof globalThis ? globalThis : O18);
    R14.default = t2318;
    return R14;
}
var k15 = {}, I17 = false;
function dew$74() {
    if (I17) return k15;
    I17 = true;
    var e36 = r35;
    Object.defineProperty(k15, "__esModule", {
        value: true
    });
    k15.createProcess = void 0;
    var maybeReturnProcess = function() {
        if ("undefined" !== typeof e36) return e36;
        try {
            return r35;
        } catch (e) {
            return;
        }
    };
    function createProcess() {
        var e37 = maybeReturnProcess() || {};
        e37.getuid || (e37.getuid = function() {
            return 0;
        });
        e37.getgid || (e37.getgid = function() {
            return 0;
        });
        e37.cwd || (e37.cwd = function() {
            return "/";
        });
        e37.nextTick || (e37.nextTick = dew$84().default);
        e37.emitWarning || (e37.emitWarning = function(e38, t2416) {
            console.warn(t2416 + (t2416 ? ": " : "") + e38);
        });
        e37.env || (e37.env = {});
        return e37;
    }
    k15.createProcess = createProcess;
    k15.default = createProcess();
    return k15;
}
var L14 = {}, A16 = false;
function dew$64() {
    if (A16) return L14;
    A16 = true;
    var e39 = L14 && L14.__extends || function() {
        var extendStatics = function(e40, t2613) {
            extendStatics = Object.setPrototypeOf || ({
                __proto__: []
            }) instanceof Array && function(e41, t2713) {
                e41.__proto__ = t2713;
            } || function(e42, t2813) {
                for(var r1813 in t2813)Object.prototype.hasOwnProperty.call(t2813, r1813) && (e42[r1813] = t2813[r1813]);
            };
            return extendStatics(e40, t2613);
        };
        return function(e43, t2913) {
            if ("function" !== typeof t2913 && null !== t2913) throw new TypeError("Class extends value " + String(t2913) + " is not a constructor or null");
            extendStatics(e43, t2913);
            function __() {
                this.constructor = e43;
            }
            e43.prototype = null === t2913 ? Object.create(t2913) : (__.prototype = t2913.prototype, new __);
        };
    }();
    Object.defineProperty(L14, "__esModule", {
        value: true
    });
    L14.File = L14.Link = L14.Node = L14.SEP = void 0;
    var t2514 = dew$74();
    var r1714 = dew$c4();
    var n1029 = dew$f3();
    var i815 = y16;
    var a616 = dew$d4();
    var s617 = n1029.constants.S_IFMT, u517 = n1029.constants.S_IFDIR, c416 = n1029.constants.S_IFREG, f414 = n1029.constants.S_IFLNK, l137 = n1029.constants.O_APPEND;
    L14.SEP = "/";
    var p127 = function(n1167) {
        e39(Node1, n1167);
        function Node1(e44, r1912) {
            void 0 === r1912 && (r1912 = 438);
            var o1217 = n1167.call(this) || this;
            o1217.uid = t2514.default.getuid();
            o1217.gid = t2514.default.getgid();
            o1217.atime = new Date;
            o1217.mtime = new Date;
            o1217.ctime = new Date;
            o1217.perm = 438;
            o1217.mode = c416;
            o1217.nlink = 1;
            o1217.perm = r1912;
            o1217.mode |= r1912;
            o1217.ino = e44;
            return o1217;
        }
        Node1.prototype.getString = function(e45) {
            void 0 === e45 && (e45 = "utf8");
            return this.getBuffer().toString(e45);
        };
        Node1.prototype.setString = function(e46) {
            this.buf = (0, r1714.bufferFrom)(e46, "utf8");
            this.touch();
        };
        Node1.prototype.getBuffer = function() {
            this.buf || this.setBuffer((0, r1714.bufferAllocUnsafe)(0));
            return (0, r1714.bufferFrom)(this.buf);
        };
        Node1.prototype.setBuffer = function(e47) {
            this.buf = (0, r1714.bufferFrom)(e47);
            this.touch();
        };
        Node1.prototype.getSize = function() {
            return this.buf ? this.buf.length : 0;
        };
        Node1.prototype.setModeProperty = function(e48) {
            this.mode = this.mode & ~s617 | e48;
        };
        Node1.prototype.setIsFile = function() {
            this.setModeProperty(c416);
        };
        Node1.prototype.setIsDirectory = function() {
            this.setModeProperty(u517);
        };
        Node1.prototype.setIsSymlink = function() {
            this.setModeProperty(f414);
        };
        Node1.prototype.isFile = function() {
            return (this.mode & s617) === c416;
        };
        Node1.prototype.isDirectory = function() {
            return (this.mode & s617) === u517;
        };
        Node1.prototype.isSymlink = function() {
            return (this.mode & s617) === f414;
        };
        Node1.prototype.makeSymlink = function(e49) {
            this.symlink = e49;
            this.setIsSymlink();
        };
        Node1.prototype.write = function(e50, t3013, n1224, o1316) {
            void 0 === t3013 && (t3013 = 0);
            void 0 === n1224 && (n1224 = e50.length);
            void 0 === o1316 && (o1316 = 0);
            this.buf || (this.buf = (0, r1714.bufferAllocUnsafe)(0));
            if (o1316 + n1224 > this.buf.length) {
                var i915 = (0, r1714.bufferAllocUnsafe)(o1316 + n1224);
                this.buf.copy(i915, 0, 0, this.buf.length);
                this.buf = i915;
            }
            e50.copy(this.buf, o1316, t3013, t3013 + n1224);
            this.touch();
            return n1224;
        };
        Node1.prototype.read = function(e51, t3125, n1320, o14) {
            void 0 === t3125 && (t3125 = 0);
            void 0 === n1320 && (n1320 = e51.byteLength);
            void 0 === o14 && (o14 = 0);
            this.buf || (this.buf = (0, r1714.bufferAllocUnsafe)(0));
            var i1014 = n1320;
            i1014 > e51.byteLength && (i1014 = e51.byteLength);
            i1014 + o14 > this.buf.length && (i1014 = this.buf.length - o14);
            this.buf.copy(e51, t3125, o14, o14 + i1014);
            return i1014;
        };
        Node1.prototype.truncate = function(e52) {
            void 0 === e52 && (e52 = 0);
            if (e52) {
                this.buf || (this.buf = (0, r1714.bufferAllocUnsafe)(0));
                if (e52 <= this.buf.length) this.buf = this.buf.slice(0, e52);
                else {
                    var t3212 = (0, r1714.bufferAllocUnsafe)(0);
                    this.buf.copy(t3212);
                    t3212.fill(0, e52);
                }
            } else this.buf = (0, r1714.bufferAllocUnsafe)(0);
            this.touch();
        };
        Node1.prototype.chmod = function(e53) {
            this.perm = e53;
            this.mode = -512 & this.mode | e53;
            this.touch();
        };
        Node1.prototype.chown = function(e54, t3312) {
            this.uid = e54;
            this.gid = t3312;
            this.touch();
        };
        Node1.prototype.touch = function() {
            this.mtime = new Date;
            this.emit("change", this);
        };
        Node1.prototype.canRead = function(e55, r208) {
            void 0 === e55 && (e55 = t2514.default.getuid());
            void 0 === r208 && (r208 = t2514.default.getgid());
            return !!(4 & this.perm) || !!(r208 === this.gid && 32 & this.perm) || !!(e55 === this.uid && 256 & this.perm);
        };
        Node1.prototype.canWrite = function(e56, r2117) {
            void 0 === e56 && (e56 = t2514.default.getuid());
            void 0 === r2117 && (r2117 = t2514.default.getgid());
            return !!(2 & this.perm) || !!(r2117 === this.gid && 16 & this.perm) || !!(e56 === this.uid && 128 & this.perm);
        };
        Node1.prototype.del = function() {
            this.emit("delete", this);
        };
        Node1.prototype.toJSON = function() {
            return {
                ino: this.ino,
                uid: this.uid,
                gid: this.gid,
                atime: this.atime.getTime(),
                mtime: this.mtime.getTime(),
                ctime: this.ctime.getTime(),
                perm: this.perm,
                mode: this.mode,
                nlink: this.nlink,
                symlink: this.symlink,
                data: this.getString()
            };
        };
        return Node1;
    }(i815.EventEmitter);
    L14.Node = p127;
    var d125 = function(t3412) {
        e39(Link, t3412);
        function Link(e57, r2216, n1420) {
            var o1510 = t3412.call(this) || this;
            o1510.children = {};
            o1510.steps = [];
            o1510.ino = 0;
            o1510.length = 0;
            o1510.vol = e57;
            o1510.parent = r2216;
            o1510.steps = r2216 ? r2216.steps.concat([
                n1420
            ]) : [
                n1420
            ];
            return o1510;
        }
        Link.prototype.setNode = function(e58) {
            this.node = e58;
            this.ino = e58.ino;
        };
        Link.prototype.getNode = function() {
            return this.node;
        };
        Link.prototype.createChild = function(e59, t3512) {
            void 0 === t3512 && (t3512 = this.vol.createNode());
            var r2313 = new Link(this.vol, this, e59);
            r2313.setNode(t3512);
            t3512.isDirectory();
            this.setChild(e59, r2313);
            return r2313;
        };
        Link.prototype.setChild = function(e60, t3612) {
            void 0 === t3612 && (t3612 = new Link(this.vol, this, e60));
            this.children[e60] = t3612;
            t3612.parent = this;
            this.length++;
            this.emit("child:add", t3612, this);
            return t3612;
        };
        Link.prototype.deleteChild = function(e61) {
            delete this.children[e61.getName()];
            this.length--;
            this.emit("child:delete", e61, this);
        };
        Link.prototype.getChild = function(e62) {
            if (Object.hasOwnProperty.call(this.children, e62)) return this.children[e62];
        };
        Link.prototype.getPath = function() {
            return this.steps.join(L14.SEP);
        };
        Link.prototype.getName = function() {
            return this.steps[this.steps.length - 1];
        };
        Link.prototype.walk = function(e63, t3711, r2412) {
            void 0 === t3711 && (t3711 = e63.length);
            void 0 === r2412 && (r2412 = 0);
            if (r2412 >= e63.length) return this;
            if (r2412 >= t3711) return this;
            var n1519 = e63[r2412];
            var o1610 = this.getChild(n1519);
            return o1610 ? o1610.walk(e63, t3711, r2412 + 1) : null;
        };
        Link.prototype.toJSON = function() {
            return {
                steps: this.steps,
                ino: this.ino,
                children: Object.keys(this.children)
            };
        };
        return Link;
    }(i815.EventEmitter);
    L14.Link = d125;
    var h121 = function() {
        function File(e64, t3811, r2510, n1618) {
            this.position = 0;
            this.link = e64;
            this.node = t3811;
            this.flags = r2510;
            this.fd = n1618;
        }
        File.prototype.getString = function(e) {
            return this.node.getString();
        };
        File.prototype.setString = function(e65) {
            this.node.setString(e65);
        };
        File.prototype.getBuffer = function() {
            return this.node.getBuffer();
        };
        File.prototype.setBuffer = function(e66) {
            this.node.setBuffer(e66);
        };
        File.prototype.getSize = function() {
            return this.node.getSize();
        };
        File.prototype.truncate = function(e67) {
            this.node.truncate(e67);
        };
        File.prototype.seekTo = function(e68) {
            this.position = e68;
        };
        File.prototype.stats = function() {
            return a616.default.build(this.node);
        };
        File.prototype.write = function(e69, t3911, r267, n1718) {
            void 0 === t3911 && (t3911 = 0);
            void 0 === r267 && (r267 = e69.length);
            "number" !== typeof n1718 && (n1718 = this.position);
            this.flags & l137 && (n1718 = this.getSize());
            var o176 = this.node.write(e69, t3911, r267, n1718);
            this.position = n1718 + o176;
            return o176;
        };
        File.prototype.read = function(e70, t40, r274, n1818) {
            void 0 === t40 && (t40 = 0);
            void 0 === r274 && (r274 = e70.byteLength);
            "number" !== typeof n1818 && (n1818 = this.position);
            var o186 = this.node.read(e70, t40, r274, n1818);
            this.position = n1818 + o186;
            return o186;
        };
        File.prototype.chmod = function(e71) {
            this.node.chmod(e71);
        };
        File.prototype.chown = function(e72, t41) {
            this.node.chown(e72, t41);
        };
        return File;
    }();
    L14.File = h121;
    return L14;
}
var V16 = {}, B15 = false;
var C19 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$54() {
    if (B15) return V16;
    B15 = true;
    Object.defineProperty(V16, "__esModule", {
        value: true
    });
    function setTimeoutUnref(e, t, r) {
        var n1917 = setTimeout.apply("undefined" !== typeof globalThis ? globalThis : C19, arguments);
        n1917 && "object" === typeof n1917 && "function" === typeof n1917.unref && n1917.unref();
        return n1917;
    }
    V16.default = setTimeoutUnref;
    return V16;
}
var P16 = {}, D15 = false;
function dew$44() {
    if (D15) return P16;
    D15 = true;
    var e73 = P16 && P16.__spreadArray || function(e74, t43, r284) {
        if (r284 || 2 === arguments.length) {
            for(var n2017, o196 = 0, i1126 = t43.length; o196 < i1126; o196++)if (n2017 || !(o196 in t43)) {
                n2017 || (n2017 = Array.prototype.slice.call(t43, 0, o196));
                n2017[o196] = t43[o196];
            }
        }
        return e74.concat(n2017 || Array.prototype.slice.call(t43));
    };
    Object.defineProperty(P16, "__esModule", {
        value: true
    });
    P16.FileHandle = void 0;
    function promisify(t44, r293, n2144) {
        void 0 === n2144 && (n2144 = function(e75) {
            return e75;
        });
        return function() {
            var o205 = [];
            for(var i1214 = 0; i1214 < arguments.length; i1214++)o205[i1214] = arguments[i1214];
            return new Promise(function(i1314, a716) {
                t44[r293].bind(t44).apply(void 0, e73(e73([], o205, false), [
                    function(e76, t45) {
                        return e76 ? a716(e76) : i1314(n2144(t45));
                    }
                ], false));
            });
        };
    }
    var t42 = function() {
        function FileHandle(e77, t46) {
            this.vol = e77;
            this.fd = t46;
        }
        FileHandle.prototype.appendFile = function(e78, t47) {
            return promisify(this.vol, "appendFile")(this.fd, e78, t47);
        };
        FileHandle.prototype.chmod = function(e79) {
            return promisify(this.vol, "fchmod")(this.fd, e79);
        };
        FileHandle.prototype.chown = function(e80, t48) {
            return promisify(this.vol, "fchown")(this.fd, e80, t48);
        };
        FileHandle.prototype.close = function() {
            return promisify(this.vol, "close")(this.fd);
        };
        FileHandle.prototype.datasync = function() {
            return promisify(this.vol, "fdatasync")(this.fd);
        };
        FileHandle.prototype.read = function(e81, t49, r303, n2216) {
            return promisify(this.vol, "read", function(t50) {
                return {
                    bytesRead: t50,
                    buffer: e81
                };
            })(this.fd, e81, t49, r303, n2216);
        };
        FileHandle.prototype.readFile = function(e82) {
            return promisify(this.vol, "readFile")(this.fd, e82);
        };
        FileHandle.prototype.stat = function(e83) {
            return promisify(this.vol, "fstat")(this.fd, e83);
        };
        FileHandle.prototype.sync = function() {
            return promisify(this.vol, "fsync")(this.fd);
        };
        FileHandle.prototype.truncate = function(e84) {
            return promisify(this.vol, "ftruncate")(this.fd, e84);
        };
        FileHandle.prototype.utimes = function(e85, t51) {
            return promisify(this.vol, "futimes")(this.fd, e85, t51);
        };
        FileHandle.prototype.write = function(e86, t52, r3112, n2316) {
            return promisify(this.vol, "write", function(t53) {
                return {
                    bytesWritten: t53,
                    buffer: e86
                };
            })(this.fd, e86, t52, r3112, n2316);
        };
        FileHandle.prototype.writeFile = function(e87, t54) {
            return promisify(this.vol, "writeFile")(this.fd, e87, t54);
        };
        return FileHandle;
    }();
    P16.FileHandle = t42;
    function createPromisesApi(e88) {
        return "undefined" === typeof Promise ? null : {
            FileHandle: t42,
            access: function(t55, r3212) {
                return promisify(e88, "access")(t55, r3212);
            },
            appendFile: function(r3312, n2416, o2113) {
                return promisify(e88, "appendFile")(r3312 instanceof t42 ? r3312.fd : r3312, n2416, o2113);
            },
            chmod: function(t56, r349) {
                return promisify(e88, "chmod")(t56, r349);
            },
            chown: function(t57, r353, n2515) {
                return promisify(e88, "chown")(t57, r353, n2515);
            },
            copyFile: function(t58, r363, n2615) {
                return promisify(e88, "copyFile")(t58, r363, n2615);
            },
            lchmod: function(t59, r373) {
                return promisify(e88, "lchmod")(t59, r373);
            },
            lchown: function(t60, r383, n2715) {
                return promisify(e88, "lchown")(t60, r383, n2715);
            },
            link: function(t61, r393) {
                return promisify(e88, "link")(t61, r393);
            },
            lstat: function(t62, r403) {
                return promisify(e88, "lstat")(t62, r403);
            },
            mkdir: function(t63, r4112) {
                return promisify(e88, "mkdir")(t63, r4112);
            },
            mkdtemp: function(t64, r4212) {
                return promisify(e88, "mkdtemp")(t64, r4212);
            },
            open: function(r4310, n2814, o2212) {
                return promisify(e88, "open", function(r445) {
                    return new t42(e88, r445);
                })(r4310, n2814, o2212);
            },
            readdir: function(t65, r453) {
                return promisify(e88, "readdir")(t65, r453);
            },
            readFile: function(r463, n2914) {
                return promisify(e88, "readFile")(r463 instanceof t42 ? r463.fd : r463, n2914);
            },
            readlink: function(t66, r472) {
                return promisify(e88, "readlink")(t66, r472);
            },
            realpath: function(t67, r482) {
                return promisify(e88, "realpath")(t67, r482);
            },
            rename: function(t68, r492) {
                return promisify(e88, "rename")(t68, r492);
            },
            rmdir: function(t69) {
                return promisify(e88, "rmdir")(t69);
            },
            stat: function(t70, r502) {
                return promisify(e88, "stat")(t70, r502);
            },
            symlink: function(t71, r5110, n3014) {
                return promisify(e88, "symlink")(t71, r5110, n3014);
            },
            truncate: function(t72, r5210) {
                return promisify(e88, "truncate")(t72, r5210);
            },
            unlink: function(t73) {
                return promisify(e88, "unlink")(t73);
            },
            utimes: function(t74, r537, n3114) {
                return promisify(e88, "utimes")(t74, r537, n3114);
            },
            writeFile: function(r541, n3214, o2312) {
                return promisify(e88, "writeFile")(r541 instanceof t42 ? r541.fd : r541, n3214, o2312);
            }
        };
    }
    P16.default = createPromisesApi;
    return P16;
}
var U16 = {}, W13 = false;
function dew$34() {
    if (W13) return U16;
    W13 = true;
    var e89 = r35;
    Object.defineProperty(U16, "__esModule", {
        value: true
    });
    U16.unixify = unixify;
    U16.correctPath = correctPath;
    var t75 = "win32" === e89.platform;
    function removeTrailingSeparator(e90) {
        var t76 = e90.length - 1;
        if (t76 < 2) return e90;
        while(isSeparator(e90, t76))t76--;
        return e90.substr(0, t76 + 1);
    }
    function isSeparator(e91, r55) {
        var n3313 = e91[r55];
        return r55 > 0 && ("/" === n3313 || t75 && "\\" === n3313);
    }
    function normalizePath(e92, t77) {
        if ("string" !== typeof e92) throw new TypeError("expected a string");
        e92 = e92.replace(/[\\\/]+/g, "/");
        false !== t77 && (e92 = removeTrailingSeparator(e92));
        return e92;
    }
    function unixify(e93) {
        var r56 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        if (t75) {
            e93 = normalizePath(e93, r56);
            return e93.replace(/^([a-zA-Z]+:|\.\/)/, "");
        }
        return e93;
    }
    function correctPath(e94) {
        return unixify(e94.replace(/^\\\\\?\\.:\\/, "\\"));
    }
    return U16;
}
var M14 = {}, x17 = false;
var j14 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
function dew$25() {
    if (x17) return M14;
    x17 = true;
    var e95 = M14 && M14.__extends || function() {
        var extendStatics = function(e96, t79) {
            extendStatics = Object.setPrototypeOf || ({
                __proto__: []
            }) instanceof Array && function(e97, t80) {
                e97.__proto__ = t80;
            } || function(e98, t81) {
                for(var r57 in t81)Object.prototype.hasOwnProperty.call(t81, r57) && (e98[r57] = t81[r57]);
            };
            return extendStatics(e96, t79);
        };
        return function(e99, t82) {
            if ("function" !== typeof t82 && null !== t82) throw new TypeError("Class extends value " + String(t82) + " is not a constructor or null");
            extendStatics(e99, t82);
            function __() {
                this.constructor = e99;
            }
            e99.prototype = null === t82 ? Object.create(t82) : (__.prototype = t82.prototype, new __);
        };
    }();
    var t78 = M14 && M14.__spreadArray || function(e100, t83, r58) {
        if (r58 || 2 === arguments.length) {
            for(var n356, o2410 = 0, i1414 = t83.length; o2410 < i1414; o2410++)if (n356 || !(o2410 in t83)) {
                n356 || (n356 = Array.prototype.slice.call(t83, 0, o2410));
                n356[o2410] = t83[o2410];
            }
        }
        return e100.concat(n356 || Array.prototype.slice.call(t83));
    };
    Object.defineProperty(M14, "__esModule", {
        value: true
    });
    M14.FSWatcher = M14.StatWatcher = M14.Volume = M14.toUnixTimestamp = M14.bufferToEncoding = M14.dataToBuffer = M14.dataToStr = M14.pathToSteps = M14.filenameToSteps = M14.pathToFilename = M14.flagsToNumber = M14.FLAGS = void 0;
    var n3410 = a27;
    var a89 = dew$64();
    var c511 = dew$d4();
    var f511 = dew$94();
    var l226 = dew$c4();
    var p219 = dew$84();
    var d215 = dew$74();
    var h217 = dew$54();
    var m123 = f30;
    var y119 = dew$f3();
    var v119 = y16;
    var S115 = dew$a4();
    var _117 = dew$b4();
    var g118 = xe4;
    var F113 = dew$44();
    var w115 = n3410.resolve;
    var T115 = y119.constants.O_RDONLY, b118 = y119.constants.O_WRONLY, R112 = y119.constants.O_RDWR, N113 = y119.constants.O_CREAT, O113 = y119.constants.O_EXCL, k114 = y119.constants.O_TRUNC, I114 = y119.constants.O_APPEND, L111 = y119.constants.O_SYNC, A113 = y119.constants.O_DIRECTORY, V113 = y119.constants.F_OK, B115 = y119.constants.COPYFILE_EXCL, C114 = y119.constants.COPYFILE_FICLONE_FORCE;
    var P114 = n3410.posix ? n3410.posix : n3410, D112 = P114.sep, U112 = P114.relative, W111 = P114.join, G19 = P114.dirname;
    var H111 = "win32" === d215.default.platform;
    var K17 = 128;
    var $115 = {
        PATH_STR: "path must be a string or Buffer",
        FD: "fd must be a file descriptor",
        MODE_INT: "mode must be an int",
        CB: "callback must be a function",
        UID: "uid must be an unsigned int",
        GID: "gid must be an unsigned int",
        LEN: "len must be an integer",
        ATIME: "atime must be an integer",
        MTIME: "mtime must be an integer",
        PREFIX: "filename prefix is required",
        BUFFER: "buffer must be an instance of Buffer or StaticBuffer",
        OFFSET: "offset must be an integer",
        LENGTH: "length must be an integer",
        POSITION: "position must be an integer"
    };
    var ERRSTR_OPTS = function(e101) {
        return "Expected options to be either an object or a string, but got " + e101 + " instead";
    };
    var Y19 = "ENOENT";
    var J18 = "EBADF";
    var X111 = "EINVAL";
    var q111 = "EPERM";
    var z18 = "EPROTO";
    var Z112 = "EEXIST";
    var Q17 = "ENOTDIR";
    var ee14 = "EMFILE";
    var te14 = "EACCES";
    var re15 = "EISDIR";
    var ne15 = "ENOTEMPTY";
    var oe14 = "ENOSYS";
    function formatError(e102, t84, r59, n364) {
        void 0 === t84 && (t84 = "");
        void 0 === r59 && (r59 = "");
        void 0 === n364 && (n364 = "");
        var o254 = "";
        r59 && (o254 = " '" + r59 + "'");
        n364 && (o254 += " -> '" + n364 + "'");
        switch(e102){
            case Y19:
                return "ENOENT: no such file or directory, " + t84 + o254;
            case J18:
                return "EBADF: bad file descriptor, " + t84 + o254;
            case X111:
                return "EINVAL: invalid argument, " + t84 + o254;
            case q111:
                return "EPERM: operation not permitted, " + t84 + o254;
            case z18:
                return "EPROTO: protocol error, " + t84 + o254;
            case Z112:
                return "EEXIST: file already exists, " + t84 + o254;
            case Q17:
                return "ENOTDIR: not a directory, " + t84 + o254;
            case re15:
                return "EISDIR: illegal operation on a directory, " + t84 + o254;
            case te14:
                return "EACCES: permission denied, " + t84 + o254;
            case ne15:
                return "ENOTEMPTY: directory not empty, " + t84 + o254;
            case ee14:
                return "EMFILE: too many open files, " + t84 + o254;
            case oe14:
                return "ENOSYS: function not implemented, " + t84 + o254;
            default:
                return e102 + ": error occurred, " + t84 + o254;
        }
    }
    function createError(e103, t85, r60, n374, o263) {
        void 0 === t85 && (t85 = "");
        void 0 === r60 && (r60 = "");
        void 0 === n374 && (n374 = "");
        void 0 === o263 && (o263 = Error);
        var i1514 = new o263(formatError(e103, t85, r60, n374));
        i1514.code = e103;
        return i1514;
    }
    var ie14;
    (function(e104) {
        e104[e104.r = T115] = "r";
        e104[e104["r+"] = R112] = "r+";
        e104[e104.rs = T115 | L111] = "rs";
        e104[e104.sr = e104.rs] = "sr";
        e104[e104["rs+"] = R112 | L111] = "rs+";
        e104[e104["sr+"] = e104["rs+"]] = "sr+";
        e104[e104.w = b118 | N113 | k114] = "w";
        e104[e104.wx = b118 | N113 | k114 | O113] = "wx";
        e104[e104.xw = e104.wx] = "xw";
        e104[e104["w+"] = R112 | N113 | k114] = "w+";
        e104[e104["wx+"] = R112 | N113 | k114 | O113] = "wx+";
        e104[e104["xw+"] = e104["wx+"]] = "xw+";
        e104[e104.a = b118 | I114 | N113] = "a";
        e104[e104.ax = b118 | I114 | N113 | O113] = "ax";
        e104[e104.xa = e104.ax] = "xa";
        e104[e104["a+"] = R112 | I114 | N113] = "a+";
        e104[e104["ax+"] = R112 | I114 | N113 | O113] = "ax+";
        e104[e104["xa+"] = e104["ax+"]] = "xa+";
    })(ie14 = M14.FLAGS || (M14.FLAGS = {}));
    function flagsToNumber(e105) {
        if ("number" === typeof e105) return e105;
        if ("string" === typeof e105) {
            var t86 = ie14[e105];
            if ("undefined" !== typeof t86) return t86;
        }
        throw new _117.TypeError("ERR_INVALID_OPT_VALUE", "flags", e105);
    }
    M14.flagsToNumber = flagsToNumber;
    function getOptions1(e106, t87) {
        var r61;
        if (!t87) return e106;
        var n384 = typeof t87;
        switch(n384){
            case "string":
                r61 = Object.assign({}, e106, {
                    encoding: t87
                });
                break;
            case "object":
                r61 = Object.assign({}, e106, t87);
                break;
            default:
                throw TypeError(ERRSTR_OPTS(n384));
        }
        "buffer" !== r61.encoding && (0, S115.assertEncoding)(r61.encoding);
        return r61;
    }
    function optsGenerator(e107) {
        return function(t88) {
            return getOptions1(e107, t88);
        };
    }
    function validateCallback(e108) {
        if ("function" !== typeof e108) throw TypeError($115.CB);
        return e108;
    }
    function optsAndCbGenerator(e109) {
        return function(t89, r62) {
            return "function" === typeof t89 ? [
                e109(),
                t89
            ] : [
                e109(t89),
                validateCallback(r62)
            ];
        };
    }
    var ae14 = {
        encoding: "utf8"
    };
    var se14 = optsGenerator(ae14);
    var ue11 = optsAndCbGenerator(se14);
    var ce11 = {
        flag: "r"
    };
    var fe11 = optsGenerator(ce11);
    var le11 = {
        encoding: "utf8",
        mode: 438,
        flag: ie14[ie14.w]
    };
    var pe11 = optsGenerator(le11);
    var de11 = {
        encoding: "utf8",
        mode: 438,
        flag: ie14[ie14.a]
    };
    var he11 = optsGenerator(de11);
    var me11 = optsAndCbGenerator(he11);
    var ye11 = ae14;
    var ve11 = optsGenerator(ye11);
    var Se11 = optsAndCbGenerator(ve11);
    var _e11 = {
        mode: 511,
        recursive: false
    };
    var getMkdirOptions = function(e110) {
        return "number" === typeof e110 ? Object.assign({}, _e11, {
            mode: e110
        }) : Object.assign({}, _e11, e110);
    };
    var ge11 = {
        recursive: false
    };
    var getRmdirOptions = function(e111) {
        return Object.assign({}, ge11, e111);
    };
    var Ee11 = {
        encoding: "utf8",
        withFileTypes: false
    };
    var Fe11 = optsGenerator(Ee11);
    var we11 = optsAndCbGenerator(Fe11);
    var Te11 = {
        bigint: false
    };
    var getStatOptions = function(e112) {
        void 0 === e112 && (e112 = {});
        return Object.assign({}, Te11, e112);
    };
    var getStatOptsAndCb = function(e1136, t90) {
        return "function" === typeof e1136 ? [
            getStatOptions(),
            e1136
        ] : [
            getStatOptions(e1136),
            validateCallback(t90)
        ];
    };
    function getPathFromURLPosix1(e114) {
        if ("" !== e114.hostname) throw new _117.TypeError("ERR_INVALID_FILE_URL_HOST", d215.default.platform);
        var t91 = e114.pathname;
        for(var r63 = 0; r63 < t91.length; r63++)if ("%" === t91[r63]) {
            var n394 = 32 | t91.codePointAt(r63 + 2);
            if ("2" === t91[r63 + 1] && 102 === n394) throw new _117.TypeError("ERR_INVALID_FILE_URL_PATH", "must not include encoded / characters");
        }
        return decodeURIComponent(t91);
    }
    function pathToFilename(e115) {
        if ("string" !== typeof e115 && !l226.Buffer.isBuffer(e115)) {
            try {
                if (!(e115 instanceof a39.URL)) throw new TypeError($115.PATH_STR);
            } catch (e) {
                throw new TypeError($115.PATH_STR);
            }
            e115 = getPathFromURLPosix1(e115);
        }
        var t92 = String(e115);
        nullCheck(t92);
        return t92;
    }
    M14.pathToFilename = pathToFilename;
    var resolve2 = function(e116, t93) {
        void 0 === t93 && (t93 = d215.default.cwd());
        return w115(t93, e116);
    };
    if (H111) {
        var be11 = resolve2;
        var Re11 = dew$34().unixify;
        resolve2 = function(e117, t94) {
            return Re11(be11(e117, t94));
        };
    }
    function filenameToSteps(e118, t95) {
        var r64 = resolve2(e118, t95);
        var n404 = r64.substr(1);
        return n404 ? n404.split(D112) : [];
    }
    M14.filenameToSteps = filenameToSteps;
    function pathToSteps(e119) {
        return filenameToSteps(pathToFilename(e119));
    }
    M14.pathToSteps = pathToSteps;
    function dataToStr(e120, t96) {
        void 0 === t96 && (t96 = S115.ENCODING_UTF8);
        return l226.Buffer.isBuffer(e120) ? e120.toString(t96) : e120 instanceof Uint8Array ? (0, l226.bufferFrom)(e120).toString(t96) : String(e120);
    }
    M14.dataToStr = dataToStr;
    function dataToBuffer(e121, t97) {
        void 0 === t97 && (t97 = S115.ENCODING_UTF8);
        return l226.Buffer.isBuffer(e121) ? e121 : e121 instanceof Uint8Array ? (0, l226.bufferFrom)(e121) : (0, l226.bufferFrom)(String(e121), t97);
    }
    M14.dataToBuffer = dataToBuffer;
    function bufferToEncoding(e122, t98) {
        return t98 && "buffer" !== t98 ? e122.toString(t98) : e122;
    }
    M14.bufferToEncoding = bufferToEncoding;
    function nullCheck(e123, t99) {
        if (-1 !== ("" + e123).indexOf("\0")) {
            var r65 = new Error("Path must be a string without null bytes");
            r65.code = Y19;
            if ("function" !== typeof t99) throw r65;
            d215.default.nextTick(t99, r65);
            return false;
        }
        return true;
    }
    function _modeToNumber(e124, t100) {
        return "number" === typeof e124 ? e124 : "string" === typeof e124 ? parseInt(e124, 8) : t100 ? modeToNumber(t100) : void 0;
    }
    function modeToNumber(e125, t101) {
        var r66 = _modeToNumber(e125, t101);
        if ("number" !== typeof r66 || isNaN(r66)) throw new TypeError($115.MODE_INT);
        return r66;
    }
    function isFd(e126) {
        return e126 >>> 0 === e126;
    }
    function validateFd(e127) {
        if (!isFd(e127)) throw TypeError($115.FD);
    }
    function toUnixTimestamp(e128) {
        if ("string" === typeof e128 && +e128 == e128) return +e128;
        if (e128 instanceof Date) return e128.getTime() / 1e3;
        if (isFinite(e128)) return e128 < 0 ? Date.now() / 1e3 : e128;
        throw new Error("Cannot parse time: " + e128);
    }
    M14.toUnixTimestamp = toUnixTimestamp;
    function validateUid(e129) {
        if ("number" !== typeof e129) throw TypeError($115.UID);
    }
    function validateGid(e130) {
        if ("number" !== typeof e130) throw TypeError($115.GID);
    }
    function flattenJSON(e131) {
        var t102 = {};
        function flatten1(e132, r67) {
            for(var n4113 in r67){
                var o273 = r67[n4113];
                var i1614 = W111(e132, n4113);
                "string" === typeof o273 ? t102[i1614] = o273 : "object" === typeof o273 && null !== o273 && Object.keys(o273).length > 0 ? flatten1(i1614, o273) : t102[i1614] = null;
            }
        }
        flatten1("", e131);
        return t102;
    }
    var Ne11 = function() {
        function Volume(r68) {
            void 0 === r68 && (r68 = {});
            this.ino = 0;
            this.inodes = {};
            this.releasedInos = [];
            this.fds = {};
            this.releasedFds = [];
            this.maxFiles = 1e4;
            this.openFiles = 0;
            this.promisesApi = (0, F113.default)(this);
            this.statWatchers = {};
            this.props = Object.assign({
                Node: a89.Node,
                Link: a89.Link,
                File: a89.File
            }, r68);
            var n4212 = this.createLink();
            n4212.setNode(this.createNode(true));
            var o283 = this;
            this.StatWatcher = function(t103) {
                e95(StatWatcher, t103);
                function StatWatcher() {
                    return t103.call(this, o283) || this;
                }
                return StatWatcher;
            }(Oe11);
            var i1714 = FsReadStream;
            this.ReadStream = function(r69) {
                e95(class_1, r69);
                function class_1() {
                    var e133 = [];
                    for(var n4312 = 0; n4312 < arguments.length; n4312++)e133[n4312] = arguments[n4312];
                    return r69.apply(this, t78([
                        o283
                    ], e133, false)) || this;
                }
                return class_1;
            }(i1714);
            var s717 = FsWriteStream;
            this.WriteStream = function(r70) {
                e95(class_2, r70);
                function class_2() {
                    var e134 = [];
                    for(var n446 = 0; n446 < arguments.length; n446++)e134[n446] = arguments[n446];
                    return r70.apply(this, t78([
                        o283
                    ], e134, false)) || this;
                }
                return class_2;
            }(s717);
            this.FSWatcher = function(t104) {
                e95(FSWatcher, t104);
                function FSWatcher() {
                    return t104.call(this, o283) || this;
                }
                return FSWatcher;
            }(Ie11);
            this.root = n4212;
        }
        Volume.fromJSON = function(e135, t105) {
            var r71 = new Volume;
            r71.fromJSON(e135, t105);
            return r71;
        };
        Volume.fromNestedJSON = function(e136, t106) {
            var r72 = new Volume;
            r72.fromNestedJSON(e136, t106);
            return r72;
        };
        Object.defineProperty(Volume.prototype, "promises", {
            get: function() {
                if (null === this.promisesApi) throw new Error("Promise is not supported in this environment.");
                return this.promisesApi;
            },
            enumerable: false,
            configurable: true
        });
        Volume.prototype.createLink = function(e137, t107, r73, n451) {
            void 0 === r73 && (r73 = false);
            if (!e137) return new this.props.Link(this, null, "");
            if (!t107) throw new Error("createLink: name cannot be empty");
            return e137.createChild(t107, this.createNode(r73, n451));
        };
        Volume.prototype.deleteLink = function(e138) {
            var t108 = e138.parent;
            if (t108) {
                t108.deleteChild(e138);
                return true;
            }
            return false;
        };
        Volume.prototype.newInoNumber = function() {
            var e139 = this.releasedInos.pop();
            if (e139) return e139;
            this.ino = (this.ino + 1) % 4294967295;
            return this.ino;
        };
        Volume.prototype.newFdNumber = function() {
            var e140 = this.releasedFds.pop();
            return "number" === typeof e140 ? e140 : Volume.fd--;
        };
        Volume.prototype.createNode = function(e141, t109) {
            void 0 === e141 && (e141 = false);
            var r74 = new this.props.Node(this.newInoNumber(), t109);
            e141 && r74.setIsDirectory();
            this.inodes[r74.ino] = r74;
            return r74;
        };
        Volume.prototype.getNode = function(e142) {
            return this.inodes[e142];
        };
        Volume.prototype.deleteNode = function(e143) {
            e143.del();
            delete this.inodes[e143.ino];
            this.releasedInos.push(e143.ino);
        };
        Volume.prototype.genRndStr = function() {
            var e144 = (Math.random() + 1).toString(36).substr(2, 6);
            return 6 === e144.length ? e144 : this.genRndStr();
        };
        Volume.prototype.getLink = function(e145) {
            return this.root.walk(e145);
        };
        Volume.prototype.getLinkOrThrow = function(e146, t110) {
            var r75 = filenameToSteps(e146);
            var n461 = this.getLink(r75);
            if (!n461) throw createError(Y19, t110, e146);
            return n461;
        };
        Volume.prototype.getResolvedLink = function(e147) {
            var t111 = "string" === typeof e147 ? filenameToSteps(e147) : e147;
            var r76 = this.root;
            var n471 = 0;
            while(n471 < t111.length){
                var o293 = t111[n471];
                r76 = r76.getChild(o293);
                if (!r76) return null;
                var i1814 = r76.getNode();
                if (i1814.isSymlink()) {
                    t111 = i1814.symlink.concat(t111.slice(n471 + 1));
                    r76 = this.root;
                    n471 = 0;
                } else n471++;
            }
            return r76;
        };
        Volume.prototype.getResolvedLinkOrThrow = function(e148, t112) {
            var r77 = this.getResolvedLink(e148);
            if (!r77) throw createError(Y19, t112, e148);
            return r77;
        };
        Volume.prototype.resolveSymlinks = function(e149) {
            return this.getResolvedLink(e149.steps.slice(1));
        };
        Volume.prototype.getLinkAsDirOrThrow = function(e150, t113) {
            var r78 = this.getLinkOrThrow(e150, t113);
            if (!r78.getNode().isDirectory()) throw createError(Q17, t113, e150);
            return r78;
        };
        Volume.prototype.getLinkParent = function(e151) {
            return this.root.walk(e151, e151.length - 1);
        };
        Volume.prototype.getLinkParentAsDirOrThrow = function(e152, t114) {
            var r79 = e152 instanceof Array ? e152 : filenameToSteps(e152);
            var n48 = this.getLinkParent(r79);
            if (!n48) throw createError(Y19, t114, D112 + r79.join(D112));
            if (!n48.getNode().isDirectory()) throw createError(Q17, t114, D112 + r79.join(D112));
            return n48;
        };
        Volume.prototype.getFileByFd = function(e153) {
            return this.fds[String(e153)];
        };
        Volume.prototype.getFileByFdOrThrow = function(e154, t115) {
            if (!isFd(e154)) throw TypeError($115.FD);
            var r80 = this.getFileByFd(e154);
            if (!r80) throw createError(J18, t115);
            return r80;
        };
        Volume.prototype.getNodeByIdOrCreate = function(e155, t116, r81) {
            if ("number" === typeof e155) {
                var n49 = this.getFileByFd(e155);
                if (!n49) throw Error("File nto found");
                return n49.node;
            }
            var o303 = pathToSteps(e155);
            var i1914 = this.getLink(o303);
            if (i1914) return i1914.getNode();
            if (t116 & N113) {
                var a98 = this.getLinkParent(o303);
                if (a98) {
                    var s817 = o303[o303.length - 1];
                    i1914 = this.createLink(a98, s817, false, r81);
                    return i1914.getNode();
                }
            }
            throw createError(Y19, "getNodeByIdOrCreate", pathToFilename(e155));
        };
        Volume.prototype.wrapAsync = function(e156, t117, r82) {
            var n50 = this;
            validateCallback(r82);
            (0, p219.default)(function() {
                var o3112;
                try {
                    o3112 = e156.apply(n50, t117);
                } catch (e157) {
                    r82(e157);
                    return;
                }
                r82(null, o3112);
            });
        };
        Volume.prototype._toJSON = function(e158, t118, r83) {
            var n51;
            void 0 === e158 && (e158 = this.root);
            void 0 === t118 && (t118 = {});
            var o3212 = true;
            var i2013 = e158.children;
            if (e158.getNode().isFile()) {
                i2013 = (n51 = {}, n51[e158.getName()] = e158.parent.getChild(e158.getName()), n51);
                e158 = e158.parent;
            }
            for(var a108 in i2013){
                o3212 = false;
                var s917 = e158.getChild(a108);
                if (!s917) throw new Error("_toJSON: unexpected undefined");
                var u617 = s917.getNode();
                if (u617.isFile()) {
                    var c610 = s917.getPath();
                    r83 && (c610 = U112(r83, c610));
                    t118[c610] = u617.getString();
                } else u617.isDirectory() && this._toJSON(s917, t118, r83);
            }
            var f69 = e158.getPath();
            r83 && (f69 = U112(r83, f69));
            f69 && o3212 && (t118[f69] = null);
            return t118;
        };
        Volume.prototype.toJSON = function(e159, t119, r84) {
            void 0 === t119 && (t119 = {});
            void 0 === r84 && (r84 = false);
            var n52 = [];
            if (e159) {
                e159 instanceof Array || (e159 = [
                    e159
                ]);
                for(var o3310 = 0, i2113 = e159; o3310 < i2113.length; o3310++){
                    var a1117 = i2113[o3310];
                    var s1016 = pathToFilename(a1117);
                    var u712 = this.getResolvedLink(s1016);
                    u712 && n52.push(u712);
                }
            } else n52.push(this.root);
            if (!n52.length) return t119;
            for(var c74 = 0, f74 = n52; c74 < f74.length; c74++){
                u712 = f74[c74];
                this._toJSON(u712, t119, r84 ? u712.getPath() : "");
            }
            return t119;
        };
        Volume.prototype.fromJSON = function(e160, t120) {
            void 0 === t120 && (t120 = d215.default.cwd());
            for(var r85 in e160){
                var n53 = e160[r85];
                r85 = resolve2(r85, t120);
                if ("string" === typeof n53) {
                    var o344 = G19(r85);
                    this.mkdirpBase(o344, 511);
                    this.writeFileSync(r85, n53);
                } else this.mkdirpBase(r85, 511);
            }
        };
        Volume.prototype.fromNestedJSON = function(e161, t121) {
            this.fromJSON(flattenJSON(e161), t121);
        };
        Volume.prototype.reset = function() {
            this.ino = 0;
            this.inodes = {};
            this.releasedInos = [];
            this.fds = {};
            this.releasedFds = [];
            this.openFiles = 0;
            this.root = this.createLink();
            this.root.setNode(this.createNode(true));
        };
        Volume.prototype.mountSync = function(e162, t122) {
            this.fromJSON(t122, e162);
        };
        Volume.prototype.openLink = function(e163, t123, r86) {
            void 0 === r86 && (r86 = true);
            if (this.openFiles >= this.maxFiles) throw createError(ee14, "open", e163.getPath());
            var n54 = e163;
            r86 && (n54 = this.resolveSymlinks(e163));
            if (!n54) throw createError(Y19, "open", e163.getPath());
            var o352 = n54.getNode();
            if (o352.isDirectory()) {
                if ((t123 & (T115 | R112 | b118)) !== T115) throw createError(re15, "open", e163.getPath());
            } else if (t123 & A113) throw createError(Q17, "open", e163.getPath());
            if (!(t123 & b118) && !o352.canRead()) throw createError(te14, "open", e163.getPath());
            var i2213 = new this.props.File(e163, o352, t123, this.newFdNumber());
            this.fds[i2213.fd] = i2213;
            this.openFiles++;
            t123 & k114 && i2213.truncate();
            return i2213;
        };
        Volume.prototype.openFile = function(e164, t124, r87, n55) {
            void 0 === n55 && (n55 = true);
            var o362 = filenameToSteps(e164);
            var i2313 = n55 ? this.getResolvedLink(o362) : this.getLink(o362);
            if (!i2313 && t124 & N113) {
                var a1213 = this.getResolvedLink(o362.slice(0, o362.length - 1));
                if (!a1213) throw createError(Y19, "open", D112 + o362.join(D112));
                t124 & N113 && "number" === typeof r87 && (i2313 = this.createLink(a1213, o362[o362.length - 1], false, r87));
            }
            if (i2313) return this.openLink(i2313, t124, n55);
            throw createError(Y19, "open", e164);
        };
        Volume.prototype.openBase = function(e165, t125, r88, n56) {
            void 0 === n56 && (n56 = true);
            var o372 = this.openFile(e165, t125, r88, n56);
            if (!o372) throw createError(Y19, "open", e165);
            return o372.fd;
        };
        Volume.prototype.openSync = function(e166, t126, r89) {
            void 0 === r89 && (r89 = 438);
            var n57 = modeToNumber(r89);
            var o382 = pathToFilename(e166);
            var i2412 = flagsToNumber(t126);
            return this.openBase(o382, i2412, n57);
        };
        Volume.prototype.open = function(e167, t127, r90, n58) {
            var o391 = r90;
            var i2511 = n58;
            if ("function" === typeof r90) {
                o391 = 438;
                i2511 = r90;
            }
            o391 = o391 || 438;
            var a1312 = modeToNumber(o391);
            var s1131 = pathToFilename(e167);
            var u812 = flagsToNumber(t127);
            this.wrapAsync(this.openBase, [
                s1131,
                u812,
                a1312
            ], i2511);
        };
        Volume.prototype.closeFile = function(e168) {
            if (this.fds[e168.fd]) {
                this.openFiles--;
                delete this.fds[e168.fd];
                this.releasedFds.push(e168.fd);
            }
        };
        Volume.prototype.closeSync = function(e169) {
            validateFd(e169);
            var t128 = this.getFileByFdOrThrow(e169, "close");
            this.closeFile(t128);
        };
        Volume.prototype.close = function(e170, t129) {
            validateFd(e170);
            this.wrapAsync(this.closeSync, [
                e170
            ], t129);
        };
        Volume.prototype.openFileOrGetById = function(e171, t130, r91) {
            if ("number" === typeof e171) {
                var n59 = this.fds[e171];
                if (!n59) throw createError(Y19);
                return n59;
            }
            return this.openFile(pathToFilename(e171), t130, r91);
        };
        Volume.prototype.readBase = function(e172, t131, r92, n60, o401) {
            var i267 = this.getFileByFdOrThrow(e172);
            return i267.read(t131, Number(r92), Number(n60), o401);
        };
        Volume.prototype.readSync = function(e173, t132, r93, n61, o4110) {
            validateFd(e173);
            return this.readBase(e173, t132, r93, n61, o4110);
        };
        Volume.prototype.read = function(e174, t133, r94, n62, o4210, i273) {
            var a1411 = this;
            validateCallback(i273);
            if (0 === n62) return d215.default.nextTick(function() {
                i273 && i273(null, 0, t133);
            });
            (0, p219.default)(function() {
                try {
                    var s1216 = a1411.readBase(e174, t133, r94, n62, o4210);
                    i273(null, s1216, t133);
                } catch (e175) {
                    i273(e175);
                }
            });
        };
        Volume.prototype.readFileBase = function(e176, t134, r95) {
            var n63;
            var o43 = "number" === typeof e176;
            var i283 = o43 && isFd(e176);
            var a158;
            if (i283) a158 = e176;
            else {
                var s1315 = pathToFilename(e176);
                var u910 = filenameToSteps(s1315);
                var c84 = this.getResolvedLink(u910);
                if (c84) {
                    var f83 = c84.getNode();
                    if (f83.isDirectory()) throw createError(re15, "open", c84.getPath());
                }
                a158 = this.openSync(e176, t134);
            }
            try {
                n63 = bufferToEncoding(this.getFileByFdOrThrow(a158).getBuffer(), r95);
            } finally{
                i283 || this.closeSync(a158);
            }
            return n63;
        };
        Volume.prototype.readFileSync = function(e177, t135) {
            var r96 = fe11(t135);
            var n64 = flagsToNumber(r96.flag);
            return this.readFileBase(e177, n64, r96.encoding);
        };
        Volume.prototype.readFile = function(e178, t136, r97) {
            var n65 = optsAndCbGenerator(fe11)(t136, r97), o44 = n65[0], i293 = n65[1];
            var a164 = flagsToNumber(o44.flag);
            this.wrapAsync(this.readFileBase, [
                e178,
                a164,
                o44.encoding
            ], i293);
        };
        Volume.prototype.writeBase = function(e179, t137, r98, n66, o45) {
            var i303 = this.getFileByFdOrThrow(e179, "write");
            return i303.write(t137, r98, n66, o45);
        };
        Volume.prototype.writeSync = function(e180, t138, r99, n67, o46) {
            validateFd(e180);
            var i3112;
            var a173;
            var s1415;
            var u106;
            var c94 = "string" !== typeof t138;
            if (c94) {
                a173 = 0 | (r99 || 0);
                s1415 = n67;
                u106 = o46;
            } else {
                u106 = r99;
                i3112 = n67;
            }
            var f93 = dataToBuffer(t138, i3112);
            if (c94) "undefined" === typeof s1415 && (s1415 = f93.length);
            else {
                a173 = 0;
                s1415 = f93.length;
            }
            return this.writeBase(e180, f93, a173, s1415, u106);
        };
        Volume.prototype.write = function(e181, t139, r100, n68, o47, i3210) {
            var a183 = this;
            validateFd(e181);
            var s1513;
            var u1114;
            var c104;
            var f103;
            var l319;
            var d314 = typeof t139;
            var h315 = typeof r100;
            var m216 = typeof n68;
            var y215 = typeof o47;
            if ("string" !== d314) if ("function" === h315) l319 = r100;
            else if ("function" === m216) {
                s1513 = 0 | r100;
                l319 = n68;
            } else if ("function" === y215) {
                s1513 = 0 | r100;
                u1114 = n68;
                l319 = o47;
            } else {
                s1513 = 0 | r100;
                u1114 = n68;
                c104 = o47;
                l319 = i3210;
            }
            else if ("function" === h315) l319 = r100;
            else if ("function" === m216) {
                c104 = r100;
                l319 = n68;
            } else if ("function" === y215) {
                c104 = r100;
                f103 = n68;
                l319 = o47;
            }
            var v216 = dataToBuffer(t139, f103);
            if ("string" !== d314) "undefined" === typeof u1114 && (u1114 = v216.length);
            else {
                s1513 = 0;
                u1114 = v216.length;
            }
            var S211 = validateCallback(l319);
            (0, p219.default)(function() {
                try {
                    var r101 = a183.writeBase(e181, v216, s1513, u1114, c104);
                    S211(null, r101, "string" !== d314 ? v216 : t139);
                } catch (e182) {
                    S211(e182);
                }
            });
        };
        Volume.prototype.writeFileBase = function(e183, t140, r102, n69) {
            var o48 = "number" === typeof e183;
            var i334;
            i334 = o48 ? e183 : this.openBase(pathToFilename(e183), r102, n69);
            var a193 = 0;
            var s1613 = t140.length;
            var u12 = r102 & I114 ? void 0 : 0;
            try {
                while(s1613 > 0){
                    var c1113 = this.writeSync(i334, t140, a193, s1613, u12);
                    a193 += c1113;
                    s1613 -= c1113;
                    void 0 !== u12 && (u12 += c1113);
                }
            } finally{
                o48 || this.closeSync(i334);
            }
        };
        Volume.prototype.writeFileSync = function(e184, t141, r103) {
            var n70 = pe11(r103);
            var o49 = flagsToNumber(n70.flag);
            var i343 = modeToNumber(n70.mode);
            var a203 = dataToBuffer(t141, n70.encoding);
            this.writeFileBase(e184, a203, o49, i343);
        };
        Volume.prototype.writeFile = function(e185, t142, r104, n71) {
            var o50 = r104;
            var i352 = n71;
            if ("function" === typeof r104) {
                o50 = le11;
                i352 = r104;
            }
            var a2111 = validateCallback(i352);
            var s1713 = pe11(o50);
            var u136 = flagsToNumber(s1713.flag);
            var c1210 = modeToNumber(s1713.mode);
            var f1111 = dataToBuffer(t142, s1713.encoding);
            this.wrapAsync(this.writeFileBase, [
                e185,
                f1111,
                u136,
                c1210
            ], a2111);
        };
        Volume.prototype.linkBase = function(e186, t143) {
            var r105 = filenameToSteps(e186);
            var n72 = this.getLink(r105);
            if (!n72) throw createError(Y19, "link", e186, t143);
            var o51 = filenameToSteps(t143);
            var i361 = this.getLinkParent(o51);
            if (!i361) throw createError(Y19, "link", e186, t143);
            var a2211 = o51[o51.length - 1];
            if (i361.getChild(a2211)) throw createError(Z112, "link", e186, t143);
            var s1813 = n72.getNode();
            s1813.nlink++;
            i361.createChild(a2211, s1813);
        };
        Volume.prototype.copyFileBase = function(e187, t144, r106) {
            var n73 = this.readFileSync(e187);
            if (r106 & B115 && this.existsSync(t144)) throw createError(Z112, "copyFile", e187, t144);
            if (r106 & C114) throw createError(oe14, "copyFile", e187, t144);
            this.writeFileBase(t144, n73, ie14.w, 438);
        };
        Volume.prototype.copyFileSync = function(e188, t145, r107) {
            var n74 = pathToFilename(e188);
            var o52 = pathToFilename(t145);
            return this.copyFileBase(n74, o52, 0 | (r107 || 0));
        };
        Volume.prototype.copyFile = function(e189, t146, r108, n75) {
            var o53 = pathToFilename(e189);
            var i371 = pathToFilename(t146);
            var a234;
            var s1913;
            if ("function" === typeof r108) {
                a234 = 0;
                s1913 = r108;
            } else {
                a234 = r108;
                s1913 = n75;
            }
            validateCallback(s1913);
            this.wrapAsync(this.copyFileBase, [
                o53,
                i371,
                a234
            ], s1913);
        };
        Volume.prototype.linkSync = function(e190, t147) {
            var r109 = pathToFilename(e190);
            var n76 = pathToFilename(t147);
            this.linkBase(r109, n76);
        };
        Volume.prototype.link = function(e191, t148, r110) {
            var n77 = pathToFilename(e191);
            var o54 = pathToFilename(t148);
            this.wrapAsync(this.linkBase, [
                n77,
                o54
            ], r110);
        };
        Volume.prototype.unlinkBase = function(e192) {
            var t149 = filenameToSteps(e192);
            var r111 = this.getLink(t149);
            if (!r111) throw createError(Y19, "unlink", e192);
            if (r111.length) throw Error("Dir not empty...");
            this.deleteLink(r111);
            var n78 = r111.getNode();
            n78.nlink--;
            n78.nlink <= 0 && this.deleteNode(n78);
        };
        Volume.prototype.unlinkSync = function(e193) {
            var t150 = pathToFilename(e193);
            this.unlinkBase(t150);
        };
        Volume.prototype.unlink = function(e194, t151) {
            var r112 = pathToFilename(e194);
            this.wrapAsync(this.unlinkBase, [
                r112
            ], t151);
        };
        Volume.prototype.symlinkBase = function(e195, t152) {
            var r113 = filenameToSteps(t152);
            var n79 = this.getLinkParent(r113);
            if (!n79) throw createError(Y19, "symlink", e195, t152);
            var o55 = r113[r113.length - 1];
            if (n79.getChild(o55)) throw createError(Z112, "symlink", e195, t152);
            var i381 = n79.createChild(o55);
            i381.getNode().makeSymlink(filenameToSteps(e195));
            return i381;
        };
        Volume.prototype.symlinkSync = function(e196, t153, r) {
            var n80 = pathToFilename(e196);
            var o56 = pathToFilename(t153);
            this.symlinkBase(n80, o56);
        };
        Volume.prototype.symlink = function(e197, t154, r114, n81) {
            var o57 = validateCallback("function" === typeof r114 ? r114 : n81);
            var i391 = pathToFilename(e197);
            var a242 = pathToFilename(t154);
            this.wrapAsync(this.symlinkBase, [
                i391,
                a242
            ], o57);
        };
        Volume.prototype.realpathBase = function(e198, t155) {
            var r115 = filenameToSteps(e198);
            var n82 = this.getResolvedLink(r115);
            if (!n82) throw createError(Y19, "realpath", e198);
            return (0, S115.strToEncoding)(n82.getPath(), t155);
        };
        Volume.prototype.realpathSync = function(e199, t156) {
            return this.realpathBase(pathToFilename(e199), ve11(t156).encoding);
        };
        Volume.prototype.realpath = function(e200, t157, r116) {
            var n83 = Se11(t157, r116), o58 = n83[0], i40 = n83[1];
            var a252 = pathToFilename(e200);
            this.wrapAsync(this.realpathBase, [
                a252,
                o58.encoding
            ], i40);
        };
        Volume.prototype.lstatBase = function(e201, t158) {
            void 0 === t158 && (t158 = false);
            var r117 = this.getLink(filenameToSteps(e201));
            if (!r117) throw createError(Y19, "lstat", e201);
            return c511.default.build(r117.getNode(), t158);
        };
        Volume.prototype.lstatSync = function(e202, t159) {
            return this.lstatBase(pathToFilename(e202), getStatOptions(t159).bigint);
        };
        Volume.prototype.lstat = function(e203, t160, r118) {
            var n84 = getStatOptsAndCb(t160, r118), o59 = n84[0], i41 = n84[1];
            this.wrapAsync(this.lstatBase, [
                pathToFilename(e203),
                o59.bigint
            ], i41);
        };
        Volume.prototype.statBase = function(e204, t161) {
            void 0 === t161 && (t161 = false);
            var r119 = this.getResolvedLink(filenameToSteps(e204));
            if (!r119) throw createError(Y19, "stat", e204);
            return c511.default.build(r119.getNode(), t161);
        };
        Volume.prototype.statSync = function(e205, t162) {
            return this.statBase(pathToFilename(e205), getStatOptions(t162).bigint);
        };
        Volume.prototype.stat = function(e206, t163, r120) {
            var n85 = getStatOptsAndCb(t163, r120), o60 = n85[0], i42 = n85[1];
            this.wrapAsync(this.statBase, [
                pathToFilename(e206),
                o60.bigint
            ], i42);
        };
        Volume.prototype.fstatBase = function(e207, t164) {
            void 0 === t164 && (t164 = false);
            var r121 = this.getFileByFd(e207);
            if (!r121) throw createError(J18, "fstat");
            return c511.default.build(r121.node, t164);
        };
        Volume.prototype.fstatSync = function(e208, t165) {
            return this.fstatBase(e208, getStatOptions(t165).bigint);
        };
        Volume.prototype.fstat = function(e209, t166, r122) {
            var n86 = getStatOptsAndCb(t166, r122), o61 = n86[0], i43 = n86[1];
            this.wrapAsync(this.fstatBase, [
                e209,
                o61.bigint
            ], i43);
        };
        Volume.prototype.renameBase = function(e210, r123) {
            var n87 = this.getLink(filenameToSteps(e210));
            if (!n87) throw createError(Y19, "rename", e210, r123);
            var o62 = filenameToSteps(r123);
            var i44 = this.getLinkParent(o62);
            if (!i44) throw createError(Y19, "rename", e210, r123);
            var a262 = n87.parent;
            a262 && a262.deleteChild(n87);
            var s2013 = o62[o62.length - 1];
            n87.steps = t78(t78([], i44.steps, true), [
                s2013
            ], false);
            i44.setChild(n87.getName(), n87);
        };
        Volume.prototype.renameSync = function(e211, t167) {
            var r124 = pathToFilename(e211);
            var n88 = pathToFilename(t167);
            this.renameBase(r124, n88);
        };
        Volume.prototype.rename = function(e212, t168, r125) {
            var n89 = pathToFilename(e212);
            var o63 = pathToFilename(t168);
            this.wrapAsync(this.renameBase, [
                n89,
                o63
            ], r125);
        };
        Volume.prototype.existsBase = function(e213) {
            return !!this.statBase(e213);
        };
        Volume.prototype.existsSync = function(e214) {
            try {
                return this.existsBase(pathToFilename(e214));
            } catch (e) {
                return false;
            }
        };
        Volume.prototype.exists = function(e215, t169) {
            var r126 = this;
            var n90 = pathToFilename(e215);
            if ("function" !== typeof t169) throw Error($115.CB);
            (0, p219.default)(function() {
                try {
                    t169(r126.existsBase(n90));
                } catch (e) {
                    t169(false);
                }
            });
        };
        Volume.prototype.accessBase = function(e216, t) {
            this.getLinkOrThrow(e216, "access");
        };
        Volume.prototype.accessSync = function(e217, t170) {
            void 0 === t170 && (t170 = V113);
            var r127 = pathToFilename(e217);
            t170 |= 0;
            this.accessBase(r127, t170);
        };
        Volume.prototype.access = function(e218, t171, r128) {
            var n91 = V113;
            var o64;
            if ("function" !== typeof t171) {
                n91 = 0 | t171;
                o64 = validateCallback(r128);
            } else o64 = t171;
            var i45 = pathToFilename(e218);
            this.wrapAsync(this.accessBase, [
                i45,
                n91
            ], o64);
        };
        Volume.prototype.appendFileSync = function(e219, t172, r129) {
            void 0 === r129 && (r129 = de11);
            var n92 = he11(r129);
            n92.flag && !isFd(e219) || (n92.flag = "a");
            this.writeFileSync(e219, t172, n92);
        };
        Volume.prototype.appendFile = function(e220, t173, r130, n93) {
            var o65 = me11(r130, n93), i46 = o65[0], a272 = o65[1];
            i46.flag && !isFd(e220) || (i46.flag = "a");
            this.writeFile(e220, t173, i46, a272);
        };
        Volume.prototype.readdirBase = function(e221, t174) {
            var r131 = filenameToSteps(e221);
            var n94 = this.getResolvedLink(r131);
            if (!n94) throw createError(Y19, "readdir", e221);
            var o66 = n94.getNode();
            if (!o66.isDirectory()) throw createError(Q17, "scandir", e221);
            if (t174.withFileTypes) {
                var i47 = [];
                for(var a282 in n94.children){
                    var s2117 = n94.getChild(a282);
                    s2117 && i47.push(f511.default.build(s2117, t174.encoding));
                }
                H111 || "buffer" === t174.encoding || i47.sort(function(e222, t175) {
                    return e222.name < t175.name ? -1 : e222.name > t175.name ? 1 : 0;
                });
                return i47;
            }
            var u145 = [];
            for(var c1310 in n94.children)u145.push((0, S115.strToEncoding)(c1310, t174.encoding));
            H111 || "buffer" === t174.encoding || u145.sort();
            return u145;
        };
        Volume.prototype.readdirSync = function(e223, t176) {
            var r132 = Fe11(t176);
            var n95 = pathToFilename(e223);
            return this.readdirBase(n95, r132);
        };
        Volume.prototype.readdir = function(e224, t177, r133) {
            var n96 = we11(t177, r133), o67 = n96[0], i48 = n96[1];
            var a292 = pathToFilename(e224);
            this.wrapAsync(this.readdirBase, [
                a292,
                o67
            ], i48);
        };
        Volume.prototype.readlinkBase = function(e225, t178) {
            var r134 = this.getLinkOrThrow(e225, "readlink");
            var n97 = r134.getNode();
            if (!n97.isSymlink()) throw createError(X111, "readlink", e225);
            var o68 = D112 + n97.symlink.join(D112);
            return (0, S115.strToEncoding)(o68, t178);
        };
        Volume.prototype.readlinkSync = function(e226, t179) {
            var r135 = se14(t179);
            var n98 = pathToFilename(e226);
            return this.readlinkBase(n98, r135.encoding);
        };
        Volume.prototype.readlink = function(e227, t180, r136) {
            var n99 = ue11(t180, r136), o69 = n99[0], i49 = n99[1];
            var a302 = pathToFilename(e227);
            this.wrapAsync(this.readlinkBase, [
                a302,
                o69.encoding
            ], i49);
        };
        Volume.prototype.fsyncBase = function(e228) {
            this.getFileByFdOrThrow(e228, "fsync");
        };
        Volume.prototype.fsyncSync = function(e229) {
            this.fsyncBase(e229);
        };
        Volume.prototype.fsync = function(e230, t181) {
            this.wrapAsync(this.fsyncBase, [
                e230
            ], t181);
        };
        Volume.prototype.fdatasyncBase = function(e231) {
            this.getFileByFdOrThrow(e231, "fdatasync");
        };
        Volume.prototype.fdatasyncSync = function(e232) {
            this.fdatasyncBase(e232);
        };
        Volume.prototype.fdatasync = function(e233, t182) {
            this.wrapAsync(this.fdatasyncBase, [
                e233
            ], t182);
        };
        Volume.prototype.ftruncateBase = function(e234, t183) {
            var r137 = this.getFileByFdOrThrow(e234, "ftruncate");
            r137.truncate(t183);
        };
        Volume.prototype.ftruncateSync = function(e235, t184) {
            this.ftruncateBase(e235, t184);
        };
        Volume.prototype.ftruncate = function(e236, t185, r138) {
            var n100 = "number" === typeof t185 ? t185 : 0;
            var o70 = validateCallback("number" === typeof t185 ? r138 : t185);
            this.wrapAsync(this.ftruncateBase, [
                e236,
                n100
            ], o70);
        };
        Volume.prototype.truncateBase = function(e237, t186) {
            var r139 = this.openSync(e237, "r+");
            try {
                this.ftruncateSync(r139, t186);
            } finally{
                this.closeSync(r139);
            }
        };
        Volume.prototype.truncateSync = function(e238, t187) {
            if (isFd(e238)) return this.ftruncateSync(e238, t187);
            this.truncateBase(e238, t187);
        };
        Volume.prototype.truncate = function(e239, t188, r140) {
            var n101 = "number" === typeof t188 ? t188 : 0;
            var o71 = validateCallback("number" === typeof t188 ? r140 : t188);
            if (isFd(e239)) return this.ftruncate(e239, n101, o71);
            this.wrapAsync(this.truncateBase, [
                e239,
                n101
            ], o71);
        };
        Volume.prototype.futimesBase = function(e240, t189, r141) {
            var n102 = this.getFileByFdOrThrow(e240, "futimes");
            var o72 = n102.node;
            o72.atime = new Date(1e3 * t189);
            o72.mtime = new Date(1e3 * r141);
        };
        Volume.prototype.futimesSync = function(e241, t190, r142) {
            this.futimesBase(e241, toUnixTimestamp(t190), toUnixTimestamp(r142));
        };
        Volume.prototype.futimes = function(e242, t191, r143, n103) {
            this.wrapAsync(this.futimesBase, [
                e242,
                toUnixTimestamp(t191),
                toUnixTimestamp(r143)
            ], n103);
        };
        Volume.prototype.utimesBase = function(e243, t192, r144) {
            var n104 = this.openSync(e243, "r+");
            try {
                this.futimesBase(n104, t192, r144);
            } finally{
                this.closeSync(n104);
            }
        };
        Volume.prototype.utimesSync = function(e244, t193, r145) {
            this.utimesBase(pathToFilename(e244), toUnixTimestamp(t193), toUnixTimestamp(r145));
        };
        Volume.prototype.utimes = function(e245, t194, r146, n105) {
            this.wrapAsync(this.utimesBase, [
                pathToFilename(e245),
                toUnixTimestamp(t194),
                toUnixTimestamp(r146)
            ], n105);
        };
        Volume.prototype.mkdirBase = function(e246, t195) {
            var r147 = filenameToSteps(e246);
            if (!r147.length) throw createError(Z112, "mkdir", e246);
            var n106 = this.getLinkParentAsDirOrThrow(e246, "mkdir");
            var o73 = r147[r147.length - 1];
            if (n106.getChild(o73)) throw createError(Z112, "mkdir", e246);
            n106.createChild(o73, this.createNode(true, t195));
        };
        Volume.prototype.mkdirpBase = function(e247, t196) {
            var r148 = filenameToSteps(e247);
            var n107 = this.root;
            for(var o74 = 0; o74 < r148.length; o74++){
                var i50 = r148[o74];
                if (!n107.getNode().isDirectory()) throw createError(Q17, "mkdir", n107.getPath());
                var a3111 = n107.getChild(i50);
                if (a3111) {
                    if (!a3111.getNode().isDirectory()) throw createError(Q17, "mkdir", a3111.getPath());
                    n107 = a3111;
                } else n107 = n107.createChild(i50, this.createNode(true, t196));
            }
        };
        Volume.prototype.mkdirSync = function(e248, t197) {
            var r149 = getMkdirOptions(t197);
            var n108 = modeToNumber(r149.mode, 511);
            var o75 = pathToFilename(e248);
            r149.recursive ? this.mkdirpBase(o75, n108) : this.mkdirBase(o75, n108);
        };
        Volume.prototype.mkdir = function(e249, t198, r150) {
            var n109 = getMkdirOptions(t198);
            var o76 = validateCallback("function" === typeof t198 ? t198 : r150);
            var i51 = modeToNumber(n109.mode, 511);
            var a3211 = pathToFilename(e249);
            n109.recursive ? this.wrapAsync(this.mkdirpBase, [
                a3211,
                i51
            ], o76) : this.wrapAsync(this.mkdirBase, [
                a3211,
                i51
            ], o76);
        };
        Volume.prototype.mkdirpSync = function(e250, t199) {
            this.mkdirSync(e250, {
                mode: t199,
                recursive: true
            });
        };
        Volume.prototype.mkdirp = function(e251, t200, r151) {
            var n110 = "function" === typeof t200 ? void 0 : t200;
            var o77 = validateCallback("function" === typeof t200 ? t200 : r151);
            this.mkdir(e251, {
                mode: n110,
                recursive: true
            }, o77);
        };
        Volume.prototype.mkdtempBase = function(e252, t201, r152) {
            void 0 === r152 && (r152 = 5);
            var n111 = e252 + this.genRndStr();
            try {
                this.mkdirBase(n111, 511);
                return (0, S115.strToEncoding)(n111, t201);
            } catch (n112) {
                if (n112.code === Z112) {
                    if (r152 > 1) return this.mkdtempBase(e252, t201, r152 - 1);
                    throw Error("Could not create temp dir.");
                }
                throw n112;
            }
        };
        Volume.prototype.mkdtempSync = function(e253, t202) {
            var r153 = se14(t202).encoding;
            if (!e253 || "string" !== typeof e253) throw new TypeError("filename prefix is required");
            nullCheck(e253);
            return this.mkdtempBase(e253, r153);
        };
        Volume.prototype.mkdtemp = function(e254, t203, r154) {
            var n113 = ue11(t203, r154), o78 = n113[0].encoding, i52 = n113[1];
            if (!e254 || "string" !== typeof e254) throw new TypeError("filename prefix is required");
            nullCheck(e254) && this.wrapAsync(this.mkdtempBase, [
                e254,
                o78
            ], i52);
        };
        Volume.prototype.rmdirBase = function(e255, t204) {
            var r155 = getRmdirOptions(t204);
            var n114 = this.getLinkAsDirOrThrow(e255, "rmdir");
            if (n114.length && !r155.recursive) throw createError(ne15, "rmdir", e255);
            this.deleteLink(n114);
        };
        Volume.prototype.rmdirSync = function(e256, t205) {
            this.rmdirBase(pathToFilename(e256), t205);
        };
        Volume.prototype.rmdir = function(e257, t206, r156) {
            var n115 = getRmdirOptions(t206);
            var o79 = validateCallback("function" === typeof t206 ? t206 : r156);
            this.wrapAsync(this.rmdirBase, [
                pathToFilename(e257),
                n115
            ], o79);
        };
        Volume.prototype.fchmodBase = function(e258, t207) {
            var r157 = this.getFileByFdOrThrow(e258, "fchmod");
            r157.chmod(t207);
        };
        Volume.prototype.fchmodSync = function(e259, t208) {
            this.fchmodBase(e259, modeToNumber(t208));
        };
        Volume.prototype.fchmod = function(e260, t209, r158) {
            this.wrapAsync(this.fchmodBase, [
                e260,
                modeToNumber(t209)
            ], r158);
        };
        Volume.prototype.chmodBase = function(e261, t210) {
            var r159 = this.openSync(e261, "r+");
            try {
                this.fchmodBase(r159, t210);
            } finally{
                this.closeSync(r159);
            }
        };
        Volume.prototype.chmodSync = function(e262, t211) {
            var r160 = modeToNumber(t211);
            var n116 = pathToFilename(e262);
            this.chmodBase(n116, r160);
        };
        Volume.prototype.chmod = function(e263, t212, r161) {
            var n117 = modeToNumber(t212);
            var o80 = pathToFilename(e263);
            this.wrapAsync(this.chmodBase, [
                o80,
                n117
            ], r161);
        };
        Volume.prototype.lchmodBase = function(e264, t213) {
            var r162 = this.openBase(e264, R112, 0, false);
            try {
                this.fchmodBase(r162, t213);
            } finally{
                this.closeSync(r162);
            }
        };
        Volume.prototype.lchmodSync = function(e265, t214) {
            var r163 = modeToNumber(t214);
            var n118 = pathToFilename(e265);
            this.lchmodBase(n118, r163);
        };
        Volume.prototype.lchmod = function(e266, t215, r164) {
            var n119 = modeToNumber(t215);
            var o81 = pathToFilename(e266);
            this.wrapAsync(this.lchmodBase, [
                o81,
                n119
            ], r164);
        };
        Volume.prototype.fchownBase = function(e267, t216, r165) {
            this.getFileByFdOrThrow(e267, "fchown").chown(t216, r165);
        };
        Volume.prototype.fchownSync = function(e268, t217, r166) {
            validateUid(t217);
            validateGid(r166);
            this.fchownBase(e268, t217, r166);
        };
        Volume.prototype.fchown = function(e269, t218, r167, n120) {
            validateUid(t218);
            validateGid(r167);
            this.wrapAsync(this.fchownBase, [
                e269,
                t218,
                r167
            ], n120);
        };
        Volume.prototype.chownBase = function(e270, t219, r168) {
            var n121 = this.getResolvedLinkOrThrow(e270, "chown");
            var o82 = n121.getNode();
            o82.chown(t219, r168);
        };
        Volume.prototype.chownSync = function(e271, t220, r169) {
            validateUid(t220);
            validateGid(r169);
            this.chownBase(pathToFilename(e271), t220, r169);
        };
        Volume.prototype.chown = function(e272, t221, r170, n122) {
            validateUid(t221);
            validateGid(r170);
            this.wrapAsync(this.chownBase, [
                pathToFilename(e272),
                t221,
                r170
            ], n122);
        };
        Volume.prototype.lchownBase = function(e273, t222, r171) {
            this.getLinkOrThrow(e273, "lchown").getNode().chown(t222, r171);
        };
        Volume.prototype.lchownSync = function(e274, t223, r172) {
            validateUid(t223);
            validateGid(r172);
            this.lchownBase(pathToFilename(e274), t223, r172);
        };
        Volume.prototype.lchown = function(e275, t224, r173, n123) {
            validateUid(t224);
            validateGid(r173);
            this.wrapAsync(this.lchownBase, [
                pathToFilename(e275),
                t224,
                r173
            ], n123);
        };
        Volume.prototype.watchFile = function(e276, t225, r174) {
            var n124 = pathToFilename(e276);
            var o83 = t225;
            var i53 = r174;
            if ("function" === typeof o83) {
                i53 = t225;
                o83 = null;
            }
            if ("function" !== typeof i53) throw Error('"watchFile()" requires a listener function');
            var a333 = 5007;
            var s2212 = true;
            if (o83 && "object" === typeof o83) {
                "number" === typeof o83.interval && (a333 = o83.interval);
                "boolean" === typeof o83.persistent && (s2212 = o83.persistent);
            }
            var u155 = this.statWatchers[n124];
            if (!u155) {
                u155 = new this.StatWatcher;
                u155.start(n124, s2212, a333);
                this.statWatchers[n124] = u155;
            }
            u155.addListener("change", i53);
            return u155;
        };
        Volume.prototype.unwatchFile = function(e277, t226) {
            var r175 = pathToFilename(e277);
            var n125 = this.statWatchers[r175];
            if (n125) {
                "function" === typeof t226 ? n125.removeListener("change", t226) : n125.removeAllListeners("change");
                if (0 === n125.listenerCount("change")) {
                    n125.stop();
                    delete this.statWatchers[r175];
                }
            }
        };
        Volume.prototype.createReadStream = function(e278, t227) {
            return new this.ReadStream(e278, t227);
        };
        Volume.prototype.createWriteStream = function(e279, t228) {
            return new this.WriteStream(e279, t228);
        };
        Volume.prototype.watch = function(e280, t229, r176) {
            var n126 = pathToFilename(e280);
            var o84 = t229;
            if ("function" === typeof t229) {
                r176 = t229;
                o84 = null;
            }
            var i54 = se14(o84), a342 = i54.persistent, s2312 = i54.recursive, u164 = i54.encoding;
            void 0 === a342 && (a342 = true);
            void 0 === s2312 && (s2312 = false);
            var c144 = new this.FSWatcher;
            c144.start(n126, a342, s2312, u164);
            r176 && c144.addListener("change", r176);
            return c144;
        };
        Volume.fd = 2147483647;
        return Volume;
    }();
    M14.Volume = Ne11;
    function emitStop(e281) {
        e281.emit("stop");
    }
    var Oe11 = function(t230) {
        e95(StatWatcher, t230);
        function StatWatcher(e282) {
            var r177 = t230.call(this) || this;
            r177.onInterval = function() {
                try {
                    var e283 = r177.vol.statSync(r177.filename);
                    if (r177.hasChanged(e283)) {
                        r177.emit("change", e283, r177.prev);
                        r177.prev = e283;
                    }
                } finally{
                    r177.loop();
                }
            };
            r177.vol = e282;
            return r177;
        }
        StatWatcher.prototype.loop = function() {
            this.timeoutRef = this.setTimeout(this.onInterval, this.interval);
        };
        StatWatcher.prototype.hasChanged = function(e284) {
            return e284.mtimeMs > this.prev.mtimeMs || e284.nlink !== this.prev.nlink;
        };
        StatWatcher.prototype.start = function(e285, t231, r178) {
            void 0 === t231 && (t231 = true);
            void 0 === r178 && (r178 = 5007);
            this.filename = pathToFilename(e285);
            this.setTimeout = t231 ? setTimeout.bind("undefined" !== typeof globalThis ? globalThis : j14) : h217.default;
            this.interval = r178;
            this.prev = this.vol.statSync(this.filename);
            this.loop();
        };
        StatWatcher.prototype.stop = function() {
            clearTimeout(this.timeoutRef);
            d215.default.nextTick(emitStop, this);
        };
        return StatWatcher;
    }(v119.EventEmitter);
    M14.StatWatcher = Oe11;
    var ke11;
    function allocNewPool(e286) {
        ke11 = (0, l226.bufferAllocUnsafe)(e286);
        ke11.used = 0;
    }
    g118.inherits(FsReadStream, m123.Readable);
    M14.ReadStream = FsReadStream;
    function FsReadStream(e287, t232, r179) {
        if (!(this instanceof FsReadStream)) return new FsReadStream(e287, t232, r179);
        this._vol = e287;
        r179 = Object.assign({}, getOptions1(r179, {}));
        void 0 === r179.highWaterMark && (r179.highWaterMark = 65536);
        m123.Readable.call(this, r179);
        this.path = pathToFilename(t232);
        this.fd = void 0 === r179.fd ? null : r179.fd;
        this.flags = void 0 === r179.flags ? "r" : r179.flags;
        this.mode = void 0 === r179.mode ? 438 : r179.mode;
        this.start = r179.start;
        this.end = r179.end;
        this.autoClose = void 0 === r179.autoClose || r179.autoClose;
        this.pos = void 0;
        this.bytesRead = 0;
        if (void 0 !== this.start) {
            if ("number" !== typeof this.start) throw new TypeError('"start" option must be a Number');
            if (void 0 === this.end) this.end = Infinity;
            else if ("number" !== typeof this.end) throw new TypeError('"end" option must be a Number');
            if (this.start > this.end) throw new Error('"start" option must be <= "end" option');
            this.pos = this.start;
        }
        "number" !== typeof this.fd && this.open();
        this.on("end", function() {
            this.autoClose && this.destroy && this.destroy();
        });
    }
    FsReadStream.prototype.open = function() {
        var e288 = this;
        this._vol.open(this.path, this.flags, this.mode, function(t233, r180) {
            if (t233) {
                e288.autoClose && e288.destroy && e288.destroy();
                e288.emit("error", t233);
            } else {
                e288.fd = r180;
                e288.emit("open", r180);
                e288.read();
            }
        });
    };
    FsReadStream.prototype._read = function(e289) {
        if ("number" !== typeof this.fd) return this.once("open", function() {
            this._read(e289);
        });
        if (!this.destroyed) {
            (!ke11 || ke11.length - ke11.used < K17) && allocNewPool(this._readableState.highWaterMark);
            var t = ke11;
            var r181 = Math.min(ke11.length - ke11.used, e289);
            var n = ke11.used;
            void 0 !== this.pos && (r181 = Math.min(this.end - this.pos + 1, r181));
            if (r181 <= 0) return this.push(null);
            var o = this;
            this._vol.read(this.fd, ke11, ke11.used, r181, this.pos, onread);
            void 0 !== this.pos && (this.pos += r181);
            ke11.used += r181;
        }
        function onread(e290, r182) {
            if (e290) {
                o.autoClose && o.destroy && o.destroy();
                o.emit("error", e290);
            } else {
                var i55 = null;
                if (r182 > 0) {
                    o.bytesRead += r182;
                    i55 = t.slice(n, n + r182);
                }
                o.push(i55);
            }
        }
    };
    FsReadStream.prototype._destroy = function(e291, t) {
        this.close(function(r183) {
            t(e291 || r183);
        });
    };
    FsReadStream.prototype.close = function(e292) {
        var t = this;
        e292 && this.once("close", e292);
        if (this.closed || "number" !== typeof this.fd) {
            if ("number" !== typeof this.fd) {
                this.once("open", closeOnOpen);
                return;
            }
            return d215.default.nextTick(function() {
                return t.emit("close");
            });
        }
        this.closed = true;
        this._vol.close(this.fd, function(e293) {
            e293 ? t.emit("error", e293) : t.emit("close");
        });
        this.fd = null;
    };
    function closeOnOpen(e) {
        this.close();
    }
    g118.inherits(FsWriteStream, m123.Writable);
    M14.WriteStream = FsWriteStream;
    function FsWriteStream(e294, t, r184) {
        if (!(this instanceof FsWriteStream)) return new FsWriteStream(e294, t, r184);
        this._vol = e294;
        r184 = Object.assign({}, getOptions1(r184, {}));
        m123.Writable.call(this, r184);
        this.path = pathToFilename(t);
        this.fd = void 0 === r184.fd ? null : r184.fd;
        this.flags = void 0 === r184.flags ? "w" : r184.flags;
        this.mode = void 0 === r184.mode ? 438 : r184.mode;
        this.start = r184.start;
        this.autoClose = void 0 === r184.autoClose || !!r184.autoClose;
        this.pos = void 0;
        this.bytesWritten = 0;
        if (void 0 !== this.start) {
            if ("number" !== typeof this.start) throw new TypeError('"start" option must be a Number');
            if (this.start < 0) throw new Error('"start" must be >= zero');
            this.pos = this.start;
        }
        r184.encoding && this.setDefaultEncoding(r184.encoding);
        "number" !== typeof this.fd && this.open();
        this.once("finish", function() {
            this.autoClose && this.close();
        });
    }
    FsWriteStream.prototype.open = function() {
        this._vol.open(this.path, this.flags, this.mode, (function(e295, t) {
            if (e295) {
                this.autoClose && this.destroy && this.destroy();
                this.emit("error", e295);
            } else {
                this.fd = t;
                this.emit("open", t);
            }
        }).bind(this));
    };
    FsWriteStream.prototype._write = function(e296, t235, r185) {
        if (!(e296 instanceof l226.Buffer)) return this.emit("error", new Error("Invalid data"));
        if ("number" !== typeof this.fd) return this.once("open", function() {
            this._write(e296, t235, r185);
        });
        var n = this;
        this._vol.write(this.fd, e296, 0, e296.length, this.pos, function(e297, t) {
            if (e297) {
                n.autoClose && n.destroy && n.destroy();
                return r185(e297);
            }
            n.bytesWritten += t;
            r185();
        });
        void 0 !== this.pos && (this.pos += e296.length);
    };
    FsWriteStream.prototype._writev = function(e298, t) {
        if ("number" !== typeof this.fd) return this.once("open", function() {
            this._writev(e298, t);
        });
        var r186 = this;
        var n128 = e298.length;
        var o = new Array(n128);
        var i56 = 0;
        for(var a352 = 0; a352 < n128; a352++){
            var s2412 = e298[a352].chunk;
            o[a352] = s2412;
            i56 += s2412.length;
        }
        var u174 = l226.Buffer.concat(o);
        this._vol.write(this.fd, u174, 0, u174.length, this.pos, function(e299, n) {
            if (e299) {
                r186.destroy && r186.destroy();
                return t(e299);
            }
            r186.bytesWritten += n;
            t();
        });
        void 0 !== this.pos && (this.pos += i56);
    };
    FsWriteStream.prototype._destroy = FsReadStream.prototype._destroy;
    FsWriteStream.prototype.close = FsReadStream.prototype.close;
    FsWriteStream.prototype.destroySoon = FsWriteStream.prototype.end;
    var Ie11 = function(t236) {
        e95(FSWatcher, t236);
        function FSWatcher(e300) {
            var r187 = t236.call(this) || this;
            r187._filename = "";
            r187._filenameEncoded = "";
            r187._recursive = false;
            r187._encoding = S115.ENCODING_UTF8;
            r187._onNodeChange = function() {
                r187._emit("change");
            };
            r187._onParentChild = function(e301) {
                e301.getName() === r187._getName() && r187._emit("rename");
            };
            r187._emit = function(e302) {
                r187.emit("change", e302, r187._filenameEncoded);
            };
            r187._persist = function() {
                r187._timer = setTimeout(r187._persist, 1e6);
            };
            r187._vol = e300;
            return r187;
        }
        FSWatcher.prototype._getName = function() {
            return this._steps[this._steps.length - 1];
        };
        FSWatcher.prototype.start = function(e303, t, r188, n) {
            void 0 === t && (t = true);
            void 0 === r188 && (r188 = false);
            void 0 === n && (n = S115.ENCODING_UTF8);
            this._filename = pathToFilename(e303);
            this._steps = filenameToSteps(this._filename);
            this._filenameEncoded = (0, S115.strToEncoding)(this._filename);
            this._recursive = r188;
            this._encoding = n;
            try {
                this._link = this._vol.getLinkOrThrow(this._filename, "FSWatcher");
            } catch (e304) {
                var o = new Error("watch " + this._filename + " " + e304.code);
                o.code = e304.code;
                o.errno = e304.code;
                throw o;
            }
            this._link.getNode().on("change", this._onNodeChange);
            this._link.on("child:add", this._onNodeChange);
            this._link.on("child:delete", this._onNodeChange);
            var i57 = this._link.parent;
            if (i57) {
                i57.setMaxListeners(i57.getMaxListeners() + 1);
                i57.on("child:delete", this._onParentChild);
            }
            t && this._persist();
        };
        FSWatcher.prototype.close = function() {
            clearTimeout(this._timer);
            this._link.getNode().removeListener("change", this._onNodeChange);
            var e305 = this._link.parent;
            e305 && e305.removeListener("child:delete", this._onParentChild);
        };
        return FSWatcher;
    }(v119.EventEmitter);
    M14.FSWatcher = Ie11;
    return M14;
}
var G12 = {}, H14 = false;
function dew$18() {
    if (H14) return G12;
    H14 = true;
    Object.defineProperty(G12, "__esModule", {
        value: true
    });
    G12.fsAsyncMethods = G12.fsSyncMethods = G12.fsProps = void 0;
    var e306 = [
        "constants",
        "F_OK",
        "R_OK",
        "W_OK",
        "X_OK",
        "Stats"
    ];
    G12.fsProps = e306;
    var t = [
        "renameSync",
        "ftruncateSync",
        "truncateSync",
        "chownSync",
        "fchownSync",
        "lchownSync",
        "chmodSync",
        "fchmodSync",
        "lchmodSync",
        "statSync",
        "lstatSync",
        "fstatSync",
        "linkSync",
        "symlinkSync",
        "readlinkSync",
        "realpathSync",
        "unlinkSync",
        "rmdirSync",
        "mkdirSync",
        "mkdirpSync",
        "readdirSync",
        "closeSync",
        "openSync",
        "utimesSync",
        "futimesSync",
        "fsyncSync",
        "writeSync",
        "readSync",
        "readFileSync",
        "writeFileSync",
        "appendFileSync",
        "existsSync",
        "accessSync",
        "fdatasyncSync",
        "mkdtempSync",
        "copyFileSync",
        "createReadStream",
        "createWriteStream"
    ];
    G12.fsSyncMethods = t;
    var r189 = [
        "rename",
        "ftruncate",
        "truncate",
        "chown",
        "fchown",
        "lchown",
        "chmod",
        "fchmod",
        "lchmod",
        "stat",
        "lstat",
        "fstat",
        "link",
        "symlink",
        "readlink",
        "realpath",
        "unlink",
        "rmdir",
        "mkdir",
        "mkdirp",
        "readdir",
        "close",
        "open",
        "utimes",
        "futimes",
        "fsync",
        "write",
        "read",
        "readFile",
        "writeFile",
        "appendFile",
        "exists",
        "access",
        "fdatasync",
        "mkdtemp",
        "copyFile",
        "watchFile",
        "unwatchFile",
        "watch"
    ];
    G12.fsAsyncMethods = r189;
    return G12;
}
var K12 = {}, $16 = false;
function dew22() {
    if ($16) return K12;
    $16 = true;
    var e307 = K12 && K12.__assign || function() {
        e307 = Object.assign || function(e308) {
            for(var t, r191 = 1, n = arguments.length; r191 < n; r191++){
                t = arguments[r191];
                for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && (e308[o] = t[o]);
            }
            return e308;
        };
        return e307.apply(this, arguments);
    };
    Object.defineProperty(K12, "__esModule", {
        value: true
    });
    K12.fs = K12.createFsFromVolume = K12.vol = K12.Volume = void 0;
    var t237 = dew$d4();
    var r190 = dew$94();
    var n129 = dew$25();
    var o86 = dew$18(), i58 = o86.fsSyncMethods, a362 = o86.fsAsyncMethods;
    var s2512 = dew$f3();
    var u184 = s2512.constants.F_OK, c153 = s2512.constants.R_OK, f127 = s2512.constants.W_OK, l418 = s2512.constants.X_OK;
    K12.Volume = n129.Volume;
    K12.vol = new n129.Volume;
    function createFsFromVolume(e309) {
        var o = {
            F_OK: u184,
            R_OK: c153,
            W_OK: f127,
            X_OK: l418,
            constants: s2512.constants,
            Stats: t237.default,
            Dirent: r190.default
        };
        for(var p317 = 0, d413 = i58; p317 < d413.length; p317++){
            var h410 = d413[p317];
            "function" === typeof e309[h410] && (o[h410] = e309[h410].bind(e309));
        }
        for(var m313 = 0, y38 = a362; m313 < y38.length; m313++){
            h410 = y38[m313];
            "function" === typeof e309[h410] && (o[h410] = e309[h410].bind(e309));
        }
        o.StatWatcher = e309.StatWatcher;
        o.FSWatcher = e309.FSWatcher;
        o.WriteStream = e309.WriteStream;
        o.ReadStream = e309.ReadStream;
        o.promises = e309.promises;
        o._toUnixTimestamp = n129.toUnixTimestamp;
        return o;
    }
    K12.createFsFromVolume = createFsFromVolume;
    K12.fs = createFsFromVolume(K12.vol);
    K12 = e307(e307({}, K12), K12.fs);
    K12.semantic = true;
    return K12;
}
const Y12 = dew22();
Y12.__esModule;
Y12.fs;
Y12.createFsFromVolume;
Y12.vol;
Y12.Volume;
Y12.semantic;
const J11 = dew$25();
J11.__esModule;
J11.FSWatcher;
J11.StatWatcher;
J11.Volume;
J11.toUnixTimestamp;
J11.bufferToEncoding;
J11.dataToBuffer;
J11.dataToStr;
J11.pathToSteps;
J11.filenameToSteps;
J11.pathToFilename;
J11.flagsToNumber;
J11.FLAGS;
J11.ReadStream;
J11.WriteStream;
const { vol: X12 , createFsFromVolume: q13  } = Y12;
function unimplemented(e310) {
    throw new Error(`Node.js fs ${e310} is not supported by JSPM core in the browser`);
}
X12.fromNestedJSON({
    "/dev": {
        stdin: "",
        stdout: "",
        stderr: ""
    },
    "/usr/bin": {},
    "/home": {},
    "/tmp": {}
});
X12.releasedFds = [
    2,
    1,
    0
];
X12.openSync("/dev/stdin", "w");
X12.openSync("/dev/stdout", "r");
X12.openSync("/dev/stderr", "r");
watchStdo("/dev/stdout", 1, console.log);
watchStdo("/dev/stderr", 2, console.error);
function watchStdo(e311, t, r192) {
    let n = 0;
    const o = new TextDecoder;
    X12.watch(e311, "utf8", ()=>{
        const { size: e312  } = X12.fstatSync(t);
        const i59 = u6.alloc(e312 - n);
        X12.readSync(t, i59, 0, i59.length, n);
        n = e312;
        r192(o.decode(i59, {
            stream: true
        }));
    });
}
const z12 = q13(X12);
z12.opendir = ()=>unimplemented("opendir")
;
z12.opendirSync = ()=>unimplemented("opendirSync")
;
z12.promises.opendir = ()=>unimplemented("promises.opendir")
;
z12.cp = ()=>unimplemented("cp")
;
z12.cpSync = ()=>unimplemented("cpSync")
;
z12.promises.cp = ()=>unimplemented("promises.cp")
;
z12.readv = ()=>unimplemented("readv")
;
z12.readvSync = ()=>unimplemented("readvSync")
;
z12.rm = ()=>unimplemented("rm")
;
z12.rmSync = ()=>unimplemented("rmSync")
;
z12.promises.rm = ()=>unimplemented("promises.rm")
;
z12.Dir = ()=>unimplemented("Dir")
;
z12.promises.watch = ()=>unimplemented("promises.watch")
;
z12.FileReadStream = z12.ReadStream;
z12.FileWriteStream = z12.WriteStream;
function handleFsUrl(e313, t238) {
    if ("file:" === e313.protocol) return fileURLToPath(e313);
    if ("https:" === e313.protocol || "http:" === e313.protocol) {
        const r193 = "\\\\url\\" + e313.href.replaceAll(/\//g, "\\\\");
        if (me7(r193)) return r193;
        if (t238) throw new Error(`Cannot sync request URL ${e313} via FS. JSPM FS support for network URLs requires using async FS methods or priming the MemFS cache first with an async request before a sync request.`);
        return (async ()=>{
            const t = await fetch(e313);
            if (!t.ok) throw new Error(`Unable to fetch ${e313.href}, ${t.status}`);
            const n = await t.arrayBuffer();
            Tt3(r193, u6.from(n));
            return r193;
        })();
    }
    throw new Error("URL " + e313 + " not supported in JSPM FS implementation.");
}
function wrapFsSync(e314) {
    return function(t, ...r194) {
        return t instanceof URL ? e314(handleFsUrl(t, true), ...r194) : e314(t, ...r194);
    };
}
function wrapFsPromise(e315) {
    return async function(t, ...r195) {
        return t instanceof URL ? e315(await handleFsUrl(t), ...r195) : e315(t, ...r195);
    };
}
function wrapFsCallback(e316) {
    return function(t239, ...r196) {
        const n = r196[r196.length - 1];
        t239 instanceof URL && "function" === typeof n ? handleFsUrl(t239).then((t)=>{
            e316(t, ...r196);
        }, n) : e316(t239, ...r196);
    };
}
z12.promises.readFile = wrapFsPromise(z12.promises.readFile);
z12.readFile = wrapFsCallback(z12.readFile);
z12.readFileSync = wrapFsSync(z12.readFileSync);
const { appendFile: Z11 , appendFileSync: Q12 , access: ee10 , accessSync: te10 , chown: re11 , chownSync: ne11 , chmod: oe10 , chmodSync: ie10 , close: ae10 , closeSync: se10 , copyFile: ue8 , copyFileSync: ce8 , cp: fe7 , cpSync: le8 , createReadStream: pe8 , createWriteStream: de8 , exists: he8 , existsSync: me7 , fchown: ye8 , fchownSync: ve9 , fchmod: Se7 , fchmodSync: _e4 , fdatasync: ge7 , fdatasyncSync: Ee7 , fstat: Fe5 , fstatSync: we6 , fsync: Te6 , fsyncSync: be6 , ftruncate: Re5 , ftruncateSync: Ne7 , futimes: Oe7 , futimesSync: ke6 , lchown: Ie7 , lchownSync: Le5 , lchmod: Ae6 , lchmodSync: Ve4 , link: Be5 , linkSync: Ce5 , lstat: Pe7 , lstatSync: De6 , mkdir: Ue5 , mkdirSync: We5 , mkdtemp: Me7 , mkdtempSync: xe7 , open: je5 , openSync: Ge3 , opendir: He3 , opendirSync: Ke5 , readdir: $e6 , readdirSync: Ye3 , read: Je4 , readSync: Xe4 , readv: qe4 , readvSync: ze5 , readFile: Ze2 , readFileSync: Qe4 , readlink: et3 , readlinkSync: tt6 , realpath: rt5 , realpathSync: nt4 , rename: ot3 , renameSync: it4 , rm: at4 , rmSync: st4 , rmdir: ut4 , rmdirSync: ct3 , stat: ft4 , statSync: lt5 , symlink: pt3 , symlinkSync: dt4 , truncate: ht3 , truncateSync: mt4 , unwatchFile: yt4 , unlink: vt3 , unlinkSync: St3 , utimes: _t3 , utimesSync: gt4 , watch: Et3 , watchFile: Ft3 , writeFile: wt3 , writeFileSync: Tt3 , write: bt3 , writeSync: Rt3 , writev: Nt3 , writevSync: Ot3 , Dir: kt3 , Dirent: It3 , Stats: Lt3 , ReadStream: At3 , WriteStream: Vt3 , FileReadStream: Bt3 , FileWriteStream: Ct3 , _toUnixTimestamp: Pt4 , constants: { F_OK: Dt3 , R_OK: Ut3 , W_OK: Wt3 , X_OK: Mt3  } , constants: xt4 , promises: jt3  } = z12;
const mod39 = {
    Dir: kt3,
    Dirent: It3,
    F_OK: Dt3,
    FileReadStream: Bt3,
    FileWriteStream: Ct3,
    R_OK: Ut3,
    ReadStream: At3,
    Stats: Lt3,
    W_OK: Wt3,
    WriteStream: Vt3,
    X_OK: Mt3,
    _toUnixTimestamp: Pt4,
    access: ee10,
    accessSync: te10,
    appendFile: Z11,
    appendFileSync: Q12,
    chmod: oe10,
    chmodSync: ie10,
    chown: re11,
    chownSync: ne11,
    close: ae10,
    closeSync: se10,
    constants: xt4,
    copyFile: ue8,
    copyFileSync: ce8,
    cp: fe7,
    cpSync: le8,
    createReadStream: pe8,
    createWriteStream: de8,
    default: z12,
    exists: he8,
    existsSync: me7,
    fchmod: Se7,
    fchmodSync: _e4,
    fchown: ye8,
    fchownSync: ve9,
    fdatasync: ge7,
    fdatasyncSync: Ee7,
    fstat: Fe5,
    fstatSync: we6,
    fsync: Te6,
    fsyncSync: be6,
    ftruncate: Re5,
    ftruncateSync: Ne7,
    futimes: Oe7,
    futimesSync: ke6,
    lchmod: Ae6,
    lchmodSync: Ve4,
    lchown: Ie7,
    lchownSync: Le5,
    link: Be5,
    linkSync: Ce5,
    lstat: Pe7,
    lstatSync: De6,
    mkdir: Ue5,
    mkdirSync: We5,
    mkdtemp: Me7,
    mkdtempSync: xe7,
    open: je5,
    openSync: Ge3,
    opendir: He3,
    opendirSync: Ke5,
    promises: jt3,
    read: Je4,
    readFile: Ze2,
    readFileSync: Qe4,
    readSync: Xe4,
    readdir: $e6,
    readdirSync: Ye3,
    readlink: et3,
    readlinkSync: tt6,
    readv: qe4,
    readvSync: ze5,
    realpath: rt5,
    realpathSync: nt4,
    rename: ot3,
    renameSync: it4,
    rm: at4,
    rmSync: st4,
    rmdir: ut4,
    rmdirSync: ct3,
    stat: ft4,
    statSync: lt5,
    symlink: pt3,
    symlinkSync: dt4,
    truncate: ht3,
    truncateSync: mt4,
    unlink: vt3,
    unlinkSync: St3,
    unwatchFile: yt4,
    utimes: _t3,
    utimesSync: gt4,
    watch: Et3,
    watchFile: Ft3,
    write: bt3,
    writeFile: wt3,
    writeFileSync: Tt3,
    writeSync: Rt3,
    writev: Nt3,
    writevSync: Ot3
};
var e34 = {};
var f34 = o7;
var o43 = f34.Buffer;
function copyProps(r1108, e1) {
    for(var f128 in r1108)e1[f128] = r1108[f128];
}
if (o43.from && o43.alloc && o43.allocUnsafe && o43.allocUnsafeSlow) e34 = f34;
else {
    copyProps(f34, e34);
    e34.Buffer = SafeBuffer;
}
function SafeBuffer(r268, e2, f219) {
    return o43(r268, e2, f219);
}
copyProps(o43, SafeBuffer);
SafeBuffer.from = function(r350, e3148, f316) {
    if ("number" === typeof r350) throw new TypeError("Argument must not be a number");
    return o43(r350, e3148, f316);
};
SafeBuffer.alloc = function(r446, e4126, f415) {
    if ("number" !== typeof r446) throw new TypeError("Argument must be a number");
    var n1168 = o43(r446);
    void 0 !== e4126 ? "string" === typeof f415 ? n1168.fill(e4126, f415) : n1168.fill(e4126) : n1168.fill(0);
    return n1168;
};
SafeBuffer.allocUnsafe = function(r538) {
    if ("number" !== typeof r538) throw new TypeError("Argument must be a number");
    return o43(r538);
};
SafeBuffer.allocUnsafeSlow = function(r635) {
    if ("number" !== typeof r635) throw new TypeError("Argument must be a number");
    return f34.SlowBuffer(r635);
};
var n48 = e34;
const u35 = e34.Buffer;
const mod40 = {
    Buffer: u35,
    default: n48
};
var o44 = "default" in mod39 ? mod39.default : mod39;
var n49 = "default" in mod27 ? mod27.default : mod27;
var m28 = "default" in mod40 ? mod40.default : mod40;
var a40 = {};
var i40 = o44;
var u36 = n49;
var p32 = m28;
Object.defineProperty(a40, "commentRegex", {
    get: function getCommentRegex() {
        return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
    }
});
Object.defineProperty(a40, "mapFileCommentRegex", {
    get: function getMapFileCommentRegex() {
        return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
    }
});
function decodeBase64(e1) {
    return (p32.Buffer.from(e1, "base64") || "").toString();
}
function stripComment(e2) {
    return e2.split(",").pop();
}
function readFromFileMap(e3149, r1109) {
    var t1173 = a40.mapFileCommentRegex.exec(e3149);
    var o170 = t1173[1] || t1173[2];
    var n1169 = u36.resolve(r1109, o170);
    try {
        return i40.readFileSync(n1169, "utf8");
    } catch (e4127) {
        throw new Error("An error occurred while trying to read the map file at " + n1169 + "\n" + e4127);
    }
}
function Converter(e5126, r269) {
    r269 = r269 || {};
    r269.isFileComment && (e5126 = readFromFileMap(e5126, r269.commentFileDir));
    r269.hasComment && (e5126 = stripComment(e5126));
    r269.isEncoded && (e5126 = decodeBase64(e5126));
    (r269.isJSON || r269.isEncoded) && (e5126 = JSON.parse(e5126));
    this.sourcemap = e5126;
}
Converter.prototype.toJSON = function(e6125) {
    return JSON.stringify(this.sourcemap, null, e6125);
};
Converter.prototype.toBase64 = function() {
    var e7117 = this.toJSON();
    return (p32.Buffer.from(e7117, "utf8") || "").toString("base64");
};
Converter.prototype.toComment = function(e8121) {
    var r354 = this.toBase64();
    var t2157 = "sourceMappingURL=data:application/json;charset=utf-8;base64," + r354;
    return e8121 && e8121.multiline ? "/*# " + t2157 + " */" : "//# " + t2157;
};
Converter.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
};
Converter.prototype.addProperty = function(e9120, r447) {
    if (this.sourcemap.hasOwnProperty(e9120)) throw new Error('property "' + e9120 + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(e9120, r447);
};
Converter.prototype.setProperty = function(e1032, r539) {
    this.sourcemap[e1032] = r539;
    return this;
};
Converter.prototype.getProperty = function(e1137) {
    return this.sourcemap[e1137];
};
a40.fromObject = function(e1231) {
    return new Converter(e1231);
};
a40.fromJSON = function(e1330) {
    return new Converter(e1330, {
        isJSON: true
    });
};
a40.fromBase64 = function(e1429) {
    return new Converter(e1429, {
        isEncoded: true
    });
};
a40.fromComment = function(e1528) {
    e1528 = e1528.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
    return new Converter(e1528, {
        isEncoded: true,
        hasComment: true
    });
};
a40.fromMapFileComment = function(e1628, r636) {
    return new Converter(e1628, {
        commentFileDir: r636,
        isFileComment: true,
        isJSON: true
    });
};
a40.fromSource = function(e1727) {
    var r730 = e1727.match(a40.commentRegex);
    return r730 ? a40.fromComment(r730.pop()) : null;
};
a40.fromMapFileSource = function(e1824, r828) {
    var t3126 = e1824.match(a40.mapFileCommentRegex);
    return t3126 ? a40.fromMapFileComment(t3126.pop(), r828) : null;
};
a40.removeComments = function(e1923) {
    return e1923.replace(a40.commentRegex, "");
};
a40.removeMapFileComments = function(e2022) {
    return e2022.replace(a40.mapFileCommentRegex, "");
};
a40.generateMapFileComment = function(e2119, r924) {
    var t4119 = "sourceMappingURL=" + e2119;
    return r924 && r924.multiline ? "/*# " + t4119 + " */" : "//# " + t4119;
};
const s40 = a40.fromObject, c37 = a40.fromJSON, f35 = a40.fromBase64, l37 = a40.fromComment, C20 = a40.fromMapFileComment, v27 = a40.fromSource, d30 = a40.fromMapFileSource, g25 = a40.removeComments, h27 = a40.removeMapFileComments, F17 = a40.generateMapFileComment;
const mod41 = {
    fromBase64: f35,
    fromComment: l37,
    fromJSON: c37,
    fromMapFileComment: C20,
    fromMapFileSource: d30,
    fromObject: s40,
    fromSource: v27,
    generateMapFileComment: F17,
    removeComments: g25,
    removeMapFileComments: h27,
    default: a40
};
var e35 = {}, t40 = false;
function dew23() {
    if (t40) return e35;
    t40 = true;
    Object.defineProperty(e35, "__esModule", {
        value: true
    });
    e35.default = _default4;
    const r200 = "$$ babel internal serialized type" + Math.random();
    function serialize(e, t1174) {
        return "bigint" !== typeof t1174 ? t1174 : {
            [r200]: "BigInt",
            value: t1174.toString()
        };
    }
    function revive(e, t2158) {
        return t2158 && "object" === typeof t2158 ? "BigInt" !== t2158[r200] ? t2158 : BigInt(t2158.value) : t2158;
    }
    function _default4(e1) {
        return JSON.parse(JSON.stringify(e1, serialize), revive);
    }
    return e35;
}
var t41 = {};
(function(e, r209) {
    t41 = r209();
})(0, function() {
    const t1175 = /^[\w+.-]+:\/\//;
    const e1 = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?/;
    const r1125 = /^file:(?:\/\/((?![a-z]:)[^/]*)?)?(\/?.*)/i;
    function isAbsoluteUrl(e2) {
        return t1175.test(e2);
    }
    function isSchemeRelativeUrl(t2159) {
        return t2159.startsWith("//");
    }
    function isAbsolutePath(t3127) {
        return t3127.startsWith("/");
    }
    function isFileUrl(t4120) {
        return t4120.startsWith("file:");
    }
    function parseAbsoluteUrl(t5119) {
        const r270 = e1.exec(t5119);
        return makeUrl(r270[1], r270[2] || "", r270[3], r270[4] || "", r270[5] || "/");
    }
    function parseFileUrl(t644) {
        const e3150 = r1125.exec(t644);
        const s398 = e3150[2];
        return makeUrl("file:", "", e3150[1] || "", "", isAbsolutePath(s398) ? s398 : "/" + s398);
    }
    function makeUrl(t740, e4128, r275, s399, n) {
        return {
            scheme: t740,
            user: e4128,
            host: r275,
            port: s399,
            path: n,
            relativePath: false
        };
    }
    function parseUrl(t836) {
        if (isSchemeRelativeUrl(t836)) {
            const e5127 = parseAbsoluteUrl("http:" + t836);
            e5127.scheme = "";
            return e5127;
        }
        if (isAbsolutePath(t836)) {
            const e6126 = parseAbsoluteUrl("http://foo.com" + t836);
            e6126.scheme = "";
            e6126.host = "";
            return e6126;
        }
        if (isFileUrl(t836)) return parseFileUrl(t836);
        if (isAbsoluteUrl(t836)) return parseAbsoluteUrl(t836);
        const e7118 = parseAbsoluteUrl("http://foo.com/" + t836);
        e7118.scheme = "";
        e7118.host = "";
        e7118.relativePath = true;
        return e7118;
    }
    function stripPathFilename(t932) {
        if (t932.endsWith("/..")) return t932;
        const e8122 = t932.lastIndexOf("/");
        return t932.slice(0, e8122 + 1);
    }
    function mergePaths(t1031, e9121) {
        if (t1031.relativePath) {
            normalizePath(e9121);
            "/" === t1031.path ? t1031.path = e9121.path : t1031.path = stripPathFilename(e9121.path) + t1031.path;
            t1031.relativePath = e9121.relativePath;
        }
    }
    function normalizePath(t1329) {
        const { relativePath: e1033  } = t1329;
        const r276 = t1329.path.split("/");
        let s400 = 1;
        let n = 0;
        let i268 = false;
        for(let t1176 = 1; t1176 < r276.length; t1176++){
            const a = r276[t1176];
            if (a) {
                i268 = false;
                if ("." !== a) if (".." !== a) {
                    r276[s400++] = a;
                    n++;
                } else if (n) {
                    i268 = true;
                    n--;
                    s400--;
                } else e1033 && (r276[s400++] = a);
            } else i268 = true;
        }
        let a = "";
        for(let t1229 = 1; t1229 < s400; t1229++)a += "/" + r276[t1229];
        (!a || i268 && !a.endsWith("/..")) && (a += "/");
        t1329.path = a;
    }
    function resolve3(t1427, e1138) {
        if (!t1427 && !e1138) return "";
        const r277 = parseUrl(t1427);
        if (e1138 && !r277.scheme) {
            const t1526 = parseUrl(e1138);
            r277.scheme = t1526.scheme;
            if (!r277.host) {
                r277.user = t1526.user;
                r277.host = t1526.host;
                r277.port = t1526.port;
            }
            mergePaths(r277, t1526);
        }
        normalizePath(r277);
        if (r277.relativePath) {
            const s401 = r277.path.slice(1);
            if (!s401) return ".";
            const n = (e1138 || t1427).startsWith(".");
            return !n || s401.startsWith(".") ? s401 : "./" + s401;
        }
        return r277.scheme || r277.host ? `${r277.scheme}//${r277.user}${r277.host}${r277.port}${r277.path}` : r277.path;
    }
    return resolve3;
});
var e36 = t41;
const mod42 = {
    default: e36
};
var t42 = "default" in mod9 ? mod9.default : mod9;
var o45 = "default" in mod42 ? mod42.default : mod42;
var r55 = {};
(function(e, n1170) {
    n1170(r55, t42, o45);
})(0, function(e1, n2146, t1177) {
    function _interopDefaultLegacy2(e2) {
        return e2 && "object" === typeof e2 && "default" in e2 ? e2 : {
            default: e2
        };
    }
    var o177 = _interopDefaultLegacy2(t1177);
    function resolve4(e3151, n358) {
        n358 && !n358.endsWith("/") && (n358 += "/");
        return o177.default(e3151, n358);
    }
    function stripFilename(e4129) {
        if (!e4129) return "";
        const n447 = e4129.lastIndexOf("/");
        return e4129.slice(0, n447 + 1);
    }
    const r1126 = 0;
    const s1132 = 1;
    const c145 = 2;
    const i1127 = 3;
    const l138 = 4;
    const d126 = 1;
    const u137 = 2;
    function maybeSort(e5128, n540) {
        const t2160 = nextUnsortedSegmentLine(e5128, 0);
        if (t2160 === e5128.length) return e5128;
        n540 || (e5128 = e5128.slice());
        for(let o255 = t2160; o255 < e5128.length; o255 = nextUnsortedSegmentLine(e5128, o255 + 1))e5128[o255] = sortSegments(e5128[o255], n540);
        return e5128;
    }
    function nextUnsortedSegmentLine(e6127, n638) {
        for(let t3128 = n638; t3128 < e6127.length; t3128++)if (!isSorted(e6127[t3128])) return t3128;
        return e6127.length;
    }
    function isSorted(e7119) {
        for(let n736 = 1; n736 < e7119.length; n736++)if (e7119[n736][0] < e7119[n736 - 1][0]) return false;
        return true;
    }
    function sortSegments(e8123, n832) {
        n832 || (e8123 = e8123.slice());
        return e8123.sort(sortComparator);
    }
    function sortComparator(e9122, n931) {
        return e9122[0] - n931[0];
    }
    let a159 = false;
    function binarySearch(e1034, n1030, t4121, o345) {
        while(t4121 <= o345){
            const s2118 = t4121 + (o345 - t4121 >> 1);
            const c222 = e1034[s2118][0] - n1030;
            if (0 === c222) {
                a159 = true;
                return s2118;
            }
            c222 < 0 ? t4121 = s2118 + 1 : o345 = s2118 - 1;
        }
        a159 = false;
        return t4121 - 1;
    }
    function upperBound(e1139, n1171, t5120) {
        for(let o431 = t5120 + 1; o431 < e1139.length; o431++, t5120++)if (e1139[o431][0] !== n1171) break;
        return t5120;
    }
    function lowerBound(e1232, n1225, t645) {
        for(let o529 = t645 - 1; o529 >= 0; o529--, t645--)if (e1232[o529][0] !== n1225) break;
        return t645;
    }
    function memoizedState() {
        return {
            lastKey: -1,
            lastNeedle: -1,
            lastIndex: -1
        };
    }
    function memoizedBinarySearch(e1331, n1321, t741, o621) {
        const { lastKey: s3100 , lastNeedle: c319 , lastIndex: i269  } = t741;
        let l227 = 0;
        let d216 = e1331.length - 1;
        if (o621 === s3100) {
            if (n1321 === c319) {
                a159 = -1 !== i269 && e1331[i269][r1126] === n1321;
                return i269;
            }
            n1321 >= c319 ? l227 = -1 === i269 ? 0 : i269 : d216 = i269;
        }
        t741.lastKey = o621;
        t741.lastNeedle = n1321;
        return t741.lastIndex = binarySearch(e1331, n1321, l227, d216);
    }
    function buildBySources(e1430, n1421) {
        const t837 = n1421.map(buildNullArray);
        for(let o720 = 0; o720 < e1430.length; o720++){
            const l320 = e1430[o720];
            for(let e1529 = 0; e1529 < l320.length; e1529++){
                const d315 = l320[e1529];
                if (1 === d315.length) continue;
                const u228 = d315[1];
                const a235 = d315[2];
                const p220 = d315[3];
                const f220 = t837[u228];
                const g213 = f220[a235] || (f220[a235] = []);
                const m217 = n1421[u228];
                const h218 = upperBound(g213, p220, memoizedBinarySearch(g213, p220, m217, a235));
                insert(g213, m217.lastIndex = h218 + 1, [
                    p220,
                    o720,
                    d315[0]
                ]);
            }
        }
        return t837;
    }
    function insert(e1629, n1520, t1032) {
        for(let t933 = e1629.length; t933 > n1520; t933--)e1629[t933] = e1629[t933 - 1];
        e1629[n1520] = t1032;
    }
    function buildNullArray() {
        return {
            __proto__: null
        };
    }
    const AnyMap = function(n1619, t1178) {
        const o818 = "string" === typeof n1619 ? JSON.parse(n1619) : n1619;
        if (!("sections" in o818)) return new TraceMap(o818, t1178);
        const r278 = [];
        const s428 = [];
        const c417 = [];
        const i335 = [];
        const { sections: l419  } = o818;
        let d414 = 0;
        for(; d414 < l419.length - 1; d414++){
            const e1728 = l419[d414 + 1].offset;
            addSection(l419[d414], t1178, r278, s428, c417, i335, e1728.line, e1728.column);
        }
        l419.length > 0 && addSection(l419[d414], t1178, r278, s428, c417, i335, Infinity, Infinity);
        const u319 = {
            version: 3,
            file: o818.file,
            names: i335,
            sources: s428,
            sourcesContent: c417,
            mappings: r278
        };
        return e1.presortedDecodedMap(u319);
    };
    function addSection(n1719, t1230, o912, d59, u419, a334, p318, f317) {
        const g310 = AnyMap(n1719.map, t1230);
        const { line: m314 , column: h316  } = n1719.offset;
        const S212 = d59.length;
        const M112 = a334.length;
        const _38 = e1.decodedMappings(g310);
        const { resolvedSources: v43  } = g310;
        append(d59, v43);
        append(u419, g310.sourcesContent || fillSourcesContent(v43.length));
        append(a334, g310.names);
        for(let e1924 = o912.length; e1924 <= m314; e1924++)o912.push([]);
        const y39 = p318 - m314;
        const b46 = Math.min(_38.length, y39 + 1);
        for(let e1825 = 0; e1825 < b46; e1825++){
            const n1819 = _38[e1825];
            const t1330 = 0 === e1825 ? o912[m314] : o912[m314 + e1825] = [];
            const d63 = 0 === e1825 ? h316 : 0;
            for(let o109 = 0; o109 < n1819.length; o109++){
                const u518 = n1819[o109];
                const a429 = d63 + u518[0];
                if (e1825 === y39 && a429 >= f317) break;
                if (1 === u518.length) {
                    t1330.push([
                        a429
                    ]);
                    continue;
                }
                const p410 = S212 + u518[1];
                const g49 = u518[2];
                const m47 = u518[3];
                4 !== u518.length ? t1330.push([
                    a429,
                    p410,
                    g49,
                    m47,
                    M112 + u518[4]
                ]) : t1330.push([
                    a429,
                    p410,
                    g49,
                    m47
                ]);
            }
        }
    }
    function append(e2023, n1918) {
        for(let t1428 = 0; t1428 < n1918.length; t1428++)e2023.push(n1918[t1428]);
    }
    function fillSourcesContent(e2120) {
        const n2018 = [];
        for(let t1527 = 0; t1527 < e2120; t1527++)n2018[t1527] = null;
        return n2018;
    }
    const p128 = Object.freeze({
        source: null,
        line: null,
        column: null,
        name: null
    });
    const f129 = Object.freeze({
        line: null,
        column: null
    });
    const g119 = "`line` must be greater than 0 (lines start at line 1)";
    const m124 = "`column` must be greater than or equal to 0 (columns start at column 0)";
    const h122 = -1;
    const S116 = 1;
    e1.encodedMappings = void 0;
    e1.decodedMappings = void 0;
    e1.traceSegment = void 0;
    e1.originalPositionFor = void 0;
    e1.generatedPositionFor = void 0;
    e1.eachMapping = void 0;
    e1.presortedDecodedMap = void 0;
    e1.decodedMap = void 0;
    e1.encodedMap = void 0;
    class TraceMap {
        constructor(e2218, n2145){
            this._decodedMemo = memoizedState();
            this._bySources = void 0;
            this._bySourceMemos = void 0;
            const t1626 = "string" === typeof e2218;
            if (!t1626 && e2218.constructor === TraceMap) return e2218;
            const o1119 = t1626 ? JSON.parse(e2218) : e2218;
            const { version: r355 , file: s521 , names: c512 , sourceRoot: i425 , sources: l513 , sourcesContent: d72  } = o1119;
            this.version = r355;
            this.file = s521;
            this.names = c512;
            this.sourceRoot = i425;
            this.sources = l513;
            this.sourcesContent = d72;
            if (i425 || n2145) {
                const e2317 = resolve4(i425 || "", stripFilename(n2145));
                this.resolvedSources = l513.map((n2217)=>resolve4(n2217 || "", e2317)
                );
            } else this.resolvedSources = l513.map((e2417)=>e2417 || ""
            );
            const { mappings: u618  } = o1119;
            if ("string" === typeof u618) {
                this._encoded = u618;
                this._decoded = void 0;
            } else {
                this._encoded = void 0;
                this._decoded = maybeSort(u618, t1626);
            }
        }
    }
    (()=>{
        e1.encodedMappings = (e2517)=>{
            var t1722;
            return null !== (t1722 = e2517._encoded) && void 0 !== t1722 ? t1722 : e2517._encoded = n2146.encode(e2517._decoded);
        };
        e1.decodedMappings = (e2616)=>e2616._decoded || (e2616._decoded = n2146.decode(e2616._encoded))
        ;
        e1.traceSegment = (n2317, t1821, o1218)=>{
            const r448 = e1.decodedMappings(n2317);
            return t1821 >= r448.length ? null : traceSegmentInternal(r448[t1821], n2317._decodedMemo, t1821, o1218, S116);
        };
        e1.originalPositionFor = (n2417, { line: t1921 , column: o1317 , bias: r540  })=>{
            t1921--;
            if (t1921 < 0) throw new Error(g119);
            if (o1317 < 0) throw new Error(m124);
            const d82 = e1.decodedMappings(n2417);
            if (t1921 >= d82.length) return p128;
            const u713 = traceSegmentInternal(d82[t1921], n2417._decodedMemo, t1921, o1317, r540 || S116);
            if (null == u713) return p128;
            if (1 == u713.length) return p128;
            const { names: a522 , resolvedSources: f416  } = n2417;
            return {
                source: f416[u713[s1132]],
                line: u713[c145] + 1,
                column: u713[i1127],
                name: 5 === u713.length ? a522[u713[l138]] : null
            };
        };
        e1.generatedPositionFor = (n2516, { source: t2020 , line: o14 , column: r637 , bias: s618  })=>{
            o14--;
            if (o14 < 0) throw new Error(g119);
            if (r637 < 0) throw new Error(m124);
            const { sources: c611 , resolvedSources: i521  } = n2516;
            let l613 = c611.indexOf(t2020);
            -1 === l613 && (l613 = i521.indexOf(t2020));
            if (-1 === l613) return f129;
            const a617 = n2516._bySources || (n2516._bySources = buildBySources(e1.decodedMappings(n2516), n2516._bySourceMemos = c611.map(memoizedState)));
            const p54 = n2516._bySourceMemos;
            const h411 = a617[l613][o14];
            if (null == h411) return f129;
            const M26 = traceSegmentInternal(h411, p54[l613], o14, r637, s618 || S116);
            return null == M26 ? f129 : {
                line: M26[d126] + 1,
                column: M26[u137]
            };
        };
        e1.eachMapping = (n2616, t2161)=>{
            const o1511 = e1.decodedMappings(n2616);
            const { names: r731 , resolvedSources: s718  } = n2616;
            for(let e2714 = 0; e2714 < o1511.length; e2714++){
                const n2716 = o1511[e2714];
                for(let o1611 = 0; o1611 < n2716.length; o1611++){
                    const c75 = n2716[o1611];
                    const i618 = e2714 + 1;
                    const l710 = c75[0];
                    let d91 = null;
                    let u813 = null;
                    let a717 = null;
                    let p63 = null;
                    if (1 !== c75.length) {
                        d91 = s718[c75[1]];
                        u813 = c75[2] + 1;
                        a717 = c75[3];
                    }
                    5 === c75.length && (p63 = r731[c75[4]]);
                    t2161({
                        generatedLine: i618,
                        generatedColumn: l710,
                        source: d91,
                        originalLine: u813,
                        originalColumn: a717,
                        name: p63
                    });
                }
            }
        };
        e1.presortedDecodedMap = (e2814, n2815)=>{
            const t2220 = Object.assign({}, e2814);
            t2220.mappings = [];
            const o178 = new TraceMap(t2220, n2815);
            o178._decoded = e2814.mappings;
            return o178;
        };
        e1.decodedMap = (n2915)=>({
                version: 3,
                file: n2915.file,
                names: n2915.names,
                sourceRoot: n2915.sourceRoot,
                sources: n2915.sources,
                sourcesContent: n2915.sourcesContent,
                mappings: e1.decodedMappings(n2915)
            })
        ;
        e1.encodedMap = (n3015)=>({
                version: 3,
                file: n3015.file,
                names: n3015.names,
                sourceRoot: n3015.sourceRoot,
                sources: n3015.sources,
                sourcesContent: n3015.sourcesContent,
                mappings: e1.encodedMappings(n3015)
            })
        ;
    })();
    function traceSegmentInternal(e2914, n3115, t2319, o187, r829) {
        let s818 = memoizedBinarySearch(e2914, o187, n3115, t2319);
        a159 ? s818 = (r829 === h122 ? upperBound : lowerBound)(e2914, o187, s818) : r829 === h122 && s818++;
        return -1 === s818 || s818 === e2914.length ? null : e2914[s818];
    }
    e1.AnyMap = AnyMap;
    e1.GREATEST_LOWER_BOUND = S116;
    e1.LEAST_UPPER_BOUND = h122;
    e1.TraceMap = TraceMap;
    Object.defineProperty(e1, "__esModule", {
        value: true
    });
});
const s41 = r55.encodedMappings, c38 = r55.decodedMappings, i41 = r55.traceSegment, l38 = r55.originalPositionFor, d31 = r55.generatedPositionFor, u37 = r55.eachMapping, a41 = r55.presortedDecodedMap, p33 = r55.decodedMap, f36 = r55.encodedMap, g26 = r55.AnyMap, m29 = r55.GREATEST_LOWER_BOUND, h28 = r55.LEAST_UPPER_BOUND, S18 = r55.TraceMap, M15 = r55.__esModule;
class OriginalSource {
    constructor(t1179, e1){
        this.source = t1179;
        this.content = e1;
    }
    originalPositionFor(t2162, e2, n1172) {
        return {
            column: e2,
            line: t2162,
            name: n1172,
            source: this.source,
            content: this.content
        };
    }
}
let r56;
class FastStringArray {
    constructor(){
        this.indexes = Object.create(null);
        this.array = [];
    }
}
(()=>{
    r56 = (t3129, e3152)=>{
        const { array: n2147 , indexes: o179  } = t3129;
        let s1133 = o179[e3152];
        if (void 0 === s1133) {
            s1133 = o179[e3152] = n2147.length;
            n2147.push(e3152);
        }
        return s1133;
    };
})();
const c39 = void 0;
const i42 = null;
let u38;
class SourceMapTree {
    constructor(t4122, e4130){
        this.map = t4122;
        this.sources = e4130;
    }
    originalPositionFor(e5129, n359, o256) {
        const s2119 = i41(this.map, e5129, n359);
        if (null == s2119) return c39;
        if (1 === s2119.length) return null;
        const r1127 = this.sources[s2119[1]];
        return r1127.originalPositionFor(s2119[2], s2119[3], 5 === s2119.length ? this.map.names[s2119[4]] : o256);
    }
}
(()=>{
    u38 = (t646)=>{
        const o432 = [];
        const s3101 = new FastStringArray;
        const u138 = new FastStringArray;
        const a = [];
        const { sources: l85 , map: p55  } = t646;
        const h50 = p55.names;
        const g50 = c38(p55);
        let f70 = -1;
        for(let t5121 = 0; t5121 < g50.length; t5121++){
            const e6128 = g50[t5121];
            const n448 = [];
            let p56 = -1;
            let m48 = -1;
            let d60 = -1;
            for(let o346 = 0; o346 < e6128.length; o346++){
                const g52 = e6128[o346];
                let y40 = i42;
                if (1 !== g52.length) {
                    const t742 = l85[g52[1]];
                    y40 = t742.originalPositionFor(g52[2], g52[3], 5 === g52.length ? h50[g52[4]] : "");
                    if (y40 === c39) continue;
                }
                const S46 = g52[0];
                if (y40 === i42) {
                    if (-1 === p56) continue;
                    p56 = m48 = d60 = -1;
                    n448.push([
                        S46
                    ]);
                    continue;
                }
                const { column: w43 , line: M27 , name: b47 , content: v44 , source: A27  } = y40;
                const C33 = r56(u138, A27);
                a[C33] = v44;
                if (p56 !== C33 || m48 !== M27 || d60 !== w43) {
                    f70 = t5121;
                    p56 = C33;
                    m48 = M27;
                    d60 = w43;
                    n448.push(b47 ? [
                        S46,
                        C33,
                        M27,
                        w43,
                        r56(s3101, b47)
                    ] : [
                        S46,
                        C33,
                        M27,
                        w43
                    ]);
                }
            }
            o432.push(n448);
        }
        o432.length > f70 + 1 && (o432.length = f70 + 1);
        return a41(Object.assign({}, t646.map, {
            mappings: o432,
            sourceRoot: void 0,
            names: s3101.array,
            sources: u138.array,
            sourcesContent: a
        }));
    };
})();
function asArray(t838) {
    return Array.isArray(t838) ? t838 : [
        t838
    ];
}
function buildSourceMapTree(t1180, e7120) {
    const n541 = asArray(t1180).map((t1231)=>new S18(t1231, "")
    );
    const s429 = n541.pop();
    for(let t934 = 0; t934 < n541.length; t934++)if (n541[t934].sources.length > 1) throw new Error(`Transformation map ${t934} must have exactly one source file.\nDid you specify these with the most recent transformation maps first?`);
    let r279 = build1(s429, e7120, "", 0);
    for(let t1033 = n541.length - 1; t1033 >= 0; t1033--)r279 = new SourceMapTree(n541[t1033], [
        r279
    ]);
    return r279;
}
function build1(t1331, e8124, n639, s522) {
    const { resolvedSources: r356 , sourcesContent: c146  } = t1331;
    const i1128 = s522 + 1;
    const u229 = r356.map((t1429, s619)=>{
        const r449 = {
            importer: n639,
            depth: i1128,
            source: t1429 || "",
            content: void 0
        };
        const u320 = e8124(r449.source, r449);
        const { source: a , content: l86  } = r449;
        if (!u320) {
            const t1528 = void 0 !== l86 ? l86 : c146 ? c146[s619] : null;
            return new OriginalSource(a, t1528);
        }
        return build1(new S18(u320, a), e8124, a, i1128);
    });
    return new SourceMapTree(t1331, u229);
}
class SourceMap1 {
    constructor(t1627, n737){
        this.version = 3;
        this.file = t1627.file;
        this.mappings = n737.decodedMappings ? c38(t1627) : s41(t1627);
        this.names = t1627.names;
        this.sourceRoot = t1627.sourceRoot;
        this.sources = t1627.sources;
        !n737.excludeContent && "sourcesContent" in t1627 && (this.sourcesContent = t1627.sourcesContent);
    }
    toString() {
        return JSON.stringify(this);
    }
}
function remapping(t1723, e9123, n833) {
    const o530 = "object" === typeof n833 ? n833 : {
        excludeContent: !!n833,
        decodedMappings: false
    };
    const s719 = buildSourceMapTree(t1723, e9123);
    return new SourceMap1(u38(s719), o530);
}
const mod43 = {
    default: remapping
};
var r57 = {}, n50 = false;
function dew24() {
    if (n50) return r57;
    n50 = true;
    Object.defineProperty(r57, "__esModule", {
        value: true
    });
    r57.transformFile = void 0;
    r57.transformFileAsync = transformFileAsync;
    r57.transformFileSync = transformFileSync;
    const e1 = function transformFile(r, n1173, e1001) {
        "function" === typeof n1173 && (e1001 = n1173);
        e1001(new Error("Transforming files is not supported in browsers"), null);
    };
    r57.transformFile = e1;
    function transformFileSync() {
        throw new Error("Transforming files is not supported in browsers");
    }
    function transformFileAsync() {
        return Promise.reject(new Error("Transforming files is not supported in browsers"));
    }
    return r57;
}
var x18 = {}, $17 = false;
function dew$t1() {
    if ($17) return x18;
    $17 = true;
    var e1 = se;
    Object.defineProperty(x18, "__esModule", {
        value: true
    });
    x18.getEnv = getEnv;
    function getEnv(t = "development") {
        return e1.env.BABEL_ENV || "production";
    }
    return x18;
}
var _20 = {}, k16 = false;
function dew$s1() {
    if (k16) return _20;
    k16 = true;
    Object.defineProperty(_20, "__esModule", {
        value: true
    });
    _20.finalize = finalize;
    _20.flattenToSet = flattenToSet;
    function finalize(e2) {
        return Object.freeze(e2);
    }
    function flattenToSet(e4131) {
        const t1181 = new Set;
        const r1128 = [
            e4131
        ];
        while(r1128.length > 0)for (const e3153 of r1128.pop())Array.isArray(e3153) ? r1128.push(e3153) : t1181.add(e3153);
        return t1181;
    }
    return _20;
}
var j15 = {}, E16 = false;
function dew$r1() {
    if (E16) return j15;
    E16 = true;
    Object.defineProperty(j15, "__esModule", {
        value: true
    });
    j15.default = void 0;
    var e5130 = dew$s1();
    class Plugin {
        constructor(t2163, r280, n1174, o180 = (0, e5130.finalize)([])){
            this.key = void 0;
            this.manipulateOptions = void 0;
            this.post = void 0;
            this.pre = void 0;
            this.visitor = void 0;
            this.parserOverride = void 0;
            this.generatorOverride = void 0;
            this.options = void 0;
            this.externalDependencies = void 0;
            this.key = t2163.name || n1174;
            this.manipulateOptions = t2163.manipulateOptions;
            this.post = t2163.post;
            this.pre = t2163.pre;
            this.visitor = t2163.visitor || {};
            this.parserOverride = t2163.parserOverride;
            this.generatorOverride = t2163.generatorOverride;
            this.options = r280;
            this.externalDependencies = o180;
        }
    }
    j15.default = Plugin;
    return j15;
}
var S19 = "default" in mod29 ? mod29.default : mod29;
var A17 = {}, M16 = false;
function dew$q1() {
    if (M16) return A17;
    M16 = true;
    Object.defineProperty(A17, "__esModule", {
        value: true
    });
    A17.createCachedDescriptors = createCachedDescriptors;
    A17.createDescriptor = createDescriptor;
    A17.createUncachedDescriptors = createUncachedDescriptors;
    function _gensync() {
        const e7121 = S19;
        _gensync = function() {
            return e7121;
        };
        return e7121;
    }
    var e6129 = dew15();
    var t3130 = dew$p2();
    var r357 = dew17();
    var o257 = dew18();
    function isEqualDescriptor(e8125, t4123) {
        return e8125.name === t4123.name && e8125.value === t4123.value && e8125.options === t4123.options && e8125.dirname === t4123.dirname && e8125.alias === t4123.alias && e8125.ownPass === t4123.ownPass && (e8125.file && e8125.file.request) === (t4123.file && t4123.file.request) && (e8125.file && e8125.file.resolved) === (t4123.file && t4123.file.resolved);
    }
    function* handlerOf(e9124) {
        return e9124;
    }
    function optionsWithResolvedBrowserslistConfigFile(e1035, t5122) {
        "string" === typeof e1035.browserslistConfigFile && (e1035.browserslistConfigFile = (0, o257.resolveBrowserslistConfigFile)(e1035.browserslistConfigFile, t5122));
        return e1035;
    }
    function createCachedDescriptors(e1140, t647, r450) {
        const { plugins: n2148 , presets: o347 , passPerPreset: s2120  } = t647;
        return {
            options: optionsWithResolvedBrowserslistConfigFile(t647, e1140),
            plugins: n2148 ? ()=>l139(n2148, e1140)(r450)
             : ()=>handlerOf([])
            ,
            presets: o347 ? ()=>a160(o347, e1140)(r450)(!!s2120)
             : ()=>handlerOf([])
        };
    }
    function createUncachedDescriptors(e1233, t743, r542) {
        let n360;
        let o433;
        return {
            options: optionsWithResolvedBrowserslistConfigFile(t743, e1233),
            *plugins () {
                n360 || (n360 = yield* createPluginDescriptors(t743.plugins || [], e1233, r542));
                return n360;
            },
            *presets () {
                o433 || (o433 = yield* createPresetDescriptors(t743.presets || [], e1233, r542, !!t743.passPerPreset));
                return o433;
            }
        };
    }
    const s1134 = new WeakMap;
    const a160 = (0, r357.makeWeakCacheSync)((e1332, t839)=>{
        const n449 = t839.using((e1431)=>e1431
        );
        return (0, r357.makeStrongCacheSync)((t935)=>(0, r357.makeStrongCache)(function*(r638) {
                const o531 = yield* createPresetDescriptors(e1332, n449, t935, r638);
                return o531.map((e1530)=>loadCachedDescriptor(s1134, e1530)
                );
            })
        );
    });
    const i1129 = new WeakMap;
    const l139 = (0, r357.makeWeakCacheSync)((e1630, t1034)=>{
        const n542 = t1034.using((e1729)=>e1729
        );
        return (0, r357.makeStrongCache)(function*(t1182) {
            const r732 = yield* createPluginDescriptors(e1630, n542, t1182);
            return r732.map((e1826)=>loadCachedDescriptor(i1129, e1826)
            );
        });
    });
    const c147 = {};
    function loadCachedDescriptor(e1925, t1232) {
        const { value: r830 , options: n640 = c147  } = t1232;
        if (false === n640) return t1232;
        let o622 = e1925.get(r830);
        if (!o622) {
            o622 = new WeakMap;
            e1925.set(r830, o622);
        }
        let s3102 = o622.get(n640);
        if (!s3102) {
            s3102 = [];
            o622.set(n640, s3102);
        }
        if (-1 === s3102.indexOf(t1232)) {
            const e2024 = s3102.filter((e2219)=>isEqualDescriptor(e2219, t1232)
            );
            if (e2024.length > 0) return e2024[0];
            s3102.push(t1232);
        }
        return t1232;
    }
    function* createPresetDescriptors(e2318, t1332, r925, n738) {
        return yield* createDescriptors("preset", e2318, t1332, r925, n738);
    }
    function* createPluginDescriptors(e2418, t1430, r1023) {
        return yield* createDescriptors("plugin", e2418, t1430, r1023);
    }
    function* createDescriptors(e2518, t1529, r1129, n834, o721) {
        const s430 = yield* _gensync().all(t1529.map((t1628, s523)=>createDescriptor(t1628, r1129, {
                type: e2518,
                alias: `${n834}$${s523}`,
                ownPass: !!o721
            })
        ));
        assertNoDuplicates(s430);
        return s430;
    }
    function* createDescriptor(r1221, n932, { type: o819 , alias: s620 , ownPass: a236  }) {
        const i270 = (0, t3130.getItemDescriptor)(r1221);
        if (i270) return i270;
        let l228;
        let c223;
        let u139 = r1221;
        Array.isArray(u139) && (3 === u139.length ? [u139, c223, l228] = u139 : [u139, c223] = u139);
        let p129;
        let f130 = null;
        if ("string" === typeof u139) {
            if ("string" !== typeof o819) throw new Error("To resolve a string-based item, the type of item must be given");
            const t1724 = "plugin" === o819 ? e6129.loadPlugin : e6129.loadPreset;
            const r1318 = u139;
            ({ filepath: f130 , value: u139  } = yield* t1724(u139, n932));
            p129 = {
                request: r1318,
                resolved: f130
            };
        }
        if (!u139) throw new Error(`Unexpected falsy value: ${String(u139)}`);
        if ("object" === typeof u139 && u139.__esModule) {
            if (!u139.default) throw new Error("Must export a default export when using ES6 modules.");
            u139 = u139.default;
        }
        if ("object" !== typeof u139 && "function" !== typeof u139) throw new Error(`Unsupported format: ${typeof u139}. Expected an object or a function.`);
        if (null !== f130 && "object" === typeof u139 && u139) throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${f130}`);
        return {
            name: l228,
            alias: f130 || s620,
            value: u139,
            options: c223,
            dirname: n932,
            ownPass: a236,
            file: p129
        };
    }
    function assertNoDuplicates(e2617) {
        const t1822 = new Map;
        for (const r1418 of e2617){
            if ("function" !== typeof r1418.value) continue;
            let n1031 = t1822.get(r1418.value);
            if (!n1031) {
                n1031 = new Set;
                t1822.set(r1418.value, n1031);
            }
            if (n1031.has(r1418.name)) {
                const t1922 = e2617.filter((e2715)=>e2715.value === r1418.value
                );
                throw new Error([
                    "Duplicate plugin/preset detected.",
                    "If you'd like to use two separate instances of a plugin,",
                    "they need separate names, e.g.",
                    "",
                    "  plugins: [",
                    "    ['some-plugin', {}],",
                    "    ['some-plugin', {}, 'some unique name'],",
                    "  ]",
                    "",
                    "Duplicates detected are:",
                    `${JSON.stringify(t1922, null, 2)}`
                ].join("\n"));
            }
            n1031.add(r1418.name);
        }
    }
    return A17;
}
var I18 = "default" in mod27 ? mod27.default : mod27;
var F18 = {}, D16 = false;
function dew$p2() {
    if (D16) return F18;
    D16 = true;
    Object.defineProperty(F18, "__esModule", {
        value: true
    });
    F18.createConfigItem = createConfigItem;
    F18.createItemFromDescriptor = createItemFromDescriptor;
    F18.getItemDescriptor = getItemDescriptor;
    function _path() {
        const e2915 = I18;
        _path = function() {
            return e2915;
        };
        return e2915;
    }
    var e2815 = dew$q1();
    function createItemFromDescriptor(e3013) {
        return new ConfigItem(e3013);
    }
    function* createConfigItem(t2164, { dirname: r1516 = "." , type: n1175  } = {}) {
        const o913 = yield* (0, e2815.createDescriptor)(t2164, _path().resolve(r1516), {
            type: n1175,
            alias: "programmatic item"
        });
        return createItemFromDescriptor(o913);
    }
    function getItemDescriptor(e3154) {
        if (null != e3154 && e3154[t2021]) return e3154._descriptor;
    }
    const t2021 = Symbol.for("@babel/core@7 - ConfigItem");
    class ConfigItem {
        constructor(e3211){
            this._descriptor = void 0;
            this[t2021] = true;
            this.value = void 0;
            this.options = void 0;
            this.dirname = void 0;
            this.name = void 0;
            this.file = void 0;
            this._descriptor = e3211;
            Object.defineProperty(this, "_descriptor", {
                enumerable: false
            });
            Object.defineProperty(this, t2021, {
                enumerable: false
            });
            this.value = this._descriptor.value;
            this.options = this._descriptor.options;
            this.dirname = this._descriptor.dirname;
            this.name = this._descriptor.name;
            this.file = this._descriptor.file ? {
                request: this._descriptor.file.request,
                resolved: this._descriptor.file.resolved
            } : void 0;
            Object.freeze(this);
        }
    }
    Object.freeze(ConfigItem.prototype);
    return F18;
}
var N16 = {}, B16 = false;
function dew$o2() {
    if (B16) return N16;
    B16 = true;
    Object.defineProperty(N16, "__esModule", {
        value: true
    });
    N16.default = void 0;
    var e3311 = {
        auxiliaryComment: {
            message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
        },
        blacklist: {
            message: "Put the specific transforms you want in the `plugins` option"
        },
        breakConfig: {
            message: "This is not a necessary option in Babel 6"
        },
        experimental: {
            message: "Put the specific transforms you want in the `plugins` option"
        },
        externalHelpers: {
            message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
        },
        extra: {
            message: ""
        },
        jsxPragma: {
            message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
        },
        loose: {
            message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
        },
        metadataUsedHelpers: {
            message: "Not required anymore as this is enabled by default"
        },
        modules: {
            message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
        },
        nonStandard: {
            message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
        },
        optional: {
            message: "Put the specific transforms you want in the `plugins` option"
        },
        sourceMapName: {
            message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
        },
        stage: {
            message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
        },
        whitelist: {
            message: "Put the specific transforms you want in the `plugins` option"
        },
        resolveModuleSource: {
            version: 6,
            message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
        },
        metadata: {
            version: 6,
            message: "Generated plugin metadata is always included in the output result"
        },
        sourceMapTarget: {
            version: 6,
            message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
        }
    };
    N16.default = e3311;
    return N16;
}
var T17 = "default" in mod38 ? mod38.default : mod38;
var R15 = {}, L15 = false;
function dew$n2() {
    if (L15) return R15;
    L15 = true;
    Object.defineProperty(R15, "__esModule", {
        value: true
    });
    R15.access = access;
    R15.assertArray = assertArray;
    R15.assertAssumptions = assertAssumptions;
    R15.assertBabelrcSearch = assertBabelrcSearch;
    R15.assertBoolean = assertBoolean;
    R15.assertCallerMetadata = assertCallerMetadata;
    R15.assertCompact = assertCompact;
    R15.assertConfigApplicableTest = assertConfigApplicableTest;
    R15.assertConfigFileSearch = assertConfigFileSearch;
    R15.assertFunction = assertFunction;
    R15.assertIgnoreList = assertIgnoreList;
    R15.assertInputSourceMap = assertInputSourceMap;
    R15.assertObject = assertObject;
    R15.assertPluginList = assertPluginList;
    R15.assertRootMode = assertRootMode;
    R15.assertSourceMaps = assertSourceMaps;
    R15.assertSourceType = assertSourceType;
    R15.assertString = assertString;
    R15.assertTargets = assertTargets;
    R15.msg = msg;
    function _helperCompilationTargets() {
        const e3510 = T17;
        _helperCompilationTargets = function() {
            return e3510;
        };
        return e3510;
    }
    var e3410 = dew$m2();
    function msg(e3610) {
        switch(e3610.type){
            case "root":
                return "";
            case "env":
                return `${msg(e3610.parent)}.env["${e3610.name}"]`;
            case "overrides":
                return `${msg(e3610.parent)}.overrides[${e3610.index}]`;
            case "option":
                return `${msg(e3610.parent)}.${e3610.name}`;
            case "access":
                return `${msg(e3610.parent)}[${JSON.stringify(e3610.name)}]`;
            default:
                throw new Error(`Assertion failure: Unknown type ${e3610.type}`);
        }
    }
    function access(e37, t2221) {
        return {
            type: "access",
            name: t2221,
            parent: e37
        };
    }
    function assertRootMode(e38, t2320) {
        if (void 0 !== t2320 && "root" !== t2320 && "upward" !== t2320 && "upward-optional" !== t2320) throw new Error(`${msg(e38)} must be a "root", "upward", "upward-optional" or undefined`);
        return t2320;
    }
    function assertSourceMaps(e39, t2417) {
        if (void 0 !== t2417 && "boolean" !== typeof t2417 && "inline" !== t2417 && "both" !== t2417) throw new Error(`${msg(e39)} must be a boolean, "inline", "both", or undefined`);
        return t2417;
    }
    function assertCompact(e40, t2515) {
        if (void 0 !== t2515 && "boolean" !== typeof t2515 && "auto" !== t2515) throw new Error(`${msg(e40)} must be a boolean, "auto", or undefined`);
        return t2515;
    }
    function assertSourceType(e41, t2614) {
        if (void 0 !== t2614 && "module" !== t2614 && "script" !== t2614 && "unambiguous" !== t2614) throw new Error(`${msg(e41)} must be "module", "script", "unambiguous", or undefined`);
        return t2614;
    }
    function assertCallerMetadata(e42, t2714) {
        const r1615 = assertObject(e42, t2714);
        if (r1615) {
            if ("string" !== typeof r1615.name) throw new Error(`${msg(e42)} set but does not contain "name" property string`);
            for (const t2814 of Object.keys(r1615)){
                const n1226 = access(e42, t2814);
                const o1010 = r1615[t2814];
                if (null != o1010 && "boolean" !== typeof o1010 && "string" !== typeof o1010 && "number" !== typeof o1010) throw new Error(`${msg(n1226)} must be null, undefined, a boolean, a string, or a number.`);
            }
        }
        return t2714;
    }
    function assertInputSourceMap(e43, t2914) {
        if (void 0 !== t2914 && "boolean" !== typeof t2914 && ("object" !== typeof t2914 || !t2914)) throw new Error(`${msg(e43)} must be a boolean, object, or undefined`);
        return t2914;
    }
    function assertString(e44, t3014) {
        if (void 0 !== t3014 && "string" !== typeof t3014) throw new Error(`${msg(e44)} must be a string, or undefined`);
        return t3014;
    }
    function assertFunction(e45, t3131) {
        if (void 0 !== t3131 && "function" !== typeof t3131) throw new Error(`${msg(e45)} must be a function, or undefined`);
        return t3131;
    }
    function assertBoolean(e46, t3213) {
        if (void 0 !== t3213 && "boolean" !== typeof t3213) throw new Error(`${msg(e46)} must be a boolean, or undefined`);
        return t3213;
    }
    function assertObject(e47, t3313) {
        if (void 0 !== t3313 && ("object" !== typeof t3313 || Array.isArray(t3313) || !t3313)) throw new Error(`${msg(e47)} must be an object, or undefined`);
        return t3313;
    }
    function assertArray(e48, t3413) {
        if (null != t3413 && !Array.isArray(t3413)) throw new Error(`${msg(e48)} must be an array, or undefined`);
        return t3413;
    }
    function assertIgnoreList(e49, t3513) {
        const r1715 = assertArray(e49, t3513);
        r1715 && r1715.forEach((t3613, r1814)=>assertIgnoreItem(access(e49, r1814), t3613)
        );
        return r1715;
    }
    function assertIgnoreItem(e50, t3712) {
        if ("string" !== typeof t3712 && "function" !== typeof t3712 && !(t3712 instanceof RegExp)) throw new Error(`${msg(e50)} must be an array of string/Function/RegExp values, or undefined`);
        return t3712;
    }
    function assertConfigApplicableTest(e51, t3812) {
        if (void 0 === t3812) return t3812;
        if (Array.isArray(t3812)) t3812.forEach((t3912, r1913)=>{
            if (!checkValidTest(t3912)) throw new Error(`${msg(access(e51, r1913))} must be a string/Function/RegExp.`);
        });
        else if (!checkValidTest(t3812)) throw new Error(`${msg(e51)} must be a string/Function/RegExp, or an array of those`);
        return t3812;
    }
    function checkValidTest(e52) {
        return "string" === typeof e52 || "function" === typeof e52 || e52 instanceof RegExp;
    }
    function assertConfigFileSearch(e53, t4010) {
        if (void 0 !== t4010 && "boolean" !== typeof t4010 && "string" !== typeof t4010) throw new Error(`${msg(e53)} must be a undefined, a boolean, a string, got ${JSON.stringify(t4010)}`);
        return t4010;
    }
    function assertBabelrcSearch(e54, t4124) {
        if (void 0 === t4124 || "boolean" === typeof t4124) return t4124;
        if (Array.isArray(t4124)) t4124.forEach((t4210, r2010)=>{
            if (!checkValidTest(t4210)) throw new Error(`${msg(access(e54, r2010))} must be a string/Function/RegExp.`);
        });
        else if (!checkValidTest(t4124)) throw new Error(`${msg(e54)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(t4124)}`);
        return t4124;
    }
    function assertPluginList(e55, t43) {
        const r2118 = assertArray(e55, t43);
        r2118 && r2118.forEach((t44, r2217)=>assertPluginItem(access(e55, r2217), t44)
        );
        return r2118;
    }
    function assertPluginItem(e56, t45) {
        if (Array.isArray(t45)) {
            if (0 === t45.length) throw new Error(`${msg(e56)} must include an object`);
            if (t45.length > 3) throw new Error(`${msg(e56)} may only be a two-tuple or three-tuple`);
            assertPluginTarget(access(e56, 0), t45[0]);
            if (t45.length > 1) {
                const r2314 = t45[1];
                if (void 0 !== r2314 && false !== r2314 && ("object" !== typeof r2314 || Array.isArray(r2314) || null === r2314)) throw new Error(`${msg(access(e56, 1))} must be an object, false, or undefined`);
            }
            if (3 === t45.length) {
                const r2413 = t45[2];
                if (void 0 !== r2413 && "string" !== typeof r2413) throw new Error(`${msg(access(e56, 2))} must be a string, or undefined`);
            }
        } else assertPluginTarget(e56, t45);
        return t45;
    }
    function assertPluginTarget(e57, t46) {
        if (("object" !== typeof t46 || !t46) && "string" !== typeof t46 && "function" !== typeof t46) throw new Error(`${msg(e57)} must be a string, object, function`);
        return t46;
    }
    function assertTargets(e58, t47) {
        if ((0, _helperCompilationTargets().isBrowsersQueryValid)(t47)) return t47;
        if ("object" !== typeof t47 || !t47 || Array.isArray(t47)) throw new Error(`${msg(e58)} must be a string, an array of strings or an object`);
        const r2610 = access(e58, "browsers");
        const n1322 = access(e58, "esmodules");
        assertBrowsersList(r2610, t47.browsers);
        assertBoolean(n1322, t47.esmodules);
        for (const r2511 of Object.keys(t47)){
            const n1422 = t47[r2511];
            const o1120 = access(e58, r2511);
            if ("esmodules" === r2511) assertBoolean(o1120, n1422);
            else if ("browsers" === r2511) assertBrowsersList(o1120, n1422);
            else {
                if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, r2511)) {
                    const e59 = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                    throw new Error(`${msg(o1120)} is not a valid target. Supported targets are ${e59}`);
                }
                assertBrowserVersion(o1120, n1422);
            }
        }
        return t47;
    }
    function assertBrowsersList(e60, t48) {
        if (void 0 !== t48 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(t48)) throw new Error(`${msg(e60)} must be undefined, a string or an array of strings`);
    }
    function assertBrowserVersion(e61, t49) {
        if (("number" !== typeof t49 || Math.round(t49) !== t49) && "string" !== typeof t49) throw new Error(`${msg(e61)} must be a string or an integer number`);
    }
    function assertAssumptions(t50, r2710) {
        if (void 0 === r2710) return;
        if ("object" !== typeof r2710 || null === r2710) throw new Error(`${msg(t50)} must be an object or undefined.`);
        let n1620 = t50;
        do {
            n1620 = n1620.parent;
        }while ("root" !== n1620.type)
        const o1219 = "preset" === n1620.source;
        for (const n1521 of Object.keys(r2710)){
            const s720 = access(t50, n1521);
            if (!e3410.assumptionsNames.has(n1521)) throw new Error(`${msg(s720)} is not a supported assumption.`);
            if ("boolean" !== typeof r2710[n1521]) throw new Error(`${msg(s720)} must be a boolean.`);
            if (o1219 && false === r2710[n1521]) throw new Error(`${msg(s720)} cannot be set to 'false' inside presets.`);
        }
        return r2710;
    }
    return R15;
}
var U17 = {}, W14 = false;
function dew$m2() {
    if (W14) return U17;
    W14 = true;
    Object.defineProperty(U17, "__esModule", {
        value: true
    });
    U17.assumptionsNames = void 0;
    U17.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
    U17.validate = validate;
    dew$r1();
    var e62 = dew$o2();
    var t51 = dew$n2();
    const r285 = {
        cwd: t51.assertString,
        root: t51.assertString,
        rootMode: t51.assertRootMode,
        configFile: t51.assertConfigFileSearch,
        caller: t51.assertCallerMetadata,
        filename: t51.assertString,
        filenameRelative: t51.assertString,
        code: t51.assertBoolean,
        ast: t51.assertBoolean,
        cloneInputAst: t51.assertBoolean,
        envName: t51.assertString
    };
    const n1720 = {
        babelrc: t51.assertBoolean,
        babelrcRoots: t51.assertBabelrcSearch
    };
    const o1318 = {
        extends: t51.assertString,
        ignore: t51.assertIgnoreList,
        only: t51.assertIgnoreList,
        targets: t51.assertTargets,
        browserslistConfigFile: t51.assertConfigFileSearch,
        browserslistEnv: t51.assertString
    };
    const s819 = {
        inputSourceMap: t51.assertInputSourceMap,
        presets: t51.assertPluginList,
        plugins: t51.assertPluginList,
        passPerPreset: t51.assertBoolean,
        assumptions: t51.assertAssumptions,
        env: assertEnvSet,
        overrides: assertOverridesList,
        test: t51.assertConfigApplicableTest,
        include: t51.assertConfigApplicableTest,
        exclude: t51.assertConfigApplicableTest,
        retainLines: t51.assertBoolean,
        comments: t51.assertBoolean,
        shouldPrintComment: t51.assertFunction,
        compact: t51.assertCompact,
        minified: t51.assertBoolean,
        auxiliaryCommentBefore: t51.assertString,
        auxiliaryCommentAfter: t51.assertString,
        sourceType: t51.assertSourceType,
        wrapPluginVisitorMethod: t51.assertFunction,
        highlightCode: t51.assertBoolean,
        sourceMaps: t51.assertSourceMaps,
        sourceMap: t51.assertSourceMaps,
        sourceFileName: t51.assertString,
        sourceRoot: t51.assertString,
        parserOpts: t51.assertObject,
        generatorOpts: t51.assertObject
    };
    Object.assign(s819, {
        getModuleId: t51.assertFunction,
        moduleRoot: t51.assertString,
        moduleIds: t51.assertBoolean,
        moduleId: t51.assertString
    });
    const a335 = new Set([
        "arrayLikeIsIterable",
        "constantReexports",
        "constantSuper",
        "enumerableModuleMeta",
        "ignoreFunctionLength",
        "ignoreToPrimitiveHint",
        "iterableIsArray",
        "mutableTemplateObject",
        "noClassCalls",
        "noDocumentAll",
        "noIncompleteNsImportDetection",
        "noNewArrows",
        "objectRestNoSymbols",
        "privateFieldsAsProperties",
        "pureGetters",
        "setClassMethods",
        "setComputedProperties",
        "setPublicClassFields",
        "setSpreadProperties",
        "skipForOfIteratorClosing",
        "superIsCallableConstructor"
    ]);
    U17.assumptionsNames = a335;
    function getSource(e63) {
        return "root" === e63.type ? e63.source : getSource(e63.parent);
    }
    function validate(e64, t52) {
        return validateNested({
            type: "root",
            source: e64
        }, t52);
    }
    function validateNested(e65, a430) {
        const i336 = getSource(e65);
        assertNoDuplicateSourcemap(a430);
        Object.keys(a430).forEach((l321)=>{
            const c320 = {
                type: "option",
                name: l321,
                parent: e65
            };
            if ("preset" === i336 && o1318[l321]) throw new Error(`${(0, t51.msg)(c320)} is not allowed in preset options`);
            if ("arguments" !== i336 && r285[l321]) throw new Error(`${(0, t51.msg)(c320)} is only allowed in root programmatic options`);
            if ("arguments" !== i336 && "configfile" !== i336 && n1720[l321]) {
                if ("babelrcfile" === i336 || "extendsfile" === i336) throw new Error(`${(0, t51.msg)(c320)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
                throw new Error(`${(0, t51.msg)(c320)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            const u230 = s819[l321] || o1318[l321] || n1720[l321] || r285[l321] || throwUnknownError;
            u230(c320, a430[l321]);
        });
        return a430;
    }
    function throwUnknownError(r294) {
        const n1820 = r294.name;
        if (e62.default[n1820]) {
            const { message: o14 , version: s918 = 5  } = e62.default[n1820];
            throw new Error(`Using removed Babel ${s918} option: ${(0, t51.msg)(r294)} - ${o14}`);
        }
        {
            const e66 = new Error(`Unknown option: ${(0, t51.msg)(r294)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            e66.code = "BABEL_UNKNOWN_OPTION";
            throw e66;
        }
    }
    function has2(e67, t53) {
        return Object.prototype.hasOwnProperty.call(e67, t53);
    }
    function assertNoDuplicateSourcemap(e68) {
        if (has2(e68, "sourceMap") && has2(e68, "sourceMaps")) throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
    }
    function assertEnvSet(e69, r3113) {
        if ("env" === e69.parent.type) throw new Error(`${(0, t51.msg)(e69)} is not allowed inside of another .env block`);
        const n1919 = e69.parent;
        const o1512 = (0, t51.assertObject)(e69, r3113);
        if (o1512) for (const r304 of Object.keys(o1512)){
            const s1017 = (0, t51.assertObject)((0, t51.access)(e69, r304), o1512[r304]);
            if (!s1017) continue;
            const a523 = {
                type: "env",
                name: r304,
                parent: n1919
            };
            validateNested(a523, s1017);
        }
        return o1512;
    }
    function assertOverridesList(e70, r3313) {
        if ("env" === e70.parent.type) throw new Error(`${(0, t51.msg)(e70)} is not allowed inside an .env block`);
        if ("overrides" === e70.parent.type) throw new Error(`${(0, t51.msg)(e70)} is not allowed inside an .overrides block`);
        const n2019 = e70.parent;
        const o1612 = (0, t51.assertArray)(e70, r3313);
        if (o1612) for (const [r3213, s1135] of o1612.entries()){
            const o1710 = (0, t51.access)(e70, r3213);
            const a618 = (0, t51.assertObject)(o1710, s1135);
            if (!a618) throw new Error(`${(0, t51.msg)(o1710)} must be an object`);
            const i426 = {
                type: "overrides",
                index: r3213,
                parent: n2019
            };
            validateNested(i426, a618);
        }
        return o1612;
    }
    function checkNoUnwrappedItemOptionPairs(e71, t54, r3410, n2149) {
        if (0 === t54) return;
        const o188 = e71[t54 - 1];
        const s1217 = e71[t54];
        o188.file && void 0 === o188.options && "object" === typeof s1217.value && (n2149.message += `\n- Maybe you meant to use\n"${r3410}s": [\n  ["${o188.file.request}", ${JSON.stringify(s1217.value, void 0, 2)}]\n]\nTo be a valid ${r3410}, its name and options should be wrapped in a pair of brackets`);
    }
    return U17;
}
var H15 = "default" in mod27 ? mod27.default : mod27;
var z13 = {}, V17 = false;
function dew$l2() {
    if (V17) return z13;
    V17 = true;
    Object.defineProperty(z13, "__esModule", {
        value: true
    });
    z13.default = pathToPattern;
    function _path() {
        const e73 = H15;
        _path = function() {
            return e73;
        };
        return e73;
    }
    const e72 = `\\${_path().sep}`;
    const t55 = `(?:${e72}|$)`;
    const r358 = `[^${e72}]+`;
    const n2218 = `(?:${r358}${e72})`;
    const o197 = `(?:${r358}${t55})`;
    const s1316 = `${n2218}*?`;
    const a718 = `${n2218}*?${o197}?`;
    function escapeRegExp(e74) {
        return e74.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
    }
    function pathToPattern(i522, l420) {
        const c418 = _path().resolve(l420, i522).split(_path().sep);
        return new RegExp([
            "^",
            ...c418.map((i619, l514)=>{
                const u321 = l514 === c418.length - 1;
                return "**" === i619 ? u321 ? a718 : s1316 : "*" === i619 ? u321 ? o197 : n2218 : 0 === i619.indexOf("*.") ? r358 + escapeRegExp(i619.slice(1)) + (u321 ? t55 : e72) : escapeRegExp(i619) + (u321 ? t55 : e72);
            })
        ].join(""));
    }
    return z13;
}
var q14 = "default" in mod29 ? mod29.default : mod29;
var J12 = {}, Y13 = false;
function dew$k2() {
    if (Y13) return J12;
    Y13 = true;
    Object.defineProperty(J12, "__esModule", {
        value: true
    });
    J12.ConfigPrinter = J12.ChainFormatter = void 0;
    function _gensync() {
        const e76 = q14;
        _gensync = function() {
            return e76;
        };
        return e76;
    }
    const e75 = {
        Programmatic: 0,
        Config: 1
    };
    J12.ChainFormatter = e75;
    const t56 = {
        title (t57, r364, n2318) {
            let o206 = "";
            if (t57 === e75.Programmatic) {
                o206 = "programmatic options";
                r364 && (o206 += " from " + r364);
            } else o206 = "config " + n2318;
            return o206;
        },
        loc (e77, t58) {
            let r374 = "";
            null != e77 && (r374 += `.overrides[${e77}]`);
            null != t58 && (r374 += `.env["${t58}"]`);
            return r374;
        },
        *optionsAndDescriptors (e78) {
            const t59 = Object.assign({}, e78.options);
            delete t59.overrides;
            delete t59.env;
            const r384 = [
                ...yield* e78.plugins()
            ];
            r384.length && (t59.plugins = r384.map((e79)=>descriptorToConfig(e79)
            ));
            const n2418 = [
                ...yield* e78.presets()
            ];
            n2418.length && (t59.presets = [
                ...n2418
            ].map((e80)=>descriptorToConfig(e80)
            ));
            return JSON.stringify(t59, void 0, 2);
        }
    };
    function descriptorToConfig(e81) {
        var t60;
        let r394 = null == (t60 = e81.file) ? void 0 : t60.request;
        null == r394 && ("object" === typeof e81.value ? r394 = e81.value : "function" === typeof e81.value && (r394 = `[Function: ${e81.value.toString().slice(0, 50)} ... ]`));
        null == r394 && (r394 = "[Unknown]");
        return void 0 === e81.options ? r394 : null == e81.name ? [
            r394,
            e81.options
        ] : [
            r394,
            e81.options,
            e81.name
        ];
    }
    class ConfigPrinter {
        constructor(){
            this._stack = [];
        }
        configure(e82, t61, { callerName: r404 , filepath: n2517  }) {
            return e82 ? (e83, o2114, s1416)=>{
                this._stack.push({
                    type: t61,
                    callerName: r404,
                    filepath: n2517,
                    content: e83,
                    index: o2114,
                    envName: s1416
                });
            } : ()=>{};
        }
        static *format(e84) {
            let r4113 = t56.title(e84.type, e84.callerName, e84.filepath);
            const n2617 = t56.loc(e84.index, e84.envName);
            n2617 && (r4113 += ` ${n2617}`);
            const o2213 = yield* t56.optionsAndDescriptors(e84.content);
            return `${r4113}\n${o2213}`;
        }
        *output() {
            if (0 === this._stack.length) return "";
            const e85 = yield* _gensync().all(this._stack.map((e86)=>ConfigPrinter.format(e86)
            ));
            return e85.join("\n\n");
        }
    }
    J12.ConfigPrinter = ConfigPrinter;
    return J12;
}
var G13 = "default" in mod27 ? mod27.default : mod27;
var K13 = "default" in mod5 ? mod5.default : mod5;
var Q13 = {}, X13 = false;
function dew$j2() {
    if (X13) return Q13;
    X13 = true;
    Object.defineProperty(Q13, "__esModule", {
        value: true
    });
    Q13.buildPresetChain = buildPresetChain;
    Q13.buildPresetChainWalker = void 0;
    Q13.buildRootChain = buildRootChain;
    function _path() {
        const e88 = G13;
        _path = function() {
            return e88;
        };
        return e88;
    }
    function _debug() {
        const e89 = K13;
        _debug = function() {
            return e89;
        };
        return e89;
    }
    var e87 = dew$m2();
    var t62 = dew$l2();
    var r4213 = dew$k2();
    var o2313 = dew15();
    var s1514 = dew17();
    var a810 = dew$q1();
    const i717 = _debug()("babel:config:config-chain");
    function* buildPresetChain(e90, t63) {
        const r4311 = yield* l614(e90, t63);
        return r4311 ? {
            plugins: dedupDescriptors(r4311.plugins),
            presets: dedupDescriptors(r4311.presets),
            options: r4311.options.map((e91)=>normalizeOptions3(e91)
            ),
            files: new Set
        } : null;
    }
    const l614 = makeChainWalker({
        root: (e92)=>c513(e92)
        ,
        env: (e93, t64)=>u420(e93)(t64)
        ,
        overrides: (e94, t65)=>f221(e94)(t65)
        ,
        overridesEnv: (e95, t66, r4410)=>d127(e95)(t66)(r4410)
        ,
        createLogger: ()=>()=>{}
    });
    Q13.buildPresetChainWalker = l614;
    const c513 = (0, s1514.makeWeakCacheSync)((e96)=>buildRootDescriptors(e96, e96.alias, a810.createUncachedDescriptors)
    );
    const u420 = (0, s1514.makeWeakCacheSync)((e97)=>(0, s1514.makeStrongCacheSync)((t67)=>buildEnvDescriptors(e97, e97.alias, a810.createUncachedDescriptors, t67)
        )
    );
    const f221 = (0, s1514.makeWeakCacheSync)((e98)=>(0, s1514.makeStrongCacheSync)((t68)=>buildOverrideDescriptors(e98, e98.alias, a810.createUncachedDescriptors, t68)
        )
    );
    const d127 = (0, s1514.makeWeakCacheSync)((e99)=>(0, s1514.makeStrongCacheSync)((t69)=>(0, s1514.makeStrongCacheSync)((r454)=>buildOverrideEnvDescriptors(e99, e99.alias, a810.createUncachedDescriptors, t69, r454)
            )
        )
    );
    function* buildRootChain(e100, t70) {
        let n2717, s1614;
        const a99 = new r4213.ConfigPrinter;
        const i816 = yield* h123({
            options: e100,
            dirname: t70.cwd
        }, t70, void 0, a99);
        if (!i816) return null;
        const l711 = yield* a99.output();
        let c612;
        "string" === typeof e100.configFile ? c612 = yield* (0, o2313.loadConfig)(e100.configFile, t70.cwd, t70.envName, t70.caller) : false !== e100.configFile && (c612 = yield* (0, o2313.findRootConfig)(t70.root, t70.envName, t70.caller));
        let { babelrc: u519 , babelrcRoots: p221  } = e100;
        let f318 = t70.cwd;
        const d217 = emptyChain();
        const b214 = new r4213.ConfigPrinter;
        if (c612) {
            const e101 = g120(c612);
            const r464 = yield* loadFileChain(e101, t70, void 0, b214);
            if (!r464) return null;
            n2717 = yield* b214.output();
            void 0 === u519 && (u519 = e101.options.babelrc);
            if (void 0 === p221) {
                f318 = e101.dirname;
                p221 = e101.options.babelrcRoots;
            }
            mergeChain(d217, r464);
        }
        let y216, v217;
        let w212 = false;
        const P26 = emptyChain();
        if ((true === u519 || void 0 === u519) && "string" === typeof t70.filename) {
            const e102 = yield* (0, o2313.findPackageData)(t70.filename);
            if (e102 && babelrcLoadEnabled(t70, e102, p221, f318)) {
                ({ ignore: y216 , config: v217  } = yield* (0, o2313.findRelativeConfig)(e102, t70.envName, t70.caller));
                y216 && P26.files.add(y216.filepath);
                y216 && shouldIgnore(t70, y216.ignore, null, y216.dirname) && (w212 = true);
                if (v217 && !w212) {
                    const e103 = m125(v217);
                    const n2816 = new r4213.ConfigPrinter;
                    const o2411 = yield* loadFileChain(e103, t70, void 0, n2816);
                    if (o2411) {
                        s1614 = yield* n2816.output();
                        mergeChain(P26, o2411);
                    } else w212 = true;
                }
                v217 && w212 && P26.files.add(v217.filepath);
            }
        }
        t70.showConfig && console.log(`Babel configs on "${t70.filename}" (ascending priority):\n` + [
            n2717,
            s1614,
            l711
        ].filter((e104)=>!!e104
        ).join("\n\n") + "\n-----End Babel configs-----");
        const O28 = mergeChain(mergeChain(mergeChain(emptyChain(), d217), P26), i816);
        return {
            plugins: w212 ? [] : dedupDescriptors(O28.plugins),
            presets: w212 ? [] : dedupDescriptors(O28.presets),
            options: w212 ? [] : O28.options.map((e105)=>normalizeOptions3(e105)
            ),
            fileHandling: w212 ? "ignored" : "transpile",
            ignore: y216 || void 0,
            babelrc: v217 || void 0,
            config: c612 || void 0,
            files: O28.files
        };
    }
    function babelrcLoadEnabled(e106, r473, n2916, o258) {
        if ("boolean" === typeof n2916) return n2916;
        const s1714 = e106.root;
        if (void 0 === n2916) return -1 !== r473.directories.indexOf(s1714);
        let a109 = n2916;
        Array.isArray(a109) || (a109 = [
            a109
        ]);
        a109 = a109.map((e107)=>"string" === typeof e107 ? _path().resolve(o258, e107) : e107
        );
        return 1 === a109.length && a109[0] === s1714 ? -1 !== r473.directories.indexOf(s1714) : a109.some((n3016)=>{
            "string" === typeof n3016 && (n3016 = (0, t62.default)(n3016, o258));
            return r473.directories.some((t71)=>matchPattern(n3016, o258, t71, e106)
            );
        });
    }
    const g120 = (0, s1514.makeWeakCacheSync)((t72)=>({
            filepath: t72.filepath,
            dirname: t72.dirname,
            options: (0, e87.validate)("configfile", t72.options)
        })
    );
    const m125 = (0, s1514.makeWeakCacheSync)((t73)=>({
            filepath: t73.filepath,
            dirname: t73.dirname,
            options: (0, e87.validate)("babelrcfile", t73.options)
        })
    );
    const b119 = (0, s1514.makeWeakCacheSync)((t74)=>({
            filepath: t74.filepath,
            dirname: t74.dirname,
            options: (0, e87.validate)("extendsfile", t74.options)
        })
    );
    const h123 = makeChainWalker({
        root: (e108)=>buildRootDescriptors(e108, "base", a810.createCachedDescriptors)
        ,
        env: (e109, t75)=>buildEnvDescriptors(e109, "base", a810.createCachedDescriptors, t75)
        ,
        overrides: (e110, t76)=>buildOverrideDescriptors(e110, "base", a810.createCachedDescriptors, t76)
        ,
        overridesEnv: (e111, t77, r483)=>buildOverrideEnvDescriptors(e111, "base", a810.createCachedDescriptors, t77, r483)
        ,
        createLogger: (e112, t78, r493)=>buildProgrammaticLogger(e112, t78, r493)
    });
    const y120 = makeChainWalker({
        root: (e11310)=>v120(e11310)
        ,
        env: (e114, t79)=>w116(e114)(t79)
        ,
        overrides: (e115, t80)=>P115(e115)(t80)
        ,
        overridesEnv: (e116, t81, r503)=>O114(e116)(t81)(r503)
        ,
        createLogger: (e117, t82, r5111)=>buildFileLogger(e117.filepath, t82, r5111)
    });
    function* loadFileChain(e118, t83, r5211, n3116) {
        const o264 = yield* y120(e118, t83, r5211, n3116);
        o264 && o264.files.add(e118.filepath);
        return o264;
    }
    const v120 = (0, s1514.makeWeakCacheSync)((e119)=>buildRootDescriptors(e119, e119.filepath, a810.createUncachedDescriptors)
    );
    const w116 = (0, s1514.makeWeakCacheSync)((e120)=>(0, s1514.makeStrongCacheSync)((t84)=>buildEnvDescriptors(e120, e120.filepath, a810.createUncachedDescriptors, t84)
        )
    );
    const P115 = (0, s1514.makeWeakCacheSync)((e121)=>(0, s1514.makeStrongCacheSync)((t85)=>buildOverrideDescriptors(e121, e121.filepath, a810.createUncachedDescriptors, t85)
        )
    );
    const O114 = (0, s1514.makeWeakCacheSync)((e122)=>(0, s1514.makeStrongCacheSync)((t86)=>(0, s1514.makeStrongCacheSync)((r5310)=>buildOverrideEnvDescriptors(e122, e122.filepath, a810.createUncachedDescriptors, t86, r5310)
            )
        )
    );
    function buildFileLogger(e123, t87, n3215) {
        return n3215 ? n3215.configure(t87.showConfig, r4213.ChainFormatter.Config, {
            filepath: e123
        }) : ()=>{};
    }
    function buildRootDescriptors({ dirname: e124 , options: t88  }, r543, n3314) {
        return n3314(e124, t88, r543);
    }
    function buildProgrammaticLogger(e, t89, n3411) {
        var o274;
        return n3411 ? n3411.configure(t89.showConfig, r4213.ChainFormatter.Programmatic, {
            callerName: null == (o274 = t89.caller) ? void 0 : o274.name
        }) : ()=>{};
    }
    function buildEnvDescriptors({ dirname: e125 , options: t90  }, r551, n3510, o284) {
        const s1814 = t90.env && t90.env[o284];
        return s1814 ? n3510(e125, s1814, `${r551}.env["${o284}"]`) : null;
    }
    function buildOverrideDescriptors({ dirname: e126 , options: t91  }, r561, n365, o294) {
        const s1914 = t91.overrides && t91.overrides[o294];
        if (!s1914) throw new Error("Assertion failure - missing override");
        return n365(e126, s1914, `${r561}.overrides[${o294}]`);
    }
    function buildOverrideEnvDescriptors({ dirname: e127 , options: t92  }, r571, n375, o304, s2014) {
        const a1118 = t92.overrides && t92.overrides[o304];
        if (!a1118) throw new Error("Assertion failure - missing override");
        const i916 = a1118.env && a1118.env[s2014];
        return i916 ? n375(e127, i916, `${r571}.overrides[${o304}].env["${s2014}"]`) : null;
    }
    function makeChainWalker({ root: e129 , env: t94 , overrides: r59 , overridesEnv: n385 , createLogger: o3113  }) {
        return function*(s2121, a1214, i1015 = new Set, l87) {
            const { dirname: c76  } = s2121;
            const u619 = [];
            const p319 = e129(s2121);
            if (configIsApplicable(p319, c76, a1214)) {
                u619.push({
                    config: p319,
                    envName: void 0,
                    index: void 0
                });
                const e130 = t94(s2121, a1214.envName);
                e130 && configIsApplicable(e130, c76, a1214) && u619.push({
                    config: e130,
                    envName: a1214.envName,
                    index: void 0
                });
                (p319.options.overrides || []).forEach((e, t95)=>{
                    const o3213 = r59(s2121, t95);
                    if (configIsApplicable(o3213, c76, a1214)) {
                        u619.push({
                            config: o3213,
                            index: t95,
                            envName: void 0
                        });
                        const e131 = n385(s2121, t95, a1214.envName);
                        e131 && configIsApplicable(e131, c76, a1214) && u619.push({
                            config: e131,
                            index: t95,
                            envName: a1214.envName
                        });
                    }
                });
            }
            if (u619.some(({ config: { options: { ignore: e132 , only: t96  }  }  })=>shouldIgnore(a1214, e132, t96, c76)
            )) return null;
            const f417 = emptyChain();
            const d316 = o3113(s2121, a1214, l87);
            for (const { config: e128 , index: t93 , envName: r58  } of u619){
                if (!(yield* mergeExtendsChain(f417, e128.options, c76, a1214, i1015, l87))) return null;
                d316(e128, t93, r58);
                yield* mergeChainOpts(f417, e128);
            }
            return f417;
        };
    }
    function* mergeExtendsChain(e133, t97, r60, n395, s2213, a1313) {
        if (void 0 === t97.extends) return true;
        const i1130 = yield* (0, o2313.loadConfig)(t97.extends, r60, n395.envName, n395.caller);
        if (s2213.has(i1130)) throw new Error(`Configuration cycle detected loading ${i1130.filepath}.\nFile already loaded following the config chain:\n` + Array.from(s2213, (e134)=>` - ${e134.filepath}`
        ).join("\n"));
        s2213.add(i1130);
        const l95 = yield* loadFileChain(b119(i1130), n395, s2213, a1313);
        s2213.delete(i1130);
        if (!l95) return false;
        mergeChain(e133, l95);
        return true;
    }
    function mergeChain(e135, t98) {
        e135.options.push(...t98.options);
        e135.plugins.push(...t98.plugins);
        e135.presets.push(...t98.presets);
        for (const r61 of t98.files)e135.files.add(r61);
        return e135;
    }
    function* mergeChainOpts(e136, { options: t99 , plugins: r62 , presets: n405  }) {
        e136.options.push(t99);
        e136.plugins.push(...yield* r62());
        e136.presets.push(...yield* n405());
        return e136;
    }
    function emptyChain() {
        return {
            options: [],
            presets: [],
            plugins: [],
            files: new Set
        };
    }
    function normalizeOptions3(e137) {
        const t100 = Object.assign({}, e137);
        delete t100.extends;
        delete t100.env;
        delete t100.overrides;
        delete t100.plugins;
        delete t100.presets;
        delete t100.passPerPreset;
        delete t100.ignore;
        delete t100.only;
        delete t100.test;
        delete t100.include;
        delete t100.exclude;
        if (Object.prototype.hasOwnProperty.call(t100, "sourceMap")) {
            t100.sourceMaps = t100.sourceMap;
            delete t100.sourceMap;
        }
        return t100;
    }
    function dedupDescriptors(e138) {
        const t101 = new Map;
        const r63 = [];
        for (const n4114 of e138)if ("function" === typeof n4114.value) {
            const e139 = n4114.value;
            let o3311 = t101.get(e139);
            if (!o3311) {
                o3311 = new Map;
                t101.set(e139, o3311);
            }
            let s2313 = o3311.get(n4114.name);
            if (s2313) s2313.value = n4114;
            else {
                s2313 = {
                    value: n4114
                };
                r63.push(s2313);
                n4114.ownPass || o3311.set(n4114.name, s2313);
            }
        } else r63.push({
            value: n4114
        });
        return r63.reduce((e140, t102)=>{
            e140.push(t102.value);
            return e140;
        }, []);
    }
    function configIsApplicable({ options: e141  }, t103, r64) {
        return (void 0 === e141.test || configFieldIsApplicable(r64, e141.test, t103)) && (void 0 === e141.include || configFieldIsApplicable(r64, e141.include, t103)) && (void 0 === e141.exclude || !configFieldIsApplicable(r64, e141.exclude, t103));
    }
    function configFieldIsApplicable(e142, t104, r65) {
        const n4213 = Array.isArray(t104) ? t104 : [
            t104
        ];
        return matchesPatterns(e142, n4213, r65);
    }
    function ignoreListReplacer(e, t105) {
        return t105 instanceof RegExp ? String(t105) : t105;
    }
    function shouldIgnore(e143, t106, r67, n4313) {
        if (t106 && matchesPatterns(e143, t106, n4313)) {
            var o348;
            const r66 = `No config is applied to "${null != (o348 = e143.filename) ? o348 : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(t106, ignoreListReplacer)}\` from "${n4313}"`;
            i717(r66);
            e143.showConfig && console.log(r66);
            return true;
        }
        if (r67 && !matchesPatterns(e143, r67, n4313)) {
            var s2413;
            const t107 = `No config is applied to "${null != (s2413 = e143.filename) ? s2413 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(r67, ignoreListReplacer)}\` from "${n4313}"`;
            i717(t107);
            e143.showConfig && console.log(t107);
            return true;
        }
        return false;
    }
    function matchesPatterns(e144, t108, r68) {
        return t108.some((t109)=>matchPattern(t109, r68, e144.filename, e144)
        );
    }
    function matchPattern(e145, r69, n4410, o353) {
        if ("function" === typeof e145) return !!e145(n4410, {
            dirname: r69,
            envName: o353.envName,
            caller: o353.caller
        });
        if ("string" !== typeof n4410) throw new Error("Configuration contains string/RegExp pattern, but no filename was passed to Babel");
        "string" === typeof e145 && (e145 = (0, t62.default)(e145, r69));
        return e145.test(n4410);
    }
    return Q13;
}
var Z12 = {}, ee11 = false;
function dew$i2() {
    if (ee11) return Z12;
    ee11 = true;
    Object.defineProperty(Z12, "__esModule", {
        value: true
    });
    Z12.validatePluginObject = validatePluginObject;
    var e146 = dew$n2();
    const t110 = {
        name: e146.assertString,
        manipulateOptions: e146.assertFunction,
        pre: e146.assertFunction,
        post: e146.assertFunction,
        inherits: e146.assertFunction,
        visitor: assertVisitorMap,
        parserOverride: e146.assertFunction,
        generatorOverride: e146.assertFunction
    };
    function assertVisitorMap(t111, r70) {
        const n452 = (0, e146.assertObject)(t111, r70);
        if (n452) {
            Object.keys(n452).forEach((e147)=>assertVisitorHandler(e147, n452[e147])
            );
            if (n452.enter || n452.exit) throw new Error(`${(0, e146.msg)(t111)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
        }
        return n452;
    }
    function assertVisitorHandler(e148, t112) {
        if (t112 && "object" === typeof t112) Object.keys(t112).forEach((t113)=>{
            if ("enter" !== t113 && "exit" !== t113) throw new Error(`.visitor["${e148}"] may only have .enter and/or .exit handlers.`);
        });
        else if ("function" !== typeof t112) throw new Error(`.visitor["${e148}"] must be a function`);
        return t112;
    }
    function validatePluginObject(e149) {
        const r71 = {
            type: "root",
            source: "plugin"
        };
        Object.keys(e149).forEach((n462)=>{
            const o363 = t110[n462];
            if (!o363) {
                const e150 = new Error(`.${n462} is not a valid Plugin property`);
                e150.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
                throw e150;
            }
            {
                const t114 = {
                    type: "option",
                    name: n462,
                    parent: r71
                };
                o363(t114, e149[n462]);
            }
        });
        return e149;
    }
    return Z12;
}
var te11 = "default" in mod27 ? mod27.default : mod27;
var re12 = "default" in mod29 ? mod29.default : mod29;
var ne12 = {}, oe11 = false;
function dew$h2() {
    if (oe11) return ne12;
    oe11 = true;
    Object.defineProperty(ne12, "__esModule", {
        value: true
    });
    ne12.default = loadPrivatePartialConfig;
    ne12.loadPartialConfig = void 0;
    function _path() {
        const e152 = te11;
        _path = function() {
            return e152;
        };
        return e152;
    }
    function _gensync() {
        const e153 = re12;
        _gensync = function() {
            return e153;
        };
        return e153;
    }
    var e151 = dew$r1();
    var t115 = dew$16();
    var r72 = dew$p2();
    var o373 = dew$j2();
    var s2513 = dew$t1();
    var a1412 = dew$m2();
    var i1215 = dew15();
    var l104 = dew18();
    const c85 = [
        "showIgnoredFiles"
    ];
    function _objectWithoutPropertiesLoose2(e154, t116) {
        if (null == e154) return {};
        var r73 = {};
        var n472 = Object.keys(e154);
        var o383, s2612;
        for(s2612 = 0; s2612 < n472.length; s2612++){
            o383 = n472[s2612];
            t116.indexOf(o383) >= 0 || (r73[o383] = e154[o383]);
        }
        return r73;
    }
    function resolveRootMode(e155, t117) {
        switch(t117){
            case "root":
                return e155;
            case "upward-optional":
                {
                    const t118 = (0, i1215.findConfigUpwards)(e155);
                    return null === t118 ? e155 : t118;
                }
            case "upward":
                {
                    const t119 = (0, i1215.findConfigUpwards)(e155);
                    if (null !== t119) return t119;
                    throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${e155}".\nOne of the following config files must be in the directory tree: "${i1215.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
                        code: "BABEL_ROOT_NOT_FOUND",
                        dirname: e155
                    });
                }
            default:
                throw new Error("Assertion failure - unknown rootMode value.");
        }
    }
    function* loadPrivatePartialConfig(e156) {
        if (null != e156 && ("object" !== typeof e156 || Array.isArray(e156))) throw new Error("Babel options must be an object, null, or undefined");
        const n481 = e156 ? (0, a1412.validate)("arguments", e156) : {};
        const { envName: c95 = (0, s2513.getEnv)() , cwd: u814 = "." , root: p411 = "." , rootMode: f512 = "root" , caller: d415 , cloneInputAst: g214 = true  } = n481;
        const m218 = _path().resolve(u814);
        const b311 = resolveRootMode(_path().resolve(m218, p411), f512);
        const h219 = "string" === typeof n481.filename ? _path().resolve(u814, n481.filename) : void 0;
        const y310 = yield* (0, i1215.resolveShowConfigPath)(m218);
        const v310 = {
            filename: h219,
            cwd: m218,
            root: b311,
            envName: c95,
            caller: d415,
            showConfig: y310 === h219
        };
        const w310 = yield* (0, o373.buildRootChain)(n481, v310);
        if (!w310) return null;
        const P32 = {
            assumptions: {}
        };
        w310.options.forEach((e157)=>{
            (0, t115.mergeOptions)(P32, e157);
        });
        const O32 = Object.assign({}, P32, {
            targets: (0, l104.resolveTargets)(P32, b311),
            cloneInputAst: g214,
            babelrc: false,
            configFile: false,
            browserslistConfigFile: false,
            passPerPreset: false,
            envName: v310.envName,
            cwd: v310.cwd,
            root: v310.root,
            rootMode: "root",
            filename: "string" === typeof v310.filename ? v310.filename : void 0,
            plugins: w310.plugins.map((e158)=>(0, r72.createItemFromDescriptor)(e158)
            ),
            presets: w310.presets.map((e159)=>(0, r72.createItemFromDescriptor)(e159)
            )
        });
        return {
            options: O32,
            context: v310,
            fileHandling: w310.fileHandling,
            ignore: w310.ignore,
            babelrc: w310.babelrc,
            config: w310.config,
            files: w310.files
        };
    }
    const u714 = _gensync()(function*(t120) {
        let r74 = false;
        if ("object" === typeof t120 && null !== t120 && !Array.isArray(t120)) {
            var n491 = t120;
            ({ showIgnoredFiles: r74  } = n491);
            t120 = _objectWithoutPropertiesLoose2(n491, c85);
        }
        const o392 = yield* loadPrivatePartialConfig(t120);
        if (!o392) return null;
        const { options: s2711 , babelrc: a1510 , ignore: i1315 , config: l1113 , fileHandling: u911 , files: p57  } = o392;
        if ("ignored" === u911 && !r74) return null;
        (s2711.plugins || []).forEach((t121)=>{
            if (t121.value instanceof e151.default) throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
        });
        return new PartialConfig(s2711, a1510 ? a1510.filepath : void 0, i1315 ? i1315.filepath : void 0, l1113 ? l1113.filepath : void 0, u911, p57);
    });
    ne12.loadPartialConfig = u714;
    class PartialConfig {
        constructor(e160, t122, r75, n501, o402, s2811){
            this.options = void 0;
            this.babelrc = void 0;
            this.babelignore = void 0;
            this.config = void 0;
            this.fileHandling = void 0;
            this.files = void 0;
            this.options = e160;
            this.babelignore = r75;
            this.babelrc = t122;
            this.config = n501;
            this.fileHandling = o402;
            this.files = s2811;
            Object.freeze(this);
        }
        hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
        }
    }
    Object.freeze(PartialConfig.prototype);
    return ne12;
}
var se11 = {}, ae11 = false;
function dew$g3() {
    if (ae11) return se11;
    ae11 = true;
    return se11;
}
var ie11 = "default" in mod29 ? mod29.default : mod29;
var le9 = "default" in mod22 ? mod22.default : mod22;
var ce9 = {}, ue9 = false;
function dew$f4() {
    if (ue9) return ce9;
    ue9 = true;
    Object.defineProperty(ce9, "__esModule", {
        value: true
    });
    ce9.default = void 0;
    function _gensync() {
        const e162 = ie11;
        _gensync = function() {
            return e162;
        };
        return e162;
    }
    var e161 = dew16();
    var t123 = dew$16();
    var r76 = dew$19();
    var n51 = dew$r1();
    var o4111 = dew$p2();
    var s2911 = dew$j2();
    var a165 = dew$s1();
    function _traverse() {
        const e163 = le9;
        _traverse = function() {
            return e163;
        };
        return e163;
    }
    var i1415 = dew17();
    var l1210 = dew$m2();
    var c105 = dew$i2();
    var d510 = dew25();
    var g311 = dew$h2();
    dew$g3();
    var m315 = _gensync()(function* loadFullConfig(e164) {
        var r77;
        const n52 = yield* (0, g311.default)(e164);
        if (!n52) return null;
        const { options: s3011 , context: i1515 , fileHandling: c1114  } = n52;
        if ("ignored" === c1114) return null;
        const u107 = {};
        const { plugins: p64 , presets: f610  } = s3011;
        if (!p64 || !f610) throw new Error("Assertion failure - plugins and presets exist");
        const d64 = Object.assign({}, i1515, {
            targets: s3011.targets
        });
        const toDescriptor = (e165)=>{
            const t124 = (0, o4111.getItemDescriptor)(e165);
            if (!t124) throw new Error("Assertion failure - must be config item");
            return t124;
        };
        const m49 = f610.map(toDescriptor);
        const b53 = p64.map(toDescriptor);
        const h412 = [
            []
        ];
        const y52 = [];
        const v53 = [];
        const w44 = yield* enhanceError(i1515, function* recursePresetDescriptors(e166, r79) {
            const n53 = [];
            for(let t125 = 0; t125 < e166.length; t125++){
                const s3111 = e166[t125];
                if (false !== s3111.options) {
                    try {
                        var o = yield* loadPresetDescriptor(s3111, d64);
                    } catch (r78) {
                        "BABEL_UNKNOWN_OPTION" === r78.code && (0, l1210.checkNoUnwrappedItemOptionPairs)(e166, t125, "preset", r78);
                        throw r78;
                    }
                    v53.push(o.externalDependencies);
                    s3111.ownPass ? n53.push({
                        preset: o.chain,
                        pass: []
                    }) : n53.unshift({
                        preset: o.chain,
                        pass: r79
                    });
                }
            }
            if (n53.length > 0) {
                h412.splice(1, 0, ...n53.map((e169)=>e169.pass
                ).filter((e170)=>e170 !== r79
                ));
                for (const { preset: e167 , pass: r80  } of n53){
                    if (!e167) return true;
                    r80.push(...e167.plugins);
                    const n54 = yield* recursePresetDescriptors(e167.presets, r80);
                    if (n54) return true;
                    e167.options.forEach((e171)=>{
                        (0, t123.mergeOptions)(u107, e171);
                    });
                }
            }
        })(m49, h412[0]);
        if (w44) return null;
        const P42 = u107;
        (0, t123.mergeOptions)(P42, s3011);
        const O41 = Object.assign({}, d64, {
            assumptions: null != (r77 = P42.assumptions) ? r77 : {}
        });
        yield* enhanceError(i1515, function* loadPluginDescriptors() {
            h412[0].unshift(...b53);
            for (const t126 of h412){
                const r81 = [];
                y52.push(r81);
                for(let n55 = 0; n55 < t126.length; n55++){
                    const o = t126[n55];
                    if (false !== o.options) {
                        try {
                            var e = yield* loadPluginDescriptor(o, O41);
                        } catch (e172) {
                            "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e172.code && (0, l1210.checkNoUnwrappedItemOptionPairs)(t126, n55, "plugin", e172);
                            throw e172;
                        }
                        r81.push(e);
                        v53.push(e.externalDependencies);
                    }
                }
            }
        })();
        P42.plugins = y52[0];
        P42.presets = y52.slice(1).filter((e)=>e.length > 0
        ).map((e)=>({
                plugins: e
            })
        );
        P42.passPerPreset = P42.presets.length > 0;
        return {
            options: P42,
            passes: y52,
            externalDependencies: (0, a165.finalize)(v53)
        };
    });
    ce9.default = m315;
    function enhanceError(e, t127) {
        return function*(r82, n56) {
            try {
                return yield* t127(r82, n56);
            } catch (t128) {
                /^\[BABEL\]/.test(t128.message) || (t128.message = `[BABEL] ${e.filename || "unknown"}: ${t128.message}`);
                throw t128;
            }
        };
    }
    const makeDescriptorLoader = (t129)=>(0, i1415.makeWeakCache)(function*({ value: n57 , options: o , dirname: s3211 , alias: i1615  }, l1310) {
            if (false === o) throw new Error("Assertion failure");
            o = o || {};
            const c1211 = [];
            let u1115 = n57;
            if ("function" === typeof n57) {
                const a174 = (0, e161.maybeAsync)(n57, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                const p73 = Object.assign({}, r76, t129(l1310, c1211));
                try {
                    u1115 = yield* a174(p73, o, s3211);
                } catch (e) {
                    i1615 && (e.message += ` (While processing: ${JSON.stringify(i1615)})`);
                    throw e;
                }
            }
            if (!u1115 || "object" !== typeof u1115) throw new Error("Plugin/Preset did not return an object.");
            if ((0, e161.isThenable)(u1115)) {
                yield* [];
                throw new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(i1615)})`);
            }
            if (c1211.length > 0 && (!l1310.configured() || "forever" === l1310.mode())) {
                let e = `A plugin/preset has external untracked dependencies (${c1211[0]}), but the cache `;
                l1310.configured() ? e += " has been configured to never be invalidated. " : e += "has not been configured to be invalidated when the external dependencies change. ";
                e += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`\n(While processing: ${JSON.stringify(i1615)})`;
                throw new Error(e);
            }
            return {
                value: u1115,
                options: o,
                dirname: s3211,
                alias: i1615,
                externalDependencies: (0, a165.finalize)(c1211)
            };
        })
    ;
    const b48 = makeDescriptorLoader(d510.makePluginAPI);
    const h317 = makeDescriptorLoader(d510.makePresetAPI);
    function* loadPluginDescriptor(e, t130) {
        if (e.value instanceof n51.default) {
            if (e.options) throw new Error("Passed options to an existing Plugin instance will not work.");
            return e.value;
        }
        return yield* y42((yield* b48(e, t130)), t130);
    }
    const y42 = (0, i1415.makeWeakCache)(function*({ value: t131 , options: r83 , dirname: o , alias: s3310 , externalDependencies: i1715  }, l143) {
        const u12 = (0, c105.validatePluginObject)(t131);
        const p83 = Object.assign({}, u12);
        p83.visitor && (p83.visitor = _traverse().default.explode(Object.assign({}, p83.visitor)));
        if (p83.inherits) {
            const t132 = {
                name: void 0,
                alias: `${s3310}$inherits`,
                value: p83.inherits,
                options: r83,
                dirname: o
            };
            const n58 = yield* (0, e161.forwardAsync)(loadPluginDescriptor, (e)=>l143.invalidate((r84)=>e(t132, r84)
                )
            );
            p83.pre = chain(n58.pre, p83.pre);
            p83.post = chain(n58.post, p83.post);
            p83.manipulateOptions = chain(n58.manipulateOptions, p83.manipulateOptions);
            p83.visitor = _traverse().default.visitors.merge([
                n58.visitor || {},
                p83.visitor || {}
            ]);
            n58.externalDependencies.length > 0 && (i1715 = 0 === i1715.length ? n58.externalDependencies : (0, a165.finalize)([
                i1715,
                n58.externalDependencies
            ]));
        }
        return new n51.default(p83, r83, s3310, i1715);
    });
    const validateIfOptionNeedsFilename = (e, t133)=>{
        if (e.test || e.include || e.exclude) {
            const e = t133.name ? `"${t133.name}"` : "/* your preset */";
            throw new Error([
                `Preset ${e} requires a filename to be set when babel is called directly,`,
                "```",
                `babel.transform(code, { filename: 'file.ts', presets: [${e}] });`,
                "```",
                "See https://babeljs.io/docs/en/options#filename for more information."
            ].join("\n"));
        }
    };
    const validatePreset = (e174, t134, r85)=>{
        if (!t134.filename) {
            const { options: t135  } = e174;
            validateIfOptionNeedsFilename(t135, r85);
            t135.overrides && t135.overrides.forEach((e)=>validateIfOptionNeedsFilename(e, r85)
            );
        }
    };
    function* loadPresetDescriptor(e, t136) {
        const r86 = v45((yield* h317(e, t136)));
        validatePreset(r86, t136, e);
        return {
            chain: yield* (0, s2911.buildPresetChain)(r86, t136),
            externalDependencies: r86.externalDependencies
        };
    }
    const v45 = (0, i1415.makeWeakCacheSync)(({ value: e , dirname: t137 , alias: r87 , externalDependencies: n59  })=>({
            options: (0, l1210.validate)("preset", e),
            alias: r87,
            dirname: t137,
            externalDependencies: n59
        })
    );
    function chain(e175, t138) {
        const r88 = [
            e175,
            t138
        ].filter(Boolean);
        return r88.length <= 1 ? r88[0] : function(...e) {
            for (const t139 of r88)t139.apply(this, e);
        };
    }
    return ce9;
}
var pe9 = "default" in mod29 ? mod29.default : mod29;
var fe8 = {}, de9 = false;
function dew$e4() {
    if (de9) return fe8;
    de9 = true;
    Object.defineProperty(fe8, "__esModule", {
        value: true
    });
    fe8.createConfigItem = createConfigItem;
    fe8.createConfigItemSync = fe8.createConfigItemAsync = void 0;
    Object.defineProperty(fe8, "default", {
        enumerable: true,
        get: function() {
            return e176.default;
        }
    });
    fe8.loadPartialConfigSync = fe8.loadPartialConfigAsync = fe8.loadPartialConfig = fe8.loadOptionsSync = fe8.loadOptionsAsync = fe8.loadOptions = void 0;
    function _gensync() {
        const e = pe9;
        _gensync = function() {
            return e;
        };
        return e;
    }
    var e176 = dew$f4();
    var t140 = dew$h2();
    var r89 = dew$p2();
    const n60 = _gensync()(function*(t141) {
        var r90;
        const n61 = yield* (0, e176.default)(t141);
        return null != (r90 = null == n61 ? void 0 : n61.options) ? r90 : null;
    });
    const o = _gensync()(r89.createConfigItem);
    const maybeErrback = (e)=>(t142, r91)=>{
            if (void 0 === r91 && "function" === typeof t142) {
                r91 = t142;
                t142 = void 0;
            }
            return r91 ? e.errback(t142, r91) : e.sync(t142);
        }
    ;
    const s3410 = maybeErrback(t140.loadPartialConfig);
    fe8.loadPartialConfig = s3410;
    const a184 = t140.loadPartialConfig.sync;
    fe8.loadPartialConfigSync = a184;
    const i1815 = t140.loadPartialConfig.async;
    fe8.loadPartialConfigAsync = i1815;
    const l153 = maybeErrback(n60);
    fe8.loadOptions = l153;
    const c1311 = n60.sync;
    fe8.loadOptionsSync = c1311;
    const u1310 = n60.async;
    fe8.loadOptionsAsync = u1310;
    const p92 = o.sync;
    fe8.createConfigItemSync = p92;
    const f75 = o.async;
    fe8.createConfigItemAsync = f75;
    function createConfigItem(e, t143, r92) {
        return void 0 !== r92 ? o.errback(e, t143, r92) : "function" === typeof t143 ? o.errback(e, void 0, r92) : o.sync(e, t143);
    }
    return fe8;
}
var ge8 = {}, me8 = false;
function dew$d5() {
    if (me8) return ge8;
    me8 = true;
    Object.defineProperty(ge8, "__esModule", {
        value: true
    });
    ge8.default = void 0;
    class PluginPass {
        constructor(e, t144, r93){
            this._map = new Map;
            this.key = void 0;
            this.file = void 0;
            this.opts = void 0;
            this.cwd = void 0;
            this.filename = void 0;
            this.key = t144;
            this.file = e;
            this.opts = r93 || {};
            this.cwd = e.opts.cwd;
            this.filename = e.opts.filename;
        }
        set(e, t145) {
            this._map.set(e, t145);
        }
        get(e) {
            return this._map.get(e);
        }
        availableHelper(e, t146) {
            return this.file.availableHelper(e, t146);
        }
        addHelper(e) {
            return this.file.addHelper(e);
        }
        addImport() {
            return this.file.addImport();
        }
        buildCodeFrameError(e, t147, r94) {
            return this.file.buildCodeFrameError(e, t147, r94);
        }
    }
    ge8.default = PluginPass;
    PluginPass.prototype.getModuleName = function getModuleName() {
        return this.file.getModuleName();
    };
    return ge8;
}
var be7 = "default" in mod22 ? mod22.default : mod22;
var he9 = {}, ye9 = false;
function dew$c5() {
    if (ye9) return he9;
    ye9 = true;
    Object.defineProperty(he9, "__esModule", {
        value: true
    });
    he9.default = loadBlockHoistPlugin;
    function _traverse() {
        const e = be7;
        _traverse = function() {
            return e;
        };
        return e;
    }
    var e177 = dew$r1();
    let t148;
    function loadBlockHoistPlugin() {
        t148 || (t148 = new e177.default(Object.assign({}, r95, {
            visitor: _traverse().default.explode(r95.visitor)
        }), {}));
        return t148;
    }
    function priority(e) {
        const t149 = null == e ? void 0 : e._blockHoist;
        return null == t149 ? 1 : true === t149 ? 2 : t149;
    }
    function stableSort(e178) {
        const t150 = Object.create(null);
        for(let r97 = 0; r97 < e178.length; r97++){
            const n62 = e178[r97];
            const o = priority(n62);
            const s3510 = t150[o] || (t150[o] = []);
            s3510.push(n62);
        }
        const r96 = Object.keys(t150).map((e)=>+e
        ).sort((e, t151)=>t151 - e
        );
        let n63 = 0;
        for (const o of r96){
            const r98 = t150[o];
            for (const t152 of r98)e178[n63++] = t152;
        }
        return e178;
    }
    const r95 = {
        name: "internal.blockHoist",
        visitor: {
            Block: {
                exit ({ node: e  }) {
                    const { body: t153  } = e;
                    let r99 = Math.pow(2, 30) - 1;
                    let n64 = false;
                    for(let e179 = 0; e179 < t153.length; e179++){
                        const o = t153[e179];
                        const s3610 = priority(o);
                        if (s3610 > r99) {
                            n64 = true;
                            break;
                        }
                        r99 = s3610;
                    }
                    n64 && (e.body = stableSort(t153.slice()));
                }
            }
        }
    };
    return he9;
}
var ve10 = "default" in mod27 ? mod27.default : mod27;
var we7 = {}, Pe8 = false;
function dew$b5() {
    if (Pe8) return we7;
    Pe8 = true;
    Object.defineProperty(we7, "__esModule", {
        value: true
    });
    we7.default = normalizeOptions4;
    function _path() {
        const e = ve10;
        _path = function() {
            return e;
        };
        return e;
    }
    function normalizeOptions4(e) {
        const { filename: t155 , cwd: r100 , filenameRelative: n65 = "string" === typeof t155 ? _path().relative(r100, t155) : "unknown" , sourceType: o = "module" , inputSourceMap: s3710 , sourceMaps: a194 = !!s3710 , sourceRoot: i1915 = e.options.moduleRoot , sourceFileName: l162 = _path().basename(n65) , comments: c148 = true , compact: u146 = "auto"  } = e.options;
        const p102 = e.options;
        const f84 = Object.assign({}, p102, {
            parserOpts: Object.assign({
                sourceType: ".mjs" === _path().extname(n65) ? "module" : o,
                sourceFileName: t155,
                plugins: []
            }, p102.parserOpts),
            generatorOpts: Object.assign({
                filename: t155,
                auxiliaryCommentBefore: p102.auxiliaryCommentBefore,
                auxiliaryCommentAfter: p102.auxiliaryCommentAfter,
                retainLines: p102.retainLines,
                comments: c148,
                shouldPrintComment: p102.shouldPrintComment,
                compact: u146,
                minified: p102.minified,
                sourceMaps: a194,
                sourceRoot: i1915,
                sourceFileName: l162
            }, p102.generatorOpts)
        });
        for (const t154 of e.passes)for (const e180 of t154)e180.manipulateOptions && e180.manipulateOptions(f84, f84.parserOpts);
        return f84;
    }
    return we7;
}
var Oe8 = {}, Ce6 = false;
function dew$a5() {
    if (Ce6) return Oe8;
    Ce6 = true;
    Object.defineProperty(Oe8, "__esModule", {
        value: true
    });
    Oe8.default = generateMissingPluginMessage;
    const e181 = {
        asyncDoExpressions: {
            syntax: {
                name: "@babel/plugin-syntax-async-do-expressions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
            }
        },
        classProperties: {
            syntax: {
                name: "@babel/plugin-syntax-class-properties",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
            },
            transform: {
                name: "@babel/plugin-proposal-class-properties",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties"
            }
        },
        classPrivateProperties: {
            syntax: {
                name: "@babel/plugin-syntax-class-properties",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
            },
            transform: {
                name: "@babel/plugin-proposal-class-properties",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties"
            }
        },
        classPrivateMethods: {
            syntax: {
                name: "@babel/plugin-syntax-class-properties",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
            },
            transform: {
                name: "@babel/plugin-proposal-private-methods",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-methods"
            }
        },
        classStaticBlock: {
            syntax: {
                name: "@babel/plugin-syntax-class-static-block",
                url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
            },
            transform: {
                name: "@babel/plugin-proposal-class-static-block",
                url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-proposal-class-static-block"
            }
        },
        decimal: {
            syntax: {
                name: "@babel/plugin-syntax-decimal",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
            }
        },
        decorators: {
            syntax: {
                name: "@babel/plugin-syntax-decorators",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
            },
            transform: {
                name: "@babel/plugin-proposal-decorators",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
            }
        },
        doExpressions: {
            syntax: {
                name: "@babel/plugin-syntax-do-expressions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
            },
            transform: {
                name: "@babel/plugin-proposal-do-expressions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
            }
        },
        dynamicImport: {
            syntax: {
                name: "@babel/plugin-syntax-dynamic-import",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
            }
        },
        exportDefaultFrom: {
            syntax: {
                name: "@babel/plugin-syntax-export-default-from",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
            },
            transform: {
                name: "@babel/plugin-proposal-export-default-from",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
            }
        },
        exportNamespaceFrom: {
            syntax: {
                name: "@babel/plugin-syntax-export-namespace-from",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
            },
            transform: {
                name: "@babel/plugin-proposal-export-namespace-from",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-namespace-from"
            }
        },
        flow: {
            syntax: {
                name: "@babel/plugin-syntax-flow",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
            },
            transform: {
                name: "@babel/preset-flow",
                url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
            }
        },
        functionBind: {
            syntax: {
                name: "@babel/plugin-syntax-function-bind",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
            },
            transform: {
                name: "@babel/plugin-proposal-function-bind",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
            }
        },
        functionSent: {
            syntax: {
                name: "@babel/plugin-syntax-function-sent",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
            },
            transform: {
                name: "@babel/plugin-proposal-function-sent",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
            }
        },
        importMeta: {
            syntax: {
                name: "@babel/plugin-syntax-import-meta",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
            }
        },
        jsx: {
            syntax: {
                name: "@babel/plugin-syntax-jsx",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
            },
            transform: {
                name: "@babel/preset-react",
                url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
            }
        },
        importAssertions: {
            syntax: {
                name: "@babel/plugin-syntax-import-assertions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
            }
        },
        moduleStringNames: {
            syntax: {
                name: "@babel/plugin-syntax-module-string-names",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
            }
        },
        numericSeparator: {
            syntax: {
                name: "@babel/plugin-syntax-numeric-separator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
            },
            transform: {
                name: "@babel/plugin-proposal-numeric-separator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-numeric-separator"
            }
        },
        optionalChaining: {
            syntax: {
                name: "@babel/plugin-syntax-optional-chaining",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
            },
            transform: {
                name: "@babel/plugin-proposal-optional-chaining",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-chaining"
            }
        },
        pipelineOperator: {
            syntax: {
                name: "@babel/plugin-syntax-pipeline-operator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
            },
            transform: {
                name: "@babel/plugin-proposal-pipeline-operator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
            }
        },
        privateIn: {
            syntax: {
                name: "@babel/plugin-syntax-private-property-in-object",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
            },
            transform: {
                name: "@babel/plugin-proposal-private-property-in-object",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-property-in-object"
            }
        },
        recordAndTuple: {
            syntax: {
                name: "@babel/plugin-syntax-record-and-tuple",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
            }
        },
        regexpUnicodeSets: {
            syntax: {
                name: "@babel/plugin-syntax-unicode-sets-regex",
                url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
            },
            transform: {
                name: "@babel/plugin-proposal-unicode-sets-regex",
                url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
            }
        },
        throwExpressions: {
            syntax: {
                name: "@babel/plugin-syntax-throw-expressions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
            },
            transform: {
                name: "@babel/plugin-proposal-throw-expressions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
            }
        },
        typescript: {
            syntax: {
                name: "@babel/plugin-syntax-typescript",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
            },
            transform: {
                name: "@babel/preset-typescript",
                url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
            }
        },
        asyncGenerators: {
            syntax: {
                name: "@babel/plugin-syntax-async-generators",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
            },
            transform: {
                name: "@babel/plugin-proposal-async-generator-functions",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-async-generator-functions"
            }
        },
        logicalAssignment: {
            syntax: {
                name: "@babel/plugin-syntax-logical-assignment-operators",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
            },
            transform: {
                name: "@babel/plugin-proposal-logical-assignment-operators",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-logical-assignment-operators"
            }
        },
        nullishCoalescingOperator: {
            syntax: {
                name: "@babel/plugin-syntax-nullish-coalescing-operator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
            },
            transform: {
                name: "@babel/plugin-proposal-nullish-coalescing-operator",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
            }
        },
        objectRestSpread: {
            syntax: {
                name: "@babel/plugin-syntax-object-rest-spread",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
            },
            transform: {
                name: "@babel/plugin-proposal-object-rest-spread",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-object-rest-spread"
            }
        },
        optionalCatchBinding: {
            syntax: {
                name: "@babel/plugin-syntax-optional-catch-binding",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
            },
            transform: {
                name: "@babel/plugin-proposal-optional-catch-binding",
                url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-catch-binding"
            }
        }
    };
    e181.privateIn.syntax = e181.privateIn.transform;
    const getNameURLCombination = ({ name: e , url: t156  })=>`${e} (${t156})`
    ;
    function generateMissingPluginMessage(t157, r101, n66) {
        let o = `Support for the experimental syntax '${t157}' isn't currently enabled (${r101.line}:${r101.column + 1}):\n\n` + n66;
        const s3810 = e181[t157];
        if (s3810) {
            const { syntax: e , transform: t158  } = s3810;
            if (e) {
                const r102 = getNameURLCombination(e);
                if (t158) {
                    const e = getNameURLCombination(t158);
                    const n67 = t158.name.startsWith("@babel/plugin") ? "plugins" : "presets";
                    o += `\n\nAdd ${e} to the '${n67}' section of your Babel config to enable transformation.\nIf you want to leave it as-is, add ${r102} to the 'plugins' section to enable parsing.`;
                } else o += `\n\nAdd ${r102} to the 'plugins' section of your Babel config to enable parsing.`;
            }
        }
        return o;
    }
    return Oe8;
}
var xe8 = "default" in mod17 ? mod17.default : mod17;
var $e7 = "default" in mod16 ? mod16.default : mod16;
var _e5 = {}, ke7 = false;
function dew$95() {
    if (ke7) return _e5;
    ke7 = true;
    Object.defineProperty(_e5, "__esModule", {
        value: true
    });
    _e5.default = parser;
    function _parser() {
        const e = xe8;
        _parser = function() {
            return e;
        };
        return e;
    }
    function _codeFrame() {
        const e = $e7;
        _codeFrame = function() {
            return e;
        };
        return e;
    }
    var e182 = dew$a5();
    function* parser(t160, { parserOpts: r103 , highlightCode: n70 = true , filename: o = "unknown"  }, s3910) {
        try {
            const e = [];
            for (const n68 of t160)for (const t159 of n68){
                const { parserOverride: n69  } = t159;
                if (n69) {
                    const t161 = n69(s3910, r103, _parser().parse);
                    void 0 !== t161 && e.push(t161);
                }
            }
            if (0 === e.length) return (0, _parser().parse)(s3910, r103);
            if (1 === e.length) {
                yield* [];
                if ("function" === typeof e[0].then) throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                return e[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
        } catch (t162) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === t162.code && (t162.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc: r104 , missingPlugin: a204  } = t162;
            if (r104) {
                const i2014 = (0, _codeFrame().codeFrameColumns)(s3910, {
                    start: {
                        line: r104.line,
                        column: r104.column + 1
                    }
                }, {
                    highlightCode: n70
                });
                t162.message = a204 ? `${o}: ` + (0, e182.default)(a204[0], r104, i2014) : `${o}: ${t162.message}\n\n` + i2014;
                t162.code = "BABEL_PARSE_ERROR";
            }
            throw t162;
        }
    }
    return _e5;
}
var je6 = "default" in mod39 ? mod39.default : mod39;
var Ee8 = "default" in mod27 ? mod27.default : mod27;
var Se8 = "default" in mod5 ? mod5.default : mod5;
var Ae7 = "default" in mod3 ? mod3.default : mod3;
var Me8 = "default" in mod41 ? mod41.default : mod41;
var Ie8 = {}, Fe6 = false;
function dew$85() {
    if (Fe6) return Ie8;
    Fe6 = true;
    Object.defineProperty(Ie8, "__esModule", {
        value: true
    });
    Ie8.default = normalizeFile;
    function _fs() {
        const e = je6;
        _fs = function() {
            return e;
        };
        return e;
    }
    function _path() {
        const e = Ee8;
        _path = function() {
            return e;
        };
        return e;
    }
    function _debug() {
        const e = Se8;
        _debug = function() {
            return e;
        };
        return e;
    }
    function _t6() {
        const e = Ae7;
        _t6 = function() {
            return e;
        };
        return e;
    }
    function _convertSourceMap() {
        const e = Me8;
        _convertSourceMap = function() {
            return e;
        };
        return e;
    }
    var e183 = dew$15();
    var r105 = dew$95();
    var n71 = dew23();
    const { file: o , traverseFast: s402  } = _t6();
    const a2112 = _debug()("babel:transform:file");
    function* normalizeFile(t163, s4110, u156, p1110) {
        u156 = `${u156 || ""}`;
        if (p1110) {
            if ("Program" === p1110.type) p1110 = o(p1110, [], []);
            else if ("File" !== p1110.type) throw new Error("AST root must be a Program or File node");
            s4110.cloneInputAst && (p1110 = (0, n71.default)(p1110));
        } else p1110 = yield* (0, r105.default)(t163, s4110, u156);
        let f94 = null;
        if (false !== s4110.inputSourceMap) {
            "object" === typeof s4110.inputSourceMap && (f94 = _convertSourceMap().fromObject(s4110.inputSourceMap));
            if (!f94) {
                const e = extractComments(l172, p1110);
                if (e) try {
                    f94 = _convertSourceMap().fromComment(e);
                } catch (e184) {
                    a2112("discarding unknown inline input sourcemap", e184);
                }
            }
            if (!f94) {
                const e = extractComments(c154, p1110);
                if ("string" === typeof s4110.filename && e) try {
                    const t164 = c154.exec(e);
                    const r106 = _fs().readFileSync(_path().resolve(_path().dirname(s4110.filename), t164[1]));
                    r106.length > 1e6 ? a2112("skip merging input map > 1 MB") : f94 = _convertSourceMap().fromJSON(r106);
                } catch (e185) {
                    a2112("discarding unknown file input sourcemap", e185);
                }
                else e && a2112("discarding un-loadable file input sourcemap");
            }
        }
        return new e183.default(s4110, {
            code: u156,
            ast: p1110,
            inputMap: f94
        });
    }
    const l172 = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/;
    const c154 = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
    function extractCommentsFromList(e, t165, r107) {
        t165 && (t165 = t165.filter(({ value: t166  })=>{
            if (e.test(t166)) {
                r107 = t166;
                return false;
            }
            return true;
        }));
        return [
            t165,
            r107
        ];
    }
    function extractComments(e, t167) {
        let r108 = null;
        s402(t167, (t168)=>{
            [t168.leadingComments, r108] = extractCommentsFromList(e, t168.leadingComments, r108);
            [t168.innerComments, r108] = extractCommentsFromList(e, t168.innerComments, r108);
            [t168.trailingComments, r108] = extractCommentsFromList(e, t168.trailingComments, r108);
        });
        return r108;
    }
    return Ie8;
}
var De7 = "default" in mod43 ? mod43.default : mod43;
var Ne8 = {}, Be6 = false;
function dew$75() {
    if (Be6) return Ne8;
    Be6 = true;
    Object.defineProperty(Ne8, "__esModule", {
        value: true
    });
    Ne8.default = mergeSourceMap;
    function _remapping() {
        const e = De7;
        _remapping = function() {
            return e;
        };
        return e;
    }
    function mergeSourceMap(e, t169, r109) {
        const n72 = r109.replace(/\\/g, "/");
        let o = false;
        const s42 = _remapping()(rootless(t169), (t170, r110)=>{
            if (t170 === n72 && !o) {
                o = true;
                r110.source = "";
                return rootless(e);
            }
            return null;
        });
        "string" === typeof e.sourceRoot && (s42.sourceRoot = e.sourceRoot);
        return Object.assign({}, s42);
    }
    function rootless(e) {
        return Object.assign({}, e, {
            sourceRoot: null
        });
    }
    return Ne8;
}
var Te7 = "default" in mod41 ? mod41.default : mod41;
var Re6 = "default" in mod12 ? mod12.default : mod12;
var Le6 = {}, Ue6 = false;
function dew$65() {
    if (Ue6) return Le6;
    Ue6 = true;
    Object.defineProperty(Le6, "__esModule", {
        value: true
    });
    Le6.default = generateCode;
    function _convertSourceMap() {
        const e = Te7;
        _convertSourceMap = function() {
            return e;
        };
        return e;
    }
    function _generator() {
        const e = Re6;
        _generator = function() {
            return e;
        };
        return e;
    }
    var e186 = dew$75();
    function generateCode(t172, r111) {
        const { opts: n73 , ast: o , code: s43 , inputMap: a2212  } = r111;
        const { generatorOpts: i2214  } = n73;
        const l182 = [];
        for (const e of t172)for (const t171 of e){
            const { generatorOverride: e  } = t171;
            if (e) {
                const t173 = e(o, i2214, s43, _generator().default);
                void 0 !== t173 && l182.push(t173);
            }
        }
        let c163;
        if (0 === l182.length) c163 = (0, _generator().default)(o, i2214, s43);
        else {
            if (1 !== l182.length) throw new Error("More than one plugin attempted to override codegen.");
            c163 = l182[0];
            if ("function" === typeof c163.then) throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
        }
        let { code: u165 , decodedMap: p1210 = c163.map  } = c163;
        p1210 && (p1210 = a2212 ? (0, e186.default)(a2212.toObject(), p1210, i2214.sourceFileName) : c163.map);
        "inline" !== n73.sourceMaps && "both" !== n73.sourceMaps || (u165 += "\n" + _convertSourceMap().fromObject(p1210).toComment());
        "inline" === n73.sourceMaps && (p1210 = null);
        return {
            outputCode: u165,
            outputMap: p1210
        };
    }
    return Le6;
}
var We6 = "default" in mod22 ? mod22.default : mod22;
var He4 = {}, ze6 = false;
function dew$55() {
    if (ze6) return He4;
    ze6 = true;
    Object.defineProperty(He4, "__esModule", {
        value: true
    });
    He4.run = run;
    function _traverse() {
        const e = We6;
        _traverse = function() {
            return e;
        };
        return e;
    }
    var e187 = dew$d5();
    var t174 = dew$c5();
    var r112 = dew$b5();
    var n74 = dew$85();
    var o434 = dew$65();
    var s44 = dew$s1();
    function* run(e, t175, a237) {
        const i2314 = yield* (0, n74.default)(e.passes, (0, r112.default)(e), t175, a237);
        const l192 = i2314.opts;
        try {
            yield* transformFile(i2314, e.passes);
        } catch (e188) {
            var c172;
            e188.message = `${null != (c172 = l192.filename) ? c172 : "unknown"}: ${e188.message}`;
            e188.code || (e188.code = "BABEL_TRANSFORM_ERROR");
            throw e188;
        }
        let u175, p131;
        try {
            false !== l192.code && ({ outputCode: u175 , outputMap: p131  } = (0, o434.default)(e.passes, i2314));
        } catch (e189) {
            var f104;
            e189.message = `${null != (f104 = l192.filename) ? f104 : "unknown"}: ${e189.message}`;
            e189.code || (e189.code = "BABEL_GENERATE_ERROR");
            throw e189;
        }
        return {
            metadata: i2314.metadata,
            options: l192,
            ast: true === l192.ast ? i2314.ast : null,
            code: void 0 === u175 ? null : u175,
            map: void 0 === p131 ? null : p131,
            sourceType: i2314.ast.program.sourceType,
            externalDependencies: (0, s44.flattenToSet)(e.externalDependencies)
        };
    }
    function* transformFile(r113, n75) {
        for (const o of n75){
            const n76 = [];
            const s45 = [];
            const a243 = [];
            for (const i2512 of o.concat([
                (0, t174.default)()
            ])){
                const t177 = new e187.default(r113, i2512.key, i2512.options);
                n76.push([
                    i2512,
                    t177
                ]);
                s45.push(t177);
                a243.push(i2512.visitor);
            }
            for (const [e, t178] of n76){
                const n77 = e.pre;
                if (n77) {
                    const e = n77.call(t178, r113);
                    yield* [];
                    if (isThenable(e)) throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                }
            }
            const i2413 = _traverse().default.visitors.merge(a243, s45, r113.opts.wrapPluginVisitorMethod);
            (0, _traverse().default)(r113.ast, i2413, r113.scope);
            for (const [e190, t176] of n76){
                const n78 = e190.post;
                if (n78) {
                    const e = n78.call(t176, r113);
                    yield* [];
                    if (isThenable(e)) throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                }
            }
        }
    }
    function isThenable(e) {
        return !!e && ("object" === typeof e || "function" === typeof e) && !!e.then && "function" === typeof e.then;
    }
    return He4;
}
var Ve5 = "default" in mod29 ? mod29.default : mod29;
var qe5 = {}, Je5 = false;
function dew$45() {
    if (Je5) return qe5;
    Je5 = true;
    Object.defineProperty(qe5, "__esModule", {
        value: true
    });
    qe5.transformSync = qe5.transformAsync = qe5.transform = void 0;
    function _gensync() {
        const e = Ve5;
        _gensync = function() {
            return e;
        };
        return e;
    }
    var e191 = dew$e4();
    var t179 = dew$55();
    const r114 = _gensync()(function* transform(r115, n80) {
        const o = yield* (0, e191.default)(n80);
        return null === o ? null : yield* (0, t179.run)(o, r115);
    });
    const n79 = function transform(e, t180, n81) {
        if ("function" === typeof t180) {
            n81 = t180;
            t180 = void 0;
        }
        if (void 0 === n81) return r114.sync(e, t180);
        r114.errback(e, t180, n81);
    };
    qe5.transform = n79;
    const o441 = r114.sync;
    qe5.transformSync = o441;
    const s46 = r114.async;
    qe5.transformAsync = s46;
    return qe5;
}
var Ye4 = "default" in mod29 ? mod29.default : mod29;
var Ge4 = {}, Ke6 = false;
function dew$35() {
    if (Ke6) return Ge4;
    Ke6 = true;
    Object.defineProperty(Ge4, "__esModule", {
        value: true
    });
    Ge4.transformFromAstSync = Ge4.transformFromAstAsync = Ge4.transformFromAst = void 0;
    function _gensync() {
        const e = Ye4;
        _gensync = function() {
            return e;
        };
        return e;
    }
    var e192 = dew$e4();
    var t181 = dew$55();
    const r116 = _gensync()(function*(r117, n83, o) {
        const s48 = yield* (0, e192.default)(o);
        if (null === s48) return null;
        if (!r117) throw new Error("No AST given");
        return yield* (0, t181.run)(s48, n83, r117);
    });
    const n82 = function transformFromAst(e, t182, n84, o) {
        if ("function" === typeof n84) {
            o = n84;
            n84 = void 0;
        }
        if (void 0 === o) return r116.sync(e, t182, n84);
        r116.errback(e, t182, n84, o);
    };
    Ge4.transformFromAst = n82;
    const o451 = r116.sync;
    Ge4.transformFromAstSync = o451;
    const s47 = r116.async;
    Ge4.transformFromAstAsync = s47;
    return Ge4;
}
var Qe5 = "default" in mod29 ? mod29.default : mod29;
var Xe5 = {}, Ze3 = false;
function dew$26() {
    if (Ze3) return Xe5;
    Ze3 = true;
    Object.defineProperty(Xe5, "__esModule", {
        value: true
    });
    Xe5.parseSync = Xe5.parseAsync = Xe5.parse = void 0;
    function _gensync() {
        const e = Qe5;
        _gensync = function() {
            return e;
        };
        return e;
    }
    var e193 = dew$e4();
    var t183 = dew$95();
    var r118 = dew$b5();
    const n85 = _gensync()(function* parse(n86, o) {
        const s50 = yield* (0, e193.default)(o);
        return null === s50 ? null : yield* (0, t183.default)(s50.passes, (0, r118.default)(s50), n86);
    });
    const o46 = function parse(e, t184, r119) {
        if ("function" === typeof t184) {
            r119 = t184;
            t184 = void 0;
        }
        if (void 0 === r119) return n85.sync(e, t184);
        n85.errback(e, t184, r119);
    };
    Xe5.parse = o46;
    const s49 = n85.sync;
    Xe5.parseSync = s49;
    const a253 = n85.async;
    Xe5.parseAsync = a253;
    return Xe5;
}
var et4 = "default" in mod3 ? mod3.default : mod3;
var tt7 = "default" in mod17 ? mod17.default : mod17;
var rt6 = "default" in mod22 ? mod22.default : mod22;
var nt5 = "default" in mod20 ? mod20.default : mod20;
var ot4 = {}, st5 = false;
function dew$19() {
    if (st5) return ot4;
    st5 = true;
    Object.defineProperty(ot4, "__esModule", {
        value: true
    });
    ot4.DEFAULT_EXTENSIONS = void 0;
    Object.defineProperty(ot4, "File", {
        enumerable: true,
        get: function() {
            return e194.default;
        }
    });
    ot4.OptionManager = void 0;
    ot4.Plugin = Plugin;
    Object.defineProperty(ot4, "buildExternalHelpers", {
        enumerable: true,
        get: function() {
            return o.default;
        }
    });
    Object.defineProperty(ot4, "createConfigItem", {
        enumerable: true,
        get: function() {
            return i2610.createConfigItem;
        }
    });
    Object.defineProperty(ot4, "createConfigItemAsync", {
        enumerable: true,
        get: function() {
            return i2610.createConfigItemAsync;
        }
    });
    Object.defineProperty(ot4, "createConfigItemSync", {
        enumerable: true,
        get: function() {
            return i2610.createConfigItemSync;
        }
    });
    Object.defineProperty(ot4, "getEnv", {
        enumerable: true,
        get: function() {
            return a263.getEnv;
        }
    });
    Object.defineProperty(ot4, "loadOptions", {
        enumerable: true,
        get: function() {
            return i2610.loadOptions;
        }
    });
    Object.defineProperty(ot4, "loadOptionsAsync", {
        enumerable: true,
        get: function() {
            return i2610.loadOptionsAsync;
        }
    });
    Object.defineProperty(ot4, "loadOptionsSync", {
        enumerable: true,
        get: function() {
            return i2610.loadOptionsSync;
        }
    });
    Object.defineProperty(ot4, "loadPartialConfig", {
        enumerable: true,
        get: function() {
            return i2610.loadPartialConfig;
        }
    });
    Object.defineProperty(ot4, "loadPartialConfigAsync", {
        enumerable: true,
        get: function() {
            return i2610.loadPartialConfigAsync;
        }
    });
    Object.defineProperty(ot4, "loadPartialConfigSync", {
        enumerable: true,
        get: function() {
            return i2610.loadPartialConfigSync;
        }
    });
    Object.defineProperty(ot4, "parse", {
        enumerable: true,
        get: function() {
            return p141.parse;
        }
    });
    Object.defineProperty(ot4, "parseAsync", {
        enumerable: true,
        get: function() {
            return p141.parseAsync;
        }
    });
    Object.defineProperty(ot4, "parseSync", {
        enumerable: true,
        get: function() {
            return p141.parseSync;
        }
    });
    Object.defineProperty(ot4, "resolvePlugin", {
        enumerable: true,
        get: function() {
            return s51.resolvePlugin;
        }
    });
    Object.defineProperty(ot4, "resolvePreset", {
        enumerable: true,
        get: function() {
            return s51.resolvePreset;
        }
    });
    Object.defineProperty(ot4, "template", {
        enumerable: true,
        get: function() {
            return _template().default;
        }
    });
    Object.defineProperty(ot4, "tokTypes", {
        enumerable: true,
        get: function() {
            return _parser().tokTypes;
        }
    });
    Object.defineProperty(ot4, "transform", {
        enumerable: true,
        get: function() {
            return l202.transform;
        }
    });
    Object.defineProperty(ot4, "transformAsync", {
        enumerable: true,
        get: function() {
            return l202.transformAsync;
        }
    });
    Object.defineProperty(ot4, "transformFile", {
        enumerable: true,
        get: function() {
            return c182.transformFile;
        }
    });
    Object.defineProperty(ot4, "transformFileAsync", {
        enumerable: true,
        get: function() {
            return c182.transformFileAsync;
        }
    });
    Object.defineProperty(ot4, "transformFileSync", {
        enumerable: true,
        get: function() {
            return c182.transformFileSync;
        }
    });
    Object.defineProperty(ot4, "transformFromAst", {
        enumerable: true,
        get: function() {
            return u185.transformFromAst;
        }
    });
    Object.defineProperty(ot4, "transformFromAstAsync", {
        enumerable: true,
        get: function() {
            return u185.transformFromAstAsync;
        }
    });
    Object.defineProperty(ot4, "transformFromAstSync", {
        enumerable: true,
        get: function() {
            return u185.transformFromAstSync;
        }
    });
    Object.defineProperty(ot4, "transformSync", {
        enumerable: true,
        get: function() {
            return l202.transformSync;
        }
    });
    Object.defineProperty(ot4, "traverse", {
        enumerable: true,
        get: function() {
            return _traverse().default;
        }
    });
    ot4.version = ot4.types = void 0;
    var e194 = dew$15();
    var o = dew14();
    var s51 = dew15();
    var a263 = dew$t1();
    function _types() {
        const e = et4;
        _types = function() {
            return e;
        };
        return e;
    }
    Object.defineProperty(ot4, "types", {
        enumerable: true,
        get: function() {
            return _types();
        }
    });
    function _parser() {
        const e = tt7;
        _parser = function() {
            return e;
        };
        return e;
    }
    function _traverse() {
        const e = rt6;
        _traverse = function() {
            return e;
        };
        return e;
    }
    function _template() {
        const e = nt5;
        _template = function() {
            return e;
        };
        return e;
    }
    var i2610 = dew$e4();
    var l202 = dew$45();
    var c182 = dew24();
    var u185 = dew$35();
    var p141 = dew$26();
    const f1112 = "7.17.10";
    ot4.version = f1112;
    const d73 = Object.freeze([
        ".js",
        ".jsx",
        ".es6",
        ".es",
        ".mjs",
        ".cjs"
    ]);
    ot4.DEFAULT_EXTENSIONS = d73;
    class OptionManager {
        init(e) {
            return (0, i2610.loadOptions)(e);
        }
    }
    ot4.OptionManager = OptionManager;
    function Plugin(e) {
        throw new Error(`The (${e}) Babel 5 plugin is being run with an unsupported Babel version.`);
    }
    return ot4;
}
var at5 = "default" in mod ? mod.default : mod;
var it5 = {}, lt6 = false;
function dew25() {
    if (lt6) return it5;
    lt6 = true;
    Object.defineProperty(it5, "__esModule", {
        value: true
    });
    it5.makeConfigAPI = makeConfigAPI;
    it5.makePluginAPI = makePluginAPI;
    it5.makePresetAPI = makePresetAPI;
    function _semver() {
        const e = at5;
        _semver = function() {
            return e;
        };
        return e;
    }
    var e195 = dew$19();
    var t185 = dew17();
    dew$g3();
    function makeConfigAPI(r120) {
        const env = (e196)=>r120.using((r121)=>{
                if ("undefined" === typeof e196) return r121.envName;
                if ("function" === typeof e196) return (0, t185.assertSimpleType)(e196(r121.envName));
                Array.isArray(e196) || (e196 = [
                    e196
                ]);
                return e196.some((e)=>{
                    if ("string" !== typeof e) throw new Error("Unexpected non-string value");
                    return e === r121.envName;
                });
            })
        ;
        const caller = (e)=>r120.using((r122)=>(0, t185.assertSimpleType)(e(r122.caller))
            )
        ;
        return {
            version: e195.version,
            cache: r120.simple(),
            env: env,
            async: ()=>false
            ,
            caller: caller,
            assertVersion: assertVersion
        };
    }
    function makePresetAPI(e197, t186) {
        const targets = ()=>JSON.parse(e197.using((e)=>JSON.stringify(e.targets)
            ))
        ;
        const addExternalDependency = (e)=>{
            t186.push(e);
        };
        return Object.assign({}, makeConfigAPI(e197), {
            targets: targets,
            addExternalDependency: addExternalDependency
        });
    }
    function makePluginAPI(e198, t187) {
        const assumption = (t188)=>e198.using((e)=>e.assumptions[t188]
            )
        ;
        return Object.assign({}, makePresetAPI(e198, t187), {
            assumption: assumption
        });
    }
    function assertVersion(t189) {
        if ("number" === typeof t189) {
            if (!Number.isInteger(t189)) throw new Error("Expected string or integer value.");
            t189 = `^${t189}.0.0-0`;
        }
        if ("string" !== typeof t189) throw new Error("Expected string or integer value.");
        if (_semver().satisfies(e195.version, t189)) return;
        const r123 = Error.stackTraceLimit;
        "number" === typeof r123 && r123 < 25 && (Error.stackTraceLimit = 25);
        const n87 = new Error(`Requires Babel "${t189}", but was loaded with "${e195.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
        "number" === typeof r123 && (Error.stackTraceLimit = r123);
        throw Object.assign(n87, {
            code: "BABEL_VERSION_UNSUPPORTED",
            version: e195.version,
            range: t189
        });
    }
    return it5;
}
const a42 = dew$19();
var s42 = a42.__esModule, e37 = a42.DEFAULT_EXTENSIONS, o46 = a42.File, t43 = a42.OptionManager, n51 = a42.Plugin, i43 = a42.buildExternalHelpers, l39 = a42.createConfigItem, m30 = a42.createConfigItemAsync, p34 = a42.createConfigItemSync, c40 = a42.getEnv, f37 = a42.loadOptions, y21 = a42.loadOptionsAsync, g27 = a42.loadOptionsSync, b24 = a42.loadPartialConfig, d32 = a42.loadPartialConfigAsync, A18 = a42.loadPartialConfigSync, S20 = a42.parse, F19 = a42.parseAsync, u39 = a42.parseSync, v28 = a42.resolvePlugin, C21 = a42.resolvePreset, P17 = a42.transform, E17 = a42.transformAsync, O19 = a42.transformFile, _21 = a42.transformFileAsync, j16 = a42.transformFileSync, I19 = a42.transformFromAst, h29 = a42.transformFromAstAsync, x19 = a42.transformFromAstSync, M17 = a42.transformSync, N17 = a42.version;
const mod44 = {
    DEFAULT_EXTENSIONS: e37,
    File: o46,
    OptionManager: t43,
    Plugin: n51,
    __esModule: s42,
    buildExternalHelpers: i43,
    createConfigItem: l39,
    createConfigItemAsync: m30,
    createConfigItemSync: p34,
    default: a42,
    getEnv: c40,
    loadOptions: f37,
    loadOptionsAsync: y21,
    loadOptionsSync: g27,
    loadPartialConfig: b24,
    loadPartialConfigAsync: d32,
    loadPartialConfigSync: A18,
    parse: S20,
    parseAsync: F19,
    parseSync: u39,
    resolvePlugin: v28,
    resolvePreset: C21,
    transform: P17,
    transformAsync: E17,
    transformFile: O19,
    transformFileAsync: _21,
    transformFileSync: j16,
    transformFromAst: I19,
    transformFromAstAsync: h29,
    transformFromAstSync: x19,
    transformSync: M17,
    version: N17
};
var e38 = {};
Object.defineProperty(e38, "__esModule", {
    value: true
});
e38.declare = declare;
function declare(e1) {
    return (t1183, o189, s403)=>{
        var n;
        let a;
        for (const e2 of Object.keys(r58)){
            var i274;
            if (!t1183[e2]) {
                a = null != (i274 = a) ? i274 : copyApiObject(t1183);
                a[e2] = r58[e2](a);
            }
        }
        return e1(null != (n = a) ? n : t1183, o189 || {}, s403);
    };
}
const r58 = {
    assertVersion: (e3155)=>(r1130)=>{
            throwVersionError(r1130, e3155.version);
        }
    ,
    targets: ()=>()=>({})
    ,
    assumption: ()=>()=>{}
};
function copyApiObject(e4132) {
    let r286 = null;
    if ("string" === typeof e4132.version && /^7\./.test(e4132.version)) {
        r286 = Object.getPrototypeOf(e4132);
        !r286 || has(r286, "version") && has(r286, "transform") && has(r286, "template") && has(r286, "types") || (r286 = null);
    }
    return Object.assign({}, r286, e4132);
}
function has(e5131, r359) {
    return Object.prototype.hasOwnProperty.call(e5131, r359);
}
function throwVersionError(e6130, r455) {
    if ("number" === typeof e6130) {
        if (!Number.isInteger(e6130)) throw new Error("Expected string or integer value.");
        e6130 = `^${e6130}.0.0-0`;
    }
    if ("string" !== typeof e6130) throw new Error("Expected string or integer value.");
    const t2165 = Error.stackTraceLimit;
    "number" === typeof t2165 && t2165 < 25 && (Error.stackTraceLimit = 25);
    let o259;
    o259 = "7." === r455.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${r455}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${e6130}", but was loaded with "${r455}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    "number" === typeof t2165 && (Error.stackTraceLimit = t2165);
    throw Object.assign(o259, {
        code: "BABEL_VERSION_UNSUPPORTED",
        version: r455,
        range: e6130
    });
}
const t44 = e38.__esModule;
const o47 = e38.declare;
const mod45 = {
    __esModule: t44,
    declare: o47,
    default: e38
};
var a43 = "default" in mod45 ? mod45.default : mod45;
var r59 = {};
Object.defineProperty(r59, "__esModule", {
    value: true
});
r59.default = void 0;
var s43 = a43;
var t45 = (0, s43.declare)((e1)=>{
    e1.assertVersion(7);
    return {
        name: "syntax-jsx",
        manipulateOptions (e2, a166) {
            a166.plugins.some((e3156)=>"typescript" === (Array.isArray(e3156) ? e3156[0] : e3156)
            ) || a166.plugins.push("jsx");
        }
    };
});
r59.default = t45;
const l40 = r59.__esModule;
const mod46 = {
    __esModule: l40,
    default: r59
};
var t46 = "default" in mod3 ? mod3.default : mod3;
var a44 = {};
Object.defineProperty(a44, "__esModule", {
    value: true
});
a44.default = annotateAsPure;
var n52 = t46;
const { addComment: o48  } = n52;
const s44 = "#__PURE__";
const isPureAnnotated = ({ leadingComments: e1  })=>!!e1 && e1.some((e2)=>/[@#]__PURE__/.test(e2.value)
    )
;
function annotateAsPure(e3157) {
    const t1184 = e3157.node || e3157;
    isPureAnnotated(t1184) || o48(t1184, "leading", s44);
}
const d33 = a44.__esModule;
const mod47 = {
    __esModule: d33,
    default: a44
};
var i44 = "default" in mod46 ? mod46.default : mod46;
var a45 = "default" in mod45 ? mod45.default : mod45;
var o49 = "default" in mod44 ? mod44.default : mod44;
var l41 = "default" in mod25 ? mod25.default : mod25;
var u40 = "default" in mod47 ? mod47.default : mod47;
var c41 = {};
Object.defineProperty(c41, "__esModule", {
    value: true
});
c41.default = createPlugin;
var p35 = i44;
var d34 = a45;
var m31 = o49;
var f38 = l41;
var y22 = u40;
const b25 = {
    importSource: "react",
    runtime: "automatic",
    pragma: "React.createElement",
    pragmaFrag: "React.Fragment"
};
const g28 = /^\s*\*?\s*@jsxImportSource\s+([^\s]+)\s*$/m;
const h30 = /^\s*\*?\s*@jsxRuntime\s+([^\s]+)\s*$/m;
const x20 = /^\s*\*?\s*@jsx\s+([^\s]+)\s*$/m;
const E18 = /^\s*\*?\s*@jsxFrag\s+([^\s]+)\s*$/m;
const get1 = (e1, t1185)=>e1.get(`@babel/plugin-react-jsx/${t1185}`)
;
const set = (e2, t2166, r1131)=>e2.set(`@babel/plugin-react-jsx/${t2166}`, r1131)
;
function createPlugin({ name: e3158 , development: t3132  }) {
    return (0, d34.declare)((r2, n1176)=>{
        const { pure: s1136 , throwIfNamespace: i1131 = true , filter: a167 , runtime: o190 = t3132 ? "automatic" : "classic" , importSource: l140 = b25.importSource , pragma: u140 = b25.pragma , pragmaFrag: c149 = b25.pragmaFrag  } = n1176;
        var { useSpread: d128 = false , useBuiltIns: f132 = false  } = n1176;
        if ("classic" === o190) {
            if ("boolean" !== typeof d128) throw new Error("transform-react-jsx currently only accepts a boolean option for useSpread (defaults to false)");
            if ("boolean" !== typeof f132) throw new Error("transform-react-jsx currently only accepts a boolean option for useBuiltIns (defaults to false)");
            if (d128 && f132) throw new Error("transform-react-jsx currently only accepts useBuiltIns or useSpread but not both");
        }
        const j115 = {
            JSXOpeningElement (e4133, t4125) {
                const r360 = [];
                isThisAllowed(e4133.scope) && r360.push(m31.types.jsxAttribute(m31.types.jsxIdentifier("__self"), m31.types.jsxExpressionContainer(m31.types.thisExpression())));
                r360.push(m31.types.jsxAttribute(m31.types.jsxIdentifier("__source"), m31.types.jsxExpressionContainer(makeSource(e4133, t4125))));
                e4133.pushContainer("attributes", r360);
            }
        };
        return {
            name: e3158,
            inherits: p35.default,
            visitor: {
                JSXNamespacedName (e5132) {
                    if (i1131) throw e5132.buildCodeFrameError("Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.");
                },
                JSXSpreadChild (e6131) {
                    throw e6131.buildCodeFrameError("Spread children are not supported in React.");
                },
                Program: {
                    enter (e8126, r456) {
                        const { file: s2122  } = r456;
                        let i275 = o190;
                        let a238 = l140;
                        let p130 = u140;
                        let d218 = c149;
                        let f222 = !!n1176.importSource;
                        let y121 = !!n1176.pragma;
                        let S47 = !!n1176.pragmaFrag;
                        if (s2122.ast.comments) for (const e7122 of s2122.ast.comments){
                            const t5123 = g28.exec(e7122.value);
                            if (t5123) {
                                a238 = t5123[1];
                                f222 = true;
                            }
                            const r544 = h30.exec(e7122.value);
                            r544 && (i275 = r544[1]);
                            const n2150 = x20.exec(e7122.value);
                            if (n2150) {
                                p130 = n2150[1];
                                y121 = true;
                            }
                            const s3103 = E18.exec(e7122.value);
                            if (s3103) {
                                d218 = s3103[1];
                                S47 = true;
                            }
                        }
                        set(r456, "runtime", i275);
                        if ("classic" === i275) {
                            if (f222) throw e8126.buildCodeFrameError("importSource cannot be set when runtime is classic.");
                            const t648 = toMemberExpression(p130);
                            const n366 = toMemberExpression(d218);
                            set(r456, "id/createElement", ()=>m31.types.cloneNode(t648)
                            );
                            set(r456, "id/fragment", ()=>m31.types.cloneNode(n366)
                            );
                            set(r456, "defaultPure", p130 === b25.pragma);
                        } else {
                            if ("automatic" !== i275) throw e8126.buildCodeFrameError('Runtime must be either "classic" or "automatic".');
                            {
                                if (y121 || S47) throw e8126.buildCodeFrameError("pragma and pragmaFrag cannot be set when runtime is automatic.");
                                const define = (t744, n450)=>set(r456, t744, createImportLazily(r456, e8126, n450, a238))
                                ;
                                define("id/jsx", t3132 ? "jsxDEV" : "jsx");
                                define("id/jsxs", t3132 ? "jsxDEV" : "jsxs");
                                define("id/createElement", "createElement");
                                define("id/fragment", "Fragment");
                                set(r456, "defaultPure", a238 === b25.importSource);
                            }
                        }
                        t3132 && e8126.traverse(j115, r456);
                    }
                },
                JSXElement: {
                    exit (e9125, t840) {
                        let r639;
                        r639 = "classic" === get1(t840, "runtime") || shouldUseCreateElement(e9125) ? buildCreateElementCall(e9125, t840) : buildJSXElementCall(e9125, t840);
                        e9125.replaceWith(m31.types.inherits(r639, e9125.node));
                    }
                },
                JSXFragment: {
                    exit (e1036, t936) {
                        let r733;
                        r733 = "classic" === get1(t936, "runtime") ? buildCreateElementFragmentCall(e1036, t936) : buildJSXFragmentCall(e1036, t936);
                        e1036.replaceWith(m31.types.inherits(r733, e1036.node));
                    }
                },
                JSXAttribute (e1141) {
                    m31.types.isJSXElement(e1141.node.value) && (e1141.node.value = m31.types.jsxExpressionContainer(e1141.node.value));
                }
            }
        };
        function isDerivedClass(e1234) {
            return null !== e1234.node.superClass;
        }
        function isThisAllowed(e1333) {
            do {
                const { path: t1035  } = e1333;
                if (t1035.isFunctionParent() && !t1035.isArrowFunctionExpression()) return !t1035.isMethod() || "constructor" !== t1035.node.kind || !isDerivedClass(t1035.parentPath.parentPath);
                if (t1035.isTSModuleBlock()) return false;
            }while (e1333 = e1333.parent)
            return true;
        }
        function call(e1432, t1186, r831) {
            const n543 = m31.types.callExpression(get1(e1432, `id/${t1186}`)(), r831);
            (null != s1136 ? s1136 : get1(e1432, "defaultPure")) && (0, y22.default)(n543);
            return n543;
        }
        function shouldUseCreateElement(e1631) {
            const t1233 = e1631.get("openingElement");
            const r926 = t1233.node.attributes;
            let n641 = false;
            for(let e1531 = 0; e1531 < r926.length; e1531++){
                const t1333 = r926[e1531];
                if (n641 && m31.types.isJSXAttribute(t1333) && "key" === t1333.name.name) return true;
                m31.types.isJSXSpreadAttribute(t1333) && (n641 = true);
            }
            return false;
        }
        function convertJSXIdentifier(e1730, t1431) {
            if (m31.types.isJSXIdentifier(e1730)) {
                if ("this" === e1730.name && m31.types.isReferenced(e1730, t1431)) return m31.types.thisExpression();
                if (!m31.types.isValidIdentifier(e1730.name, false)) return m31.types.stringLiteral(e1730.name);
                e1730.type = "Identifier";
            } else {
                if (m31.types.isJSXMemberExpression(e1730)) return m31.types.memberExpression(convertJSXIdentifier(e1730.object, e1730), convertJSXIdentifier(e1730.property, e1730));
                if (m31.types.isJSXNamespacedName(e1730)) return m31.types.stringLiteral(`${e1730.namespace.name}:${e1730.name.name}`);
            }
            return e1730;
        }
        function convertAttributeValue(e1827) {
            return m31.types.isJSXExpressionContainer(e1827) ? e1827.expression : e1827;
        }
        function accumulateAttribute(e1926, t1530) {
            if (m31.types.isJSXSpreadAttribute(t1530.node)) {
                const r1024 = t1530.node.argument;
                m31.types.isObjectExpression(r1024) ? e1926.push(...r1024.properties) : e1926.push(m31.types.spreadElement(r1024));
                return e1926;
            }
            const r1132 = convertAttributeValue("key" !== t1530.node.name.name ? t1530.node.value || m31.types.booleanLiteral(true) : t1530.node.value);
            if ("key" === t1530.node.name.name && null === r1132) throw t1530.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
            if (m31.types.isStringLiteral(r1132) && !m31.types.isJSXExpressionContainer(t1530.node.value)) {
                var n739;
                r1132.value = r1132.value.replace(/\n\s+/g, " ");
                null == (n739 = r1132.extra) || delete n739.raw;
            }
            m31.types.isJSXNamespacedName(t1530.node.name) ? t1530.node.name = m31.types.stringLiteral(t1530.node.name.namespace.name + ":" + t1530.node.name.name.name) : m31.types.isValidIdentifier(t1530.node.name.name, false) ? t1530.node.name.type = "Identifier" : t1530.node.name = m31.types.stringLiteral(t1530.node.name.name);
            e1926.push(m31.types.inherits(m31.types.objectProperty(t1530.node.name, r1132), t1530.node));
            return e1926;
        }
        function buildChildrenProperty(e2025) {
            let t1629;
            if (1 === e2025.length) t1629 = e2025[0];
            else {
                if (!(e2025.length > 1)) return;
                t1629 = m31.types.arrayExpression(e2025);
            }
            return m31.types.objectProperty(m31.types.identifier("children"), t1629);
        }
        function buildJSXElementCall(e2121, r1319) {
            const n835 = e2121.get("openingElement");
            const s431 = [
                getTag(n835)
            ];
            const i337 = [];
            const a336 = Object.create(null);
            for (const t1725 of n835.get("attributes"))if (t1725.isJSXAttribute() && m31.types.isJSXIdentifier(t1725.node.name)) {
                const { name: r1222  } = t1725.node.name;
                switch(r1222){
                    case "__source":
                    case "__self":
                        if (a336[r1222]) throw sourceSelfError(e2121, r1222);
                    case "key":
                        {
                            const e2220 = convertAttributeValue(t1725.node.value);
                            if (null === e2220) throw t1725.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
                            a336[r1222] = e2220;
                            break;
                        }
                    default:
                        i337.push(t1725);
                }
            } else i337.push(t1725);
            const o260 = m31.types.react.buildChildren(e2121.node);
            let l229;
            l229 = i337.length || o260.length ? buildJSXOpeningElementAttributes(i337, o260) : m31.types.objectExpression([]);
            s431.push(l229);
            if (t3132) {
                var u232, c224, p222;
                s431.push(null != (u232 = a336.key) ? u232 : e2121.scope.buildUndefinedNode(), m31.types.booleanLiteral(o260.length > 1), null != (c224 = a336.__source) ? c224 : e2121.scope.buildUndefinedNode(), null != (p222 = a336.__self) ? p222 : e2121.scope.buildUndefinedNode());
            } else void 0 !== a336.key && s431.push(a336.key);
            return call(r1319, o260.length > 1 ? "jsxs" : "jsx", s431);
        }
        function buildJSXOpeningElementAttributes(e2319, t1823) {
            const r1419 = e2319.reduce(accumulateAttribute, []);
            (null == t1823 ? void 0 : t1823.length) > 0 && r1419.push(buildChildrenProperty(t1823));
            return m31.types.objectExpression(r1419);
        }
        function buildJSXFragmentCall(e2419, r1517) {
            const n933 = [
                get1(r1517, "id/fragment")()
            ];
            const s524 = m31.types.react.buildChildren(e2419.node);
            n933.push(m31.types.objectExpression(s524.length > 0 ? [
                buildChildrenProperty(s524)
            ] : []));
            t3132 && n933.push(e2419.scope.buildUndefinedNode(), m31.types.booleanLiteral(s524.length > 1));
            return call(r1517, s524.length > 1 ? "jsxs" : "jsx", n933);
        }
        function buildCreateElementFragmentCall(e2519, t1923) {
            if (!a167 || a167(e2519.node, t1923)) return call(t1923, "createElement", [
                get1(t1923, "id/fragment")(),
                m31.types.nullLiteral(),
                ...m31.types.react.buildChildren(e2519.node)
            ]);
        }
        function buildCreateElementCall(e2618, t2022) {
            const r1616 = e2618.get("openingElement");
            return call(t2022, "createElement", [
                getTag(r1616),
                buildCreateElementOpeningElementAttributes(t2022, e2618, r1616.get("attributes")),
                ...m31.types.react.buildChildren(e2618.node)
            ]);
        }
        function getTag(e2716) {
            const t2167 = convertJSXIdentifier(e2716.node.name, e2716.node);
            let r1716;
            m31.types.isIdentifier(t2167) ? r1716 = t2167.name : m31.types.isLiteral(t2167) && (r1716 = t2167.value);
            return m31.types.react.isCompatTag(r1716) ? m31.types.stringLiteral(r1716) : t2167;
        }
        function buildCreateElementOpeningElementAttributes(e2916, t2321, r1815) {
            const n1032 = get1(e2916, "runtime");
            if ("automatic" !== n1032) {
                const t2222 = [];
                const n1177 = r1815.reduce(accumulateAttribute, []);
                if (d128) n1177.length && t2222.push(m31.types.objectExpression(n1177));
                else {
                    let e3014 = 0;
                    n1177.forEach((r1914, s721)=>{
                        if (m31.types.isSpreadElement(r1914)) {
                            s721 > e3014 && t2222.push(m31.types.objectExpression(n1177.slice(e3014, s721)));
                            t2222.push(r1914.argument);
                            e3014 = s721 + 1;
                        }
                    });
                    n1177.length > e3014 && t2222.push(m31.types.objectExpression(n1177.slice(e3014)));
                }
                if (!t2222.length) return m31.types.nullLiteral();
                if (1 === t2222.length) return t2222[0];
                m31.types.isObjectExpression(t2222[0]) || t2222.unshift(m31.types.objectExpression([]));
                const s621 = f132 ? m31.types.memberExpression(m31.types.identifier("Object"), m31.types.identifier("assign")) : e2916.addHelper("extends");
                return m31.types.callExpression(s621, t2222);
            }
            const s820 = [];
            const i427 = Object.create(null);
            for (const e2816 of r1815){
                const r2011 = m31.types.isJSXAttribute(e2816) && m31.types.isJSXIdentifier(e2816.name) && e2816.name.name;
                if ("automatic" === n1032 && ("__source" === r2011 || "__self" === r2011)) {
                    if (i427[r2011]) throw sourceSelfError(t2321, r2011);
                    i427[r2011] = true;
                }
                accumulateAttribute(s820, e2816);
            }
            return 1 === s820.length && m31.types.isSpreadElement(s820[0]) ? s820[0].argument : s820.length > 0 ? m31.types.objectExpression(s820) : m31.types.nullLiteral();
        }
    });
    function getSource(e3159, r2119) {
        switch(r2119){
            case "Fragment":
                return `${e3159}/${t3132 ? "jsx-dev-runtime" : "jsx-runtime"}`;
            case "jsxDEV":
                return `${e3159}/jsx-dev-runtime`;
            case "jsx":
            case "jsxs":
                return `${e3159}/jsx-runtime`;
            case "createElement":
                return e3159;
        }
    }
    function createImportLazily(e3212, t2418, r2218, n1227) {
        return ()=>{
            const s919 = getSource(n1227, r2218);
            if ((0, f38.isModule)(t2418)) {
                let n1323 = get1(e3212, `imports/${r2218}`);
                if (n1323) return m31.types.cloneNode(n1323);
                n1323 = (0, f38.addNamed)(t2418, r2218, s919, {
                    importedInterop: "uncompiled",
                    importPosition: "after"
                });
                set(e3212, `imports/${r2218}`, n1323);
                return n1323;
            }
            {
                let n1423 = get1(e3212, `requires/${s919}`);
                if (n1423) n1423 = m31.types.cloneNode(n1423);
                else {
                    n1423 = (0, f38.addNamespace)(t2418, s919, {
                        importedInterop: "uncompiled"
                    });
                    set(e3212, `requires/${s919}`, n1423);
                }
                return m31.types.memberExpression(n1423, m31.types.identifier(r2218));
            }
        };
    }
}
function toMemberExpression(e3312) {
    return e3312.split(".").map((e3411)=>m31.types.identifier(e3411)
    ).reduce((e3511, t2516)=>m31.types.memberExpression(e3511, t2516)
    );
}
function makeSource(e3611, t2615) {
    const r2315 = e3611.node.loc;
    if (!r2315) return e3611.scope.buildUndefinedNode();
    if (!t2615.fileNameIdentifier) {
        const { filename: r2414 = ""  } = t2615;
        const n1522 = e3611.scope.generateUidIdentifier("_jsxFileName");
        const s1018 = e3611.hub.getScope();
        s1018 && s1018.push({
            id: n1522,
            init: m31.types.stringLiteral(r2414)
        });
        t2615.fileNameIdentifier = n1522;
    }
    return makeTrace(m31.types.cloneNode(t2615.fileNameIdentifier), r2315.start.line, r2315.start.column);
}
function makeTrace(e3710, t2715, r2512) {
    const n1621 = null != t2715 ? m31.types.numericLiteral(t2715) : m31.types.nullLiteral();
    const s1137 = null != r2512 ? m31.types.numericLiteral(r2512 + 1) : m31.types.nullLiteral();
    const i523 = m31.types.objectProperty(m31.types.identifier("fileName"), e3710);
    const a431 = m31.types.objectProperty(m31.types.identifier("lineNumber"), n1621);
    const o349 = m31.types.objectProperty(m31.types.identifier("columnNumber"), s1137);
    return m31.types.objectExpression([
        i523,
        a431,
        o349
    ]);
}
function sourceSelfError(e3810, t2815) {
    const r2611 = `transform-react-jsx-${t2815.slice(2)}`;
    return e3810.buildCodeFrameError(`Duplicate ${t2815} prop found. You are most likely using the deprecated ${r2611} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);
}
c41.__esModule;
var r60 = {};
Object.defineProperty(r60, "__esModule", {
    value: true
});
r60.default = void 0;
var t47 = c41;
var a46 = (0, t47.default)({
    name: "transform-react-jsx",
    development: false
});
r60.default = a46;
const l42 = r60.__esModule;
const mod48 = {
    __esModule: l42,
    default: r60
};
var t48 = {};
Object.defineProperty(t48, "__esModule", {
    value: true
});
t48.default = void 0;
var r61 = c41;
var a47 = (0, r61.default)({
    name: "transform-react-jsx/development",
    development: true
});
t48.default = a47;
const l43 = t48.__esModule;
const mod49 = {
    __esModule: l43,
    default: t48
};
var t49 = "default" in mod49 ? mod49.default : mod49;
var r62 = {};
Object.defineProperty(r62, "__esModule", {
    value: true
});
Object.defineProperty(r62, "default", {
    enumerable: true,
    get: function() {
        return a48.default;
    }
});
var a48 = t49;
const u41 = r62.__esModule;
const mod50 = {
    __esModule: u41,
    default: r62
};
var s45 = "default" in mod45 ? mod45.default : mod45;
var r63 = "default" in mod27 ? mod27.default : mod27;
var i45 = "default" in mod44 ? mod44.default : mod44;
var n53 = {};
Object.defineProperty(n53, "__esModule", {
    value: true
});
n53.default = void 0;
var l44 = s45;
var o50 = r63;
var f39 = i45;
var d35 = (0, l44.declare)((e1)=>{
    e1.assertVersion(7);
    function addDisplayName(e3160, t2168) {
        const a168 = t2168.arguments[0].properties;
        let s1138 = true;
        for(let e2 = 0; e2 < a168.length; e2++){
            const t3133 = a168[e2];
            const r1133 = f39.types.toComputedKey(t3133);
            if (f39.types.isLiteral(r1133, {
                value: "displayName"
            })) {
                s1138 = false;
                break;
            }
        }
        s1138 && a168.unshift(f39.types.objectProperty(f39.types.identifier("displayName"), f39.types.stringLiteral(e3160)));
    }
    const t1187 = f39.types.buildMatchMemberExpression("React.createClass");
    const isCreateClassAddon = (e4134)=>"createReactClass" === e4134.name
    ;
    function isCreateClass(e5133) {
        if (!e5133 || !f39.types.isCallExpression(e5133)) return false;
        if (!t1187(e5133.callee) && !isCreateClassAddon(e5133.callee)) return false;
        const a239 = e5133.arguments;
        if (1 !== a239.length) return false;
        const s2123 = a239[0];
        return !!f39.types.isObjectExpression(s2123);
    }
    return {
        name: "transform-react-display-name",
        visitor: {
            ExportDefaultDeclaration ({ node: e6132  }, t4126) {
                if (isCreateClass(e6132.declaration)) {
                    const a337 = t4126.filename || "unknown";
                    let s3104 = o50.basename(a337, o50.extname(a337));
                    "index" === s3104 && (s3104 = o50.basename(o50.dirname(a337)));
                    addDisplayName(s3104, e6132.declaration);
                }
            },
            CallExpression (e7123) {
                const { node: t5124  } = e7123;
                if (!isCreateClass(t5124)) return;
                let a432;
                e7123.find(function(e8127) {
                    if (e8127.isAssignmentExpression()) a432 = e8127.node.left;
                    else if (e8127.isObjectProperty()) a432 = e8127.node.key;
                    else if (e8127.isVariableDeclarator()) a432 = e8127.node.id;
                    else if (e8127.isStatement()) return true;
                    if (a432) return true;
                });
                if (a432) {
                    f39.types.isMemberExpression(a432) && (a432 = a432.property);
                    f39.types.isIdentifier(a432) && addDisplayName(a432.name, t5124);
                }
            }
        }
    };
});
n53.default = d35;
const p36 = n53.__esModule;
const mod51 = {
    __esModule: p36,
    default: n53
};
var a49 = "default" in mod45 ? mod45.default : mod45;
var o51 = "default" in mod47 ? mod47.default : mod47;
var l45 = "default" in mod44 ? mod44.default : mod44;
var n54 = {};
Object.defineProperty(n54, "__esModule", {
    value: true
});
n54.default = void 0;
var f40 = a49;
var s46 = o51;
var c42 = l45;
const i46 = new Map([
    [
        "react",
        [
            "cloneElement",
            "createContext",
            "createElement",
            "createFactory",
            "createRef",
            "forwardRef",
            "isValidElement",
            "memo",
            "lazy"
        ]
    ],
    [
        "react-dom",
        [
            "createPortal"
        ]
    ]
]);
var u42 = (0, f40.declare)((e1)=>{
    e1.assertVersion(7);
    return {
        name: "transform-react-pure-annotations",
        visitor: {
            CallExpression (e2) {
                isReactCall(e2) && (0, s46.default)(e2);
            }
        }
    };
});
n54.default = u42;
function isReactCall(e3161) {
    if (!c42.types.isMemberExpression(e3161.node.callee)) {
        const r1134 = e3161.get("callee");
        for (const [e4135, t1188] of i46)for (const a169 of t1188)if (r1134.referencesImport(e4135, a169)) return true;
        return false;
    }
    for (const [r287, t2169] of i46){
        const a240 = e3161.get("callee.object");
        if (a240.referencesImport(r287, "default") || a240.referencesImport(r287, "*")) {
            for (const r365 of t2169)if (c42.types.isIdentifier(e3161.node.callee.property, {
                name: r365
            })) return true;
            return false;
        }
    }
    return false;
}
const d36 = n54.__esModule;
const mod52 = {
    __esModule: d36,
    default: n54
};
var o52 = "default" in mod45 ? mod45.default : mod45;
var n55 = "default" in mod48 ? mod48.default : mod48;
var p37 = "default" in mod50 ? mod50.default : mod50;
var i47 = "default" in mod51 ? mod51.default : mod51;
var s47 = "default" in mod52 ? mod52.default : mod52;
var f41 = "default" in mod35 ? mod35.default : mod35;
var m32 = {};
Object.defineProperty(m32, "__esModule", {
    value: true
});
var d37 = o52;
var c43 = n55;
var g29 = p37;
var v29 = i47;
var b26 = s47;
var _22 = f41;
function _interopDefaultLegacy(e1) {
    return e1 && "object" === typeof e1 && "default" in e1 ? e1 : {
        default: e1
    };
}
var y23 = _interopDefaultLegacy(c43);
var I20 = _interopDefaultLegacy(g29);
var S21 = _interopDefaultLegacy(v29);
var h31 = _interopDefaultLegacy(b26);
new _22.OptionValidator("@babel/preset-react");
function normalizeOptions1(e2 = {}) {
    {
        let { pragma: a170 , pragmaFrag: r1135  } = e2;
        const { pure: t1189 , throwIfNamespace: u147 = true , runtime: l144 = "classic" , importSource: o198 , useBuiltIns: n1178 , useSpread: p132  } = e2;
        if ("classic" === l144) {
            a170 = a170 || "React.createElement";
            r1135 = r1135 || "React.Fragment";
        }
        const i1132 = !!e2.development;
        return {
            development: i1132,
            importSource: o198,
            pragma: a170,
            pragmaFrag: r1135,
            pure: t1189,
            runtime: l144,
            throwIfNamespace: u147,
            useBuiltIns: n1178,
            useSpread: p132
        };
    }
}
var w20 = d37.declare((e3162, a244)=>{
    e3162.assertVersion(7);
    const { development: r288 , importSource: t2170 , pragma: u233 , pragmaFrag: l230 , pure: o265 , runtime: n2151 , throwIfNamespace: p223  } = normalizeOptions1(a244);
    return {
        plugins: [
            [
                r288 ? I20.default : y23.default,
                {
                    importSource: t2170,
                    pragma: u233,
                    pragmaFrag: l230,
                    runtime: n2151,
                    throwIfNamespace: p223,
                    pure: o265,
                    useBuiltIns: !!a244.useBuiltIns,
                    useSpread: a244.useSpread
                }
            ],
            S21.default,
            false !== o265 && h31.default
        ].filter(Boolean)
    };
});
m32.default = w20;
m32.__esModule;
var s48 = "default" in mod45 ? mod45.default : mod45;
var r64 = {};
Object.defineProperty(r64, "__esModule", {
    value: true
});
r64.default = void 0;
var t50 = s48;
function removePlugin(e1, s2124) {
    const r1136 = [];
    e1.forEach((e2, t1190)=>{
        const o199 = Array.isArray(e2) ? e2[0] : e2;
        o199 === s2124 && r1136.unshift(t1190);
    });
    for (const s1139 of r1136)e1.splice(s1139, 1);
}
var o53 = (0, t50.declare)((e3163, { isTSX: s3105 , disallowAmbiguousJSXLike: r289  })=>{
    e3163.assertVersion(7);
    return {
        name: "syntax-typescript",
        manipulateOptions (e, t2171) {
            const { plugins: o266  } = t2171;
            removePlugin(o266, "flow");
            removePlugin(o266, "jsx");
            o266.push([
                "typescript",
                {
                    disallowAmbiguousJSXLike: r289
                }
            ], "classProperties");
            o266.push("objectRestSpread");
            s3105 && o266.push("jsx");
        }
    };
});
r64.default = o53;
const i48 = r64.__esModule;
const mod53 = {
    __esModule: i48,
    default: r64
};
var t51 = "default" in mod3 ? mod3.default : mod3;
var n56 = {};
Object.defineProperty(n56, "__esModule", {
    value: true
});
var s49 = t51;
function _interopNamespace(e1) {
    if (e1 && e1.__esModule) return e1;
    var t1191 = Object.create(null);
    e1 && Object.keys(e1).forEach(function(n1179) {
        if ("default" !== n1179) {
            var s1140 = Object.getOwnPropertyDescriptor(e1, n1179);
            Object.defineProperty(t1191, n1179, s1140.get ? s1140 : {
                enumerable: true,
                get: function() {
                    return e1[n1179];
                }
            });
        }
    });
    t1191.default = e1;
    return Object.freeze(t1191);
}
var i49 = _interopNamespace(s49);
function willPathCastToBoolean(e2) {
    const t2172 = e2;
    const { node: n2152 , parentPath: s2125  } = t2172;
    if (s2125.isLogicalExpression()) {
        const { operator: e3164 , right: t3134  } = s2125.node;
        if ("&&" === e3164 || "||" === e3164 || "??" === e3164 && n2152 === t3134) return willPathCastToBoolean(s2125);
    }
    if (s2125.isSequenceExpression()) {
        const { expressions: e4136  } = s2125.node;
        return e4136[e4136.length - 1] !== n2152 || willPathCastToBoolean(s2125);
    }
    return s2125.isConditional({
        test: n2152
    }) || s2125.isUnaryExpression({
        operator: "!"
    }) || s2125.isLoop({
        test: n2152
    });
}
const { LOGICAL_OPERATORS: o54 , arrowFunctionExpression: r65 , assignmentExpression: a50 , binaryExpression: l46 , booleanLiteral: p38 , callExpression: c44 , cloneNode: u43 , conditionalExpression: d38 , identifier: h32 , isMemberExpression: f42 , isOptionalCallExpression: m33 , isOptionalMemberExpression: b27 , isUpdateExpression: g30 , logicalExpression: E19 , memberExpression: x21 , nullLiteral: O20 , optionalCallExpression: P18 , optionalMemberExpression: W15 , sequenceExpression: y24 , updateExpression: C22  } = i49;
class AssignmentMemoiser {
    constructor(){
        this._map = void 0;
        this._map = new WeakMap;
    }
    has(e5134) {
        return this._map.has(e5134);
    }
    get(e6133) {
        if (!this.has(e6133)) return;
        const t4127 = this._map.get(e6133);
        const { value: n367  } = t4127;
        t4127.count--;
        return 0 === t4127.count ? a50("=", n367, e6133) : n367;
    }
    set(e7124, t5125, n453) {
        return this._map.set(e7124, {
            count: n453,
            value: t5125
        });
    }
}
function toNonOptional(e8128, t649) {
    const { node: n544  } = e8128;
    if (b27(n544)) return x21(t649, n544.property, n544.computed);
    if (e8128.isOptionalCallExpression()) {
        const n642 = e8128.get("callee");
        if (e8128.node.optional && n642.isOptionalMemberExpression()) {
            const { object: s3106  } = n642.node;
            const i1133 = e8128.scope.maybeGenerateMemoised(s3106) || s3106;
            n642.get("object").replaceWith(a50("=", i1133, s3106));
            return c44(x21(t649, h32("call")), [
                i1133,
                ...e8128.node.arguments
            ]);
        }
        return c44(t649, e8128.node.arguments);
    }
    return e8128.node;
}
function isInDetachedTree(e9126) {
    while(e9126){
        if (e9126.isProgram()) break;
        const { parentPath: t745 , container: n740 , listKey: s432  } = e9126;
        const i276 = t745.node;
        if (s432) {
            if (n740 !== i276[s432]) return true;
        } else if (n740 !== i276) return true;
        e9126 = t745;
    }
    return false;
}
const j17 = {
    memoise () {},
    handle (e1037, t1192) {
        const { node: n836 , parent: s525 , parentPath: i338 , scope: x114  } = e1037;
        if (e1037.isOptionalMemberExpression()) {
            if (isInDetachedTree(e1037)) return;
            const o1100 = e1037.find(({ node: t937 , parent: n934  })=>b27(n934) ? n934.optional || n934.object !== t937 : !m33(n934) || t937 !== e1037.node && n934.optional || n934.callee !== t937
            );
            if (x114.path.isPattern()) {
                o1100.replaceWith(c44(r65([], o1100.node), []));
                return;
            }
            const g121 = willPathCastToBoolean(o1100);
            const y122 = o1100.parentPath;
            if (y122.isUpdateExpression({
                argument: n836
            }) || y122.isAssignmentExpression({
                left: n836
            })) throw e1037.buildCodeFrameError("can't handle assignment");
            const C115 = y122.isUnaryExpression({
                operator: "delete"
            });
            if (C115 && o1100.isOptionalMemberExpression() && o1100.get("property").isPrivateName()) throw e1037.buildCodeFrameError("can't delete a private class element");
            let j116 = e1037;
            for(;;)if (j116.isOptionalMemberExpression()) {
                if (j116.node.optional) break;
                j116 = j116.get("object");
            } else {
                if (!j116.isOptionalCallExpression()) throw new Error(`Internal error: unexpected ${j116.node.type}`);
                if (j116.node.optional) break;
                j116 = j116.get("callee");
            }
            const M113 = j116.isOptionalMemberExpression() ? "object" : "callee";
            const v46 = j116.node[M113];
            const _39 = x114.maybeGenerateMemoised(v46);
            const w45 = null != _39 ? _39 : v46;
            const N24 = i338.isOptionalCallExpression({
                callee: n836
            });
            const isOptionalCall = (e)=>N24
            ;
            const T25 = i338.isCallExpression({
                callee: n836
            });
            j116.replaceWith(toNonOptional(j116, w45));
            isOptionalCall() ? s525.optional ? i338.replaceWith(this.optionalCall(e1037, s525.arguments)) : i338.replaceWith(this.call(e1037, s525.arguments)) : T25 ? e1037.replaceWith(this.boundGet(e1037)) : e1037.replaceWith(this.get(e1037));
            let A28 = e1037.node;
            for(let t841 = e1037; t841 !== o1100;){
                const e1142 = t841.parentPath;
                if (e1142 === o1100 && isOptionalCall() && s525.optional) {
                    A28 = e1142.node;
                    break;
                }
                A28 = toNonOptional(e1142, A28);
                t841 = e1142;
            }
            let U20;
            const S48 = o1100.parentPath;
            if (f42(A28) && S48.isOptionalCallExpression({
                callee: o1100.node,
                optional: true
            })) {
                const { object: t1036  } = A28;
                U20 = e1037.scope.maybeGenerateMemoised(t1036);
                U20 && (A28.object = a50("=", U20, t1036));
            }
            let k23 = o1100;
            if (C115) {
                k23 = S48;
                A28 = S48.node;
            }
            const B25 = _39 ? a50("=", u43(w45), u43(v46)) : u43(w45);
            if (g121) {
                let e1235;
                e1235 = t1192 ? l46("!=", B25, O20()) : E19("&&", l46("!==", B25, O20()), l46("!==", u43(w45), x114.buildUndefinedNode()));
                k23.replaceWith(E19("&&", e1235, A28));
            } else {
                let e1334;
                e1334 = t1192 ? l46("==", B25, O20()) : E19("||", l46("===", B25, O20()), l46("===", u43(w45), x114.buildUndefinedNode()));
                k23.replaceWith(d38(e1334, C115 ? p38(true) : x114.buildUndefinedNode(), A28));
            }
            if (U20) {
                const e1433 = S48.node;
                S48.replaceWith(P18(W15(e1433.callee, h32("call"), false, true), [
                    u43(U20),
                    ...e1433.arguments
                ], false));
            }
        } else {
            if (g30(s525, {
                argument: n836
            })) {
                if (this.simpleSet) {
                    e1037.replaceWith(this.simpleSet(e1037));
                    return;
                }
                const { operator: t1234 , prefix: o267  } = s525;
                this.memoise(e1037, 2);
                const r1137 = x114.generateUidIdentifierBasedOnNode(n836);
                x114.push({
                    id: r1137
                });
                const l145 = [
                    a50("=", u43(r1137), this.get(e1037))
                ];
                if (o267) {
                    l145.push(C22(t1234, u43(r1137), o267));
                    const n1033 = y24(l145);
                    i338.replaceWith(this.set(e1037, n1033));
                    return;
                }
                {
                    const s622 = x114.generateUidIdentifierBasedOnNode(n836);
                    x114.push({
                        id: s622
                    });
                    l145.push(a50("=", u43(s622), C22(t1234, u43(r1137), o267)), u43(r1137));
                    const p133 = y24(l145);
                    i338.replaceWith(y24([
                        this.set(e1037, p133),
                        u43(s622)
                    ]));
                    return;
                }
            }
            if (i338.isAssignmentExpression({
                left: n836
            })) {
                if (this.simpleSet) {
                    e1037.replaceWith(this.simpleSet(e1037));
                    return;
                }
                const { operator: t1334 , right: n1180  } = i338.node;
                if ("=" === t1334) i338.replaceWith(this.set(e1037, n1180));
                else {
                    const s722 = t1334.slice(0, -1);
                    if (o54.includes(s722)) {
                        this.memoise(e1037, 1);
                        i338.replaceWith(E19(s722, this.get(e1037), this.set(e1037, n1180)));
                    } else {
                        this.memoise(e1037, 2);
                        i338.replaceWith(this.set(e1037, l46(s722, this.get(e1037), n1180)));
                    }
                }
            } else if (i338.isCallExpression({
                callee: n836
            })) i338.replaceWith(this.call(e1037, i338.node.arguments));
            else if (i338.isOptionalCallExpression({
                callee: n836
            })) {
                if (x114.path.isPattern()) {
                    i338.replaceWith(c44(r65([], i338.node), []));
                    return;
                }
                i338.replaceWith(this.optionalCall(e1037, i338.node.arguments));
            } else i338.isForXStatement({
                left: n836
            }) || i338.isObjectProperty({
                value: n836
            }) && i338.parentPath.isObjectPattern() || i338.isAssignmentPattern({
                left: n836
            }) && i338.parentPath.isObjectProperty({
                value: s525
            }) && i338.parentPath.parentPath.isObjectPattern() || i338.isArrayPattern() || i338.isAssignmentPattern({
                left: n836
            }) && i338.parentPath.isArrayPattern() || i338.isRestElement() ? e1037.replaceWith(this.destructureSet(e1037)) : i338.isTaggedTemplateExpression() ? e1037.replaceWith(this.boundGet(e1037)) : e1037.replaceWith(this.get(e1037));
        }
    }
};
function memberExpressionToFunctions(e1532, t1432, n1228) {
    e1532.traverse(t1432, Object.assign({}, j17, n1228, {
        memoiser: new AssignmentMemoiser
    }));
}
n56.default = memberExpressionToFunctions;
const M18 = n56.__esModule;
const mod54 = {
    __esModule: M18,
    default: n56
};
var a51 = "default" in mod3 ? mod3.default : mod3;
var l47 = {};
Object.defineProperty(l47, "__esModule", {
    value: true
});
l47.default = optimiseCallExpression;
var r66 = a51;
const { callExpression: s50 , identifier: t52 , isIdentifier: n57 , isSpreadElement: i50 , memberExpression: o55 , optionalCallExpression: p39 , optionalMemberExpression: u44  } = r66;
function optimiseCallExpression(e1, a175, l146, r1138) {
    return 1 === l146.length && i50(l146[0]) && n57(l146[0].argument, {
        name: "arguments"
    }) ? r1138 ? p39(u44(e1, t52("apply"), false, true), [
        a175,
        l146[0].argument
    ], false) : s50(o55(e1, t52("apply")), [
        a175,
        l146[0].argument
    ]) : r1138 ? p39(u44(e1, t52("call"), false, true), [
        a175,
        ...l146
    ], false) : s50(o55(e1, t52("call")), [
        a175,
        ...l146
    ]);
}
const f43 = l47.__esModule;
const mod55 = {
    __esModule: f43,
    default: l47
};
var o56 = "default" in mod22 ? mod22.default : mod22;
var n58 = "default" in mod54 ? mod54.default : mod54;
var a52 = "default" in mod55 ? mod55.default : mod55;
var p40 = "default" in mod19 ? mod19.default : mod19;
var u45 = "default" in mod3 ? mod3.default : mod3;
var c45 = {};
Object.defineProperty(c45, "__esModule", {
    value: true
});
c45.default = void 0;
Object.defineProperty(c45, "environmentVisitor", {
    enumerable: true,
    get: function() {
        return f44.default;
    }
});
Object.defineProperty(c45, "skipAllButComputedKey", {
    enumerable: true,
    get: function() {
        return f44.skipAllButComputedKey;
    }
});
var h33 = o56;
var l48 = n58;
var d39 = a52;
var f44 = p40;
var m34 = u45;
const { assignmentExpression: g31 , booleanLiteral: v30 , callExpression: b28 , cloneNode: S22 , identifier: R16 , memberExpression: P19 , sequenceExpression: y25 , stringLiteral: O21 , thisExpression: j18  } = m34;
function getPrototypeOfExpression(e1, t1193, s1141, i1134) {
    e1 = S22(e1);
    const r1139 = t1193 || i1134 ? e1 : P19(e1, R16("prototype"));
    return b28(s1141.addHelper("getPrototypeOf"), [
        r1139
    ]);
}
const M19 = h33.default.visitors.merge([
    f44.default,
    {
        Super (e2, t2173) {
            const { node: s2126 , parentPath: i277  } = e2;
            i277.isMemberExpression({
                object: s2126
            }) && t2173.handle(i277);
        }
    }
]);
const _23 = h33.default.visitors.merge([
    f44.default,
    {
        Scopable (e3165, { refName: t3135  }) {
            const s3107 = e3165.scope.getOwnBinding(t3135);
            s3107 && s3107.identifier.name === t3135 && e3165.scope.rename(t3135);
        }
    }
]);
const x22 = {
    memoise (e4137, t4128) {
        const { scope: s433 , node: i339  } = e4137;
        const { computed: r290 , property: o1101  } = i339;
        if (!r290) return;
        const n1181 = s433.maybeGenerateMemoised(o1101);
        n1181 && this.memoiser.set(o1101, n1181, t4128);
    },
    prop (e5135) {
        const { computed: t5126 , property: s526  } = e5135.node;
        return this.memoiser.has(s526) ? S22(this.memoiser.get(s526)) : t5126 ? S22(s526) : O21(s526.name);
    },
    get (e6134) {
        return this._get(e6134, this._getThisRefs());
    },
    _get (e7125, t650) {
        const s623 = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
        return b28(this.file.addHelper("get"), [
            t650.memo ? y25([
                t650.memo,
                s623
            ]) : s623,
            this.prop(e7125),
            t650.this
        ]);
    },
    _getThisRefs () {
        if (!this.isDerivedConstructor) return {
            this: j18()
        };
        const e8129 = this.scope.generateDeclaredUidIdentifier("thisSuper");
        return {
            memo: g31("=", e8129, j18()),
            this: S22(e8129)
        };
    },
    set (e9127, t746) {
        const s723 = this._getThisRefs();
        const i428 = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
        return b28(this.file.addHelper("set"), [
            s723.memo ? y25([
                s723.memo,
                i428
            ]) : i428,
            this.prop(e9127),
            t746,
            s723.this,
            v30(e9127.isInStrictMode())
        ]);
    },
    destructureSet (e1038) {
        throw e1038.buildCodeFrameError("Destructuring to a super field is not supported yet.");
    },
    call (e1143, t842) {
        const s821 = this._getThisRefs();
        return (0, d39.default)(this._get(e1143, s821), S22(s821.this), t842, false);
    },
    optionalCall (e1236, t938) {
        const s920 = this._getThisRefs();
        return (0, d39.default)(this._get(e1236, s920), S22(s920.this), t938, true);
    }
};
const C23 = Object.assign({}, x22, {
    prop (e1335) {
        const { property: t1037  } = e1335.node;
        return this.memoiser.has(t1037) ? S22(this.memoiser.get(t1037)) : S22(t1037);
    },
    get (e1434) {
        const { isStatic: t1194 , getSuperRef: s1019  } = this;
        const { computed: i524  } = e1434.node;
        const r366 = this.prop(e1434);
        let o268;
        if (t1194) {
            var n2153;
            o268 = null != (n2153 = s1019()) ? n2153 : P19(R16("Function"), R16("prototype"));
        } else {
            var a176;
            o268 = P19(null != (a176 = s1019()) ? a176 : R16("Object"), R16("prototype"));
        }
        return P19(o268, r366, i524);
    },
    set (e1533, t1235) {
        const { computed: s1142  } = e1533.node;
        const i620 = this.prop(e1533);
        return g31("=", P19(j18(), i620, s1142), t1235);
    },
    destructureSet (e1632) {
        const { computed: t1335  } = e1632.node;
        const s1218 = this.prop(e1632);
        return P19(j18(), s1218, t1335);
    },
    call (e1731, t1433) {
        return (0, d39.default)(this.get(e1731), j18(), t1433, false);
    },
    optionalCall (e1828, t1531) {
        return (0, d39.default)(this.get(e1828), j18(), t1531, true);
    }
});
class ReplaceSupers {
    constructor(e1927){
        var t1630;
        const s1317 = e1927.methodPath;
        this.methodPath = s1317;
        this.isDerivedConstructor = s1317.isClassMethod({
            kind: "constructor"
        }) && !!e1927.superRef;
        this.isStatic = s1317.isObjectMethod() || s1317.node.static || (null == s1317.isStaticBlock ? void 0 : s1317.isStaticBlock());
        this.isPrivateMethod = s1317.isPrivate() && s1317.isMethod();
        this.file = e1927.file;
        this.constantSuper = null != (t1630 = e1927.constantSuper) ? t1630 : e1927.isLoose;
        this.opts = e1927;
    }
    getObjectRef() {
        return S22(this.opts.objectRef || this.opts.getObjectRef());
    }
    getSuperRef() {
        return this.opts.superRef ? S22(this.opts.superRef) : this.opts.getSuperRef ? S22(this.opts.getSuperRef()) : void 0;
    }
    replace() {
        this.opts.refToPreserve && this.methodPath.traverse(_23, {
            refName: this.opts.refToPreserve.name
        });
        const e2026 = this.constantSuper ? C23 : x22;
        (0, l48.default)(this.methodPath, M19, Object.assign({
            file: this.file,
            scope: this.methodPath.scope,
            isDerivedConstructor: this.isDerivedConstructor,
            isStatic: this.isStatic,
            isPrivateMethod: this.isPrivateMethod,
            getObjectRef: this.getObjectRef.bind(this),
            getSuperRef: this.getSuperRef.bind(this),
            boundGet: e2026.get
        }, e2026));
    }
}
c45.default = ReplaceSupers;
const E20 = c45.__esModule, T18 = c45.environmentVisitor, k17 = c45.skipAllButComputedKey;
const mod56 = {
    __esModule: E20,
    default: c45,
    environmentVisitor: T18,
    skipAllButComputedKey: k17
};
var l49 = {};
Object.defineProperty(l49, "__esModule", {
    value: true
});
l49.assertFieldTransformed = assertFieldTransformed;
function assertFieldTransformed(e1) {
    if (e1.node.declare) throw e1.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-proposal-class-properties\n - @babel/plugin-proposal-private-methods\n - @babel/plugin-proposal-decorators");
}
var d40 = "default" in mod44 ? mod44.default : mod44;
var c46 = "default" in mod56 ? mod56.default : mod56;
var p41 = "default" in mod19 ? mod19.default : mod19;
var u46 = "default" in mod54 ? mod54.default : mod54;
var f45 = "default" in mod55 ? mod55.default : mod55;
var b29 = "default" in mod47 ? mod47.default : mod47;
var m35 = {};
Object.defineProperty(m35, "__esModule", {
    value: true
});
m35.buildFieldsInitNodes = buildFieldsInitNodes;
m35.buildPrivateNamesMap = buildPrivateNamesMap;
m35.buildPrivateNamesNodes = buildPrivateNamesNodes;
m35.transformPrivateNamesUsage = transformPrivateNamesUsage;
var y26 = d40;
var h34 = c46;
var v31 = p41;
var g32 = u46;
var P20 = f45;
var N18 = b29;
var I21 = l49;
function buildPrivateNamesMap(e2) {
    const t1195 = new Map;
    for (const s1143 of e2)if (s1143.isPrivate()) {
        const { name: e3166  } = s1143.node.key.id;
        const i1135 = t1195.has(e3166) ? t1195.get(e3166) : {
            id: s1143.scope.generateUidIdentifier(e3166),
            static: s1143.node.static,
            method: !s1143.isProperty()
        };
        s1143.isClassPrivateMethod() && ("get" === s1143.node.kind ? i1135.getId = s1143.scope.generateUidIdentifier(`get_${e3166}`) : "set" === s1143.node.kind ? i1135.setId = s1143.scope.generateUidIdentifier(`set_${e3166}`) : "method" === s1143.node.kind && (i1135.methodId = s1143.scope.generateUidIdentifier(e3166)));
        t1195.set(e3166, i1135);
    }
    return t1195;
}
function buildPrivateNamesNodes(e4138, t2174, s2127) {
    const i278 = [];
    for (const [n1182, r1140] of e4138){
        const { static: e5136 , method: a177 , getId: o1102 , setId: l147  } = r1140;
        const d129 = o1102 || l147;
        const c150 = y26.types.cloneNode(r1140.id);
        let p134;
        t2174 ? p134 = y26.types.callExpression(s2127.addHelper("classPrivateFieldLooseKey"), [
            y26.types.stringLiteral(n1182)
        ]) : e5136 || (p134 = y26.types.newExpression(y26.types.identifier(!a177 || d129 ? "WeakMap" : "WeakSet"), []));
        if (p134) {
            (0, N18.default)(p134);
            i278.push(y26.template.statement.ast`var ${c150} = ${p134}`);
        }
    }
    return i278;
}
function privateNameVisitorFactory(e6135) {
    const t3136 = Object.assign({}, e6135, {
        Class (e8130) {
            const { privateNamesMap: i340  } = this;
            const n2154 = e8130.get("body.body");
            const r295 = new Map(i340);
            const a245 = [];
            for (const e7126 of n2154){
                if (!e7126.isPrivate()) continue;
                const { name: t4129  } = e7126.node.key.id;
                r295.delete(t4129);
                a245.push(t4129);
            }
            if (a245.length) {
                e8130.get("body").traverse(s3108, Object.assign({}, this, {
                    redeclared: a245
                }));
                e8130.traverse(t3136, Object.assign({}, this, {
                    privateNamesMap: r295
                }));
                e8130.skipKey("body");
            }
        }
    });
    const s3108 = y26.traverse.visitors.merge([
        Object.assign({}, e6135),
        v31.default
    ]);
    return t3136;
}
const E21 = privateNameVisitorFactory({
    PrivateName (e9128, { noDocumentAll: t5127  }) {
        const { privateNamesMap: s434 , redeclared: i429  } = this;
        const { node: n368 , parentPath: r367  } = e9128;
        if (!r367.isMemberExpression({
            property: n368
        }) && !r367.isOptionalMemberExpression({
            property: n368
        })) return;
        const { name: a338  } = n368.id;
        s434.has(a338) && (i429 && i429.includes(a338) || this.handle(r367, t5127));
    }
});
function unshadow(e1039, t651, s527) {
    while(null != (i525 = t651) && i525.hasBinding(e1039) && !t651.bindingIdentifierEquals(e1039, s527)){
        var i525;
        t651.rename(e1039);
        t651 = t651.parent;
    }
}
const F20 = privateNameVisitorFactory({
    BinaryExpression (e1144) {
        const { operator: t747 , left: s624 , right: i621  } = e1144.node;
        if ("in" !== t747) return;
        if (!y26.types.isPrivateName(s624)) return;
        const { privateFieldsAsProperties: n454 , privateNamesMap: r457 , redeclared: a433  } = this;
        const { name: o269  } = s624.id;
        if (!r457.has(o269)) return;
        if (a433 && a433.includes(o269)) return;
        unshadow(this.classRef.name, e1144.scope, this.innerBinding);
        if (n454) {
            const { id: t843  } = r457.get(o269);
            e1144.replaceWith(y26.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${i621}, ${y26.types.cloneNode(t843)})
      `);
            return;
        }
        const { id: l231 , static: d219  } = r457.get(o269);
        d219 ? e1144.replaceWith(y26.template.expression.ast`${i621} === ${this.classRef}`) : e1144.replaceWith(y26.template.expression.ast`${y26.types.cloneNode(l231)}.has(${i621})`);
    }
});
const k18 = {
    memoise (e1237, t939) {
        const { scope: s724  } = e1237;
        const { object: i718  } = e1237.node;
        const n545 = s724.maybeGenerateMemoised(i718);
        n545 && this.memoiser.set(i718, n545, t939);
    },
    receiver (e1336) {
        const { object: t1038  } = e1336.node;
        return this.memoiser.has(t1038) ? y26.types.cloneNode(this.memoiser.get(t1038)) : y26.types.cloneNode(t1038);
    },
    get (e1435) {
        const { classRef: t1196 , privateNamesMap: s822 , file: i817 , innerBinding: n643  } = this;
        const { name: r545  } = e1435.node.property.id;
        const { id: a524 , static: o350 , method: l322 , methodId: d317 , getId: c225 , setId: p224  } = s822.get(r545);
        const u148 = c225 || p224;
        if (o350) {
            const s921 = l322 && !u148 ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
            unshadow(t1196.name, e1435.scope, n643);
            return y26.types.callExpression(i817.addHelper(s921), [
                this.receiver(e1435),
                y26.types.cloneNode(t1196),
                y26.types.cloneNode(a524)
            ]);
        }
        if (l322) {
            if (u148) {
                if (!c225 && p224) {
                    if (i817.availableHelper("writeOnlyError")) return y26.types.sequenceExpression([
                        this.receiver(e1435),
                        y26.types.callExpression(i817.addHelper("writeOnlyError"), [
                            y26.types.stringLiteral(`#${r545}`)
                        ])
                    ]);
                    console.warn("@babel/helpers is outdated, update it to silence this warning.");
                }
                return y26.types.callExpression(i817.addHelper("classPrivateFieldGet"), [
                    this.receiver(e1435),
                    y26.types.cloneNode(a524)
                ]);
            }
            return y26.types.callExpression(i817.addHelper("classPrivateMethodGet"), [
                this.receiver(e1435),
                y26.types.cloneNode(a524),
                y26.types.cloneNode(d317)
            ]);
        }
        return y26.types.callExpression(i817.addHelper("classPrivateFieldGet"), [
            this.receiver(e1435),
            y26.types.cloneNode(a524)
        ]);
    },
    boundGet (e1534) {
        this.memoise(e1534, 1);
        return y26.types.callExpression(y26.types.memberExpression(this.get(e1534), y26.types.identifier("bind")), [
            this.receiver(e1534)
        ]);
    },
    set (e1633, t1236) {
        const { classRef: s1020 , privateNamesMap: i917 , file: n741  } = this;
        const { name: r640  } = e1633.node.property.id;
        const { id: a619 , static: o435 , method: l421 , setId: d416 , getId: c321  } = i917.get(r640);
        const p320 = c321 || d416;
        if (o435) {
            const i1016 = l421 && !p320 ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
            return y26.types.callExpression(n741.addHelper(i1016), [
                this.receiver(e1633),
                y26.types.cloneNode(s1020),
                y26.types.cloneNode(a619),
                t1236
            ]);
        }
        return l421 ? d416 ? y26.types.callExpression(n741.addHelper("classPrivateFieldSet"), [
            this.receiver(e1633),
            y26.types.cloneNode(a619),
            t1236
        ]) : y26.types.sequenceExpression([
            this.receiver(e1633),
            t1236,
            y26.types.callExpression(n741.addHelper("readOnlyError"), [
                y26.types.stringLiteral(`#${r640}`)
            ])
        ]) : y26.types.callExpression(n741.addHelper("classPrivateFieldSet"), [
            this.receiver(e1633),
            y26.types.cloneNode(a619),
            t1236
        ]);
    },
    destructureSet (e1732) {
        const { classRef: t1336 , privateNamesMap: s1144 , file: i1136  } = this;
        const { name: n837  } = e1732.node.property.id;
        const { id: r734 , static: a719  } = s1144.get(n837);
        if (a719) {
            try {
                var o = i1136.addHelper("classStaticPrivateFieldDestructureSet");
            } catch (e) {
                throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
            }
            return y26.types.memberExpression(y26.types.callExpression(o, [
                this.receiver(e1732),
                y26.types.cloneNode(t1336),
                y26.types.cloneNode(r734)
            ]), y26.types.identifier("value"));
        }
        return y26.types.memberExpression(y26.types.callExpression(i1136.addHelper("classPrivateFieldDestructureSet"), [
            this.receiver(e1732),
            y26.types.cloneNode(r734)
        ]), y26.types.identifier("value"));
    },
    call (e1829, t1434) {
        this.memoise(e1829, 1);
        return (0, P20.default)(this.get(e1829), this.receiver(e1829), t1434, false);
    },
    optionalCall (e1928, t1532) {
        this.memoise(e1928, 1);
        return (0, P20.default)(this.get(e1928), this.receiver(e1928), t1532, true);
    }
};
const $18 = {
    get (e2027) {
        const { privateNamesMap: t1631 , file: s1219  } = this;
        const { object: i1216  } = e2027.node;
        const { name: n935  } = e2027.node.property.id;
        return y26.template.expression`BASE(REF, PROP)[PROP]`({
            BASE: s1219.addHelper("classPrivateFieldLooseBase"),
            REF: y26.types.cloneNode(i1216),
            PROP: y26.types.cloneNode(t1631.get(n935).id)
        });
    },
    set () {
        throw new Error("private name handler with loose = true don't need set()");
    },
    boundGet (e2122) {
        return y26.types.callExpression(y26.types.memberExpression(this.get(e2122), y26.types.identifier("bind")), [
            y26.types.cloneNode(e2122.node.object)
        ]);
    },
    simpleSet (e2221) {
        return this.get(e2221);
    },
    destructureSet (e2320) {
        return this.get(e2320);
    },
    call (e2420, t1726) {
        return y26.types.callExpression(this.get(e2420), t1726);
    },
    optionalCall (e2520, t1824) {
        return y26.types.optionalCallExpression(this.get(e2520), t1824, true);
    }
};
function transformPrivateNamesUsage(e2619, t1924, s1318, { privateFieldsAsProperties: i1316 , noDocumentAll: n1034 , innerBinding: r832  }, a811) {
    if (!s1318.size) return;
    const o = t1924.get("body");
    const l515 = i1316 ? $18 : k18;
    (0, g32.default)(o, E21, Object.assign({
        privateNamesMap: s1318,
        classRef: e2619,
        file: a811
    }, l515, {
        noDocumentAll: n1034,
        innerBinding: r832
    }));
    o.traverse(F20, {
        privateNamesMap: s1318,
        classRef: e2619,
        file: a811,
        privateFieldsAsProperties: i1316,
        innerBinding: r832
    });
}
function buildPrivateFieldInitLoose(e2717, t2023, s1417) {
    const { id: i1416  } = s1417.get(t2023.node.key.id.name);
    const n1183 = t2023.node.value || t2023.scope.buildUndefinedNode();
    return y26.template.statement.ast`
    Object.defineProperty(${e2717}, ${y26.types.cloneNode(i1416)}, {
      // configurable is false by default
      // enumerable is false by default
      writable: true,
      value: ${n1183}
    });
  `;
}
function buildPrivateInstanceFieldInitSpec(e2817, t2175, s1515, i1516) {
    const { id: n1229  } = s1515.get(t2175.node.key.id.name);
    const r927 = t2175.node.value || t2175.scope.buildUndefinedNode();
    if (!i1516.availableHelper("classPrivateFieldInitSpec")) return y26.template.statement.ast`${y26.types.cloneNode(n1229)}.set(${e2817}, {
        // configurable is always false for private elements
        // enumerable is always false for private elements
        writable: true,
        value: ${r927},
      })`;
    const a910 = i1516.addHelper("classPrivateFieldInitSpec");
    return y26.template.statement.ast`${a910}(
    ${y26.types.thisExpression()},
    ${y26.types.cloneNode(n1229)},
    {
      writable: true,
      value: ${r927}
    },
  )`;
}
function buildPrivateStaticFieldInitSpec(e2917, t2223) {
    const s1615 = t2223.get(e2917.node.key.id.name);
    const { id: i1616 , getId: n1324 , setId: r1025 , initAdded: a1010  } = s1615;
    const o = n1324 || r1025;
    if (!e2917.isProperty() && (a1010 || !o)) return;
    if (o) {
        t2223.set(e2917.node.key.id.name, Object.assign({}, s1615, {
            initAdded: true
        }));
        return y26.template.statement.ast`
      var ${y26.types.cloneNode(i1616)} = {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${n1324 ? n1324.name : e2917.scope.buildUndefinedNode()},
        set: ${r1025 ? r1025.name : e2917.scope.buildUndefinedNode()}
      }
    `;
    }
    const l615 = e2917.node.value || e2917.scope.buildUndefinedNode();
    return y26.template.statement.ast`
    var ${y26.types.cloneNode(i1616)} = {
      // configurable is false by default
      // enumerable is false by default
      writable: true,
      value: ${l615}
    };
  `;
}
function buildPrivateMethodInitLoose(e3015, t2322, s1715) {
    const i1716 = s1715.get(t2322.node.key.id.name);
    const { methodId: n1424 , id: r1141 , getId: a1119 , setId: o , initAdded: l712  } = i1716;
    if (l712) return;
    if (n1424) return y26.template.statement.ast`
        Object.defineProperty(${e3015}, ${r1141}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${n1424.name}
        });
      `;
    const d511 = a1119 || o;
    if (d511) {
        s1715.set(t2322.node.key.id.name, Object.assign({}, i1716, {
            initAdded: true
        }));
        return y26.template.statement.ast`
      Object.defineProperty(${e3015}, ${r1141}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${a1119 ? a1119.name : t2322.scope.buildUndefinedNode()},
        set: ${o ? o.name : t2322.scope.buildUndefinedNode()}
      });
    `;
    }
}
function buildPrivateInstanceMethodInitSpec(e3167, t2419, s1815, i1816) {
    const n1523 = s1815.get(t2419.node.key.id.name);
    const { getId: r1223 , setId: a1215 , initAdded: o  } = n1523;
    if (o) return;
    const l88 = r1223 || a1215;
    return l88 ? buildPrivateAccessorInitialization(e3167, t2419, s1815, i1816) : buildPrivateInstanceMethodInitalization(e3167, t2419, s1815, i1816);
}
function buildPrivateAccessorInitialization(e3213, t2517, s1915, i1916) {
    const n1622 = s1915.get(t2517.node.key.id.name);
    const { id: r1320 , getId: a1314 , setId: o  } = n1622;
    s1915.set(t2517.node.key.id.name, Object.assign({}, n1622, {
        initAdded: true
    }));
    if (!i1916.availableHelper("classPrivateFieldInitSpec")) return y26.template.statement.ast`
      ${r1320}.set(${e3213}, {
        get: ${a1314 ? a1314.name : t2517.scope.buildUndefinedNode()},
        set: ${o ? o.name : t2517.scope.buildUndefinedNode()}
      });
    `;
    const l96 = i1916.addHelper("classPrivateFieldInitSpec");
    return y26.template.statement.ast`${l96}(
    ${y26.types.thisExpression()},
    ${y26.types.cloneNode(r1320)},
    {
      get: ${a1314 ? a1314.name : t2517.scope.buildUndefinedNode()},
      set: ${o ? o.name : t2517.scope.buildUndefinedNode()}
    },
  )`;
}
function buildPrivateInstanceMethodInitalization(e3313, t2616, s2015, i2015) {
    const n1721 = s2015.get(t2616.node.key.id.name);
    const { id: r1420  } = n1721;
    if (!i2015.availableHelper("classPrivateMethodInitSpec")) return y26.template.statement.ast`${r1420}.add(${e3313})`;
    const a1413 = i2015.addHelper("classPrivateMethodInitSpec");
    return y26.template.statement.ast`${a1413}(
    ${y26.types.thisExpression()},
    ${y26.types.cloneNode(r1420)}
  )`;
}
function buildPublicFieldInitLoose(e3412, t2716) {
    const { key: s2128 , computed: i2114  } = t2716.node;
    const n1821 = t2716.node.value || t2716.scope.buildUndefinedNode();
    return y26.types.expressionStatement(y26.types.assignmentExpression("=", y26.types.memberExpression(e3412, s2128, i2114 || y26.types.isLiteral(s2128)), n1821));
}
function buildPublicFieldInitSpec(e3512, t2816, s2214) {
    const { key: i2215 , computed: n1920  } = t2816.node;
    const r1518 = t2816.node.value || t2816.scope.buildUndefinedNode();
    return y26.types.expressionStatement(y26.types.callExpression(s2214.addHelper("defineProperty"), [
        e3512,
        n1920 || y26.types.isLiteral(i2215) ? i2215 : y26.types.stringLiteral(i2215.name),
        r1518
    ]));
}
function buildPrivateStaticMethodInitLoose(e3612, t2915, s, i2315) {
    const n2020 = i2315.get(t2915.node.key.id.name);
    const { id: r1617 , methodId: a1511 , getId: o , setId: l105 , initAdded: d65  } = n2020;
    if (d65) return;
    const c419 = o || l105;
    if (c419) {
        i2315.set(t2915.node.key.id.name, Object.assign({}, n2020, {
            initAdded: true
        }));
        return y26.template.statement.ast`
      Object.defineProperty(${e3612}, ${r1617}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${o ? o.name : t2915.scope.buildUndefinedNode()},
        set: ${l105 ? l105.name : t2915.scope.buildUndefinedNode()}
      })
    `;
    }
    return y26.template.statement.ast`
    Object.defineProperty(${e3612}, ${r1617}, {
      // configurable is false by default
      // enumerable is false by default
      // writable is false by default
      value: ${a1511.name}
    });
  `;
}
function buildPrivateMethodDeclaration(e3711, t3015, s2314 = false) {
    const i2414 = t3015.get(e3711.node.key.id.name);
    const { id: n2155 , methodId: r1717 , getId: a1610 , setId: o , getterDeclared: l1114 , setterDeclared: d74 , static: c514  } = i2414;
    const { params: p412 , body: u234 , generator: f133 , async: b120  } = e3711.node;
    const m126 = a1610 && !l1114 && 0 === p412.length;
    const h124 = o && !d74 && p412.length > 0;
    let v121 = r1717;
    if (m126) {
        t3015.set(e3711.node.key.id.name, Object.assign({}, i2414, {
            getterDeclared: true
        }));
        v121 = a1610;
    } else if (h124) {
        t3015.set(e3711.node.key.id.name, Object.assign({}, i2414, {
            setterDeclared: true
        }));
        v121 = o;
    } else c514 && !s2314 && (v121 = n2155);
    return y26.types.functionDeclaration(y26.types.cloneNode(v121), p412, u234, f133, b120);
}
const C24 = y26.traverse.visitors.merge([
    {
        ThisExpression (e3811, t3137) {
            t3137.needsClassRef = true;
            e3811.replaceWith(y26.types.cloneNode(t3137.classRef));
        },
        MetaProperty (e39) {
            const t3214 = e39.get("meta");
            const s2414 = e39.get("property");
            const { scope: i2513  } = e39;
            t3214.isIdentifier({
                name: "new"
            }) && s2414.isIdentifier({
                name: "target"
            }) && e39.replaceWith(i2513.buildUndefinedNode());
        }
    },
    v31.default
]);
const x23 = {
    ReferencedIdentifier (e40, t3314) {
        if (e40.scope.bindingIdentifierEquals(e40.node.name, t3314.innerBinding)) {
            t3314.needsClassRef = true;
            e40.node.name = t3314.classRef.name;
        }
    }
};
function replaceThisContext(e41, t3414, s2514, i2611, n2219, r1816, a178) {
    var o;
    const l1211 = {
        classRef: t3414,
        needsClassRef: false,
        innerBinding: a178
    };
    const d83 = new h34.default({
        methodPath: e41,
        constantSuper: r1816,
        file: i2611,
        refToPreserve: t3414,
        getSuperRef: s2514,
        getObjectRef () {
            l1211.needsClassRef = true;
            return null != y26.types.isStaticBlock && y26.types.isStaticBlock(e41.node) || e41.node.static ? t3414 : y26.types.memberExpression(t3414, y26.types.identifier("prototype"));
        }
    });
    d83.replace();
    (n2219 || e41.isProperty()) && e41.traverse(C24, l1211);
    null != (o = l1211.classRef) && o.name && l1211.classRef.name !== (null == a178 ? void 0 : a178.name) && e41.traverse(x23, l1211);
    return l1211.needsClassRef;
}
function isNameOrLength({ key: e42 , computed: t3514  }) {
    return "Identifier" === e42.type ? !t3514 && ("name" === e42.name || "length" === e42.name) : "StringLiteral" === e42.type && ("name" === e42.value || "length" === e42.value);
}
function buildFieldsInitNodes(e43, t3713, s2613, i279, n2319, r1915, a185, o, l1311) {
    let d92 = false;
    let c613;
    const p58 = [];
    const u322 = [];
    const f223 = [];
    const b215 = y26.types.isIdentifier(t3713) ? ()=>t3713
     : ()=>{
        var e44;
        null != (e44 = c613) ? e44 : c613 = s2613[0].scope.generateUidIdentifierBasedOnNode(t3713);
        return c613;
    };
    for (const t3614 of s2613){
        t3614.isClassProperty() && I21.assertFieldTransformed(t3614);
        const s2712 = !(null != y26.types.isStaticBlock && y26.types.isStaticBlock(t3614.node)) && t3614.node.static;
        const c77 = !s2712;
        const m219 = t3614.isPrivate();
        const h220 = !m219;
        const v218 = t3614.isProperty();
        const g122 = !v218;
        const P116 = null == t3614.isStaticBlock ? void 0 : t3614.isStaticBlock();
        if (s2712 || g122 && m219 || P116) {
            const s2812 = replaceThisContext(t3614, e43, b215, n2319, P116, o, l1311);
            d92 = d92 || s2812;
        }
        switch(true){
            case P116:
                {
                    const e45 = t3614.node.body;
                    1 === e45.length && y26.types.isExpressionStatement(e45[0]) ? p58.push(e45[0]) : p58.push(y26.template.statement.ast`(() => { ${e45} })()`);
                    break;
                }
            case s2712 && m219 && v218 && a185:
                d92 = true;
                p58.push(buildPrivateFieldInitLoose(y26.types.cloneNode(e43), t3614, i279));
                break;
            case s2712 && m219 && v218 && !a185:
                d92 = true;
                p58.push(buildPrivateStaticFieldInitSpec(t3614, i279));
                break;
            case s2712 && h220 && v218 && r1915:
                if (!isNameOrLength(t3614.node)) {
                    d92 = true;
                    p58.push(buildPublicFieldInitLoose(y26.types.cloneNode(e43), t3614));
                    break;
                }
            case s2712 && h220 && v218 && !r1915:
                d92 = true;
                p58.push(buildPublicFieldInitSpec(y26.types.cloneNode(e43), t3614, n2319));
                break;
            case c77 && m219 && v218 && a185:
                u322.push(buildPrivateFieldInitLoose(y26.types.thisExpression(), t3614, i279));
                break;
            case c77 && m219 && v218 && !a185:
                u322.push(buildPrivateInstanceFieldInitSpec(y26.types.thisExpression(), t3614, i279, n2319));
                break;
            case c77 && m219 && g122 && a185:
                u322.unshift(buildPrivateMethodInitLoose(y26.types.thisExpression(), t3614, i279));
                f223.push(buildPrivateMethodDeclaration(t3614, i279, a185));
                break;
            case c77 && m219 && g122 && !a185:
                u322.unshift(buildPrivateInstanceMethodInitSpec(y26.types.thisExpression(), t3614, i279, n2319));
                f223.push(buildPrivateMethodDeclaration(t3614, i279, a185));
                break;
            case s2712 && m219 && g122 && !a185:
                d92 = true;
                p58.unshift(buildPrivateStaticFieldInitSpec(t3614, i279));
                f223.push(buildPrivateMethodDeclaration(t3614, i279, a185));
                break;
            case s2712 && m219 && g122 && a185:
                d92 = true;
                p58.unshift(buildPrivateStaticMethodInitLoose(y26.types.cloneNode(e43), t3614, n2319, i279));
                f223.push(buildPrivateMethodDeclaration(t3614, i279, a185));
                break;
            case c77 && h220 && v218 && r1915:
                u322.push(buildPublicFieldInitLoose(y26.types.thisExpression(), t3614));
                break;
            case c77 && h220 && v218 && !r1915:
                u322.push(buildPublicFieldInitSpec(y26.types.thisExpression(), t3614, n2319));
                break;
            default:
                throw new Error("Unreachable.");
        }
    }
    return {
        staticNodes: p58.filter(Boolean),
        instanceNodes: u322.filter(Boolean),
        pureStaticNodes: f223.filter(Boolean),
        wrapClass (t3813) {
            for (const e46 of s2613)e46.remove();
            if (c613) {
                t3813.scope.push({
                    id: y26.types.cloneNode(c613)
                });
                t3813.set("superClass", y26.types.assignmentExpression("=", c613, t3813.node.superClass));
            }
            if (!d92) return t3813;
            if (t3813.isClassExpression()) {
                t3813.scope.push({
                    id: e43
                });
                t3813.replaceWith(y26.types.assignmentExpression("=", y26.types.cloneNode(e43), t3813.node));
            } else t3813.node.id || (t3813.node.id = e43);
            return t3813;
        }
    };
}
var S23 = "default" in mod44 ? mod44.default : mod44;
var w21 = "default" in mod56 ? mod56.default : mod56;
var M20 = "default" in mod21 ? mod21.default : mod21;
var D17 = {};
Object.defineProperty(D17, "__esModule", {
    value: true
});
D17.buildDecoratedClass = buildDecoratedClass;
D17.hasDecorators = hasDecorators;
D17.hasOwnDecorators = hasOwnDecorators;
var O22 = S23;
var j19 = w21;
var B17 = M20;
function hasOwnDecorators(e47) {
    return !!(e47.decorators && e47.decorators.length);
}
function hasDecorators(e48) {
    return hasOwnDecorators(e48) || e48.body.body.some(hasOwnDecorators);
}
function prop(e49, t3913) {
    return t3913 ? O22.types.objectProperty(O22.types.identifier(e49), t3913) : null;
}
function method(e50, t4011) {
    return O22.types.objectMethod("method", O22.types.identifier(e50), [], O22.types.blockStatement(t4011));
}
function takeDecorators(e51) {
    let t4130;
    e51.decorators && e51.decorators.length > 0 && (t4130 = O22.types.arrayExpression(e51.decorators.map((e52)=>e52.expression
    )));
    e51.decorators = void 0;
    return t4130;
}
function getKey(e53) {
    return e53.computed ? e53.key : O22.types.isIdentifier(e53.key) ? O22.types.stringLiteral(e53.key.name) : O22.types.stringLiteral(String(e53.key.value));
}
function extractElementDescriptor(e54, t4211, s2912) {
    const { node: i284 , scope: n2419  } = s2912;
    const r2012 = s2912.isClassMethod();
    if (s2912.isPrivate()) throw s2912.buildCodeFrameError(`Private ${r2012 ? "methods" : "fields"} in decorated classes are not supported yet.`);
    new j19.default({
        methodPath: s2912,
        objectRef: e54,
        superRef: t4211,
        file: this,
        refToPreserve: e54
    }).replace();
    const a195 = [
        prop("kind", O22.types.stringLiteral(O22.types.isClassMethod(i284) ? i284.kind : "field")),
        prop("decorators", takeDecorators(i284)),
        prop("static", !(null != O22.types.isStaticBlock && O22.types.isStaticBlock(i284)) && i284.static && O22.types.booleanLiteral(true)),
        prop("key", getKey(i284))
    ].filter(Boolean);
    if (O22.types.isClassMethod(i284)) {
        const e55 = i284.computed ? null : i284.key;
        O22.types.toExpression(i284);
        a195.push(prop("value", (0, B17.default)({
            node: i284,
            id: e55,
            scope: n2419
        }) || i284));
    } else O22.types.isClassProperty(i284) && i284.value ? a195.push(method("value", O22.template.statements.ast`return ${i284.value}`)) : a195.push(prop("value", n2419.buildUndefinedNode()));
    s2912.remove();
    return O22.types.objectExpression(a195);
}
function addDecorateHelper(e56) {
    try {
        return e56.addHelper("decorate");
    } catch (e57) {
        "BABEL_HELPER_UNKNOWN" === e57.code && (e57.message += "\n  '@babel/plugin-transform-decorators' in non-legacy mode requires '@babel/core' version ^7.0.2 and you appear to be using an older version.");
        throw e57;
    }
}
function buildDecoratedClass(e58, t4310, s3012, i294) {
    const { node: n2518 , scope: r2120  } = t4310;
    const a205 = r2120.generateUidIdentifier("initialize");
    const o = n2518.id && t4310.isDeclaration();
    const l148 = t4310.isInStrictMode();
    const { superClass: d101  } = n2518;
    n2518.type = "ClassDeclaration";
    n2518.id || (n2518.id = O22.types.cloneNode(e58));
    let c86;
    if (d101) {
        c86 = r2120.generateUidIdentifierBasedOnNode(n2518.superClass, "super");
        n2518.superClass = c86;
    }
    const p65 = takeDecorators(n2518);
    const u421 = O22.types.arrayExpression(s3012.filter((e59)=>!e59.node.abstract
    ).map(extractElementDescriptor.bind(i294, n2518.id, c86)));
    const f319 = O22.template.expression.ast`
    ${addDecorateHelper(i294)}(
      ${p65 || O22.types.nullLiteral()},
      function (${a205}, ${d101 ? O22.types.cloneNode(c86) : null}) {
        ${n2518}
        return { F: ${O22.types.cloneNode(n2518.id)}, d: ${u421} };
      },
      ${d101}
    )
  `;
    l148 || f319.arguments[1].body.directives.push(O22.types.directive(O22.types.directiveLiteral("use strict")));
    let b312 = f319;
    let m316 = "arguments.1.body.body.0";
    if (o) {
        b312 = O22.template.statement.ast`let ${e58} = ${f319}`;
        m316 = "declarations.0.init." + m316;
    }
    return {
        instanceNodes: [
            O22.template.statement.ast`${O22.types.cloneNode(a205)}(this)`
        ],
        wrapClass (e60) {
            e60.replaceWith(b312);
            return e60.get(m316);
        }
    };
}
var L16 = "default" in mod44 ? mod44.default : mod44;
var U18 = "default" in mod19 ? mod19.default : mod19;
var A19 = {};
Object.defineProperty(A19, "__esModule", {
    value: true
});
A19.extractComputedKeys = extractComputedKeys;
A19.injectInitialization = injectInitialization$1;
var R17 = L16;
var _24 = U18;
const T19 = R17.traverse.visitors.merge([
    {
        Super (e61) {
            const { node: t4410 , parentPath: s3112  } = e61;
            s3112.isCallExpression({
                callee: t4410
            }) && this.push(s3112);
        }
    },
    _24.default
]);
const H16 = {
    "TSTypeAnnotation|TypeAnnotation" (e62) {
        e62.skip();
    },
    ReferencedIdentifier (e63) {
        if (this.scope.hasOwnBinding(e63.node.name)) {
            this.scope.rename(e63.node.name);
            e63.skip();
        }
    }
};
function handleClassTDZ(e64, t4510) {
    if (t4510.classBinding && t4510.classBinding === e64.scope.getBinding(e64.node.name)) {
        const s3212 = t4510.file.addHelper("classNameTDZError");
        const i304 = R17.types.callExpression(s3212, [
            R17.types.stringLiteral(e64.node.name)
        ]);
        e64.replaceWith(R17.types.sequenceExpression([
            i304,
            e64.node
        ]));
        e64.skip();
    }
}
const z14 = {
    ReferencedIdentifier: handleClassTDZ
};
function injectInitialization$1(e65, t4610, s3311, i3113) {
    if (!s3311.length) return;
    const n2618 = !!e65.node.superClass;
    if (!t4610) {
        const s3411 = R17.types.classMethod("constructor", R17.types.identifier("constructor"), [], R17.types.blockStatement([]));
        if (n2618) {
            s3411.params = [
                R17.types.restElement(R17.types.identifier("args"))
            ];
            s3411.body.body.push(R17.template.statement.ast`super(...args)`);
        }
        [t4610] = e65.get("body").unshiftContainer("body", s3411);
    }
    i3113 && i3113(H16, {
        scope: t4610.scope
    });
    if (n2618) {
        const e66 = [];
        t4610.traverse(T19, e66);
        let i3211 = true;
        for (const t4710 of e66)if (i3211) {
            t4710.insertAfter(s3311);
            i3211 = false;
        } else t4710.insertAfter(s3311.map((e67)=>R17.types.cloneNode(e67)
        ));
    } else t4610.get("body").unshiftContainer("body", s3311);
}
function extractComputedKeys(e, t4810, s3511, i3310) {
    const n2718 = [];
    const r2219 = {
        classBinding: t4810.node.id && t4810.scope.getBinding(t4810.node.id.name),
        file: i3310
    };
    for (const e68 of s3511){
        const s3611 = e68.get("key");
        s3611.isReferencedIdentifier() ? handleClassTDZ(s3611, r2219) : s3611.traverse(z14, r2219);
        const i344 = e68.node;
        if (!s3611.isConstantExpression()) {
            const e69 = t4810.scope.generateUidIdentifierBasedOnNode(i344.key);
            t4810.scope.push({
                id: e69,
                kind: "let"
            });
            n2718.push(R17.types.expressionStatement(R17.types.assignmentExpression("=", R17.types.cloneNode(e69), i344.key)));
            i344.key = R17.types.cloneNode(e69);
        }
    }
    return n2718;
}
var K14 = {};
Object.defineProperty(K14, "__esModule", {
    value: true
});
K14.FEATURES = void 0;
K14.enableFeature = enableFeature$1;
K14.isLoose = isLoose;
K14.shouldTransform = shouldTransform;
var W16 = D17;
const G14 = Object.freeze({
    fields: 2,
    privateMethods: 4,
    decorators: 8,
    privateIn: 16,
    staticBlocks: 32
});
K14.FEATURES = G14;
const q15 = new Map([
    [
        G14.fields,
        "@babel/plugin-proposal-class-properties"
    ],
    [
        G14.privateMethods,
        "@babel/plugin-proposal-private-methods"
    ],
    [
        G14.privateIn,
        "@babel/plugin-proposal-private-property-in-object"
    ]
]);
const Z13 = "@babel/plugin-class-features/featuresKey";
const V18 = "@babel/plugin-class-features/looseKey";
const Y14 = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
function enableFeature$1(e70, t5010, s3811) {
    if (!hasFeature(e70, t5010) || canIgnoreLoose(e70, t5010)) {
        e70.set(Z13, e70.get(Z13) | t5010);
        if ("#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === s3811) {
            setLoose(e70, t5010, true);
            e70.set(Y14, e70.get(Y14) | t5010);
        } else if ("#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === s3811) {
            setLoose(e70, t5010, false);
            e70.set(Y14, e70.get(Y14) | t5010);
        } else setLoose(e70, t5010, s3811);
    }
    let i353;
    let n2817;
    for (const [t4910, s3711] of q15){
        if (!hasFeature(e70, t4910)) continue;
        const r2316 = isLoose(e70, t4910);
        if (!canIgnoreLoose(e70, t4910)) {
            if (i353 === !r2316) throw new Error("'loose' mode configuration must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled).");
            i353 = r2316;
            n2817 = s3711;
        }
    }
    if (void 0 !== i353) {
        for (const [t5128, s3911] of q15)if (hasFeature(e70, t5128) && isLoose(e70, t5128) !== i353) {
            setLoose(e70, t5128, i353);
            console.warn(`Though the "loose" option was set to "${!i353}" in your @babel/preset-env config, it will not be used for ${s3911} since the "loose" mode option was set to "${i353}" for ${n2817}.\nThe "loose" option must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\n\t["${s3911}", { "loose": ${i353} }]\nto the "plugins" section of your Babel config.`);
        }
    }
}
function hasFeature(e71, t5210) {
    return !!(e71.get(Z13) & t5210);
}
function isLoose(e72, t53) {
    return !!(e72.get(V18) & t53);
}
function setLoose(e73, t54, s404) {
    s404 ? e73.set(V18, e73.get(V18) | t54) : e73.set(V18, e73.get(V18) & ~t54);
    e73.set(Y14, e73.get(Y14) & ~t54);
}
function canIgnoreLoose(e74, t55) {
    return !!(e74.get(Y14) & t55);
}
function shouldTransform(e75, t57) {
    let s4111 = null;
    let i362 = null;
    let n2917 = null;
    let r2415 = null;
    let a2113 = null;
    (0, W16.hasOwnDecorators)(e75.node) && (s4111 = e75.get("decorators.0"));
    for (const t56 of e75.get("body.body")){
        !s4111 && (0, W16.hasOwnDecorators)(t56.node) && (s4111 = t56.get("decorators.0"));
        !i362 && t56.isClassProperty() && (i362 = t56);
        !n2917 && t56.isClassPrivateProperty() && (n2917 = t56);
        !r2415 && null != t56.isClassPrivateMethod && t56.isClassPrivateMethod() && (r2415 = t56);
        !a2113 && null != t56.isStaticBlock && t56.isStaticBlock() && (a2113 = t56);
    }
    if (s4111 && n2917) throw n2917.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
    if (s4111 && r2415) throw r2415.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
    if (s4111 && !hasFeature(t57, G14.decorators)) throw e75.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "legacy": true }], make sure it comes *before* "@babel/plugin-proposal-class-properties" and enable loose mode, like so:\n\t["@babel/plugin-proposal-decorators", { "legacy": true }]\n\t["@babel/plugin-proposal-class-properties", { "loose": true }]');
    if (r2415 && !hasFeature(t57, G14.privateMethods)) throw r2415.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-proposal-private-method` to your configuration.");
    if ((i362 || n2917) && !hasFeature(t57, G14.fields) && !hasFeature(t57, G14.privateMethods)) throw e75.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-proposal-class-properties` to your configuration.");
    if (a2113 && !hasFeature(t57, G14.staticBlocks)) throw e75.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-proposal-class-static-block` to your configuration.");
    return !!(s4111 || r2415 || a2113) || !(!i362 && !n2917 || !hasFeature(t57, G14.fields));
}
var J13 = "default" in mod44 ? mod44.default : mod44;
var Q14 = "default" in mod21 ? mod21.default : mod21;
var X14 = "default" in mod6 ? mod6.default : mod6;
var ee12 = {};
Object.defineProperty(ee12, "__esModule", {
    value: true
});
Object.defineProperty(ee12, "FEATURES", {
    enumerable: true,
    get: function() {
        return oe12.FEATURES;
    }
});
ee12.createClassFeaturePlugin = createClassFeaturePlugin;
Object.defineProperty(ee12, "enableFeature", {
    enumerable: true,
    get: function() {
        return oe12.enableFeature;
    }
});
Object.defineProperty(ee12, "injectInitialization", {
    enumerable: true,
    get: function() {
        return ae12.injectInitialization;
    }
});
var te12 = J13;
var se12 = Q14;
var ie12 = X14;
var ne13 = m35;
var re13 = D17;
var ae12 = A19;
var oe12 = K14;
var le10 = l49;
const de10 = "7.17.9".split(".").reduce((e76, t58)=>1e5 * e76 + +t58
, 0);
const ce10 = "@babel/plugin-class-features/version";
function createClassFeaturePlugin({ name: e77 , feature: t60 , loose: s4210 , manipulateOptions: i372 , api: n3017 = {
    assumption: ()=>{}
} , inherits: r2513  }) {
    const a2213 = n3017.assumption("setPublicClassFields");
    const o = n3017.assumption("privateFieldsAsProperties");
    const l154 = n3017.assumption("constantSuper");
    const d1110 = n3017.assumption("noDocumentAll");
    if (true === s4210) {
        const t59 = [];
        void 0 !== a2213 && t59.push('"setPublicClassFields"');
        void 0 !== o && t59.push('"privateFieldsAsProperties"');
        0 !== t59.length && console.warn(`[${e77}]: You are using the "loose: true" option and you are explicitly setting a value for the ${t59.join(" and ")} assumption${t59.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:\n\t"assumptions": {\n\t\t"setPublicClassFields": true,\n\t\t"privateFieldsAsProperties": true\n\t}`);
    }
    return {
        name: e77,
        manipulateOptions: i372,
        inherits: r2513,
        pre () {
            (0, oe12.enableFeature)(this.file, t60, s4210);
            (!this.file.get(ce10) || this.file.get(ce10) < de10) && this.file.set(ce10, de10);
        },
        visitor: {
            Class (e79, s441) {
                if (this.file.get(ce10) !== de10) return;
                if (!(0, oe12.shouldTransform)(e79, this.file)) return;
                e79.isClassDeclaration() && (0, le10.assertFieldTransformed)(e79);
                const i392 = (0, oe12.isLoose)(this.file, t60);
                let n3117;
                const r2612 = (0, re13.hasDecorators)(e79.node);
                const c96 = [];
                const p74 = [];
                const u520 = [];
                const f418 = new Set;
                const b49 = e79.get("body");
                for (const e78 of b49.get("body")){
                    (e78.isClassProperty() || e78.isClassMethod()) && e78.node.computed && u520.push(e78);
                    if (e78.isPrivate()) {
                        const { name: t61  } = e78.node.key.id;
                        const s435 = `get ${t61}`;
                        const i382 = `set ${t61}`;
                        if (e78.isClassPrivateMethod()) {
                            if ("get" === e78.node.kind) {
                                if (f418.has(s435) || f418.has(t61) && !f418.has(i382)) throw e78.buildCodeFrameError("Duplicate private field");
                                f418.add(s435).add(t61);
                            } else if ("set" === e78.node.kind) {
                                if (f418.has(i382) || f418.has(t61) && !f418.has(s435)) throw e78.buildCodeFrameError("Duplicate private field");
                                f418.add(i382).add(t61);
                            }
                        } else {
                            if (f418.has(t61) && !f418.has(s435) && !f418.has(i382) || f418.has(t61) && (f418.has(s435) || f418.has(i382))) throw e78.buildCodeFrameError("Duplicate private field");
                            f418.add(t61);
                        }
                    }
                    if (e78.isClassMethod({
                        kind: "constructor"
                    })) n3117 = e78;
                    else {
                        p74.push(e78);
                        (e78.isProperty() || e78.isPrivate() || null != e78.isStaticBlock && e78.isStaticBlock()) && c96.push(e78);
                    }
                }
                if (!c96.length && !r2612) return;
                const m410 = e79.node.id;
                let y123;
                if (!m410 || e79.isClassExpression()) {
                    (0, se12.default)(e79);
                    y123 = e79.scope.generateUidIdentifier("class");
                } else y123 = te12.types.cloneNode(e79.node.id);
                const h318 = (0, ne13.buildPrivateNamesMap)(c96);
                const v311 = (0, ne13.buildPrivateNamesNodes)(h318, null != o ? o : i392, s441);
                (0, ne13.transformPrivateNamesUsage)(y123, e79, h318, {
                    privateFieldsAsProperties: null != o ? o : i392,
                    noDocumentAll: d1110,
                    innerBinding: m410
                }, s441);
                let g215, P27, N114, I115, E117;
                if (r2612) {
                    P27 = I115 = g215 = [];
                    ({ instanceNodes: N114 , wrapClass: E117  } = (0, re13.buildDecoratedClass)(y123, e79, p74, this.file));
                } else {
                    g215 = (0, ae12.extractComputedKeys)(y123, e79, u520, this.file);
                    ({ staticNodes: P27 , pureStaticNodes: I115 , instanceNodes: N114 , wrapClass: E117  } = (0, ne13.buildFieldsInitNodes)(y123, e79.node.superClass, c96, h318, s441, null != a2213 ? a2213 : i392, null != o ? o : i392, null != l154 ? l154 : i392, m410));
                }
                N114.length > 0 && (0, ae12.injectInitialization)(e79, n3117, N114, (e80, t62)=>{
                    if (!r2612) for (const s451 of c96)null != te12.types.isStaticBlock && te12.types.isStaticBlock(s451.node) || s451.node.static || s451.traverse(e80, t62);
                });
                const F114 = E117(e79);
                F114.insertBefore([
                    ...v311,
                    ...g215
                ]);
                P27.length > 0 && F114.insertAfter(P27);
                I115.length > 0 && F114.find((e81)=>e81.isStatement() || e81.isDeclaration()
                ).insertAfter(I115);
            },
            ExportDefaultDeclaration (e82) {
                if (this.file.get(ce10) !== de10) return;
                const t63 = e82.get("declaration");
                t63.isClassDeclaration() && (0, re13.hasDecorators)(t63.node) && (t63.node.id ? (0, ie12.default)(e82) : t63.node.type = "ClassExpression");
            }
        }
    };
}
const pe10 = ee12.__esModule, ue10 = ee12.FEATURES, fe9 = ee12.enableFeature, be8 = ee12.injectInitialization;
const me9 = ee12.createClassFeaturePlugin;
const mod57 = {
    FEATURES: ue10,
    __esModule: pe10,
    createClassFeaturePlugin: me9,
    default: ee12,
    enableFeature: fe9,
    injectInitialization: be8
};
var i51 = "default" in mod44 ? mod44.default : mod44;
var o57 = "default" in mod24 ? mod24.default : mod24;
var s51 = {};
Object.defineProperty(s51, "__esModule", {
    value: true
});
s51.default = transpileEnum;
s51.translateEnumValues = translateEnumValues;
var l50 = i51;
var c47 = o57;
function transpileEnum(e1, t1197) {
    const { node: r1142  } = e1;
    if (r1142.declare) {
        e1.remove();
        return;
    }
    const n2156 = r1142.id.name;
    const a179 = enumFill(e1, t1197, r1142.id);
    switch(e1.parent.type){
        case "BlockStatement":
        case "ExportNamedDeclaration":
        case "Program":
            e1.insertAfter(a179);
            if (seen(e1.parentPath)) e1.remove();
            else {
                const n1184 = t1197.isProgram(e1.parent);
                e1.scope.registerDeclaration(e1.replaceWith(makeVar(r1142.id, t1197, n1184 ? "var" : "let"))[0]);
            }
            break;
        default:
            throw new Error(`Unexpected enum parent '${e1.parent.type}`);
    }
    function seen(e2) {
        if (e2.isExportDeclaration()) return seen(e2.parentPath);
        if (e2.getData(n2156)) return true;
        e2.setData(n2156, true);
        return false;
    }
}
function makeVar(e3168, t2176, r296) {
    return t2176.variableDeclaration(r296, [
        t2176.variableDeclarator(e3168)
    ]);
}
const p42 = (0, l50.template)("\n  (function (ID) {\n    ASSIGNMENTS;\n  })(ID || (ID = {}));\n");
const d41 = (0, l50.template)('\n  ENUM["NAME"] = VALUE;\n');
const u47 = (0, l50.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n');
const buildEnumMember = (e4139, t3138)=>(e4139 ? d41 : u47)(t3138)
;
function enumFill(e5137, t4131, r368) {
    const n369 = translateEnumValues(e5137, t4131);
    const a246 = n369.map(([e6136, n455])=>buildEnumMember(t4131.isStringLiteral(n455), {
            ENUM: t4131.cloneNode(r368),
            NAME: e6136,
            VALUE: n455
        })
    );
    return p42({
        ID: t4131.cloneNode(r368),
        ASSIGNMENTS: a246
    });
}
function ReferencedIdentifier(e7127, t5129) {
    const { seen: r458 , path: n546 , t: a339  } = t5129;
    const i1137 = e7127.node.name;
    if (r458.has(i1137) && !e7127.scope.hasOwnBinding(i1137)) {
        e7127.replaceWith(a339.memberExpression(a339.cloneNode(n546.node.id), a339.cloneNode(e7127.node)));
        e7127.skip();
    }
}
const f46 = {
    ReferencedIdentifier: ReferencedIdentifier
};
function translateEnumValues(e8131, t652) {
    const r546 = new Map;
    let n644 = -1;
    let a434;
    return e8131.get("members").map((i280)=>{
        const o1103 = i280.node;
        const s1145 = t652.isIdentifier(o1103.id) ? o1103.id.name : o1103.id.value;
        const l149 = o1103.initializer;
        let p135;
        if (l149) {
            n644 = evaluate(l149, r546);
            if (void 0 !== n644) {
                r546.set(s1145, n644);
                if ("number" === typeof n644) p135 = t652.numericLiteral(n644);
                else {
                    c47("string" === typeof n644);
                    p135 = t652.stringLiteral(n644);
                }
            } else {
                const n742 = i280.get("initializer");
                n742.isReferencedIdentifier() ? ReferencedIdentifier(n742, {
                    t: t652,
                    seen: r546,
                    path: e8131
                }) : n742.traverse(f46, {
                    t: t652,
                    seen: r546,
                    path: e8131
                });
                p135 = n742.node;
                r546.set(s1145, void 0);
            }
        } else if ("number" === typeof n644) {
            n644 += 1;
            p135 = t652.numericLiteral(n644);
            r546.set(s1145, n644);
        } else {
            if ("string" === typeof n644) throw e8131.buildCodeFrameError("Enum member must have initializer.");
            {
                const n838 = t652.memberExpression(t652.cloneNode(e8131.node.id), t652.stringLiteral(a434), true);
                p135 = t652.binaryExpression("+", t652.numericLiteral(1), n838);
                r546.set(s1145, void 0);
            }
        }
        a434 = s1145;
        return [
            s1145,
            p135
        ];
    });
}
function evaluate(e9129, t748) {
    return evalConstant(e9129);
    function evalConstant(e1040) {
        switch(e1040.type){
            case "StringLiteral":
                return e1040.value;
            case "UnaryExpression":
                return evalUnaryExpression(e1040);
            case "BinaryExpression":
                return evalBinaryExpression(e1040);
            case "NumericLiteral":
                return e1040.value;
            case "ParenthesizedExpression":
                return evalConstant(e1040.expression);
            case "Identifier":
                return t748.get(e1040.name);
            case "TemplateLiteral":
                if (1 === e1040.quasis.length) return e1040.quasis[0].value.cooked;
            default:
                return;
        }
    }
    function evalUnaryExpression({ argument: e1145 , operator: t844  }) {
        const r641 = evalConstant(e1145);
        if (void 0 !== r641) switch(t844){
            case "+":
                return r641;
            case "-":
                return -r641;
            case "~":
                return ~r641;
            default:
                return;
        }
    }
    function evalBinaryExpression(e1238) {
        const t940 = evalConstant(e1238.left);
        if (void 0 === t940) return;
        const r735 = evalConstant(e1238.right);
        if (void 0 !== r735) switch(e1238.operator){
            case "|":
                return t940 | r735;
            case "&":
                return t940 & r735;
            case ">>":
                return t940 >> r735;
            case ">>>":
                return t940 >>> r735;
            case "<<":
                return t940 << r735;
            case "^":
                return t940 ^ r735;
            case "*":
                return t940 * r735;
            case "/":
                return t940 / r735;
            case "+":
                return t940 + r735;
            case "-":
                return t940 - r735;
            case "%":
                return t940 % r735;
            default:
                return;
        }
    }
}
var m36 = {};
Object.defineProperty(m36, "__esModule", {
    value: true
});
m36.default = transpileConstEnum;
var y27 = s51;
function transpileConstEnum(e1337, t1039) {
    const { name: r833  } = e1337.node.id;
    const n936 = e1337.parentPath.isExportNamedDeclaration();
    let a525 = n936;
    !a525 && t1039.isProgram(e1337.parent) && (a525 = e1337.parent.body.some((e1436)=>t1039.isExportNamedDeclaration(e1436) && !e1436.source && e1436.specifiers.some((e1535)=>t1039.isExportSpecifier(e1535) && e1535.local.name === r833
        )
    ));
    const i345 = (0, y27.translateEnumValues)(e1337, t1039);
    if (a525) {
        const a620 = t1039.objectExpression(i345.map(([e1634, r928])=>t1039.objectProperty(t1039.isValidIdentifier(e1634) ? t1039.identifier(e1634) : t1039.stringLiteral(e1634), r928)
        ));
        if (e1337.scope.hasOwnBinding(r833)) (n936 ? e1337.parentPath : e1337).replaceWith(t1039.expressionStatement(t1039.callExpression(t1039.memberExpression(t1039.identifier("Object"), t1039.identifier("assign")), [
            e1337.node.id,
            a620
        ])));
        else {
            e1337.replaceWith(t1039.variableDeclaration("var", [
                t1039.variableDeclarator(e1337.node.id, a620)
            ]));
            e1337.scope.registerDeclaration(e1337);
        }
        return;
    }
    const o270 = new Map(i345);
    e1337.scope.path.traverse({
        Scope (e1733) {
            e1733.scope.hasOwnBinding(r833) && e1733.skip();
        },
        MemberExpression (e1830) {
            if (!t1039.isIdentifier(e1830.node.object, {
                name: r833
            })) return;
            let n1035;
            if (e1830.node.computed) {
                if (!t1039.isStringLiteral(e1830.node.property)) return;
                n1035 = e1830.node.property.value;
            } else {
                if (!t1039.isIdentifier(e1830.node.property)) return;
                n1035 = e1830.node.property.name;
            }
            o270.has(n1035) && e1830.replaceWith(t1039.cloneNode(o270.get(n1035)));
        }
    });
    e1337.remove();
}
var b30 = "default" in mod44 ? mod44.default : mod44;
var g33 = {};
Object.defineProperty(g33, "__esModule", {
    value: true
});
g33.default = transpileNamespace;
var h35 = b30;
function transpileNamespace(e1929, t1198, r1026) {
    if (e1929.node.declare || "StringLiteral" === e1929.node.id.type) {
        e1929.remove();
        return;
    }
    if (!r1026) throw e1929.hub.file.buildCodeFrameError(e1929.node.id, "Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    const n1185 = e1929.node.id.name;
    const a720 = handleNested(e1929, t1198, t1198.cloneDeep(e1929.node));
    const i430 = e1929.scope.hasOwnBinding(n1185);
    if ("ExportNamedDeclaration" === e1929.parent.type) if (i430) e1929.parentPath.replaceWith(a720);
    else {
        e1929.parentPath.insertAfter(a720);
        e1929.replaceWith(getDeclaration(t1198, n1185));
        e1929.scope.registerDeclaration(e1929.parentPath);
    }
    else i430 ? e1929.replaceWith(a720) : e1929.scope.registerDeclaration(e1929.replaceWithMultiple([
        getDeclaration(t1198, n1185),
        a720
    ])[0]);
}
function getDeclaration(e2028, t1237) {
    return e2028.variableDeclaration("let", [
        e2028.variableDeclarator(e2028.identifier(t1237))
    ]);
}
function getMemberExpression(e2123, t1337, r1143) {
    return e2123.memberExpression(e2123.identifier(t1337), e2123.identifier(r1143));
}
function handleVariableDeclaration(e2321, t1435, r1224) {
    if ("const" !== e2321.kind) throw r1224.file.buildCodeFrameError(e2321, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    const { declarations: n1230  } = e2321;
    if (n1230.every((e2421)=>h35.types.isIdentifier(e2421.id)
    )) {
        for (const e2521 of n1230)e2521.init = h35.types.assignmentExpression("=", getMemberExpression(h35.types, t1435, e2521.id.name), e2521.init);
        return [
            e2321
        ];
    }
    const a812 = h35.types.getBindingIdentifiers(e2321);
    const i526 = [];
    for(const e2222 in a812)i526.push(h35.types.assignmentExpression("=", getMemberExpression(h35.types, t1435, e2222), h35.types.cloneNode(a812[e2222])));
    return [
        e2321,
        h35.types.expressionStatement(h35.types.sequenceExpression(i526))
    ];
}
function buildNestedAmbiendModuleError(e2620, t1533) {
    throw e2620.hub.buildError(t1533, "Ambient modules cannot be nested in other modules or namespaces.", Error);
}
function handleNested(e2718, t1632, r1421, n1425) {
    const a911 = new Set;
    const i622 = r1421.id;
    t1632.assertIdentifier(i622);
    const o436 = e2718.scope.generateUid(i622.name);
    const s2129 = t1632.isTSModuleBlock(r1421.body) ? r1421.body.body : [
        t1632.exportNamedDeclaration(r1421.body)
    ];
    for(let r1321 = 0; r1321 < s2129.length; r1321++){
        const n1325 = s2129[r1321];
        switch(n1325.type){
            case "TSModuleDeclaration":
                {
                    if (!t1632.isIdentifier(n1325.id)) throw buildNestedAmbiendModuleError(e2718, n1325);
                    const i719 = handleNested(e2718, t1632, n1325);
                    const o354 = n1325.id.name;
                    if (a911.has(o354)) s2129[r1321] = i719;
                    else {
                        a911.add(o354);
                        s2129.splice(r1321++, 1, getDeclaration(t1632, o354), i719);
                    }
                    continue;
                }
            case "TSEnumDeclaration":
            case "FunctionDeclaration":
            case "ClassDeclaration":
                a911.add(n1325.id.name);
                continue;
            case "VariableDeclaration":
                for(const e2818 in t1632.getBindingIdentifiers(n1325))a911.add(e2818);
                continue;
            default:
                continue;
            case "ExportNamedDeclaration":
        }
        switch(n1325.declaration.type){
            case "TSEnumDeclaration":
            case "FunctionDeclaration":
            case "ClassDeclaration":
                {
                    const e2918 = n1325.declaration.id.name;
                    a911.add(e2918);
                    s2129.splice(r1321++, 1, n1325.declaration, t1632.expressionStatement(t1632.assignmentExpression("=", getMemberExpression(t1632, o436, e2918), t1632.identifier(e2918))));
                    break;
                }
            case "VariableDeclaration":
                {
                    const t1727 = handleVariableDeclaration(n1325.declaration, o436, e2718.hub);
                    s2129.splice(r1321, t1727.length, ...t1727);
                    r1321 += t1727.length - 1;
                    break;
                }
            case "TSModuleDeclaration":
                {
                    if (!t1632.isIdentifier(n1325.declaration.id)) throw buildNestedAmbiendModuleError(e2718, n1325.declaration);
                    const i818 = handleNested(e2718, t1632, n1325.declaration, t1632.identifier(o436));
                    const l232 = n1325.declaration.id.name;
                    if (a911.has(l232)) s2129[r1321] = i818;
                    else {
                        a911.add(l232);
                        s2129.splice(r1321++, 1, getDeclaration(t1632, l232), i818);
                    }
                }
        }
    }
    let l323 = t1632.objectExpression([]);
    if (n1425) {
        const e3016 = t1632.memberExpression(n1425, i622);
        l323 = h35.template.expression.ast`
      ${t1632.cloneNode(e3016)} ||
        (${t1632.cloneNode(e3016)} = ${l323})
    `;
    }
    return h35.template.statement.ast`
    (function (${t1632.identifier(o436)}) {
      ${s2129}
    })(${i622} || (${t1632.cloneNode(i622)} = ${l323}));
  `;
}
var v32 = "default" in mod45 ? mod45.default : mod45;
var E22 = "default" in mod53 ? mod53.default : mod53;
var x24 = "default" in mod44 ? mod44.default : mod44;
var D18 = "default" in mod57 ? mod57.default : mod57;
var T20 = {};
Object.defineProperty(T20, "__esModule", {
    value: true
});
T20.default = void 0;
var S24 = v32;
var N19 = E22;
var P21 = x24;
var I22 = D18;
var w22 = m36;
var M21 = s51;
var C25 = g33;
function isInType1(e3169) {
    switch(e3169.parent.type){
        case "TSTypeReference":
        case "TSQualifiedName":
        case "TSExpressionWithTypeArguments":
        case "TSTypeQuery":
            return true;
        case "ExportSpecifier":
            return "type" === e3169.parentPath.parent.exportKind;
        default:
            return false;
    }
}
const A20 = new WeakMap;
const F21 = new WeakMap;
const k19 = new WeakSet;
function isGlobalType(e3214, t1825) {
    const r1519 = e3214.find((e3314)=>e3314.isProgram()
    ).node;
    if (e3214.scope.hasOwnBinding(t1825)) return false;
    if (A20.get(r1519).has(t1825)) return true;
    console.warn(`The exported identifier "${t1825}" is not declared in Babel's scope tracker\nas a JavaScript value binding, and "@babel/plugin-transform-typescript"\nnever encountered it as a TypeScript type declaration.\nIt will be treated as a JavaScript value.\n\nThis problem is likely caused by another plugin injecting\n"${t1825}" without registering it in the scope tracker. If you are the author\n of that plugin, please use "scope.registerDeclaration(declarationPath)".`);
    return false;
}
function registerGlobalType(e3413, t1925) {
    A20.get(e3413).add(t1925);
}
var B18 = (0, S24.declare)((e3513, t2024)=>{
    e3513.assertVersion(7);
    const r1618 = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/;
    const { allowNamespaces: n1524 = true , jsxPragma: a1011 = "React.createElement" , jsxPragmaFrag: i918 = "React.Fragment" , onlyRemoveTypeImports: o532 = false , optimizeConstEnums: s3109 = false  } = t2024;
    var { allowDeclareFields: l422 = false  } = t2024;
    const c155 = {
        field (e3613) {
            const { node: t2177  } = e3613;
            if (!l422 && t2177.declare) throw e3613.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (t2177.declare) {
                if (t2177.value) throw e3613.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
                t2177.decorators || e3613.remove();
            } else if (t2177.definite) {
                if (t2177.value) throw e3613.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
                l422 || t2177.decorators || e3613.remove();
            } else l422 || t2177.value || t2177.decorators || P21.types.isClassPrivateProperty(t2177) || e3613.remove();
            t2177.accessibility && (t2177.accessibility = null);
            t2177.abstract && (t2177.abstract = null);
            t2177.readonly && (t2177.readonly = null);
            t2177.optional && (t2177.optional = null);
            t2177.typeAnnotation && (t2177.typeAnnotation = null);
            t2177.definite && (t2177.definite = null);
            t2177.declare && (t2177.declare = null);
            t2177.override && (t2177.override = null);
        },
        method ({ node: e3712  }) {
            e3712.accessibility && (e3712.accessibility = null);
            e3712.abstract && (e3712.abstract = null);
            e3712.optional && (e3712.optional = null);
            e3712.override && (e3712.override = null);
        },
        constructor (e3812, t2323) {
            e3812.node.accessibility && (e3812.node.accessibility = null);
            const r1718 = [];
            for (const t2224 of e3812.node.params)if ("TSParameterProperty" === t2224.type && !k19.has(t2224.parameter)) {
                k19.add(t2224.parameter);
                r1718.push(t2224.parameter);
            }
            if (r1718.length) {
                const n1623 = r1718.map((t2420)=>{
                    let r1817;
                    if (P21.types.isIdentifier(t2420)) r1817 = t2420;
                    else {
                        if (!P21.types.isAssignmentPattern(t2420) || !P21.types.isIdentifier(t2420.left)) throw e3812.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                        r1817 = t2420.left;
                    }
                    return P21.template.statement.ast`
              this.${P21.types.cloneNode(r1817)} = ${P21.types.cloneNode(r1817)}`;
                });
                (0, I22.injectInitialization)(t2323, e3812, n1623);
            }
        }
    };
    return {
        name: "transform-typescript",
        inherits: N19.default,
        visitor: {
            Pattern: visitPattern,
            Identifier: visitPattern,
            RestElement: visitPattern,
            Program: {
                enter (e40, t2518) {
                    const { file: n1722  } = t2518;
                    let s436 = null;
                    let l516 = null;
                    const c226 = e40.node;
                    A20.has(c226) || A20.set(c226, new Set);
                    if (n1722.ast.comments) for (const e39 of n1722.ast.comments){
                        const t2617 = r1618.exec(e39.value);
                        t2617 && (t2617[1] ? l516 = t2617[2] : s436 = t2617[2]);
                    }
                    let p225 = s436 || a1011;
                    p225 && ([p225] = p225.split("."));
                    let d130 = l516 || i918;
                    d130 && ([d130] = d130.split("."));
                    for (let r1916 of e40.get("body"))if (r1916.isImportDeclaration()) {
                        F21.has(t2518.file.ast.program) || F21.set(t2518.file.ast.program, true);
                        if ("type" === r1916.node.importKind) {
                            for (const e42 of r1916.node.specifiers)registerGlobalType(c226, e42.local.name);
                            r1916.remove();
                            continue;
                        }
                        const n1822 = new Set;
                        const a1120 = r1916.node.specifiers.length;
                        const isAllSpecifiersElided = ()=>a1120 > 0 && a1120 === n1822.size
                        ;
                        for (const e43 of r1916.node.specifiers)if ("ImportSpecifier" === e43.type && "type" === e43.importKind) {
                            registerGlobalType(c226, e43.local.name);
                            const t2717 = r1916.scope.getBinding(e43.local.name);
                            t2717 && n1822.add(t2717.path);
                        }
                        if (o532) F21.set(e40.node, false);
                        else {
                            if (0 === r1916.node.specifiers.length) {
                                F21.set(e40.node, false);
                                continue;
                            }
                            for (const t2817 of r1916.node.specifiers){
                                const a1216 = r1916.scope.getBinding(t2817.local.name);
                                a1216 && !n1822.has(a1216.path) && (isImportTypeOnly({
                                    binding: a1216,
                                    programPath: e40,
                                    pragmaImportName: p225,
                                    pragmaFragImportName: d130
                                }) ? n1822.add(a1216.path) : F21.set(e40.node, false));
                            }
                        }
                        if (isAllSpecifiersElided()) r1916.remove();
                        else for (const e41 of n1822)e41.remove();
                    } else {
                        r1916.isExportDeclaration() && (r1916 = r1916.get("declaration"));
                        if (r1916.isVariableDeclaration({
                            declare: true
                        })) for (const e44 of Object.keys(r1916.getBindingIdentifiers()))registerGlobalType(c226, e44);
                        else (r1916.isTSTypeAliasDeclaration() || r1916.isTSDeclareFunction() && r1916.get("id").isIdentifier() || r1916.isTSInterfaceDeclaration() || r1916.isClassDeclaration({
                            declare: true
                        }) || r1916.isTSEnumDeclaration({
                            declare: true
                        }) || r1916.isTSModuleDeclaration({
                            declare: true
                        }) && r1916.get("id").isIdentifier()) && registerGlobalType(c226, r1916.node.id.name);
                    }
                },
                exit (e45) {
                    "module" === e45.node.sourceType && F21.get(e45.node) && e45.pushContainer("body", P21.types.exportNamedDeclaration());
                }
            },
            ExportNamedDeclaration (e46, t2916) {
                F21.has(t2916.file.ast.program) || F21.set(t2916.file.ast.program, true);
                "type" !== e46.node.exportKind ? e46.node.source && e46.node.specifiers.length > 0 && e46.node.specifiers.every((e47)=>"ExportSpecifier" === e47.type && "type" === e47.exportKind
                ) || !e46.node.source && e46.node.specifiers.length > 0 && e46.node.specifiers.every((t3016)=>P21.types.isExportSpecifier(t3016) && isGlobalType(e46, t3016.local.name)
                ) ? e46.remove() : F21.set(t2916.file.ast.program, false) : e46.remove();
            },
            ExportSpecifier (e48) {
                const t3139 = e48.parent;
                (!t3139.source && isGlobalType(e48, e48.node.local.name) || "type" === e48.node.exportKind) && e48.remove();
            },
            ExportDefaultDeclaration (e49, t3215) {
                F21.has(t3215.file.ast.program) || F21.set(t3215.file.ast.program, true);
                P21.types.isIdentifier(e49.node.declaration) && isGlobalType(e49, e49.node.declaration.name) ? e49.remove() : F21.set(t3215.file.ast.program, false);
            },
            TSDeclareFunction (e50) {
                e50.remove();
            },
            TSDeclareMethod (e51) {
                e51.remove();
            },
            VariableDeclaration (e52) {
                e52.node.declare && e52.remove();
            },
            VariableDeclarator ({ node: e53  }) {
                e53.definite && (e53.definite = null);
            },
            TSIndexSignature (e54) {
                e54.remove();
            },
            ClassDeclaration (e55) {
                const { node: t3315  } = e55;
                t3315.declare && e55.remove();
            },
            Class (e56) {
                const { node: t3415  } = e56;
                t3415.typeParameters && (t3415.typeParameters = null);
                t3415.superTypeParameters && (t3415.superTypeParameters = null);
                t3415.implements && (t3415.implements = null);
                t3415.abstract && (t3415.abstract = null);
                e56.get("body.body").forEach((t3515)=>{
                    t3515.isClassMethod() || t3515.isClassPrivateMethod() ? "constructor" === t3515.node.kind ? c155.constructor(t3515, e56) : c155.method(t3515) : (t3515.isClassProperty() || t3515.isClassPrivateProperty()) && c155.field(t3515);
                });
            },
            Function (e58) {
                const { node: t3615 , scope: r2013  } = e58;
                t3615.typeParameters && (t3615.typeParameters = null);
                t3615.returnType && (t3615.returnType = null);
                const n1921 = t3615.params;
                n1921.length > 0 && P21.types.isIdentifier(n1921[0], {
                    name: "this"
                }) && n1921.shift();
                const a1315 = e58.get("params");
                for (const e57 of a1315)if ("TSParameterProperty" === e57.type) {
                    e57.replaceWith(e57.get("parameter"));
                    r2013.registerBinding("param", e57);
                }
            },
            TSModuleDeclaration (e59) {
                (0, C25.default)(e59, P21.types, n1524);
            },
            TSInterfaceDeclaration (e60) {
                e60.remove();
            },
            TSTypeAliasDeclaration (e61) {
                e61.remove();
            },
            TSEnumDeclaration (e62) {
                s3109 && e62.node.const ? (0, w22.default)(e62, P21.types) : (0, M21.default)(e62, P21.types);
            },
            TSImportEqualsDeclaration (e63) {
                if (P21.types.isTSExternalModuleReference(e63.node.moduleReference)) throw e63.buildCodeFrameError(`\`import ${e63.node.id.name} = require('${e63.node.moduleReference.expression.value}')\` is not supported by @babel/plugin-transform-typescript\nPlease consider using \`import ${e63.node.id.name} from '${e63.node.moduleReference.expression.value}';\` alongside Typescript's --allowSyntheticDefaultImports option.`);
                e63.replaceWith(P21.types.variableDeclaration("var", [
                    P21.types.variableDeclarator(e63.node.id, entityNameToExpr(e63.node.moduleReference))
                ]));
            },
            TSExportAssignment (e64) {
                throw e64.buildCodeFrameError("`export =` is not supported by @babel/plugin-transform-typescript\nPlease consider using `export <value>;`.");
            },
            TSTypeAssertion (e65) {
                e65.replaceWith(e65.node.expression);
            },
            TSAsExpression (e66) {
                let { node: t3714  } = e66;
                do {
                    t3714 = t3714.expression;
                }while (P21.types.isTSAsExpression(t3714))
                e66.replaceWith(t3714);
            },
            TSNonNullExpression (e67) {
                e67.replaceWith(e67.node.expression);
            },
            CallExpression (e68) {
                e68.node.typeParameters = null;
            },
            OptionalCallExpression (e69) {
                e69.node.typeParameters = null;
            },
            NewExpression (e70) {
                e70.node.typeParameters = null;
            },
            JSXOpeningElement (e71) {
                e71.node.typeParameters = null;
            },
            TaggedTemplateExpression (e72) {
                e72.node.typeParameters = null;
            }
        }
    };
    function entityNameToExpr(e73) {
        return P21.types.isTSQualifiedName(e73) ? P21.types.memberExpression(entityNameToExpr(e73.left), e73.right) : e73;
    }
    function visitPattern({ node: e74  }) {
        e74.typeAnnotation && (e74.typeAnnotation = null);
        P21.types.isIdentifier(e74) && e74.optional && (e74.optional = null);
    }
    function isImportTypeOnly({ binding: e75 , programPath: t3914 , pragmaImportName: r2121 , pragmaFragImportName: n2021  }) {
        for (const t3814 of e75.referencePaths)if (!isInType1(t3814)) return false;
        if (e75.identifier.name !== r2121 && e75.identifier.name !== n2021) return true;
        let a1414 = false;
        t3914.traverse({
            "JSXElement|JSXFragment" (e76) {
                a1414 = true;
                e76.stop();
            }
        });
        return !a1414;
    }
});
T20.default = B18;
const V19 = T20.__esModule;
const mod58 = {
    __esModule: V19,
    default: T20
};
var t53 = "default" in mod45 ? mod45.default : mod45;
var o58 = "default" in mod58 ? mod58.default : mod58;
var l51 = "default" in mod35 ? mod35.default : mod35;
var i52 = {};
Object.defineProperty(i52, "__esModule", {
    value: true
});
var n59 = t53;
var r67 = o58;
var u48 = l51;
function _interopDefaultLegacy1(e1) {
    return e1 && "object" === typeof e1 && "default" in e1 ? e1 : {
        default: e1
    };
}
var m37 = _interopDefaultLegacy1(r67);
const p43 = new u48.OptionValidator("@babel/preset-typescript");
function normalizeOptions2(e2 = {}) {
    let { allowNamespaces: a180 = true , jsxPragma: s1146 , onlyRemoveTypeImports: t1199  } = e2;
    const o1104 = {
        allExtensions: "allExtensions",
        allowNamespaces: "allowNamespaces",
        disallowAmbiguousJSXLike: "disallowAmbiguousJSXLike",
        isTSX: "isTSX",
        jsxPragma: "jsxPragma",
        jsxPragmaFrag: "jsxPragmaFrag",
        onlyRemoveTypeImports: "onlyRemoveTypeImports",
        optimizeConstEnums: "optimizeConstEnums"
    };
    const l150 = p43.validateStringOption(o1104.jsxPragmaFrag, e2.jsxPragmaFrag, "React.Fragment");
    const i1138 = p43.validateBooleanOption(o1104.allExtensions, e2.allExtensions, false);
    const n1186 = p43.validateBooleanOption(o1104.isTSX, e2.isTSX, false);
    n1186 && p43.invariant(i1138, "isTSX:true requires allExtensions:true");
    const r1144 = p43.validateBooleanOption(o1104.disallowAmbiguousJSXLike, e2.disallowAmbiguousJSXLike, false);
    r1144 && p43.invariant(i1138, "disallowAmbiguousJSXLike:true requires allExtensions:true");
    const u149 = p43.validateBooleanOption(o1104.optimizeConstEnums, e2.optimizeConstEnums, false);
    return {
        allExtensions: i1138,
        allowNamespaces: a180,
        disallowAmbiguousJSXLike: r1144,
        isTSX: n1186,
        jsxPragma: s1146,
        jsxPragmaFrag: l150,
        onlyRemoveTypeImports: t1199,
        optimizeConstEnums: u149
    };
}
var g34 = n59.declare((e3170, a247)=>{
    e3170.assertVersion(7);
    const { allExtensions: s2130 , allowNamespaces: t2178 , disallowAmbiguousJSXLike: o275 , isTSX: l233 , jsxPragma: i285 , jsxPragmaFrag: n2157 , onlyRemoveTypeImports: r297 , optimizeConstEnums: u235  } = normalizeOptions2(a247);
    const pluginOptions = (e4140, s3113)=>({
            allowDeclareFields: a247.allowDeclareFields,
            allowNamespaces: t2178,
            disallowAmbiguousJSXLike: s3113,
            isTSX: e4140,
            jsxPragma: i285,
            jsxPragmaFrag: n2157,
            onlyRemoveTypeImports: r297,
            optimizeConstEnums: u235
        })
    ;
    return {
        overrides: s2130 ? [
            {
                plugins: [
                    [
                        m37.default,
                        pluginOptions(l233, o275)
                    ]
                ]
            }
        ] : [
            {
                test: /\.ts$/,
                plugins: [
                    [
                        m37.default,
                        pluginOptions(false, false)
                    ]
                ]
            },
            {
                test: /\.mts$/,
                sourceType: "module",
                plugins: [
                    [
                        m37.default,
                        pluginOptions(false, true)
                    ]
                ]
            },
            {
                test: /\.cts$/,
                sourceType: "script",
                plugins: [
                    [
                        m37.default,
                        pluginOptions(false, true)
                    ]
                ]
            },
            {
                test: /\.tsx$/,
                plugins: [
                    [
                        m37.default,
                        pluginOptions(true, false)
                    ]
                ]
            }
        ]
    };
});
i52.default = g34;
i52.__esModule;
const isArray = Array.isArray || ((arg)=>Object.prototype.toString.call(arg) === "[object Array]"
);
function loadBuiltin(builtinTable, name) {
    if (isArray(name) && typeof name[0] === "string") {
        if (Object.prototype.hasOwnProperty.call(builtinTable, name[0])) {
            return [
                builtinTable[name[0]]
            ].concat(name.slice(1));
        }
        return;
    } else if (typeof name === "string") {
        return builtinTable[name];
    }
    return name;
}
function processOptions(options) {
    const presets = (options.presets || []).map((presetName)=>{
        const preset = loadBuiltin(availablePresets, presetName);
        if (preset) {
            if (isArray(preset) && typeof preset[0] === "object" && Object.prototype.hasOwnProperty.call(preset[0], "buildPreset")) {
                preset[0] = {
                    ...preset[0],
                    buildPreset: preset[0].buildPreset
                };
            }
        } else {
            throw new Error(`Invalid preset specified in Babel options: "${presetName}"`);
        }
        return preset;
    });
    const plugins = (options.plugins || []).map((pluginName)=>{
        const plugin = loadBuiltin(availablePlugins, pluginName);
        if (!plugin) {
            throw new Error(`Invalid plugin specified in Babel options: "${pluginName}"`);
        }
        return plugin;
    });
    return {
        babelrc: false,
        ...options,
        presets,
        plugins
    };
}
function transform(code, options) {
    return P17(code, processOptions(options));
}
const availablePlugins = {};
const availablePresets = {};
function registerPlugin(name, plugin) {
    if (Object.prototype.hasOwnProperty.call(availablePlugins, name)) {
        console.warn(`A plugin named "${name}" is already registered, it will be overridden`);
    }
    availablePlugins[name] = plugin;
}
function registerPlugins(newPlugins) {
    Object.keys(newPlugins).forEach((name)=>registerPlugin(name, newPlugins[name])
    );
}
function registerPreset(name, preset) {
    if (Object.prototype.hasOwnProperty.call(availablePresets, name)) {
        if (name === "env") {
            console.warn("@babel/preset-env is now included in @babel/standalone, please remove @babel/preset-env-standalone");
        } else {
            console.warn(`A preset named "${name}" is already registered, it will be overridden`);
        }
    }
    availablePresets[name] = preset;
}
function registerPresets(newPresets) {
    Object.keys(newPresets).forEach((name)=>registerPreset(name, newPresets[name])
    );
}
registerPresets({
    react: m32,
    typescript: i52
});
function onDOMContentLoaded() {
    transformScriptTags();
}
if (typeof window !== "undefined" && window?.addEventListener) {
    window.addEventListener("DOMContentLoaded", onDOMContentLoaded, false);
}
function transformScriptTags(scriptTags) {
    runScripts(transform, scriptTags);
}
const babelTransform = async (code)=>transform(code, {
        compact: false,
        sourceType: "module",
        comments: false,
        presets: [
            [
                "react",
                {
                    "runtime": "automatic",
                    "development": false,
                    "importSource": "@emotion/react"
                }, 
            ],
            [
                "typescript",
                {
                    isTSX: true,
                    jsxPragma: "jsx",
                    allExtensions: true
                }
            ], 
        ]
    }).code || ""
;
function runScripts(transformFn, scripts) {
    headEl = document.getElementsByTagName("head")[0];
    if (!scripts) {
        scripts = document.getElementsByTagName("script");
    }
    const jsxScripts = [];
    for(let i286 = 0; i286 < scripts.length; i286++){
        const script = scripts.item(i286);
        const type = script.type.split(";")[0];
        if (scriptTypes.indexOf(type) !== -1) {
            jsxScripts.push(script);
        }
    }
    if (jsxScripts.length === 0) {
        return;
    }
    console.warn("You are using the in-browser Babel transformer. Be sure to precompile " + "your scripts for production - https://babeljs.io/docs/setup/");
    loadScripts(transformFn, jsxScripts);
}
export { registerPlugin as registerPlugin };
export { registerPlugins as registerPlugins };
export { registerPreset as registerPreset };
export { registerPresets as registerPresets };
export { babelTransform as babelTransform };

