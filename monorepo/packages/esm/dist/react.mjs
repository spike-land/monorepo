var e=window.React,{createContext:t}=e,{useDebugValue:o}=e,{useState:n}=e,{useId:s}=e,{useRef:r}=e,{useContext:c}=e,{useEffect:a}=e,p=function(){return globalThis.renderToString?()=>{}:e.useLayoutEffect(...arguments)},{useReducer:u}=e,{useCallback:x}=e,{forwardRef:l}=e,{createElement:f}=e,{createFactory:m}=e,{createRef:i}=e,{Fragment:d}=e,{Component:R}=e,{Suspense:g}=e,{isValidElement:y}=e,{memo:C}=e,{useImperativeHandle:E}=e,{Children:b}=e,{lazy:w}=e,{isLazy:V}=e,{useMemo:k}=e,{cloneElement:D}=e,L=e;export{b as Children,R as Component,d as Fragment,g as Suspense,D as cloneElement,t as createContext,f as createElement,m as createFactory,i as createRef,L as default,l as forwardRef,V as isLazy,y as isValidElement,w as lazy,C as memo,x as useCallback,c as useContext,o as useDebugValue,a as useEffect,s as useId,E as useImperativeHandle,p as useLayoutEffect,k as useMemo,u as useReducer,r as useRef,n as useState};
